pkgname=llvm-git
pkgdesc="LLVM Toolchain with clang, clang-tools-extra, compiler-rt, openmp, polly, lldb, lld (PGO+LTO Optimized)"
pkgver=20.0.0_r519709.e573c6b67eb7
pkgrel=1
arch=('x86_64')
url="https://llvm.org/"
license=('Apache-2.0 WITH LLVM-exception')
provides=('aur-llvm-git' 'compiler-rt-git' 'clang-git' 'lld-git' 'polly-git' 'aur-llvm-libs-git'
          'llvm-libs' 'openmp-git' 'pstl-git'
          'llvm' 'compiler-rt' 'clang' 'polly' 'lld' 'openmp' 'pstl')
conflicts=('llvm' 'compiler-rt' 'clang' 'polly' 'lld' 'llvm-libs' 'openmp' 'pstl')
depends=('libelf' 'libffi' 'libedit' 'libxml2' 'ncurses')
_ocaml_ver=5.2.0
makedepends=(
    'git' 'ninja' 'cmake' 'z3'
    "ocaml>=${_ocaml_ver}" 'ocaml-ctypes' 'ocaml-findlib' 'ocaml-stdlib-shims'
    'python-setuptools' 'python-psutil'
    'python-recommonmark' 'clang' 'lld' 'llvm-libs' 'llvm'
)
makedepends_x86_64=('lib32-gcc-libs')
source=(
    "llvm-project::git+https://github.com/llvm/llvm-project.git"
    'llvm-config.h'
    'fmafusion.patch'
    'haswell.patch'
    'corecount.patch'
)
sha256sums=('SKIP'
            '597dc5968c695bbdbb0eac9e8eb5117fcd2773bc91edf5ec103ecffffab8bc48'
            '593ed385298623711070dffce9225cb448dfc29f30c9d950887882b19bd124fb')
options=('staticlibs')

error_exit() {
    echo -e "\e[1;31mError: $1\e[0m"
    exit 1
}

pkgver() {
    cd llvm-project/cmake/Modules

    # This will almost match the output of `llvm-config --version` when the
    # LLVM_APPEND_VC_REV cmake flag is turned on. The only difference is
    # dash being replaced with underscore because of Pacman requirements.
    local _pkgver=$(awk -F 'MAJOR |MINOR |PATCH |)' \
            'BEGIN { ORS="." ; i=0 } \
             /set\(LLVM_VERSION_/ { print $2 ; i++ ; if (i==2) ORS="" } \
             END { print "\n" }' \
             LLVMVersion.cmake)_r$(git rev-list --count HEAD).$(git rev-parse --short HEAD)
    echo "$_pkgver"
}

apply_patch() {
    local action=$1
    local patch=$2
    echo -e "\E[1;33m ${action} patch: ${patch}\E[0m"
    patch --forward --strip=1 --input="${srcdir}/${patch}"
}

prepare() {
    cd "${srcdir}/llvm-project" || error_exit "Can't cd to ${srcdir}/llvm-project directory! Prepare Failed!"

    apply_patch "Apply" "fmafusion.patch"
    apply_patch "Apply" "corecount.patch"
    apply_patch "Apply" "haswell.patch"
}

build_instrumented() {
    echo -e "\e[1;32mStarting minimal instrumented build for PGO data collection...\e[0m"
    local build_dir="${srcdir}/llvm-project/build_instrumented"
    local install_dir="${srcdir}/llvm-project/install_instrumented"
    local clang_bin
    local clangxx_bin

    mkdir -p "${build_dir}"
    mkdir -p "${install_dir}"
    cd "${build_dir}" || error_exit "Can't cd to ${build_dir}!"

    # CMAKE configuration with minimal components for PGO
    cmake -S ../llvm -B . -G Ninja \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX="${install_dir}" \
        -DLLVM_BINUTILS_INCDIR=/usr/include \
        -DLLVM_HOST_TRIPLE="${CHOST}" \
        -DLLVM_DEFAULT_TARGET_TRIPLE="x86_64-pc-linux-gnu" \
        -DLLVM_BUILD_RUNTIME=ON \
        -DLLVM_BUILD_LLVM_DYLIB=ON \
        -DLLVM_LINK_LLVM_DYLIB=ON \
        -DCLANG_LINK_CLANG_DYLIB=ON \
        -DLLVM_TOOLCHAIN_TOOLS="clang;lld;llvm-profdata;opt" \
        -DCMAKE_C_FLAGS="${CFLAGS} -g0 -Wp,-D_FORTIFY_SOURCE=0" \
        -DCMAKE_CXX_FLAGS="${CXXFLAGS} -g0 -Wp,-D_FORTIFY_SOURCE=0" \
        -DCMAKE_EXE_LINKER_FLAGS="${LDFLAGS}" \
        -DCMAKE_MODULE_LINKER_FLAGS="${LDFLAGS}" \
        -DCMAKE_SHARED_LINKER_FLAGS="${LDFLAGS}" \
        -DLLVM_INCLUDE_BENCHMARKS=OFF \
        -DLLVM_INCLUDE_TESTS=OFF \
        -DLLVM_INCLUDE_EXAMPLES=OFF \
        -DLLVM_BUILD_DOCS=OFF \
        -DLLVM_INCLUDE_DOCS=OFF \
        -DLLVM_ENABLE_OCAMLDOC=OFF \
        -DLLVM_ENABLE_SPHINX=OFF \
        -DLLVM_ENABLE_DOXYGEN=OFF \
        -DLLVM_ENABLE_BINDINGS=OFF \
        -DLLVM_ENABLE_Z3_SOLVER=OFF \
        -DLLVM_ENABLE_ZLIB=ON \
        -DLLVM_ENABLE_ZSTD=ON \
        -DLLVM_TARGETS_TO_BUILD="X86" \
        -DLLVM_ENABLE_PROJECTS="clang;lld;compiler-rt" \
        -DCOMPILER_RT_BUILD_PROFILE=ON \
        -DCOMPILER_RT_BUILD_SANITIZERS=OFF \
        -DCOMPILER_RT_BUILD_XRAY=OFF \
        -DCOMPILER_RT_BUILD_LIBFUZZER=OFF \
        -DCOMPILER_RT_BUILD_MEMPROF=OFF \
        -DCOMPILER_RT_BUILD_BUILTINS=ON \
        -DLLVM_ENABLE_ASSERTIONS=OFF \
        -DLLVM_ENABLE_EXPENSIVE_CHECKS=OFF \
        -DLLVM_ENABLE_BACKTRACES=OFF \
        -DLLVM_ENABLE_CRASH_OVERRIDES=OFF \
        -DLLVM_ENABLE_FFI=OFF \
        -DLLVM_ENABLE_RTTI=ON \
        -DLLVM_ENABLE_PLUGINS=ON

    echo -e "\e[1;32mBuilding and installing minimal instrumented compiler...\e[0m"
    ninja -C . clang llvm-profdata opt compiler-rt
    ninja -C . install

    # Set up the path to use our instrumented compiler
    export PATH="${install_dir}/bin:$PATH"
    export LD_LIBRARY_PATH="${install_dir}/lib:$LD_LIBRARY_PATH"
    export LIBRARY_PATH="${install_dir}/lib:$LIBRARY_PATH"

    echo -e "\e[1;32mGenerating test files for PGO data collection...\e[0m"
    mkdir -p "${srcdir}/pgo-data"
    export LLVM_PROFILE_FILE="${srcdir}/pgo-data/profile-%p-%m.profraw"

    clang_bin="${install_dir}/bin/clang"
    clangxx_bin="${install_dir}/bin/clang++"

    # Create a header file with common utilities
    cat > "${srcdir}/utils.hpp" << 'EOF'
#pragma once
#include <random>
#include <chrono>
#include <vector>
#include <memory>
#include <functional>

namespace utils {
    inline std::mt19937& get_rng() {
        static std::random_device rd;
        static std::mt19937 gen(rd());
        return gen;
    }

    template<typename T>
    std::vector<T> generate_random_data(size_t size, T min, T max) {
        std::vector<T> data(size);
        std::uniform_real_distribution<T> dist(min, max);
        for(auto& x : data) {
            x = dist(get_rng());
        }
        return data;
    }

    template<typename F>
    double measure_time(F&& func) {
        auto start = std::chrono::high_resolution_clock::now();
        func();
        auto end = std::chrono::high_resolution_clock::now();
        return std::chrono::duration<double>(end - start).count();
    }
}
EOF

    # Create advanced C++ examples
    cat > "${srcdir}/example_advanced.cpp" << 'EOF'
#include "utils.hpp"
#include <iostream>
#include <algorithm>
#include <numeric>
#include <execution>
#include <thread>
#include <future>
#include <queue>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <string>
#include <sstream>
#include <variant>
#include <optional>

// Complex number operations
template<typename T>
struct Complex {
    T real, imag;
    Complex operator*(const Complex& other) const {
        return {real * other.real - imag * other.imag,
                real * other.imag + imag * other.real};
    }
    Complex operator+(const Complex& other) const {
        return {real + other.real, imag + other.imag};
    }
};

// Matrix operations with SIMD potential
template<typename T>
class Matrix {
    std::vector<T> data;
    size_t rows, cols;
public:
    Matrix(size_t r, size_t c) : data(r * c), rows(r), cols(c) {}

    void multiply(const Matrix& other, Matrix& result) {
        for(size_t i = 0; i < rows; ++i) {
            for(size_t j = 0; j < other.cols; ++j) {
                T sum = 0;
                for(size_t k = 0; k < cols; ++k) {
                    sum += data[i * cols + k] * other.data[k * other.cols + j];
                }
                result.data[i * other.cols + j] = sum;
            }
        }
    }
};

// Parallel merge sort implementation
template<typename T>
void parallel_merge_sort(std::vector<T>& arr, size_t threads = 4) {
    if(arr.size() <= 1000 || threads <= 1) {
        std::sort(arr.begin(), arr.end());
        return;
    }

    auto mid = arr.size() / 2;
    std::vector<T> left(arr.begin(), arr.begin() + mid);
    std::vector<T> right(arr.begin() + mid, arr.end());

    auto future = std::async(std::launch::async,
        [&left, threads]() { parallel_merge_sort(left, threads / 2); });
    parallel_merge_sort(right, threads / 2);
    future.wait();

    std::merge(left.begin(), left.end(),
               right.begin(), right.end(),
               arr.begin());
}

// String processing with various algorithms
void string_processing() {
    std::vector<std::string> words = {
        "algorithm", "template", "container", "iterator",
        "polymorphism", "inheritance", "encapsulation"
    };

    // String operations
    for(auto& word : words) {
        std::transform(word.begin(), word.end(), word.begin(),
                      [](char c) { return std::toupper(c); });
    }

    // String searching and matching
    std::string text = "The quick brown fox jumps over the lazy dog";
    std::string pattern = "fox";
    auto it = std::search(text.begin(), text.end(),
                         std::boyer_moore_horspool_searcher(
                             pattern.begin(), pattern.end()));
}

// Data structure operations
void data_structure_ops() {
    // Map operations
    std::map<int, std::string> ordered_map;
    std::unordered_map<int, std::string> hash_map;

    for(int i = 0; i < 1000; ++i) {
        auto val = std::to_string(i);
        ordered_map[i] = val;
        hash_map[i] = val;
    }

    // Set operations
    std::set<int> ordered_set;
    std::unordered_set<int> hash_set;

    for(int i = 0; i < 1000; ++i) {
        ordered_set.insert(i);
        hash_set.insert(i);
    }
}

int main() {
    const size_t size = 1000000;

    // Vector operations
    auto vec = utils::generate_random_data<float>(size, -1000.0f, 1000.0f);
    parallel_merge_sort(vec);

    // Matrix multiplication
    Matrix<float> m1(200, 200), m2(200, 200), result(200, 200);
    m1.multiply(m2, result);

    // String processing
    string_processing();

    // Data structure operations
    data_structure_ops();

    // Complex number operations
    std::vector<Complex<double>> complexes(1000);
    for(auto& c : complexes) {
        c = Complex<double>{
            std::uniform_real_distribution<>(-1, 1)(utils::get_rng()),
            std::uniform_real_distribution<>(-1, 1)(utils::get_rng())
        };
    }

    return 0;
}
EOF

# Create advanced C example
cat > "${srcdir}/example_advanced.c" << 'EOF'
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <pthread.h>
#include <algorithm>
#include <cmath>

// Define the thread data structure
struct ThreadData {
    float* A;
    float* B;
    float* C;
    int n;
    int start;
    int end;
};

// SIMD-friendly struct
typedef struct {
    float x[8];
    float y[8];
    float z[8];
} Vector8;

// Cache-friendly matrix multiplication
void matrix_multiply_blocked(float* A, float* B, float* C, int n, int block_size) {
    for (int i0 = 0; i0 < n; i0 += block_size) {
        for (int j0 = 0; j0 < n; j0 += block_size) { // Corrected increment
            for (int k0 = 0; k0 < n; k0 += block_size) {
                for (int i = i0; i < std::min(i0 + block_size, n); i++) {
                    for (int j = j0; j < std::min(j0 + block_size, n); j++) { // Ensure 'j' is used correctly
                        float sum = C[i * n + j];
                        for (int k = k0; k < std::min(k0 + block_size, n); k++) {
                            sum += A[i * n + k] * B[k * n + j];
                        }
                        C[i * n + j] = sum;
                    }
                }
            }
        }
    }
}

// Parallel matrix multiplication
void* parallel_matrix_multiply(void* arg) {
    ThreadData* data = (ThreadData*)arg;
    for (int i = data->start; i < data->end; i++) {
        for (int j = 0; j < data->n; j++) {
            float sum = 0.0;
            for (int k = 0; k < data->n; k++) {
                sum += data->A[i * data->n + k] * data->B[k * data->n + j];
            }
            data->C[i * data->n + j] = sum;
        }
    }
    return nullptr;
}

// Example main function
int main() {
    int n = 4; // Matrix size
    int block_size = 2; // Block size for blocked multiplication
    float A[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    float B[16] = {16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
    float C[16] = {0};

    printf("Performing blocked matrix multiplication...\n");
    matrix_multiply_blocked(A, B, C, n, block_size);

    printf("Result matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%f ", C[i * n + j]);
        }
        printf("\n");
    }
    return 0;
}
EOF


    # Compile and run the examples with advanced optimization flags
    echo -e "\e[1;32mCompiling and running advanced C++ example...\e[0m"
    "${clangxx_bin}" -std=c++20 -O3 -g3 -fprofile-generate -mllvm -inline-threshold=1000 -mllvm -extra-vectorizer-passes -mllvm -enable-cond-stores-vec -mllvm -slp-vectorize-hor-store -mllvm -enable-loopinterchange -mllvm -enable-loop-distribute -mllvm -enable-unroll-and-jam -mllvm -enable-loop-flatten -mllvm -unroll-runtime-multi-exit -mllvm -aggressive-ext-opt -mllvm -enable-interleaved-mem-accesses -mllvm -enable-masked-interleaved-mem-accesses -fno-math-errno -fno-trapping-math -falign-functions=32 -funroll-loops -fno-semantic-interposition -fcf-protection=none -mharden-sls=none -fno-omit-frame-pointer -mprefer-vector-width=256 -flto -fsplit-lto-unit -mllvm -adce-remove-loops -mllvm -enable-ext-tsp-block-placement=1 -mllvm -enable-gvn-hoist=1 -mllvm -enable-dfa-jump-thread=1 -Wno-error -fdata-sections -ffunction-sections -fno-unique-section-names -fsplit-machine-functions -mtls-dialect=gnu2 -fuse-ld=lld -mllvm -vp-counters-per-site=6 \
        "${srcdir}/example_advanced.cpp" -o "${srcdir}/example_advanced"
    "${srcdir}/example_advanced"

    echo -e "\e[1;32mCompiling and running advanced C example...\e[0m"
    "${clangxx_bin}" -std=c++17 -O3 -g3 -fprofile-generate -mllvm -inline-threshold=500 -mllvm -extra-vectorizer-passes -mllvm -enable-cond-stores-vec -mllvm -slp-vectorize-hor-store -mllvm -enable-loopinterchange -mllvm -enable-loop-distribute -mllvm -enable-unroll-and-jam -mllvm -enable-loop-flatten -mllvm -unroll-runtime-multi-exit -mllvm -aggressive-ext-opt -mllvm -enable-interleaved-mem-accesses -mllvm -enable-masked-interleaved-mem-accesses -fno-math-errno -fno-trapping-math -falign-functions=32 -funroll-loops -fno-semantic-interposition -fcf-protection=none -mharden-sls=none -fno-omit-frame-pointer -mprefer-vector-width=256 -flto -fsplit-lto-unit -mllvm -adce-remove-loops -mllvm -enable-ext-tsp-block-placement=1 -mllvm -enable-gvn-hoist=1 -mllvm -enable-dfa-jump-thread=1 -Wno-error -fdata-sections -ffunction-sections -fno-unique-section-names -fsplit-machine-functions -mtls-dialect=gnu2 -fuse-ld=lld -mllvm -vp-counters-per-site=6 \
        "${srcdir}/example_advanced.c" -o "${srcdir}/example_advanced_c" -lm
    "${srcdir}/example_advanced_c"

    # Add LLVM IR specific example
    cat > "${srcdir}/llvm_test.cpp" << 'EOF'
#include <vector>
#include <cmath>
#include <numeric>

// Force vectorization opportunities
void vector_math(std::vector<float>& data) {
    #pragma omp parallel for
    for (size_t i = 0; i < data.size(); ++i) {
        data[i] = std::sin(data[i]) * std::cos(data[i]) + std::exp(data[i]);
    }
}

// Complex loop nest for optimization
void stencil_3d(float* input, float* output, int nx, int ny, int nz) {
    #pragma omp parallel for collapse(2)
    for (int z = 1; z < nz-1; ++z) {
        for (int y = 1; y < ny-1; ++y) {
            for (int x = 1; x < nx-1; ++x) {
                int idx = z*nx*ny + y*nx + x;
                output[idx] = (
                    input[idx-1] + input[idx+1] +
                    input[idx-nx] + input[idx+nx] +
                    input[idx-nx*ny] + input[idx+nx*ny]
                ) / 6.0f;
            }
        }
    }
}

// Memory access patterns
template<typename T>
void cache_test(T* data, size_t size, size_t stride) {
    for (size_t s = 0; s < stride; ++s) {
        for (size_t i = s; i < size; i += stride) {
            data[i] = std::sqrt(data[i]);
        }
    }
}

int main() {
    const int size = 1024;
    std::vector<float> data(size);
    std::iota(data.begin(), data.end(), 0.0f);

    // Test vector math
    vector_math(data);

    // Test 3D stencil
    const int n = 64;
    std::vector<float> input(n*n*n), output(n*n*n);
    std::iota(input.begin(), input.end(), 0.0f);
    stencil_3d(input.data(), output.data(), n, n, n);

    // Test cache patterns
    cache_test(data.data(), size, 1);    // Sequential
    cache_test(data.data(), size, 16);   // Strided
    cache_test(data.data(), size, 64);   // Cache line strided

    return 0;
}
EOF

    # Compile LLVM IR example with different optimization levels
    echo -e "\e[1;32mCompiling and running LLVM IR examples...\e[0m"
    for opt_level in 0 1 2 3; do
        "${clangxx_bin}" -O$opt_level -S -emit-llvm \
            -fprofile-generate -g3 -mllvm -vp-counters-per-site=6 \
            "${srcdir}/llvm_test.cpp" -o "${srcdir}/llvm_test_O${opt_level}.ll"
    done

    # Run optimization passes on the IR
    for opt_level in 0 1 2 3; do
        "${build_dir}/bin/opt" -S \
            -mem2reg -loop-reduce --loop-unroll --loop-extract --slp-vectorize-hor \
            "${srcdir}/llvm_test_O${opt_level}.ll" -o "${srcdir}/llvm_test_O${opt_level}_opt.ll"

        # Compile and run the optimized IR
        "${clangxx_bin}" -O3 -g3 -fprofile-generate -mllvm -vp-counters-per-site=6 \
            "${srcdir}/llvm_test_O${opt_level}_opt.ll" -o "${srcdir}/llvm_test_O${opt_level}"
        "${srcdir}/llvm_test_O${opt_level}"
    done

    echo -e "\e[1;32mMerging profile data...\e[0m"
    "${build_dir}/bin/llvm-profdata" merge -sparse \
        -output="${srcdir}/pgo-data/merged.profdata" \
        "${srcdir}/pgo-data"/profile-*.profraw

    echo -e "\e[1;32mFinished instrumented build and PGO data collection.\e[0m"
    # Clean up the temporary installation
    rm -rf "${install_dir}"
}

build() {
    build_instrumented

    echo -e "\e[1;32mStarting optimized build with PGO and LTO...\e[0m"
    local build_dir="${srcdir}/llvm-project/build"
    local instrumented_build_dir="${srcdir}/llvm-project/build_instrumented"

    mkdir -p "${build_dir}"
    cd "${build_dir}" || error_exit "Can't cd to ${build_dir}! Build Failed!"

    # Common flags for optimized build
    local common_flags="-g0 -Wp,-D_FORTIFY_SOURCE=0 -fprofile-use=${srcdir}/pgo-data/merged.profdata"
    local pgo_flags="-fprofile-use=${srcdir}/pgo-data/merged.profdata"

    cmake -S ../llvm -B . -G Ninja \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=/usr \
        -DLLVM_BINUTILS_INCDIR=/usr/include \
        -DFFI_INCLUDE_DIR="$(pkg-config --variable=includedir libffi)" \
        -DLLVM_HOST_TRIPLE="${CHOST}" \
        -DLLVM_DEFAULT_TARGET_TRIPLE="x86_64-pc-linux-gnu" \
        -DLLVM_BUILD_RUNTIME=ON \
        -DLLVM_BUILD_LLVM_DYLIB=ON \
        -DLLVM_LINK_LLVM_DYLIB=ON \
        -DCLANG_LINK_CLANG_DYLIB=ON \
        -DLLVM_DYLIB_COMPONENTS="all" \
        -DLLVM_INSTALL_UTILS=ON \
        -DLLVM_ENABLE_RTTI=ON \
        -DLLVM_ENABLE_FFI=ON \
        -DLLVM_ENABLE_BINDINGS=OFF \
        -DCMAKE_C_FLAGS="${CFLAGS} ${common_flags}" \
        -DCMAKE_CXX_FLAGS="${CXXFLAGS} ${common_flags}" \
        -DCMAKE_EXE_LINKER_FLAGS="${LDFLAGS} ${pgo_flags}" \
        -DCMAKE_MODULE_LINKER_FLAGS="${LDFLAGS} ${pgo_flags}" \
        -DCMAKE_SHARED_LINKER_FLAGS="${LDFLAGS} ${pgo_flags}" \
        -DLLVM_INCLUDE_BENCHMARKS=OFF \
        -DLLVM_INCLUDE_TESTS=OFF \
        -DLLVM_INCLUDE_EXAMPLES=OFF \
        -DLLVM_BUILD_DOCS=OFF \
        -DLLVM_INCLUDE_DOCS=OFF \
        -DLLVM_ENABLE_OCAMLDOC=OFF \
        -DLLVM_ENABLE_SPHINX=OFF \
        -DLLVM_ENABLE_DOXYGEN=OFF \
        -DLLVM_POLLY_LINK_INTO_TOOLS=ON \
        -DLLVM_TARGETS_TO_BUILD="AMDGPU;X86;BPF" \
        -DLLVM_ENABLE_PROJECTS="clang;lld;polly;openmp;compiler-rt" \
        -DLLVM_ENABLE_ZLIB=ON \
        -DLLVM_ENABLE_ZSTD=ON \
        -DLIBCLANG_BUILD_STATIC=ON \
        -DLLVM_ENABLE_Z3_SOLVER=ON \
        -DLIBOMP_INSTALL_ALIASES=ON \
        -DLIBOMP_ENABLE_SHARED=ON \
        -DOPENMP_ENABLE_LIBOMP_PROFILING=OFF \
        -DLIBOMP_OMPT_SUPPORT=ON \
        -DLIBOMP_OMPD_SUPPORT=ON \
        -DLLVM_INSTALL_TOOLCHAIN_ONLY=OFF \
        -DCLANG_DEFAULT_PIE_ON_LINUX=OFF

    echo -e "\e[1;32mStarting final build...\e[0m"
    ninja -C .

    if [[ $? -ne 0 ]]; then
        error_exit "Final build failed!"
    fi

    echo -e "\e[1;32mFinished optimized build with PGO and LTO.\e[0m"
}

_python_optimize() {
    python -m compileall "$@"
    python -O -m compileall "$@"
    python -OO -m compileall "$@"
}

package() {
    cd "${srcdir}/llvm-project" || error_exit "Can't cd to ${srcdir}/llvm-project directory! Package Failed!"

    echo -e "\e[1;32mInstalling LLVM components...\e[0m"
    DESTDIR="${pkgdir}" ninja -C build install

    echo -e "\e[1;32mStripping binaries and shared libraries...\e[0m"
    find "${pkgdir}" -type f -exec sh -c '
        for file do
            case "$(file -bi "$file")" in
                *application/x-sharedlib*|*application/x-executable*)
                    strip --strip-unneeded "$file" ;;
                *application/x-archive*)
                    # Skip static libraries
                    continue ;;
                *)
                    # Additional check for ELF files
                    if file "$file" | grep -q "ELF.*\\(shared object\\|executable\\)"; then
                        strip --strip-unneeded "$file"
                    fi
                    ;;
            esac
        done
    ' sh {} +

    echo -e "\e[1;32mInstalling Python components...\e[0m"
    # Install lit Python package
    pushd llvm/utils/lit || error_exit "Failed to enter lit directory!"
    python setup.py install --root="${pkgdir}" -O1
    popd || error_exit "Failed to return from lit directory!"

    # Handle architecture-specific files
    if [[ "${CARCH}" == "x86_64" ]]; then
        echo -e "\e[1;32mHandling x86_64 specific files...\e[0m"
        mv "${pkgdir}/usr/include/llvm/Config/llvm-config"{,-64}.h
        cp "${srcdir}/llvm-config.h" "${pkgdir}/usr/include/llvm/Config/llvm-config.h"
    fi

    echo -e "\e[1;32mSetting up BFD plugins...\e[0m"
    # Create and populate BFD plugins directory
    install -d "${pkgdir}/usr/lib/bfd-plugins"
    ln -sf ../LLVMgold.so "${pkgdir}/usr/lib/bfd-plugins/LLVMgold.so"

    echo -e "\e[1;32mOrganizing Python packages...\e[0m"
    # Get Python site-packages directory
    local site_packages
    site_packages=$(python -c "import site; print(site.getsitepackages()[0])")

    # Move Python packages to correct location
    install -d "${pkgdir}/${site_packages}"
    mv "${pkgdir}/usr/lib/"{libear,libscanbuild} "${pkgdir}/${site_packages}/"

    echo -e "\e[1;32mReorganizing directory structure...\e[0m"
    # Move libexec contents and update paths
    mv "${pkgdir}/usr/libexec/"* "${pkgdir}/usr/lib/clang/"
    rm -fr "${pkgdir}/usr/libexec"

    # Update paths in scripts
    sed -i 's|libexec|lib/clang|' \
        "${pkgdir}/usr/bin/scan-build" \
        "${pkgdir}/${site_packages}/libscanbuild/analyze.py"

    echo -e "\e[1;32mOptimizing Python bytecode...\e[0m"
    _python_optimize "${pkgdir}/usr/share" "${pkgdir}/${site_packages}"

    # Remove documentation if not needed
    if [[ ${_build_documentation} -eq 0 ]]; then
        echo -e "\e[1;32mRemoving documentation...\e[0m"
        rm -fr "${pkgdir}/usr/share/doc"
    fi

    echo -e "\e[1;32mSetting up library paths...\e[0m"
    # Configure LD library path
    install -d "${pkgdir}/etc/ld.so.conf.d"
    echo "/usr/lib/x86_64-pc-linux-gnu/" > "${pkgdir}/etc/ld.so.conf.d/x86_64-pc-linux-gnu.conf"

    echo -e "\e[1;32mInstalling license files...\e[0m"
    # Install license files for all components
    local license_files=(
        "llvm/LICENSE.TXT:llvm-LICENSE"
        "clang/LICENSE.TXT:clang-LICENSE"
        "clang-tools-extra/LICENSE.TXT:clang-tools-extra-LICENSE"
        "compiler-rt/LICENSE.TXT:compiler-rt-LICENSE"
        "lld/LICENSE.TXT:lld-LICENSE"
        "polly/LICENSE.TXT:polly-LICENSE"
        "openmp/LICENSE.TXT:openmp-LICENSE"
    )

    for license_file in "${license_files[@]}"; do
        local src_file="${license_file%:*}"
        local dest_name="${license_file#*:}"
        install -Dm644 "${srcdir}/llvm-project/${src_file}" \
            "${pkgdir}/usr/share/licenses/${pkgname}/${dest_name}"
    done

    echo -e "\e[1;32mPackage installation completed successfully.\e[0m"
}
