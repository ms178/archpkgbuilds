Date: Tue, 22 Dec 2023 21:21:44 -0700
Subject: Make Clang default to Haswell
---
 clang/lib/Driver/ToolChains/Arch/X86.cpp | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/clang/lib/Driver/ToolChains/Arch/X86.cpp b/clang/lib/Driver/ToolChains/Arch/X86.cpp
index cf2bc63d7..f95d36c3b 100644
--- a/clang/lib/Driver/ToolChains/Arch/X86.cpp
+++ b/clang/lib/Driver/ToolChains/Arch/X86.cpp
@@ -111,8 +111,8 @@ std::string x86::getX86TargetCPU(const Driver &D, const ArgList &Args,
   case llvm::Triple::FreeBSD:
     return "i686";
   default:
-    // Fallback to p4.
-    return "pentium4";
+    // defaults to "haswell"
+    return "haswell";
   }
 }

--
2.42.1


From c8f8e08caad63b8efa8a03fb1fdeb3eb448f3aea Mon Sep 17 00:00:00 2001
From: David Sherwood <david.sherwood@arm.com>
Date: Wed, 20 Dec 2023 09:33:23 +0000
Subject: [PATCH 1/2] [LoopVectorize] Add tests showing runtime checks cost
 with low trip counts

---
 .../AArch64/low_trip_memcheck_cost.ll         | 193 ++++++++++++++++++
 1 file changed, 193 insertions(+)
 create mode 100644 llvm/test/Transforms/LoopVectorize/AArch64/low_trip_memcheck_cost.ll

diff --git a/llvm/test/Transforms/LoopVectorize/AArch64/low_trip_memcheck_cost.ll b/llvm/test/Transforms/LoopVectorize/AArch64/low_trip_memcheck_cost.ll
new file mode 100644
index 00000000000000..296ed7aee9c9de
--- /dev/null
+++ b/llvm/test/Transforms/LoopVectorize/AArch64/low_trip_memcheck_cost.ll
@@ -0,0 +1,193 @@
+; RUN: opt -p loop-vectorize -mattr=+sve -debug-only=loop-vectorize -S -disable-output < %s 2>&1 | FileCheck %s
+
+target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
+target triple = "aarch64-unknown-linux-gnu"
+
+
+define void @outer_no_tc(ptr nocapture noundef %a, ptr nocapture noundef readonly %b, i64 noundef %m, i64 noundef %n) vscale_range(1,16) {
+; CHECK-LABEL: LV: Checking a loop in 'outer_no_tc'
+; CHECK:      Calculating cost of runtime checks:
+; CHECK:      Total cost of runtime checks: 6
+; CHECK-NEXT: LV: Minimum required TC for runtime checks to be profitable:32
+entry:
+  %cmp24 = icmp sgt i64 %m, 0
+  %cmp222 = icmp sgt i64 %n, 0
+  %or.cond = and i1 %cmp24, %cmp222
+  br i1 %or.cond, label %for.cond1.preheader.us, label %for.cond.cleanup
+
+for.cond1.preheader.us:
+  %i.025.us = phi i64 [ %inc12.us, %for.cond1.for.cond.cleanup3_crit_edge.us ], [ 0, %entry ]
+  %mul.us = mul nsw i64 %i.025.us, %n
+  br label %for.body4.us
+
+for.body4.us:
+  %j.023.us = phi i64 [ 0, %for.cond1.preheader.us ], [ %inc.us, %for.body4.us ]
+  %add.us = add nuw nsw i64 %j.023.us, %mul.us
+  %arrayidx.us = getelementptr inbounds i8, ptr %b, i64 %add.us
+  %0 = load i8, ptr %arrayidx.us, align 1
+  %arrayidx7.us = getelementptr inbounds i8, ptr %a, i64 %add.us
+  %1 = load i8, ptr %arrayidx7.us, align 1
+  %add9.us = add i8 %1, %0
+  store i8 %add9.us, ptr %arrayidx7.us, align 1
+  %inc.us = add nuw nsw i64 %j.023.us, 1
+  %exitcond.not = icmp eq i64 %inc.us, %n
+  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup3_crit_edge.us, label %for.body4.us
+
+for.cond1.for.cond.cleanup3_crit_edge.us:
+  %inc12.us = add nuw nsw i64 %i.025.us, 1
+  %exitcond27.not = icmp eq i64 %inc12.us, %m
+  br i1 %exitcond27.not, label %for.cond.cleanup, label %for.cond1.preheader.us
+
+for.cond.cleanup:
+  ret void
+}
+
+
+define void @outer_known_tc3(ptr nocapture noundef %a, ptr nocapture noundef readonly %b, i64 noundef %n) vscale_range(1,16) {
+; CHECK-LABEL: LV: Checking a loop in 'outer_known_tc3'
+; CHECK:      Calculating cost of runtime checks:
+; CHECK:      Total cost of runtime checks: 6
+; CHECK-NEXT: LV: Minimum required TC for runtime checks to be profitable:32
+entry:
+  %cmp222 = icmp sgt i64 %n, 0
+  br i1 %cmp222, label %for.cond1.preheader.us, label %for.cond.cleanup
+
+for.cond1.preheader.us:
+  %i.024.us = phi i64 [ %inc12.us, %for.cond1.for.cond.cleanup3_crit_edge.us ], [ 0, %entry ]
+  %mul.us = mul nsw i64 %i.024.us, %n
+  br label %for.body4.us
+
+for.body4.us:
+  %j.023.us = phi i64 [ 0, %for.cond1.preheader.us ], [ %inc.us, %for.body4.us ]
+  %add.us = add nuw nsw i64 %j.023.us, %mul.us
+  %arrayidx.us = getelementptr inbounds i8, ptr %b, i64 %add.us
+  %0 = load i8, ptr %arrayidx.us, align 1
+  %arrayidx7.us = getelementptr inbounds i8, ptr %a, i64 %add.us
+  %1 = load i8, ptr %arrayidx7.us, align 1
+  %add9.us = add i8 %1, %0
+  store i8 %add9.us, ptr %arrayidx7.us, align 1
+  %inc.us = add nuw nsw i64 %j.023.us, 1
+  %exitcond.not = icmp eq i64 %inc.us, %n
+  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup3_crit_edge.us, label %for.body4.us
+
+for.cond1.for.cond.cleanup3_crit_edge.us:
+  %inc12.us = add nuw nsw i64 %i.024.us, 1
+  %exitcond26.not = icmp eq i64 %inc12.us, 3
+  br i1 %exitcond26.not, label %for.cond.cleanup, label %for.cond1.preheader.us
+
+for.cond.cleanup:
+  ret void
+}
+
+
+define void @outer_known_tc64(ptr nocapture noundef %a, ptr nocapture noundef readonly %b, i64 noundef %n) vscale_range(1,16) {
+; CHECK-LABEL: LV: Checking a loop in 'outer_known_tc64'
+; CHECK:      Calculating cost of runtime checks:
+; CHECK:      Total cost of runtime checks: 6
+; CHECK-NEXT: LV: Minimum required TC for runtime checks to be profitable:32
+entry:
+  %cmp222 = icmp sgt i64 %n, 0
+  br i1 %cmp222, label %for.cond1.preheader.us, label %for.cond.cleanup
+
+for.cond1.preheader.us:
+  %i.024.us = phi i64 [ %inc12.us, %for.cond1.for.cond.cleanup3_crit_edge.us ], [ 0, %entry ]
+  %mul.us = mul nsw i64 %i.024.us, %n
+  br label %for.body4.us
+
+for.body4.us:
+  %j.023.us = phi i64 [ 0, %for.cond1.preheader.us ], [ %inc.us, %for.body4.us ]
+  %add.us = add nuw nsw i64 %j.023.us, %mul.us
+  %arrayidx.us = getelementptr inbounds i8, ptr %b, i64 %add.us
+  %0 = load i8, ptr %arrayidx.us, align 1
+  %arrayidx7.us = getelementptr inbounds i8, ptr %a, i64 %add.us
+  %1 = load i8, ptr %arrayidx7.us, align 1
+  %add9.us = add i8 %1, %0
+  store i8 %add9.us, ptr %arrayidx7.us, align 1
+  %inc.us = add nuw nsw i64 %j.023.us, 1
+  %exitcond.not = icmp eq i64 %inc.us, %n
+  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup3_crit_edge.us, label %for.body4.us
+
+for.cond1.for.cond.cleanup3_crit_edge.us:
+  %inc12.us = add nuw nsw i64 %i.024.us, 1
+  %exitcond26.not = icmp eq i64 %inc12.us, 64
+  br i1 %exitcond26.not, label %for.cond.cleanup, label %for.cond1.preheader.us
+
+for.cond.cleanup:
+  ret void
+}
+
+
+define void @outer_pgo_3(ptr nocapture noundef %a, ptr nocapture noundef readonly %b, i64 noundef %m, i64 noundef %n) vscale_range(1,16) {
+; CHECK-LABEL: LV: Checking a loop in 'outer_pgo_3'
+; CHECK:      Calculating cost of runtime checks:
+; CHECK:      Total cost of runtime checks: 6
+; CHECK-NEXT: LV: Minimum required TC for runtime checks to be profitable:32
+entry:
+  %cmp222 = icmp sgt i64 %n, 0
+  br i1 %cmp222, label %for.cond1.preheader.us, label %for.cond.cleanup
+
+for.cond1.preheader.us:
+  %i.024.us = phi i64 [ %inc12.us, %for.cond1.for.cond.cleanup3_crit_edge.us ], [ 0, %entry ]
+  %mul.us = mul nsw i64 %i.024.us, %n
+  br label %for.body4.us
+
+for.body4.us:
+  %j.023.us = phi i64 [ 0, %for.cond1.preheader.us ], [ %inc.us, %for.body4.us ]
+  %add.us = add nuw nsw i64 %j.023.us, %mul.us
+  %arrayidx.us = getelementptr inbounds i8, ptr %b, i64 %add.us
+  %0 = load i8, ptr %arrayidx.us, align 1
+  %arrayidx7.us = getelementptr inbounds i8, ptr %a, i64 %add.us
+  %1 = load i8, ptr %arrayidx7.us, align 1
+  %add9.us = add i8 %1, %0
+  store i8 %add9.us, ptr %arrayidx7.us, align 1
+  %inc.us = add nuw nsw i64 %j.023.us, 1
+  %exitcond.not = icmp eq i64 %inc.us, %n
+  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup3_crit_edge.us, label %for.body4.us
+
+for.cond1.for.cond.cleanup3_crit_edge.us:
+  %inc12.us = add nuw nsw i64 %i.024.us, 1
+  %exitcond26.not = icmp eq i64 %inc12.us, %m
+  br i1 %exitcond26.not, label %for.cond.cleanup, label %for.cond1.preheader.us, !prof !0
+
+for.cond.cleanup:
+  ret void
+}
+
+
+define void @outer_known_tc3_full_range_checks(ptr nocapture noundef %dst, ptr nocapture noundef readonly %src, i64 noundef %n) {
+; CHECK-LABEL: LV: Checking a loop in 'outer_known_tc3_full_range_checks'
+; CHECK:      Calculating cost of runtime checks:
+; CHECK:      Total cost of runtime checks: 6
+; CHECK-NEXT: LV: Minimum required TC for runtime checks to be profitable:8
+entry:
+  br label %outer.loop
+
+outer.loop:
+  %outer.iv = phi i64 [ 0, %entry ], [ %outer.iv.next, %inner.exit ]
+  %0 = mul nsw i64 %outer.iv, %n
+  br label %inner.loop
+
+inner.loop:
+  %iv.inner = phi i64 [ 0, %outer.loop ], [ %iv.inner.next, %inner.loop ]
+  %1 = add nuw nsw i64 %iv.inner, %0
+  %arrayidx.us = getelementptr inbounds i32, ptr %src, i64 %1
+  %2 = load i32, ptr %arrayidx.us, align 4
+  %arrayidx8.us = getelementptr inbounds i32, ptr %dst, i64 %1
+  %3 = load i32, ptr %arrayidx8.us, align 4
+  %add9.us = add nsw i32 %3, %2
+  store i32 %add9.us, ptr %arrayidx8.us, align 4
+  %iv.inner.next = add nuw nsw i64 %iv.inner, 1
+  %inner.exit.cond = icmp eq i64 %iv.inner.next, %n
+  br i1 %inner.exit.cond, label %inner.exit, label %inner.loop
+
+inner.exit:
+  %outer.iv.next = add nuw nsw i64 %outer.iv, 1
+  %outer.exit.cond = icmp eq i64 %outer.iv.next, 3
+  br i1 %outer.exit.cond, label %outer.exit, label %outer.loop
+
+outer.exit:
+  ret void
+}
+
+
+!0 = !{!"branch_weights", i32 10, i32 20}

From af1cf4315147d5f7de02034c7f704fef61090eba Mon Sep 17 00:00:00 2001
From: David Sherwood <david.sherwood@arm.com>
Date: Wed, 20 Dec 2023 09:34:01 +0000
Subject: [PATCH 2/2] [LoopVectorize] Refine runtime memory check costs when
 there is an outer loop

When we generate runtime memory checks for an inner loop it's
possible that these checks are invariant in the outer loop and
so will get hoisted out. In such cases, the effective cost of
the checks should reduce to reflect the outer loop trip count.

This fixes a 25% performance regression introduced by commit

49b0e6dcc296792b577ae8f0f674e61a0929b99d

when building the SPEC2017 x264 benchmark with PGO, where we
decided the inner loop trip count wasn't high enough to warrant
the (incorrect) high cost of the runtime checks. Also, when
runtime memory checks consist entirely of diff checks these are
likely to be outer loop invariant.
---
 .../Transforms/Vectorize/LoopVectorize.cpp    | 37 +++++++++++++++++--
 .../AArch64/low_trip_memcheck_cost.ll         | 10 ++---
 2 files changed, 38 insertions(+), 9 deletions(-)

diff --git a/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp b/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp
index f82e161fb846d1..8287090800dd37 100644
--- a/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp
+++ b/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp
@@ -2070,7 +2070,7 @@ class GeneratedRTChecks {
     }
   }

-  InstructionCost getCost() {
+  InstructionCost getCost(Loop *OuterLoop) {
     if (SCEVCheckBlock || MemCheckBlock)
       LLVM_DEBUG(dbgs() << "Calculating cost of runtime checks:\n");

@@ -2091,16 +2091,45 @@ class GeneratedRTChecks {
         LLVM_DEBUG(dbgs() << "  " << C << "  for " << I << "\n");
         RTCheckCost += C;
       }
-    if (MemCheckBlock)
+    if (MemCheckBlock) {
+      InstructionCost MemCheckCost = 0;
       for (Instruction &I : *MemCheckBlock) {
         if (MemCheckBlock->getTerminator() == &I)
           continue;
         InstructionCost C =
             TTI->getInstructionCost(&I, TTI::TCK_RecipThroughput);
         LLVM_DEBUG(dbgs() << "  " << C << "  for " << I << "\n");
-        RTCheckCost += C;
+        MemCheckCost += C;
+      }
+
+      // If the runtime memory checks are being created inside an outer loop
+      // we should find out if these checks are outer loop invariant. If so,
+      // the checks will be hoisted out and so the effective cost will reduce
+      // according to the outer loop trip count.
+      if (OuterLoop) {
+        ScalarEvolution *SE = MemCheckExp.getSE();
+        const SCEV *Cond = SE->getSCEV(MemRuntimeCheckCond);
+        if (SE->isLoopInvariant(Cond, OuterLoop)) {
+          if (std::optional<unsigned> OuterTC =
+                  getSmallBestKnownTC(*SE, OuterLoop))
+            MemCheckCost /= *OuterTC;
+          else {
+            // It seems reasonable to assume that we can reduce the effective
+            // cost of the checks even when we know nothing about the trip
+            // count. Here I've assumed that the outer loop executes at least
+            // twice.
+            MemCheckCost /= 2;
+          }
+
+          // Let's ensure the cost is always at least 1.
+          if (MemCheckCost == 0)
+            MemCheckCost = 1;
+        }
       }

+      RTCheckCost += MemCheckCost;
+    }
+
     if (SCEVCheckBlock || MemCheckBlock)
       LLVM_DEBUG(dbgs() << "Total cost of runtime checks: " << RTCheckCost
                         << "\n");
@@ -9754,7 +9783,7 @@ static bool areRuntimeChecksProfitable(GeneratedRTChecks &Checks,
                                        std::optional<unsigned> VScale, Loop *L,
                                        ScalarEvolution &SE,
                                        ScalarEpilogueLowering SEL) {
-  InstructionCost CheckCost = Checks.getCost();
+  InstructionCost CheckCost = Checks.getCost(L->getParentLoop());
   if (!CheckCost.isValid())
     return false;

diff --git a/llvm/test/Transforms/LoopVectorize/AArch64/low_trip_memcheck_cost.ll b/llvm/test/Transforms/LoopVectorize/AArch64/low_trip_memcheck_cost.ll
index 296ed7aee9c9de..b740b055822991 100644
--- a/llvm/test/Transforms/LoopVectorize/AArch64/low_trip_memcheck_cost.ll
+++ b/llvm/test/Transforms/LoopVectorize/AArch64/low_trip_memcheck_cost.ll
@@ -7,7 +7,7 @@ target triple = "aarch64-unknown-linux-gnu"
 define void @outer_no_tc(ptr nocapture noundef %a, ptr nocapture noundef readonly %b, i64 noundef %m, i64 noundef %n) vscale_range(1,16) {
 ; CHECK-LABEL: LV: Checking a loop in 'outer_no_tc'
 ; CHECK:      Calculating cost of runtime checks:
-; CHECK:      Total cost of runtime checks: 6
+; CHECK:      Total cost of runtime checks: 3
 ; CHECK-NEXT: LV: Minimum required TC for runtime checks to be profitable:32
 entry:
   %cmp24 = icmp sgt i64 %m, 0
@@ -46,7 +46,7 @@ for.cond.cleanup:
 define void @outer_known_tc3(ptr nocapture noundef %a, ptr nocapture noundef readonly %b, i64 noundef %n) vscale_range(1,16) {
 ; CHECK-LABEL: LV: Checking a loop in 'outer_known_tc3'
 ; CHECK:      Calculating cost of runtime checks:
-; CHECK:      Total cost of runtime checks: 6
+; CHECK:      Total cost of runtime checks: 2
 ; CHECK-NEXT: LV: Minimum required TC for runtime checks to be profitable:32
 entry:
   %cmp222 = icmp sgt i64 %n, 0
@@ -83,7 +83,7 @@ for.cond.cleanup:
 define void @outer_known_tc64(ptr nocapture noundef %a, ptr nocapture noundef readonly %b, i64 noundef %n) vscale_range(1,16) {
 ; CHECK-LABEL: LV: Checking a loop in 'outer_known_tc64'
 ; CHECK:      Calculating cost of runtime checks:
-; CHECK:      Total cost of runtime checks: 6
+; CHECK:      Total cost of runtime checks: 1
 ; CHECK-NEXT: LV: Minimum required TC for runtime checks to be profitable:32
 entry:
   %cmp222 = icmp sgt i64 %n, 0
@@ -120,7 +120,7 @@ for.cond.cleanup:
 define void @outer_pgo_3(ptr nocapture noundef %a, ptr nocapture noundef readonly %b, i64 noundef %m, i64 noundef %n) vscale_range(1,16) {
 ; CHECK-LABEL: LV: Checking a loop in 'outer_pgo_3'
 ; CHECK:      Calculating cost of runtime checks:
-; CHECK:      Total cost of runtime checks: 6
+; CHECK:      Total cost of runtime checks: 2
 ; CHECK-NEXT: LV: Minimum required TC for runtime checks to be profitable:32
 entry:
   %cmp222 = icmp sgt i64 %n, 0
@@ -157,7 +157,7 @@ for.cond.cleanup:
 define void @outer_known_tc3_full_range_checks(ptr nocapture noundef %dst, ptr nocapture noundef readonly %src, i64 noundef %n) {
 ; CHECK-LABEL: LV: Checking a loop in 'outer_known_tc3_full_range_checks'
 ; CHECK:      Calculating cost of runtime checks:
-; CHECK:      Total cost of runtime checks: 6
+; CHECK:      Total cost of runtime checks: 2
 ; CHECK-NEXT: LV: Minimum required TC for runtime checks to be profitable:8
 entry:
   br label %outer.loop

From 98c373005e84368758128d051d89f260ecfab65c Mon Sep 17 00:00:00 2001
From: sun-jacobi <sun1011jacobi@gmail.com>
Date: Thu, 21 Dec 2023 14:12:04 +0900
Subject: [PATCH 1/5] [InstCombine] fold (A + B - C == B) -> (A - C == 0)

---
 .../InstCombine/InstCombineCompares.cpp       | 44 +++++++++++++++++++
 .../InstCombine/InstCombineInternal.h         |  2 +
 2 files changed, 46 insertions(+)

diff --git a/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp b/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp
index 0ad87eeb4c91a4..ca30e5b6ad779b 100644
--- a/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp
+++ b/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp
@@ -4547,6 +4547,45 @@ static Instruction *foldICmpXorXX(ICmpInst &I, const SimplifyQuery &Q,
   return nullptr;
 }

+// extract common factors like ((A + B) - C == B) -> (A - C == 0)
+Value *InstCombinerImpl::foldICmpWithCommonFactors(ICmpInst &Cmp,
+                                                   BinaryOperator *LBO,
+                                                   Value *RHS) {
+  const CmpInst::Predicate Pred = Cmp.getPredicate();
+  if (!ICmpInst::isEquality(Pred))
+    return nullptr;
+
+  SmallVector<BinaryOperator *, 16> WorkList(1, LBO);
+
+  while (!WorkList.empty()) {
+    BinaryOperator *BO = WorkList.pop_back_val();
+
+    Value *A;
+    if (match(BO, m_OneUse(m_c_Add(m_Value(A), m_Specific(RHS))))) {
+      if (BO == LBO)
+        return Builder.CreateICmp(Pred, A,
+                                  Constant::getNullValue(LBO->getType()));
+      replaceInstUsesWith(*BO, A);
+      eraseInstFromFunction(*BO);
+      return Builder.CreateICmp(Pred, LBO,
+                                Constant::getNullValue(LBO->getType()));
+    }
+
+    unsigned Opc = BO->getOpcode();
+    if (Opc == Instruction::Add || Opc == Instruction::Sub) {
+      auto AddNextBO = [&](Value *Op) {
+        if (BinaryOperator *Next = dyn_cast<BinaryOperator>(Op))
+          WorkList.push_back(Next);
+      };
+
+      AddNextBO(BO->getOperand(0));
+      AddNextBO(BO->getOperand(1));
+    }
+  }
+
+  return nullptr;
+}
+
 /// Try to fold icmp (binop), X or icmp X, (binop).
 /// TODO: A large part of this logic is duplicated in InstSimplify's
 /// simplifyICmpWithBinOp(). We should be able to share that and avoid the code
@@ -4565,6 +4604,11 @@ Instruction *InstCombinerImpl::foldICmpBinOp(ICmpInst &I,
   if (Instruction *NewICmp = foldICmpXNegX(I, Builder))
     return NewICmp;

+  if (BO0) {
+    if (Value *V = foldICmpWithCommonFactors(I, BO0, Op1))
+      return replaceInstUsesWith(I, V);
+  }
+
   const CmpInst::Predicate Pred = I.getPredicate();
   Value *X;

diff --git a/llvm/lib/Transforms/InstCombine/InstCombineInternal.h b/llvm/lib/Transforms/InstCombine/InstCombineInternal.h
index f86db698ef8f12..54a9dd9942d09c 100644
--- a/llvm/lib/Transforms/InstCombine/InstCombineInternal.h
+++ b/llvm/lib/Transforms/InstCombine/InstCombineInternal.h
@@ -632,6 +632,8 @@ class LLVM_LIBRARY_VISIBILITY InstCombinerImpl final
   Instruction *foldICmpInstWithConstantNotInt(ICmpInst &Cmp);
   Instruction *foldICmpInstWithConstantAllowUndef(ICmpInst &Cmp,
                                                   const APInt &C);
+  Value *foldICmpWithCommonFactors(ICmpInst &Cmp, BinaryOperator *LBO,
+                                   Value *RHS);
   Instruction *foldICmpBinOp(ICmpInst &Cmp, const SimplifyQuery &SQ);
   Instruction *foldICmpWithMinMaxImpl(Instruction &I, MinMaxIntrinsic *MinMax,
                                       Value *Z, ICmpInst::Predicate Pred);

From 6b272c60951fa0132dbe9a8866d42ba7b414fee4 Mon Sep 17 00:00:00 2001
From: sun-jacobi <sun1011jacobi@gmail.com>
Date: Thu, 21 Dec 2023 16:29:33 +0900
Subject: [PATCH 2/5] [InstCombine] refactor foldICmpWithCommonFactors

---
 .../InstCombine/InstCombineCompares.cpp       | 34 +++++++++----------
 .../InstCombine/InstCombineInternal.h         |  4 +--
 2 files changed, 18 insertions(+), 20 deletions(-)

diff --git a/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp b/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp
index ca30e5b6ad779b..5482b044deadc9 100644
--- a/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp
+++ b/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp
@@ -4548,34 +4548,32 @@ static Instruction *foldICmpXorXX(ICmpInst &I, const SimplifyQuery &Q,
 }

 // extract common factors like ((A + B) - C == B) -> (A - C == 0)
-Value *InstCombinerImpl::foldICmpWithCommonFactors(ICmpInst &Cmp,
-                                                   BinaryOperator *LBO,
-                                                   Value *RHS) {
+Instruction *InstCombinerImpl::foldICmpWithCommonFactors(ICmpInst &Cmp,
+                                                         BinaryOperator *LBO,
+                                                         Value *RHS) {
   const CmpInst::Predicate Pred = Cmp.getPredicate();
   if (!ICmpInst::isEquality(Pred))
     return nullptr;

-  SmallVector<BinaryOperator *, 16> WorkList(1, LBO);
+  SmallVector<BinaryOperator *, 16> worklist(1, LBO);
+  Constant *Zero = Constant::getNullValue(LBO->getType());

-  while (!WorkList.empty()) {
-    BinaryOperator *BO = WorkList.pop_back_val();
+  while (!worklist.empty()) {
+    BinaryOperator *BO = worklist.pop_back_val();

-    Value *A;
-    if (match(BO, m_OneUse(m_c_Add(m_Value(A), m_Specific(RHS))))) {
-      if (BO == LBO)
-        return Builder.CreateICmp(Pred, A,
-                                  Constant::getNullValue(LBO->getType()));
-      replaceInstUsesWith(*BO, A);
-      eraseInstFromFunction(*BO);
-      return Builder.CreateICmp(Pred, LBO,
-                                Constant::getNullValue(LBO->getType()));
+    if (Value * A; match(BO, m_OneUse(m_c_Add(m_Value(A), m_Specific(RHS))))) {
+      if (BO != LBO) {
+        replaceInstUsesWith(*BO, A);
+        eraseInstFromFunction(*BO);
+      }
+      return new ICmpInst(Pred, A, Zero);
     }

     unsigned Opc = BO->getOpcode();
     if (Opc == Instruction::Add || Opc == Instruction::Sub) {
       auto AddNextBO = [&](Value *Op) {
         if (BinaryOperator *Next = dyn_cast<BinaryOperator>(Op))
-          WorkList.push_back(Next);
+          worklist.push_back(Next);
       };

       AddNextBO(BO->getOperand(0));
@@ -4605,8 +4603,8 @@ Instruction *InstCombinerImpl::foldICmpBinOp(ICmpInst &I,
     return NewICmp;

   if (BO0) {
-    if (Value *V = foldICmpWithCommonFactors(I, BO0, Op1))
-      return replaceInstUsesWith(I, V);
+    if (Instruction *NewICmp = foldICmpWithCommonFactors(I, BO0, Op1))
+      return NewICmp;
   }

   const CmpInst::Predicate Pred = I.getPredicate();
diff --git a/llvm/lib/Transforms/InstCombine/InstCombineInternal.h b/llvm/lib/Transforms/InstCombine/InstCombineInternal.h
index 54a9dd9942d09c..9081373c0157d6 100644
--- a/llvm/lib/Transforms/InstCombine/InstCombineInternal.h
+++ b/llvm/lib/Transforms/InstCombine/InstCombineInternal.h
@@ -632,8 +632,8 @@ class LLVM_LIBRARY_VISIBILITY InstCombinerImpl final
   Instruction *foldICmpInstWithConstantNotInt(ICmpInst &Cmp);
   Instruction *foldICmpInstWithConstantAllowUndef(ICmpInst &Cmp,
                                                   const APInt &C);
-  Value *foldICmpWithCommonFactors(ICmpInst &Cmp, BinaryOperator *LBO,
-                                   Value *RHS);
+  Instruction *foldICmpWithCommonFactors(ICmpInst &Cmp, BinaryOperator *LBO,
+                                         Value *RHS);
   Instruction *foldICmpBinOp(ICmpInst &Cmp, const SimplifyQuery &SQ);
   Instruction *foldICmpWithMinMaxImpl(Instruction &I, MinMaxIntrinsic *MinMax,
                                       Value *Z, ICmpInst::Predicate Pred);

From e3999c39c007cf5c2f8125512aab4e479a8256a1 Mon Sep 17 00:00:00 2001
From: sun-jacobi <sun1011jacobi@gmail.com>
Date: Thu, 21 Dec 2023 16:50:15 +0900
Subject: [PATCH 3/5] [InstCombine] fix bugs in foldICmpWithCommonFactors

---
 llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp b/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp
index 5482b044deadc9..399af8d1133f08 100644
--- a/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp
+++ b/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp
@@ -4566,7 +4566,7 @@ Instruction *InstCombinerImpl::foldICmpWithCommonFactors(ICmpInst &Cmp,
         replaceInstUsesWith(*BO, A);
         eraseInstFromFunction(*BO);
       }
-      return new ICmpInst(Pred, A, Zero);
+      return new ICmpInst(Pred, LBO, Zero);
     }

     unsigned Opc = BO->getOpcode();

From 88b44ceef7813f295a1ac071a4dab899bb5d452f Mon Sep 17 00:00:00 2001
From: sun-jacobi <sun1011jacobi@gmail.com>
Date: Thu, 21 Dec 2023 16:51:04 +0900
Subject: [PATCH 4/5] [InstCombine] add icmp-eq-common-factor.ll test

---
 .../InstCombine/icmp-eq-common-factor.ll      | 121 ++++++++++++++++++
 1 file changed, 121 insertions(+)
 create mode 100644 llvm/test/Transforms/InstCombine/icmp-eq-common-factor.ll

diff --git a/llvm/test/Transforms/InstCombine/icmp-eq-common-factor.ll b/llvm/test/Transforms/InstCombine/icmp-eq-common-factor.ll
new file mode 100644
index 00000000000000..e28c0910c9cae2
--- /dev/null
+++ b/llvm/test/Transforms/InstCombine/icmp-eq-common-factor.ll
@@ -0,0 +1,121 @@
+; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
+; RUN: opt -passes=instcombine -S < %s | FileCheck %s
+
+; A + B - C == B
+define i1 @icmp_common_add_sub(i32 %a, i32 %b, i32 %c){
+; CHECK-LABEL: define i1 @icmp_common_add_sub(
+; CHECK-SAME: i32 [[A:%.*]], i32 [[B:%.*]], i32 [[C:%.*]]) {
+; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[A]], [[C]]
+; CHECK-NEXT:    ret i1 [[CMP]]
+;
+  %add = add i32 %a, %b
+  %sub = sub i32 %add, %c
+  %cmp = icmp eq i32 %sub, %b
+  ret i1 %cmp
+}
+
+; A + B - C == B
+define i1 @icmp_common_add_sub_ne(i32 %a, i32 %b, i32 %c){
+; CHECK-LABEL: define i1 @icmp_common_add_sub_ne(
+; CHECK-SAME: i32 [[A:%.*]], i32 [[B:%.*]], i32 [[C:%.*]]) {
+; CHECK-NEXT:    [[CMP:%.*]] = icmp ne i32 [[A]], [[C]]
+; CHECK-NEXT:    ret i1 [[CMP]]
+;
+  %add = add i32 %a, %b
+  %sub = sub i32 %add, %c
+  %cmp = icmp ne i32 %sub, %b
+  ret i1 %cmp
+}
+
+; A * B - C == B
+define i1 @icmp_common_mul_sub(i32 %a, i32 %b, i32 %c){
+; CHECK-LABEL: define i1 @icmp_common_mul_sub(
+; CHECK-SAME: i32 [[A:%.*]], i32 [[B:%.*]], i32 [[C:%.*]]) {
+; CHECK-NEXT:    [[MUL:%.*]] = mul i32 [[A]], [[B]]
+; CHECK-NEXT:    [[SUB:%.*]] = sub i32 [[MUL]], [[C]]
+; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[SUB]], [[B]]
+; CHECK-NEXT:    ret i1 [[CMP]]
+;
+  %mul = mul i32 %a, %b
+  %sub = sub i32 %mul, %c
+  %cmp = icmp eq i32 %sub, %b
+  ret i1 %cmp
+}
+
+; A + B + C == B
+define i1 @icmp_common_add_add(i32 %a, i32 %b, i32 %c){
+; CHECK-LABEL: define i1 @icmp_common_add_add(
+; CHECK-SAME: i32 [[A:%.*]], i32 [[B:%.*]], i32 [[C:%.*]]) {
+; CHECK-NEXT:    [[ADD2:%.*]] = sub i32 0, [[C]]
+; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[ADD2]], [[A]]
+; CHECK-NEXT:    ret i1 [[CMP]]
+;
+  %add1 = add i32 %a, %b
+  %add2 = add i32 %add1, %c
+  %cmp = icmp eq i32 %add2, %b
+  ret i1 %cmp
+}
+
+; A + B + C + D == B
+define i1 @icmp_common_add_add_add(i32 %a, i32 %b, i32 %c, i32 %d){
+; CHECK-LABEL: define i1 @icmp_common_add_add_add(
+; CHECK-SAME: i32 [[A:%.*]], i32 [[B:%.*]], i32 [[C:%.*]], i32 [[D:%.*]]) {
+; CHECK-NEXT:    [[ADD2:%.*]] = add i32 [[A]], [[C]]
+; CHECK-NEXT:    [[ADD3:%.*]] = sub i32 0, [[D]]
+; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[ADD2]], [[ADD3]]
+; CHECK-NEXT:    ret i1 [[CMP]]
+;
+  %add1 = add i32 %a, %b
+  %add2 = add i32 %add1, %c
+  %add3 = add i32 %add2, %d
+  %cmp = icmp eq i32 %add3, %b
+  ret i1 %cmp
+}
+
+; A + B + C + D == C
+define i1 @icmp_common_add_add_add_2(i32 %a, i32 %b, i32 %c, i32 %d){
+; CHECK-LABEL: define i1 @icmp_common_add_add_add_2(
+; CHECK-SAME: i32 [[A:%.*]], i32 [[B:%.*]], i32 [[C:%.*]], i32 [[D:%.*]]) {
+; CHECK-NEXT:    [[ADD1:%.*]] = add i32 [[A]], [[B]]
+; CHECK-NEXT:    [[ADD3:%.*]] = sub i32 0, [[D]]
+; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[ADD1]], [[ADD3]]
+; CHECK-NEXT:    ret i1 [[CMP]]
+;
+  %add1 = add i32 %a, %b
+  %add2 = add i32 %add1, %c
+  %add3 = add i32 %add2, %d
+  %cmp = icmp eq i32 %add3, %c
+  ret i1 %cmp
+}
+
+; A + B + C - D == B
+define i1 @icmp_common_add_add_sub(i32 %a, i32 %b, i32 %c, i32 %d){
+; CHECK-LABEL: define i1 @icmp_common_add_add_sub(
+; CHECK-SAME: i32 [[A:%.*]], i32 [[B:%.*]], i32 [[C:%.*]], i32 [[D:%.*]]) {
+; CHECK-NEXT:    [[ADD2:%.*]] = add i32 [[A]], [[C]]
+; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[ADD2]], [[D]]
+; CHECK-NEXT:    ret i1 [[CMP]]
+;
+  %add1 = add i32 %a, %b
+  %add2 = add i32 %add1, %c
+  %sub = sub i32 %add2, %d
+  %cmp = icmp eq i32 %sub, %b
+  ret i1 %cmp
+}
+
+
+; A + B - C + D == B
+define i1 @icmp_common_add_sub_add(i32 %a, i32 %b, i32 %c, i32 %d){
+; CHECK-LABEL: define i1 @icmp_common_add_sub_add(
+; CHECK-SAME: i32 [[A:%.*]], i32 [[B:%.*]], i32 [[C:%.*]], i32 [[D:%.*]]) {
+; CHECK-NEXT:    [[SUB:%.*]] = sub i32 [[A]], [[C]]
+; CHECK-NEXT:    [[ADD2:%.*]] = sub i32 0, [[D]]
+; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[SUB]], [[ADD2]]
+; CHECK-NEXT:    ret i1 [[CMP]]
+;
+  %add1 = add i32 %a, %b
+  %sub = sub i32 %add1, %c
+  %add2 = add i32 %sub, %d
+  %cmp = icmp eq i32 %add2, %b
+  ret i1 %cmp
+}

From c8c76567e58fee1432df1199a20d87b658d4fe50 Mon Sep 17 00:00:00 2001
From: sun-jacobi <sun1011jacobi@gmail.com>
Date: Thu, 21 Dec 2023 21:18:04 +0900
Subject: [PATCH 5/5] [InstCombine] fixs bug in foldICmpWithCommonFactors

---
 .../InstCombine/InstCombineCompares.cpp       | 27 +++++++++++--------
 .../InstCombine/icmp-eq-common-factor.ll      |  2 +-
 2 files changed, 17 insertions(+), 12 deletions(-)

diff --git a/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp b/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp
index 399af8d1133f08..03c04f6d7b6b13 100644
--- a/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp
+++ b/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp
@@ -4555,27 +4555,32 @@ Instruction *InstCombinerImpl::foldICmpWithCommonFactors(ICmpInst &Cmp,
   if (!ICmpInst::isEquality(Pred))
     return nullptr;

-  SmallVector<BinaryOperator *, 16> worklist(1, LBO);
-  Constant *Zero = Constant::getNullValue(LBO->getType());
+  if (LBO->getOpcode() != Instruction::Add &&
+      LBO->getOpcode() != Instruction::Sub)
+    return nullptr;
+
+  SmallVector<BinaryOperator *, 16> worklist;
+
+  auto AddNextBO = [&](Value *Op) {
+    if (BinaryOperator *Next = dyn_cast<BinaryOperator>(Op))
+      worklist.push_back(Next);
+  };
+
+  AddNextBO(LBO->getOperand(0));
+  AddNextBO(LBO->getOperand(1));

   while (!worklist.empty()) {
     BinaryOperator *BO = worklist.pop_back_val();

     if (Value * A; match(BO, m_OneUse(m_c_Add(m_Value(A), m_Specific(RHS))))) {
-      if (BO != LBO) {
-        replaceInstUsesWith(*BO, A);
-        eraseInstFromFunction(*BO);
-      }
+      replaceInstUsesWith(*BO, A);
+      eraseInstFromFunction(*BO);
+      Constant *Zero = Constant::getNullValue(LBO->getType());
       return new ICmpInst(Pred, LBO, Zero);
     }

     unsigned Opc = BO->getOpcode();
     if (Opc == Instruction::Add || Opc == Instruction::Sub) {
-      auto AddNextBO = [&](Value *Op) {
-        if (BinaryOperator *Next = dyn_cast<BinaryOperator>(Op))
-          worklist.push_back(Next);
-      };
-
       AddNextBO(BO->getOperand(0));
       AddNextBO(BO->getOperand(1));
     }
diff --git a/llvm/test/Transforms/InstCombine/icmp-eq-common-factor.ll b/llvm/test/Transforms/InstCombine/icmp-eq-common-factor.ll
index e28c0910c9cae2..d6c3c8c8dfad35 100644
--- a/llvm/test/Transforms/InstCombine/icmp-eq-common-factor.ll
+++ b/llvm/test/Transforms/InstCombine/icmp-eq-common-factor.ll
@@ -14,7 +14,7 @@ define i1 @icmp_common_add_sub(i32 %a, i32 %b, i32 %c){
   ret i1 %cmp
 }

-; A + B - C == B
+; A + B - C !=  B
 define i1 @icmp_common_add_sub_ne(i32 %a, i32 %b, i32 %c){
 ; CHECK-LABEL: define i1 @icmp_common_add_sub_ne(
 ; CHECK-SAME: i32 [[A:%.*]], i32 [[B:%.*]], i32 [[C:%.*]]) {
