pkgname=llvm-git
pkgdesc="LLVM Toolchain with clang, clang-tools-extra, compiler-rt, openmp, polly, lldb, lld"
pkgver=19.0.0_r500144.7348bb23abdf
pkgrel=1
arch=('x86_64')
url="https://llvm.org/"
license=('custom:Apache 2.0 with LLVM Exception')

provides=('aur-llvm-git' 'compiler-rt-git' 'clang-git' 'lld-git' 'polly-git' 'aur-llvm-libs-git'
          'llvm-libs' 'openmp-git' 'pstl-git'
          'llvm' 'compiler-rt' 'clang' 'polly' 'lld' 'openmp' 'pstl')
conflicts=('llvm' 'compiler-rt' 'clang' 'polly' 'lld' 'llvm-libs' 'openmp' 'pstl')
depends=('libelf' 'libffi' 'libedit' 'libxml2' 'ncurses')
_ocaml_ver=5.0.0
makedepends=(
    'git' 'ninja' 'cmake' 'z3'
    "ocaml>=${_ocaml_ver}" 'ocaml-ctypes' 'ocaml-findlib' 'ocaml-stdlib-shims'
    'python-setuptools' 'python-psutil'
    'python-recommonmark' 'clang' 'lld' 'llvm-libs' 'llvm'
)
makedepends_x86_64=('lib32-gcc-libs')
source=(
    "llvm-project::git+https://github.com/llvm/llvm-project.git"
    'llvm-config.h'
    'improve-kernel-compile.patch'
    'fmafusion.patch'
    'haswell.patch'
    'corecount.patch'
)

sha256sums=('SKIP'
            '597dc5968c695bbdbb0eac9e8eb5117fcd2773bc91edf5ec103ecffffab8bc48'
            '593ed385298623711070dffce9225cb448dfc29f30c9d950887882b19bd124fb')

options=('staticlibs')

error_exit() {
    echo -e "\E[1;31m$1\E[0m"
    exit 1
}

pkgver() {
    cd llvm-project/cmake/Modules

    # This will almost match the output of `llvm-config --version` when the
    # LLVM_APPEND_VC_REV cmake flag is turned on. The only difference is
    # dash being replaced with underscore because of Pacman requirements.
    local _pkgver=$(awk -F 'MAJOR |MINOR |PATCH |)' \
            'BEGIN { ORS="." ; i=0 } \
             /set\(LLVM_VERSION_/ { print $2 ; i++ ; if (i==2) ORS="" } \
             END { print "\n" }' \
             LLVMVersion.cmake)_r$(git rev-list --count HEAD).$(git rev-parse --short HEAD)
    echo "$_pkgver"
}

apply_patch() {
    local action=$1
    local patch=$2
    echo -e "\E[1;33m ${action} patch: ${patch}\E[0m"
    patch --forward --strip=1 --input="${srcdir}/${patch}"
}

prepare() {
    cd "${srcdir}/llvm-project" || error_exit "Can't cd to ${srcdir}/llvm-project directory! Prepare Failed!"

    apply_patch "Apply" "fmafusion.patch"
    apply_patch "Apply" "corecount.patch"
    apply_patch "Apply" "haswell.patch"
    apply_patch "Apply" "improve-kernel-compile.patch"
    2to3 -wn --no-diffs \
        clang-tools-extra/clang-include-fixer/find-all-symbols/tool/run-find-all-symbols.py
}

build() {
    cd "${srcdir}/llvm-project" || error_exit "Can't cd to ${srcdir}/llvm-project directory! Build Failed!"

    local _extra_build_flags=()

    if clang --version 2>/dev/null | grep -iq "clang\s*version\s*[0-9]"; then
        export CC=clang CXX=clang++ AR=llvm-ar AS=llvm-as NM=llvm-nm STRIP=llvm-strip OBJCOPY=llvm-objcopy
        export OBJDUMP=llvm-objdump READELF=llvm-readelf HOSTCC=clang HOSTCXX=clang++ HOSTAR=llvm-ar
        export DEBUG_CFLAGS="-g0" DEBUG_CXXFLAGS="-g0"
        _extra_build_flags+=(
            -DCMAKE_C_COMPILER=clang
            -DCMAKE_CXX_COMPILER=clang++
        )
    else
        echo -e "\E[1;31mClang not found. Will use default system compiler! \E[0m"
    fi

    if ld.mold --version 2>/dev/null | grep -iq "LLD\s*[0-9]"; then
        export LD=ld.lld CC_LD=lld CXX_LD=lld HOSTLD=ld.lld
        _extra_build_flags+=(-DLLVM_USE_LINKER=lld)
    fi

    cmake -S llvm -B build -G Ninja \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=/usr \
        -DLLVM_BINUTILS_INCDIR=/usr/include \
        -DFFI_INCLUDE_DIR=$(pkg-config --variable=includedir libffi) \
        -DLLVM_HOST_TRIPLE=$CHOST \
        -DLLVM_DEFAULT_TARGET_TRIPLE="x86_64-pc-linux-gnu" \
        -DLLVM_BUILD_RUNTIME=ON \
        -DLLVM_BUILD_LLVM_DYLIB=ON \
        -DLLVM_LINK_LLVM_DYLIB=ON \
        -DCLANG_LINK_CLANG_DYLIB=ON \
        -DLLVM_DYLIB_COMPONENTS="all" \
        -DLLVM_INSTALL_UTILS=ON \
        -DLLVM_ENABLE_RTTI=ON \
        -DLLVM_ENABLE_FFI=ON \
        -DLLVM_ENABLE_BINDINGS=OFF \
        -DCMAKE_C_FLAGS="$CFLAGS -g0 -Wp,-D_FORTIFY_SOURCE=0" \
        -DCMAKE_CXX_FLAGS="$CXXFLAGS -g0 -Wp,-D_FORTIFY_SOURCE=0" \
        -DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS" \
        -DCMAKE_MODULE_LINKER_FLAGS="$LDFLAGS" \
        -DCMAKE_SHARED_LINKER_FLAGS="$LDFLAGS" \
        -DLLVM_INCLUDE_BENCHMARKS=OFF \
        -DLLVM_INCLUDE_TESTS=OFF \
        -DLLVM_INCLUDE_EXAMPLES=OFF \
        -DLLVM_BUILD_DOCS=OFF \
        -DLLVM_INCLUDE_DOCS=OFF \
        -DLLVM_ENABLE_OCAMLDOC=OFF \
        -DLLVM_ENABLE_SPHINX=OFF \
        -DLLVM_ENABLE_DOXYGEN=OFF \
        -DLLVM_POLLY_LINK_INTO_TOOLS=ON \
        -DLLVM_TARGETS_TO_BUILD="AMDGPU;X86;BPF" \
        -DLLVM_ENABLE_PROJECTS="clang;lld;polly;openmp;compiler-rt" \
        -DLLVM_ENABLE_ZLIB=ON \
        -DLLVM_ENABLE_ZSTD=ON \
        -DLIBCLANG_BUILD_STATIC=ON \
        -DLLVM_ENABLE_Z3_SOLVER=ON \
        -DLIBOMP_INSTALL_ALIASES=ON \
        -DLIBOMP_ENABLE_SHARED=ON \
        -DOPENMP_ENABLE_LIBOMP_PROFILING=OFF \
        -DLIBOMP_OMPT_SUPPORT=OFF \
        -DLLVM_INSTALL_TOOLCHAIN_ONLY=OFF \
        -DCLANG_DEFAULT_PIE_ON_LINUX=OFF \
        "${_extra_build_flags[@]}"

    ninja -C build
}

_python_optimize() {
    python -m compileall "$@"
    python -O -m compileall "$@"
    python -OO -m compileall "$@"
}

package() {
    cd "${srcdir}/llvm-project" || error_exit "Can't cd to ${srcdir}/llvm-project directory! Package Failed!"

    echo "Installing LLVM..."
    DESTDIR="${pkgdir}" ninja -C build install

  # Strip binaries and shared libraries only
  find "$pkgdir" -type f -exec sh -c '
    for file do
      filetype=$(file -bi "$file")
      case "$filetype" in
        *application/x-sharedlib*|*application/x-executable*)
          strip --strip-unneeded "$file"
          ;;
        *application/x-archive*)
          # Skip static libraries
          ;;
        *)
          # Check for specific formats if "file" command output is not clear
          case "$(file "$file")" in
            *ELF\ *executable*|*ELF\ *shared\ object*)
              strip --strip-unneeded "$file"
              ;;
          esac
          ;;
      esac
    done
  ' sh {} +

    echo "Installing lit Python package..."
    pushd llvm/utils/lit || error_exit "pushd utils/lit - Package Failed!"
    python setup.py install --root="${pkgdir}" -O1
    popd || error_exit "popd - Package Failed!"

    if [[ "${CARCH}" == "x86_64" ]]; then
        echo "Handling x86_64 specific files..."
        mv "${pkgdir}/usr/include/llvm/Config/llvm-config"{,-64}.h
        cp "${srcdir}/llvm-config.h" "${pkgdir}/usr/include/llvm/Config/llvm-config.h"
    fi

    echo "Creating BFD plugins directory..."
    mkdir -p "${pkgdir}/usr/lib/bfd-plugins"
    ln -s ../LLVMgold.so "${pkgdir}/usr/lib/bfd-plugins/LLVMgold.so"

    echo "Moving Python packages to site-packages..."
    site_packages=$(python -c "import site; print(site.getsitepackages()[0])")
    install -d "${pkgdir}/${site_packages}"
    mv "${pkgdir}/usr/lib/"{libear,libscanbuild} "${pkgdir}/${site_packages}/"

    echo "Moving libexec contents..."
    mv "${pkgdir}/usr/libexec/"* "${pkgdir}/usr/lib/clang/"
    rm -fr "${pkgdir}/usr/libexec"
    sed -i 's|libexec|lib/clang|' \
        "${pkgdir}/usr/bin/scan-build" \
        "${pkgdir}/${site_packages}/libscanbuild/analyze.py"

    echo "Optimizing Python bytecode..."
    _python_optimize "${pkgdir}/usr/share" "${pkgdir}/${site_packages}"

    if [[ _build_documentation -eq 0 ]]; then
        echo "Removing documentation..."
        rm -fr "${pkgdir}/usr/share/doc"
    fi

    echo "Installing license files..."
    install -Dm644 "${srcdir}/llvm-project/llvm/LICENSE.TXT" "${pkgdir}/usr/share/licenses/${pkgname}/llvm-LICENSE"
    install -Dm644 "${srcdir}/llvm-project/clang/LICENSE.TXT" "${pkgdir}/usr/share/licenses/${pkgname}/clang-LICENSE"
    install -Dm644 "${srcdir}/llvm-project/clang-tools-extra/LICENSE.TXT" "${pkgdir}/usr/share/licenses/${pkgname}/clang-tools-extra-LICENSE"
    install -Dm644 "${srcdir}/llvm-project/compiler-rt/LICENSE.TXT" "${pkgdir}/usr/share/licenses/${pkgname}/compiler-rt-LICENSE"
    install -Dm644 "${srcdir}/llvm-project/lld/LICENSE.TXT" "${pkgdir}/usr/share/licenses/${pkgname}/lld-LICENSE"
    install -Dm644 "${srcdir}/llvm-project/polly/LICENSE.TXT" "${pkgdir}/usr/share/licenses/${pkgname}/polly-LICENSE"
    install -Dm644 "${srcdir}/llvm-project/openmp/LICENSE.TXT" "${pkgdir}/usr/share/licenses/${pkgname}/openmp-LICENSE"
}
