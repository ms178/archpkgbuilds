pkgname=llvm-git
_pkgname=llvm
pkgdesc="LLVM Toolchain with clang and lld (LTO, PGO and BOLT Optimized)"
pkgver=20.0.0_r519764.cf47898453c8
pkgrel=1
arch=('x86_64')
url="https://llvm.org/"
license=('Apache-2.0 WITH LLVM-exception')
provides=("${_pkgname}" "clang" "lld" "compiler-rt" "polly" "openmp" "pstl")
conflicts=("${_pkgname}" "clang" "lld" "compiler-rt" "polly" "openmp" "pstl")
depends=('libelf' 'libffi' 'libedit' 'libxml2' 'ncurses' 'zstd')
_ocaml_ver=5.2.0
makedepends=(
    'git' 'ninja' 'cmake' 'z3' 'python-setuptools' 'python-psutil'
    'python-recommonmark' "ocaml>=${_ocaml_ver}" 'ocaml-ctypes' 'ocaml-findlib' 'ocaml-stdlib-shims'
    'clang' 'lld' 'llvm-libs' 'llvm'
)
makedepends_x86_64=('lib32-gcc-libs')
source=(
    "llvm-project::git+https://github.com/llvm/llvm-project.git"
    'llvm-config.h'
    'fmafusion.patch'
    'haswell.patch'
    'corecount.patch'
)
sha256sums=('SKIP'
            '597dc5968c695bbdbb0eac9e8eb5117fcd2773bc91edf5ec103ecffffab8bc48'
            '593ed385298623711070dffce9225cb448dfc29f30c9d950887882b19bd124fb')
options=('!strip' 'staticlibs')

error_exit() {
    echo -e "\e[1;31mError: $1\e[0m"
    exit 1
}

pkgver() {
    cd llvm-project/cmake/Modules
    local _pkgver=$(awk -F 'MAJOR |MINOR |PATCH |)' \
            'BEGIN { ORS="." ; i=0 } \
             /set\(LLVM_VERSION_/ { print $2 ; i++ ; if (i==2) ORS="" } \
             END { print "\n" }' \
             LLVMVersion.cmake)_r$(git rev-list --count HEAD).$(git rev-parse --short HEAD)
    echo "$_pkgver"
}

apply_patch() {
    local action=$1
    local patch=$2
    echo -e "\E[1;33m ${action} patch: ${patch}\E[0m"
    patch --forward --strip=1 --input="${srcdir}/${patch}"
}

prepare() {
    cd "${srcdir}/llvm-project" || error_exit "Can't cd to ${srcdir}/llvm-project directory! Prepare Failed!"
    apply_patch "Apply" "fmafusion.patch"
    apply_patch "Apply" "corecount.patch"
    apply_patch "Apply" "haswell.patch"
}

build_instrumented() {
    echo -e "\e[1;32mStarting instrumented build for PGO data collection...\e[0m"
    local build_dir="${srcdir}/llvm-project/build_instrumented"
    local install_dir="${srcdir}/llvm-project/install_instrumented"

    mkdir -p "${build_dir}"
    mkdir -p "${install_dir}"
    cd "${build_dir}" || error_exit "Can't cd to ${build_dir}!"

    cmake -S ../llvm -B . -G Ninja \
        -DCMAKE_BUILD_TYPE=RelWithDebInfo \
        -DCMAKE_INSTALL_PREFIX="${install_dir}" \
        -DLLVM_BINUTILS_INCDIR=/usr/include \
        -DLLVM_HOST_TRIPLE="${CHOST}" \
        -DLLVM_DEFAULT_TARGET_TRIPLE="x86_64-pc-linux-gnu" \
        -DLLVM_BUILD_RUNTIME=ON \
        -DLLVM_BUILD_LLVM_DYLIB=ON \
        -DLLVM_LINK_LLVM_DYLIB=ON \
        -DCLANG_LINK_CLANG_DYLIB=ON \
        -DLLVM_TOOLCHAIN_TOOLS="clang;lld;llvm-profdata;opt;llvm-objdump" \
        -DCMAKE_C_FLAGS="${CFLAGS} -fprofile-generate -g2 -Wl,-emit-relocs" \
        -DCMAKE_CXX_FLAGS="${CXXFLAGS} -fprofile-generate -g2 -Wl,-emit-relocs" \
        -DCMAKE_EXE_LINKER_FLAGS="${LDFLAGS} -fprofile-generate -g2 -Wl,-emit-relocs" \
        -DCMAKE_MODULE_LINKER_FLAGS="${LDFLAGS} -fprofile-generate -g2 -Wl,-emit-relocs" \
        -DCMAKE_SHARED_LINKER_FLAGS="${LDFLAGS} -fprofile-generate -g2 -Wl,-emit-relocs" \
        -DLLVM_INCLUDE_BENCHMARKS=ON \
        -DLLVM_INCLUDE_TESTS=OFF \
        -DLLVM_INCLUDE_EXAMPLES=OFF \
        -DLLVM_BUILD_DOCS=OFF \
        -DLLVM_INCLUDE_DOCS=OFF \
        -DLLVM_ENABLE_OCAMLDOC=OFF \
        -DLLVM_ENABLE_SPHINX=OFF \
        -DLLVM_ENABLE_DOXYGEN=OFF \
        -DLLVM_ENABLE_BINDINGS=OFF \
        -DLLVM_ENABLE_Z3_SOLVER=OFF \
        -DLLVM_ENABLE_ZLIB=ON \
        -DLLVM_ENABLE_ZSTD=ON \
        -DLLVM_TARGETS_TO_BUILD="X86" \
        -DLLVM_ENABLE_PROJECTS="clang;lld;compiler-rt;bolt" \
        -DCOMPILER_RT_BUILD_PROFILE=ON \
        -DCOMPILER_RT_BUILD_SANITIZERS=OFF \
        -DCOMPILER_RT_BUILD_XRAY=OFF \
        -DCOMPILER_RT_BUILD_LIBFUZZER=OFF \
        -DCOMPILER_RT_BUILD_MEMPROF=OFF \
        -DCOMPILER_RT_BUILD_BUILTINS=ON \
        -DLLVM_ENABLE_ASSERTIONS=OFF \
        -DLLVM_ENABLE_EXPENSIVE_CHECKS=OFF \
        -DLLVM_ENABLE_BACKTRACES=OFF \
        -DLLVM_ENABLE_CRASH_OVERRIDES=OFF \
        -DLLVM_ENABLE_FFI=ON \
        -DLLVM_ENABLE_RTTI=ON \
        -DLLVM_ENABLE_EH=ON \
        -DLLVM_VP_COUNTERS_PER_SITE=6 \
        -DLLVM_ENABLE_PLUGINS=ON \
        -DCMAKE_SKIP_RPATH=ON

    echo -e "\e[1;32mBuilding and installing instrumented compiler...\e[0m"
    ninja -C . clang clang-format lld llvm-profdata opt llvm-objdump compiler-rt llvm-ar llvm-ranlib
    ninja -C . install
    export PATH="${install_dir}/bin:$PATH"
    export LD_LIBRARY_PATH="${install_dir}/lib:$LD_LIBRARY_PATH"
    export LIBRARY_PATH="${install_dir}/lib:$LIBRARY_PATH"
}

generate_pgo_data() {
    echo -e "\e[1;32mGenerating PGO data...\e[0m"
    mkdir -p "${srcdir}/pgo-data"
    export LLVM_PROFILE_FILE="${srcdir}/pgo-data/profile-%p-%m.profraw"

    # Using clang tools as training data
    local clang_tools=(
        "clang" "lld"
    )

    for tool in "${clang_tools[@]}"; do
        if [[ -f "${install_dir}/bin/${tool}" ]]; then
            echo -e "\e[1;34mRunning ${tool} for PGO training...\e[0m"
            "${install_dir}/bin/${tool}" --help > /dev/null 2>&1
        fi
    done

    llvm-profdata merge -sparse -o="${srcdir}/pgo-data/merged.profdata" "${srcdir}/pgo-data/"
    echo -e "\e[1;32mFinished PGO data generation.\e[0m"
}

build_optimized() {
    echo -e "\e[1;32mStarting optimized build with LTO and PGO...\e[0m"
    local build_dir="${srcdir}/llvm-project/build_optimized"
    local install_dir="${pkgdir}"

    mkdir -p "${build_dir}"
    cd "${build_dir}" || error_exit "Can't cd to ${build_dir}!"

    cmake -S ../llvm -B . -G Ninja \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX="${install_dir}" \
        -DLLVM_BINUTILS_INCDIR=/usr/include \
        -DLLVM_HOST_TRIPLE="${CHOST}" \
        -DLLVM_DEFAULT_TARGET_TRIPLE="x86_64-pc-linux-gnu" \
        -DLLVM_BUILD_RUNTIME=ON \
        -DLLVM_BUILD_LLVM_DYLIB=ON \
        -DLLVM_LINK_LLVM_DYLIB=ON \
        -DCLANG_LINK_CLANG_DYLIB=ON \
        -DCMAKE_C_FLAGS="${CFLAGS} -fprofile-use=${srcdir}/pgo-data/merged.profdata -Wl,-emit-relocs" \
        -DCMAKE_CXX_FLAGS="${CXXFLAGS} -fprofile-use=${srcdir}/pgo-data/merged.profdata -Wl,-emit-relocs" \
        -DCMAKE_EXE_LINKER_FLAGS="${LDFLAGS} -fprofile-use=${srcdir}/pgo-data/merged.profdata -Wl,-emit-relocs" \
        -DCMAKE_MODULE_LINKER_FLAGS="${LDFLAGS} -fprofile-use=${srcdir}/pgo-data/merged.profdata -Wl,-emit-relocs" \
        -DCMAKE_SHARED_LINKER_FLAGS="${LDFLAGS} -fprofile-use=${srcdir}/pgo-data/merged.profdata -Wl,-emit-relocs" \
        -DLLVM_INCLUDE_BENCHMARKS=OFF \
        -DLLVM_INCLUDE_TESTS=OFF \
        -DLLVM_INCLUDE_EXAMPLES=OFF \
        -DLLVM_BUILD_DOCS=OFF \
        -DLLVM_INCLUDE_DOCS=OFF \
        -DLLVM_ENABLE_OCAMLDOC=OFF \
        -DLLVM_ENABLE_SPHINX=OFF \
        -DLLVM_ENABLE_DOXYGEN=OFF \
        -DLLVM_POLLY_LINK_INTO_TOOLS=ON \
        -DLLVM_TARGETS_TO_BUILD="AMDGPU;X86;BPF" \
        -DLLVM_ENABLE_PROJECTS="clang;lld;polly;openmp;compiler-rt;bolt" \
        -DLLVM_ENABLE_ZLIB=ON \
        -DLLVM_ENABLE_ZSTD=ON \
        -DLIBCLANG_BUILD_STATIC=ON \
        -DLLVM_ENABLE_Z3_SOLVER=ON \
        -DLIBOMP_INSTALL_ALIASES=ON \
        -DLIBOMP_ENABLE_SHARED=ON \
        -DOPENMP_ENABLE_LIBOMP_PROFILING=OFF \
        -DLIBOMP_OMPT_SUPPORT=ON \
        -DLIBOMP_OMPD_SUPPORT=ON \
        -DLLVM_INSTALL_TOOLCHAIN_ONLY=OFF \
        -DCLANG_DEFAULT_PIE_ON_LINUX=OFF

    echo -e "\e[1;32mBuilding optimized compiler...\e[0m"
    ninja -C . clang clang-format lld llvm-profdata opt llvm-objdump compiler-rt llvm-ar llvm-ranlib
    ninja -C . install
}

bolt_optimize() {
    echo -e "\e[1;32mStarting BOLT instrumentation and optimization...\e[0m"

    local tools_to_optimize=("clang" "lld")
    local instrument_data_dir="${srcdir}/bolt-instrument-data"
    local bolt_optimized_dir="${srcdir}/bolt-optimized"
    local bolt_bin="${srcdir}/llvm-project/build_optimized/tools/bolt/llvm-bolt"
    local install_bin_dir="${pkgdir}/bin"

    mkdir -p "${instrument_data_dir}" "${bolt_optimized_dir}"

    # Step 1: Instrument binaries with BOLT
    for tool in "${tools_to_optimize[@]}"; do
        if [[ -f "${install_bin_dir}/${tool}" ]]; then
            echo -e "\e[1;34mInstrumenting ${tool} with BOLT...\e[0m"
            mv "${install_bin_dir}/${tool}" "${install_bin_dir}/${tool}.orig"
            "${bolt_bin}" \
                --lite=false \
                --instrument \
                --instrumentation-file-append-pid \
                --instrumentation-file="${instrument_data_dir}/${tool}.fdata" \
                "${install_bin_dir}/${tool}.orig" \
                -o "${install_bin_dir}/${tool}"
        fi
    done

    # Step 2: Train the instrumented binaries
    echo -e "\e[1;32mTraining instrumented binaries with clang and lld workloads...\e[0m"
    export PATH="${install_bin_dir}:$PATH"  # Ensure instrumented binaries are used

    # Use LLVM/Clang source files for training
    local training_files=(
        "${srcdir}/llvm-project/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp"
        "${srcdir}/llvm-project/clang/lib/Parse/Parser.cpp"
        "${srcdir}/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp"
        "${srcdir}/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp"
        "${srcdir}/llvm-project/clang/lib/Parse/ParseExpr.cpp"
        "${srcdir}/llvm-project/clang/lib/Parse/ParseDecl.cpp"
        "${srcdir}/llvm-project/clang/lib/Parse/ParseTemplate.cpp"
        "${srcdir}/llvm-project/clang/lib/Sema/SemaDecl.cpp"
        "${srcdir}/llvm-project/clang/lib/Sema/SemaExpr.cpp"
        "${srcdir}/llvm-project/clang/lib/Sema/SemaTemplate.cpp"
        "${srcdir}/llvm-project/clang/lib/Frontend/CompilerInstance.cpp"
        "${srcdir}/llvm-project/clang/lib/AST/Stmt.cpp"
        "${srcdir}/llvm-project/clang/lib/AST/Expr.cpp"
        "${srcdir}/llvm-project/clang/lib/AST/DeclBase.cpp"
        "${srcdir}/llvm-project/clang/lib/Driver/Driver.cpp"
        "${srcdir}/llvm-project/lld/ELF/Driver.cpp"
        "${srcdir}/llvm-project/lld/ELF/Symbols.cpp"
        "${srcdir}/llvm-project/lld/ELF/Writer.cpp"
        "${srcdir}/llvm-project/lld/ELF/LinkerScript.cpp"
        "${srcdir}/llvm-project/lld/ELF/InputFiles.cpp"
        "${srcdir}/llvm-project/lld/ELF/OutputSections.cpp"
        "${srcdir}/llvm-project/lld/ELF/Relocations.cpp"
        "${srcdir}/llvm-project/lld/ELF/SymbolTable.cpp"
    )

    # Compile training files with instrumented clang
    echo -e "\e[1;34mCompiling training files with instrumented clang...\e[0m"
    for file in "${training_files[@]}"; do
        clang -O3 -march=native -mtune=native -mllvm -inline-threshold=500 -mllvm -extra-vectorizer-passes -mllvm -enable-interleaved-mem-accesses -mllvm -enable-masked-interleaved-mem-accesses -mllvm -enable-cond-stores-vec -mllvm -slp-vectorize-hor-store -mllvm -enable-loopinterchange -mllvm -enable-loop-distribute -mllvm -enable-unroll-and-jam -mllvm -enable-loop-flatten -mllvm -unroll-runtime-multi-exit -mllvm -aggressive-ext-opt -fno-math-errno -fno-trapping-math -falign-functions=32 -fno-semantic-interposition -fomit-frame-pointer -fcf-protection=none -mharden-sls=none -flto -fwhole-program-vtables -mllvm -adce-remove-loops -mllvm -enable-ext-tsp-block-placement=1 -mllvm -enable-gvn-hoist=1 -mllvm -enable-dfa-jump-thread=1 -fuse-ld=lld -c "$file" -o /dev/null || echo "Failed to compile $file"
    done

    # Run a sample linking workload with instrumented lld
    echo -e "\e[1;34mRunning a linking workload with instrumented lld...\e[0m"
    mkdir -p "${srcdir}/lld-training"
    clang -O3 -march=native -mtune=native -mllvm -inline-threshold=500 -mllvm -extra-vectorizer-passes -mllvm -enable-interleaved-mem-accesses -mllvm -enable-masked-interleaved-mem-accesses -mllvm -enable-cond-stores-vec -mllvm -slp-vectorize-hor-store -mllvm -enable-loopinterchange -mllvm -enable-loop-distribute -mllvm -enable-unroll-and-jam -mllvm -enable-loop-flatten -mllvm -unroll-runtime-multi-exit -mllvm -aggressive-ext-opt -fno-math-errno -fno-trapping-math -falign-functions=32 -fno-semantic-interposition -fomit-frame-pointer -fcf-protection=none -mharden-sls=none -flto -fwhole-program-vtables -mllvm -adce-remove-loops -mllvm -enable-ext-tsp-block-placement=1 -mllvm -enable-gvn-hoist=1 -mllvm -enable-dfa-jump-thread=1 -fuse-ld=lld -c "${srcdir}/llvm-project/llvm/lib/Support/CommandLine.cpp" -o "${srcdir}/lld-training/CommandLine.o"
    clang -O3 -march=native -mtune=native -mllvm -inline-threshold=500 -mllvm -extra-vectorizer-passes -mllvm -enable-interleaved-mem-accesses -mllvm -enable-masked-interleaved-mem-accesses -mllvm -enable-cond-stores-vec -mllvm -slp-vectorize-hor-store -mllvm -enable-loopinterchange -mllvm -enable-loop-distribute -mllvm -enable-unroll-and-jam -mllvm -enable-loop-flatten -mllvm -unroll-runtime-multi-exit -mllvm -aggressive-ext-opt -fno-math-errno -fno-trapping-math -falign-functions=32 -fno-semantic-interposition -fomit-frame-pointer -fcf-protection=none -mharden-sls=none -flto -fwhole-program-vtables -mllvm -adce-remove-loops -mllvm -enable-ext-tsp-block-placement=1 -mllvm -enable-gvn-hoist=1 -mllvm -enable-dfa-jump-thread=1 -fuse-ld=lld -c "${srcdir}/llvm-project/llvm/lib/Support/Timer.cpp" -o "${srcdir}/lld-training/Timer.o"
    lld -flavor gnu -o "${srcdir}/lld-training/test-binary" "${srcdir}/lld-training/CommandLine.o" "${srcdir}/lld-training/Timer.o" || echo "Failed to link training binary"

    # Step 3: Merge fdata profiles
    echo -e "\e[1;32mMerging BOLT profiles...\e[0m"
    local merged_fdata="${instrument_data_dir}/combined.fdata"
    "${bolt_bin%-bolt}/merge-fdata" "${instrument_data_dir}"/*.fdata -o "${merged_fdata}" || \
        echo "Failed to merge BOLT instrumentation data"

    # Step 4: Optimize binaries with BOLT
    echo -e "\e[1;32mOptimizing binaries with BOLT...\e[0m"
    for tool in "${tools_to_optimize[@]}"; do
        if [[ -f "${install_bin_dir}/${tool}.orig" ]]; then
            echo -e "\e[1;34mOptimizing ${tool} with BOLT...\e[0m"
            "${bolt_bin}" "${install_bin_dir}/${tool}.orig" \
                --data="${merged_fdata}" \
                -o "${install_bin_dir}/${tool}" \
                -reorder-blocks=ext-tsp \
                -reorder-functions=cdsort \
                -split-functions \
                -split-strategy=cdsplit \
                -split-all-cold \
                -split-eh \
                -hugify \
                -dyno-stats \
                -strip-rep-ret \
                -icf=1 \
                -plt=hot || echo "Failed to optimize ${tool} with BOLT"
        fi
    done

    echo -e "\e[1;32mFinished BOLT optimization.\e[0m"
}

build() {
    build_instrumented
    generate_pgo_data
    build_optimized
    bolt_optimize
}

_python_optimize() {
    python -m compileall "$@"
    python -O -m compileall "$@"
    python -OO -m compileall "$@"
}

package() {
    cd "${srcdir}/llvm-project" || error_exit "Can't cd to ${srcdir}/llvm-project directory! Package Failed!"

    echo -e "\e[1;32mInstalling LLVM components...\e[0m"
    DESTDIR="${pkgdir}" ninja -C build install

    echo -e "\e[1;32mStripping binaries and shared libraries...\e[0m"
    find "${pkgdir}" -type f -exec sh -c '
        for file do
            case "$(file -bi "$file")" in
                *application/x-sharedlib*|*application/x-executable*)
                    strip --strip-unneeded "$file" ;;
                *application/x-archive*)
                    # Skip static libraries
                    continue ;;
                *)
                    # Additional check for ELF files
                    if file "$file" | grep -q "ELF.*\\(shared object\\|executable\\)"; then
                        strip --strip-unneeded "$file"
                    fi
                    ;;
            esac
        done
    ' sh {} +

    echo -e "\e[1;32mInstalling Python components...\e[0m"
    # Install lit Python package
    pushd llvm/utils/lit || error_exit "Failed to enter lit directory!"
    python setup.py install --root="${pkgdir}" -O1
    popd || error_exit "Failed to return from lit directory!"

    # Handle architecture-specific files
    if [[ "${CARCH}" == "x86_64" ]]; then
        echo -e "\e[1;32mHandling x86_64 specific files...\e[0m"
        mv "${pkgdir}/usr/include/llvm/Config/llvm-config"{,-64}.h
        cp "${srcdir}/llvm-config.h" "${pkgdir}/usr/include/llvm/Config/llvm-config.h"
    fi

    echo -e "\e[1;32mSetting up BFD plugins...\e[0m"
    # Create and populate BFD plugins directory
    install -d "${pkgdir}/usr/lib/bfd-plugins"
    ln -sf ../LLVMgold.so "${pkgdir}/usr/lib/bfd-plugins/LLVMgold.so"

    echo -e "\e[1;32mOrganizing Python packages...\e[0m"
    # Get Python site-packages directory
    local site_packages
    site_packages=$(python -c "import site; print(site.getsitepackages()[0])")

    # Move Python packages to correct location
    install -d "${pkgdir}/${site_packages}"
    mv "${pkgdir}/usr/lib/"{libear,libscanbuild} "${pkgdir}/${site_packages}/"

    echo -e "\e[1;32mReorganizing directory structure...\e[0m"
    # Move libexec contents and update paths
    mv "${pkgdir}/usr/libexec/"* "${pkgdir}/usr/lib/clang/"
    rm -fr "${pkgdir}/usr/libexec"

    # Update paths in scripts
    sed -i 's|libexec|lib/clang|' \
        "${pkgdir}/usr/bin/scan-build" \
        "${pkgdir}/${site_packages}/libscanbuild/analyze.py"

    echo -e "\e[1;32mOptimizing Python bytecode...\e[0m"
    _python_optimize "${pkgdir}/usr/share" "${pkgdir}/${site_packages}"

    # Remove documentation if not needed
    if [[ ${_build_documentation} -eq 0 ]]; then
        echo -e "\e[1;32mRemoving documentation...\e[0m"
        rm -fr "${pkgdir}/usr/share/doc"
    fi

    echo -e "\e[1;32mSetting up library paths...\e[0m"
    # Configure LD library path
    install -d "${pkgdir}/etc/ld.so.conf.d"
    echo "/usr/lib/x86_64-pc-linux-gnu/" > "${pkgdir}/etc/ld.so.conf.d/x86_64-pc-linux-gnu.conf"

    echo -e "\e[1;32mInstalling license files...\e[0m"
    # Install license files for all components
    local license_files=(
        "llvm/LICENSE.TXT:llvm-LICENSE"
        "clang/LICENSE.TXT:clang-LICENSE"
        "clang-tools-extra/LICENSE.TXT:clang-tools-extra-LICENSE"
        "compiler-rt/LICENSE.TXT:compiler-rt-LICENSE"
        "lld/LICENSE.TXT:lld-LICENSE"
        "polly/LICENSE.TXT:polly-LICENSE"
        "openmp/LICENSE.TXT:openmp-LICENSE"
    )

    for license_file in "${license_files[@]}"; do
        local src_file="${license_file%:*}"
        local dest_name="${license_file#*:}"
        install -Dm644 "${srcdir}/llvm-project/${src_file}" \
            "${pkgdir}/usr/share/licenses/${pkgname}/${dest_name}"
    done

    echo -e "\e[1;32mPackage installation completed successfully.\e[0m"
}
