pkgname=llvm-git
pkgdesc="LLVM Toolchain with clang, clang-tools-extra, compiler-rt, openmp, polly, lldb, lld (PGO+LTO Optimized)"
pkgver=20.0.0_r519706.80afdbe6a55a
pkgrel=1
arch=('x86_64')
url="https://llvm.org/"
license=('Apache-2.0 WITH LLVM-exception')
provides=('aur-llvm-git' 'compiler-rt-git' 'clang-git' 'lld-git' 'polly-git' 'aur-llvm-libs-git'
          'llvm-libs' 'openmp-git' 'pstl-git'
          'llvm' 'compiler-rt' 'clang' 'polly' 'lld' 'openmp' 'pstl')
conflicts=('llvm' 'compiler-rt' 'clang' 'polly' 'lld' 'llvm-libs' 'openmp' 'pstl')
depends=('libelf' 'libffi' 'libedit' 'libxml2' 'ncurses')
_ocaml_ver=5.2.0
makedepends=(
    'git' 'ninja' 'cmake' 'z3'
    "ocaml>=${_ocaml_ver}" 'ocaml-ctypes' 'ocaml-findlib' 'ocaml-stdlib-shims'
    'python-setuptools' 'python-psutil'
    'python-recommonmark' 'clang' 'lld' 'llvm-libs' 'llvm'
)
makedepends_x86_64=('lib32-gcc-libs')
source=(
    "llvm-project::git+https://github.com/llvm/llvm-project.git"
    'llvm-config.h'
    'fmafusion.patch'
    'haswell.patch'
    'corecount.patch'
)
sha256sums=('SKIP'
            '597dc5968c695bbdbb0eac9e8eb5117fcd2773bc91edf5ec103ecffffab8bc48'
            '593ed385298623711070dffce9225cb448dfc29f30c9d950887882b19bd124fb')
options=('staticlibs')

error_exit() {
    echo -e "\e[1;31mError: $1\e[0m"
    exit 1
}

pkgver() {
    cd llvm-project/cmake/Modules

    # This will almost match the output of `llvm-config --version` when the
    # LLVM_APPEND_VC_REV cmake flag is turned on. The only difference is
    # dash being replaced with underscore because of Pacman requirements.
    local _pkgver=$(awk -F 'MAJOR |MINOR |PATCH |)' \
            'BEGIN { ORS="." ; i=0 } \
             /set\(LLVM_VERSION_/ { print $2 ; i++ ; if (i==2) ORS="" } \
             END { print "\n" }' \
             LLVMVersion.cmake)_r$(git rev-list --count HEAD).$(git rev-parse --short HEAD)
    echo "$_pkgver"
}

apply_patch() {
    local action=$1
    local patch=$2
    echo -e "\E[1;33m ${action} patch: ${patch}\E[0m"
    patch --forward --strip=1 --input="${srcdir}/${patch}"
}

prepare() {
    cd "${srcdir}/llvm-project" || error_exit "Can't cd to ${srcdir}/llvm-project directory! Prepare Failed!"

    apply_patch "Apply" "fmafusion.patch"
    apply_patch "Apply" "corecount.patch"
    apply_patch "Apply" "haswell.patch"
}

build_instrumented() {
    echo -e "\e[1;32mStarting minimal instrumented build for PGO data collection...\e[0m"
    local build_dir="${srcdir}/llvm-project/build_instrumented"
    local install_dir="${srcdir}/llvm-project/install_instrumented"
    local clang_bin
    local clangxx_bin

    mkdir -p "${build_dir}"
    mkdir -p "${install_dir}"
    cd "${build_dir}" || error_exit "Can't cd to ${build_dir}!"

    # CMAKE configuration with minimal components for PGO
    cmake -S ../llvm -B . -G Ninja \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX="${install_dir}" \
        -DLLVM_BINUTILS_INCDIR=/usr/include \
        -DLLVM_HOST_TRIPLE="${CHOST}" \
        -DLLVM_DEFAULT_TARGET_TRIPLE="x86_64-pc-linux-gnu" \
        -DLLVM_BUILD_RUNTIME=ON \
        -DLLVM_BUILD_LLVM_DYLIB=ON \
        -DLLVM_LINK_LLVM_DYLIB=ON \
        -DCLANG_LINK_CLANG_DYLIB=ON \
        -DLLVM_TOOLCHAIN_TOOLS="clang;lld;llvm-profdata;opt" \
        -DCMAKE_C_FLAGS="${CFLAGS} -g0 -Wp,-D_FORTIFY_SOURCE=0 -fprofile-generate" \
        -DCMAKE_CXX_FLAGS="${CXXFLAGS} -g0 -Wp,-D_FORTIFY_SOURCE=0 -fprofile-generate" \
        -DCMAKE_EXE_LINKER_FLAGS="${LDFLAGS} -fprofile-generate" \
        -DCMAKE_MODULE_LINKER_FLAGS="${LDFLAGS} -fprofile-generate" \
        -DCMAKE_SHARED_LINKER_FLAGS="${LDFLAGS} -fprofile-generate" \
        -DLLVM_INCLUDE_BENCHMARKS=OFF \
        -DLLVM_INCLUDE_TESTS=OFF \
        -DLLVM_INCLUDE_EXAMPLES=OFF \
        -DLLVM_BUILD_DOCS=OFF \
        -DLLVM_INCLUDE_DOCS=OFF \
        -DLLVM_ENABLE_OCAMLDOC=OFF \
        -DLLVM_ENABLE_SPHINX=OFF \
        -DLLVM_ENABLE_DOXYGEN=OFF \
        -DLLVM_ENABLE_BINDINGS=OFF \
        -DLLVM_ENABLE_Z3_SOLVER=OFF \
        -DLLVM_ENABLE_ZLIB=OFF \
        -DLLVM_ENABLE_ZSTD=ON \
        -DLLVM_TARGETS_TO_BUILD="X86" \
        -DLLVM_ENABLE_PROJECTS="clang;lld;compiler-rt" \
        -DCOMPILER_RT_BUILD_PROFILE=ON \
        -DCOMPILER_RT_BUILD_SANITIZERS=OFF \
        -DCOMPILER_RT_BUILD_XRAY=OFF \
        -DCOMPILER_RT_BUILD_LIBFUZZER=OFF \
        -DCOMPILER_RT_BUILD_MEMPROF=OFF \
        -DCOMPILER_RT_BUILD_BUILTINS=ON \
        -DLLVM_ENABLE_ASSERTIONS=OFF \
        -DLLVM_ENABLE_EXPENSIVE_CHECKS=OFF \
        -DLLVM_ENABLE_BACKTRACES=OFF \
        -DLLVM_ENABLE_CRASH_OVERRIDES=OFF \
        -DLLVM_ENABLE_FFI=OFF \
        -DLLVM_ENABLE_RTTI=ON \
        -DLLVM_VP_COUNTERS_PER_SITE=6 \
        -DLLVM_ENABLE_PLUGINS=ON

    echo -e "\e[1;32mBuilding and installing minimal instrumented compiler...\e[0m"
    ninja -C . clang llvm-profdata opt compiler-rt
    ninja -C . install

    # Set up the path to use our instrumented compiler
    export PATH="${install_dir}/bin:$PATH"
    export LD_LIBRARY_PATH="${install_dir}/lib:$LD_LIBRARY_PATH"
    export LIBRARY_PATH="${install_dir}/lib:$LIBRARY_PATH"

    echo -e "\e[1;32mGenerating test files for PGO data collection...\e[0m"
    mkdir -p "${srcdir}/pgo-data"
    export LLVM_PROFILE_FILE="${srcdir}/pgo-data/profile-%p-%m.profraw"

    clang_bin="${install_dir}/bin/clang"
    clangxx_bin="${install_dir}/bin/clang++"

    # Create example C++ file
    cat > "${srcdir}/example.cpp" << 'EOF'
#include <iostream>
#include <vector>
#include <algorithm>
#include <random>
#include <chrono>

template<typename T>
void quicksort(std::vector<T>& arr, int left, int right) {
    if (left >= right) return;

    T pivot = arr[(left + right) / 2];
    int i = left, j = right;

    while (i <= j) {
        while (arr[i] < pivot) i++;
        while (arr[j] > pivot) j--;
        if (i <= j) {
            std::swap(arr[i], arr[j]);
            i++;
            j--;
        }
    }

    quicksort(arr, left, j);
    quicksort(arr, i, right);
}

int main() {
    const int size = 1000000;
    std::vector<int> data(size);

    // Initialize with random values
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> dis(1, size);

    for (int i = 0; i < size; ++i) {
        data[i] = dis(gen);
    }

    // Sort multiple times to generate more PGO data
    for (int i = 0; i < 5; ++i) {
        std::vector<int> temp = data;
        quicksort(temp, 0, temp.size() - 1);
    }

    return 0;
}
EOF

    echo -e "\e[1;32mCompiling and running C++ example...\e[0m"
    "${clangxx_bin}" -std=c++17 -O3 -fprofile-generate -mllvm -inline-threshold=500 -mllvm -extra-vectorizer-passes -mllvm -enable-cond-stores-vec -mllvm -slp-vectorize-hor-store -mllvm -enable-loopinterchange -mllvm -enable-loop-distribute -mllvm -enable-unroll-and-jam -mllvm -enable-loop-flatten -mllvm -unroll-runtime-multi-exit -mllvm -aggressive-ext-opt -mllvm -enable-interleaved-mem-accesses -mllvm -enable-masked-interleaved-mem-accesses -fno-math-errno -fno-trapping-math -falign-functions=32 -funroll-loops -fno-semantic-interposition -fcf-protection=none -mharden-sls=none -fno-omit-frame-pointer -mprefer-vector-width=256 -flto -fsplit-lto-unit -mllvm -adce-remove-loops -mllvm -enable-ext-tsp-block-placement=1 -mllvm -enable-gvn-hoist=1 -mllvm -enable-dfa-jump-thread=1 -Wno-error -fdata-sections -ffunction-sections -fno-unique-section-names -fsplit-machine-functions -mtls-dialect=gnu2 -fuse-ld=lld "${srcdir}/example.cpp" -o "${srcdir}/example"
    "${srcdir}/example"

    # Create example C file
    cat > "${srcdir}/example.c" << 'EOF'
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void matrix_multiply(float* A, float* B, float* C, int N) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            float sum = 0.0f;
            for (int k = 0; k < N; k++) {
                sum += A[i * N + k] * B[k * N + j];
            }
            C[i * N + j] = sum;
        }
    }
}

int main() {
    const int N = 500;
    float *A = malloc(N * N * sizeof(float));
    float *B = malloc(N * N * sizeof(float));
    float *C = malloc(N * N * sizeof(float));

    // Initialize matrices
    for (int i = 0; i < N * N; i++) {
        A[i] = (float)rand() / RAND_MAX;
        B[i] = (float)rand() / RAND_MAX;
    }

    // Perform multiplication multiple times
    for (int i = 0; i < 3; i++) {
        matrix_multiply(A, B, C, N);
    }

    // Print checksum
    float sum = 0.0f;
    for (int i = 0; i < N * N; i++) {
        sum += C[i];
    }
    printf("Checksum: %f\n", sum);

    free(A);
    free(B);
    free(C);
    return 0;
}
EOF

    echo -e "\e[1;32mCompiling and running C example...\e[0m"
    "${clang_bin}" -O3 -fprofile-generate -mllvm -inline-threshold=500 -mllvm -extra-vectorizer-passes -mllvm -enable-cond-stores-vec -mllvm -slp-vectorize-hor-store -mllvm -enable-loopinterchange -mllvm -enable-loop-distribute -mllvm -enable-unroll-and-jam -mllvm -enable-loop-flatten -mllvm -unroll-runtime-multi-exit -mllvm -aggressive-ext-opt -mllvm -enable-interleaved-mem-accesses -mllvm -enable-masked-interleaved-mem-accesses -fno-math-errno -fno-trapping-math -falign-functions=32 -funroll-loops -fno-semantic-interposition -fcf-protection=none -mharden-sls=none -fno-omit-frame-pointer -mprefer-vector-width=256 -flto -fsplit-lto-unit -mllvm -adce-remove-loops -mllvm -enable-ext-tsp-block-placement=1 -mllvm -enable-gvn-hoist=1 -mllvm -enable-dfa-jump-thread=1 -Wno-error -fdata-sections -ffunction-sections -fno-unique-section-names -fsplit-machine-functions -mtls-dialect=gnu2 -fuse-ld=lld "${srcdir}/example.c" -o "${srcdir}/example_c"
    "${srcdir}/example_c"

    echo -e "\e[1;32mMerging profile data...\e[0m"
    "${build_dir}/bin/llvm-profdata" merge -sparse \
        -output="${srcdir}/pgo-data/merged.profdata" \
        "${srcdir}/pgo-data"/profile-*.profraw


    echo -e "\e[1;32mFinished instrumented build and PGO data collection.\e[0m"
    # Clean up the temporary installation
    rm -rf "${install_dir}"
}

build() {
    build_instrumented

    echo -e "\e[1;32mStarting optimized build with PGO and LTO...\e[0m"
    local build_dir="${srcdir}/llvm-project/build"
    local instrumented_build_dir="${srcdir}/llvm-project/build_instrumented"

    mkdir -p "${build_dir}"
    cd "${build_dir}" || error_exit "Can't cd to ${build_dir}! Build Failed!"

    # Common flags for optimized build
    local common_flags="-g0 -Wp,-D_FORTIFY_SOURCE=0 -fprofile-use=${srcdir}/pgo-data/merged.profdata"
    local pgo_flags="-fprofile-use=${srcdir}/pgo-data/merged.profdata"

    cmake -S ../llvm -B . -G Ninja \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=/usr \
        -DLLVM_BINUTILS_INCDIR=/usr/include \
        -DFFI_INCLUDE_DIR="$(pkg-config --variable=includedir libffi)" \
        -DLLVM_HOST_TRIPLE="${CHOST}" \
        -DLLVM_DEFAULT_TARGET_TRIPLE="x86_64-pc-linux-gnu" \
        -DLLVM_BUILD_RUNTIME=ON \
        -DLLVM_BUILD_LLVM_DYLIB=ON \
        -DLLVM_LINK_LLVM_DYLIB=ON \
        -DCLANG_LINK_CLANG_DYLIB=ON \
        -DLLVM_DYLIB_COMPONENTS="all" \
        -DLLVM_INSTALL_UTILS=ON \
        -DLLVM_ENABLE_RTTI=ON \
        -DLLVM_ENABLE_FFI=ON \
        -DLLVM_ENABLE_BINDINGS=OFF \
        -DCMAKE_C_FLAGS="${CFLAGS} ${common_flags}" \
        -DCMAKE_CXX_FLAGS="${CXXFLAGS} ${common_flags}" \
        -DCMAKE_EXE_LINKER_FLAGS="${LDFLAGS} ${pgo_flags}" \
        -DCMAKE_MODULE_LINKER_FLAGS="${LDFLAGS} ${pgo_flags}" \
        -DCMAKE_SHARED_LINKER_FLAGS="${LDFLAGS} ${pgo_flags}" \
        -DLLVM_INCLUDE_BENCHMARKS=OFF \
        -DLLVM_INCLUDE_TESTS=OFF \
        -DLLVM_INCLUDE_EXAMPLES=OFF \
        -DLLVM_BUILD_DOCS=OFF \
        -DLLVM_INCLUDE_DOCS=OFF \
        -DLLVM_ENABLE_OCAMLDOC=OFF \
        -DLLVM_ENABLE_SPHINX=OFF \
        -DLLVM_ENABLE_DOXYGEN=OFF \
        -DLLVM_POLLY_LINK_INTO_TOOLS=ON \
        -DPOLLY_ENABLE_TESTS=OFF \
        -DLLVM_TARGETS_TO_BUILD="AMDGPU;X86;BPF" \
        -DLLVM_ENABLE_PROJECTS="clang;lld;polly;openmp;compiler-rt" \
        -DLLVM_ENABLE_ZLIB=ON \
        -DLLVM_ENABLE_ZSTD=ON \
        -DLIBCLANG_BUILD_STATIC=ON \
        -DLLVM_ENABLE_Z3_SOLVER=ON \
        -DLIBOMP_INSTALL_ALIASES=ON \
        -DLIBOMP_ENABLE_SHARED=ON \
        -DOPENMP_ENABLE_LIBOMP_PROFILING=OFF \
        -DLIBOMP_OMPT_SUPPORT=ON \
        -DLIBOMP_OMPD_SUPPORT=ON \
        -DLLVM_INSTALL_TOOLCHAIN_ONLY=OFF \
        -DCLANG_DEFAULT_PIE_ON_LINUX=OFF

    echo -e "\e[1;32mStarting final build...\e[0m"
    ninja -C .

    if [[ $? -ne 0 ]]; then
        error_exit "Final build failed!"
    fi

    echo -e "\e[1;32mFinished optimized build with PGO and LTO.\e[0m"
}

_python_optimize() {
    python -m compileall "$@"
    python -O -m compileall "$@"
    python -OO -m compileall "$@"
}

package() {
    cd "${srcdir}/llvm-project" || error_exit "Can't cd to ${srcdir}/llvm-project directory! Package Failed!"

    echo -e "\e[1;32mInstalling LLVM components...\e[0m"
    DESTDIR="${pkgdir}" ninja -C build install

    echo -e "\e[1;32mStripping binaries and shared libraries...\e[0m"
    find "${pkgdir}" -type f -exec sh -c '
        for file do
            case "$(file -bi "$file")" in
                *application/x-sharedlib*|*application/x-executable*)
                    strip --strip-unneeded "$file" ;;
                *application/x-archive*)
                    # Skip static libraries
                    continue ;;
                *)
                    # Additional check for ELF files
                    if file "$file" | grep -q "ELF.*\\(shared object\\|executable\\)"; then
                        strip --strip-unneeded "$file"
                    fi
                    ;;
            esac
        done
    ' sh {} +

    echo -e "\e[1;32mInstalling Python components...\e[0m"
    # Install lit Python package
    pushd llvm/utils/lit || error_exit "Failed to enter lit directory!"
    python setup.py install --root="${pkgdir}" -O1
    popd || error_exit "Failed to return from lit directory!"

    # Handle architecture-specific files
    if [[ "${CARCH}" == "x86_64" ]]; then
        echo -e "\e[1;32mHandling x86_64 specific files...\e[0m"
        mv "${pkgdir}/usr/include/llvm/Config/llvm-config"{,-64}.h
        cp "${srcdir}/llvm-config.h" "${pkgdir}/usr/include/llvm/Config/llvm-config.h"
    fi

    echo -e "\e[1;32mSetting up BFD plugins...\e[0m"
    # Create and populate BFD plugins directory
    install -d "${pkgdir}/usr/lib/bfd-plugins"
    ln -sf ../LLVMgold.so "${pkgdir}/usr/lib/bfd-plugins/LLVMgold.so"

    echo -e "\e[1;32mOrganizing Python packages...\e[0m"
    # Get Python site-packages directory
    local site_packages
    site_packages=$(python -c "import site; print(site.getsitepackages()[0])")

    # Move Python packages to correct location
    install -d "${pkgdir}/${site_packages}"
    mv "${pkgdir}/usr/lib/"{libear,libscanbuild} "${pkgdir}/${site_packages}/"

    echo -e "\e[1;32mReorganizing directory structure...\e[0m"
    # Move libexec contents and update paths
    mv "${pkgdir}/usr/libexec/"* "${pkgdir}/usr/lib/clang/"
    rm -fr "${pkgdir}/usr/libexec"

    # Update paths in scripts
    sed -i 's|libexec|lib/clang|' \
        "${pkgdir}/usr/bin/scan-build" \
        "${pkgdir}/${site_packages}/libscanbuild/analyze.py"

    echo -e "\e[1;32mOptimizing Python bytecode...\e[0m"
    _python_optimize "${pkgdir}/usr/share" "${pkgdir}/${site_packages}"

    # Remove documentation if not needed
    if [[ ${_build_documentation} -eq 0 ]]; then
        echo -e "\e[1;32mRemoving documentation...\e[0m"
        rm -fr "${pkgdir}/usr/share/doc"
    fi

    echo -e "\e[1;32mSetting up library paths...\e[0m"
    # Configure LD library path
    install -d "${pkgdir}/etc/ld.so.conf.d"
    echo "/usr/lib/x86_64-pc-linux-gnu/" > "${pkgdir}/etc/ld.so.conf.d/x86_64-pc-linux-gnu.conf"

    echo -e "\e[1;32mInstalling license files...\e[0m"
    # Install license files for all components
    local license_files=(
        "llvm/LICENSE.TXT:llvm-LICENSE"
        "clang/LICENSE.TXT:clang-LICENSE"
        "clang-tools-extra/LICENSE.TXT:clang-tools-extra-LICENSE"
        "compiler-rt/LICENSE.TXT:compiler-rt-LICENSE"
        "lld/LICENSE.TXT:lld-LICENSE"
        "polly/LICENSE.TXT:polly-LICENSE"
        "openmp/LICENSE.TXT:openmp-LICENSE"
    )

    for license_file in "${license_files[@]}"; do
        local src_file="${license_file%:*}"
        local dest_name="${license_file#*:}"
        install -Dm644 "${srcdir}/llvm-project/${src_file}" \
            "${pkgdir}/usr/share/licenses/${pkgname}/${dest_name}"
    done

    echo -e "\e[1;32mPackage installation completed successfully.\e[0m"
}
