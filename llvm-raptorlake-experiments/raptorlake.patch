Date: Sun, 17 Aug 2025 21:21:44 -0700
Subject: Make Clang default to Raptorlake
---
 clang/lib/Driver/ToolChains/Arch/X86.cpp | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/clang/lib/Driver/ToolChains/Arch/X86.cpp b/clang/lib/Driver/ToolChains/Arch/X86.cpp
index cf2bc63d7..f95d36c3b 100644
--- a/clang/lib/Driver/ToolChains/Arch/X86.cpp
+++ b/clang/lib/Driver/ToolChains/Arch/X86.cpp
@@ -110,7 +110,7 @@ std::string x86::getX86TargetCPU(const D
     return "i686";
   default:
     // Fallback to p4.
-    return "pentium4";
+    return "raptorlake";
   }
 }
 
@@ -296,8 +296,7 @@ void x86::getX86TargetFeatures(const Dri
 
       if (Not64Bit && !IsNegative)
         D.Diag(diag::err_drv_unsupported_opt_for_target)
-            << StringRef(A->getSpelling().str() + "|-mapxf")
-            << Triple.getTriple();
+            << A->getSpelling() << Triple.getTriple();
 
       for (StringRef Value : A->getValues()) {
         if (Value != "egpr" && Value != "push2pop2" && Value != "ppx" &&


--
2.42.1

--- a/llvm/lib/Target/X86/X86ScheduleAtom.td	2025-08-17 15:00:22.438147700 +0200
+++ b/llvm/lib/Target/X86/X86ScheduleAtom.td	2025-08-17 15:10:50.464783354 +0200


--- a/llvm/lib/Target/X86/X86SchedAlderlakeP.td	2025-08-17 09:11:20.226279396 +0200
+++ b/llvm/lib/Target/X86/X86SchedAlderlakeP.td	2025-08-17 10:42:12.199203267 +0200
@@ -15,8 +15,8 @@ def AlderlakePModel : SchedMachineModel
   // Alderlake-P core can allocate 6 uops per cycle.
   let IssueWidth = 6; // Based on allocator width.
   let MicroOpBufferSize = 512; // Based on the reorder buffer.
-  let LoadLatency = 5;
-  let MispredictPenalty = 14;
+  let LoadLatency = 4;
+  let MispredictPenalty = 19;
 
   // Latency for microcoded instructions or instructions without latency info.
   int MaxLatency = 100;
@@ -87,11 +87,10 @@ def ADLPPortAny : ProcResGroup<[ADLPPort
 // until 5 cycles after the memory operand.
 def : ReadAdvance<ReadAfterLd, 5>;
 
-// Vector loads are 6 cycles, so ReadAfterVec*Ld registers needn't be available
-// until 6 cycles after the memory operand.
-def : ReadAdvance<ReadAfterVecLd, 6>;
-def : ReadAdvance<ReadAfterVecXLd, 6>;
-def : ReadAdvance<ReadAfterVecYLd, 6>;
+// Dependent-use read-advance after vector loads: 5c
+def : ReadAdvance<ReadAfterVecLd, 5>;
+def : ReadAdvance<ReadAfterVecXLd, 5>;
+def : ReadAdvance<ReadAfterVecYLd, 5>;
 
 def : ReadAdvance<ReadInt2Fpu, 0>;
 
@@ -150,8 +149,8 @@ def : WriteRes<WriteBitTestSetImmLd, [AD
   let Latency = 11;
 }
 defm : X86WriteRes<WriteBitTestSetRegLd, [ADLPPort00_01_05_06_11, ADLPPort00_06, ADLPPort01, ADLPPort01_05_11], 17, [3, 2, 1, 2], 8>;
-defm : ADLPWriteResPair<WriteBlend, [ADLPPort01_05], 1, [1], 1, 7>;
-defm : ADLPWriteResPair<WriteBlendY, [ADLPPort00_01_05], 1, [1], 1, 8>;
+defm : ADLPWriteResPair<WriteBlend, [ADLPPort01_05], 1, [1], 1, 5>;
+defm : ADLPWriteResPair<WriteBlendY, [ADLPPort00_01_05], 1, [1], 1, 5>;
 defm : ADLPWriteResPair<WriteCLMul, [ADLPPort05], 3, [1], 1, 7>;
 defm : ADLPWriteResPair<WriteCMOV, [ADLPPort00_06], 1, [1], 1, 6>;
 defm : X86WriteRes<WriteCMPXCHG, [ADLPPort00_01_05_06_11, ADLPPort00_06], 3, [3, 2], 5>;
@@ -203,24 +202,24 @@ defm : ADLPWriteResPair<WriteDPPD, [ADLP
 defm : ADLPWriteResPair<WriteDPPS, [ADLPPort00_01, ADLPPort00_06, ADLPPort01_05, ADLPPort05], 14, [2, 1, 2, 1], 6, 7>;
 defm : ADLPWriteResPair<WriteDPPSY, [ADLPPort00_01, ADLPPort00_06, ADLPPort01_05, ADLPPort05], 14, [2, 1, 2, 1], 6, 8>;
 defm : ADLPWriteResPair<WriteDiv16, [ADLPPort00_01_05_06_11, ADLPPort01], 16, [1, 3], 4, 4>;
-defm : ADLPWriteResPair<WriteDiv32, [ADLPPort00_01_05_06_11, ADLPPort01], 15, [1, 3], 4, 4>;
-defm : ADLPWriteResPair<WriteDiv64, [ADLPPort01], 18, [3], 3>;
+defm : ADLPWriteResPair<WriteDiv32, [ADLPPort00_01_05_06_11, ADLPPort01], 13, [1, 3], 4, 4>;
+defm : ADLPWriteResPair<WriteDiv64, [ADLPPort01], 16, [3], 3>;
 defm : X86WriteRes<WriteDiv8, [ADLPPort01], 17, [3], 3>;
 defm : X86WriteRes<WriteDiv8Ld, [ADLPPort01], 22, [3], 3>;
 defm : X86WriteRes<WriteEMMS, [ADLPPort00, ADLPPort00_05, ADLPPort00_06], 10, [1, 8, 1], 10>;
-def : WriteRes<WriteFAdd, [ADLPPort05]> {
+def : WriteRes<WriteFAdd, [ADLPPort01_05]> {
   let Latency = 3;
 }
-defm : X86WriteRes<WriteFAddLd, [ADLPPort01_05, ADLPPort02_03_10], 10, [1, 1], 2>;
-defm : ADLPWriteResPair<WriteFAdd64, [ADLPPort01_05], 3, [1], 1, 7>;
-defm : ADLPWriteResPair<WriteFAdd64X, [ADLPPort01_05], 3, [1], 1, 7>;
-defm : ADLPWriteResPair<WriteFAdd64Y, [ADLPPort01_05], 3, [1], 1, 8>;
+defm : X86WriteRes<WriteFAddLd, [ADLPPort01_05, ADLPPort02_03_10], 8, [1, 1], 2>;
+defm : ADLPWriteResPair<WriteFAdd64, [ADLPPort01_05], 3, [1], 1, 5>;
+defm : ADLPWriteResPair<WriteFAdd64X, [ADLPPort01_05], 3, [1], 1, 5>;
+defm : ADLPWriteResPair<WriteFAdd64Y, [ADLPPort01_05], 3, [1], 1, 5>;
 defm : X86WriteResPairUnsupported<WriteFAdd64Z>;
-defm : ADLPWriteResPair<WriteFAddX, [ADLPPort01_05], 3, [1], 1, 7>;
-defm : ADLPWriteResPair<WriteFAddY, [ADLPPort01_05], 3, [1], 1, 8>;
+defm : ADLPWriteResPair<WriteFAddX, [ADLPPort01_05], 3, [1], 1, 5>;
+defm : ADLPWriteResPair<WriteFAddY, [ADLPPort01_05], 3, [1], 1, 5>;
 defm : X86WriteResPairUnsupported<WriteFAddZ>;
-defm : ADLPWriteResPair<WriteFBlend, [ADLPPort00_01_05], 1, [1], 1, 7>;
-defm : ADLPWriteResPair<WriteFBlendY, [ADLPPort00_01_05], 1, [1], 1, 8>;
+defm : ADLPWriteResPair<WriteFBlend, [ADLPPort00_01_05], 1, [1], 1, 5>;
+defm : ADLPWriteResPair<WriteFBlendY, [ADLPPort00_01_05], 1, [1], 1, 5>;
 def : WriteRes<WriteFCMOV, [ADLPPort01]> {
   let Latency = 3;
 }
@@ -248,21 +247,15 @@ defm : ADLPWriteResPair<WriteFHAddY, [AD
 def : WriteRes<WriteFLD0, [ADLPPort00_05]>;
 defm : X86WriteRes<WriteFLD1, [ADLPPort00_05], 1, [2], 2>;
 defm : X86WriteRes<WriteFLDC, [ADLPPort00_05], 1, [2], 2>;
-def : WriteRes<WriteFLoad, [ADLPPort02_03_10]> {
-  let Latency = 7;
-}
-def : WriteRes<WriteFLoadX, [ADLPPort02_03_10]> {
-  let Latency = 7;
-}
-def : WriteRes<WriteFLoadY, [ADLPPort02_03_10]> {
-  let Latency = 8;
-}
-defm : ADLPWriteResPair<WriteFLogic, [ADLPPort00_01_05], 1, [1], 1, 7>;
-defm : ADLPWriteResPair<WriteFLogicY, [ADLPPort00_01_05], 1, [1], 1, 8>;
+def : WriteRes<WriteFLoad, [ADLPPort02_03_10]> { let Latency = 5; }
+def : WriteRes<WriteFLoadX, [ADLPPort02_03_10]> { let Latency = 5; }
+def : WriteRes<WriteFLoadY, [ADLPPort02_03_10]> { let Latency = 5; }
+defm : ADLPWriteResPair<WriteFLogic, [ADLPPort00_01_05], 1, [1], 1, 5>;
+defm : ADLPWriteResPair<WriteFLogicY, [ADLPPort00_01_05], 1, [1], 1, 5>;
 defm : X86WriteResPairUnsupported<WriteFLogicZ>;
-defm : ADLPWriteResPair<WriteFMA, [ADLPPort00_01], 4, [1], 1, 7>;
-defm : ADLPWriteResPair<WriteFMAX, [ADLPPort00_01], 4, [1], 1, 7>;
-defm : ADLPWriteResPair<WriteFMAY, [ADLPPort00_01], 4, [1], 1, 8>;
+defm : ADLPWriteResPair<WriteFMA, [ADLPPort00_01], 4, [1], 1, 5>;
+defm : ADLPWriteResPair<WriteFMAX, [ADLPPort00_01], 4, [1], 1, 5>;
+defm : ADLPWriteResPair<WriteFMAY, [ADLPPort00_01], 4, [1], 1, 5>;
 defm : X86WriteResPairUnsupported<WriteFMAZ>;
 def : WriteRes<WriteFMOVMSK, [ADLPPort00]> {
   let Latency = 3;
@@ -276,13 +269,13 @@ defm : X86WriteRes<WriteFMaskedStore64Y,
 defm : X86WriteRes<WriteFMoveX, [], 1, [], 0>;
 defm : X86WriteRes<WriteFMoveY, [], 1, [], 0>;
 defm : X86WriteResUnsupported<WriteFMoveZ>;
-defm : ADLPWriteResPair<WriteFMul, [ADLPPort00_01], 4, [1], 1, 7>;
-defm : ADLPWriteResPair<WriteFMul64, [ADLPPort00_01], 4, [1], 1, 7>;
-defm : ADLPWriteResPair<WriteFMul64X, [ADLPPort00_01], 4, [1], 1, 7>;
-defm : ADLPWriteResPair<WriteFMul64Y, [ADLPPort00_01], 4, [1], 1, 8>;
+defm : ADLPWriteResPair<WriteFMul, [ADLPPort00_01], 4, [1], 1, 5>;
+defm : ADLPWriteResPair<WriteFMul64, [ADLPPort00_01], 3, [1], 1, 5>;
+defm : ADLPWriteResPair<WriteFMul64X,[ADLPPort00_01], 3, [1], 1, 5>;
+defm : ADLPWriteResPair<WriteFMul64Y,[ADLPPort00_01], 3, [1], 1, 5>;
 defm : X86WriteResPairUnsupported<WriteFMul64Z>;
-defm : ADLPWriteResPair<WriteFMulX, [ADLPPort00_01], 4, [1], 1, 7>;
-defm : ADLPWriteResPair<WriteFMulY, [ADLPPort00_01], 4, [1], 1, 8>;
+defm : ADLPWriteResPair<WriteFMulX, [ADLPPort00_01], 3, [1], 1, 5>;
+defm : ADLPWriteResPair<WriteFMulY, [ADLPPort00_01], 3, [1], 1, 5>;
 defm : X86WriteResPairUnsupported<WriteFMulZ>;
 defm : ADLPWriteResPair<WriteFRcp, [ADLPPort00], 4, [1], 1, 7>;
 defm : ADLPWriteResPair<WriteFRcpX, [ADLPPort00], 4, [1], 1, 7>;
@@ -295,9 +288,9 @@ defm : ADLPWriteResPair<WriteFRsqrt, [AD
 defm : ADLPWriteResPair<WriteFRsqrtX, [ADLPPort00], 4, [1], 1, 7>;
 defm : ADLPWriteResPair<WriteFRsqrtY, [ADLPPort00], 4, [1], 1, 8>;
 defm : X86WriteResPairUnsupported<WriteFRsqrtZ>;
-defm : ADLPWriteResPair<WriteFShuffle, [ADLPPort05], 1, [1], 1, 7>;
-defm : ADLPWriteResPair<WriteFShuffle256, [ADLPPort05], 3, [1], 1, 8>;
-defm : ADLPWriteResPair<WriteFShuffleY, [ADLPPort05], 1, [1], 1, 8>;
+defm : ADLPWriteResPair<WriteFShuffle, [ADLPPort05], 1, [1], 1, 5>;
+defm : ADLPWriteResPair<WriteFShuffle256, [ADLPPort05], 3, [1], 1, 5>;
+defm : ADLPWriteResPair<WriteFShuffleY, [ADLPPort05], 1, [1], 1, 5>;
 defm : X86WriteResPairUnsupported<WriteFShuffleZ>;
 def : WriteRes<WriteFSign, [ADLPPort00]>;
 defm : ADLPWriteResPair<WriteFSqrt, [ADLPPort00], 12, [1], 1, 7>;
@@ -320,19 +313,19 @@ defm : X86WriteRes<WriteFStoreX, [ADLPPo
 defm : X86WriteRes<WriteFStoreY, [ADLPPort04_09, ADLPPort07_08], 12, [1, 1], 2>;
 defm : ADLPWriteResPair<WriteFTest, [ADLPPort00], 3, [1]>;
 defm : ADLPWriteResPair<WriteFTestY, [ADLPPort00], 5, [1], 1, 6>;
-defm : ADLPWriteResPair<WriteFVarBlend, [ADLPPort00_01_05], 1, [1], 1, 7>;
-defm : ADLPWriteResPair<WriteFVarBlendY, [ADLPPort00_01_05], 3, [3], 3, 7>;
+defm : ADLPWriteResPair<WriteFVarBlend, [ADLPPort00_01_05], 1, [1], 1, 5>;
+defm : ADLPWriteResPair<WriteFVarBlendY, [ADLPPort00_01_05], 3, [3], 3, 5>;
 defm : X86WriteResPairUnsupported<WriteFVarBlendZ>;
-defm : ADLPWriteResPair<WriteFVarShuffle, [ADLPPort05], 1, [1], 1, 7>;
-defm : ADLPWriteResPair<WriteFVarShuffle256, [ADLPPort05], 3, [1], 1, 8>;
-defm : ADLPWriteResPair<WriteFVarShuffleY, [ADLPPort05], 1, [1], 1, 8>;
+defm : ADLPWriteResPair<WriteFVarShuffle, [ADLPPort05], 1, [1], 1, 5>;
+defm : ADLPWriteResPair<WriteFVarShuffle256, [ADLPPort05], 3, [1], 1, 5>;
+defm : ADLPWriteResPair<WriteFVarShuffleY, [ADLPPort05], 1, [1], 1, 5>;
 defm : X86WriteResPairUnsupported<WriteFVarShuffleZ>;
 def : WriteRes<WriteFence, [ADLPPort00_06]> {
   let Latency = 2;
 }
-defm : ADLPWriteResPair<WriteIDiv16, [ADLPPort00_01_05_06_11, ADLPPort01], 16, [1, 3], 4, 4>;
-defm : ADLPWriteResPair<WriteIDiv32, [ADLPPort00_01_05_06_11, ADLPPort01], 15, [1, 3], 4, 4>;
-defm : ADLPWriteResPair<WriteIDiv64, [ADLPPort01], 18, [3], 3>;
+defm : ADLPWriteResPair<WriteIDiv16, [ADLPPort00_01_05_06_11, ADLPPort01], 14, [1, 3], 4, 4>;
+defm : ADLPWriteResPair<WriteIDiv32, [ADLPPort00_01_05_06_11, ADLPPort01], 13, [1, 3], 4, 4>;
+defm : ADLPWriteResPair<WriteIDiv64, [ADLPPort01], 16, [3], 3>;
 defm : X86WriteRes<WriteIDiv8, [ADLPPort01], 17, [3], 3>;
 defm : X86WriteRes<WriteIDiv8Ld, [ADLPPort01], 22, [3], 3>;
 defm : ADLPWriteResPair<WriteIMul16, [ADLPPort00_01_05_06_11, ADLPPort00_06, ADLPPort01], 5, [2, 1, 1], 4>;
@@ -357,7 +350,7 @@ def : WriteRes<WriteLAHFSAHF, [ADLPPort0
   let Latency = 3;
 }
 defm : X86WriteRes<WriteLDMXCSR, [ADLPPort00, ADLPPort00_01_05, ADLPPort00_06, ADLPPort02_03_10], 7, [1, 1, 1, 1], 4>;
-def : WriteRes<WriteLEA, [ADLPPort01]>;
+def : WriteRes<WriteLEA, [ADLPPort01_05]>;
 defm : ADLPWriteResPair<WriteLZCNT, [ADLPPort01], 3, [1]>;
 def : WriteRes<WriteLoad, [ADLPPort02_03_10]> {
   let Latency = 5;
@@ -412,10 +405,10 @@ def : WriteRes<WriteShiftLd, [ADLPPort00
 }
 defm : X86WriteRes<WriteShiftCL, [ADLPPort00_06], 2, [2], 2>;
 defm : X86WriteRes<WriteShiftCLLd, [ADLPPort00_06], 12, [2], 2>;
-defm : ADLPWriteResPair<WriteShuffle, [ADLPPort05], 1, [1], 1, 8>;
-defm : ADLPWriteResPair<WriteShuffle256, [ADLPPort05], 3, [1], 1, 8>;
-defm : ADLPWriteResPair<WriteShuffleX, [ADLPPort01_05], 1, [1], 1, 7>;
-defm : ADLPWriteResPair<WriteShuffleY, [ADLPPort01_05], 1, [1], 1, 8>;
+defm : ADLPWriteResPair<WriteShuffle, [ADLPPort05], 1, [1], 1, 5>;
+defm : ADLPWriteResPair<WriteShuffle256, [ADLPPort01_05], 3, [1], 1, 5>;
+defm : ADLPWriteResPair<WriteShuffleX, [ADLPPort05], 1, [1], 1, 5>;
+defm : ADLPWriteResPair<WriteShuffleY, [ADLPPort05], 1, [1], 1, 5>;
 defm : X86WriteResPairUnsupported<WriteShuffleZ>;
 defm : X86WriteRes<WriteStore, [ADLPPort04_09, ADLPPort07_08], 12, [1, 1], 2>;
 defm : X86WriteRes<WriteStoreNT, [ADLPPort04_09, ADLPPort07_08], 512, [1, 1], 2>;
@@ -432,39 +425,33 @@ defm : ADLPWriteResPair<WriteVarShuffle2
 defm : ADLPWriteResPair<WriteVarShuffleX, [ADLPPort01_05], 1, [1], 1, 7>;
 defm : ADLPWriteResPair<WriteVarShuffleY, [ADLPPort01_05], 1, [1], 1, 8>;
 defm : X86WriteResPairUnsupported<WriteVarShuffleZ>;
-defm : ADLPWriteResPair<WriteVarVecShift, [ADLPPort00_01], 1, [1], 1, 7>;
-defm : ADLPWriteResPair<WriteVarVecShiftY, [ADLPPort00_01], 1, [1], 1, 8>;
+defm : ADLPWriteResPair<WriteVarVecShift, [ADLPPort00_01], 1, [1], 1, 5>;
+defm : ADLPWriteResPair<WriteVarVecShiftY, [ADLPPort00_01], 1, [1], 1, 5>;
 defm : X86WriteResPairUnsupported<WriteVarVecShiftZ>;
-defm : ADLPWriteResPair<WriteVecALU, [ADLPPort00], 1, [1], 1, 8>;
-defm : ADLPWriteResPair<WriteVecALUX, [ADLPPort00_01], 1, [1], 1, 7>;
-defm : ADLPWriteResPair<WriteVecALUY, [ADLPPort00_01], 1, [1], 1, 8>;
+defm : ADLPWriteResPair<WriteVecALU, [ADLPPort00], 1, [1], 1, 5>;
+defm : ADLPWriteResPair<WriteVecALUX, [ADLPPort00_01], 1, [1], 1, 5>;
+defm : ADLPWriteResPair<WriteVecALUY, [ADLPPort00_01], 1, [1], 1, 5>;
 defm : X86WriteResPairUnsupported<WriteVecALUZ>;
 defm : X86WriteRes<WriteVecExtract, [ADLPPort00, ADLPPort01_05], 4, [1, 1], 2>;
 defm : X86WriteRes<WriteVecExtractSt, [ADLPPort01_05, ADLPPort04_09, ADLPPort07_08], 19, [1, 1, 1], 3>;
-defm : ADLPWriteResPair<WriteVecIMul, [ADLPPort00], 5, [1], 1, 8>;
-defm : ADLPWriteResPair<WriteVecIMulX, [ADLPPort00_01], 5, [1], 1, 8>;
-defm : ADLPWriteResPair<WriteVecIMulY, [ADLPPort00_01], 5, [1], 1, 8>;
+defm : ADLPWriteResPair<WriteVecIMul, [ADLPPort01], 5, [1], 1, 8>;
+defm : ADLPWriteResPair<WriteVecIMulX, [ADLPPort01], 5, [1], 1, 8>;
+defm : ADLPWriteResPair<WriteVecIMulY, [ADLPPort01], 5, [1], 1, 8>;
 defm : X86WriteResPairUnsupported<WriteVecIMulZ>;
 defm : X86WriteRes<WriteVecInsert, [ADLPPort01_05, ADLPPort05], 4, [1, 1], 2>;
 defm : X86WriteRes<WriteVecInsertLd, [ADLPPort01_05, ADLPPort02_03_10], 8, [1, 1], 2>;
-def : WriteRes<WriteVecLoad, [ADLPPort02_03_10]> {
-  let Latency = 7;
-}
+def : WriteRes<WriteVecLoad, [ADLPPort02_03_10]> { let Latency = 5; }
 def : WriteRes<WriteVecLoadNT, [ADLPPort02_03_10]> {
   let Latency = 7;
 }
 def : WriteRes<WriteVecLoadNTY, [ADLPPort02_03_10]> {
   let Latency = 8;
 }
-def : WriteRes<WriteVecLoadX, [ADLPPort02_03_10]> {
-  let Latency = 7;
-}
-def : WriteRes<WriteVecLoadY, [ADLPPort02_03_10]> {
-  let Latency = 8;
-}
-defm : ADLPWriteResPair<WriteVecLogic, [ADLPPort00_05], 1, [1], 1, 8>;
-defm : ADLPWriteResPair<WriteVecLogicX, [ADLPPort00_01_05], 1, [1], 1, 7>;
-defm : ADLPWriteResPair<WriteVecLogicY, [ADLPPort00_01_05], 1, [1], 1, 8>;
+def : WriteRes<WriteVecLoadX, [ADLPPort02_03_10]> { let Latency = 5; }
+def : WriteRes<WriteVecLoadY, [ADLPPort02_03_10]> { let Latency = 5; }
+defm : ADLPWriteResPair<WriteVecLogic, [ADLPPort00_05], 1, [1], 1, 5>;
+defm : ADLPWriteResPair<WriteVecLogicX, [ADLPPort00_01_05], 1, [1], 1, 5>;
+defm : ADLPWriteResPair<WriteVecLogicY, [ADLPPort00_01_05], 1, [1], 1, 5>;
 defm : X86WriteResPairUnsupported<WriteVecLogicZ>;
 def : WriteRes<WriteVecMOVMSK, [ADLPPort00]> {
   let Latency = 3;



--- a/llvm/lib/Target/X86/X86.td	2025-08-18 08:57:51.604276317 +0200
+++ b/llvm/lib/Target/X86/X86.td	2025-08-18 09:07:22.804296154 +0200
@@ -1291,12 +1291,21 @@ def ProcessorFeatures {
   list<SubtargetFeature> ADLAdditionalTuning = [TuningPERMFalseDeps,
                                                 TuningPreferMovmskOverVTest,
                                                 TuningFastImmVectorShift];
-  list<SubtargetFeature> ADLRemoveTuning = [TuningPOPCNTFalseDeps];
+  list<SubtargetFeature> ADLRemoveTuning = [TuningPOPCNTFalseDeps,
+                                            TuningLZCNTFalseDeps];
   list<SubtargetFeature> ADLTuning =
-      !listremove(!listconcat(SKLTuning, ADLAdditionalTuning), ADLRemoveTuning);
+    !listremove(!listconcat(SKLTuning, ADLAdditionalTuning), ADLRemoveTuning);
   list<SubtargetFeature> ADLFeatures =
     !listconcat(TRMFeatures, ADLAdditionalFeatures);
 
+  // Raptor Lake: enable fast string ops + prefer 256-bit compute
+  list<SubtargetFeature> RLAdditionalFeatures = [FeatureERMSB, FeatureFSRM];
+  list<SubtargetFeature> RLFeatures =
+    !listconcat(ADLFeatures, RLAdditionalFeatures);
+
+  list<SubtargetFeature> RLAdditionalTuning = [TuningPrefer256Bit];
+  list<SubtargetFeature> RLTuning = !listconcat(ADLTuning, RLAdditionalTuning);
+
   // Gracemont
   list<SubtargetFeature> GRTTuning = [TuningMacroFusion,
                                       TuningSlow3OpsLEA,
@@ -1305,7 +1314,9 @@ def ProcessorFeatures {
                                       TuningFast15ByteNOP,
                                       TuningFastVariablePerLaneShuffle,
                                       TuningPOPCNTFalseDeps,
-                                      TuningInsertVZEROUPPER];
+                                      TuningInsertVZEROUPPER,
+                                      TuningPrefer128Bit,
+                                      TuningNoDomainDelay];
 
   // Arrowlake
   list<SubtargetFeature> ARLAdditionalFeatures = [FeatureCMPCCXADD,
@@ -1868,7 +1879,7 @@ foreach P = ["sierraforest", "grandridge
                 ProcessorFeatures.GRTTuning>;
 }
 def : ProcModel<"raptorlake", AlderlakePModel,
-                ProcessorFeatures.ADLFeatures, ProcessorFeatures.ADLTuning>;
+                ProcessorFeatures.RLFeatures, ProcessorFeatures.RLTuning>;
 def : ProcModel<"meteorlake", AlderlakePModel,
                 ProcessorFeatures.ADLFeatures, ProcessorFeatures.ADLTuning>;
 def : ProcModel<"arrowlake", AlderlakePModel,
