pkgname=clang
pkgver=19.1.6
pkgrel=3.1
pkgdesc="C language family frontend for LLVM"
arch=('x86_64')
url="https://clang.llvm.org/"
license=('Apache-2.0 WITH LLVM-exception')
depends=('llvm-libs' 'gcc' 'compiler-rt')
makedepends=('llvm' 'cmake' 'ninja' 'python-sphinx' 'python-myst-parser' 'lld' 'clang' 'llvm-libs')
optdepends=('openmp: OpenMP support in clang with -fopenmp'
            'python: for scan-view and git-clang-format'
            'llvm: referenced by some clang headers')
provides=("clang-analyzer=$pkgver" "clang-tools-extra=$pkgver")
conflicts=('clang-analyzer' 'clang-tools-extra')
replaces=('clang-analyzer' 'clang-tools-extra')
options=(!lto) # We are using here ThinLTO, so disable pacman's LTO
_source_base=https://github.com/llvm/llvm-project/releases/download/llvmorg-$pkgver
source=($_source_base/clang-$pkgver.src.tar.xz{,.sig}
        $_source_base/clang-tools-extra-$pkgver.src.tar.xz{,.sig}
        $_source_base/llvm-$pkgver.src.tar.xz{,.sig}
        $_source_base/cmake-$pkgver.src.tar.xz{,.sig}
        $_source_base/third-party-$pkgver.src.tar.xz{,.sig}
        alderlake.patch
        enable-fstack-protector-strong-by-default.patch
        example_advanced.cpp
        example_advanced.c
        llvm_test.cpp)
sha256sums=('SKIP')
validpgpkeys=('SKIP')

# Utilizing LLVM_DISTRIBUTION_COMPONENTS to avoid
# installing static libraries; inspired by Gentoo
_get_distribution_components() {
  local target
  ninja -t targets | grep -Po 'install-\K.*(?=-stripped:)' | while read -r target; do
    case $target in
      clang-libraries|distribution)
        continue
        ;;
      clang|clangd|clang-*)
        ;;
      clang*|findAllSymbols)
        continue
        ;;
    esac
    echo $target
  done
}

prepare() {
  rename -v -- "-$pkgver.src" '' {cmake,third-party}-$pkgver.src
  cd clang-$pkgver.src
  mkdir build
  mv "$srcdir/clang-tools-extra-$pkgver.src" tools/extra
  patch -Np2 -i ../enable-fstack-protector-strong-by-default.patch
  patch -Np2 -i ../alderlake.patch

  # Fix hardcoded test path
  sed -i 's/clang-tools-extra/tools\/extra/g' tools/extra/test/clang-doc/enum.cpp
  sed -i 's/clang-tools-extra/tools\/extra/g' tools/extra/test/clang-doc/namespace.cpp
}

build() {
  cd clang-$pkgver.src/build

  # Add dir for PGO data
  mkdir -p "$srcdir/clang-$pkgver.src/pgo"

  # Build only minimal debug info to reduce size
  CFLAGS=${CFLAGS/-g /-g0 }
  CXXFLAGS=${CXXFLAGS/-g /-g0 }

  local cmake_args=(
    -G Ninja
    -DCMAKE_BUILD_TYPE=Release
    -DCMAKE_INSTALL_PREFIX=/usr
    -DCMAKE_INSTALL_DOCDIR=share/doc
    -DCMAKE_SKIP_RPATH=ON
    -DCLANG_DEFAULT_PIE_ON_LINUX=ON
    -DCLANG_LINK_CLANG_DYLIB=ON
    -DENABLE_LINKER_BUILD_ID=ON
    -DLLVM_ENABLE_RTTI=ON
    -DLLVM_INCLUDE_DOCS=OFF
    -DLLVM_INCLUDE_TESTS=OFF
    -DLLVM_ENABLE_SPHINX=OFF
    -DLLVM_LINK_LLVM_DYLIB=ON
    -DLLVM_MAIN_SRC_DIR="$srcdir/llvm-$pkgver.src"
    -DSPHINX_WARNINGS_AS_ERRORS=OFF
  )

  # Use Clang as compiler
  export AR=llvm-ar
  export CC=clang
  export CXX=clang++
  export NM=llvm-nm
  export RANLIB=llvm-ranlib
  # Export Original CFLAGS
  export ORIG_CFLAGS="${CFLAGS}"
  export ORIG_CXXFLAGS="${CXXFLAGS}"

  # Flags for profile generation
  export CFLAGS+=" -fprofile-generate=$srcdir/clang-$pkgver.src/pgo -g2 -fno-omit-frame-pointer"
  export CXXFLAGS+=" -fprofile-generate=$srcdir/clang-$pkgver.src/pgo -g2 -fno-omit-frame-pointer"

  cmake .. "${cmake_args[@]}"
  local distribution_components=$(_get_distribution_components | paste -sd\;)
  test -n "$distribution_components"
  cmake_args+=(-DLLVM_DISTRIBUTION_COMPONENTS="$distribution_components")

  # Intrumented build
  cmake .. -DCMAKE_BUILD_TYPE=Release -DLLVM_BUILD_INSTRUMENTED=IR -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DLLVM_USE_LINKER=lld -DLLVM_VP_COUNTERS_PER_SITE=6 "${cmake_args[@]}"
  ninja

  # Use provided workload for PGO profiles
  echo -e "\e[1;32mCompiling and running advanced C++ example...\e[0m"
  "$CC" -std=c++20 -O3 -g3 -fprofile-generate="$srcdir/clang-$pkgver.src/pgo" -mllvm -inline-threshold=1000 -mllvm -extra-vectorizer-passes -mllvm -enable-cond-stores-vec -mllvm -slp-vectorize-hor-store -mllvm -enable-loopinterchange -mllvm -enable-loop-distribute -mllvm -enable-unroll-and-jam -mllvm -enable-loop-flatten -mllvm -unroll-runtime-multi-exit -mllvm -aggressive-ext-opt -mllvm -enable-interleaved-mem-accesses -mllvm -enable-masked-interleaved-mem-accesses -fno-math-errno -fno-trapping-math -falign-functions=32 -funroll-loops -fno-semantic-interposition -fcf-protection=none -mharden-sls=none -fno-omit-frame-pointer -mprefer-vector-width=256 -flto -fsplit-lto-unit -mllvm -adce-remove-loops -mllvm -enable-ext-tsp-block-placement=1 -mllvm -enable-gvn-hoist=1 -mllvm -enable-dfa-jump-thread=1 -Wno-error -fdata-sections -ffunction-sections -fno-unique-section-names -fsplit-machine-functions -mtls-dialect=gnu2 -fuse-ld=lld -mllvm -vp-counters-per-site=6 \
      "$srcdir/example_advanced.cpp" -o "$srcdir/example_advanced" -lstdc++
  "$srcdir/example_advanced"

  echo -e "\e[1;32mCompiling and running advanced C example...\e[0m"
  "$CC" -std=c17 -O3 -g3 -fprofile-generate="$srcdir/clang-$pkgver.src/pgo" -mllvm -inline-threshold=500 -mllvm -extra-vectorizer-passes -mllvm -enable-cond-stores-vec -mllvm -slp-vectorize-hor-store -mllvm -enable-loopinterchange -mllvm -enable-loop-distribute -mllvm -enable-unroll-and-jam -mllvm -enable-loop-flatten -mllvm -unroll-runtime-multi-exit -mllvm -aggressive-ext-opt -mllvm -enable-interleaved-mem-accesses -mllvm -enable-masked-interleaved-mem-accesses -fno-math-errno -fno-trapping-math -falign-functions=32 -funroll-loops -fno-semantic-interposition -fcf-protection=none -mharden-sls=none -fno-omit-frame-pointer -mprefer-vector-width=256 -flto -fsplit-lto-unit -mllvm -adce-remove-loops -mllvm -enable-ext-tsp-block-placement=1 -mllvm -enable-gvn-hoist=1 -mllvm -enable-dfa-jump-thread=1 -Wno-error -fdata-sections -ffunction-sections -fno-unique-section-names -fsplit-machine-functions -mtls-dialect=gnu2 -fuse-ld=lld -mllvm -vp-counters-per-site=6 \
      "$srcdir/example_advanced.c" -o "$srcdir/example_advanced_c" -lm
  "$srcdir/example_advanced_c"

  echo -e "\e[1;32mCompiling and running LLVM IR examples...\e[0m"
  for opt_level in 0 1 2 3; do
      "$CC" -std=c++17 -O$opt_level -S -emit-llvm \
          -fprofile-generate="$srcdir/clang-$pkgver.src/pgo" -g3 -mllvm -vp-counters-per-site=6 \
          "$srcdir/llvm_test.cpp" -o "$srcdir/llvm_test_O${opt_level}.ll"
  done

  # Run optimization passes on the generated LLVM IR
  for opt_level in 0 1 2 3; do
      opt -S -o "$srcdir/llvm_test_O${opt_level}_opt.ll" \
          -passes='default<O'$opt_level'>' \
          "$srcdir/llvm_test_O${opt_level}.ll"
  done

  # Move all profiles into PGO dir
  find . -name "*.profraw" -exec mv {} "$srcdir/clang-$pkgver.src/pgo" \;

  # Merge the generated profile
  llvm-profdata merge -o "$srcdir/clang-$pkgver.src/pgo/llvm.profdata" "$srcdir/clang-$pkgver.src/pgo"/*.profraw

  # Clean up temporary files
  rm "$srcdir/example_advanced" "$srcdir/example_advanced_c"
  rm "$srcdir/llvm_test_O"*.ll

  # Use Original CFLAGS again and enable ThinLTO + use the profile
  export PGO_PROFILE="$srcdir/clang-$pkgver.src/pgo/llvm.profdata"
  export CFLAGS="${ORIG_CFLAGS} -fprofile-use=$PGO_PROFILE"
  export CXXFLAGS="${ORIG_CXXFLAGS} -fprofile-use=$PGO_PROFILE"
  export LDFLAGS="$LDFLAGS -flto=thin"

  cd ..
  mkdir build-pgo-use
  cd build-pgo-use
  # Enable ThinLTO and use profile
  cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DLLVM_USE_LINKER=lld -DLLVM_ENABLE_LTO=Thin -DLLVM_PROFDATA_FILE=$PGO_PROFILE "${cmake_args[@]}"
  ninja
}

#check() {
#  cd clang-$pkgver.src/build-pgo-use
#  LD_LIBRARY_PATH=$PWD/lib ninja check-clang{,-tools}
#}

_python_optimize() {
  python -m compileall "$@"
  python -O -m compileall "$@"
  python -OO -m compileall "$@"
}

package() {
  cd clang-$pkgver.src/build-pgo-use

  DESTDIR="$pkgdir" ninja install-distribution
  install -Dm644 ../LICENSE.TXT "$pkgdir/usr/share/licenses/$pkgname/LICENSE"

  # Remove documentation sources
  rm -r "$pkgdir"/usr/share/doc/clang{,-tools}/html/{_sources,.buildinfo}

  # Move scanbuild-py into site-packages and install Python bindings
  local site_packages=$(python -c "import site; print(site.getsitepackages()[0])")
  install -d "$pkgdir/$site_packages"
  mv "$pkgdir"/usr/lib/{libear,libscanbuild} "$pkgdir/$site_packages/"
  cp -a ../bindings/python/clang "$pkgdir/$site_packages/"

  # Move analyzer scripts out of /usr/libexec
  mv "$pkgdir"/usr/libexec/* "$pkgdir/usr/lib/clang/"
  rmdir "$pkgdir/usr/libexec"
  sed -i 's|libexec|lib/clang|' \
    "$pkgdir/usr/bin/scan-build" \
    "$pkgdir/$site_packages/libscanbuild/analyze.py"

  # Compile Python scripts
  _python_optimize "$pkgdir/usr/share" "$pkgdir/$site_packages"
}
