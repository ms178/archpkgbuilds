## ENABLE x86-64-v3 optimization
_optimize_v3=${_optimize_v3-y}
_optimize_v4=${_optimize_v4-}

# Set safe build environment
export LANG=C
export LC_ALL=C

pkgbase=glibc
pkgname=(glibc lib32-glibc glibc-locales)
pkgver=2.40+r64+g7648e3c8e8
_commit=7648e3c8e80b3f1b3b43506b2fbe370e4824ab97
pkgrel=1
arch=(x86_64)
url='https://www.gnu.org/software/libc'
license=(GPL-2.0-or-later LGPL-2.1-or-later)
makedepends=(git gd lib32-gcc-libs python systemd)
options=(staticlibs !lto)
source=("git+https://sourceware.org/git/glibc.git#commit=${_commit}"
        "locale.gen.txt"
        "locale-gen"
        "lib32-glibc.conf"
        "sdt.h" "sdt-config.h"
        "04-mandriva-va_args.patch"
        "05-mandriva-zstdcompressedlocals.patch"
        "07-mandriva-nostrictaliasing.patch"
        "08-mandriva-float.patch"
        "clear.patch")

prepare() {
    mkdir -p glibc-build lib32-glibc-build
    [[ -d glibc-$pkgver ]] && ln -s glibc-$pkgver glibc
    cd glibc

    patch -Np1 < ../04-mandriva-va_args.patch
    patch -Np1 < ../05-mandriva-zstdcompressedlocals.patch
    patch -Np1 < ../07-mandriva-nostrictaliasing.patch
    patch -Np1 < ../08-mandriva-float.patch
    patch -Np1 < ../clear.patch
}

build() {
    # Ensure clean locale environment
    export LANG=C
    export LC_ALL=C

    if [ -n "$_optimize_v3" ]; then
        export ASFLAGS="-D__AVX__=1 -D__AVX2__=1 -msse2avx -D__FMA__=1 "
    elif [ -n "$_optimize_v4" ]; then
        export ASFLAGS="-D__AVX__=1 -D__AVX2__=1 -D__AVX512__=1 -msse2avx -D__FMA__=1 "
    else
        unset ASFLAGS
    fi

    local _configure_flags=(
        --prefix=/usr
        --with-headers=/usr/include
        --with-bugurl=https://gitlab.archlinux.org/archlinux/packaging/packages/glibc/-/issues
        --enable-bind-now
        --disable-fortify-source
        --enable-optimizations
        --enable-kernel=6.12
        --disable-cet
        --enable-multi-arch
        --disable-stack-protector
        --disable-systemtap
        --disable-nscd
        --disable-profile
        --disable-werror
    )

    # Build for x86_64
    cd "${srcdir}/glibc-build"

    echo "slibdir=/usr/lib" >> configparms
    echo "rtlddir=/usr/lib" >> configparms
    echo "sbindir=/usr/bin" >> configparms
    echo "rootsbindir=/usr/bin" >> configparms

    "${srcdir}"/glibc/configure \
        --libdir=/usr/lib \
        --libexecdir=/usr/lib \
        "${_configure_flags[@]}"

    make -O

    # Build lib32 version
    cd "${srcdir}/lib32-glibc-build"

    export CC="gcc -m32 -mfpmath=sse -mstackrealign"
    export CXX="g++ -m32 -mfpmath=sse -mstackrealign"

    echo "slibdir=/usr/lib32" >> configparms
    echo "rtlddir=/usr/lib32" >> configparms
    echo "sbindir=/usr/bin" >> configparms
    echo "rootsbindir=/usr/bin" >> configparms

    "${srcdir}"/glibc/configure \
        --host=i686-pc-linux-gnu \
        --libdir=/usr/lib32 \
        --libexecdir=/usr/lib32 \
        "${_configure_flags[@]}"

    make -O

    # Generate the desired locales (all at once)
    local locales_to_generate=(
        en_US.UTF-8
        de_DE.UTF-8
        de_DE
        de_DE@euro
    )

    local locale_names=$(IFS=,; echo "${locales_to_generate[*]}")
    local objdir="${srcdir}/glibc-build"
    local destdir="${srcdir}/locales"

    mkdir -p "$destdir"

    make -C "${srcdir}/glibc/localedata" objdir="$objdir" \
        DESTDIR="$destdir" install-locale-files LOCALE_NAME="$locale_names"
}

package_glibc() {
    pkgdesc='GNU C Library'
    depends=('linux-api-headers>=4.10' tzdata filesystem)
    optdepends=('gd: for memusagestat'
                'perl: for mtrace')
    install=glibc.install
    backup=(etc/gai.conf
            etc/locale.gen)

    cd "${srcdir}/glibc-build"

    make DESTDIR="${pkgdir}" install
    rm -f "${pkgdir}"/etc/ld.so.cache

    # Shipped in tzdata
    rm -f "${pkgdir}"/usr/bin/{tzselect,zdump,zic}

    cd "${srcdir}/glibc"

    install -dm755 "${pkgdir}"/usr/lib/locale

    install -m644 posix/gai.conf "${pkgdir}"/etc/gai.conf

    # Install the locale-gen script
    install -Dm755 "${srcdir}"/locale-gen "${pkgdir}"/usr/bin/locale-gen

    # Create /etc/locale.gen
    install -m644 "${srcdir}"/locale.gen.txt "${pkgdir}"/etc/locale.gen
    sed -e '1,3d' -e 's|/| |g' -e 's|\\| |g' -e 's|^|#|g' \
      localedata/SUPPORTED >> "${pkgdir}"/etc/locale.gen

    # Add SUPPORTED file to pkg
    sed -e '1,3d' -e 's|/| |g' -e 's| \\||g' \
      localedata/SUPPORTED > "${pkgdir}"/usr/share/i18n/SUPPORTED

    # Create /var/cache/locale
    install -dm755 "${pkgdir}/var/cache/locale"

    # install C.UTF-8 so that it is always available
    # should be built into glibc eventually
    # https://sourceware.org/glibc/wiki/Proposals/C.UTF-8
    # https://bugs.archlinux.org/task/74864
    install -dm755 "${pkgdir}"/usr/lib/locale
    cp -r "${srcdir}"/locales/usr/lib/locale/C.utf8 -t "${pkgdir}"/usr/lib/locale
    sed -i '/#C\.UTF-8 /d' "${pkgdir}"/etc/locale.gen

    # Install tracing probes
    install -Dm644 "${srcdir}"/sdt.h "${pkgdir}"/usr/include/sys/sdt.h
    install -Dm644 "${srcdir}"/sdt-config.h "${pkgdir}"/usr/include/sys/sdt-config.h

    # Remove locales from glibc package
    rm -rf "${pkgdir}"/usr/lib/locale/*
}

package_lib32-glibc() {
    pkgdesc='GNU C Library (32-bit)'
    depends=("glibc=$pkgver")
    options+=('!emptydirs')

    cd "${srcdir}/lib32-glibc-build"

    make DESTDIR="${pkgdir}" install
    rm -rf "${pkgdir}"/{etc,sbin,usr/{bin,sbin,share},var}

    # We need to keep 32 bit specific header files
    find "${pkgdir}"/usr/include -type f -not -name '*-32.h' -delete

    # Dynamic linker
    install -d "${pkgdir}"/usr/lib
    ln -s ../lib32/ld-linux.so.2 "${pkgdir}"/usr/lib/

    # Add lib32 paths to the default library search path
    install -Dm644 "${srcdir}"/lib32-glibc.conf "${pkgdir}"/etc/ld.so.conf.d/lib32-glibc.conf

    # Symlink /usr/lib32/locale to /usr/lib/locale
    ln -s ../lib/locale "${pkgdir}"/usr/lib32/locale
}

package_glibc-locales() {
  pkgdesc='Pregenerated locales for GNU C Library'
  depends=("glibc=$pkgver")

  # Copy the pre-generated locales
  mkdir -p "${pkgdir}/usr/lib/locale"
  cp -r "${srcdir}/locales/usr/lib/locale/"* "${pkgdir}/usr/lib/locale"

  # Remove C.utf8 as it's provided by the glibc package
  rm -rf "${pkgdir}/usr/lib/locale/C.utf8"

  # deduplicate locale data (optional, but good practice)
  hardlink -c "${pkgdir}/usr/lib/locale"
}
