pkgbase=glibc
pkgname=(glibc lib32-glibc glibc-locales)
pkgver=2.41+r10+g2cb04444b9
_commit=2cb04444b934e000a4e36c1876ef2bf03dd80d66
pkgrel=1
arch=(x86_64)
url='https://www.gnu.org/software/libc'
license=(GPL-2.0-or-later LGPL-2.1-or-later)
makedepends=(git gd lib32-gcc-libs python perf llvm)
options=(staticlibs !lto !strip)
source=("git+https://sourceware.org/git/glibc.git#commit=${_commit}"
        locale.gen.txt
        locale-gen
        lib32-glibc.conf
        sdt.h sdt-config.h
        04-mandriva-va_args.patch
        05-mandriva-zstdcompressedlocals.patch
        07-mandriva-nostrictaliasing.patch
        08-mandriva-float.patch
        clear.patch)

pkgver() {
  cd glibc
  git describe --tags | sed 's/[^-]*-//;s/[^-]*-/&r/;s/-/+/g'
}

prepare() {
  mkdir -p glibc-build lib32-glibc-build

  [[ -d glibc-$pkgver ]] && ln -s glibc-$pkgver glibc
  cd glibc

  # Apply patches
  for patch in "${srcdir}"/*.patch; do
    # Skip non-patch files that might match the glob
    [[ "$patch" == *".patch" ]] || continue
    msg2 "Applying patch ${patch##*/}..."
    patch -Np1 < "$patch"
  done

  # Check perf availability and settings
  if ! command -v perf >/dev/null 2>&1; then
    error "perf not found. Please install linux-tools package."
    return 1
  fi

  local perf_paranoid=/proc/sys/kernel/perf_event_paranoid
  if [[ -f "$perf_paranoid" ]]; then
    local paranoid_val=$(cat "$perf_paranoid")
    msg2 "Current perf_event_paranoid setting: $paranoid_val"
    if (( paranoid_val > 1 )); then
      warning "perf_event_paranoid > 1 might restrict perf sampling"
      warning "Consider: sudo sysctl kernel.perf_event_paranoid=1"
    fi
  fi
}

build() {
  local _configure_flags=(
    --prefix=/usr
    --with-headers=/usr/include
    --with-bugurl=https://gitlab.archlinux.org/archlinux/packaging/packages/glibc/-/issues
    --enable-bind-now
    --disable-fortify-source
    --enable-optimizations
    --enable-kernel=6.13
    --disable-cet
    --enable-multi-arch
    --disable-profile
    --disable-werror
    --disable-systemtap
    --disable-nscd
  )

  # Build main glibc
  cd "${srcdir}"/glibc-build

  echo "slibdir=/usr/lib" >> configparms
  echo "rtlddir=/usr/lib" >> configparms
  echo "sbindir=/usr/bin" >> configparms
  echo "rootsbindir=/usr/bin" >> configparms

  # Configure with debug info and position independent code
  CFLAGS="${CFLAGS} -fno-reorder-blocks-and-partition -fPIC" \
  CXXFLAGS="${CXXFLAGS} -fno-reorder-blocks-and-partition -fPIC" \
  LDFLAGS="${LDFLAGS} -Wl,--emit-relocs" \
  "${srcdir}"/glibc/configure \
      --libdir=/usr/lib \
      --libexecdir=/usr/lib \
      "${_configure_flags[@]}"

  make -O

  # Create workload script
  cat > "${srcdir}"/glibc-build/bolt-workload.sh << 'EOF'
#!/usr/bin/env fish

# Set up TMPDIR variable; if not already set, default to /tmp.
if not set -q TMPDIR
    set -gx TMPDIR /tmp
end

# Create a unique temporary directory
set -g myTMPDIR (mktemp -d)
echo "Using temporary directory: $myTMPDIR"

# Define a cleanup function
function cleanup --on-event fish_exit
    echo "Cleaning up temporary files..."
    rm -rf $myTMPDIR
end

# Function to log messages with a timestamp
function log
    echo "["(date '+%Y-%m-%d %H:%M:%S')"]" $argv
end

# Create test files
log "Creating test files..."
dd if=/dev/urandom of="$myTMPDIR/large_file" bs=1M count=20 2>/dev/null
dd if=/dev/urandom of="$myTMPDIR/small_file" bs=4K count=200 2>/dev/null

# Create a text file for string operations
log "Creating word list..."
for i in (seq 1 1000)
    echo "Line $i with some random text for testing string operations" >> "$myTMPDIR/words"
end

# Create a file of unique words
grep -o "[a-zA-Z]\+" "$myTMPDIR/words" | sort -u | head -n 2000 > "$myTMPDIR/unique_words"

# Memory operations
log "Testing memory operations..."
for i in (seq 1 3)
    dd if="$myTMPDIR/large_file" of="$myTMPDIR/copy_$i" bs=1M count=20 2>/dev/null
end

# String operations
log "Testing string operations..."
for i in (seq 1 100)
    set hex (math "$i * 16")
    printf "Test string formatting with number %d and hex 0x%x\n" $i $hex > /dev/null
end
grep -E '^[A-Za-z]{4,8}$' "$myTMPDIR/unique_words" > /dev/null

# Math operations
log "Testing math operations..."
for i in (seq 1 100)
    math "$i * 1024 / 32 + ($i % 255)" > /dev/null
end

# File I/O operations
log "Testing I/O operations..."
cat "$myTMPDIR/large_file" > /dev/null

# Fix: use a different method to generate random numbers
for i in (seq 1 5)
    # Use a simple calculation to generate a pseudo-random number between 0 and 199
    set skip (math "($i * 37 + "(date +%s)") % 200")
    dd if="$myTMPDIR/large_file" of=/dev/null bs=4K count=1 skip=$skip 2>/dev/null
end

# Simple threading test
log "Testing threading operations..."
for i in (seq 1 4)
    begin
        for j in (seq 1 4)
            echo "Thread $i processing batch $j" > "$myTMPDIR/thread_$i"_"$j"
            sleep 0.01
        end
    end &
end
wait

# Network operations
log "Testing network operations..."
for domain in google.com github.com
    getent hosts $domain > /dev/null 2>&1; or true
end

# Locale operations
log "Testing locale operations..."
echo "Testing Unicode: Hello World" > "$myTMPDIR/unicode_test"
wc -m "$myTMPDIR/unicode_test" > /dev/null

# Process operations
log "Testing process operations..."
for i in (seq 1 4)
    echo "Process $i" > "$myTMPDIR/process_$i" &
end
wait

# Add more intensive CPU operations to better simulate a gaming workload
log "Testing CPU-intensive operations..."
for i in (seq 1 3)
    # Generate a list of numbers and sort them
    seq 1 10000 | sort -R > "$myTMPDIR/numbers_$i"
    sort -n "$myTMPDIR/numbers_$i" > "$myTMPDIR/sorted_$i"

    # Compress and decompress data
    gzip -c "$myTMPDIR/large_file" > "$myTMPDIR/compressed_$i.gz" 2>/dev/null; or true
    if test -f "$myTMPDIR/compressed_$i.gz"
        gunzip -c "$myTMPDIR/compressed_$i.gz" > /dev/null 2>&1; or true
    end
end

log "All tests completed successfully"
EOF

  chmod +x "${srcdir}"/glibc-build/bolt-workload.sh

  # Create temporary root for testing
  mkdir -p "${srcdir}"/tmp-root/{usr/lib,usr/lib64}
  make DESTDIR="${srcdir}"/tmp-root install

  # Set up library environment
  ln -sfn usr/lib "${srcdir}"/tmp-root/lib
  ln -sfn usr/lib "${srcdir}"/tmp-root/lib64  # Fixed: should be usr/lib not usr/lib64
  cp -a /usr/lib/lib{pthread,dl,rt,m}.so* "${srcdir}"/tmp-root/usr/lib/ || true  # Added fallback

  # Make sure we have the actual libc.so.6 file
  if [[ ! -f "${srcdir}"/tmp-root/usr/lib/libc.so.6 ]]; then
    error "libc.so.6 not found in temporary root"
    return 1
  fi

  # Create a clean LD_LIBRARY_PATH without current directory
  local clean_ld_path="${srcdir}/tmp-root/usr/lib"
  if [[ -n "${LD_LIBRARY_PATH:-}" ]]; then
    # Filter out any paths containing the current directory
    local old_ifs="$IFS"
    IFS=":"
    local new_ld_path=""
    for path in $LD_LIBRARY_PATH; do
      # Skip paths that are or contain the current directory
      if [[ "$path" != "." && "$path" != "./" && "$path" != *":.:."* && "$path" != *":.:"* && "$path" != *":."* && "$path" != ".:."* ]]; then
        new_ld_path="${new_ld_path:+$new_ld_path:}$path"
      fi
    done
    IFS="$old_ifs"
    clean_ld_path="${clean_ld_path}:${new_ld_path}"
  fi
  export LD_LIBRARY_PATH="$clean_ld_path"

  msg2 "Collecting performance data..."
  cd "${srcdir}"/glibc-build

  # Attempt perf record with fallback options
  if ! perf record -F 2000 --max-size=10G --buildid-all \
    -e branch-instructions:u,cycles:u,cache-misses:u,branch-misses:u,branches:u,branch-loads:u,branch-load-misses:u,iTLB-load-misses:u,dTLB-store-misses:u,dTLB-load-misses:u,L1-icache-load-misses:u,LLC-load-misses:u -b \
    --output=perf.data.tmp -- ./bolt-workload.sh; then
    warning "Full perf record failed, trying minimal event set..."
    if ! perf record -F 500 --max-size=10G --buildid-all -e cycles:u,branches:u -b \
      --output=perf.data.tmp -- ./bolt-workload.sh; then
      warning "Minimal perf record failed, trying basic recording..."
      perf record -F 100 --max-size=10G --buildid-all -b \
        --output=perf.data.tmp -- ./bolt-workload.sh || true
    fi
  fi

  if [[ -f perf.data.tmp && -s perf.data.tmp ]]; then
    mv perf.data.tmp perf.data
  else
    warning "Failed to collect perf data, BOLT optimization will be skipped"
    # Continue build without BOLT optimization
  fi

  # Only proceed with BOLT if we have perf data
  if [[ -f perf.data && -s perf.data ]]; then
    msg2 "Converting perf data to BOLT format..."
    if ! perf2bolt "${srcdir}"/tmp-root/usr/lib/libc.so.6 \
      -p "${srcdir}"/glibc-build/perf.data \
      -o "${srcdir}"/glibc-build/perf.fdata \
      -w 10000; then
      warning "perf2bolt failed, BOLT optimization will be skipped"
    else
      # Find the actual libc.so.6 file in the build directory
      local libc_path
      libc_path=$(find "${srcdir}"/glibc-build -name "libc.so.6" -type f | head -1)

      if [[ -z "$libc_path" ]]; then
        warning "Could not find libc.so.6 in build directory, using the one from tmp-root"
        libc_path="${srcdir}/tmp-root/usr/lib/libc.so.6"
      fi

      msg2 "Applying BOLT optimizations to $libc_path..."
      # Updated BOLT command with compatible options
      if ! llvm-bolt "$libc_path" \
        -o "${srcdir}"/glibc-build/libc.so.6.bolt \
        --data "${srcdir}"/glibc-build/perf.fdata \
        --dyno-stats \
        --reorder-blocks=ext-tsp \
        --reorder-functions=cdsort \
        --split-functions \
        --split-eh  \
        --skip-funcs=__restore_rt/1,__setcontext*,__GI___clone*,clone*,__clone*,__clone3*,_dl_runtime_resolve*,__BOLT_FDE_FUNC*,____longjmp_chk/1*; then
        warning "BOLT optimization failed, continuing with original binary"
      else
        # Replace original with optimized version if successful
        if [[ -f "${srcdir}"/glibc-build/libc.so.6.bolt ]]; then
          msg2 "Successfully applied BOLT optimizations"
          cp -f "${srcdir}"/glibc-build/libc.so.6.bolt "$libc_path"
        fi
      fi
    fi
  fi

  # Clean up
  rm -rf "${srcdir}"/tmp-root

  # Build 32-bit version
  cd "${srcdir}"/lib32-glibc-build
  export CC="gcc -m32 -march=native -mfpmath=sse -mstackrealign"
  export CXX="g++ -m32 -march=native -mfpmath=sse -mstackrealign"

  # Make sure LD_LIBRARY_PATH doesn't contain current directory for lib32 build
  export LD_LIBRARY_PATH="$clean_ld_path"

  echo "slibdir=/usr/lib32" >> configparms
  echo "rtlddir=/usr/lib32" >> configparms
  echo "sbindir=/usr/bin" >> configparms
  echo "rootsbindir=/usr/bin" >> configparms

  "${srcdir}"/glibc/configure \
    --host=i686-pc-linux-gnu \
    --libdir=/usr/lib32 \
    --libexecdir=/usr/lib32 \
    "${_configure_flags[@]}"

  make -O

  # Pregenerate locales
  make -C "${srcdir}"/glibc/localedata objdir="${srcdir}"/glibc-build \
    DESTDIR="${srcdir}"/locales install-locale-files
}

# Credits for _skip_test() and check() @allanmcrae
# https://github.com/allanmcrae/toolchain/blob/f18604d70c5933c31b51a320978711e4e6791cf1/glibc/PKGBUILD
_skip_test() {
  test=${1}
  file=${2}
  sed -i "/\b${test} /d" "${srcdir}/glibc/${file}"
}

#check() (
#  cd glibc-build

  # adjust/remove buildflags that cause false-positive testsuite failures
#  sed -i 's/-Werror=format-security/-Wformat-security/' config.make   # failure to build testsuite
#  sed -i '/CFLAGS/s/-fno-plt//' config.make                           # 27 failures
#  sed -i '/CFLAGS/s/-fexceptions//' config.make                       # 1 failure

  # The following tests fail due to restrictions in the Arch build system
  # The correct fix is to add the following to the systemd-nspawn call:
  # --system-call-filter="@clock @memlock @pkey"
#  _skip_test test-errno-linux        sysdeps/unix/sysv/linux/Makefile
#  _skip_test tst-mlock2              sysdeps/unix/sysv/linux/Makefile
#  _skip_test tst-ntp_gettime         sysdeps/unix/sysv/linux/Makefile
#  _skip_test tst-ntp_gettimex        sysdeps/unix/sysv/linux/Makefile
#  _skip_test tst-pkey                sysdeps/unix/sysv/linux/Makefile
#  _skip_test tst-process_mrelease    sysdeps/unix/sysv/linux/Makefile
#  _skip_test tst-shstk-legacy-1g     sysdeps/x86_64/Makefile
#  _skip_test tst-adjtime             time/Makefile

#  make -O check
#)

package_glibc() {
  pkgdesc='GNU C Library'
  depends=('linux-api-headers>=4.10' tzdata filesystem)
  optdepends=('gd: for memusagestat'
              'perl: for mtrace')
  install=glibc.install
  backup=(etc/gai.conf
          etc/locale.gen)

  make -C glibc-build DESTDIR="${pkgdir}" install
  rm -f "${pkgdir}"/etc/ld.so.cache

  # Shipped in tzdata
  rm -f "${pkgdir}"/usr/bin/{tzselect,zdump,zic}

  cd glibc

  install -dm755 "${pkgdir}"/usr/lib/locale

  install -m644 posix/gai.conf "${pkgdir}"/etc/gai.conf

  install -m755 "${srcdir}"/locale-gen "${pkgdir}"/usr/bin

  # Create /etc/locale.gen
  install -m644 "${srcdir}"/locale.gen.txt "${pkgdir}"/etc/locale.gen
  sed -e '1,3d' -e 's|/| |g' -e 's|\\| |g' -e 's|^|#|g' \
    localedata/SUPPORTED >> "${pkgdir}"/etc/locale.gen

  # Add SUPPORTED file to pkg
  sed -e '1,3d' -e 's|/| |g' -e 's| \\||g' \
    localedata/SUPPORTED > "${pkgdir}"/usr/share/i18n/SUPPORTED

  # install C.UTF-8 so that it is always available
  # should be built into glibc eventually
  # https://sourceware.org/glibc/wiki/Proposals/C.UTF-8
  # https://bugs.archlinux.org/task/74864
  install -dm755 "${pkgdir}"/usr/lib/locale
  cp -r "${srcdir}"/locales/usr/lib/locale/C.utf8 -t "${pkgdir}"/usr/lib/locale
  sed -i '/#C\.UTF-8 /d' "${pkgdir}"/etc/locale.gen

  # Provide tracing probes to libstdc++ for exceptions, possibly for other
  # libraries too. Useful for gdb's catch command.
  install -Dm644 "${srcdir}"/sdt.h "${pkgdir}"/usr/include/sys/sdt.h
  install -Dm644 "${srcdir}"/sdt-config.h "${pkgdir}"/usr/include/sys/sdt-config.h

  # Use llvm-strip only on recognized file formats
  find "$pkgdir" -type f \( -name '*.so*' -o -name '*.a' -o -executable \) -print0 | while IFS= read -r -d '' file; do
    if file "$file" | grep -q "ELF"; then
      if llvm-strip --strip-unneeded "$file" 2>/dev/null; then
        echo "Stripped: $file"
      else
        echo "Failed to strip: $file" >&2
      fi
    else
      echo "Skipping: $file (not an ELF file)" >&2
    fi
  done
}

package_lib32-glibc() {
  pkgdesc='GNU C Library (32-bit)'
  depends=("glibc=$pkgver")
  options+=('!emptydirs')
  install=lib32-glibc.install

  cd lib32-glibc-build

  make DESTDIR="${pkgdir}" install
  rm -rf "${pkgdir}"/{etc,sbin,usr/{bin,sbin,share},var}

  # We need to keep 32 bit specific header files
  find "${pkgdir}"/usr/include -type f -not -name '*-32.h' -delete

  # Dynamic linker
  install -d "${pkgdir}"/usr/lib
  ln -s ../lib32/ld-linux.so.2 "${pkgdir}"/usr/lib/

  # Add lib32 paths to the default library search path
  install -Dm644 "${srcdir}"/lib32-glibc.conf "${pkgdir}"/etc/ld.so.conf.d/lib32-glibc.conf

  # Symlink /usr/lib32/locale to /usr/lib/locale
  ln -s ../lib/locale "${pkgdir}"/usr/lib32/locale

  # Use llvm-strip only on recognized file formats
  find "$pkgdir" -type f \( -name '*.so*' -o -name '*.a' -o -executable \) -print0 | while IFS= read -r -d '' file; do
    if file "$file" | grep -q "ELF"; then
      if llvm-strip --strip-unneeded "$file" 2>/dev/null; then
        echo "Stripped: $file"
      else
        echo "Failed to strip: $file" >&2
      fi
    else
      echo "Skipping: $file (not an ELF file)" >&2
    fi
  done
}

package_glibc-locales() {
  pkgdesc='Pregenerated locales for GNU C Library'
  depends=("glibc=$pkgver")

  cp -r "${srcdir}"/locales/* -t "${pkgdir}"
  rm -r "${pkgdir}"/usr/lib/locale/C.utf8 || true

  # deduplicate locale data
  hardlink -c "${pkgdir}"/usr/lib/locale || true
}
