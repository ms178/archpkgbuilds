pkgbase=glibc
pkgname=(glibc lib32-glibc glibc-locales)
pkgver=2.40+r64+g7648e3c8e8
_commit=7648e3c8e80b3f1b3b43506b2fbe370e4824ab97
pkgrel=1
arch=(x86_64)
url='https://www.gnu.org/software/libc'
license=(GPL-2.0-or-later LGPL-2.1-or-later)
makedepends=(git gd lib32-gcc-libs python perf llvm)
options=(staticlibs !lto !strip)
source=("git+https://sourceware.org/git/glibc.git#commit=${_commit}"
        locale.gen.txt
        locale-gen
        lib32-glibc.conf
        sdt.h sdt-config.h
        04-mandriva-va_args.patch
        05-mandriva-zstdcompressedlocals.patch
        07-mandriva-nostrictaliasing.patch
        08-mandriva-float.patch
        clear.patch)

prepare() {
  mkdir -p glibc-build lib32-glibc-build

  [[ -d glibc-$pkgver ]] && ln -s glibc-$pkgver glibc
  cd glibc

  # Apply patches
  for patch in "${srcdir}"/*.patch; do
    msg2 "Applying patch ${patch##*/}..."
    patch -Np1 < "$patch"
  done

  # Check perf availability and settings
  if ! command -v perf >/dev/null 2>&1; then
    error "perf not found. Please install linux-tools package."
    return 1
  fi

  local perf_paranoid=/proc/sys/kernel/perf_event_paranoid
  if [[ -f "$perf_paranoid" ]]; then
    local paranoid_val=$(cat "$perf_paranoid")
    msg2 "Current perf_event_paranoid setting: $paranoid_val"
    if (( paranoid_val > 1 )); then
      warning "perf_event_paranoid > 1 might restrict perf sampling"
      warning "Consider: sudo sysctl kernel.perf_event_paranoid=1"
    fi
  fi
}

build() {
  local _configure_flags=(
    --prefix=/usr
    --with-headers=/usr/include
    --with-bugurl=https://gitlab.archlinux.org/archlinux/packaging/packages/glibc/-/issues
    --enable-bind-now
    --enable-fortify-source
    --enable-optimizations
    --enable-kernel=6.1
    --enable-cet
    --enable-multi-arch
    --disable-profile
    --disable-werror
    --disable-systemtap
    --disable-nscd
  )

  cd "${srcdir}"/glibc-build

  echo "slibdir=/usr/lib" >> configparms
  echo "rtlddir=/usr/lib" >> configparms
  echo "sbindir=/usr/bin" >> configparms
  echo "rootsbindir=/usr/bin" >> configparms

  # Configure with debug info and position independent code
  CFLAGS="${CFLAGS} -fno-reorder-blocks-and-partition -fPIC" \
  CXXFLAGS="${CXXFLAGS} -fno-reorder-blocks-and-partition -fPIC" \
  LDFLAGS="${LDFLAGS} -Wl,--emit-relocs" \
  "${srcdir}"/glibc/configure \
      --libdir=/usr/lib \
      --libexecdir=/usr/lib \
      "${_configure_flags[@]}"

  make -O

  # Create workload script
  cat > "${srcdir}"/glibc-build/bolt-workload.sh << 'EOF'
#!/bin/bash
set -euo pipefail

TMPDIR="${TMPDIR:-/tmp}/glibc-bolt-$$"
trap 'rm -rf "$TMPDIR"' EXIT
mkdir -p "$TMPDIR"

# Function to log with timestamp
log() {
  echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*"
}

# Core libc functionality tests
test_memory() {
  log "Testing memory operations..."
  for size in 1M 10M; do
    dd if=/dev/urandom of="$TMPDIR/test_file" bs="$size" count=1 2>/dev/null
    sort -R "$TMPDIR/test_file" >/dev/null
    cat "$TMPDIR/test_file" >/dev/null
  done
}

test_strings() {
  log "Testing string operations..."
  find /usr/include -type f -exec cat {} + 2>/dev/null | sort -u | uniq -c
  if [[ -f /usr/share/dict/words ]]; then
    head -n 5000 /usr/share/dict/words | sort -u
  fi
}

test_math() {
  log "Testing math operations..."
  for i in {1..1000}; do
    echo "scale=4; sqrt($i)" | bc >/dev/null
  done
}

test_locales() {
  log "Testing locale operations..."
  for loc in C POSIX en_US.UTF-8; do
    LANG="$loc" date
    LANG="$loc" locale -a
  done
}

test_threading() {
  log "Testing threading..."
  {
    test_memory
    test_strings
  } &
  {
    test_math
    test_locales
  } &
  wait
}

# Main execution
log "Starting workload execution..."
for i in {1..3}; do
  log "Iteration $i"
  test_threading
done

log "Workload completed successfully"
EOF

  chmod +x "${srcdir}"/glibc-build/bolt-workload.sh

  # Create temporary root for testing
  mkdir -p "${srcdir}"/tmp-root/{usr/lib,usr/lib64}
  make DESTDIR="${srcdir}"/tmp-root install

  # Set up library environment
  ln -sfn usr/lib "${srcdir}"/tmp-root/lib
  ln -sfn usr/lib64 "${srcdir}"/tmp-root/lib64
  cp -a /usr/lib/lib{pthread,dl,rt,m}.so* "${srcdir}"/tmp-root/usr/lib/
  export LD_LIBRARY_PATH="${srcdir}/tmp-root/usr/lib:${LD_LIBRARY_PATH}"

  msg2 "Collecting performance data..."
  cd "${srcdir}"/glibc-build

  # Attempt perf record with fallback options
  if ! perf record -F 2000 --max-size=3G --buildid-all \
    -e branch-instructions:u,cycles:u,cache-misses:u,branch-misses:u,branches:u,branch-loads:u,branch-load-misses:u,iTLB-load-misses:u,dTLB-store-misses:u,dTLB-load-misses:u,L1-icache-load-misses:u,LLC-load-misses:u -b \
    --output=perf.data.tmp -- ./bolt-workload.sh; then
    warning "Full perf record failed, trying minimal event set..."
    perf record -F 500 --max-size=1G --buildid-all -e branch-instructions:u,cycles:u,cache-misses:u,branch-misses:u,branches:u,branch-loads:u,branch-load-misses:u,iTLB-load-misses:u,dTLB-store-misses:u,dTLB-load-misses:u,L1-icache-load-misses:u,LLC-load-misses:u -b \
      --output=perf.data.tmp -- ./bolt-workload.sh
  fi

  if [[ -f perf.data.tmp && -s perf.data.tmp ]]; then
    mv perf.data.tmp perf.data
  else
    error "Failed to collect perf data"
    return 1
  fi

  msg2 "Converting perf data to BOLT format..."
  if ! perf2bolt "${srcdir}"/tmp-root/usr/lib/libc.so.6 \
    -p "${srcdir}"/glibc-build/perf.data \
    -o "${srcdir}"/glibc-build/perf.fdata \
    -w 10000; then
    error "perf2bolt failed"
    return 1
  fi

  msg2 "Applying BOLT optimizations..."
  if ! llvm-bolt "${srcdir}"/glibc-build/libc.so.6 \
    -o "${srcdir}"/glibc-build/libc.so.6.bolt \
    --data "${srcdir}"/glibc-build/perf.fdata \
    --dyno-stats \
    --use-old-text \
    --lite=false \
    --align-macro-fusion \
    --optimize-tail-calls \
    --eliminate-unreachable \
    --icp-eliminate-loads \
    --icf=all \
    --plt=all \
    --peepholes=all \
    --indirect-call-promotion=all \
    --reorder-blocks=ext-tsp \
    --reorder-functions=cdsort \
    --split-functions=2 \
    --split-strategy=cdsplit \
    --split-eh \
    --use-gnu-stack \
    --skip-funcs=__restore_rt/1,__setcontext*,__GI___clone*,clone*,__clone*,__clone3*,_dl_runtime_resolve*,__BOLT_FDE_FUNC*; then
    error "BOLT optimization failed"
    return 1
  fi

  # Replace original with optimized version if successful
  if [[ -f "${srcdir}"/glibc-build/libc.so.6.bolt ]]; then
    mv "${srcdir}"/glibc-build/libc.so.6.bolt "${srcdir}"/glibc-build/libc.so.6
    msg2 "Successfully applied BOLT optimizations"
  fi

  # Clean up
  rm -rf "${srcdir}"/tmp-root

  # Build 32-bit version
  cd "${srcdir}"/lib32-glibc-build
  export CC="gcc -m32 -mfpmath=sse -mstackrealign"
  export CXX="g++ -m32 -mfpmath=sse -mstackrealign"

  echo "slibdir=/usr/lib32" >> configparms
  echo "rtlddir=/usr/lib32" >> configparms
  echo "sbindir=/usr/bin" >> configparms
  echo "rootsbindir=/usr/bin" >> configparms

  "${srcdir}"/glibc/configure \
    --host=i686-pc-linux-gnu \
    --libdir=/usr/lib32 \
    --libexecdir=/usr/lib32 \
    "${_configure_flags[@]}"

  make -O

  # Pregenerate locales
  make -C "${srcdir}"/glibc/localedata objdir="${srcdir}"/glibc-build \
    DESTDIR="${srcdir}"/locales install-locale-files
}

# Credits for _skip_test() and check() @allanmcrae
# https://github.com/allanmcrae/toolchain/blob/f18604d70c5933c31b51a320978711e4e6791cf1/glibc/PKGBUILD
_skip_test() {
  test=${1}
  file=${2}
  sed -i "/\b${test} /d" "${srcdir}/glibc/${file}"
}

#check() (
#  cd glibc-build

  # adjust/remove buildflags that cause false-positive testsuite failures
#  sed -i 's/-Werror=format-security/-Wformat-security/' config.make   # failure to build testsuite
#  sed -i '/CFLAGS/s/-fno-plt//' config.make                           # 27 failures
#  sed -i '/CFLAGS/s/-fexceptions//' config.make                       # 1 failure

  # The following tests fail due to restrictions in the Arch build system
  # The correct fix is to add the following to the systemd-nspawn call:
  # --system-call-filter="@clock @memlock @pkey"
#  _skip_test test-errno-linux        sysdeps/unix/sysv/linux/Makefile
#  _skip_test tst-mlock2              sysdeps/unix/sysv/linux/Makefile
#  _skip_test tst-ntp_gettime         sysdeps/unix/sysv/linux/Makefile
#  _skip_test tst-ntp_gettimex        sysdeps/unix/sysv/linux/Makefile
#  _skip_test tst-pkey                sysdeps/unix/sysv/linux/Makefile
#  _skip_test tst-process_mrelease    sysdeps/unix/sysv/linux/Makefile
#  _skip_test tst-shstk-legacy-1g     sysdeps/x86_64/Makefile
#  _skip_test tst-adjtime             time/Makefile

#  make -O check
#)

package_glibc() {
  pkgdesc='GNU C Library'
  depends=('linux-api-headers>=4.10' tzdata filesystem)
  optdepends=('gd: for memusagestat'
              'perl: for mtrace')
  install=glibc.install
  backup=(etc/gai.conf
          etc/locale.gen)

  make -C glibc-build DESTDIR="${pkgdir}" install
  rm -f "${pkgdir}"/etc/ld.so.cache

  # Shipped in tzdata
  rm -f "${pkgdir}"/usr/bin/{tzselect,zdump,zic}

  cd glibc

  install -dm755 "${pkgdir}"/usr/lib/locale

  install -m644 posix/gai.conf "${pkgdir}"/etc/gai.conf

  install -m755 "${srcdir}"/locale-gen "${pkgdir}"/usr/bin

  # Create /etc/locale.gen
  install -m644 "${srcdir}"/locale.gen.txt "${pkgdir}"/etc/locale.gen
  sed -e '1,3d' -e 's|/| |g' -e 's|\\| |g' -e 's|^|#|g' \
    localedata/SUPPORTED >> "${pkgdir}"/etc/locale.gen

  # Add SUPPORTED file to pkg
  sed -e '1,3d' -e 's|/| |g' -e 's| \\||g' \
    localedata/SUPPORTED > "${pkgdir}"/usr/share/i18n/SUPPORTED

  # install C.UTF-8 so that it is always available
  # should be built into glibc eventually
  # https://sourceware.org/glibc/wiki/Proposals/C.UTF-8
  # https://bugs.archlinux.org/task/74864
  install -dm755 "${pkgdir}"/usr/lib/locale
  cp -r "${srcdir}"/locales/usr/lib/locale/C.utf8 -t "${pkgdir}"/usr/lib/locale
  sed -i '/#C\.UTF-8 /d' "${pkgdir}"/etc/locale.gen

  # Provide tracing probes to libstdc++ for exceptions, possibly for other
  # libraries too. Useful for gdb's catch command.
  install -Dm644 "${srcdir}"/sdt.h "${pkgdir}"/usr/include/sys/sdt.h
  install -Dm644 "${srcdir}"/sdt-config.h "${pkgdir}"/usr/include/sys/sdt-config.h

  # Use llvm-strip only on recognized file formats
  find "$pkgdir" -type f \( -name '*.so*' -o -name '*.a' -o -executable \) -print0 | while IFS= read -r -d '' file; do
    if llvm-strip --strip-unneeded "$file" 2>/dev/null || llvm-strip --strip-all "$file" 2>/dev/null; then
      echo "Stripped: $file"
    else
      echo "Skipping: $file (not a valid object file)" >&2
    fi
  done

}

package_lib32-glibc() {
  pkgdesc='GNU C Library (32-bit)'
  depends=("glibc=$pkgver")
  options+=('!emptydirs')
  install=lib32-glibc.install

  cd lib32-glibc-build

  make DESTDIR="${pkgdir}" install
  rm -rf "${pkgdir}"/{etc,sbin,usr/{bin,sbin,share},var}

  # We need to keep 32 bit specific header files
  find "${pkgdir}"/usr/include -type f -not -name '*-32.h' -delete

  # Dynamic linker
  install -d "${pkgdir}"/usr/lib
  ln -s ../lib32/ld-linux.so.2 "${pkgdir}"/usr/lib/

  # Add lib32 paths to the default library search path
  install -Dm644 "${srcdir}"/lib32-glibc.conf "${pkgdir}"/etc/ld.so.conf.d/lib32-glibc.conf

  # Symlink /usr/lib32/locale to /usr/lib/locale
  ln -s ../lib/locale "${pkgdir}"/usr/lib32/locale

  # Use llvm-strip only on recognized file formats
  find "$pkgdir" -type f \( -name '*.so*' -o -name '*.a' -o -executable \) -print0 | while IFS= read -r -d '' file; do
    if llvm-strip --strip-unneeded "$file" 2>/dev/null || llvm-strip --strip-all "$file" 2>/dev/null; then
      echo "Stripped: $file"
    else
      echo "Skipping: $file (not a valid object file)" >&2
    fi
  done

}

package_glibc-locales() {
  pkgdesc='Pregenerated locales for GNU C Library'
  depends=("glibc=$pkgver")

  cp -r locales/* -t "${pkgdir}"
  rm -r "${pkgdir}"/usr/lib/locale/C.utf8

  # deduplicate locale data
  hardlink -c "${pkgdir}"/usr/lib/locale
}
