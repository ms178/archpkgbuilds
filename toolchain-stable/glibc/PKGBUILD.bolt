pkgbase=glibc
pkgname=(glibc lib32-glibc glibc-locales)
pkgver=2.40+r64+g7648e3c8e8
_commit=7648e3c8e80b3f1b3b43506b2fbe370e4824ab97
pkgrel=1
arch=(x86_64)
url='https://www.gnu.org/software/libc'
license=(GPL-2.0-or-later LGPL-2.1-or-later)
makedepends=(git gd lib32-gcc-libs python perf llvm)
options=(staticlibs !lto)
source=("git+https://sourceware.org/git/glibc.git#commit=${_commit}"
        locale.gen.txt
        locale-gen
        lib32-glibc.conf
        sdt.h sdt-config.h
        04-mandriva-va_args.patch
        05-mandriva-zstdcompressedlocals.patch
        07-mandriva-nostrictaliasing.patch
        08-mandriva-float.patch
        clear.patch)
validpgpkeys=(7273542B39962DF7B299931416792B4EA25340F8 # Carlos O'Donell
              BC7C7372637EC10C57D7AA6579C43DFBF1CF2187) # Siddhesh Poyarekar

prepare() {
  mkdir -p glibc-build lib32-glibc-build

  [[ -d glibc-$pkgver ]] && ln -s glibc-$pkgver glibc
  cd glibc

  # Apply patches
  patch -Np1 < ../04-mandriva-va_args.patch
  patch -Np1 < ../05-mandriva-zstdcompressedlocals.patch
  patch -Np1 < ../07-mandriva-nostrictaliasing.patch
  patch -Np1 < ../08-mandriva-float.patch
  patch -Np1 < ../clear.patch

  # Print perf-related system settings
  echo "Checking perf settings..."
  echo "perf_event_paranoid: $(cat /proc/sys/kernel/perf_event_paranoid 2>/dev/null || echo 'unavailable')"
  echo "kptr_restrict: $(cat /proc/sys/kernel/kptr_restrict 2>/dev/null || echo 'unavailable')"

  # Check if perf can run at all
  if ! perf list 2>&1 | grep -q "cycles"; then
    echo "Warning: Hardware performance counters might not be available"
  fi

}

build() {
  local _configure_flags=(
    --prefix=/usr
    --with-headers=/usr/include
    --with-bugurl=https://gitlab.archlinux.org/archlinux/packaging/packages/glibc/-/issues
    --enable-bind-now
    --enable-fortify-source
    --enable-optimizations
    --enable-kernel=6.1
    --enable-cet
    --enable-multi-arch
    --disable-profile
    --disable-werror
    --disable-systemtap
    --disable-nscd
  )

  # First build: Normal build with debug info
  cd "${srcdir}"/glibc-build

  echo "slibdir=/usr/lib" >> configparms
  echo "rtlddir=/usr/lib" >> configparms
  echo "sbindir=/usr/bin" >> configparms
  echo "rootsbindir=/usr/bin" >> configparms

    # Configure with debug info and position independent code
    CFLAGS="${CFLAGS} -fno-reorder-blocks-and-partition -fPIC" \
    CXXFLAGS="${CXXFLAGS} -fno-reorder-blocks-and-partition -fPIC" \
    FFLAGS="${FFLAGS} -fPIC" \
    LDFLAGS="${LDFLAGS} -Wl,--emit-relocs" \
    "${srcdir}"/glibc/configure \
        --libdir=/usr/lib \
        --libexecdir=/usr/lib \
        "${_configure_flags[@]}"

  # Initial build
  make -O

  # Create workload script for perf sampling
  cat > "${srcdir}"/glibc-build/bolt-workload.sh << 'EOF'
#!/usr/bin/env fish

# Temporäres Verzeichnis im Build-Verzeichnis
set -l tmpdir (string join '/' $srcdir glibc-build tmp)
mkdir -p $tmpdir || exit 1

# Function to stress test memory operations
function memory_test
    for size in 1M 10M
        set -l test_file (string join '/' $tmpdir test_file)
        dd if=/dev/urandom of=$test_file bs=$size count=1 status=none > /dev/null
        or echo "Fehler beim Erstellen von $test_file mit Größe $size"
        if not test -f $test_file
            echo "Datei $test_file wurde nicht erstellt. Abbruch."
            return 1
        end
        cat $test_file > /dev/null
        sort -R $test_file > /dev/null
        rm $test_file > /dev/null
        or echo "Warnung: Fehler beim Entfernen von $test_file"
    end
end

# Function to stress test string operations
function string_test
    find /usr/include -type f -print0 | xargs -0 -P (nproc) grep -i "test" > /dev/null
    if test -f /usr/share/dict/words
        head -n 1000 /usr/share/dict/words | sort -u > /dev/null
    end
        if test -f /usr/share/common-licenses/GPL-3
        grep -oE '\b[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}\b' /usr/share/common-licenses/GPL-3 > /dev/null
    end
    locale -a | sort -u > /dev/null
    iconv -l | sort -u > /dev/null
end

# Function to test file operations
function file_test
    find /usr/include -type f -name "*.h" -print0 | xargs -0 wc -l > /dev/null
    find /usr/lib -type f -name "*.so*" -print0 | xargs -0 ls -l > /dev/null
    ls -laR /usr/bin > /dev/null
end

# Function to test process operations
function process_test
    ps -aux | head -n 10 >/dev/null
end

# Function to test network operations
function network_test
    ping -c 1 localhost > /dev/null
end

# Function to test locale and time operations
function locale_test
    for loc in C POSIX en_US.UTF-8
        env LANG=$loc date
        env LANG=$loc locale -ck LC_CTYPE
        env LANG=$loc sort -u /etc/passwd > /dev/null
    end
end

# Function to test math operations
function math_test
  for i in (seq 1 100)
    math "sqrt($i)" > /dev/null
  end
end

# Function to test concurrent memory allocation
function concurrent_test
    memory_test &
    wait
end

# Main loop
for i in (seq 1 1)
    echo "Running iteration $i..."

    lscpu > /dev/null
    free -m > /dev/null
    uname -a > /dev/null

    memory_test
    string_test
    file_test
    process_test
    network_test
    locale_test
    math_test
    concurrent_test

    for lib in (ls /usr/lib/*.so* | head -n 5)
        if test -f $lib
            ldd $lib > /dev/null
        end
    end

    grep "^#include" /usr/include/stdio.h > /dev/null

    dd if=/dev/zero of=/dev/null bs=1M count=1 > /dev/null

end

# Clean up
rm -rf $tmpdir
EOF

  chmod +x "${srcdir}"/glibc-build/bolt-workload.sh

  # Create a temporary directory for libraries
  mkdir -p "${srcdir}"/tmp-root/{usr/lib,usr/lib64}

  # Install the newly built glibc
  make DESTDIR="${srcdir}"/tmp-root install

  # Create symlinks for lib and lib64
  ln -sfn usr/lib "${srcdir}"/tmp-root/lib
  ln -sfn usr/lib64 "${srcdir}"/tmp-root/lib64

  # Copy necessary libraries
  cp -a /usr/lib/lib{pthread,dl,rt,m}.so* "${srcdir}"/tmp-root/usr/lib/

  # Set up library path for testing
  export LD_LIBRARY_PATH="${srcdir}/tmp-root/usr/lib:${LD_LIBRARY_PATH}"

  echo "Starting performance data collection..."
  cd "${srcdir}"/glibc-build

  # Check perf permissions and settings
  echo "Current perf_event_paranoid setting:"
  cat /proc/sys/kernel/perf_event_paranoid || true

  # Perf sampling run
  perf record --max-size=1G -F 2000 --buildid-all -e cycles:u,cache-misses:u,branch-misses:u -b -o perf.data -- ./bolt-workload.sh || echo "Perf recording completed with status $?"

  if [ ! -s "${srcdir}"/glibc-build/perf.data ]; then
    echo "Error: Failed to collect any perf data!"
    echo "Please ensure perf_event_paranoid is set appropriately:"
    echo "sudo sysctl kernel.perf_event_paranoid=1"
    exit 1
  fi

  echo "Collected perf data statistics:"
  perf stat -i "${srcdir}"/glibc-build/perf.data 2>&1 || true

  echo "Converting perf data to BOLT format..."
  if ! perf2bolt "${srcdir}"/tmp-root/usr/lib/libc.so.6 \
    -p "${srcdir}"/glibc-build/perf.data \
    -o "${srcdir}"/glibc-build/perf.fdata; then
    echo "Error: perf2bolt failed to process the perf data"
    exit 1
  fi

  # Apply BOLT optimization
  llvm-bolt "${srcdir}"/glibc-build/libc.so.6 \
    -o "${srcdir}"/glibc-build/libc.so.6.bolt \
    --data "${srcdir}"/glibc-build/perf.fdata \
    --dyno-stats \
    --icf=all \
    --plt=all \
    --peepholes=all \
    --indirect-call-promotion=all \
    --reorder-blocks=ext-tsp \
    --reorder-functions=cdsort \
    --split-functions \
    --split-strategy=cdsplit \
    --skip-funcs="__restore_rt/1,__setcontext*,__GI___clone*,clone*,__clone*,__clone3*,__BOLT_FDE_FUNCat4694f*,__BOLT_FDE_FUNCat3aa4f"

  # Check if BOLT succeeded
  if [[ -f "${srcdir}"/glibc-build/libc.so.6.bolt ]]; then
    mv "${srcdir}"/glibc-build/libc.so.6.bolt "${srcdir}"/glibc-build/libc.so.6
  else
    echo "BOLT optimization failed. Keeping original libc.so.6"
  fi

  # Clean up
  rm -rf "${srcdir}"/tmp-root

  # Build 32-bit version
  cd "${srcdir}"/lib32-glibc-build
  export CC="gcc -m32 -mfpmath=sse -mstackrealign"
  export CXX="g++ -m32 -mfpmath=sse -mstackrealign"

  echo "slibdir=/usr/lib32" >> configparms
  echo "rtlddir=/usr/lib32" >> configparms
  echo "sbindir=/usr/bin" >> configparms
  echo "rootsbindir=/usr/bin" >> configparms

  "${srcdir}"/glibc/configure \
    --host=i686-pc-linux-gnu \
    --libdir=/usr/lib32 \
    --libexecdir=/usr/lib32 \
    "${_configure_flags[@]}"

  make -O

  # Pregenerate locales
  make -C "${srcdir}"/glibc/localedata objdir="${srcdir}"/glibc-build \
    DESTDIR="${srcdir}"/locales install-locale-files
}

# Credits for _skip_test() and check() @allanmcrae
# https://github.com/allanmcrae/toolchain/blob/f18604d70c5933c31b51a320978711e4e6791cf1/glibc/PKGBUILD
_skip_test() {
  test=${1}
  file=${2}
  sed -i "/\b${test} /d" "${srcdir}/glibc/${file}"
}

#check() (
#  cd glibc-build

  # adjust/remove buildflags that cause false-positive testsuite failures
#  sed -i 's/-Werror=format-security/-Wformat-security/' config.make   # failure to build testsuite
#  sed -i '/CFLAGS/s/-fno-plt//' config.make                           # 27 failures
#  sed -i '/CFLAGS/s/-fexceptions//' config.make                       # 1 failure

  # The following tests fail due to restrictions in the Arch build system
  # The correct fix is to add the following to the systemd-nspawn call:
  # --system-call-filter="@clock @memlock @pkey"
#  _skip_test test-errno-linux        sysdeps/unix/sysv/linux/Makefile
#  _skip_test tst-mlock2              sysdeps/unix/sysv/linux/Makefile
#  _skip_test tst-ntp_gettime         sysdeps/unix/sysv/linux/Makefile
#  _skip_test tst-ntp_gettimex        sysdeps/unix/sysv/linux/Makefile
#  _skip_test tst-pkey                sysdeps/unix/sysv/linux/Makefile
#  _skip_test tst-process_mrelease    sysdeps/unix/sysv/linux/Makefile
#  _skip_test tst-shstk-legacy-1g     sysdeps/x86_64/Makefile
#  _skip_test tst-adjtime             time/Makefile

#  make -O check
#)

package_glibc() {
  pkgdesc='GNU C Library'
  depends=('linux-api-headers>=4.10' tzdata filesystem)
  optdepends=('gd: for memusagestat'
              'perl: for mtrace')
  install=glibc.install
  backup=(etc/gai.conf
          etc/locale.gen)

  make -C glibc-build DESTDIR="${pkgdir}" install
  rm -f "${pkgdir}"/etc/ld.so.cache

  # Shipped in tzdata
  rm -f "${pkgdir}"/usr/bin/{tzselect,zdump,zic}

  cd glibc

  install -dm755 "${pkgdir}"/usr/lib/locale

  install -m644 posix/gai.conf "${pkgdir}"/etc/gai.conf

  install -m755 "${srcdir}"/locale-gen "${pkgdir}"/usr/bin

  # Create /etc/locale.gen
  install -m644 "${srcdir}"/locale.gen.txt "${pkgdir}"/etc/locale.gen
  sed -e '1,3d' -e 's|/| |g' -e 's|\\| |g' -e 's|^|#|g' \
    localedata/SUPPORTED >> "${pkgdir}"/etc/locale.gen

  # Add SUPPORTED file to pkg
  sed -e '1,3d' -e 's|/| |g' -e 's| \\||g' \
    localedata/SUPPORTED > "${pkgdir}"/usr/share/i18n/SUPPORTED

  # install C.UTF-8 so that it is always available
  # should be built into glibc eventually
  # https://sourceware.org/glibc/wiki/Proposals/C.UTF-8
  # https://bugs.archlinux.org/task/74864
  install -dm755 "${pkgdir}"/usr/lib/locale
  cp -r "${srcdir}"/locales/usr/lib/locale/C.utf8 -t "${pkgdir}"/usr/lib/locale
  sed -i '/#C\.UTF-8 /d' "${pkgdir}"/etc/locale.gen

  # Provide tracing probes to libstdc++ for exceptions, possibly for other
  # libraries too. Useful for gdb's catch command.
  install -Dm644 "${srcdir}"/sdt.h "${pkgdir}"/usr/include/sys/sdt.h
  install -Dm644 "${srcdir}"/sdt-config.h "${pkgdir}"/usr/include/sys/sdt-config.h
}

package_lib32-glibc() {
  pkgdesc='GNU C Library (32-bit)'
  depends=("glibc=$pkgver")
  options+=('!emptydirs')
  install=lib32-glibc.install

  cd lib32-glibc-build

  make DESTDIR="${pkgdir}" install
  rm -rf "${pkgdir}"/{etc,sbin,usr/{bin,sbin,share},var}

  # We need to keep 32 bit specific header files
  find "${pkgdir}"/usr/include -type f -not -name '*-32.h' -delete

  # Dynamic linker
  install -d "${pkgdir}"/usr/lib
  ln -s ../lib32/ld-linux.so.2 "${pkgdir}"/usr/lib/

  # Add lib32 paths to the default library search path
  install -Dm644 "${srcdir}"/lib32-glibc.conf "${pkgdir}"/etc/ld.so.conf.d/lib32-glibc.conf

  # Symlink /usr/lib32/locale to /usr/lib/locale
  ln -s ../lib/locale "${pkgdir}"/usr/lib32/locale
}

package_glibc-locales() {
  pkgdesc='Pregenerated locales for GNU C Library'
  depends=("glibc=$pkgver")

  cp -r locales/* -t "${pkgdir}"
  rm -r "${pkgdir}"/usr/lib/locale/C.utf8

  # deduplicate locale data
  hardlink -c "${pkgdir}"/usr/lib/locale
}
