# Maintainer: Your Name <your email>
# Contributor: Arch Linux Developers <https://archlinux.org>

pkgbase=glibc
pkgname=(glibc lib32-glibc glibc-locales)
# This pkgver might need update based on the commit
pkgver=glibc+2.41+r40+g80cd656649
_commit=80cd6566496e513297bf1031cb164192fd8f81f6 # Updated commit
pkgrel=1
arch=(x86_64)
url='https://www.gnu.org/software/libc'
license=(GPL-2.0-or-later LGPL-2.1-or-later)
makedepends=(git gd lib32-gcc-libs python perf llvm fish patch) # fish kept for workload, patch for other patches
options=(staticlibs !lto !strip)
source=("git+https://sourceware.org/git/glibc.git#commit=${_commit}"
        locale.gen.txt
        locale-gen
        lib32-glibc.conf
        sdt.h sdt-config.h
        04-mandriva-va_args.patch
        05-mandriva-zstdcompressedlocals.patch
        07-mandriva-nostrictaliasing.patch
        08-mandriva-float.patch
        clear.patch)
# No checksums requested
b2sums=('SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP')

pkgver() {
  cd "${srcdir}/glibc"
  if [[ -d .git ]]; then
    # Use annotated tags, fallback to commit count + hash
    git describe --tags --long 2>/dev/null | sed 's/\([^-]*-g\)/r\1/;s/-/+/g;s/\+git//' || \
    printf "r%s.%s" "$(git rev-list --count HEAD)" "$(git rev-parse --short HEAD)"
  else
    echo "${pkgver}" # Fallback if not a git repo
 fi
}


# --- Workload Script Definition ---
_create_workload_script() {
  local script_path="${1}"

  msg2 "Creating workload script at: ${script_path}"
  # Workload script content (fish version, using $fish_pid)
  cat > "${script_path}" << 'EOF'
#!/usr/bin/env fish

# Set up TMPDIR variable; if not already set, default to /tmp.
if not set -q TMPDIR
    set -gx TMPDIR /tmp
end

# Create a unique temporary directory
set -g myTMPDIR (mktemp -d "$TMPDIR/glibc-workload-XXXXXX")
# Ensure the directory was created
if test -z "$myTMPDIR" -o ! -d "$myTMPDIR"
    echo "Failed to create temporary directory" >&2
    exit 1
end
echo "Workload using temporary directory: $myTMPDIR" >&2

# Define a cleanup function using fish's scope rules for functions
function cleanup --on-process-exit $fish_pid --no-scope-shadowing --inherit-variable myTMPDIR
    if test -d "$myTMPDIR"
        echo "Cleaning up workload temporary files in $myTMPDIR..." >&2
        rm -rf "$myTMPDIR"
    end
end

# Function to log messages with a timestamp
function log
    echo "["(date '+%Y-%m-%d %H:%M:%S')"]" $argv >&2
end

# Create test files
log "Creating test files..."
if ! dd if=/dev/urandom of="$myTMPDIR/large_file" bs=1M count=20 status=none; or ! dd if=/dev/urandom of="$myTMPDIR/small_file" bs=4K count=200 status=none
    log "Error creating initial test files."
    exit 1
end

# Create a text file for string operations
log "Creating word list..."
for i in (seq 1 1000)
    echo "Line $i with some random text for testing string operations" >> "$myTMPDIR/words"
end

# Create a file of unique words
if ! grep -o "[a-zA-Z]\+" "$myTMPDIR/words" | sort -u | head -n 2000 > "$myTMPDIR/unique_words"
    log "Error creating unique words file."
    # Continue anyway, subsequent tests might still provide value
end

# Memory operations
log "Testing memory operations..."
for i in (seq 1 3)
    dd if="$myTMPDIR/large_file" of="$myTMPDIR/copy_$i" bs=1M count=20 status=none
end

# String operations
log "Testing string operations..."
for i in (seq 1 100)
    set hex (math "$i * 16")
    printf "Test string formatting with number %d and hex 0x%x\n" $i $hex > /dev/null
end
if test -f "$myTMPDIR/unique_words"
    grep -E '^[A-Za-z]{4,8}$' "$myTMPDIR/unique_words" > /dev/null
end

# Math operations
log "Testing math operations..."
for i in (seq 1 100)
    math "$i * 1024 / 32 + ($i % 255)" > /dev/null
end

# File I/O operations
log "Testing I/O operations..."
cat "$myTMPDIR/large_file" > /dev/null

# Fix: use a different method to generate random numbers
for i in (seq 1 5)
    set skip (math "($i * 37 + "(date +%s)") % 200")
    dd if="$myTMPDIR/large_file" of=/dev/null bs=4K count=1 skip=$skip status=none
end

# Simple threading test
log "Testing threading operations..."
for i in (seq 1 4)
    begin
        for j in (seq 1 4)
            echo "Thread $i processing batch $j" > "$myTMPDIR/thread_$i"_"$j"
            sleep 0.01
        end
    end &
end
wait # Wait for background jobs launched by 'begin'

# Network operations
log "Testing network operations..."
for domain in google.com github.com archlinux.org kernel.org gnu.org
    getent hosts $domain > /dev/null 2>&1; or true
end

# Locale operations
log "Testing locale operations..."
echo "Testing Unicode: Hello World Ελληνικά Русский 日本語" > "$myTMPDIR/unicode_test"
wc -m "$myTMPDIR/unicode_test" > /dev/null

# Process operations
log "Testing process operations..."
for i in (seq 1 4)
    echo "Process $i" > "$myTMPDIR/process_$i" &
end
wait # Wait for background process creation

# Add more intensive CPU operations to better simulate a gaming workload
log "Testing CPU-intensive operations..."
for i in (seq 1 3)
    # Generate a list of numbers and sort them
    seq 1 10000 | sort -R > "$myTMPDIR/numbers_$i"
    sort -n "$myTMPDIR/numbers_$i" > "$myTMPDIR/sorted_$i"

    # Compress and decompress data
    if test -f "$myTMPDIR/large_file"
        gzip -c "$myTMPDIR/large_file" > "$myTMPDIR/compressed_$i.gz" 2>/dev/null; or true
        if test -f "$myTMPDIR/compressed_$i.gz"
            gunzip -c "$myTMPDIR/compressed_$i.gz" > /dev/null 2>&1; or true
        end
    end
end

log "All workload tests completed."
exit 0 # Explicitly exit success
EOF

  chmod +x "${script_path}"
}

# --- PKGBUILD Functions ---

prepare() {
  # Create build directories: main and lib32
  mkdir -p glibc-build lib32-glibc-build

  cd "${srcdir}/glibc"

  # Apply original Glibc patches
  for patch_file in "${srcdir}"/0*.patch "${srcdir}"/clear.patch; do
    [[ "$patch_file" == *".patch" ]] || continue
    if [[ -f "$patch_file" ]]; then
        msg2 "Applying patch ${patch_file##*/}..."
        patch -Np1 < "$patch_file"
    else
        warning "Patch file not found, skipping: $patch_file"
    fi
  done

  # Check dependencies
  if ! command -v perf >/dev/null 2>&1; then
    error "perf not found. Please install linux-tools package."
    return 1
  fi
  if ! command -v fish >/dev/null 2>&1; then
    error "fish shell not found, but is required by the workload script. Please install fish."
    return 1
  fi

  local perf_paranoid=/proc/sys/kernel/perf_event_paranoid
  if [[ -f "$perf_paranoid" ]]; then
    local paranoid_val
    paranoid_val=$(cat "$perf_paranoid")
    msg2 "Current perf_event_paranoid setting: $paranoid_val"
    if (( paranoid_val > 1 )); then
      warning "perf_event_paranoid > 1 might restrict perf sampling"
      warning "Consider: sudo sysctl kernel.perf_event_paranoid=1"
    fi
  fi

  # Create the workload script ONCE in prepare()
  _create_workload_script "${srcdir}/glibc_workload.sh"
}

build() {
  # Ensure cleanup happens even on error
  trap 'rm -rf "${srcdir}/tmp-root" "${srcdir}/glibc_workload.sh"' EXIT

  local _configure_flags=(
    --prefix=/usr
    --with-headers=/usr/include
    --with-bugurl=https://gitlab.archlinux.org/archlinux/packaging/packages/glibc/-/issues
    --enable-bind-now
    --disable-fortify-source # Kept as per previous attempts
    --enable-optimizations
    --enable-kernel=6.13
    --disable-cet # Kept as per previous attempts
    --enable-multi-arch
    --disable-profile # Disables gprof profiling
    --disable-werror
    --disable-systemtap
    --disable-nscd
    --libdir=/usr/lib
    --libexecdir=/usr/lib
  )

  # Add back -fno-reorder-blocks-and-partition
  local _common_cflags="-fno-reorder-blocks-and-partition -fPIC"
  local _common_ldflags="-Wl,--emit-relocs"

  local _workload_script_path="${srcdir}/glibc_workload.sh"

  # --- Phase 1: Main 64-bit Build (BOLT Ready) ---
  msg2 "Starting Main Build (64-bit) for BOLT..."
  cd "${srcdir}/glibc-build"

  rm -f configparms
  echo "slibdir=/usr/lib" >> configparms
  echo "rtlddir=/usr/lib" >> configparms
  echo "sbindir=/usr/bin" >> configparms
  echo "rootsbindir=/usr/bin" >> configparms

  # Configure and build with flags needed for BOLT
  CFLAGS="${CFLAGS} ${_common_cflags}" \
  CXXFLAGS="${CXXFLAGS} ${_common_cflags}" \
  LDFLAGS="${LDFLAGS} ${_common_ldflags}" \
  "${srcdir}"/glibc/configure \
      "${_configure_flags[@]}" || return 1

  make -O || return 1

  # --- Phase 2: BOLT Optimization (64-bit) ---
  msg2 "Starting BOLT Optimization..."

  local tmp_root_dir="${srcdir}/tmp-root"
  local tmp_lib_dir="${tmp_root_dir}/usr/lib"
  local build_dir="${srcdir}/glibc-build"
  local bolt_applied="false" # Track if BOLT succeeds

  # 2a. Create temporary installation
  msg2 "Creating temporary installation in ${tmp_root_dir}..."
  mkdir -p "$tmp_lib_dir" "${tmp_root_dir}/usr/lib64"
  if ! make -C "$build_dir" DESTDIR="$tmp_root_dir" install; then
      error "Failed during 'make install' to temporary directory."
      ls -lAR "$tmp_root_dir" || true
      return 1
  fi
  msg2 "Temporary installation completed."

  # Find the actual path to the main libc shared object in the temp install
  local tmp_libc_so_target
  if [[ -f "${tmp_lib_dir}/libc.so.6" && ! -L "${tmp_lib_dir}/libc.so.6" ]]; then
      tmp_libc_so_target="${tmp_lib_dir}/libc.so.6"
  elif [[ -L "${tmp_lib_dir}/libc.so.6" ]]; then
      tmp_libc_so_target=$(readlink -f "${tmp_lib_dir}/libc.so.6")
  fi
  if [[ ! -f "$tmp_libc_so_target" ]]; then
      error "Actual libc ELF file not found in temporary root: ${tmp_lib_dir}/"
      ls -l "$tmp_lib_dir"
      return 1
  fi
  if ! file "$tmp_libc_so_target" | grep -q 'ELF.*shared object'; then
      error "Identified temporary libc target is not a valid ELF shared object: $tmp_libc_so_target"
      file "$tmp_libc_so_target"
      return 1
  fi
  msg2 "Temporary libc target for profiling/perf2bolt found: $tmp_libc_so_target"

  # 2b. Set up environment for profiling run
  ln -sfn usr/lib "${tmp_root_dir}/lib"
  ln -sfn usr/lib "${tmp_root_dir}/lib64"
  cp -a /usr/lib/lib{pthread,dl,rt,m}.so* "${tmp_lib_dir}/" &>/dev/null || true

  local previous_ld_library_path="${LD_LIBRARY_PATH:-}"
  export LD_LIBRARY_PATH="${tmp_lib_dir}${previous_ld_library_path:+:${previous_ld_library_path}}"
  msg2 "Set LD_LIBRARY_PATH for profiling: $LD_LIBRARY_PATH"

  # 2c. Collect performance data using perf
  msg2 "Collecting performance data (perf) for BOLT using ${_workload_script_path}..."
  cd "$build_dir"

  local perf_exit_code=0
  local perf_data_file="${build_dir}/perf.data"
  local perf_data_tmp_file="${perf_data_file}.tmp"
  rm -f "$perf_data_file" "$perf_data_tmp_file"

  if ! perf record -F 2000 --max-size=10G --buildid-all \
    -e branch-instructions:u,cycles:u,cache-misses:u,branch-misses:u,branches:u,branch-loads:u,branch-load-misses:u,iTLB-load-misses:u,dTLB-store-misses:u,dTLB-load-misses:u,L1-icache-load-misses:u,LLC-load-misses:u -b \
    --output="$perf_data_tmp_file" -- "${_workload_script_path}"; then
    perf_exit_code=$?
    warning "Full perf record failed (exit code: $perf_exit_code), trying minimal event set..."
    if ! perf record -F 500 --max-size=10G --buildid-all -e cycles:u,branches:u -b \
      --output="$perf_data_tmp_file" -- "${_workload_script_path}"; then
      perf_exit_code=$?
      warning "Minimal perf record failed (exit code: $perf_exit_code), trying basic recording..."
      perf record -F 100 --max-size=10G --buildid-all -b \
        --output="$perf_data_tmp_file" -- "${_workload_script_path}" || perf_exit_code=$?
    fi
  fi

  export LD_LIBRARY_PATH="$previous_ld_library_path"
  msg2 "Restored LD_LIBRARY_PATH"

  if [[ $perf_exit_code -ne 0 ]]; then
     error "Workload script failed with exit code $perf_exit_code during perf recording. Cannot proceed with BOLT."
     rm -f "$perf_data_tmp_file" "$perf_data_file"
  elif [[ -f "$perf_data_tmp_file" && -s "$perf_data_tmp_file" ]]; then
    mv "$perf_data_tmp_file" "$perf_data_file"
    msg2 "Perf data collected successfully: $perf_data_file"
  else
    warning "Perf record finished but data file is missing or empty. BOLT optimization will be skipped."
    rm -f "$perf_data_file" "$perf_data_tmp_file"
  fi

  # 2d. Process perf data and apply BOLT (only if perf data exists and only for libc)
  if [[ -f "$perf_data_file" && -s "$perf_data_file" ]]; then
      local perf_fdata_file="${build_dir}/perf.libc.fdata" # Fdata specific to libc profile
      rm -f "$perf_fdata_file"

      msg2 "Converting perf data for libc using profiled binary: $tmp_libc_so_target"
      if ! perf2bolt "$tmp_libc_so_target" -p "$perf_data_file" -o "$perf_fdata_file" -w 10000; then
          warning "perf2bolt failed for libc. Skipping BOLT."
      elif [[ ! -s "$perf_fdata_file" ]]; then
          warning "perf2bolt produced empty fdata for libc. Skipping BOLT."
      else
          msg2 "Perf data converted to BOLT format: $perf_fdata_file"

          # Explicitly target libc.so in the build directory
          local original_libc_build_path="${build_dir}/libc.so"

          if [[ ! -f "$original_libc_build_path" ]]; then
              error "Specified BOLT target not found: ${original_libc_build_path}"
              warning "BOLT optimization will be skipped."
          elif ! file "$original_libc_build_path" | grep -q 'ELF.*shared object'; then
              error "Specified BOLT target ${original_libc_build_path} is not a valid ELF shared object."
              file "$original_libc_build_path"
              warning "BOLT optimization will be skipped."
          else
              msg2 "Using BOLT target: $original_libc_build_path"
              local bolted_output_path="${original_libc_build_path}.bolted"
              rm -f "$bolted_output_path"
              cp -p "$original_libc_build_path" "${original_libc_build_path}.bolt_orig" || { error "Failed to backup BOLT target $original_libc_build_path"; return 1; }

              msg2 "Applying BOLT to $original_libc_build_path..."
              # *** FIX: Add --relocs to llvm-bolt command ***
              # Also keep --update-debug-sections if desired, helps debugging post-BOLT
              if ! llvm-bolt "$original_libc_build_path" \
                -o "$bolted_output_path" \
                --data "$perf_fdata_file" \
                --relocs \
                --update-debug-sections \
                --dyno-stats \
                --reorder-blocks=ext-tsp \
                --reorder-functions=cdsort \
                --split-functions \
                --split-eh \
                --skip-funcs=__restore_rt/1,__setcontext*,__GI___clone*,clone*,__clone*,__clone3*,_dl_runtime_resolve*,__BOLT_FDE_FUNC*,____longjmp_chk/1*; then
                warning "llvm-bolt command failed for $original_libc_build_path. Restoring original."
                mv "${original_libc_build_path}.bolt_orig" "$original_libc_build_path" || error "Failed to restore original binary after BOLT failure!"
              else
                if [[ -f "$bolted_output_path" && -s "$bolted_output_path" ]]; then
                  if cmp -s "$bolted_output_path" "${original_libc_build_path}.bolt_orig"; then
                      warning "BOLT ran on $original_libc_build_path but output is identical. Restoring original."
                      rm "$bolted_output_path"
                      mv "${original_libc_build_path}.bolt_orig" "$original_libc_build_path"
                  else
                      msg2 "BOLT successful for $original_libc_build_path. Replacing original."
                      mv "$bolted_output_path" "$original_libc_build_path" || { error "Failed to move bolted binary over original!"; mv "${original_libc_build_path}.bolt_orig" "$original_libc_build_path"; return 1; }
                      bolt_applied="true"
                      rm "${original_libc_build_path}.bolt_orig"
                  fi
                else
                  warning "BOLT produced empty/missing output for $original_libc_build_path. Restoring original."
                  mv "${original_libc_build_path}.bolt_orig" "$original_libc_build_path" || error "Failed to restore original binary after empty BOLT output!"
                  rm -f "$bolted_output_path"
                fi
              fi
          fi # End if original_libc_build_path checks passed
      fi # End if perf_fdata conversion succeeded
      # Clean up fdata file regardless of bolt success
      rm -f "$perf_fdata_file"
  fi # End if perf data exists

  # 2e. Clean up temporary install dir
  msg2 "Cleaning up temporary installation directory..."
  rm -rf "${tmp_root_dir}"

  if [[ "$bolt_applied" == "true" ]]; then
      msg2 "BOLT optimizations were successfully applied to libc."
  else
      msg2 "BOLT optimizations for libc were skipped or failed."
  fi

  # --- Phase 3: Lib32 Build ---
  msg2 "Starting Lib32 Build..."
  cd "${srcdir}"/lib32-glibc-build
  export CC="gcc -m32 -march=native -mfpmath=sse -mstackrealign"
  export CXX="g++ -m32 -march=native -mfpmath=sse -mstackrealign"
  unset LD_LIBRARY_PATH

  rm -f configparms
  echo "slibdir=/usr/lib32" >> configparms
  echo "rtlddir=/usr/lib32" >> configparms
  echo "sbindir=/usr/bin" >> configparms
  echo "rootsbindir=/usr/bin" >> configparms

  CFLAGS="${CFLAGS} -fPIC" \
  CXXFLAGS="${CXXFLAGS} -fPIC" \
  LDFLAGS="${LDFLAGS}" \
  "${srcdir}"/glibc/configure \
    --host=i686-pc-linux-gnu \
    "${_configure_flags[@]}" || return 1

  make -O || return 1


  # --- Phase 4: Locale Pregeneration ---
  msg2 "Pregenerating locales..."
  make -C "${srcdir}"/glibc/localedata objdir="${srcdir}"/glibc-build \
    DESTDIR="${srcdir}"/locales install-locale-files || return 1

  # --- Final Cleanup handled by trap ---
  msg2 "Build function finished successfully."
}

_skip_test() {
  test=${1}
  file=${2}
  sed -i "/\b${test} /d" "${srcdir}/glibc/${file}"
}

package_glibc() {
  pkgdesc='GNU C Library (BOLT Optimized)' # Updated description
  depends=('linux-api-headers>=4.10' tzdata filesystem)
  optdepends=('gd: for memusagestat'
              'perl: for mtrace')
  install=glibc.install
  backup=(etc/gai.conf
          etc/locale.gen)

  # Install from the potentially BOLT-optimized build directory
  make -C "${srcdir}/glibc-build" DESTDIR="${pkgdir}" install || return 1
  rm -f "${pkgdir}"/etc/ld.so.cache
  rm -f "${pkgdir}"/usr/bin/{tzselect,zdump,zic}

  cd "${srcdir}/glibc"

  install -dm755 "${pkgdir}"/usr/lib/locale
  install -m644 posix/gai.conf "${pkgdir}"/etc/gai.conf
  install -m755 "${srcdir}"/locale-gen "${pkgdir}"/usr/bin
  install -m644 "${srcdir}"/locale.gen.txt "${pkgdir}"/etc/locale.gen
  sed -e '1,3d' -e 's|/| |g' -e 's|\\| |g' -e 's|^|#|g' \
    localedata/SUPPORTED >> "${pkgdir}"/etc/locale.gen
  sed -e '1,3d' -e 's|/| |g' -e 's| \\||g' \
    localedata/SUPPORTED > "${pkgdir}"/usr/share/i18n/SUPPORTED
  install -dm755 "${pkgdir}"/usr/lib/locale/C.utf8
  cp -r "${srcdir}"/locales/usr/lib/locale/C.utf8/. "${pkgdir}"/usr/lib/locale/C.utf8/
  sed -i '/^#C\.UTF-8 /s/^#//' "${pkgdir}"/etc/locale.gen
  install -Dm644 "${srcdir}"/sdt.h "${pkgdir}"/usr/include/sys/sdt.h
  install -Dm644 "${srcdir}"/sdt-config.h "${pkgdir}"/usr/include/sys/sdt-config.h

  msg2 "Stripping binaries in glibc package..."
  find "$pkgdir" -type f \( -name '*.so*' -o -name '*.a' -o -executable \) -print0 | while IFS= read -r -d '' file; do
    if file -bi "$file" | grep -q 'application/.*executable\|application/.*sharedlib'; then
      # Use llvm-strip since we depend on llvm anyway
      if llvm-strip --strip-unneeded "$file" 2>/dev/null; then
        : # Be quiet on success
      else
        warning "Failed to strip: $file"
      fi
    fi
  done
}

package_lib32-glibc() {
  pkgdesc='GNU C Library (32-bit)'
  depends=("glibc=$pkgver-$pkgrel")
  options+=('!emptydirs')
  install=lib32-glibc.install

  make -C "${srcdir}/lib32-glibc-build" DESTDIR="${pkgdir}" install || return 1
  rm -rf "${pkgdir}"/{etc,sbin,usr/{bin,sbin,share},var}
  find "${pkgdir}"/usr/include -type f -not -name '*-32.h' -delete
  install -d "${pkgdir}"/usr/lib
  ln -s ../lib32/ld-linux.so.2 "${pkgdir}"/usr/lib/ld-linux.so.2
  install -Dm644 "${srcdir}"/lib32-glibc.conf "${pkgdir}"/etc/ld.so.conf.d/lib32-glibc.conf
  ln -s ../lib/locale "${pkgdir}"/usr/lib32/locale

  msg2 "Stripping binaries in lib32-glibc package..."
  find "$pkgdir" -type f \( -name '*.so*' -o -name '*.a' -o -executable \) -print0 | while IFS= read -r -d '' file; do
    if file -bi "$file" | grep -q 'application/.*executable\|application/.*sharedlib'; then
       if llvm-strip --strip-unneeded "$file" 2>/dev/null; then
         :
       else
         warning "Failed to strip: $file"
       fi
    fi
  done
}

package_glibc-locales() {
  pkgdesc='Pregenerated locales for GNU C Library'
  depends=("glibc=$pkgver-$pkgrel")

  cp -r "${srcdir}"/locales/* -t "${pkgdir}"/
  rm -r "${pkgdir}/usr/lib/locale/C.utf8" || true

  msg2 "Hardlinking locale data..."
  hardlink -cv "${pkgdir}"/usr/lib/locale || true
}
