pkgbase=gcc
pkgname=(
  gcc
  gcc-libs
  lib32-gcc-libs
  lto-dump
  libgccjit
)
pkgver=15.1.1
_majorver=${pkgver%%.*}
_commit=1c1847fe4eb1d1e25d33d4a7b4cf15eec7b9ee63
pkgrel=5.1
pkgdesc='The GNU Compiler Collection'
arch=(x86_64)
url='https://gcc.gnu.org'
license=(GPL LGPL FDL custom)

makedepends=(
  binutils
  doxygen
  git
  lib32-glibc
  lib32-gcc-libs
  libmpc
  libxcrypt
  python
  zstd
  isl
)
checkdepends=(
  dejagnu
  expect
  inetutils
  python-pytest
  tcl
)
options=(!emptydirs !lto)
_libdir=usr/lib/gcc/$CHOST/${pkgver%_*}

source=(
  "git+https://gcc.gnu.org/git/gcc.git#commit=$_commit"
  c89
  c99
  clearlinux.patch
)
sha256sums=(
  'SKIP' # VCS source
  'de48736f6e4153f03d0a5d38ceb6c6fdb7f054e8f47ddd6af0a3dbf14f27b931'
  '2513c6d9984dd0a2058557bf00f06d8d5181734e41dcfe07be7ed86f2959622a'
  'c86372c207d174c0918d4aedf1cb79f7fc093649eb1ad8d9450dccc46849d308'
)

#######################################################################
# helper                                                              #
#######################################################################
_patch() {
  printf '\033[1;33m==> Applying patch: %s\033[0m\n' "$1"
  patch -d "$srcdir/gcc" --forward --strip=1 --input="$srcdir/$1"
}

#######################################################################
# prepare                                                             #
#######################################################################
prepare() {
  # gcc checkout lives in $srcdir/gcc
  cd "$srcdir/gcc"

  # Disable fixincludes (we ship pristine headers)
  sed -i 's@\./fixinc\.sh@-c true@' gcc/Makefile.in

  # Arch installs x86_64 libraries to /lib, not /lib64
  sed -i '/m64=/s/lib64/lib/' gcc/config/i386/t-linux64

  # Apply downstream patch set
  _patch clearlinux.patch

  # Create out-of-tree build dirs
  mkdir -p "$srcdir"/{gcc-build,libgccjit-build}
}

#######################################################################
# build                                                               #
#######################################################################
build() {
  local _confflags=(
    --prefix=/usr
    --libdir=/usr/lib
    --libexecdir=/usr/lib
    --mandir=/usr/share/man
    --infodir=/usr/share/info
    --with-bugurl=https://bugs.archlinux.org/
    --enable-default-hash-style=gnu
    --with-system-zlib
    --with-zstd
    --with-isl
    --enable-__cxa_atexit
    --disable-cet
    --disable-checking
    --enable-clocale=gnu
    --disable-default-pie
    --enable-default-ssp
    --enable-gnu-indirect-function
    --enable-gnu-unique-object
    --disable-link-serialization
    --enable-linker-build-id
    --enable-lto
    --enable-multilib
    --enable-plugin
    --enable-shared
    --enable-threads=posix
    --disable-libssp
    --disable-libstdcxx-pch
    --disable-vtable-verify
    --disable-libunwind-exceptions
    --disable-libmpx
    --disable-libstdcxx-backtrace
    --with-tune=native
    --with-arch=native
    --enable-linux-futex
    --with-glibc-version=2.41
    --with-build-config=bootstrap-lto
    --disable-werror
  )

  ###################################################################
  # Core compiler (bootstrap)                                       #
  ###################################################################
  cd "$srcdir/gcc-build"

  # Remove problematic flag forcibly injected by makepkg.conf
  CFLAGS=${CFLAGS/-Werror=format-security/}
  CXXFLAGS=${CXXFLAGS/-Werror=format-security/}

  "$srcdir/gcc/configure" \
    --build="$CHOST" \
    --host="$CHOST" \
    --target="$CHOST" \
    --enable-languages=c,c++,lto \
    --enable-bootstrap \
    "${_confflags[@]}"

  # *FLAGS handling – see FS#71777
  make -O STAGE1_CFLAGS="$CFLAGS" \
       BOOT_CFLAGS="$CFLAGS" \
       BOOT_CXXFLAGS="$CXXFLAGS" \
       BOOT_LDFLAGS="$LDFLAGS" \
       CFLAGS_FOR_TARGET="$CFLAGS" \
       CXXFLAGS_FOR_TARGET="$CXXFLAGS" \
       LDFLAGS_FOR_TARGET="$LDFLAGS" \
       profiledbootstrap

  ###################################################################
  # libgccjit (built separately to avoid --enable-host-shared on all)#
  ###################################################################
  cd "$srcdir/libgccjit-build"

  "$srcdir/gcc/configure" \
    --enable-languages=jit \
    --disable-bootstrap \
    --enable-host-shared \
    "${_confflags[@]}"

  make -O STAGE1_CFLAGS="$CFLAGS" \
       BOOT_CFLAGS="$CFLAGS" \
       BOOT_CXXFLAGS="$CXXFLAGS" \
       BOOT_LDFLAGS="$LDFLAGS" \
       CFLAGS_FOR_TARGET="$CFLAGS" \
       CXXFLAGS_FOR_TARGET="$CXXFLAGS" \
       LDFLAGS_FOR_TARGET="$LDFLAGS" \
       all-gcc

  # Provide built jit library to main tree
  cp -a gcc/libgccjit.so* ../gcc-build/gcc/
}

#######################################################################
# check                                                               #
#######################################################################
#check() {
#  cd "$srcdir/gcc-build"
  # Only run when user passed --check (heavy testsuite!)
#  make -k check || true
#}

#######################################################################
# Split packages                                                      #
#######################################################################
package_gcc-libs() {
  pkgdesc='Runtime libraries shipped by GCC'
  depends=('glibc>=2.37')
  options=(!emptydirs !strip)
  provides=(gcc-libs-multilib libgo.so libgfortran.so libgphobos.so
            libubsan.so libasan.so libtsan.so liblsan.so)
  replaces=(gcc-libs-multilib libgphobos)

  cd "$srcdir/gcc-build"

  make -C "$CHOST/libgcc" DESTDIR="$pkgdir" install-shared
  rm -f "$pkgdir/$_libdir/libgcc_eh.a"

  local _libs=(
    libatomic
    libgomp
    libitm
    libquadmath
    libsanitizer/{a,l,ub,t}san
    libstdc++-v3/src
    libvtv
  )
  for _lib in "${_libs[@]}"; do
    make -C "$CHOST/$_lib" DESTDIR="$pkgdir" install-toolexeclibLTLIBRARIES
  done

  make -C "$CHOST/libstdc++-v3/po" DESTDIR="$pkgdir" install

  for _lib in libgomp libitm libquadmath; do
    make -C "$CHOST/$_lib" DESTDIR="$pkgdir" install-info
  done

  # strip 32-bit libs (handled by lib32-gcc-libs)
  rm -rf "$pkgdir"/usr/lib32/

  # Runtime Library Exception
  install -Dm644 "$srcdir/gcc/COPYING.RUNTIME" \
    "$pkgdir/usr/share/licenses/gcc-libs/RUNTIME.LIBRARY.EXCEPTION"
}

#######################################################################
# Split packages                                                      #
#######################################################################

package_gcc() {
  pkgdesc='The GNU Compiler Collection – C and C++ front-ends'
  depends=("gcc-libs=$pkgver-$pkgrel" "binutils>=2.28" libmpc zstd libisl.so)
  groups=(base-devel)
  optdepends=('lib32-gcc-libs: for generating code for 32-bit ABI')
  provides=(gcc-multilib)
  replaces=(gcc-multilib)
  options=(!emptydirs staticlibs)

  cd "$srcdir/gcc-build"

  # ------------------------------------------------------------------
  # 1. core compiler binaries and helpers
  # ------------------------------------------------------------------
  make -C gcc DESTDIR="$pkgdir" \
       install-driver install-cpp install-gcc-ar \
       c++.install-common install-headers install-plugin install-lto-wrapper

  install -Dt "$pkgdir/usr/bin"  -m755 gcc/gcov{,-tool}
  install -Dt "$pkgdir/$_libdir" -m755 gcc/{cc1,cc1plus,collect2,lto1}

  # ------------------------------------------------------------------
  # 2. runtime libraries – 64-bit + 32-bit
  # ------------------------------------------------------------------
  make -C "$CHOST/libgcc"    DESTDIR="$pkgdir" install
  make -C "$CHOST/32/libgcc" DESTDIR="$pkgdir" install
  rm  -f "$pkgdir"/usr/lib{,32}/libgcc_s.so*

  local _stdc_targets=(
    "$CHOST/libstdc++-v3/src"
    "$CHOST/libstdc++-v3/include"
    "$CHOST/libstdc++-v3/libsupc++"
    "$CHOST/libstdc++-v3/python"
    "$CHOST/32/libstdc++-v3/src"
    "$CHOST/32/libstdc++-v3/include"
    "$CHOST/32/libstdc++-v3/libsupc++"
  )
  for _dir in "${_stdc_targets[@]}"; do
    make -C "$_dir" DESTDIR="$pkgdir" install
  done

  make DESTDIR="$pkgdir" install-libcc1

  # move GDB auto-load python helper (if it exists)
  shopt -s nullglob
  for _py in "$pkgdir"/usr/lib/libstdc++.so.6*-gdb.py; do
    install -d "$pkgdir/usr/share/gdb/auto-load/usr/lib"
    mv "$_py" "$pkgdir/usr/share/gdb/auto-load/usr/lib/"
  done
  shopt -u nullglob

  rm "$pkgdir"/usr/lib{,32}/libstdc++.so*

  # ------------------------------------------------------------------
  # 3. fixincludes, mkheaders, LTO plugin
  # ------------------------------------------------------------------
  make DESTDIR="$pkgdir" install-fixincludes
  make -C gcc DESTDIR="$pkgdir" install-mkheaders

  make -C lto-plugin DESTDIR="$pkgdir" install
  install -d "$pkgdir/usr/lib/bfd-plugins"
  ln -s "/$_libdir/liblto_plugin.so" "$pkgdir/usr/lib/bfd-plugins/"

  # ------------------------------------------------------------------
  # 4. headers from ancillary runtime libs
  # ------------------------------------------------------------------
  local _hdr_targets=(
    "$CHOST/libgomp"
    "$CHOST/libitm"
    "$CHOST/libsanitizer"
    "$CHOST/libsanitizer/asan"
    "$CHOST/libsanitizer/tsan"
    "$CHOST/libsanitizer/lsan"
    "$CHOST/32/libgomp"
    "$CHOST/32/libitm"
    "$CHOST/32/libsanitizer"
    "$CHOST/32/libsanitizer/asan"
  )
  for _t in "${_hdr_targets[@]}"; do
    make -C "$_t" DESTDIR="$pkgdir" install-nodist_toolexeclibHEADERS
  done

  # libquadmath uses a distinct target
  make -C "$CHOST/libquadmath"    DESTDIR="$pkgdir" install-nodist_libsubincludeHEADERS
  make -C "$CHOST/32/libquadmath" DESTDIR="$pkgdir" install-nodist_libsubincludeHEADERS

  # sanitizer public headers
  make -C "$CHOST/libsanitizer"    DESTDIR="$pkgdir" install-nodist_sanincludeHEADERS
  make -C "$CHOST/32/libsanitizer" DESTDIR="$pkgdir" install-nodist_sanincludeHEADERS

  # ------------------------------------------------------------------
  # 5. docs & localisation
  # ------------------------------------------------------------------
  make -C libcpp DESTDIR="$pkgdir" install
  make -C gcc    DESTDIR="$pkgdir" install-po

  # ------------------------------------------------------------------
  # 6. convenience symlinks & POSIX wrappers
  # ------------------------------------------------------------------
  ln -s gcc "$pkgdir/usr/bin/cc"
  install -Dm755 "$srcdir/c89" "$pkgdir/usr/bin/c89"
  install -Dm755 "$srcdir/c99" "$pkgdir/usr/bin/c99"

  # remove multilib duplicates provided by lib32-gcc-libs
  rm -f "$pkgdir/usr/lib32/lib{stdc++,gcc_s}.so"

  # ------------------------------------------------------------------
  # 7. byte-compile python helper modules
  # ------------------------------------------------------------------
  python    -m compileall "$pkgdir/usr/share/gcc-${pkgver%_*}"
  python -O -m compileall "$pkgdir/usr/share/gcc-${pkgver%_*}"

  # ------------------------------------------------------------------
  # 8. licence
  # ------------------------------------------------------------------
  install -d "$pkgdir/usr/share/licenses/gcc"
  ln -s /usr/share/licenses/gcc-libs/RUNTIME.LIBRARY.EXCEPTION \
        "$pkgdir/usr/share/licenses/gcc/"
}

package_lib32-gcc-libs() {
  pkgdesc='32-bit runtime libraries shipped by GCC'
  depends=('lib32-glibc>=2.37')
  provides=("lib32-gcc-libs=$pkgver-$pkgrel" libgo.so libgfortran.so libubsan.so libasan.so)
  groups=(multilib-devel)
  options=(!emptydirs !strip)

  cd "$srcdir/gcc-build"

  make -C "$CHOST/32/libgcc" DESTDIR="$pkgdir" install-shared
  rm -f "$pkgdir/$_libdir/32/libgcc_eh.a"

  local _libs32=(
    libatomic
    libgomp
    libitm
    libquadmath
    libsanitizer/{a,l,ub}san
    libstdc++-v3/src
    libvtv
  )
  for _l in "${_libs32[@]}"; do
    make -C "$CHOST/32/$_l" DESTDIR="$pkgdir" install-toolexeclibLTLIBRARIES
  done

  # strip 64-bit libs (already in gcc-libs)
  rm -rf "$pkgdir"/usr/lib

  # Runtime Library Exception
  install -Dm644 "$srcdir/gcc/COPYING.RUNTIME" \
    "$pkgdir/usr/share/licenses/lib32-gcc-libs/RUNTIME.LIBRARY.EXCEPTION"
}

package_lto-dump() {
  pkgdesc='Dump link-time-optimisation object files'
  depends=("gcc=$pkgver-$pkgrel" libisl.so)

  cd "$srcdir/gcc-build"
  make -C gcc DESTDIR="$pkgdir" lto.install-{common,info}

  install -d "$pkgdir/usr/share/licenses/lto-dump"
  ln -s /usr/share/licenses/gcc-libs/RUNTIME.LIBRARY.EXCEPTION \
        "$pkgdir/usr/share/licenses/lto-dump/"
}

package_libgccjit() {
  pkgdesc='Just-In-Time Compilation with GCC backend'
  depends=("gcc=$pkgver-$pkgrel")

  cd "$srcdir/gcc-build"
  make -C gcc DESTDIR="$pkgdir" jit.install-common jit.install-info

  install -d "$pkgdir/usr/share/licenses/libgccjit"
  ln -s /usr/share/licenses/gcc-libs/RUNTIME.LIBRARY.EXCEPTION \
        "$pkgdir/usr/share/licenses/libgccjit/"
}
