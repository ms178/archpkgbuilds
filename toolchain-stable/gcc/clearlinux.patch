If CXXFLAGS contains something unsupported by the build CXX, we see
build failures (e.g. using -fmacro-prefix-map for the target). Ensure
that CXXFLAGS_FOR_BUILD is passed where appropriate so that the correct
flags are used.

ChangeLog:

    * Makefile.in: Regenerate.
    * Makefile.tpl: Add missing CXXFLAGS_FOR_BUILD overrides

Signed-off-by: Ross Burton <ross.burton@arm.com>
---
 Makefile.in  | 2 ++
 Makefile.tpl | 2 ++
 2 files changed, 4 insertions(+)

diff --git a/Makefile.in b/Makefile.in
index 1919dfee829..6f96852ed80 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -176,6 +176,7 @@ BUILD_EXPORTS = \
 # built for the build system to override those in BASE_FLAGS_TO_PASS.
 EXTRA_BUILD_FLAGS = \
 	CFLAGS="$(CFLAGS_FOR_BUILD)" \
+	CXXFLAGS="$(CXXFLAGS_FOR_BUILD)" \
 	LDFLAGS="$(LDFLAGS_FOR_BUILD)"

 # This is the list of directories to built for the host system.
@@ -207,6 +208,7 @@ HOST_EXPORTS = \
 	CPP_FOR_BUILD="$(CPP_FOR_BUILD)"; export CPP_FOR_BUILD; \
 	CPPFLAGS_FOR_BUILD="$(CPPFLAGS_FOR_BUILD)"; export CPPFLAGS_FOR_BUILD; \
 	CXX_FOR_BUILD="$(CXX_FOR_BUILD)"; export CXX_FOR_BUILD; \
+	CXXFLAGS_FOR_BUILD="$(CXXFLAGS_FOR_BUILD)"; export CXXFLAGS_FOR_BUILD; \
 	DLLTOOL="$(DLLTOOL)"; export DLLTOOL; \
 	DSYMUTIL="$(DSYMUTIL)"; export DSYMUTIL; \
 	LD="$(LD)"; export LD; \
diff --git a/Makefile.tpl b/Makefile.tpl
index c7344558429..5876ad5aa5d 100644
--- a/Makefile.tpl
+++ b/Makefile.tpl
@@ -179,6 +179,7 @@ BUILD_EXPORTS = \
 # built for the build system to override those in BASE_FLAGS_TO_PASS.
 EXTRA_BUILD_FLAGS = \
 	CFLAGS="$(CFLAGS_FOR_BUILD)" \
+	CXXFLAGS="$(CXXFLAGS_FOR_BUILD)" \
 	LDFLAGS="$(LDFLAGS_FOR_BUILD)"

 # This is the list of directories to built for the host system.
@@ -210,6 +211,7 @@ HOST_EXPORTS = \
 	CPP_FOR_BUILD="$(CPP_FOR_BUILD)"; export CPP_FOR_BUILD; \
 	CPPFLAGS_FOR_BUILD="$(CPPFLAGS_FOR_BUILD)"; export CPPFLAGS_FOR_BUILD; \
 	CXX_FOR_BUILD="$(CXX_FOR_BUILD)"; export CXX_FOR_BUILD; \
+	CXXFLAGS_FOR_BUILD="$(CXXFLAGS_FOR_BUILD)"; export CXXFLAGS_FOR_BUILD; \
 	DLLTOOL="$(DLLTOOL)"; export DLLTOOL; \
 	DSYMUTIL="$(DSYMUTIL)"; export DSYMUTIL; \
 	LD="$(LD)"; export LD; \
--
2.34.1

From 28e56e571f903b9e5dd306081f45c393d0cd0947 Mon Sep 17 00:00:00 2001
From: William Douglas <william.douglas@intel.com>
Date: Tue, 5 Apr 2022 09:54:10 -0700
Subject: [PATCH] Make optimize increasing only

This patch is trying to catch the cases where we as OS pass -O3 and
then some package makefile overrides with -O2.

And let O0 go through as a special case.
---
 gcc/opts.cc | 10 ++++++++--
 1 file changed, 8 insertions(+), 2 deletions(-)

diff --git a/gcc/opts.cc b/gcc/opts.cc
index ef5fe9b11..1fc265e2f 100644
--- a/gcc/opts.cc
+++ b/gcc/opts.cc
@@ -713,7 +713,8 @@ default_options_optimization (struct gcc_options *opts,
 	case OPT_O:
 	  if (*opt->arg == '\0')
 	    {
-	      opts->x_optimize = 1;
+	      if (opts->x_optimize == 0)
+		opts->x_optimize = 1;
 	      opts->x_optimize_size = 0;
 	      opts->x_optimize_fast = 0;
 	      opts->x_optimize_debug = 0;
@@ -726,7 +727,12 @@ default_options_optimization (struct gcc_options *opts,
 			       "integer, %<g%>, %<s%>, %<z%> or %<fast%>");
 	      else
 		{
-		  opts->x_optimize = optimize_val;
+		  /* Keep higher opts value */
+		  if (optimize_val > opts->x_optimize)
+		    opts->x_optimize = optimize_val;
+		  /* But honors 0 opts  */
+		  if (optimize_val == 0)
+		    opts->x_optimize = optimize_val;
 		  if ((unsigned int) opts->x_optimize > 255)
 		    opts->x_optimize = 255;
 		  opts->x_optimize_size = 0;
--
2.35.1

From 3646952013763b947588dcdd2178cdd3fa011142 Mon Sep 17 00:00:00 2001
From: Francisco Boni Neto <boboniboni@gmail.com>
Date: Tue, 31 May 2022 05:10:08 -0300
Subject: [PATCH 2/8] vectorize

---
 gcc/opts.cc | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/gcc/opts.cc b/gcc/opts.cc
index 8c468dbe3..3916edfb9 100644
--- a/gcc/opts.cc
+++ b/gcc/opts.cc
@@ -644,7 +644,7 @@ static const struct default_options default_options_table[] =
     { OPT_LEVELS_2_PLUS, OPT_ftree_tail_merge, NULL, 1 },
     { OPT_LEVELS_2_PLUS, OPT_ftree_vrp, NULL, 1 },
     { OPT_LEVELS_2_PLUS, OPT_fvect_cost_model_, NULL,
-      VECT_COST_MODEL_VERY_CHEAP },
+      VECT_COST_MODEL_CHEAP },
     { OPT_LEVELS_2_PLUS, OPT_finline_functions, NULL, 1 },
     { OPT_LEVELS_2_PLUS, OPT_ftree_loop_distribute_patterns, NULL, 1 },

--
2.36.0

--- gcc-7.3.0/libgomp/config/linux/wait.h~	2017-01-01 12:07:43.000000000 +0000
+++ gcc-7.3.0/libgomp/config/linux/wait.h	2018-02-04 18:11:47.928564439 +0000
@@ -57,7 +57,10 @@
     if (__builtin_expect (__atomic_load_n (addr, MEMMODEL_RELAXED) != val, 0))
       return 0;
     else
-      cpu_relax ();
+      if (i < count/2)
+	       __asm__ __volatile__("nop\nnop\nnop\n": : :"memory");
+      else
+	      cpu_relax ();
   return 1;
 }

--- gcc-10.2.0/gcc/params.opt~	2020-07-23 06:35:17.000000000 +0000
+++ gcc-10.2.0/gcc/params.opt	2020-09-10 20:54:20.249498992 +0000
@@ -183,7 +183,7 @@
 The minimal estimated speedup allowing inliner to ignore inline-insns-single and inline-insns-auto.

 -param=inline-unit-growth=
-Common Joined UInteger Var(param_inline_unit_growth) Init(40) Optimization Param
+Common Joined UInteger Var(param_inline_unit_growth) Init(80) Optimization Param
 How much can given compilation unit grow because of the inlining (in percent).

 -param=integer-share-limit=
