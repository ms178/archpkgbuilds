pkgname=(gcc gcc-libs lib32-gcc-libs lto-dump libgccjit)
pkgver=14.2.1
_majorver=${pkgver%%.*}
_islver=0.26
pkgrel=7.1
pkgdesc='The GNU Compiler Collection'
arch=(x86_64)
license=(GPL LGPL FDL custom)
url='https://gcc.gnu.org'
makedepends=(
  binutils
  git
  lib32-glibc
  libmpc
  libxcrypt
  python
  zstd
  isl
)
options=(!emptydirs !lto)
_libdir=usr/lib/gcc/$CHOST/${pkgver%_*}
source=(
  "git+https://gcc.gnu.org/git/gcc.git#branch=releases/gcc-$_majorver"
  c89
  c99
  clearlinux.patch
)
sha256sums=(
  'SKIP'
  'de48736f6e4153f03d0a5d38ceb6c6fdb7f054e8f47ddd6af0a3dbf14f27b931'
  '2513c6d9984dd0a2058557bf00f06d8d5181734e41dcfe07be7ed86f2959622a'
  'c86372c207d174c0918d4aedf1cb79f7fc093649eb1ad8d9450dccc46849d308'
  '5f895579c097f061d97745979b7556d81098d4a7756b8ff85d75d90462d07172'
)

# Common function for stripping and license installation
_install_common() {
  local pkg="$1"

  # Standardized debug symbol stripping
  find "$pkgdir" -type f \( -executable -or -name "*.so*" \) \
    -exec file {} + | grep ELF | cut -d: -f1 | \
    xargs -r strip --strip-unneeded

  # Standardized license installation
  install -dm755 "$pkgdir/usr/share/licenses/$pkg"
  ln -sf /usr/share/licenses/gcc-libs/RUNTIME.LIBRARY.EXCEPTION \
    "$pkgdir/usr/share/licenses/$pkg/"
}

_patch() {
  echo -e "\E[1;33m Apply patch: ${1}\E[0m"
  patch --forward --strip=1 --input="${srcdir:?}/${1}"
}

prepare() {
  cd "gcc"

  # Do not run fixincludes
  sed -i 's@\./fixinc\.sh@-c true@' gcc/Makefile.in

  # Arch Linux installs x86_64 libraries /lib
  sed -i '/m64=/s/lib64/lib/' gcc/config/i386/t-linux64

  # Create build directories outside of srcdir
  mkdir -p "$srcdir/gcc-build"
  mkdir -p "$srcdir/libgccjit-build"

  _patch clearlinux.patch
}

build() {
  local _common_confflags=(
    --prefix=/usr
    --libdir=/usr/lib
    --libexecdir=/usr/lib
    --mandir=/usr/share/man
    --infodir=/usr/share/info
    --enable-default-hash-style=gnu
    --with-system-zlib
    --with-zstd
    --with-ppl
    --with-isl
    --enable-__cxa_atexit
    --disable-cet
    --disable-libssp
    --disable-libunwind-exceptions
    --disable-vtable-verify
    --disable-libmpx
    --disable-checking
    --enable-clocale=gnu
    --disable-default-pie
    --disable-default-ssp
    --enable-gnu-indirect-function
    --enable-gnu-unique-object
    --disable-link-serialization
    --enable-linker-build-id
    --enable-lto
    --enable-multilib
    --enable-plugin
    --enable-shared
    --enable-threads=posix
    --enable-libstdcxx-pch
    --disable-libstdcxx-backtrace
    --with-build-config=bootstrap-lto
    --disable-werror
  )

  cd "$srcdir/gcc-build"

  # Use a more conservative optimization level for Stage 1, potentially from cachyos-gcc-config
  local _bootstrap_cflags="-O2 -march=native"

  "$srcdir/gcc/configure" \
    --enable-languages=c,c++,lto \
    --enable-bootstrap-lto \
    "${_common_confflags[@]}"

  make -j$(nproc) \
    BOOT_CFLAGS="$CFLAGS" \
    BOOT_CXXFLAGS="$CXXFLAGS" \
    BOOT_LDFLAGS="$LDFLAGS" \
    CFLAGS_FOR_TARGET="$CFLAGS" \
    CXXFLAGS_FOR_TARGET="$CXXFLAGS" \
    LDFLAGS_FOR_TARGET="$LDFLAGS" \
    profiledbootstrap

  # Build libgccjit separately, with consistent flags
  cd "$srcdir/libgccjit-build"

  "$srcdir/gcc/configure" \
    --enable-languages=jit \
    --disable-bootstrap \
    --enable-host-shared \
    "${_common_confflags[@]}"

  make -j$(nproc) \
    BOOT_CFLAGS="$CFLAGS" \
    BOOT_CXXFLAGS="$CXXFLAGS" \
    BOOT_LDFLAGS="$LDFLAGS" \
    CFLAGS_FOR_TARGET="$CFLAGS" \
    CXXFLAGS_FOR_TARGET="$CXXFLAGS" \
    LDFLAGS_FOR_TARGET="$LDFLAGS" \
    all-gcc

  cp -a gcc/libgccjit.so* "$srcdir/gcc-build/gcc/"
}

package_gcc-libs() {
  pkgdesc='Runtime libraries shipped by GCC'
  depends=('glibc>=2.40')
  provides=("${pkgname}-multilib" libgo.so libgfortran.so libgphobos.so
            libubsan.so libasan.so libtsan.so liblsan.so)
  replaces=("${pkgname}-multilib" libgphobos)
  options=(!emptydirs !strip)

  cd "$srcdir/gcc-build"

  # Install shared libraries
  make -C $CHOST/libgcc DESTDIR="$pkgdir" install-shared
  rm -f "$pkgdir/$_libdir/libgcc_eh.a"

  # Explicitly handle OpenMP installation
  if [[ -d "$CHOST/libgomp" ]]; then
    # Install libgomp
    make -C $CHOST/libgomp DESTDIR="$pkgdir" install

    # Create required directories
    install -dm755 "$pkgdir"/usr/lib/gcc/$CHOST/${pkgver%_*}/include/

    # Find and copy OpenMP header
    if [[ -f "$srcdir/gcc-build/$CHOST/libgomp/omp.h" ]]; then
      cp -a "$srcdir/gcc-build/$CHOST/libgomp/omp.h" \
        "$pkgdir"/usr/lib/gcc/$CHOST/${pkgver%_*}/include/
    elif [[ -f "$srcdir/gcc/libgomp/omp.h.in" ]]; then
      # If we only have the template file, copy and rename it
      cp -a "$srcdir/gcc/libgomp/omp.h.in" \
        "$pkgdir"/usr/lib/gcc/$CHOST/${pkgver%_*}/include/omp.h
    fi

    # Find and copy libgomp spec file
    if [[ -f "$srcdir/gcc-build/$CHOST/libgomp/libgomp.spec" ]]; then
      cp -a "$srcdir/gcc-build/$CHOST/libgomp/libgomp.spec" \
        "$pkgdir"/usr/lib/gcc/$CHOST/${pkgver%_*}/
    elif [[ -f "$srcdir/gcc-build/gcc/libgomp.spec" ]]; then
      cp -a "$srcdir/gcc-build/gcc/libgomp.spec" \
        "$pkgdir"/usr/lib/gcc/$CHOST/${pkgver%_*}/
    fi

    # Ensure proper permissions
    chmod 644 "$pkgdir"/usr/lib/gcc/$CHOST/${pkgver%_*}/include/omp.h
    chmod 644 "$pkgdir"/usr/lib/gcc/$CHOST/${pkgver%_*}/libgomp.spec
  fi

  # Install other runtime libraries
  for lib in libatomic \
             libitm \
             libquadmath \
             libsanitizer/{a,l,ub,t}san \
             libstdc++-v3/src \
             libvtv; do
    if [[ -d "$CHOST/$lib" ]]; then
      make -C $CHOST/$lib DESTDIR="$pkgdir" install-toolexeclibLTLIBRARIES || \
      make -C $CHOST/$lib DESTDIR="$pkgdir" install || true
    fi
  done

  # Install Runtime Library Exception
  install -dm755 "$pkgdir/usr/share/licenses/gcc-libs"
  rm -f "$pkgdir/usr/share/licenses/gcc-libs/RUNTIME.LIBRARY.EXCEPTION"
  install -m644 "$srcdir/gcc/COPYING.RUNTIME" \
    "$pkgdir/usr/share/licenses/gcc-libs/RUNTIME.LIBRARY.EXCEPTION"

  # Remove files that conflict with lib32-gcc-libs
  rm -rf "$pkgdir"/usr/lib32/

  # Create required symlinks
  ln -sf /usr/lib/gcc/$CHOST/${pkgver%_*}/libgomp.spec "$pkgdir"/usr/lib/libgomp.spec
}

package_gcc() {
  pkgdesc="The GNU Compiler Collection - C and C++ frontends"
  depends=("gcc-libs=$pkgver-$pkgrel" "binutils>=2.28" libmpc zstd libisl.so)
  groups=(base-devel)
  optdepends=('lib32-gcc-libs: for generating code for 32-bit ABI')
  provides=("${pkgname}-multilib")
  replaces=("${pkgname}-multilib")
  options=(!emptydirs)

  cd "$srcdir/gcc-build"

  # Core compiler installation
  local _core_components=(
    'gcc install-driver'
    'gcc install-cpp'
    'gcc install-gcc-ar'
    'gcc install-headers'
    'gcc install-plugin'
    'gcc install-lto-wrapper'
  )

  for comp in "${_core_components[@]}"; do
    make -C "${comp% *}" DESTDIR="$pkgdir" "${comp#* }"
  done

  # Install C++ components
  make -C $CHOST/libstdc++-v3 DESTDIR="$pkgdir" install
  make -C gcc DESTDIR="$pkgdir" install-common

  # Install g++ from xg++
  install -Dm755 "$srcdir/gcc-build/gcc/xg++" "$pkgdir"/usr/bin/g++

  # Install cc1plus if it exists
  if [ -f "$srcdir/gcc-build/gcc/cc1plus" ]; then
    install -Dm755 "$srcdir/gcc-build/gcc/cc1plus" "$pkgdir"/${_libdir}/cc1plus
  fi

  # Create necessary symlinks with force flag
  ln -sf g++ "$pkgdir"/usr/bin/c++
  ln -sf g++ "$pkgdir"/usr/bin/${CHOST}-g++
  ln -sf g++ "$pkgdir"/usr/bin/${CHOST}-c++

  # Install additional tools
  local _tools=(
    gcc/gcov
    gcc/gcov-tool
    gcc/cc1
    gcc/cc1plus
    gcc/collect2
    gcc/lto1
  )

  for tool in "${_tools[@]}"; do
    install -Dm755 "$tool" "$pkgdir/${_libdir}/$(basename $tool)"
  done

  # Install libraries and headers
  local _lib_components=(
    "$CHOST/libgcc"
    "$CHOST/32/libgcc"
    "$CHOST/libstdc++-v3/src"
    "$CHOST/libstdc++-v3/include"
    "$CHOST/libstdc++-v3/libsupc++"
    "$CHOST/libstdc++-v3/python"
    "$CHOST/32/libstdc++-v3/src"
    "$CHOST/32/libstdc++-v3/include"
    "$CHOST/32/libstdc++-v3/libsupc++"
  )

  for comp in "${_lib_components[@]}"; do
    make -C "$comp" DESTDIR="$pkgdir" install
  done

  # Handle special cases
  make DESTDIR="$pkgdir" install-libcc1
  make -C gcc DESTDIR="$pkgdir" install-mkheaders
  make -C lto-plugin DESTDIR="$pkgdir" install

  # Install gdb files
  install -dm755 "$pkgdir/usr/share/gdb/auto-load/usr/lib"
  mv "$pkgdir"/usr/lib/libstdc++.so.6.*-gdb.py \
    "$pkgdir/usr/share/gdb/auto-load/usr/lib/"

  # Setup symlinks
  ln -s gcc "$pkgdir"/usr/bin/cc
  install -Dm755 "$srcdir/c89" "$pkgdir/usr/bin/c89"
  install -Dm755 "$srcdir/c99" "$pkgdir/usr/bin/c99"

  # LTO plugin symlink
  install -dm755 "$pkgdir"/usr/lib/bfd-plugins/
  ln -s /${_libdir}/liblto_plugin.so \
    "$pkgdir/usr/lib/bfd-plugins/"

  # Cleanup
  rm -f "$pkgdir"/usr/lib32/lib{stdc++,gcc_s}.so
  rm "$pkgdir"/usr/lib{,32}/libstdc++.so*

  _install_common gcc
}

package_lib32-gcc-libs() {
  pkgdesc='32-bit runtime libraries shipped by GCC'
  depends=('lib32-glibc>=2.37')
  provides=("lib32-gcc-libs=$pkgver-$pkgrel" libgo.so libgfortran.so libubsan.so libasan.so)
  groups=(multilib-devel)
  options=(!emptydirs !strip)

  cd "$srcdir/gcc-build"

  # Install shared libraries
  make -C $CHOST/32/libgcc DESTDIR="$pkgdir" install-shared
  rm -f "$pkgdir/$_libdir/32/libgcc_eh.a"

  # Install 32-bit runtime libraries
  for lib in libatomic \
             libgomp \
             libitm \
             libquadmath \
             libstdc++-v3/src \
             libvtv; do
    if [[ -d "$CHOST/32/$lib" ]]; then
      make -C $CHOST/32/$lib DESTDIR="$pkgdir" install-toolexeclibLTLIBRARIES || \
      make -C $CHOST/32/$lib DESTDIR="$pkgdir" install || true
    fi
  done

  # Install sanitizer libraries separately
  for lib in asan lsan ubsan; do
    if [[ -d "$CHOST/32/libsanitizer/$lib" ]]; then
      make -C $CHOST/32/libsanitizer/$lib DESTDIR="$pkgdir" install-toolexeclibLTLIBRARIES || \
      make -C $CHOST/32/libsanitizer/$lib DESTDIR="$pkgdir" install || true
    fi
  done

  # Remove files that conflict with gcc-libs
  rm -rf "$pkgdir"/usr/lib

  # Install Runtime Library Exception
  install -dm755 "$pkgdir/usr/share/licenses/lib32-gcc-libs"
  rm -f "$pkgdir/usr/share/licenses/lib32-gcc-libs/RUNTIME.LIBRARY.EXCEPTION"
  install -m644 "$srcdir/gcc/COPYING.RUNTIME" \
    "$pkgdir/usr/share/licenses/lib32-gcc-libs/RUNTIME.LIBRARY.EXCEPTION"
}

package_lto-dump() {
  pkgdesc="Dump link time optimization object files"
  depends=("gcc=$pkgver-$pkgrel" libisl.so)
  options=(!emptydirs)

  cd "$srcdir/gcc-build"

  # Install LTO dump components
  local _lto_components=(
    'gcc/lto.install-common'
    'gcc/lto.install-info'
  )

  for comp in "${_lto_components[@]}"; do
    make -C ${comp%/*} DESTDIR="$pkgdir" ${comp##*/}
  done

  _install_common lto-dump
}

package_libgccjit() {
  pkgdesc="Just-In-Time Compilation with GCC backend"
  depends=("gcc=$pkgver-$pkgrel")
  options=(!emptydirs)

  cd "$srcdir/gcc-build"

  # Install JIT components
  local _jit_components=(
    'gcc/jit.install-common'
    'gcc/jit.install-info'
  )

  for comp in "${_jit_components[@]}"; do
    make -C ${comp%/*} DESTDIR="$pkgdir" ${comp##*/}
  done

  _install_common libgccjit
}
