If CXXFLAGS contains something unsupported by the build CXX, we see
build failures (e.g. using -fmacro-prefix-map for the target). Ensure
that CXXFLAGS_FOR_BUILD is passed where appropriate so that the correct
flags are used.

ChangeLog:

    * Makefile.in: Regenerate.
    * Makefile.tpl: Add missing CXXFLAGS_FOR_BUILD overrides

Signed-off-by: Ross Burton <ross.burton@arm.com>
---
 Makefile.in  | 2 ++
 Makefile.tpl | 2 ++
 2 files changed, 4 insertions(+)

diff --git a/Makefile.in b/Makefile.in
index 1919dfee829..6f96852ed80 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -176,6 +176,7 @@ BUILD_EXPORTS = \
 # built for the build system to override those in BASE_FLAGS_TO_PASS.
 EXTRA_BUILD_FLAGS = \
 	CFLAGS="$(CFLAGS_FOR_BUILD)" \
+	CXXFLAGS="$(CXXFLAGS_FOR_BUILD)" \
 	LDFLAGS="$(LDFLAGS_FOR_BUILD)"

 # This is the list of directories to built for the host system.
@@ -207,6 +208,7 @@ HOST_EXPORTS = \
 	CPP_FOR_BUILD="$(CPP_FOR_BUILD)"; export CPP_FOR_BUILD; \
 	CPPFLAGS_FOR_BUILD="$(CPPFLAGS_FOR_BUILD)"; export CPPFLAGS_FOR_BUILD; \
 	CXX_FOR_BUILD="$(CXX_FOR_BUILD)"; export CXX_FOR_BUILD; \
+	CXXFLAGS_FOR_BUILD="$(CXXFLAGS_FOR_BUILD)"; export CXXFLAGS_FOR_BUILD; \
 	DLLTOOL="$(DLLTOOL)"; export DLLTOOL; \
 	DSYMUTIL="$(DSYMUTIL)"; export DSYMUTIL; \
 	LD="$(LD)"; export LD; \
diff --git a/Makefile.tpl b/Makefile.tpl
index c7344558429..5876ad5aa5d 100644
--- a/Makefile.tpl
+++ b/Makefile.tpl
@@ -179,6 +179,7 @@ BUILD_EXPORTS = \
 # built for the build system to override those in BASE_FLAGS_TO_PASS.
 EXTRA_BUILD_FLAGS = \
 	CFLAGS="$(CFLAGS_FOR_BUILD)" \
+	CXXFLAGS="$(CXXFLAGS_FOR_BUILD)" \
 	LDFLAGS="$(LDFLAGS_FOR_BUILD)"

 # This is the list of directories to built for the host system.
@@ -210,6 +211,7 @@ HOST_EXPORTS = \
 	CPP_FOR_BUILD="$(CPP_FOR_BUILD)"; export CPP_FOR_BUILD; \
 	CPPFLAGS_FOR_BUILD="$(CPPFLAGS_FOR_BUILD)"; export CPPFLAGS_FOR_BUILD; \
 	CXX_FOR_BUILD="$(CXX_FOR_BUILD)"; export CXX_FOR_BUILD; \
+	CXXFLAGS_FOR_BUILD="$(CXXFLAGS_FOR_BUILD)"; export CXXFLAGS_FOR_BUILD; \
 	DLLTOOL="$(DLLTOOL)"; export DLLTOOL; \
 	DSYMUTIL="$(DSYMUTIL)"; export DSYMUTIL; \
 	LD="$(LD)"; export LD; \
--
2.34.1

From 28e56e571f903b9e5dd306081f45c393d0cd0947 Mon Sep 17 00:00:00 2001
From: William Douglas <william.douglas@intel.com>
Date: Tue, 5 Apr 2022 09:54:10 -0700
Subject: [PATCH] Make optimize increasing only

This patch is trying to catch the cases where we as OS pass -O3 and
then some package makefile overrides with -O2.

And let O0 go through as a special case.
---
 gcc/opts.cc | 10 ++++++++--
 1 file changed, 8 insertions(+), 2 deletions(-)

diff --git a/gcc/opts.cc b/gcc/opts.cc
index ef5fe9b11..1fc265e2f 100644
--- a/gcc/opts.cc
+++ b/gcc/opts.cc
@@ -713,7 +713,8 @@ default_options_optimization (struct gcc_options *opts,
 	case OPT_O:
 	  if (*opt->arg == '\0')
 	    {
-	      opts->x_optimize = 1;
+	      if (opts->x_optimize == 0)
+		opts->x_optimize = 1;
 	      opts->x_optimize_size = 0;
 	      opts->x_optimize_fast = 0;
 	      opts->x_optimize_debug = 0;
@@ -726,7 +727,12 @@ default_options_optimization (struct gcc_options *opts,
 			       "integer, %<g%>, %<s%>, %<z%> or %<fast%>");
 	      else
 		{
-		  opts->x_optimize = optimize_val;
+		  /* Keep higher opts value */
+		  if (optimize_val > opts->x_optimize)
+		    opts->x_optimize = optimize_val;
+		  /* But honors 0 opts  */
+		  if (optimize_val == 0)
+		    opts->x_optimize = optimize_val;
 		  if ((unsigned int) opts->x_optimize > 255)
 		    opts->x_optimize = 255;
 		  opts->x_optimize_size = 0;
--
2.35.1

From 3646952013763b947588dcdd2178cdd3fa011142 Mon Sep 17 00:00:00 2001
From: Francisco Boni Neto <boboniboni@gmail.com>
Date: Tue, 31 May 2022 05:10:08 -0300
Subject: [PATCH 2/8] vectorize

---
 gcc/opts.cc | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/gcc/opts.cc b/gcc/opts.cc
index 8c468dbe3..3916edfb9 100644
--- a/gcc/opts.cc
+++ b/gcc/opts.cc
@@ -644,7 +644,7 @@ static const struct default_options default_options_table[] =
     { OPT_LEVELS_2_PLUS, OPT_ftree_tail_merge, NULL, 1 },
     { OPT_LEVELS_2_PLUS, OPT_ftree_vrp, NULL, 1 },
     { OPT_LEVELS_2_PLUS, OPT_fvect_cost_model_, NULL,
-      VECT_COST_MODEL_VERY_CHEAP },
+      VECT_COST_MODEL_CHEAP },
     { OPT_LEVELS_2_PLUS, OPT_finline_functions, NULL, 1 },
     { OPT_LEVELS_2_PLUS, OPT_ftree_loop_distribute_patterns, NULL, 1 },

--
2.36.0

--- gcc-7.3.0/libgomp/config/linux/wait.h~	2017-01-01 12:07:43.000000000 +0000
+++ gcc-7.3.0/libgomp/config/linux/wait.h	2018-02-04 18:11:47.928564439 +0000
@@ -57,7 +57,10 @@
     if (__builtin_expect (__atomic_load_n (addr, MEMMODEL_RELAXED) != val, 0))
       return 0;
     else
-      cpu_relax ();
+      if (i < count/2)
+	       __asm__ __volatile__("nop\nnop\nnop\n": : :"memory");
+      else
+	      cpu_relax ();
   return 1;
 }

From: William Douglas <william.douglas@intel.com>
Date: Tue, 5 Apr 2022 10:15:11 -0700
Subject: [PATCH] Always use -z now when linking with -pie

Patch inspired by Ubuntu.
---
 gcc/gcc.cc | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/gcc/gcc.cc b/gcc/gcc.cc
index a4d863ca4..06af6e94d 100644
--- a/gcc/gcc.cc
+++ b/gcc/gcc.cc
@@ -1040,7 +1040,7 @@ proper position among the other output files.  */
 #ifndef LINK_PIE_SPEC
 #ifdef HAVE_LD_PIE
 #ifndef LD_PIE_SPEC
-#define LD_PIE_SPEC "-pie"
+#define LD_PIE_SPEC "-pie -z now"
 #endif
 #else
 #define LD_PIE_SPEC ""
--
2.35.1

From 948a64e9e77164a7a16ffc2e66d81bb4d8130b13 Mon Sep 17 00:00:00 2001
From: William Douglas <william.douglas@intel.com>
Date: Tue, 5 Apr 2022 10:12:58 -0700
Subject: [PATCH] Ignore -Werror if ${GCC_IGNORE_WERROR} envvar set

-Werror should be set only by developers, not consumers of a project's
source code.  By providing this environment variable, the package build
system can signal that -Werror should never be used without the need to
patch each individual package build system.
---
 gcc/opts.cc | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/gcc/opts.cc b/gcc/opts.cc
index 1fc265e2f..97cb4caec 100644
--- a/gcc/opts.cc
+++ b/gcc/opts.cc
@@ -2665,7 +2665,10 @@ common_handle_option (struct gcc_options *opts,
       break;

     case OPT_Werror:
-      dc->warning_as_error_requested = value;
+      if (getenv("GCC_IGNORE_WERROR"))
+	dc->warning_as_error_requested = false;
+      else
+	dc->warning_as_error_requested = value;
       break;

     case OPT_Werror_:
--
2.35.1

--- gcc-10.2.0/gcc/params.opt~	2020-07-23 06:35:17.000000000 +0000
+++ gcc-10.2.0/gcc/params.opt	2020-09-10 20:54:20.249498992 +0000
@@ -183,7 +183,7 @@
 The minimal estimated speedup allowing inliner to ignore inline-insns-single and inline-insns-auto.

 -param=inline-unit-growth=
-Common Joined UInteger Var(param_inline_unit_growth) Init(40) Optimization Param
+Common Joined UInteger Var(param_inline_unit_growth) Init(80) Optimization Param
 How much can given compilation unit grow because of the inlining (in percent).

 -param=integer-share-limit=

From ecb8284b8bec4f9e025d21177efbe13f64f6f11b Mon Sep 17 00:00:00 2001
From: "H.J. Lu" <hjl.tools@gmail.com>
Date: Tue, 26 Apr 2022 11:08:55 -0700
Subject: [PATCH] x86: Always generate branch hint

For -mtune-ctrl=branch_prediction_hints, always generate branch hint for
conditional branches.

gcc/

	* config/i386/i386.cc (ix86_print_operand): Always generate
	branch hint for conditional branches.

gcc/testsuite/

	* gcc.target/i386/branch-hint-1.c: New test.
---
 gcc/config/i386/i386.cc                       | 26 +++++--------------
 gcc/testsuite/gcc.target/i386/branch-hint-1.c | 16 ++++++++++++
 2 files changed, 23 insertions(+), 19 deletions(-)
 create mode 100644 gcc/testsuite/gcc.target/i386/branch-hint-1.c

diff --git a/gcc/config/i386/i386.cc b/gcc/config/i386/i386.cc
index 52040da8c47f..8246576f7b82 100644
--- a/gcc/config/i386/i386.cc
+++ b/gcc/config/i386/i386.cc
@@ -13555,25 +13555,13 @@ ix86_print_operand (FILE *file, rtx x, int code)
 		int pred_val = profile_probability::from_reg_br_prob_note
 				 (XINT (x, 0)).to_reg_br_prob_base ();

-		if (pred_val < REG_BR_PROB_BASE * 45 / 100
-		    || pred_val > REG_BR_PROB_BASE * 55 / 100)
-		  {
-		    bool taken = pred_val > REG_BR_PROB_BASE / 2;
-		    bool cputaken
-		      = final_forward_branch_p (current_output_insn) == 0;
-
-		    /* Emit hints only in the case default branch prediction
-		       heuristics would fail.  */
-		    if (taken != cputaken)
-		      {
-			/* We use 3e (DS) prefix for taken branches and
-			   2e (CS) prefix for not taken branches.  */
-			if (taken)
-			  fputs ("ds ; ", file);
-			else
-			  fputs ("cs ; ", file);
-		      }
-		  }
+		bool taken = pred_val > REG_BR_PROB_BASE / 2;
+		/* We use 3e (DS) prefix for taken branches and
+		   2e (CS) prefix for not taken branches.  */
+		if (taken)
+		  fputs ("ds ; ", file);
+		else
+		  fputs ("cs ; ", file);
 	      }
 	    return;
 	  }
diff --git a/gcc/testsuite/gcc.target/i386/branch-hint-1.c b/gcc/testsuite/gcc.target/i386/branch-hint-1.c
new file mode 100644
index 000000000000..03dd83b05af0
--- /dev/null
+++ b/gcc/testsuite/gcc.target/i386/branch-hint-1.c
@@ -0,0 +1,16 @@
+/* { dg-do compile } */
+/* { dg-options "-O2 -dp -mtune-ctrl=branch_prediction_hints" } */
+
+int
+main (int argc, char** argv)
+{
+  if (argc == 1)
+    return 1;
+
+  if (argc == 2)
+    return 2;
+
+  return 3;
+}
+
+/* { dg-final { scan-assembler-not "\tj\[a-z\]\+\[ \\t\]+.* \\*jcc" } } */

--- gcc-12.1.0/libcpp/files.cc~	2022-05-06 07:30:59.000000000 +0000
+++ gcc-12.1.0/libcpp/files.cc	2022-11-06 23:44:15.532615214 +0000
@@ -402,6 +402,7 @@
 #endif
 	 )
 	{
+#if 0
 	  char * canonical_path = maybe_shorter_path (path);
 	  if (canonical_path)
 	    {
@@ -410,6 +411,7 @@
 	      free (path);
 	      path = canonical_path;
 	    }
+#endif
 	}

       hv = htab_hash_string (path);
--- gcc-12.2.0/libgcc/gthr-posix.h~	2022-08-19 08:09:54.000000000 +0000
+++ gcc-12.2.0/libgcc/gthr-posix.h	2023-04-18 21:58:41.232699356 +0000
@@ -56,7 +56,7 @@
    in gthr.h for details. */
 #define __GTHREAD_HAS_COND	1

-#define __GTHREAD_MUTEX_INIT PTHREAD_MUTEX_INITIALIZER
+#define __GTHREAD_MUTEX_INIT PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 #define __GTHREAD_MUTEX_INIT_FUNCTION __gthread_mutex_init_function
 #define __GTHREAD_ONCE_INIT PTHREAD_ONCE_INIT
 #if defined(PTHREAD_RECURSIVE_MUTEX_INITIALIZER)
