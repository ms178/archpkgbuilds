pkgbase=dbus
pkgname=(
  dbus
  dbus-daemon-units
)
pkgver=1.16.2
pkgrel=3.1
pkgdesc="Freedesktop.org message bus system"
url="https://www.freedesktop.org/wiki/Software/dbus/"
arch=(x86_64)
license=("AFL-2.1 OR GPL-2.0-or-later")
options=(!strip)
depends=(
  audit
  expat
  glibc
  libcap-ng
  systemd-libs
)
makedepends=(
  docbook-xsl
  doxygen
  glib2
  mallard-ducktype
  meson
  python
  qt5-tools
  systemd
  xmlto
  llvm              # Required for BOLT
  yelp-tools
)
source=(
  https://dbus.freedesktop.org/releases/dbus/dbus-$pkgver.tar.xz{,.asc}
  0001-Arch-Linux-tweaks.patch
  dbus-reload.hook
)
b2sums=('a5a3ebe777c1c0296ba7240f9ed29ad329a6578a05baf10a469ce8c7d243791d35aca42a70d04cdd88feea238d081c3c8b0db444df24abcf7ce5ffe9187a0440'
        'SKIP'
        '3896c994aa7afde605aebb88b7123f33c578ad1ede2dc3e76982dbc021d6994874c5c735d31a66c7b3e9d3cba77ebbba7db05013716bbac14948618b1464e4a8'
        '05ab81bf72e7cf45ad943f5b84eaecef4f06bed94979c579a3e23134cbabd7ea6f65fa9ac252f8b43ceb4a3295e0d2325f06560a044fe7ddf125fc30dfc2b7e2')
validpgpkeys=(
  DA98F25C0871C49A59EAFF2C4DE8FF2A63C7CC90  # Simon McVittie <simon.mcvittie@collabora.co.uk>
)

prepare() {
  cd dbus-$pkgver
  patch -Np1 -i ../0001-Arch-Linux-tweaks.patch

  # Create directories for profiles and BOLT data
  mkdir -p "$srcdir/pgo_standard"
  mkdir -p "$srcdir/pgo_cs"
  mkdir -p "$srcdir/bolt_profile"
}

build() {
  local meson_options=(
    -D apparmor=disabled
    -D dbus_user=dbus
    -D kqueue=disabled
    -D launchd=disabled
    -D relocation=disabled
    -D selinux=disabled
    -D x11_autolaunch=disabled
    -D doxygen_docs=disabled
    -D python.bytecompile=2
  )

  # Store original flags
  CFLAGS_ORIG="$CFLAGS"
  CXXFLAGS_ORIG="$CXXFLAGS"
  LDFLAGS_ORIG="$LDFLAGS"

  # --- Stage 1: Standard PGO - First round with standard instrumentation ---
  echo "Stage 1: Building with standard PGO instrumentation..."

  # Add standard PGO instrumentation flags
  CFLAGS+=" -fprofile-generate=$srcdir/pgo_standard -g3 -fno-omit-frame-pointer -mllvm -vp-counters-per-site=10 -mllvm -runtime-counter-relocation -mllvm -enable-value-profiling"
  CXXFLAGS+=" -fprofile-generate=$srcdir/pgo_standard -g3 -fno-omit-frame-pointer -mllvm -vp-counters-per-site=10 -mllvm -runtime-counter-relocation -mllvm -enable-value-profiling"
  LDFLAGS+=" -fprofile-generate=$srcdir/pgo_standard -g3 -fno-omit-frame-pointer -mllvm -vp-counters-per-site=10 -mllvm -runtime-counter-relocation -mllvm -enable-value-profiling"

  # Configure and build with standard instrumentation
  arch-meson dbus-$pkgver build-pgo1 "${meson_options[@]}" \
    -D b_ndebug=false \
    -D b_pie=false \
    -D c_std=gnu2x \
    -D cpp_std=gnu++2a \
    -D b_lto=true \
    --buildtype=debug \
    --wrap-mode=nofallback

  meson compile -C build-pgo1

  # Run tests to generate profile data
  echo "Running tests to generate standard PGO profile data..."
  meson test -C build-pgo1 || echo "Some tests failed, but continuing anyway"

  # Run additional workloads if possible for better coverage
  if [ -x "$srcdir/build-pgo1/bus/dbus-daemon" ]; then
    "$srcdir/build-pgo1/bus/dbus-daemon" --version || true
    "$srcdir/build-pgo1/bus/dbus-daemon" --help || true
  fi

  # Merge standard profile data
  echo "Merging standard PGO profile data..."
  llvm-profdata merge -output="$srcdir/standard.profdata" "$srcdir/pgo_standard"

  # --- Stage 2: Context-Sensitive PGO - Second round using first profile ---
  echo "Stage 2: Building with context-sensitive PGO instrumentation..."

  # Update flags for CS-PGO instrumentation, using standard profile data
  CFLAGS="${CFLAGS_ORIG} -fprofile-use=$srcdir/standard.profdata -fcs-profile-generate=$srcdir/pgo_cs -g3 -fno-omit-frame-pointer"
  CXXFLAGS="${CXXFLAGS_ORIG} -fprofile-use=$srcdir/standard.profdata -fcs-profile-generate=$srcdir/pgo_cs -g3 -fno-omit-frame-pointer"
  LDFLAGS="${LDFLAGS_ORIG} -fprofile-use=$srcdir/standard.profdata -fcs-profile-generate=$srcdir/pgo_cs -g3 -fno-omit-frame-pointer"

  # Configure and build with CS-PGO instrumentation
  arch-meson dbus-$pkgver build-pgo2 "${meson_options[@]}" \
    -D b_ndebug=false \
    -D b_pie=false \
    -D c_std=gnu2x \
    -D cpp_std=gnu++2a \
    -D b_lto=true \
    --buildtype=debug \
    --wrap-mode=nofallback

  meson compile -C build-pgo2

  # Run tests to generate context-sensitive profile data
  echo "Running tests to generate context-sensitive PGO profile data..."
  meson test -C build-pgo2 || echo "Some tests failed, but continuing anyway"

  # Run the same additional workloads as before
  if [ -x "$srcdir/build-pgo2/bus/dbus-daemon" ]; then
    "$srcdir/build-pgo2/bus/dbus-daemon" --version || true
    "$srcdir/build-pgo2/bus/dbus-daemon" --help || true
  fi

  # Merge context-sensitive profile with standard profile
  echo "Merging context-sensitive profile with standard profile..."
  llvm-profdata merge -output="$srcdir/merged.profdata" "$srcdir/pgo_cs" "$srcdir/standard.profdata"

  # --- Stage 3: Final build with merged profile data ---
  echo "Stage 3: Building final version with merged profile data..."

  # Update flags for the final optimized build
  CFLAGS="${CFLAGS_ORIG} -fprofile-use=$srcdir/merged.profdata"
  CXXFLAGS="${CXXFLAGS_ORIG} -fprofile-use=$srcdir/merged.profdata"
  LDFLAGS="${LDFLAGS_ORIG} -fprofile-use=$srcdir/merged.profdata -Wl,--emit-relocs"

  # Configure and build with final optimizations
  arch-meson dbus-$pkgver build "${meson_options[@]}" \
    -D b_ndebug=true \
    -D b_pie=false \
    -D c_std=gnu2x \
    -D cpp_std=gnu++2a \
    -D b_lto=true \
    --buildtype=release \
    --wrap-mode=nofallback

  meson compile -C build

  # --- Stage 4: Instrument for BOLT ---
  echo "Creating instrumented binaries for BOLT..."

  # Find dbus-daemon and libdbus paths
  DBUS_DAEMON_PATH="$srcdir/build/bus/dbus-daemon"
  LIBDBUS_PATH=$(find "$srcdir/build" -name 'libdbus-1.so.*' -type f ! -name '*.symbols' -print | sort -V | tail -n 1)

  # Array of binaries to instrument
  local binaries=(
    "$DBUS_DAEMON_PATH"
    "$LIBDBUS_PATH"
  )

  # Clean up build directory
  echo "Cleaning up any previous instrumentation files..."
  rm -f "$srcdir/build/bus/"*.orig
  rm -f "$srcdir/build/bus/"*.inst
  rm -f "$srcdir/build/bus/"*.bolt
  rm -f "$srcdir/build/dbus/"*.orig
  rm -f "$srcdir/build/dbus/"*.inst
  rm -f "$srcdir/build/dbus/"*.bolt

  # Ensure binaries exist and are executable
  for binary in "${binaries[@]}"; do
    # Skip if binary is a symlink
    if [ -L "$binary" ]; then
      echo "Skipping symlink: $binary"
      continue
    fi

    if [ ! -f "$binary" ]; then
      echo "Warning: Skipping missing binary: $binary"
      continue
    fi

    # Debug binary information
    echo "Processing binary: $binary"
    echo "Binary type: $(file "$binary")"

    # Check if binary has already been processed by BOLT
    if readelf -S "$binary" 2>/dev/null | grep -q "__bolt_runtime_start" || file "$binary" | grep -q "BOLT"; then
      echo "Warning: Skipping already processed binary: $binary"
      continue
    fi

    # Backup original binary if not already backed up
    if [ ! -f "$binary.orig" ]; then
      cp "$binary" "$binary.orig"
    else
      cp "$binary.orig" "$binary"
    fi

    # Instrument binary
    echo "Instrumenting binary: $binary"
    llvm-bolt "$binary" \
      --instrument \
      --instrumentation-file-append-pid \
      --skip-funcs=.text/1 \
      --instrumentation-file="$srcdir/bolt_profile/prof.fdata" \
      -o "$binary.inst"
    mv "$binary.inst" "$binary"
  done

  # Run tests with instrumented binaries to generate BOLT profile data
  echo "Running tests with instrumented binaries for BOLT..."
  meson test -C build || echo "Some tests failed, but continuing anyway"

  # Run the same additional workloads for consistency
  if [ -x "$srcdir/build/bus/dbus-daemon" ]; then
    "$srcdir/build/bus/dbus-daemon" --version || true
    "$srcdir/build/bus/dbus-daemon" --help || true
  fi

  # Verify BOLT profile data files
  echo "Looking for BOLT profile data files..."
  ls -la "$srcdir/bolt_profile/"

  if ! ls "$srcdir/bolt_profile/prof.fdata"* >/dev/null 2>&1; then
    echo "Warning: No BOLT profile data files found. Skipping BOLT optimization."
    return 0
  fi

  echo "Merging BOLT profile data files..."
  merge-fdata "$srcdir/bolt_profile/prof.fdata"* > "$srcdir/bolt_profile/merged.fdata"

  # Verify merged BOLT profile data file size
  if [ ! -s "$srcdir/bolt_profile/merged.fdata" ]; then
    echo "Error: Merged BOLT profile data file is empty!"
    return 1
  fi

  # --- Stage 5: Optimize with BOLT ---
  echo "Optimizing with BOLT..."

  local bolt_options=(
    --data "$srcdir/bolt_profile/merged.fdata"
    --dyno-stats
    --lite=false
    --eliminate-unreachable
    --frame-opt=all
    --icf=all
    --jump-tables=aggressive
    --min-branch-clusters
    --stoke
    --sctc-mode=always
    --plt=all
    --hot-data
    --hugify
    --frame-opt-rm-stores
    --peepholes=all
    --infer-stale-profile=1
    --x86-strip-redundant-address-size
    --indirect-call-promotion=all
    --reorder-blocks=ext-tsp
    --reorder-functions=cdsort
    --split-all-cold
    --split-eh
    --split-functions
    --split-strategy=cdsplit
    --use-gnu-stack
    --align-functions=32
    --skip-funcs=.text/1
  )

  # Create optimized binary directory
  mkdir -p "$srcdir/build/bolt"

  # Optimize binaries
  for binary in "${binaries[@]}"; do
    if [ -L "$binary" ]; then
      echo "Skipping symlink: $binary"
      continue
    fi

    binary_name=$(basename "$binary")
    if [ -f "${binary}.orig" ]; then
      llvm-bolt "${binary}.orig" \
        "${bolt_options[@]}" \
        -o "$srcdir/build/bolt/${binary_name}.bolt" || \
        echo "Warning: BOLT optimization failed for ${binary}"
    else
      echo "Warning: Original binary not found for ${binary}"
    fi
  done
}

_pick() {
  local p="$1" f d; shift
  for f; do
    d="$srcdir/$p/${f#$pkgdir/}"
    mkdir -p "$(dirname "$d")"
    mv "$f" "$d"
    rmdir -p --ignore-fail-on-non-empty "$(dirname "$f")"
  done
}

package_dbus() {
  depends+=(
    libaudit.so
    libcap-ng.so
    libexpat.so
    libsystemd.so
  )
  provides=(
    libdbus
    libdbus-1.so
  )
  conflicts=(libdbus)
  replaces=(libdbus)

  # First install all files normally
  meson install -C build --destdir "$pkgdir"

  # Replace dbus-daemon with BOLT-optimized version if it exists
  if [ -f "$srcdir/build/bolt/dbus-daemon.bolt" ]; then
    install -Dm755 "$srcdir/build/bolt/dbus-daemon.bolt" "$pkgdir/usr/bin/dbus-daemon"
    echo "Installed BOLT-optimized dbus-daemon"
  fi

  # Replace libdbus with BOLT-optimized version if it exists
  LIBDBUS_BASENAME=$(basename "$(find "$srcdir/build" -name 'libdbus-1.so.*' -type f ! -name '*.symbols' -print | sort -V | tail -n 1)")
  if [ -f "$srcdir/build/bolt/${LIBDBUS_BASENAME}.bolt" ]; then
    install -Dm755 "$srcdir/build/bolt/${LIBDBUS_BASENAME}.bolt" "$pkgdir/usr/lib/${LIBDBUS_BASENAME}"
    echo "Installed BOLT-optimized ${LIBDBUS_BASENAME}"
  fi

  # Strip binaries
  find "$pkgdir" -type f \( -name '*.so*' -o -name '*.a' -o -executable \) -print0 | while IFS= read -r -d '' file; do
    if llvm-strip --strip-unneeded "$file" 2>/dev/null || llvm-strip --strip-all "$file" 2>/dev/null; then
      echo "Stripped: $file"
    else
      echo "Skipping: $file (not a valid object file)" >&2
    fi
  done

  _pick unit "$pkgdir"/usr/lib/systemd/{system,user}/dbus.service

  install -Dt "$pkgdir/usr/share/libalpm/hooks" -m644 *.hook

  install -Dt "$pkgdir/usr/share/licenses/$pkgname" -m644 \
    dbus-$pkgver/COPYING dbus-$pkgver/LICENSES/AFL-2.1.txt
}

package_dbus-daemon-units() {
  pkgdesc+=" - Service units"
  depends=(dbus)
  provides=(dbus-units)
  conflicts=(dbus-broker-units)

  mv unit/* "$pkgdir"

  mkdir -p "$pkgdir/usr/share/licenses"
  ln -s dbus "$pkgdir/usr/share/licenses/$pkgname"
}
