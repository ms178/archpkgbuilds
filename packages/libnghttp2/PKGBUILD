pkgname=libnghttp2
pkgver=1.68.0
pkgrel=3.1
pkgdesc='Framing layer of HTTP/2 is implemented as a reusable C library'
arch=('x86_64')
url='https://nghttp2.org/'
license=('MIT')
depends=('glibc')
provides=('libnghttp2.so')
makedepends=('git' 'llvm' 'clang' 'openssl' 'libev' 'c-ares' 'jansson')
conflicts=('nghttp2<1.20.0-2')
validpgpkeys=('F4F3B91474D1EB29889BD0EF7E8403D5D673C366')
source=("git+https://github.com/nghttp2/nghttp2.git#tag=v${pkgver}?signed"
        'git+https://github.com/ngtcp2/munit.git'
        'git+https://github.com/mruby/mruby.git'
        'git+https://github.com/tatsuhiro-t/neverbleed.git')
sha512sums=('SKIP' 'SKIP' 'SKIP' 'SKIP')

prepare() {
  cd nghttp2

  # Configure submodules
  git config --file=.gitmodules submodule.tests/munit.url ../munit/
  git config --file=.gitmodules submodule.third-party/mruby.url ../mruby/
  git config --file=.gitmodules submodule.third-party/neverbleed.url ../neverbleed/

  git submodule init
  git -c protocol.file.allow=always submodule update

  autoreconf -vfi

  # Generate test certificates
  cd "$srcdir"
  openssl req -new -x509 -days 365 -nodes \
    -out server.crt -keyout server.key \
    -subj "/CN=localhost" \
    -addext "subjectAltName=DNS:localhost" 2>/dev/null
}

build() {
  cd nghttp2

  # PGO directories
  local pgo_dir="$srcdir/pgo-data"
  mkdir -p "$pgo_dir"

  # Store original flags
  local orig_cflags="$CFLAGS"
  local orig_cxxflags="$CXXFLAGS"
  local orig_ldflags="$LDFLAGS"

  # Use clang
  export CC=clang
  export CXX=clang++

  ######################################################################
  # STAGE 1: Standard PGO Instrumentation
  ######################################################################
  msg2 "════════════════════════════════════════════════════════════"
  msg2 "STAGE 1/3: Standard PGO Instrumentation"
  msg2 "════════════════════════════════════════════════════════════"

  export CFLAGS="$orig_cflags -fprofile-generate"
  export CXXFLAGS="$orig_cxxflags -fprofile-generate"
  export LDFLAGS="$orig_ldflags -fprofile-generate"
  export LLVM_PROFILE_FILE="$pgo_dir/stage1-%p-%m.profraw"

  ./configure \
    --prefix=/usr \
    --disable-static \
    --enable-app

  make -j"$(nproc)"

  # Run comprehensive HTTP/2 training workload
  msg2 "Running Stage 1 training workload..."

  # Built-in tests
  msg2 "→ Running built-in tests..."
  make -j1 check 2>&1 | head -100 || true

  # Custom HTTP/2 protocol workload
  if [[ -x src/nghttpd ]] && [[ -x src/nghttp ]] && [[ -x src/h2load ]]; then
    msg2 "→ Running HTTP/2 protocol workload..."

    local test_dir="$srcdir/test-stage1"
    mkdir -p "$test_dir"
    cd "$test_dir"

    # Create test files
    dd if=/dev/urandom of=small.bin bs=1K count=10 2>/dev/null
    dd if=/dev/urandom of=medium.bin bs=1K count=100 2>/dev/null
    dd if=/dev/urandom of=large.bin bs=1M count=5 2>/dev/null

    cat > index.html <<'EOF'
<!DOCTYPE html><html><head><title>HTTP/2 Test</title></head>
<body><h1>nghttp2 PGO Training</h1><img src="image.jpg"></body></html>
EOF
    cat > api.json <<'EOF'
{"status":"ok","data":[1,2,3,4,5]}
EOF
    dd if=/dev/urandom of=image.jpg bs=1K count=50 2>/dev/null

    cp "$srcdir/server.crt" "$srcdir/server.key" .

    local server="$srcdir/nghttp2/src/nghttpd"
    local client="$srcdir/nghttp2/src/nghttp"
    local h2load="$srcdir/nghttp2/src/h2load"

    # Test 1: Basic HTTPS connections
    msg2 "  [1/10] Basic HTTPS connections..."
    for port in 8443; do
      timeout 15 "$server" -d "$test_dir" "$port" server.key server.crt >/dev/null 2>&1 &
      local spid=$!
      sleep 2

      for i in {1..5}; do
        timeout 3 "$client" -nv https://localhost:$port/index.html >/dev/null 2>&1 || true
        timeout 3 "$client" -nv https://localhost:$port/api.json >/dev/null 2>&1 || true
      done

      kill $spid 2>/dev/null || true
      wait $spid 2>/dev/null || true
      sleep 1
    done

    # Test 2: Multiple concurrent streams
    msg2 "  [2/10] Multiple concurrent streams..."
    timeout 15 "$server" -d "$test_dir" 8443 server.key server.crt >/dev/null 2>&1 &
    local spid=$!
    sleep 2

    timeout 5 "$client" -nv -m 10 https://localhost:8443/index.html \
      https://localhost:8443/api.json https://localhost:8443/image.jpg \
      https://localhost:8443/small.bin >/dev/null 2>&1 || true

    kill $spid 2>/dev/null || true
    wait $spid 2>/dev/null || true
    sleep 1

    # Test 3: Different transfer sizes
    msg2 "  [3/10] Various transfer sizes..."
    timeout 15 "$server" -d "$test_dir" 8443 server.key server.crt >/dev/null 2>&1 &
    local spid=$!
    sleep 2

    for file in small.bin medium.bin large.bin; do
      timeout 5 "$client" -nv https://localhost:8443/$file >/dev/null 2>&1 || true
    done

    kill $spid 2>/dev/null || true
    wait $spid 2>/dev/null || true
    sleep 1

    # Test 4: HPACK compression (different header table sizes)
    msg2 "  [4/10] HPACK compression..."
    timeout 15 "$server" -d "$test_dir" 8443 server.key server.crt >/dev/null 2>&1 &
    local spid=$!
    sleep 2

    "$client" -nv -t 4096 https://localhost:8443/index.html >/dev/null 2>&1 || true
    "$client" -nv -t 8192 https://localhost:8443/medium.bin >/dev/null 2>&1 || true

    kill $spid 2>/dev/null || true
    wait $spid 2>/dev/null || true
    sleep 1

    # Test 5: Flow control (different window sizes)
    msg2 "  [5/10] Flow control..."
    timeout 15 "$server" -d "$test_dir" 8443 server.key server.crt >/dev/null 2>&1 &
    local spid=$!
    sleep 2

    "$client" -nv -w 16 https://localhost:8443/medium.bin >/dev/null 2>&1 || true
    "$client" -nv -w 24 https://localhost:8443/large.bin >/dev/null 2>&1 || true

    kill $spid 2>/dev/null || true
    wait $spid 2>/dev/null || true
    sleep 1

    # Test 6: Server push
    msg2 "  [6/10] Server push..."
    timeout 15 "$server" -d "$test_dir" --push=/api.json 8443 server.key server.crt >/dev/null 2>&1 &
    local spid=$!
    sleep 2

    "$client" -nv https://localhost:8443/index.html >/dev/null 2>&1 || true
    "$client" -nv --no-push https://localhost:8443/index.html >/dev/null 2>&1 || true

    kill $spid 2>/dev/null || true
    wait $spid 2>/dev/null || true
    sleep 1

    # Test 7: HTTP/2 Cleartext (h2c)
    msg2 "  [7/10] HTTP/2 Cleartext (h2c)..."
    timeout 15 "$server" --no-tls -d "$test_dir" 8080 >/dev/null 2>&1 &
    local spid=$!
    sleep 2

    for i in {1..3}; do
      timeout 3 "$client" -nv http://localhost:8080/index.html >/dev/null 2>&1 || true
      timeout 3 "$client" -nv http://localhost:8080/api.json >/dev/null 2>&1 || true
    done

    kill $spid 2>/dev/null || true
    wait $spid 2>/dev/null || true
    sleep 1

    # Test 8: Load testing with h2load
    msg2 "  [8/10] Load testing..."
    timeout 20 "$server" -d "$test_dir" 8443 server.key server.crt >/dev/null 2>&1 &
    local spid=$!
    sleep 2

    timeout 10 "$h2load" -n 1000 -c 10 -m 5 https://localhost:8443/index.html >/dev/null 2>&1 || true
    timeout 10 "$h2load" -n 500 -c 5 -m 3 https://localhost:8443/api.json >/dev/null 2>&1 || true

    kill $spid 2>/dev/null || true
    wait $spid 2>/dev/null || true
    sleep 1

    # Test 9: Error cases
    msg2 "  [9/10] Error handling..."
    timeout 15 "$server" -d "$test_dir" 8443 server.key server.crt >/dev/null 2>&1 &
    local spid=$!
    sleep 2

    "$client" -nv https://localhost:8443/nonexistent.html >/dev/null 2>&1 || true
    timeout 2 "$client" -nv https://localhost:9999/ >/dev/null 2>&1 || true

    kill $spid 2>/dev/null || true
    wait $spid 2>/dev/null || true
    sleep 1

    # Test 10: Rapid connections
    msg2 "  [10/10] Rapid connection stress..."
    timeout 20 "$server" -d "$test_dir" 8443 server.key server.crt >/dev/null 2>&1 &
    local spid=$!
    sleep 2

    for i in {1..20}; do
      timeout 2 "$client" -nv https://localhost:8443/api.json >/dev/null 2>&1 &
      [[ $((i % 5)) -eq 0 ]] && sleep 0.3
    done
    wait

    kill $spid 2>/dev/null || true
    wait $spid 2>/dev/null || true

    cd "$srcdir/nghttp2"
    msg2 "✓ Stage 1 HTTP/2 workload complete"
  fi

  # Collect and merge Stage 1 profiles
  msg2 "Collecting Stage 1 profiles..."
  local prof_count=$(find "$pgo_dir" -name "stage1-*.profraw" 2>/dev/null | wc -l)
  msg2 "  Found $prof_count profile files"

  if [[ $prof_count -eq 0 ]]; then
    error "No Stage 1 profiles generated!"
    return 1
  fi

  llvm-profdata merge -output="$pgo_dir/stage1.profdata" "$pgo_dir"/stage1-*.profraw || {
    error "Failed to merge Stage 1 profiles"
    return 1
  }

  msg2 "✓ Stage 1: $(stat -c%s "$pgo_dir/stage1.profdata" 2>/dev/null || echo '0') bytes"

  ######################################################################
  # STAGE 2: Context-Sensitive PGO
  ######################################################################
  msg2 "════════════════════════════════════════════════════════════"
  msg2 "STAGE 2/3: CS-PGO Instrumentation"
  msg2 "════════════════════════════════════════════════════════════"

  make clean

  export CFLAGS="$orig_cflags -fprofile-use=$pgo_dir/stage1.profdata -fcs-profile-generate"
  export CXXFLAGS="$orig_cxxflags -fprofile-use=$pgo_dir/stage1.profdata -fcs-profile-generate"
  export LDFLAGS="$orig_ldflags -fprofile-use=$pgo_dir/stage1.profdata -fcs-profile-generate"
  export LLVM_PROFILE_FILE="$pgo_dir/stage2-%p-%m.profraw"

  ./configure \
    --prefix=/usr \
    --disable-static \
    --enable-app

  make -j"$(nproc)"

  # Run abbreviated workload for CS-PGO
  msg2 "Running Stage 2 training workload..."
  make -j1 check 2>&1 | head -50 || true

  if [[ -x src/nghttpd ]] && [[ -x src/nghttp ]]; then
    msg2 "→ CS-PGO HTTP/2 tests..."
    cd "$srcdir/test-stage1"  # Reuse test directory

    for test in {1..5}; do
      timeout 15 "$srcdir/nghttp2/src/nghttpd" -d "$test_dir" 8443 server.key server.crt >/dev/null 2>&1 &
      local spid=$!
      sleep 2

      timeout 3 "$srcdir/nghttp2/src/nghttp" -nv https://localhost:8443/index.html >/dev/null 2>&1 || true
      timeout 3 "$srcdir/nghttp2/src/nghttp" -nv https://localhost:8443/medium.bin >/dev/null 2>&1 || true

      kill $spid 2>/dev/null || true
      wait $spid 2>/dev/null || true
      sleep 1
    done

    cd "$srcdir/nghttp2"
  fi

  # Merge CS profiles
  msg2 "Collecting Stage 2 profiles..."
  local cs_count=$(find "$pgo_dir" -name "stage2-*.profraw" 2>/dev/null | wc -l)
  msg2 "  Found $cs_count CS profile files"

  if [[ $cs_count -gt 0 ]]; then
    llvm-profdata merge -output="$pgo_dir/stage2.profdata" "$pgo_dir"/stage2-*.profraw || {
      msg2 "⚠ Failed to merge Stage 2 profiles, using Stage 1"
      cp "$pgo_dir/stage1.profdata" "$pgo_dir/merged.profdata"
    }

    if [[ -f "$pgo_dir/stage2.profdata" ]]; then
      llvm-profdata merge \
        -output="$pgo_dir/merged.profdata" \
        "$pgo_dir/stage1.profdata" \
        "$pgo_dir/stage2.profdata" || {
        msg2 "⚠ Failed to merge combined profiles, using Stage 1"
        cp "$pgo_dir/stage1.profdata" "$pgo_dir/merged.profdata"
      }
      msg2 "✓ Merged: $(stat -c%s "$pgo_dir/merged.profdata" 2>/dev/null || echo '0') bytes"
    fi
  else
    msg2 "⚠ No CS profiles, using Stage 1"
    cp "$pgo_dir/stage1.profdata" "$pgo_dir/merged.profdata"
  fi

  ######################################################################
  # STAGE 3: Final Optimized Build
  ######################################################################
  msg2 "════════════════════════════════════════════════════════════"
  msg2 "STAGE 3/3: Final Optimized Build"
  msg2 "════════════════════════════════════════════════════════════"

  make clean

  unset LLVM_PROFILE_FILE

  export CFLAGS="$orig_cflags -fprofile-use=$pgo_dir/merged.profdata"
  export CXXFLAGS="$orig_cxxflags -fprofile-use=$pgo_dir/merged.profdata"
  export LDFLAGS="$orig_ldflags -fprofile-use=$pgo_dir/merged.profdata"

  ./configure \
    --prefix=/usr \
    --disable-examples \
    --enable-lib-only

  make -j"$(nproc)"

  msg2 "✓ PGO optimization complete"
  msg2 "════════════════════════════════════════════════════════════"
}

check() {
  cd nghttp2
  make check
}

package() {
  cd nghttp2
  make DESTDIR="$pkgdir" install
  install -Dm644 COPYING "$pkgdir/usr/share/licenses/libnghttp2/COPYING"
}

# vim:set sw=2 sts=-1 et:
