pkgname=libnghttp2
pkgver=1.65.0
pkgrel=3.1
pkgdesc='Framing layer of HTTP/2 is implemented as a reusable C library'
arch=('x86_64')
url='https://nghttp2.org/'
license=('MIT')
depends=('glibc')
provides=('libnghttp2.so')
makedepends=('git' 'llvm' 'clang' 'openssl' 'libev' 'c-ares' 'jansson')
conflicts=('nghttp2<1.20.0-2')
validpgpkeys=('F4F3B91474D1EB29889BD0EF7E8403D5D673C366') # Tatsuhiro Tsujikawa <tatsuhiro.t@gmail.com>
source=("git+https://github.com/nghttp2/nghttp2.git#tag=v${pkgver}?signed"
        'git+https://github.com/ngtcp2/munit.git'
        'git+https://github.com/mruby/mruby.git'
        'git+https://github.com/tatsuhiro-t/neverbleed.git')
sha512sums=('SKIP'
            'SKIP'
            'SKIP'
            'SKIP')

prepare() {
  cd nghttp2

  git config --file=.gitmodules submodule.tests/munit.url ../munit/
  git config --file=.gitmodules submodule.third-party/mruby.url ../mruby/
  git config --file=.gitmodules submodule.tests/neverbleed.url ../neverbleed/

  git submodule init
  git -c protocol.file.allow=always submodule update

  autoreconf -vfi

# Create PGO workload script
cat > "$srcdir/pgo-workload.sh" << 'PGO_EOF'
#!/usr/bin/env bash
# nghttp2 – rich PGO workload using nghttpd / nghttp / h2load
# Usage: pgo-workload.sh <work‑dir> <examples‑bin‑dir>

set -euo pipefail

##############################################################################
# Args & basic paths
##############################################################################
WD=$1                       # work directory
BD=$2                       # directory containing builtin apps (src/)

mkdir -p "$WD"
cd "$WD" || { echo "Failed to cd into '$WD'" >&2; exit 1; }

QCLIENT="$BD/nghttp"
QSERVER="$BD/nghttpd"
H2LOAD="$BD/h2load"

for exe in "$QCLIENT" "$QSERVER" "$H2LOAD"; do
  [[ -x "$exe" ]] || { echo "Required executable '$exe' not found/executable" >&2; exit 1; }
done

##############################################################################
# Detect option spellings once (CLI varies between versions)
##############################################################################
help_cli=$("$QCLIENT" --help 2>&1 || true)

opt_stat=
if   grep -q -- '--stat'    <<<"$help_cli"; then opt_stat=--stat
elif grep -q -E '\s-s[ ,]'  <<<"$help_cli"; then opt_stat=-s
fi

opt_win=--window-bits
grep -q -- '--window-bits' <<<"$help_cli" || opt_win=-w

opt_hdr=--header-table-size
grep -q -- '--header-table-size' <<<"$help_cli" || opt_hdr=-t

opt_cwin=--connection-window-bits
grep -q -- '--connection-window-bits' <<<"$help_cli" || opt_cwin=--connection-window

opt_max_streams=--max-concurrent-streams
grep -q -- "$opt_max_streams" <<<"$help_cli" || opt_max_streams=-m

opt_max_frame=--max-frame-size
grep -q -- "$opt_max_frame" <<<"$help_cli" || true    # assume long form exists

opt_no_push=--no-push        # usually stable

##############################################################################
# Helper functions
##############################################################################
rt() {                      # Run nghttp with common flags
  local cmd=("$QCLIENT" -anv)
  [[ -n $opt_stat ]] && cmd+=("$opt_stat")
  "${cmd[@]}" "$@" >>client.log 2>&1 || true
}

is_listening() {            # is_listening <port>
  local port=$1
  if command -v ss >/dev/null; then
    ss -lnt | grep -qE ":${port}(\s+|$)"
  else
    netstat -lnt | grep -qE ":${port}(\s+|$)"
  fi
}

get_free_port() {           # find a free TCP port ≥8000
  local p
  for p in {8000..8100}; do
    if ! is_listening "$p"; then echo "$p"; return 0; fi
  done
  echo "Error: no free port 8000‑8100" >&2; return 1
}

##############################################################################
# Test assets
##############################################################################
dd if=/dev/urandom bs=1K  count=10  status=none of=small.bin
dd if=/dev/urandom bs=1K  count=100 status=none of=medium.bin
dd if=/dev/urandom bs=1M  count=5   status=none of=large.bin
dd if=/dev/urandom bs=1K  count=100 status=none of=compressible.bin
gzip -kf compressible.bin

cat > api.json <<'J'
{"msg":"Hello HTTP/2","n":[1,2,3,4,5],"ok":true}
J

dd if=/dev/urandom bs=1K count=50 status=none of=image.jpg
dd if=/dev/urandom bs=1M count=10 status=none of=large_binary_file.bin

cat > index.html <<'H'
<!doctype html><title>nghttp2 PGO</title>
<link rel="stylesheet" href="/style.css">
<script src="/script.js"></script>
<img src="/image.jpg"><h1>Welcome!</h1>
H
echo "body{background:#eee;color:#333}"   > style.css
echo "console.log('hello http2 PGO');"    > script.js

##############################################################################
# Certificates (supplied by PKGBUILD)
##############################################################################
CRT=server.crt
KEY=server.key
[[ -f $CRT && -f $KEY ]] || { echo "TLS cert/key missing" >&2; exit 1; }

##############################################################################
# Launch servers
##############################################################################
TLS_PORT=8443
H2C_PORT=$(get_free_port)

echo "Starting TLS server on $TLS_PORT ..."
"$QSERVER" -d "$WD" --push=/style.css --push=/script.js -- "$TLS_PORT" "$KEY" "$CRT" \
  >server-tls.log 2>&1 &
SPID_TLS=$!

echo "Starting plaintext h2c server on $H2C_PORT ..."
"$QSERVER" --no-tls -d "$WD" -- "$H2C_PORT" \
  >server-h2c.log 2>&1 &
SPID_H2C=$!

cleanup() {
  kill "$SPID_TLS" "$SPID_H2C" 2>/dev/null || true
  wait "$SPID_TLS" "$SPID_H2C" 2>/dev/null || true
}
trap cleanup EXIT INT TERM

# Wait for servers to listen
for p in "$TLS_PORT" "$H2C_PORT"; do
  for _ in {1..15}; do
    if is_listening "$p"; then break; fi; sleep .2
  done
  is_listening "$p" || { echo "Port $p did not open" >&2; exit 1; }
done

##############################################################################
# PASS 1 – feature matrix (TLS)
##############################################################################
rt https://localhost:$TLS_PORT/index.html
rt https://localhost:$TLS_PORT/api.json
rt https://localhost:$TLS_PORT/image.jpg
rt https://localhost:$TLS_PORT/small.bin
rt https://localhost:$TLS_PORT/compressible.bin.gz
rt -c 10 https://localhost:$TLS_PORT/index.html https://localhost:$TLS_PORT/api.json https://localhost:$TLS_PORT/large.bin

[[ -n $opt_win ]]  && rt $opt_win=16  https://localhost:$TLS_PORT/medium.bin
[[ -n $opt_win ]]  && rt $opt_win=28  https://localhost:$TLS_PORT/large.bin
[[ -n $opt_hdr ]]  && rt $opt_hdr=1024 https://localhost:$TLS_PORT/index.html
[[ -n $opt_hdr ]]  && rt $opt_hdr=8192 https://localhost:$TLS_PORT/medium.bin
[[ -n $opt_cwin ]] && rt $opt_cwin=20 https://localhost:$TLS_PORT/large.bin
rt --weight=16  https://localhost:$TLS_PORT/medium.bin
rt --weight=255 https://localhost:$TLS_PORT/large.bin
rt --no-dep     https://localhost:$TLS_PORT/index.html
rt --padding=64  https://localhost:$TLS_PORT/medium.bin
rt --padding=256 https://localhost:$TLS_PORT/large.bin
[[ -n $opt_max_streams ]] && rt $opt_max_streams=5 https://localhost:$TLS_PORT/index.html
[[ -n $opt_max_frame ]] && rt $opt_max_frame=16385 https://localhost:$TLS_PORT/medium.bin
[[ -n $opt_no_push ]] && rt $opt_no_push https://localhost:$TLS_PORT/index.html

printf 'X-Large-Header: %s\n' "$(head -c 16000 /dev/zero | tr '\0' A)" | \
  "$QCLIENT" -anv -H@- https://localhost:$TLS_PORT/index.html >>client.log 2>&1 || true
printf 'X-Broken-Header: \xff\xff\n' | \
  "$QCLIENT" -anv -H@- https://localhost:$TLS_PORT/index.html >>client.log 2>&1 || true

rt https://localhost:$TLS_PORT/nonexistent.html
rt https://localhost:$TLS_PORT/large_binary_file.bin

##############################################################################
# PASS 1.5 – h2c
##############################################################################
rt http://localhost:$H2C_PORT/index.html
rt http://localhost:$H2C_PORT/api.json
rt http://localhost:$H2C_PORT/medium.bin
rt -c 5 http://localhost:$H2C_PORT/small.bin http://localhost:$H2C_PORT/api.json
rt http://localhost:$H2C_PORT/large.bin

##############################################################################
# PASS 2 – curl (TLS)
##############################################################################
curl --http2-prior-knowledge -kfsS -I https://localhost:$TLS_PORT/index.html -o /dev/null
echo PUTDATA | curl --http2-prior-knowledge -kfsS -X PUT -T- https://localhost:$TLS_PORT/api.json -o /dev/null
curl --http2-prior-knowledge -kfsS -X DELETE https://localhost:$TLS_PORT/api.json -o /dev/null
curl --http2-prior-knowledge -kfsS -X OPTIONS https://localhost:$TLS_PORT/index.html -o /dev/null
curl --http2-prior-knowledge -kfsS https://localhost:$TLS_PORT/large_binary_file.bin -o /dev/null

##############################################################################
# PASS 3 – h2load
##############################################################################
NPROC=$(nproc || echo 2)
"$H2LOAD" -n 2000  -c 32 -m 16 -t "$NPROC" https://localhost:$TLS_PORT/index.html >>h2load.log 2>&1 || true
"$H2LOAD" -n 500   -c 16 -m  8 -t "$NPROC" https://localhost:$TLS_PORT/large.bin >>h2load.log 2>&1 || true
"$H2LOAD" -n 10000 -c 64 -m 32 -t "$NPROC" https://localhost:$TLS_PORT/api.json  >>h2load.log 2>&1 || true

##############################################################################
# PASS 4 – GOAWAY / restart
##############################################################################
rt https://localhost:$TLS_PORT/large.bin &
CID=$!
sleep .5
kill -TERM "$SPID_TLS" 2>/dev/null || true
wait "$CID" 2>/dev/null || true

"$QSERVER" -d "$WD" --push=/style.css --push=/script.js -- "$TLS_PORT" "$KEY" "$CRT" \
  >server-tls2.log 2>&1 &
SPID_TLS=$!
for _ in {1..15}; do is_listening "$TLS_PORT" && break; sleep .2; done

rt https://localhost:$TLS_PORT/index.html https://localhost:$TLS_PORT/style.css https://localhost:$TLS_PORT/script.js https://localhost:$TLS_PORT/image.jpg
for i in {1..5}; do rt https://localhost:$TLS_PORT/api.json; done

echo "HTTP/2 PGO workload finished OK."

PGO_EOF

chmod +x "$srcdir/pgo-workload.sh"

echo "PGO workload script '$srcdir/pgo-workload.sh' created successfully."

  # Generate self-signed certificates for HTTPS testing
  cd "$srcdir"
  openssl req -new -x509 -days 365 -nodes \
    -out server.crt -keyout server.key \
    -subj "/CN=localhost" \
    -addext "subjectAltName = DNS:localhost"
}

build() {
  cd nghttp2

  # Create PGO directories
  pgo_dir="$srcdir/pgo-data"
  mkdir -p "${pgo_dir}/standard"
  mkdir -p "${pgo_dir}/cs"

  # Store original flags
  orig_cflags="$CFLAGS"
  orig_cxxflags="$CXXFLAGS"
  orig_ldflags="$LDFLAGS"

  # Use clang for compilation
  export CC=clang
  export CXX=clang++

  ###########################################################################
  # Phase 1: Standard PGO Instrumentation
  ###########################################################################
  msg2 "== Building with standard PGO instrumentation"

  # Standard PGO instrumentation flags
  export CFLAGS="${orig_cflags} -fprofile-generate=${pgo_dir}/standard -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"
  export CXXFLAGS="${orig_cxxflags} -fprofile-generate=${pgo_dir}/standard -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"
  export LDFLAGS="${orig_ldflags} -fprofile-generate=${pgo_dir}/standard -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"

  # Configure with --enable-app to build the tools
  ./configure \
    --prefix=/usr \
    --disable-static \
    --enable-app

  make clean
  make

  # Run the built-in tests properly using make check
  msg2 "Running built-in tests for PGO profiling"
  make check || true  # Continue even if tests fail

  # Setup a testing environment for custom workload
  msg2 "Running custom HTTP/2 workload for PGO profiling"
  mkdir -p "$srcdir/http2-test"

  # Copy the generated certificates to the test directory
  cp "$srcdir/server.crt" "$srcdir/server.key" "$srcdir/http2-test/"

  # Run the PGO workload script with the correct binary path
  "$srcdir/pgo-workload.sh" "$srcdir/http2-test" "$(pwd)/src" || true  # Continue even if workload fails

  # Merge profile data from first run
  llvm-profdata merge -output="${pgo_dir}/standard.profdata" "${pgo_dir}/standard/"

  ###########################################################################
  # Phase 2: Context-Sensitive PGO Instrumentation
  ###########################################################################
  msg2 "== Building with context-sensitive PGO instrumentation"

  # CS-PGO instrumentation flags (using standard profile data)
  export CFLAGS="${orig_cflags} -fprofile-use=${pgo_dir}/standard.profdata -fcs-profile-generate=${pgo_dir}/cs -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"
  export CXXFLAGS="${orig_cxxflags} -fprofile-use=${pgo_dir}/standard.profdata -fcs-profile-generate=${pgo_dir}/cs -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"
  export LDFLAGS="${orig_ldflags} -fprofile-use=${pgo_dir}/standard.profdata -fcs-profile-generate=${pgo_dir}/cs -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"

  # Configure with --enable-app again
  ./configure \
    --prefix=/usr \
    --disable-static \
    --enable-app

  make clean
  make

  # Run the built-in tests properly using make check
  msg2 "Running built-in tests for CS-PGO profiling"
  make check || true  # Continue even if tests fail

  # Setup and run the custom workload again
  msg2 "Running custom HTTP/2 workload for CS-PGO profiling"
  rm -rf "$srcdir/http2-test"
  mkdir -p "$srcdir/http2-test"

  # Copy the generated certificates to the test directory
  cp "$srcdir/server.crt" "$srcdir/server.key" "$srcdir/http2-test/"

  # Run the workload script with the path to the binaries
  "$srcdir/pgo-workload.sh" "$srcdir/http2-test" "$(pwd)/src" || true  # Continue even if workload fails

  # Merge both profile datasets
  llvm-profdata merge -output="${pgo_dir}/merged.profdata" "${pgo_dir}/cs/" "${pgo_dir}/standard.profdata"

  ###########################################################################
  # Phase 3: Final Build with PGO-optimized flags
  ###########################################################################
  msg2 "== Building final optimized version with PGO data"

  # Final build using merged profile data
  export CFLAGS="${orig_cflags} -fprofile-use=${pgo_dir}/merged.profdata"
  export CXXFLAGS="${orig_cxxflags} -fprofile-use=${pgo_dir}/merged.profdata"
  export LDFLAGS="${orig_ldflags} -fprofile-use=${pgo_dir}/merged.profdata"

  # Now build with lib-only for the final package
  ./configure \
    --prefix=/usr \
    --disable-examples \
    --enable-lib-only

  make clean
  make
}

check() {
  cd nghttp2
  make check
}

package() {
  cd nghttp2/lib

  make DESTDIR="$pkgdir" install
  install -Dm644 ../COPYING "$pkgdir/usr/share/licenses/libnghttp2/COPYING"
}
