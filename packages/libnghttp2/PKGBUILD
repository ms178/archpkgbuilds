pkgname=libnghttp2
pkgver=1.65.0
pkgrel=3.1
pkgdesc='Framing layer of HTTP/2 is implemented as a reusable C library'
arch=('x86_64')
url='https://nghttp2.org/'
license=('MIT')
depends=('glibc')
provides=('libnghttp2.so')
makedepends=('git' 'llvm' 'clang' 'openssl' 'libev' 'c-ares' 'jansson')
conflicts=('nghttp2<1.20.0-2')
validpgpkeys=('F4F3B91474D1EB29889BD0EF7E8403D5D673C366') # Tatsuhiro Tsujikawa <tatsuhiro.t@gmail.com>
source=("git+https://github.com/nghttp2/nghttp2.git#tag=v${pkgver}?signed"
        'git+https://github.com/ngtcp2/munit.git'
        'git+https://github.com/mruby/mruby.git'
        'git+https://github.com/tatsuhiro-t/neverbleed.git')
sha512sums=('SKIP'
            'SKIP'
            'SKIP'
            'SKIP')

prepare() {
  cd nghttp2

  git config --file=.gitmodules submodule.tests/munit.url ../munit/
  git config --file=.gitmodules submodule.third-party/mruby.url ../mruby/
  git config --file=.gitmodules submodule.tests/neverbleed.url ../neverbleed/

  git submodule init
  git -c protocol.file.allow=always submodule update

  autoreconf -vfi

  # Create PGO workload script
cat > "$srcdir/pgo-workload.sh" << 'PGO_EOF'
#!/usr/bin/env bash
# nghttp2  –  rich PGO workload using nghttpd / nghttp / h2load
# Usage: pgo-workload.sh <work‑dir> <examples‑bin‑dir>

set -euo pipefail

##############################################################################
# Args & basic paths
##############################################################################
WD=$1          # work directory
BD=$2          # directory containing builtin apps (src/ by default)

mkdir -p "$WD"
cd       "$WD"

QCLIENT="$BD/nghttp"
QSERVER="$BD/nghttpd"
H2LOAD="$BD/h2load"

for exe in "$QCLIENT" "$QSERVER" "$H2LOAD"; do
  [[ -x $exe ]] || { echo "$exe missing" >&2; exit 1; }
done

##############################################################################
# Detect option spellings once (CLI is occasionally renamed)
##############################################################################
help_cli=$("$QCLIENT" --help 2>&1 || true)
opt_stat=
if   grep -q -- '--stat'    <<<"$help_cli"; then opt_stat=--stat
elif grep -q -E '\s-i[ ,]'  <<<"$help_cli"; then opt_stat=-i
fi

opt_win=--window-bits
grep -q -- '--window-bits'  <<<"$help_cli" || opt_win=-w

opt_hdr=--header-table-size
grep -q -- '--header-table-size' <<<"$help_cli" || opt_hdr=-t

opt_cwin=--connection-window-bits
grep -q -- '--connection-window-bits' <<<"$help_cli" || opt_cwin=--connection-window

##############################################################################
# Helper – create header/table/flow permutations fast
##############################################################################
rt() { "$QCLIENT" -ansv "$@" >>client.log 2>&1 || true; }   # a=authority, n=no‑tls, s=show‑stat
# (‑v = verbose frame log; add ‑a to always print :authority)

##############################################################################
# Test assets
##############################################################################
dd if=/dev/urandom bs=1K  count=10  status=none of=small.bin
dd if=/dev/urandom bs=1K  count=100 status=none of=medium.bin
dd if=/dev/urandom bs=1M  count=5   status=none of=large.bin
dd if=/dev/urandom bs=1K  count=100 status=none of=compressible.bin
gzip -k compressible.bin

cat > api.json <<'J'
{"msg":"Hello HTTP/2","n":[1,2,3,4,5],"ok":true}
J

dd if=/dev/urandom bs=1K count=50 status=none of=image.jpg
dd if=/dev/urandom bs=1M count=10 status=none of=chunked.bin

cat > index.html <<'H'
<!doctype html><title>nghttp2 PGO</title>
<link rel="stylesheet" href="/style.css">
<script src="/script.js"></script>
<img src="/image.jpg">
H
echo "body{background:#eee}"                 > style.css
echo "console.log('hello http2');"           > script.js

##############################################################################
# Certificates (already generated and copied by PKGBUILD)
##############################################################################
CRT=server.crt
KEY=server.key
[[ -f $CRT && -f $KEY ]] || { echo "certs missing" >&2; exit 1; }

##############################################################################
# Launch server
##############################################################################
"$QSERVER" -d "$WD" --push=/style.css --push=/script.js 8443 "$KEY" "$CRT" \
   >server.log 2>&1 &
SPID=$!

cleanup() {
  kill "$SPID" 2>/dev/null || true
  wait "$SPID" 2>/dev/null || true
}
trap cleanup EXIT INT TERM

# wait until ready
for _ in {1..10}; do
  sleep .2
  if ss -lnt | grep -q ':8443'; then break; fi
done

##############################################################################
# PASS 1 – feature matrix with nghttp
##############################################################################
rt https://localhost:8443/index.html
rt https://localhost:8443/api.json
rt https://localhost:8443/image.jpg
rt https://localhost:8443/small.bin
rt https://localhost:8443/compressible.bin.gz
rt -c 10 https://localhost:8443/index.html https://localhost:8443/api.json https://localhost:8443/large.bin

rt $opt_stat https://localhost:8443/index.html
rt $opt_win=16     https://localhost:8443/medium.bin
rt $opt_win=28     https://localhost:8443/large.bin
rt $opt_hdr=1024   https://localhost:8443/index.html
rt $opt_hdr=8192   https://localhost:8443/medium.bin
rt $opt_cwin=20    https://localhost:8443/large.bin
rt --weight=16     https://localhost:8443/medium.bin
rt --weight=255    https://localhost:8443/large.bin
rt --no-dep        https://localhost:8443/index.html
rt --padding=64    https://localhost:8443/medium.bin
rt --padding=256   https://localhost:8443/large.bin

printf 'X-Large-Header: %s\n' "$(head -c 16000 /dev/zero | tr '\0' A)" | \
   "$QCLIENT" -ansv -H@- https://localhost:8443/index.html >>client.log 2>&1 || true
printf 'X-Broken-Header: \xff\xff\n' | \
   "$QCLIENT" -ansv -H@- https://localhost:8443/index.html >>client.log 2>&1 || true
rt https://localhost:8443/nonexistent.html
rt https://localhost:8443/chunked.bin

##############################################################################
# PASS 2 – HTTP methods using curl (libcurl exercises nghttp2 internally)
##############################################################################
curl --http2-prior-knowledge -sS -o /dev/null -I https://localhost:8443/index.html --insecure
echo PUT | curl --http2 -sS -X PUT -T- https://localhost:8443/api.json --insecure -o /dev/null
curl --http2 -sS -X DELETE https://localhost:8443/api.json --insecure -o /dev/null
curl --http2 -sS -X OPTIONS https://localhost:8443/index.html --insecure -o /dev/null

##############################################################################
# PASS 3 – concurrency & stress with h2load
##############################################################################
"$H2LOAD" -n 2000 -c 32 -m 16 -t "$(nproc)" https://localhost:8443/index.html \
  >>h2load.log 2>&1 || true
"$H2LOAD" -n 1000 -c 16 -m 16 -t "$(nproc)" https://localhost:8443/large.bin \
  >>h2load.log 2>&1 || true

##############################################################################
# PASS 4 – GOAWAY and RST_STREAM scenarios
##############################################################################
rt $opt_stat https://localhost:8443/index.html &
CID=$!
sleep 1 && kill -TERM "$SPID" 2>/dev/null || true
wait "$CID" 2>/dev/null || true

# restart server for final sequence
"$QSERVER" -d "$WD" 8443 "$KEY" "$CRT" >server2.log 2>&1 &
SPID=$!
sleep .5

rt https://localhost:8443/index.html https://localhost:8443/style.css https://localhost:8443/script.js https://localhost:8443/image.jpg
for i in {1..10}; do rt https://localhost:8443/api.json; done

echo "HTTP/2 workload finished OK."
PGO_EOF

chmod +x "$srcdir/pgo-workload.sh"

  # Generate self-signed certificates for HTTPS testing
  cd "$srcdir"
  openssl req -new -x509 -days 365 -nodes \
    -out server.crt -keyout server.key \
    -subj "/CN=localhost" \
    -addext "subjectAltName = DNS:localhost"
}

build() {
  cd nghttp2

  # Create PGO directories
  pgo_dir="$srcdir/pgo-data"
  mkdir -p "${pgo_dir}/standard"
  mkdir -p "${pgo_dir}/cs"

  # Store original flags
  orig_cflags="$CFLAGS"
  orig_cxxflags="$CXXFLAGS"
  orig_ldflags="$LDFLAGS"

  # Use clang for compilation
  export CC=clang
  export CXX=clang++

  ###########################################################################
  # Phase 1: Standard PGO Instrumentation
  ###########################################################################
  msg2 "== Building with standard PGO instrumentation"

  # Standard PGO instrumentation flags
  export CFLAGS="${orig_cflags} -fprofile-generate=${pgo_dir}/standard -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"
  export CXXFLAGS="${orig_cxxflags} -fprofile-generate=${pgo_dir}/standard -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"
  export LDFLAGS="${orig_ldflags} -fprofile-generate=${pgo_dir}/standard -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"

  # Configure with --enable-app to build the tools
  ./configure \
    --prefix=/usr \
    --disable-python-bindings \
    --disable-static \
    --enable-app

  make clean
  make

  # Run the built-in tests properly using make check
  msg2 "Running built-in tests for PGO profiling"
  make check || true  # Continue even if tests fail

  # Setup a testing environment for custom workload
  msg2 "Running custom HTTP/2 workload for PGO profiling"
  mkdir -p "$srcdir/http2-test"

  # Copy the generated certificates to the test directory
  cp "$srcdir/server.crt" "$srcdir/server.key" "$srcdir/http2-test/"

  # Run the PGO workload script with the correct binary path
  "$srcdir/pgo-workload.sh" "$srcdir/http2-test" "$(pwd)/src" || true  # Continue even if workload fails

  # Merge profile data from first run
  llvm-profdata merge -output="${pgo_dir}/standard.profdata" "${pgo_dir}/standard/"

  ###########################################################################
  # Phase 2: Context-Sensitive PGO Instrumentation
  ###########################################################################
  msg2 "== Building with context-sensitive PGO instrumentation"

  # CS-PGO instrumentation flags (using standard profile data)
  export CFLAGS="${orig_cflags} -fprofile-use=${pgo_dir}/standard.profdata -fcs-profile-generate=${pgo_dir}/cs -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"
  export CXXFLAGS="${orig_cxxflags} -fprofile-use=${pgo_dir}/standard.profdata -fcs-profile-generate=${pgo_dir}/cs -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"
  export LDFLAGS="${orig_ldflags} -fprofile-use=${pgo_dir}/standard.profdata -fcs-profile-generate=${pgo_dir}/cs -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"

  # Configure with --enable-app again
  ./configure \
    --prefix=/usr \
    --disable-python-bindings \
    --disable-static \
    --enable-app

  make clean
  make

  # Run the built-in tests properly using make check
  msg2 "Running built-in tests for CS-PGO profiling"
  make check || true  # Continue even if tests fail

  # Setup and run the custom workload again
  msg2 "Running custom HTTP/2 workload for CS-PGO profiling"
  rm -rf "$srcdir/http2-test"
  mkdir -p "$srcdir/http2-test"

  # Copy the generated certificates to the test directory
  cp "$srcdir/server.crt" "$srcdir/server.key" "$srcdir/http2-test/"

  # Run the workload script with the path to the binaries
  "$srcdir/pgo-workload.sh" "$srcdir/http2-test" "$(pwd)/src" || true  # Continue even if workload fails

  # Merge both profile datasets
  llvm-profdata merge -output="${pgo_dir}/merged.profdata" "${pgo_dir}/cs/" "${pgo_dir}/standard.profdata"

  ###########################################################################
  # Phase 3: Final Build with PGO-optimized flags
  ###########################################################################
  msg2 "== Building final optimized version with PGO data"

  # Final build using merged profile data
  export CFLAGS="${orig_cflags} -fprofile-use=${pgo_dir}/merged.profdata"
  export CXXFLAGS="${orig_cxxflags} -fprofile-use=${pgo_dir}/merged.profdata"
  export LDFLAGS="${orig_ldflags} -fprofile-use=${pgo_dir}/merged.profdata"

  # Now build with lib-only for the final package
  ./configure \
    --prefix=/usr \
    --disable-examples \
    --disable-python-bindings \
    --enable-lib-only

  make clean
  make
}

check() {
  cd nghttp2
  make check
}

package() {
  cd nghttp2/lib

  make DESTDIR="$pkgdir" install
  install -Dm644 ../COPYING "$pkgdir/usr/share/licenses/libnghttp2/COPYING"
}
