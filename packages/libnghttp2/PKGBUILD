pkgname=libnghttp2
pkgver=1.65.0
pkgrel=3.1
pkgdesc='Framing layer of HTTP/2 is implemented as a reusable C library'
arch=('x86_64')
url='https://nghttp2.org/'
license=('MIT')
depends=('glibc')
provides=('libnghttp2.so')
makedepends=('git' 'llvm' 'clang' 'openssl' 'libev' 'c-ares' 'jansson')
conflicts=('nghttp2<1.20.0-2')
validpgpkeys=('F4F3B91474D1EB29889BD0EF7E8403D5D673C366') # Tatsuhiro Tsujikawa <tatsuhiro.t@gmail.com>
source=("git+https://github.com/nghttp2/nghttp2.git#tag=v${pkgver}?signed"
        'git+https://github.com/ngtcp2/munit.git'
        'git+https://github.com/mruby/mruby.git'
        'git+https://github.com/tatsuhiro-t/neverbleed.git')
sha512sums=('SKIP'
            'SKIP'
            'SKIP'
            'SKIP')

prepare() {
  cd nghttp2

  git config --file=.gitmodules submodule.tests/munit.url ../munit/
  git config --file=.gitmodules submodule.third-party/mruby.url ../mruby/
  git config --file=.gitmodules submodule.tests/neverbleed.url ../neverbleed/

  git submodule init
  git -c protocol.file.allow=always submodule update

  autoreconf -vfi

  # Create PGO workload script
  cat > "$srcdir/pgo-workload.sh" << 'EOF'
#!/bin/bash
set -e

WORKDIR="$1"
BINDIR="$2"
cd "$WORKDIR"

echo "Setting up HTTP/2 test environment..."

# Generate test files of different sizes and types
echo "Generating test files..."
dd if=/dev/urandom of=small.bin bs=1K count=10 status=none
dd if=/dev/urandom of=medium.bin bs=1K count=100 status=none
dd if=/dev/urandom of=large.bin bs=1M count=5 status=none

# Create a compressed file (simulates real-world assets)
dd if=/dev/urandom of=compressible.bin bs=1K count=100 status=none
gzip -k compressible.bin  # Keep original file, create .gz version

# Create a JSON file (simulates API responses)
cat > api.json << 'JSON'
{
    "status": "success",
    "message": "Hello, HTTP/2!",
    "data": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    "timestamp": "2023-10-01T12:00:00Z"
}
JSON

# Create an image file (simulates binary content)
dd if=/dev/urandom of=image.jpg bs=1K count=50 status=none

# Create a chunked transfer file (simulates streaming)
dd if=/dev/urandom of=chunked.bin bs=1M count=10 status=none

# Create a simple HTML file with server push references
cat > index.html << 'HTML'
<!DOCTYPE html>
<html>
<head>
    <title>nghttp2 PGO Test</title>
    <link rel="stylesheet" href="/style.css">
    <script src="/script.js"></script>
</head>
<body>
    <h1>HTTP/2 Test Page</h1>
    <p>This is a test page for nghttp2 PGO profiling.</p>
    <img src="/image.jpg">
</body>
</html>
HTML

# Create dummy files for server push
echo "body { background: #fff; }" > style.css
echo "console.log('Hello, HTTP/2!');" > script.js

# Function to check if a process is running
is_process_running() {
    local pid=$1
    if [ -n "$pid" ] && ps -p "$pid" > /dev/null 2>&1; then
        return 0  # Process is running
    else
        return 1  # Process is not running
    fi
}

# Function to start the server and verify it is running
start_server() {
    echo "Starting HTTP/2 server with server push..."
    "$BINDIR/nghttpd" -v -d "$WORKDIR" --push=/style.css --push=/script.js 8080 server.key server.crt &
    SERVER_PID=$!
    # Wait briefly and check if the server is still running
    sleep 1
    if ! is_process_running "$SERVER_PID"; then
        echo "Error: Failed to start HTTP/2 server (nghttpd)" >&2
        exit 1
    fi
}

# Start the server
start_server

# Function to stop server on exit
cleanup() {
    echo "Stopping HTTP/2 server..."
    if [ -n "$SERVER_PID" ] && is_process_running "$SERVER_PID"; then
        kill "$SERVER_PID" 2>/dev/null || true
        wait "$SERVER_PID" 2>/dev/null || true
    fi
    echo "Cleanup complete"
}
trap cleanup EXIT

echo "Running HTTP/2 client tests..."

# === Basic HTTP/2 Tests ===

# Simple GET requests for different content types
"$BINDIR/nghttp" -nva 'https://localhost:8080/index.html' 2>&1 | tee -a test.log
"$BINDIR/nghttp" -nva 'https://localhost:8080/api.json' 2>&1 | tee -a test.log
"$BINDIR/nghttp" -nva 'https://localhost:8080/image.jpg' 2>&1 | tee -a test.log
"$BINDIR/nghttp" -nva 'https://localhost:8080/small.bin' 2>&1 | tee -a test.log
"$BINDIR/nghttp" -nva 'https://localhost:8080/compressible.bin.gz' 2>&1 | tee -a test.log

# Multiple concurrent requests with different content types
"$BINDIR/nghttp" -nva -c 10 'https://localhost:8080/index.html' 'https://localhost:8080/api.json' 'https://localhost:8080/large.bin' 2>&1 | tee -a test.log

# === HTTP/2 Feature Tests ===

# Test server push (enabled on server for style.css and script.js)
"$BINDIR/nghttp" -nva --stat 'https://localhost:8080/index.html' 2>&1 | tee -a test.log

# Test with different window bits (flow control)
"$BINDIR/nghttp" -nva --window-bits=16 'https://localhost:8080/medium.bin' 2>&1 | tee -a test.log
"$BINDIR/nghttp" -nva --window-bits=28 'https://localhost:8080/large.bin' 2>&1 | tee -a test.log

# Test with different header table sizes (HPACK compression)
"$BINDIR/nghttp" -nva --header-table-size=1024 'https://localhost:8080/index.html' 2>&1 | tee -a test.log
"$BINDIR/nghttp" -nva --header-table-size=8192 'https://localhost:8080/medium.bin' 2>&1 | tee -a test.log

# Test with different connection window bits (flow control)
"$BINDIR/nghttp" -nva --connection-window-bits=20 'https://localhost:8080/large.bin' 2>&1 | tee -a test.log

# Test stream priorities and weights
"$BINDIR/nghttp" -nva --weight=16 'https://localhost:8080/medium.bin' 2>&1 | tee -a test.log
"$BINDIR/nghttp" -nva --weight=255 'https://localhost:8080/large.bin' 2>&1 | tee -a test.log

# Test stream dependencies (disable dependency)
"$BINDIR/nghttp" -nva --no-dep 'https://localhost:8080/index.html' 2>&1 | tee -a test.log

# Test padding (increases frame size)
"$BINDIR/nghttp" -nva --padding=64 'https://localhost:8080/medium.bin' 2>&1 | tee -a test.log
"$BINDIR/nghttp" -nva --padding=256 'https://localhost:8080/large.bin' 2>&1 | tee -a test.log

# === HTTP Methods and Payloads ===

# Test POST requests with different payloads
echo "POST data" | "$BINDIR/nghttp" -nva -d - 'https://localhost:8080/api.json' 2>&1 | tee -a test.log
dd if=/dev/urandom bs=1K count=10 status=none | "$BINDIR/nghttp" -nva -d - 'https://localhost:8080/large.bin' 2>&1 | tee -a test.log

# Test HEAD request using curl (since nghttp does not support -m HEAD)
curl --http2 -I --insecure 'https://localhost:8080/index.html' 2>&1 | tee -a test.log

# Test additional HTTP methods using curl
echo "PUT data" | curl --http2 --insecure -X PUT --data-binary @- 'https://localhost:8080/api.json' 2>&1 | tee -a test.log
curl --http2 --insecure -X DELETE 'https://localhost:8080/api.json' 2>&1 | tee -a test.log
curl --http2 --insecure -X OPTIONS 'https://localhost:8080/index.html' 2>&1 | tee -a test.log

# === Stress and Concurrency Tests ===

# High concurrency with multiple streams (may trigger GOAWAY with error)
"$BINDIR/nghttp" -nva -c 1000 'https://localhost:8080/index.html' 'https://localhost:8080/api.json' 'https://localhost:8080/large.bin' 2>&1 | tee -a test.log || true

# Simulate long-lived connection with many requests
"$BINDIR/nghttp" -nva -r 100 'https://localhost:8080/index.html' 2>&1 | tee -a test.log

# === Edge Cases and Error Handling ===

# Test with very large headers (stress HPACK)
"$BINDIR/nghttp" -nva -H "X-Large-Header: $(head -c 16000 < /dev/zero | tr '\0' 'A')" 'https://localhost:8080/index.html' 2>&1 | tee -a test.log || true

# Test with invalid headers (trigger HPACK error)
"$BINDIR/nghttp" -nva -H $'X-Broken-Header: \xFF\xFF' 'https://localhost:8080/index.html' 2>&1 | tee -a test.log || true

# Test with invalid paths (404 errors)
"$BINDIR/nghttp" -nva 'https://localhost:8080/nonexistent.html' 2>&1 | tee -a test.log || true

# Test with chunked transfer (streaming simulation)
"$BINDIR/nghttp" -nva 'https://localhost:8080/chunked.bin' 2>&1 | tee -a test.log

# === Protocol-Level Tests ===

# Test GOAWAY frame (server-initiated connection termination)
"$BINDIR/nghttp" -nva --stat 'https://localhost:8080/index.html' 2>&1 | tee -a test.log &
sleep 1
if is_process_running "$SERVER_PID"; then
    kill -TERM "$SERVER_PID"  # Force server to send GOAWAY
    wait "$SERVER_PID" 2>/dev/null || true
fi

# Restart server for remaining tests
start_server

# Test RST_STREAM (client-initiated stream reset)
"$BINDIR/nghttp" -nva --stat 'https://localhost:8080/large.bin' 2>&1 | tee -a test.log &
CLIENT_PID=$!
sleep 1
if is_process_running "$CLIENT_PID"; then
    kill -TERM "$CLIENT_PID"  # Force client to reset streams
    wait "$CLIENT_PID" 2>/dev/null || true
fi

# === Real-World Simulation ===

# Simulate a typical web browsing session (multiple requests with dependencies)
"$BINDIR/nghttp" -nva --stat 'https://localhost:8080/index.html' 'https://localhost:8080/style.css' 'https://localhost:8080/script.js' 'https://localhost:8080/image.jpg' 2>&1 | tee -a test.log

# Simulate an API-heavy workload (many small JSON requests)
for i in {1..10}; do
    "$BINDIR/nghttp" -nva 'https://localhost:8080/api.json' 2>&1 | tee -a test.log
done

# Simulate a file download workload (large binary files)
"$BINDIR/nghttp" -nva 'https://localhost:8080/large.bin' 'https://localhost:8080/compressible.bin.gz' 2>&1 | tee -a test.log

# === Statistics and Debugging ===

# Generate detailed statistics and HAR output
"$BINDIR/nghttp" -nva --stat 'https://localhost:8080/index.html' 2>&1 | tee -a test.log
"$BINDIR/nghttp" -nva --har 'https://localhost:8080/medium.bin' 2>&1 | tee -a test.log

echo "HTTP/2 client tests completed"
EOF

  chmod +x "$srcdir/pgo-workload.sh"

  # Generate self-signed certificates for HTTPS testing
  cd "$srcdir"
  openssl req -new -x509 -days 365 -nodes \
    -out server.crt -keyout server.key \
    -subj "/CN=localhost" \
    -addext "subjectAltName = DNS:localhost"
}

build() {
  cd nghttp2

  # Create PGO directories
  pgo_dir="$srcdir/pgo-data"
  mkdir -p "${pgo_dir}/standard"
  mkdir -p "${pgo_dir}/cs"

  # Store original flags
  orig_cflags="$CFLAGS"
  orig_cxxflags="$CXXFLAGS"
  orig_ldflags="$LDFLAGS"

  # Use clang for compilation
  export CC=clang
  export CXX=clang++

  ###########################################################################
  # Phase 1: Standard PGO Instrumentation
  ###########################################################################
  msg2 "== Building with standard PGO instrumentation"

  # Standard PGO instrumentation flags
  export CFLAGS="${orig_cflags} -fprofile-generate=${pgo_dir}/standard -g3 -fno-omit-frame-pointer -mllvm -vp-counters-per-site=10 -mllvm -runtime-counter-relocation -mllvm -enable-value-profiling"
  export CXXFLAGS="${orig_cxxflags} -fprofile-generate=${pgo_dir}/standard -g3 -fno-omit-frame-pointer -mllvm -vp-counters-per-site=10 -mllvm -runtime-counter-relocation -mllvm -enable-value-profiling"
  export LDFLAGS="${orig_ldflags} -fprofile-generate=${pgo_dir}/standard -g3 -fno-omit-frame-pointer -mllvm -vp-counters-per-site=10 -mllvm -runtime-counter-relocation -mllvm -enable-value-profiling"

  # Configure with --enable-app to build the tools
  ./configure \
    --prefix=/usr \
    --disable-python-bindings \
    --disable-static \
    --enable-app

  make clean
  make

  # Run the built-in tests properly using make check
  msg2 "Running built-in tests for PGO profiling"
  make check || true  # Continue even if tests fail

  # Setup a testing environment for custom workload
  msg2 "Running custom HTTP/2 workload for PGO profiling"
  mkdir -p "$srcdir/http2-test"

  # Copy the generated certificates to the test directory
  cp "$srcdir/server.crt" "$srcdir/server.key" "$srcdir/http2-test/"

  # Run the PGO workload script with the correct binary path
  "$srcdir/pgo-workload.sh" "$srcdir/http2-test" "$(pwd)/src" || true  # Continue even if workload fails

  # Merge profile data from first run
  llvm-profdata merge -output="${pgo_dir}/standard.profdata" "${pgo_dir}/standard/"

  ###########################################################################
  # Phase 2: Context-Sensitive PGO Instrumentation
  ###########################################################################
  msg2 "== Building with context-sensitive PGO instrumentation"

  # CS-PGO instrumentation flags (using standard profile data)
  export CFLAGS="${orig_cflags} -fprofile-use=${pgo_dir}/standard.profdata -fcs-profile-generate=${pgo_dir}/cs -g3 -fno-omit-frame-pointer -mllvm -vp-counters-per-site=10 -mllvm -runtime-counter-relocation -mllvm -enable-value-profiling"
  export CXXFLAGS="${orig_cxxflags} -fprofile-use=${pgo_dir}/standard.profdata -fcs-profile-generate=${pgo_dir}/cs -g3 -fno-omit-frame-pointer -mllvm -vp-counters-per-site=10 -mllvm -runtime-counter-relocation -mllvm -enable-value-profiling"
  export LDFLAGS="${orig_ldflags} -fprofile-use=${pgo_dir}/standard.profdata -fcs-profile-generate=${pgo_dir}/cs -g3 -fno-omit-frame-pointer -mllvm -vp-counters-per-site=10 -mllvm -runtime-counter-relocation -mllvm -enable-value-profiling"

  # Configure with --enable-app again
  ./configure \
    --prefix=/usr \
    --disable-python-bindings \
    --disable-static \
    --enable-app

  make clean
  make

  # Run the built-in tests properly using make check
  msg2 "Running built-in tests for CS-PGO profiling"
  make check || true  # Continue even if tests fail

  # Setup and run the custom workload again
  msg2 "Running custom HTTP/2 workload for CS-PGO profiling"
  rm -rf "$srcdir/http2-test"
  mkdir -p "$srcdir/http2-test"

  # Copy the generated certificates to the test directory
  cp "$srcdir/server.crt" "$srcdir/server.key" "$srcdir/http2-test/"

  # Run the workload script with the path to the binaries
  "$srcdir/pgo-workload.sh" "$srcdir/http2-test" "$(pwd)/src" || true  # Continue even if workload fails

  # Merge both profile datasets
  llvm-profdata merge -output="${pgo_dir}/merged.profdata" "${pgo_dir}/cs/" "${pgo_dir}/standard.profdata"

  ###########################################################################
  # Phase 3: Final Build with PGO-optimized flags
  ###########################################################################
  msg2 "== Building final optimized version with PGO data"

  # Final build using merged profile data
  export CFLAGS="${orig_cflags} -fprofile-use=${pgo_dir}/merged.profdata"
  export CXXFLAGS="${orig_cxxflags} -fprofile-use=${pgo_dir}/merged.profdata"
  export LDFLAGS="${orig_ldflags} -fprofile-use=${pgo_dir}/merged.profdata"

  # Now build with lib-only for the final package
  ./configure \
    --prefix=/usr \
    --disable-examples \
    --disable-python-bindings \
    --enable-lib-only

  make clean
  make
}

check() {
  cd nghttp2
  make check
}

package() {
  cd nghttp2/lib

  make DESTDIR="$pkgdir" install
  install -Dm644 ../COPYING "$pkgdir/usr/share/licenses/libnghttp2/COPYING"
}
