pkgbase="dbus-broker-git"
pkgname=(
  "dbus-broker-git"
  "dbus-broker-units-git"
)
pkgdesc="Linux D-Bus Message Broker (CS-PGO and BOLT optimized)"
pkgver=37.36.ga7960f2
pkgrel=1
arch=("x86_64")
options=(!strip)
license=("Apache-2.0")
url="https://github.com/bus1/dbus-broker/wiki"
depends=(
  'audit>=3.0'
  'expat>=2.2'
  'libcap-ng>=0.6'
  'systemd-libs>=230'
)
makedepends=(
  'git'
  'meson>=0.60.0'
  'systemd'
  'python-docutils'
  'clang'
  'lld'
  'llvm'
  'procps-ng'
)
source=(
  "$pkgbase::git+https://github.com/bus1/dbus-broker"
  "c-dvar-1::git+https://github.com/c-util/c-dvar#branch=v1"
  "c-ini-1::git+https://github.com/c-util/c-ini#branch=v1"
  "c-list-3::git+https://github.com/c-util/c-list#branch=v3"
  "c-rbtree-3::git+https://github.com/c-util/c-rbtree#branch=v3"
  "c-shquote-1::git+https://github.com/c-util/c-shquote#branch=v1"
  "c-stdaux-1::git+https://github.com/c-util/c-stdaux#branch=v1"
  "c-utf8-1::git+https://github.com/c-util/c-utf8#branch=v1"
  "0001-units-Enable-statically.patch"
)
sha256sums=(
  'SKIP' 'SKIP' 'SKIP' 'SKIP' 'SKIP' 'SKIP' 'SKIP' 'SKIP' 'SKIP'
)

pkgver() {
  cd "$pkgbase"
  git describe --long --tags | sed 's/^v//;s/-/./g'
}

prepare() {
  cd "$pkgbase"
  git checkout "$(git rev-parse HEAD)"

  local sp
  for sp in {dvar-1,ini-1,list-3,rbtree-3,shquote-1,stdaux-1,utf8-1}; do
    ln -fs "$(realpath --relative-to "subprojects" "$srcdir/c-$sp")" "subprojects/libc$sp"
  done
  patch -Np1 -i "../0001-units-Enable-statically.patch"
}

build() {
  # This helper function correctly formats shell flags into a Meson array string.
  format_meson_flags() {
    local flags_str=""
    for flag in "$@"; do
      flag_escaped="${flag//\'/\'\\\'\'}"
      flags_str+="'$flag_escaped', "
    done
    echo "[${flags_str%, }]"
  }

  local meson_options=(
    -D audit=true -D docs=false -D linux-4-17=true
    -D system-console-users=gdm,sddm,lightdm,lxdm
    --wrap-mode=forcefallback --buildtype=plain
    --native-file=meson-native-flags.ini
  )
  mkdir -p "$srcdir/build-pgo1" "$srcdir/build-pgo2" "$srcdir/build-final" "$srcdir/bolt_opt"
  mkdir -p "$srcdir/pgo_raw" "$srcdir/pgo_cs" "$srcdir/bolt_profiles"

  # --- Stage 1: Standard PGO Instrumentation & Profiling (via Test Suite) ---
  echo "--> Stage 1.1: Building with standard PGO instrumentation..."
  local pgo_instr_flags="-fprofile-generate=${srcdir}/pgo_raw"
  local cflags_array=$(format_meson_flags $CFLAGS $pgo_instr_flags)
  local cxxflags_array=$(format_meson_flags $CXXFLAGS $pgo_instr_flags)
  local ldflags_array=$(format_meson_flags $LDFLAGS $pgo_instr_flags)

  cat > meson-native-flags.ini <<EOF
[built-in options]
c_args = $cflags_array
cpp_args = $cxxflags_array
c_link_args = $ldflags_array
cpp_link_args = $ldflags_array
b_pie = 'false'
b_ndebug = 'false'

[binaries]
c = 'clang'
cpp = 'clang++'
ar = 'llvm-ar'
nm = 'llvm-nm'
ranlib = 'llvm-ranlib'
EOF

  arch-meson "$pkgbase" build-pgo1 "${meson_options[@]}"
  meson compile -C build-pgo1

  echo "--> Stage 1.2: Running test suite to generate standard PGO profile..."
  export LLVM_PROFILE_FILE="${srcdir}/pgo_raw/dbus-%p-%m.profraw"
  meson test -C build-pgo1 --verbose || echo "Warning: Some tests may have failed during PGO profile generation. This is often non-fatal."

  if ! ls "${srcdir}/pgo_raw"/*.profraw 1> /dev/null 2>&1; then echo "Error: No standard PGO profiles were generated." >&2; exit 1; fi
  llvm-profdata merge -output="${srcdir}/standard.profdata" "${srcdir}/pgo_raw"/*.profraw

  # --- Stage 2: Context-Sensitive PGO Instrumentation & Profiling ---
  echo "--> Stage 2.1: Building with CS-PGO instrumentation..."
  local cs_pgo_instr_flags="-fprofile-use=${srcdir}/standard.profdata -fcs-profile-generate=${srcdir}/pgo_cs"
  cflags_array=$(format_meson_flags $CFLAGS $cs_pgo_instr_flags)
  cxxflags_array=$(format_meson_flags $CXXFLAGS $cs_pgo_instr_flags)
  ldflags_array=$(format_meson_flags $LDFLAGS $cs_pgo_instr_flags)

  cat > meson-native-flags.ini <<EOF
[built-in options]
c_args = $cflags_array
cpp_args = $cxxflags_array
c_link_args = $ldflags_array
cpp_link_args = $ldflags_array
b_pie = 'false'
b_ndebug = 'false'

[binaries]
c = 'clang'
cpp = 'clang++'
ar = 'llvm-ar'
nm = 'llvm-nm'
ranlib = 'llvm-ranlib'
EOF

  arch-meson "$pkgbase" build-pgo2 "${meson_options[@]}"
  meson compile -C build-pgo2

  echo "--> Stage 2.2: Running test suite to generate CS-PGO profile..."
  export LLVM_PROFILE_FILE="${srcdir}/pgo_cs/dbus-%p-%m.cs.profraw"
  meson test -C build-pgo2 --verbose || echo "Warning: Some tests may have failed during CS-PGO profile generation. This is often non-fatal."

  if ls "${srcdir}/pgo_cs"/*.cs.profraw 1> /dev/null 2>&1; then
    llvm-profdata merge -output="${srcdir}/merged.profdata" "${srcdir}/pgo_cs"/*.cs.profraw "${srcdir}/standard.profdata"
  else
    echo "Warning: No CS-PGO profiles were generated. Falling back to standard PGO."
    cp "${srcdir}/standard.profdata" "${srcdir}/merged.profdata"
  fi

  # --- Stage 3: Final PGO-Optimized Build ---
  echo "--> Stage 3: Building final version with merged PGO optimizations..."
  local cflags_pgo_use_array=$(format_meson_flags $CFLAGS "-fprofile-use=${srcdir}/merged.profdata")
  local cxxflags_pgo_use_array=$(format_meson_flags $CXXFLAGS "-fprofile-use=${srcdir}/merged.profdata")
  local ldflags_pgo_use_array=$(format_meson_flags $LDFLAGS "-fprofile-use=${srcdir}/merged.profdata" "-Wl,--emit-relocs")

  cat > meson-native-flags.ini <<EOF
[built-in options]
c_args = $cflags_pgo_use_array
cpp_args = $cxxflags_pgo_use_array
c_link_args = $ldflags_pgo_use_array
cpp_link_args = $ldflags_pgo_use_array
b_pie = 'false'
b_ndebug = 'true'

[binaries]
c = 'clang'
cpp = 'clang++'
ar = 'llvm-ar'
nm = 'llvm-nm'
ranlib = 'llvm-ranlib'
EOF
  arch-meson "$pkgbase" build-final "${meson_options[@]}"
  meson compile -C build-final

  # --- Stage 4: BOLT Instrumentation & Profiling ---
  local binaries_to_bolt=("${srcdir}/build-final/src/dbus-broker" "${srcdir}/build-final/src/dbus-broker-launch")

  echo "--> Stage 4.1: Instrumenting PGO-optimized binaries for BOLT..."
  for bin_path in "${binaries_to_bolt[@]}"; do
      if [ -f "$bin_path" ]; then
        cp "$bin_path" "${bin_path}.pgo"
        llvm-bolt "${bin_path}.pgo" -instrument -o "$bin_path" --instrumentation-file="${srcdir}/bolt_profiles/prof.fdata" --instrumentation-file-append-pid
      fi
  done

  echo "--> Stage 4.2: Running test suite on instrumented binaries to generate BOLT profile..."
  DBUS_BROKER_TEST_BROKER="${srcdir}/build-final/src/dbus-broker" meson test -C build-final --verbose || echo "Warning: Some tests may have failed during BOLT profile generation. This is often non-fatal."

  echo "--> Stage 4.3: Restoring original PGO-optimized binaries..."
  for bin_path in "${binaries_to_bolt[@]}"; do
      if [ -f "${bin_path}.pgo" ]; then
        mv "${bin_path}.pgo" "$bin_path"
      fi
  done

  if ! ls "${srcdir}/bolt_profiles"/prof.fdata* 1> /dev/null 2>&1; then
    echo "Warning: No BOLT profiles generated. Skipping BOLT optimization."
    cp -r "$srcdir/build-final" "$srcdir/build"
    return 0
  fi
  merge-fdata "${srcdir}/bolt_profiles"/prof.fdata* > "${srcdir}/bolt.fdata"

  # --- Stage 5: Final BOLT Optimization ---
  echo "--> Stage 5: Applying BOLT optimizations..."
  local bolt_options=(
    "--data=${srcdir}/bolt.fdata" "--dyno-stats" "--lite=false"
    "--eliminate-unreachable" "--frame-opt=all" "--icf=safe"
    "--jump-tables=aggressive"
    "--reorder-blocks=ext-tsp" "--reorder-functions=cdsort" "--split-all-cold"
    "--split-eh" "--split-functions" "--use-gnu-stack" "--update-debug-sections"
  )
  for bin_name in dbus-broker dbus-broker-launch; do
      local bin_path="${srcdir}/build-final/src/${bin_name}"
      if [ -f "$bin_path" ]; then
        echo "--> BOLT optimizing ${bin_name}"
        if llvm-bolt "$bin_path" "${bolt_options[@]}" -o "${srcdir}/bolt_opt/${bin_name}" 2>&1 | tee "${srcdir}/bolt_${bin_name}.log"; then
          echo "--> ✓ BOLT SUCCESS: ${bin_name}"
        else
          echo "--> ✗ BOLT FAILED: ${bin_name}. Using PGO-optimized binary as fallback."
          cp "$bin_path" "${srcdir}/bolt_opt/${bin_name}"
        fi
      fi
  done

  cp -r "$srcdir/build-final" "$srcdir/build"
}

_pick() {
  local p="$1" f d; shift
  for f; do
    d="$srcdir/$p/${f#$pkgdir/}"
    mkdir -p "$(dirname "$d")"
    mv "$f" "$d"
    rmdir -p --ignore-fail-on-non-empty "$(dirname "$f")" || true
  done
}

package_dbus-broker-git() {
  depends+=('libaudit.so' 'libcap-ng.so' 'libexpat.so' 'libsystemd.so')
  provides=("dbus-broker")
  conflicts=("dbus-broker")

  meson install -C build --destdir "$pkgdir" --no-rebuild

  for bin_name in dbus-broker dbus-broker-launch; do
    if [ -f "${srcdir}/bolt_opt/${bin_name}" ]; then
      echo "--> Installing BOLT-optimized ${bin_name}"
      install -Dm755 "${srcdir}/bolt_opt/${bin_name}" "$pkgdir/usr/bin/${bin_name}"
    else
      echo "--> Using PGO-optimized ${bin_name}"
    fi
  done
  find "$pkgdir/usr/bin/" -type f -exec llvm-strip --strip-unneeded {} +
  _pick unit "$pkgdir"/usr/lib/systemd/{system,user}/dbus.service
}

package_dbus-broker-units-git() {
  pkgdesc+=" - Service units"
  depends=("dbus-broker-git=$pkgver-$pkgrel")
  provides=("dbus-broker-units" "dbus-units")
  conflicts=("dbus-broker-units" "dbus-daemon-units")
  install -d "$pkgdir"
  mv unit/* "$pkgdir"
}
