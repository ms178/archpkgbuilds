pkgbase="dbus-broker-git"
pkgname=(
  "dbus-broker-git"
  "dbus-broker-units-git"
)
pkgdesc="Linux D-Bus Message Broker"
pkgver=36.11.g5d34d91
pkgrel=1
arch=("x86_64")
options=(!strip)
license=("Apache-2.0")
url="https://github.com/bus1/dbus-broker/wiki"
depends=(
  'audit>=3.0'
  'expat>=2.2'
  'libcap-ng>=0.6'
  'systemd-libs>=230'
)
makedepends=(
  'git'
  'meson>=0.60.0'
  'systemd'
  'python-docutils'
  'clang'             # Use clang explicitly
  'lld'               # LLVM linker
  'llvm'              # Required for BOLT
)
source=(
  "$pkgbase::git+https://github.com/bus1/dbus-broker"
  "c-dvar-1::git+https://github.com/c-util/c-dvar#branch=v1"
  "c-ini-1::git+https://github.com/c-util/c-ini#branch=v1"
  "c-list-3::git+https://github.com/c-util/c-list#branch=v3"
  "c-rbtree-3::git+https://github.com/c-util/c-rbtree#branch=v3"
  "c-shquote-1::git+https://github.com/c-util/c-shquote#branch=v1"
  "c-stdaux-1::git+https://github.com/c-util/c-stdaux#branch=v1"
  "c-utf8-1::git+https://github.com/c-util/c-utf8#branch=v1"
  "0001-units-Enable-statically.patch"
)
sha256sums=(
  'SKIP'
  'SKIP'
  'SKIP'
  'SKIP'
  'SKIP'
  'SKIP'
  'SKIP'
  'SKIP'
  'SKIP'
)

pkgver() {
  cd "$pkgbase"
  git describe --long --tags | sed 's/^v//;s/-/./g'
}

prepare() {
  cd "$pkgbase"
  # Freeze the source code by checking out the current commit to ensure consistency
  git checkout "$(git rev-parse HEAD)"

  local sp
  for sp in {dvar-1,ini-1,list-3,rbtree-3,shquote-1,stdaux-1,utf8-1}; do
    ln -fs "$(realpath --relative-to "subprojects" "$srcdir/c-$sp")" "subprojects/libc$sp"
  done
  patch -Np1 -i "../0001-units-Enable-statically.patch"

  # Use Clang/LLVM toolchain
  export CC=clang
  export CXX=clang++
  export LD=lld
  export AR=llvm-ar
  export NM=llvm-nm
  export STRIP=llvm-strip
  export OBJCOPY=llvm-objcopy
  export OBJDUMP=llvm-objdump
  export READELF=llvm-readelf
  export RANLIB=llvm-ranlib
  export HOSTCC=clang
  export HOSTCXX=clang++
}

build() {
  local meson_options=(
    -D audit=true
    -D docs=false
    -D linux-4-17=true
    -D system-console-users=gdm,sddm,lightdm,lxdm
  )

  # Ensure a clean build environment by removing existing build directories
  rm -rf "$srcdir/build" "$srcdir/build-pgo1" "$srcdir/build-pgo2"

  # Create directories for PGO and BOLT profiles
  mkdir -p "$srcdir/pgo_raw"
  mkdir -p "$srcdir/pgo_cs"
  mkdir -p "$srcdir/bolt_profile"
  chmod -R u+w "$srcdir/pgo_raw" "$srcdir/pgo_cs" "$srcdir/bolt_profile"

  # Store original flags
  CFLAGS_ORIG="$CFLAGS"
  CXXFLAGS_ORIG="$CXXFLAGS"
  LDFLAGS_ORIG="$LDFLAGS"

  # Common optimization flags for all stages to ensure consistency
  local common_cflags+=" -fno-common -ffunction-sections -fdata-sections"
  local common_cxxflags+=" -fno-common -ffunction-sections -fdata-sections"
  local common_ldflags+=" -fuse-ld=lld -Wl,--lto-O3 -Wl,--gc-sections"

  # --- Stage 1: Standard PGO - First round with standard instrumentation ---
  echo "Stage 1: Building with standard PGO instrumentation..."

  # Reset flags to avoid contamination
  CFLAGS="$CFLAGS_ORIG"
  CXXFLAGS="$CXXFLAGS_ORIG"
  LDFLAGS="$LDFLAGS_ORIG"

  # Add standard PGO instrumentation flags with full LTO
  CFLAGS+=" $common_cflags -fprofile-generate=$srcdir/pgo_raw -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -mllvm -runtime-counter-relocation -mllvm -enable-value-profiling"
  CXXFLAGS+=" $common_cxxflags -fprofile-generate=$srcdir/pgo_raw -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -mllvm -runtime-counter-relocation -mllvm -enable-value-profiling"
  LDFLAGS+=" $common_ldflags -fprofile-generate=$srcdir/pgo_raw -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -mllvm -runtime-counter-relocation -mllvm -enable-value-profiling"

  # Configure and build with standard instrumentation
  arch-meson "$pkgbase" build-pgo1 "${meson_options[@]}" \
    --wrap-mode=forcefallback \
    -D python.bytecompile=2 \
    -D b_ndebug=false \
    -D b_pie=false \
    -D c_std=gnu18 \
    -D cpp_std=gnu++2a \
    --buildtype=plain  # Use plain to manually control optimization flags

  meson compile -C build-pgo1

  # Run tests to generate profile data
  echo "Running tests to generate standard PGO profile data..."
  if ! meson test -C build-pgo1; then
    echo "Warning: Some tests failed during standard PGO profile generation. Profile data may be incomplete."
  fi

  # Run additional workloads for better coverage
  if [ -x "$srcdir/build-pgo1/src/dbus-broker" ]; then
    echo "Running additional workloads for better PGO coverage..."
    # Start dbus-broker in the background with a realistic configuration
    "$srcdir/build-pgo1/src/dbus-broker" --scope system --log 4 --verbose > "$srcdir/pgo1.log" 2>&1 &
    broker_pid=$!
    sleep 1  # Give it time to start
    # Simulate some D-Bus activity (e.g., using dbus-send or similar tools)
    if command -v dbus-send >/dev/null 2>&1; then
      dbus-send --system --print-reply --dest=org.freedesktop.DBus /org/freedesktop/DBus org.freedesktop.DBus.ListNames || true
    fi
    # Stop the broker
    kill $broker_pid || true
    wait $broker_pid 2>/dev/null || true
  fi

  # Check if profile data exists
  if ! ls "$srcdir/pgo_raw"/*.profraw >/dev/null 2>&1; then
    echo "Error: No standard PGO profile data generated. Aborting."
    exit 1
  fi

  # Merge standard profile data
  echo "Merging standard PGO profile data..."
  if ! llvm-profdata merge -output="$srcdir/standard.profdata" "$srcdir/pgo_raw"/*.profraw; then
    echo "Error: Failed to merge standard PGO profile data."
    exit 1
  fi

  # --- Stage 2: Context-Sensitive PGO - Second round using first profile ---
  echo "Stage 2: Building with context-sensitive PGO instrumentation..."

  # Reset flags to avoid contamination
  CFLAGS="$CFLAGS_ORIG"
  CXXFLAGS="$CXXFLAGS_ORIG"
  LDFLAGS="$LDFLAGS_ORIG"

  # Update flags for CS-PGO instrumentation, using standard profile data
  CFLAGS+=" $common_cflags -fprofile-use=$srcdir/standard.profdata -fcs-profile-generate=$srcdir/pgo_cs -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -mllvm -runtime-counter-relocation -mllvm -enable-value-profiling"
  CXXFLAGS+=" $common_cxxflags -fprofile-use=$srcdir/standard.profdata -fcs-profile-generate=$srcdir/pgo_cs -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -mllvm -runtime-counter-relocation -mllvm -enable-value-profiling"
  LDFLAGS+=" $common_ldflags -fprofile-use=$srcdir/standard.profdata -fcs-profile-generate=$srcdir/pgo_cs -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -mllvm -runtime-counter-relocation -mllvm -enable-value-profiling"

  # Configure and build with CS-PGO instrumentation
  arch-meson "$pkgbase" build-pgo2 "${meson_options[@]}" \
    --wrap-mode=forcefallback \
    -D python.bytecompile=2 \
    -D b_ndebug=false \
    -D b_pie=false \
    -D c_std=gnu18 \
    -D cpp_std=gnu++2a \
    --buildtype=plain

  meson compile -C build-pgo2

  # Run tests to generate context-sensitive profile data
  echo "Running tests to generate context-sensitive PGO profile data..."
  if ! meson test -C build-pgo2; then
    echo "Warning: Some tests failed during context-sensitive PGO profile generation. Profile data may be incomplete."
  fi

  # Run the same additional workloads for better coverage
  if [ -x "$srcdir/build-pgo2/src/dbus-broker" ]; then
    echo "Running additional workloads for better PGO coverage..."
    # Start dbus-broker in the background with a realistic configuration
    "$srcdir/build-pgo2/src/dbus-broker" --scope system --log 4 --verbose > "$srcdir/pgo2.log" 2>&1 &
    broker_pid=$!
    sleep 1  # Give it time to start
    # Simulate some D-Bus activity
    if command -v dbus-send >/dev/null 2>&1; then
      dbus-send --system --print-reply --dest=org.freedesktop.DBus /org/freedesktop/DBus org.freedesktop.DBus.ListNames || true
    fi
    # Stop the broker
    kill $broker_pid || true
    wait $broker_pid 2>/dev/null || true
  fi

  # Check if profile data exists
  if ! ls "$srcdir/pgo_cs"/*.profraw >/dev/null 2>&1; then
    echo "Error: No context-sensitive PGO profile data generated. Aborting."
    exit 1
  fi

  # Merge context-sensitive profile with standard profile
  echo "Merging context-sensitive profile with standard profile..."
  if ! llvm-profdata merge -output="$srcdir/merged.profdata" "$srcdir/pgo_cs"/*.profraw "$srcdir/standard.profdata"; then
    echo "Error: Failed to merge context-sensitive PGO profile data."
    exit 1
  fi

  # --- Stage 3: Final build with merged profile data ---
  echo "Stage 3: Building final version with merged profile data..."

  # Reset flags to avoid contamination
  CFLAGS="$CFLAGS_ORIG"
  CXXFLAGS="$CXXFLAGS_ORIG"
  LDFLAGS="$LDFLAGS_ORIG"

  # Update flags for the final optimized build
  CFLAGS+=" $common_cflags -fprofile-use=$srcdir/merged.profdata"
  CXXFLAGS+=" $common_cxxflags -fprofile-use=$srcdir/merged.profdata"
  LDFLAGS+=" $common_ldflags -fprofile-use=$srcdir/merged.profdata -Wl,--emit-relocs"

  # Configure and build with final optimizations
  arch-meson "$pkgbase" build "${meson_options[@]}" \
    --wrap-mode=forcefallback \
    -D python.bytecompile=2 \
    -D b_ndebug=true \
    -D b_pie=false \
    -D c_std=gnu18 \
    -D cpp_std=gnu++2a \
    --buildtype=plain

  meson compile -C build

  # --- Stage 4: Instrument for BOLT ---
  echo "Creating instrumented binaries for BOLT..."

  # Array of binaries to instrument
  local binaries=(
    "$srcdir/build/src/dbus-broker"
    "$srcdir/build/src/dbus-broker-launch"
  )

  # Clean up build directory
  echo "Cleaning up build directory..."
  rm -f "$srcdir/build/src/"*.orig
  rm -f "$srcdir/build/src/"*.inst
  rm -f "$srcdir/build/src/"*.bolt

  # Ensure bolt_profile directory exists and is writable
  if [ ! -d "$srcdir/bolt_profile" ]; then
    mkdir -p "$srcdir/bolt_profile"
  fi
  chmod -R u+w "$srcdir/bolt_profile"

  # Ensure binaries exist and are executable
  for binary in "${binaries[@]}"; do
    # Skip if binary is a symlink
    if [ -L "$binary" ]; then
      echo "Skipping symlink: $binary"
      continue
    fi

    if [ ! -x "$binary" ]; then
      echo "Warning: Skipping missing or non-executable binary: $binary"
      continue
    fi

    # Debug binary information
    echo "Processing binary: $binary"
    echo "Binary type: $(file "$binary")"

    # Check if binary has already been processed by BOLT
    if readelf -S "$binary" 2>/dev/null | grep -q "__bolt_runtime_start" || file "$binary" | grep -q "BOLT"; then
      echo "Warning: Skipping already processed binary: $binary"
      continue
    fi

    # Backup original binary if not already backed up
    if [ ! -f "$binary.orig" ]; then
      cp "$binary" "$binary.orig"
    fi

    # Instrument binary, keeping it separate from the original
    echo "Instrumenting binary: $binary"
    if ! llvm-bolt "$binary" \
      --instrument \
      --lite=false \
      --instrumentation-file-append-pid \
      --instrumentation-file="$srcdir/bolt_profile/prof.fdata" \
      -o "$binary.inst"; then
      echo "Error: Failed to instrument binary: $binary"
      echo "Check if $srcdir/bolt_profile is writable and accessible."
      exit 1
    fi
  done

  # Run tests with instrumented binaries to generate BOLT profile data
  echo "Running tests with instrumented binaries for BOLT..."
  # Temporarily replace original binaries with instrumented ones for testing
  for binary in "${binaries[@]}"; do
    if [ -f "$binary.inst" ]; then
      mv "$binary" "$binary.bak"
      mv "$binary.inst" "$binary"
    fi
  done

  if ! meson test -C build; then
    echo "Warning: Some tests failed during BOLT profile generation. Profile data may be incomplete."
  fi

  # Run additional workloads for better coverage
  if [ -x "$srcdir/build/src/dbus-broker" ]; then
    echo "Running additional workloads for better BOLT coverage..."
    # Start dbus-broker in the background with a realistic configuration
    "$srcdir/build/src/dbus-broker" --scope system --log 4 --verbose > "$srcdir/bolt.log" 2>&1 &
    broker_pid=$!
    sleep 1  # Give it time to start
    # Simulate some D-Bus activity
    if command -v dbus-send >/dev/null 2>&1; then
    dbus-send --system --print-reply --dest=org.freedesktop.DBus /org/freedesktop/DBus org.freedesktop.DBus.ListNames || true
    fi
    # Stop the broker
    kill $broker_pid || true
    wait $broker_pid 2>/dev/null || true
  fi

  # Restore original binaries after testing
  for binary in "${binaries[@]}"; do
    if [ -f "$binary.bak" ]; then
      mv "$binary.bak" "$binary"
    fi
  done

  # Verify BOLT profile data files
  echo "Looking for BOLT profile data files..."
  ls -la "$srcdir/bolt_profile/"

  if ! ls "$srcdir/bolt_profile/prof.fdata"* >/dev/null 2>&1; then
    echo "Warning: No BOLT profile data files found. Skipping BOLT optimization."
    return 0
  fi

  echo "Merging BOLT profile data files..."
  if ! merge-fdata "$srcdir/bolt_profile/prof.fdata"* > "$srcdir/bolt_profile/merged.fdata"; then
    echo "Error: Failed to merge BOLT profile data files."
    exit 1
  fi

  # Verify merged BOLT profile data file size
  if [ ! -s "$srcdir/bolt_profile/merged.fdata" ]; then
    echo "Error: Merged BOLT profile data file is empty!"
    exit 1
  fi

  # --- Stage 5: Optimize with BOLT ---
  echo "Optimizing with BOLT..."

  local bolt_options=(
    --data "$srcdir/bolt_profile/merged.fdata"
    --dyno-stats
    --lite=false
    --eliminate-unreachable
    --frame-opt=all
    --icf=all
    --jump-tables=aggressive
    --min-branch-clusters
    --stoke
    --sctc-mode=always
    --plt=all
    --hot-data
    --hugify
    --frame-opt-rm-stores
    --peepholes=all
    --infer-stale-profile=1
    --x86-strip-redundant-address-size
    --indirect-call-promotion=all
    --reorder-blocks=ext-tsp
    --reorder-functions=cdsort
    --split-all-cold
    --split-eh
    --split-functions
    --split-strategy=cdsplit
    --use-gnu-stack
    --align-functions=32
  )

  # Create optimized binary directory
  mkdir -p "$srcdir/build/bolt"

  # Optimize binaries
  for binary in "${binaries[@]}"; do
    if [ -L "$binary" ]; then
      echo "Skipping symlink: $binary"
      continue
    fi

    binary_name=$(basename "$binary")
    if [ ! -f "${binary}.orig" ]; then
      echo "Error: Original binary not found for ${binary}. Aborting."
      exit 1
    fi

    echo "Optimizing binary: $binary"
    if ! llvm-bolt "${binary}.orig" \
      "${bolt_options[@]}" \
      -o "$srcdir/build/bolt/${binary_name}.bolt"; then
      echo "Warning: BOLT optimization failed for ${binary}. Falling back to original binary."
    fi
  done
}

_pick() {
  local p="$1" f d; shift
  for f; do
    d="$srcdir/$p/${f#$pkgdir/}"
    mkdir -p "$(dirname "$d")"
    mv "$f" "$d"
    rmdir -p --ignore-fail-on-non-empty "$(dirname "$f")"
  done
}

package_dbus-broker-git() {
  depends+=(
    "libaudit.so"
    "libcap-ng.so"
    "libexpat.so"
    "libsystemd.so"
  )
  provides=("dbus-broker")
  conflicts=("dbus-broker")

  # Restore original binaries to the build directory before installation
  local binaries=(
    "$srcdir/build/src/dbus-broker"
    "$srcdir/build/src/dbus-broker-launch"
  )

  for binary in "${binaries[@]}"; do
    if [ -f "$binary.orig" ]; then
      cp "$binary.orig" "$binary"
    fi
  done

  # Install all files normally (using original binaries)
  meson install -C build --destdir "$pkgdir"

  # Replace dbus-broker with BOLT-optimized version if it exists, otherwise use original
  if [ -f "$srcdir/build/bolt/dbus-broker.bolt" ]; then
    install -Dm755 "$srcdir/build/bolt/dbus-broker.bolt" "$pkgdir/usr/bin/dbus-broker"
    echo "Installed BOLT-optimized dbus-broker"
  else
    echo "Warning: BOLT-optimized dbus-broker not found. Using original binary."
    install -Dm755 "$srcdir/build/src/dbus-broker" "$pkgdir/usr/bin/dbus-broker"
  fi

  # Replace dbus-broker-launch with BOLT-optimized version if it exists, otherwise use original
  if [ -f "$srcdir/build/bolt/dbus-broker-launch.bolt" ]; then
    install -Dm755 "$srcdir/build/bolt/dbus-broker-launch.bolt" "$pkgdir/usr/bin/dbus-broker-launch"
    echo "Installed BOLT-optimized dbus-broker-launch"
  else
    echo "Warning: BOLT-optimized dbus-broker-launch not found. Using original binary."
    install -Dm755 "$srcdir/build/src/dbus-broker-launch" "$pkgdir/usr/bin/dbus-broker-launch"
  fi

  # Use LLVM strip
  find "$pkgdir" -type f \( -name '*.so*' -o -name '*.a' -o -executable \) -print0 | while IFS= read -r -d '' file; do
    if llvm-strip --strip-unneeded "$file" 2>/dev/null || llvm-strip --strip-all "$file" 2>/dev/null; then
      echo "Stripped: $file"
    else
      echo "Skipping: $file (not a valid object file)" >&2
    fi
  done

  _pick unit "$pkgdir"/usr/lib/systemd/{system,user}/dbus.service
}

package_dbus-broker-units-git() {
  pkgdesc+=" - Service units"
  depends=("dbus-broker-git")
  provides=(
    "dbus-broker-units"
    "dbus-units"
  )
  conflicts=(
    "dbus-broker-units"
    "dbus-daemon-units"
  )
  mv unit/* "$pkgdir"
}
