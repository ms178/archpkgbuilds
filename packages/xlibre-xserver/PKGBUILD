pkgbase="xlibre-xserver"
pkgname=("${pkgbase}"{,-bootstrap,-common,-devel,-xephyr,-xnest,-xvfb})
pkgver=25.0.0.14
pkgrel=2.1
arch=('aarch64' 'x86_64')
url="https://github.com/x11libre/xserver"
license=('LicenseRef-Adobe-Display-PostScript' 'BSD-3-Clause' 'LicenseRef-DEC-3-Clause'
         'HPND' 'LicenseRef-HPND-sell-MIT-disclaimer-xserver' 'HPND-sell-variant'
         'ICU' 'ISC' 'MIT' 'MIT-open-group' 'NTP' 'SGI-B-2.0' 'SMLNJ' 'X11'
         'X11-distribute-modifications-variant')
makedepends=('libepoxy' 'libpciaccess' 'libunwind' 'libx11' 'libxaw' 'libxcvt'
             'libxfont2' 'libxi' 'libxkbfile' 'libxmu' 'libxrender' 'libxres'
             'libxshmfence>=1.1' 'libxtst' 'libxv' 'mesa' 'mesa-libgl'
             'meson>=0.58' 'pixman-git' 'systemd>=209' 'xcb-util'
             'xcb-util-image' 'xcb-util-keysyms' 'xcb-util-renderutil'
             'xcb-util-wm' 'xorg-font-util' 'xorg-util-macros' 'xorg-xkbcomp'
             'xorgproto-git' 'xtrans>=1.3.5'
             'clang' 'llvm'
             'xorg-xdpyinfo' 'xorg-xprop' 'xorg-xrandr' 'xorg-x11perf'
             'xclip' 'mesa-demos' 'glmark2' 'vulkan-tools')
groups=('xlibre')
options=('!emptydirs')
_pkgsrc="xserver-xlibre-xserver-${pkgver}"
source=("${_pkgsrc}.tar.gz::${url}/archive/refs/tags/xlibre-xserver-${pkgver}.tar.gz"
        "xvfb-run"{,.1}
        ms178-1.patch
        ms178-2.patch
        )
b2sums=('d6e7a36b868ce83fa49b4bae9d4a4136bef6e0769680e5590aeaad979c2fc39685c481f64c4f527dc9c796ff4f1d62156ccddd6738d1f9cef9a7a0fc01f191fa'
        '58c48ed893be841d14d3a09c9e1092a6da7bcb7fb773e1bf634c50a12e51ea3ad4aeba3843164a2834ee9f8ea95a7bca8b3ce8196a5328ce782724c082cb416f'
        '0e3738e099ee2b958df3e5a5adbdfcbd1150ad64645fdae70d74b50123c3f3d43f9f95f5e4bac82bf5c72b3deb978655b8c3177d37de0bd0a2a6e0e343863511')

_extra_instr='-g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling'

prepare() {
  rm -rf build-pgo build-final fakeinstall pgo-gen bolt bolt_inst bolt_opt inst-pgo

  cd "${_pkgsrc}"
  for srcfile in "${source[@]}"; do
    local s="${srcfile%%::*}"; s="${s##*/}"
    [[ $s = *.patch ]] || continue
    patch --forward --strip=1 < "${srcdir}/$s"
  done
}

_run_xserver_workload_xvfb() {
  local bindir="$1" mode="${2:-pgo}"
  local xvfb="$bindir/Xvfb"
  command -v xdpyinfo >/dev/null 2>&1 || return 0
  [[ -x "$xvfb" ]] || return 0

  local d=":93"
  "$xvfb" "$d" -screen 0 1280x720x24 -nolisten tcp >/dev/null 2>&1 &
  local srv=$!
  for _ in {1..50}; do DISPLAY="$d" xdpyinfo >/dev/null 2>&1 && break; sleep 0.1; done
  DISPLAY="$d" xdpyinfo >/dev/null 2>&1 || { kill "$srv" 2>/dev/null || true; return 0; }

  echo "==> PGO: Xvfb workload ($mode) on $d"
  DISPLAY="$d" xdpyinfo -ext all >/dev/null 2>&1 || true
  DISPLAY="$d" xrandr --query >/dev/null 2>&1 || true
  DISPLAY="$d" xprop -root >/dev/null 2>&1 || true
  echo pgo-test | DISPLAY="$d" xclip -selection clipboard >/dev/null 2>&1 || true
  DISPLAY="$d" xclip -o -selection clipboard >/dev/null 2>&1 || true
  DISPLAY="$d" glxinfo -B >/dev/null 2>&1 || true
  DISPLAY="$d" x11perf -time 1 -rect10 >/dev/null 2>&1 || true
  DISPLAY="$d" x11perf -time 1 -fillrect10 >/dev/null 2>&1 || true
  DISPLAY="$d" x11perf -time 1 -copyarea10 >/dev/null 2>&1 || true
  DISPLAY="$d" x11perf -time 1 -line10 >/dev/null 2>&1 || true
  DISPLAY="$d" x11perf -time 1 -text >/dev/null 2>&1 || true
  DISPLAY="$d" x11perf -time 1 -putimage10 >/dev/null 2>&1 || true
  timeout -k 2 7 env DISPLAY="$d" glmark2 -b terrain:duration=2000 >/dev/null 2>&1 || true
  timeout -k 2 7 env DISPLAY="$d" glmark2 -b shading:shading=phong:duration=2000 >/dev/null 2>&1 || true
  timeout -k 2 6 env DISPLAY="$d" vkcube >/dev/null 2>&1 || true

  kill -INT "$srv" 2>/dev/null || true
  wait "$srv" 2>/dev/null || true
}

build() {
  local SAN_CFLAGS="${CFLAGS/-fno-plt}"
  local SAN_CXXFLAGS="${CXXFLAGS/-fno-plt}"
  local SAN_LDFLAGS="${LDFLAGS/-Wl,-z,now}"

  local gen_dir="$srcdir/pgo-gen"
  mkdir -p "$gen_dir" "$srcdir"/{bolt,bolt_inst,bolt_opt,fakeinstall}

  local c_args_gen="$SAN_CFLAGS $_extra_instr -fprofile-generate=$gen_dir"
  local cxx_args_gen="$SAN_CXXFLAGS $_extra_instr -fprofile-generate=$gen_dir"
  local link_args_gen="$SAN_LDFLAGS -fprofile-generate=$gen_dir"

  echo "==> PASS 1: PGO-instrumented build"
  CFLAGS='' CXXFLAGS='' LDFLAGS='' \
  arch-meson "$_pkgsrc" "${_pkgsrc}/build-pgo" \
    -Dipv6=true -Dxvfb=true -Dxnest=true -Dxcsecurity=true -Dxorg=true \
    -Dxephyr=true -Dglamor=true -Dudev=true -Ddtrace=false \
    -Dsystemd_logind=true -Dsuid_wrapper=true -Dlibunwind=true \
    -Dxkb_dir=/usr/share/X11/xkb -Dxkb_output_dir=/var/lib/xkb \
    -Dwerror=false -Db_ndebug=true -Db_pie=false -Db_lto=false \
    -Dc_std=gnu2x -Dcpp_std=gnu++2a --buildtype=release \
    -Dc_args="$c_args_gen" -Dcpp_args="$cxx_args_gen" \
    -Dc_link_args="$link_args_gen" -Dcpp_link_args="$link_args_gen"

  meson compile -C "${_pkgsrc}/build-pgo"

  local inst_pgo="$srcdir/inst-pgo"
  DESTDIR="$inst_pgo" meson install -C "${_pkgsrc}/build-pgo"

  echo "==> PASS 1: PGO training"
  LLVM_PROFILE_FILE="$gen_dir/xorg-%p.profraw" \
    _run_xserver_workload_xvfb "$inst_pgo/usr/bin" pgo

  if compgen -G "$gen_dir"/*.profraw >/dev/null; then
    echo "==> PASS 1: Merging PGO profiles"
    llvm-profdata merge -o "$srcdir/xorg.profdata" "$gen_dir"/*.profraw
  else
    echo "==> PASS 1: No profiles generated, continuing without PGO"
    : > "$srcdir/xorg.profdata" || true
  fi

  local c_args_fin="$SAN_CFLAGS"
  local cxx_args_fin="$SAN_CXXFLAGS"
  local link_args_fin="$SAN_LDFLAGS -Wl,--emit-relocs"

  if [[ -s "$srcdir/xorg.profdata" ]]; then
    c_args_fin+=" -fprofile-use=$srcdir/xorg.profdata -Wno-profile-instr-unprofiled"
    cxx_args_fin+=" -fprofile-use=$srcdir/xorg.profdata -Wno-profile-instr-unprofiled"
    link_args_fin+=" -fprofile-use=$srcdir/xorg.profdata"
  fi

  echo "==> PASS 2: Final optimized build"
  CFLAGS='' CXXFLAGS='' LDFLAGS='' \
  arch-meson "$_pkgsrc" "${_pkgsrc}/build-final" \
    -Dipv6=true -Dxvfb=true -Dxnest=true -Dxcsecurity=true -Dxorg=true \
    -Dxephyr=true -Dglamor=true -Dudev=true -Ddtrace=false \
    -Dsystemd_logind=true -Dsuid_wrapper=true -Dlibunwind=true \
    -Dxkb_dir=/usr/share/X11/xkb -Dxkb_output_dir=/var/lib/xkb \
    -Dwerror=false -Db_ndebug=true -Db_pie=false -Db_lto=true \
    -Dc_std=gnu2x -Dcpp_std=gnu++2a --buildtype=release \
    -Dc_args="$c_args_fin" -Dcpp_args="$cxx_args_fin" \
    -Dc_link_args="$link_args_fin" -Dcpp_link_args="$link_args_fin"

  meson compile -C "${_pkgsrc}/build-final"
  DESTDIR="$srcdir/fakeinstall" meson install -C "${_pkgsrc}/build-final"

  if command -v llvm-bolt >/dev/null 2>&1; then
    echo "==> BOLT: Instrumentation"
    local bindir="$srcdir/fakeinstall/usr/bin"
    local bins=()
    [[ -x "$bindir/Xvfb" ]] && bins+=("$bindir/Xvfb")
    [[ -x "$bindir/Xephyr" ]] && bins+=("$bindir/Xephyr")

    for b in "${bins[@]}"; do
      local base="$(basename "$b")"
      cp -f "$b" "$srcdir/bolt/${base}.orig"
      llvm-bolt "$b" --relocs --lite --instrument \
        --instrumentation-file="$srcdir/bolt/${base}.fdata" \
        --instrumentation-file-append-pid \
        -o "$srcdir/bolt_inst/${base}" 2>/dev/null || continue
      install -m755 "$srcdir/bolt_inst/${base}" "$b"
    done

    echo "==> BOLT: Training"
    BOLT_INSTRUMENTATION_FILE_APPEND_PID=1 \
      _run_xserver_workload_xvfb "$bindir" bolt

    for orig in "$srcdir"/bolt/*.orig; do
      [[ -f "$orig" ]] || continue
      local base="$(basename "$orig" .orig)"
      local merged="$srcdir/bolt/${base}.merged.fdata"

      if compgen -G "$srcdir/bolt/${base}.fdata".* >/dev/null; then
        if command -v merge-fdata >/dev/null 2>&1; then
          merge-fdata "$srcdir/bolt/${base}.fdata".* -o "$merged" 2>/dev/null || continue
        else
          cat "$srcdir/bolt/${base}.fdata".* > "$merged" 2>/dev/null || continue
        fi
      elif [[ -s "$srcdir/bolt/${base}.fdata" ]]; then
        cp -f "$srcdir/bolt/${base}.fdata" "$merged"
      else
        continue
      fi

      [[ -s "$merged" ]] || continue

      local align_flags=(--align-blocks)
      llvm-bolt --help 2>&1 | grep -q -- '--block-alignment' && \
        align_flags=(--align-blocks --block-alignment=32)

      if llvm-bolt "$orig" --relocs --data="$merged" \
            --reorder-blocks=ext-tsp --reorder-functions=cdsort \
            --split-functions --split-strategy=cdsplit --icf=all \
            --jump-tables=move --peepholes=all --reg-reassign \
            --use-aggr-reg-reassign "${align_flags[@]}" --dyno-stats \
            -o "$srcdir/bolt_opt/$base" 2>/dev/null; then
        echo "==> BOLT: Optimized $base"
        install -m755 "$srcdir/bolt_opt/$base" "$bindir/$base"
      fi
    done
  fi
}

package_xlibre-xserver() {
  pkgdesc="XLibre X server"
  depends=('dbus' 'glibc' 'libdrm' 'libepoxy' 'libgl' 'libpciaccess' 'libtirpc'
           'libunwind' 'libxau' 'libxcvt' 'libxdmcp' 'libxfont2' 'libbsd'
           'libxshmfence>=1.1' 'nettle' 'pixman-git' 'sh'
           'systemd-libs>=209' 'xlibre-xserver-common' 'xlibre-xf86-input-libinput'
           "${pkgbase}-common=${pkgver}-${pkgrel}")
  provides=('X-ABI-VIDEODRV_VERSION=28.0' 'X-ABI-XINPUT_VERSION=26.0'
            'X-ABI-EXTENSION_VERSION=11.0' 'x-server' 'xorg-server' 'xlibre-server')
  conflicts=('xorg-server' 'nvidia-utils<=331.20' 'glamor-egl' 'xf86-video-modesetting' 'xlibre-server')
  replaces=('xlibre-xserver-bootstrap' 'glamor-egl' 'xf86-video-modesetting')
  options=('emptydirs')
  install="${pkgname}.install"

  cp -a "${srcdir}/fakeinstall"/. "${pkgdir}"/
  install -vdm755 "${pkgdir}/etc/X11/xorg.conf.d"
  cd "${pkgdir}/usr"
  rm -rf include lib/pkgconfig share/aclocal
  rm -f lib/xorg/protocol.txt share/man/man1/Xserver.1
  find . -type f,l \( -name '*Xephyr*' -o -name '*Xnest*' -o -name '*Xvfb*' \) -delete
}

package_xlibre-xserver-bootstrap() {
  pkgdesc="XLibre X server (bootstrap)"
  depends=('dbus' 'glibc' 'libdrm' 'libepoxy' 'libgl' 'libpciaccess' 'libtirpc'
           'libunwind' 'libxau' 'libxcvt' 'libxdmcp' 'libxfont2' 'libmd'
           'libxshmfence>=1.1' 'nettle' 'pixman-git' 'sh' 'systemd-libs>=209'
           "${pkgbase}-common=${pkgver}-${pkgrel}")
  provides=("${pkgbase}" 'X-ABI-VIDEODRV_VERSION=28.0' 'X-ABI-XINPUT_VERSION=26.0'
            'X-ABI-EXTENSION_VERSION=11.0' 'x-server' 'xorg-server')
  conflicts=({xlibre,xorg}'-server' 'nvidia-utils<=331.20' 'glamor-egl' 'xf86-video-modesetting')
  options=('emptydirs')
  install="${pkgname}.install"

  cp -a "${srcdir}/fakeinstall"/. "${pkgdir}"/
  install -vdm755 "${pkgdir}/etc/X11/xorg.conf.d"
  cd "${pkgdir}/usr"
  rm -rf include lib/pkgconfig share/aclocal
  rm -f lib/xorg/protocol.txt share/man/man1/Xserver.1
  find . -type f,l \( -name '*Xephyr*' -o -name '*Xnest*' -o -name '*Xvfb*' \) -delete
}

package_xlibre-xserver-common() {
  pkgdesc="XLibre server common files"
  arch=('any')
  depends=('xkeyboard-config' 'xorg-setxkbmap' 'xorg-xkbcomp')
  provides=('xorg-server-common' 'xlibre-server-common')
  conflicts=('xorg-server-common' 'xlibre-server-common')

  install -vDm644 "${srcdir}/fakeinstall/usr/lib/xorg/protocol.txt" \
                  "${pkgdir}/usr/lib/xorg/protocol.txt"
  install -vDm644 "${srcdir}/fakeinstall/usr/share/man/man1/Xserver.1" \
                  "${pkgdir}/usr/share/man/man1/Xserver.1"
  install -vDm644 "${srcdir}/${_pkgsrc}/COPYING" \
                  "${pkgdir}/usr/share/licenses/${pkgbase}/COPYING"
  install -vDm644 "${srcdir}/${_pkgsrc}/xkb/README.compiled" \
                  "${pkgdir}/var/lib/xkb/README.compiled"
}

package_xlibre-xserver-devel() {
  pkgdesc="Development files for the XLibre X server"
  arch=('any')
  depends=('libpciaccess' 'mesa' 'pixman-git' 'xorgproto-git' 'xorg-util-macros')
  provides=('xorg-server-devel' 'xlibre-server-devel')
  conflicts=('xorg-server-devel' 'xlibre-server-devel')

  cp -a "${srcdir}/fakeinstall"/. "${pkgdir}"/
  find "${pkgdir}" -type f,l ! \( -name '*.h' -o -name '*.pc' -o -name '*.m4' \) -delete
}

package_xlibre-xserver-xephyr() {
  pkgdesc="A nested XLibre server that runs as an X application"
  depends=('glibc' 'libepoxy' 'libgl' 'libtirpc' 'libunwind' 'libx11' 'libxau'
           'libxdmcp' 'libxfont2' 'libxshmfence' 'nettle' 'pixman-git'
           'systemd-libs>=209' 'xcb-util' 'xcb-util-image' 'xcb-util-keysyms'
           'xcb-util-renderutil' 'xcb-util-wm' "${pkgbase}-common=${pkgver}-${pkgrel}")
  provides=('xorg-server-xephyr' 'xlibre-server-xephyr')
  conflicts=('xorg-server-xephyr' 'xlibre-server-xephyr')

  cp -a "${srcdir}/fakeinstall"/. "${pkgdir}"/
  find "${pkgdir}" -type f,l ! -name '*Xephyr*' -delete
}

package_xlibre-xserver-xnest() {
  pkgdesc="A nested XLibre server that runs as an X application"
  depends=('glibc' 'libtirpc' 'libunwind' 'libx11' 'libxau' 'libxdmcp'
           'libxext' 'libxfont2' 'nettle' 'pixman-git'
           'systemd-libs>=209' "${pkgbase}-common=${pkgver}-${pkgrel}")
  provides=('xorg-server-xnest' 'xlibre-server-xnest')
  conflicts=('xorg-server-xnest' 'xlibre-server-xnest')

  cp -a "${srcdir}/fakeinstall"/. "${pkgdir}"/
  find "${pkgdir}" -type f,l ! -name '*Xnest*' -delete
}

package_xlibre-xserver-xvfb() {
  pkgdesc="Virtual framebuffer XLibre server"
  license=('MIT' 'GPL-2.0-only')
  depends=('glibc' 'libgl' 'libtirpc' 'libunwind' 'libxau' 'libxdmcp'
           'libxfont2' 'nettle' 'pixman-git' 'sh' 'systemd-libs>=209'
           "${pkgbase}-common=${pkgver}-${pkgrel}" 'xorg-xauth')
  provides=('xorg-server-xvfb' 'xlibre-server-xvfb')
  conflicts=('xorg-server-xvfb' 'xlibre-server-xvfb')

  cp -a "${srcdir}/fakeinstall"/. "${pkgdir}"/
  find "${pkgdir}" -type f,l ! -name '*Xvfb*' -delete
  install -vDm755 "${srcdir}/xvfb-run" "${pkgdir}/usr/bin/xvfb-run"
  install -vDm644 "${srcdir}/xvfb-run.1" "${pkgdir}/usr/share/man/man1/xvfb-run.1"
}
