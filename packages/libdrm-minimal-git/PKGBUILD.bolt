pkgname=libdrm-minimal-git
_realname=libdrm
pkgver=2.4.124.r11.g614f8d73
pkgrel=1
pkgdesc="Userspace interface to kernel DRM services, master git version, PGO/BOLT optimized"
arch=(i686 x86_64)
license=('custom')
depends=('libpciaccess')
makedepends=('libxslt' 'meson' 'git' 'ninja' 'llvm' 'perf' 'vulkan-tools' 'glmark2')
#checkdepends=('cairo' 'cunit')
url="http://dri.freedesktop.org/"
provides=('libdrm' 'libdrm-git')
conflicts=('libdrm')

source=("git+https://gitlab.freedesktop.org/mesa/drm.git"
        COPYING)
sha512sums=('SKIP'
            'b0ca349b882a4326b19f81f22804fabdb6fb7aef31cdc7b16b0a7ae191bfbb50c7daddb2fc4e6c33f1136af06d060a273de36f6f3412ea326f16fa4309fda660')

pkgver() {
    cd drm
    git describe --long --tags --abbrev=8 | sed 's/^libdrm-//;s/\([^-]*-g\)/r\1/;s/-/./g'
}

prepare() {
    if [  -d _build ]; then
        rm -rf _build
    fi
    if [  -d _build-stage1 ]; then
        rm -rf _build-stage1
    fi
    if [  -d _build-stage2 ]; then
        rm -rf _build-stage2
    fi
    if [  -d bolt_profile ]; then
        rm -rf bolt_profile
    fi
    mkdir -p bolt_profile
}

build() {
    # Stage 1: First Instrumented build for standard PGO
    export LLVM_PROFILE_FILE="$srcdir/stage1-%p.profraw"
    CFLAGS_ORIG="$CFLAGS"
    CXXFLAGS_ORIG="$CXXFLAGS"
    LDFLAGS_ORIG="$LDFLAGS"

    CFLAGS+=" -fprofile-generate -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"
    CXXFLAGS+=" -fprofile-generate -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"
    LDFLAGS+=" -fprofile-generate -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"

    meson setup drm _build-stage1 \
        --prefix /usr \
        -D python.bytecompile=2 \
        -D b_ndebug=false \
        -D b_pie=false \
        -D c_std=gnu18 \
        -D cpp_std=gnu++2a \
        -D b_lto=true \
        --unity=on \
        --buildtype=debug \
        --wrap-mode=nofallback \
        -D udev=false \
        -D valgrind=disabled \
        -D freedreno=disabled \
        -D vc4=disabled \
        -D vmwgfx=disabled \
        -D amdgpu=enabled \
        -D radeon=enabled \
        -D intel=disabled \
        -D nouveau=disabled \
        -D man-pages=disabled
    meson configure _build-stage1 --no-pager
    meson compile -C _build-stage1

    # Run vkcube and glmark2 for PGO profile data generation
    echo "Running vkcube for standard PGO profiling..."
    LD_LIBRARY_PATH="$srcdir/_build-stage1/amdgpu:$srcdir/_build-stage1:$LD_LIBRARY_PATH" timeout 30 vkcube || true

    echo "Running glmark2 for standard PGO profiling..."
    LD_LIBRARY_PATH="$srcdir/_build-stage1/amdgpu:$srcdir/_build-stage1:$LD_LIBRARY_PATH" timeout 30 glmark2 --run-forever || true

    # Merge profraw files from stage 1
    llvm-profdata merge -output="$srcdir/stage1.profdata" "$srcdir"/stage1-*.profraw

    # Clean up stage 1 profraw files
    rm -f "$srcdir"/stage1-*.profraw

    # Stage 2: Context-sensitive PGO instrumentation
    export LLVM_PROFILE_FILE="$srcdir/stage2-%p.profraw"

    CFLAGS="$CFLAGS_ORIG -fprofile-use=$srcdir/stage1.profdata -fcs-profile-generate -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"
    CXXFLAGS="$CXXFLAGS_ORIG -fprofile-use=$srcdir/stage1.profdata -fcs-profile-generate -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"
    LDFLAGS="$LDFLAGS_ORIG -fprofile-use=$srcdir/stage1.profdata -fcs-profile-generate -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"

    meson setup drm _build-stage2 \
        --prefix /usr \
        -D python.bytecompile=2 \
        -D b_ndebug=false \
        -D b_pie=false \
        -D c_std=gnu18 \
        -D cpp_std=gnu++2a \
        -D b_lto=true \
        --unity=on \
        --buildtype=debug \
        --wrap-mode=nofallback \
        -D udev=false \
        -D valgrind=disabled \
        -D freedreno=disabled \
        -D vc4=disabled \
        -D vmwgfx=disabled \
        -D amdgpu=enabled \
        -D radeon=enabled \
        -D intel=disabled \
        -D nouveau=disabled \
        -D man-pages=disabled
    meson configure _build-stage2 --no-pager
    meson compile -C _build-stage2

    # Run same workloads for context-sensitive profile data
    echo "Running vkcube for context-sensitive PGO profiling..."
    LD_LIBRARY_PATH="$srcdir/_build-stage2/amdgpu:$srcdir/_build-stage2:$LD_LIBRARY_PATH" timeout 30 vkcube || true

    echo "Running glmark2 for context-sensitive PGO profiling..."
    LD_LIBRARY_PATH="$srcdir/_build-stage2/amdgpu:$srcdir/_build-stage2:$LD_LIBRARY_PATH" timeout 30 glmark2 --run-forever || true

    # Merge profraw files from stage 2
    llvm-profdata merge -output="$srcdir/stage2.profdata" "$srcdir"/stage2-*.profraw

    # Merge both profiles for final build
    llvm-profdata merge -output="$srcdir/combined.profdata" "$srcdir/stage1.profdata" "$srcdir/stage2.profdata"

    # Clean up stage 2 profraw files
    rm -f "$srcdir"/stage2-*.profraw

    # Stage 3: Final build with combined profile data and prepare for BOLT
    CFLAGS="$CFLAGS_ORIG -fprofile-use=$srcdir/combined.profdata"
    CXXFLAGS="$CXXFLAGS_ORIG -fprofile-use=$srcdir/combined.profdata"
    LDFLAGS="$LDFLAGS_ORIG -fprofile-use=$srcdir/combined.profdata -Wl,--emit-relocs"

    meson setup drm _build \
        --prefix /usr \
        -D python.bytecompile=2 \
        -D b_ndebug=true \
        -D b_pie=false \
        -D c_std=gnu18 \
        -D cpp_std=gnu++2a \
        -D b_lto=true \
        --unity=on \
        --buildtype=release \
        --wrap-mode=nofallback \
        -D udev=false \
        -D valgrind=disabled \
        -D freedreno=disabled \
        -D vc4=disabled \
        -D vmwgfx=disabled \
        -D amdgpu=enabled \
        -D radeon=enabled \
        -D intel=disabled \
        -D nouveau=disabled \
        -D man-pages=disabled
    meson configure _build --no-pager
    meson compile -C _build
}

check() {
  cd "$srcdir"

  # Run vkcube and glmark2 for BOLT profiling
  echo "Running vkcube for BOLT profiling..."
  LD_LIBRARY_PATH="$srcdir/_build/amdgpu:$srcdir/_build:$LD_LIBRARY_PATH" perf record --max-size=6G -F 5000 -e branch-instructions:u,cycles:u,cache-misses:u,branch-misses:u,branches:u,branch-loads:u,branch-load-misses:u,iTLB-load-misses:u,dTLB-store-misses:u,dTLB-load-misses:u,L1-icache-load-misses:u,LLC-load-misses:u -b -- timeout 30 vkcube || true

  echo "Running glmark2 for BOLT profiling..."
  LD_LIBRARY_PATH="$srcdir/_build/amdgpu:$srcdir/_build:$LD_LIBRARY_PATH" perf record --max-size=6G -F 5000 -e branch-instructions:u,cycles:u,cache-misses:u,branch-misses:u,branches:u,branch-loads:u,branch-load-misses:u,iTLB-load-misses:u,dTLB-store-misses:u,dTLB-load-misses:u,L1-icache-load-misses:u,LLC-load-misses:u -b -- timeout 30 glmark2 --run-forever || true

  # Convert perf data to BOLT profile format
  # Target specific .so files for perf2bolt
  for lib in "$srcdir/_build/amdgpu/libdrm_amdgpu.so.1.124.0"* "$srcdir/_build/libdrm.so.2.124.0"* ; do
    if [ -f "$lib" ]; then
        perf2bolt "$lib" -p perf.data -o "$srcdir/bolt_profile/$(basename "$lib").fdata"
    fi
  done

  # Create optimized binary directory
  mkdir -p "$srcdir/_build/bolt"

  # Optimize using BOLT with specified options
  # Target specific .so files for llvm-bolt
  for lib in "$srcdir/_build/amdgpu/libdrm_amdgpu.so.1.124.0"* "$srcdir/_build/libdrm.so.2.124.0"* ; do
    if [ -f "$lib" ]; then
        llvm-bolt "$lib" \
          --data "$srcdir/bolt_profile/$(basename "$lib").fdata" \
          --dyno-stats \
          --lite=false \
          --cu-processing-batch-size=64 \
          --eliminate-unreachable \
          --frame-opt=all \
          --icf=all \
          --jump-tables=aggressive \
          --min-branch-clusters \
          --stoke \
          --sctc-mode=always \
          --plt=all \
          --hot-data \
          --hugify \
          --frame-opt-rm-stores \
          --peepholes=all \
          --infer-stale-profile=1 \
          --x86-strip-redundant-address-size \
          --indirect-call-promotion=all \
          --reg-reassign \
          --use-aggr-reg-reassign \
          --reorder-blocks=ext-tsp \
          --reorder-functions=cdsort \
          --split-all-cold \
          --split-eh \
          --split-functions \
          --split-strategy=cdsplit \
          --skip-funcs=.text/1 \
          -o "$srcdir/_build/bolt/$(basename "$lib")"
      fi
  done
}

package() {
  DESTDIR="$pkgdir" meson install -C _build

  # Replace the libraries with BOLT-optimized versions if they exist
  find "$srcdir/_build/bolt/" -name "libdrm*.so.*" -print0 | while IFS= read -r -d $'\0' lib; do
    if [ -f "$lib" ]; then
      install -Dm755 "$lib" "$pkgdir/usr/lib/$(basename "$lib")"
    fi
  done

  install -Dt "$pkgdir"/usr/share/licenses/"$pkgname" -m644 COPYING

  # Use llvm-strip only on recognized file formats
  find "$pkgdir" -type f \( -name '*.so*' -o -name '*.a' -o -executable \) -print0 | while IFS= read -r -d '' file; do
    if llvm-strip --strip-unneeded "$file" 2>/dev/null || llvm-strip --strip-all "$file" 2>/dev/null; then
      echo "Stripped: $file"
    else
      echo "Skipping: $file (not a valid object file)" >&2
    fi
  done
}
