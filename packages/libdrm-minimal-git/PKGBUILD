pkgname=libdrm-minimal-git
_pkgname=libdrm
pkgver=2.4.125.r4.g9ea8a8e9
pkgrel=1
pkgdesc="Userspace interface to kernel DRM services (CS-PGO and BOLT optimized)"
arch=(i686 x86_64)
license=('custom')
url="https://dri.freedesktop.org/"
provides=('libdrm' 'libdrm-git')
conflicts=('libdrm')
depends=('libpciaccess')
makedepends=('git' 'meson' 'ninja' 'llvm' 'vulkan-tools' 'glmark2')
source=("$pkgname::git+https://gitlab.freedesktop.org/mesa/drm.git"
        'COPYING'
        "ms178-1.patch")
sha512sums=('SKIP'
            'b0ca349b882a4326b19f81f22804fabdb6fb7aef31cdc7b16b0a7ae191bfbb50c7daddb2fc4e6af06d060a273de36f6f3412ea326f16fa4309fda660')

pkgver() {
  cd "$pkgname"
  git describe --long --tags --abbrev=8 | sed -r 's/^libdrm-//;s/([^-]*-g)/r\1/;s/-/./g'
}

prepare() {
    local src
    for src in "${source[@]}"; do
        src="${src%%::*}"
        src="${src##*/}"
        [[ $src = *.patch ]] || continue
        echo "Applying patch $src..."
        patch --directory="libdrm-minimal-git" --forward --strip=1 < "$src"
    done
}

_generate_meson_native_file() {
  local c_flags="$1"
  local cpp_flags="$2"
  local ld_flags="$3"
  local ndebug_val="$4"

  cat > meson-native-flags.ini <<EOF
[built-in options]
c_args = [$c_flags]
cpp_args = [$cpp_flags]
c_link_args = [$ld_flags]
cpp_link_args = [$ld_flags]
b_pie = 'false'
b_ndebug = '$ndebug_val'
b_lto = 'true'
b_lto_mode = 'thin'

[binaries]
c = 'clang'
cpp = 'clang++'
ar = 'llvm-ar'
nm = 'llvm-nm'
strip = 'llvm-strip'
objcopy = 'llvm-objcopy'
objdump = 'llvm-objdump'
readelf = 'llvm-readelf'
ranlib = 'llvm-ranlib'
EOF
}

build() {
  format_meson_flags() {
    printf "'%s', " "$@" | sed 's/, $//'
  }

  local meson_options=(
    -D udev=false
    -D python.bytecompile=2
    -D b_pie=false
    -D c_std=gnu2x
    -D cpp_std=gnu++2a
    -D valgrind=disabled
    -D freedreno=disabled
    -D vc4=disabled
    -D vmwgfx=disabled
    -D etnaviv=disabled
    -D amdgpu=enabled
    -D radeon=enabled
    -D intel=disabled
    -D nouveau=disabled
    -D man-pages=disabled
    --wrap-mode=nofallback
    --buildtype=plain
    --native-file=meson-native-flags.ini
  )

  # Flag to track if BOLT was skipped
  local _bolt_skipped=false

  # --- Stage 1: Initial PGO Instrumentation & Profiling ---
  echo "--> Stage 1.1: Building with initial PGO instrumentation..."
  local pgo_instr_flags="-fprofile-generate=${srcdir}/pgo_raw"
  _generate_meson_native_file \
    "$(format_meson_flags $CFLAGS $pgo_instr_flags)" \
    "$(format_meson_flags $CXXFLAGS $pgo_instr_flags)" \
    "$(format_meson_flags $LDFLAGS $pgo_instr_flags)" \
    "false"

  arch-meson "$pkgname" build-instr --prefix /usr "${meson_options[@]}"
  meson compile -C build-instr

  local instr_install_dir="$srcdir/instr_install"
  rm -rf "$instr_install_dir"
  DESTDIR="$instr_install_dir" meson install -C build-instr --no-rebuild

  echo "--> Stage 1.2: Running workload to generate initial PGO profile..."
  rm -rf "${srcdir}/pgo_raw"
  mkdir -p "${srcdir}/pgo_raw"
  LD_LIBRARY_PATH="$instr_install_dir/usr/lib" vkcube --c 10000 || true
  LD_LIBRARY_PATH="$instr_install_dir/usr/lib" glmark2 || true

  local profraw_files=$(find "${srcdir}/pgo_raw" -name "*.profraw" | wc -l)
  if [ "$profraw_files" -eq 0 ]; then
    echo "Error: No initial PGO profiles were generated."
    exit 1
  fi
  llvm-profdata merge -output="${srcdir}/profdata1.profdata" "${srcdir}/pgo_raw"/*.profraw

  # --- Stage 2: Context-Sensitive PGO Instrumentation & Profiling ---
  echo "--> Stage 2.1: Building with -fprofile-use and -fcs-profile-generate for CS-PGO..."
  local cs_pgo_flags="-fprofile-use=${srcdir}/profdata1.profdata -fcs-profile-generate=${srcdir}/cs_pgo_raw"
  _generate_meson_native_file \
    "$(format_meson_flags $CFLAGS $cs_pgo_flags)" \
    "$(format_meson_flags $CXXFLAGS $cs_pgo_flags)" \
    "$(format_meson_flags $LDFLAGS $cs_pgo_flags)" \
    "false"

  arch-meson "$pkgname" build-cs-instr --prefix /usr "${meson_options[@]}"
  meson compile -C build-cs-instr

  local cs_instr_install_dir="$srcdir/cs_instr_install"
  rm -rf "$cs_instr_install_dir"
  DESTDIR="$cs_instr_install_dir" meson install -C build-cs-instr --no-rebuild

  echo "--> Stage 2.2: Running workload to generate CS-PGO profile..."
  rm -rf "${srcdir}/cs_pgo_raw"
  mkdir -p "${srcdir}/cs_pgo_raw"
  LD_LIBRARY_PATH="$cs_instr_install_dir/usr/lib" vkcube --c 10000 || true
  LD_LIBRARY_PATH="$cs_instr_install_dir/usr/lib" glmark2 || true

  local cs_profraw_files=$(find "${srcdir}/cs_pgo_raw" -name "*.profraw" | wc -l)
  if [ "$cs_profraw_files" -eq 0 ]; then
    echo "Error: No CS-PGO profiles were generated."
    exit 1
  fi

  # Merge CS profiles with initial profiles
  llvm-profdata merge -output="${srcdir}/profdata2.profdata" "${srcdir}/cs_pgo_raw"/*.profraw "${srcdir}/profdata1.profdata"

  # --- Stage 3: Final CS-PGO-Optimized Build ---
  echo "--> Stage 3: Building final version with merged CS-PGO profiles..."
  local final_pgo_flags="-fprofile-use=${srcdir}/profdata2.profdata"
  local final_ld_flags="$LDFLAGS $final_pgo_flags -Wl,--emit-relocs"
  _generate_meson_native_file \
    "$(format_meson_flags $CFLAGS $final_pgo_flags)" \
    "$(format_meson_flags $CXXFLAGS $final_pgo_flags)" \
    "$(format_meson_flags $final_ld_flags)" \
    "true"

  arch-meson "$pkgname" build-final --prefix /usr "${meson_options[@]}"
  meson compile -C build-final

  # --- Stage 4: BOLT Instrumentation & Profiling ---
  local bolt_instr_dir="${srcdir}/bolt_instr"
  local bolt_profiles_dir="${srcdir}/bolt_profiles"
  rm -rf "$bolt_instr_dir" "$bolt_profiles_dir"
  mkdir -p "$bolt_instr_dir" "$bolt_profiles_dir"

  echo "--> Stage 4.1: Instrumenting CS-PGO-optimized libraries for BOLT..."
  local final_install_dir="$srcdir/final_install"
  rm -rf "$final_install_dir"
  DESTDIR="$final_install_dir" meson install -C build-final --no-rebuild

  local libs_to_bolt
  libs_to_bolt=$(find "$final_install_dir/usr/lib" -type f -name "libdrm*.so.*" -not -type l || true)
  if [ -z "$libs_to_bolt" ]; then
    echo "Warning: No libraries found for BOLT instrumentation. Skipping BOLT."
    _bolt_skipped=true
  else
    for lib_path in $libs_to_bolt; do
      local lib_basename=$(basename "$lib_path")
      llvm-bolt "$lib_path" --instrument --lite=false --instrumentation-file-append-pid \
        --instrumentation-file="${bolt_profiles_dir}/${lib_basename}.fdata" \
        -o "${bolt_instr_dir}/${lib_basename}" || {
        echo "Warning: BOLT instrumentation failed for $lib_basename. Trying lite mode."
        llvm-bolt "$lib_path" --instrument --lite=true --instrumentation-file-append-pid \
          --instrumentation-file="${bolt_profiles_dir}/${lib_basename}.fdata" \
          -o "${bolt_instr_dir}/${lib_basename}" || {
          echo "Error: BOLT instrumentation failed even in lite mode for $lib_basename. Skipping BOLT."
          _bolt_skipped=true
          break
        }
      }
      chmod +x "${bolt_instr_dir}/${lib_basename}"
    done
  fi

  if $_bolt_skipped; then
    return  # Skip remaining BOLT steps if instrumentation failed
  fi

  echo "--> Stage 4.2: Running workload on instrumented libraries to generate BOLT profile..."
  LD_LIBRARY_PATH="$bolt_instr_dir" vkcube --c 10000 || true
  LD_LIBRARY_PATH="$bolt_instr_dir" glmark2 || true

  local fdata_files=$(find "$bolt_profiles_dir" -name "*.fdata*" | wc -l)
  if [ "$fdata_files" -eq 0 ]; then
    echo "Warning: No BOLT profiles generated. Skipping BOLT optimization."
    _bolt_skipped=true
    return
  fi

  # Merge all .fdata files (including per-PID ones)
  merge-fdata "$bolt_profiles_dir"/*.fdata* > "${srcdir}/bolt_merged.fdata"

  # --- Stage 5: Final BOLT Optimization ---
  echo "--> Stage 5: Applying BOLT optimizations..."
  local bolt_opt_dir="${srcdir}/bolt_opt"
  mkdir -p "$bolt_opt_dir"
  for lib_path in $libs_to_bolt; do
    local lib_basename=$(basename "$lib_path")
    llvm-bolt "$lib_path" \
      --data="${srcdir}/bolt_merged.fdata" \
      --lite=false \
      --relocs \
      --reorder-blocks=ext-tsp \
      --reorder-functions=cdsort \
      --split-functions \
      --split-all-cold \
      --split-eh \
      --split-strategy=cdsplit \
      --eliminate-unreachable \
      --frame-opt=all \
      --frame-opt-rm-stores \
      --hot-data \
      --hugify \
      --icf=1 \
      --indirect-call-promotion=all \
      --jump-tables=aggressive \
      --min-branch-clusters \
      --peepholes=all \
      --plt=hot \
      --reg-reassign \
      --use-aggr-reg-reassign \
      --dyno-stats \
      --update-debug-sections \
      -o "${bolt_opt_dir}/${lib_basename}" 2>&1 | tee "${srcdir}/bolt_${lib_basename}.log"

    # Check if optimization succeeded
    if [ ! -s "${bolt_opt_dir}/${lib_basename}" ]; then
      echo "Error: BOLT optimization failed for $lib_basename. Using PGO version."
      cp "$lib_path" "${bolt_opt_dir}/${lib_basename}"
    fi
  done
}

package() {
  DESTDIR="$pkgdir" meson install -C build-final --no-rebuild

  if ! $_bolt_skipped && [ "$(ls -A "${srcdir}/bolt_opt")" ]; then
    echo "--> Installing BOLT-optimized libraries..."
    find "${srcdir}/bolt_opt" -type f -name "libdrm*.so.*" -exec install -Dm755 {} -t "$pkgdir/usr/lib/" \;
  fi

  install -Dm644 "$srcdir/COPYING" -t "$pkgdir/usr/share/licenses/$pkgname/"

  find "$pkgdir" -type f -name "*.so*" -exec llvm-strip --strip-unneeded {} +
}
