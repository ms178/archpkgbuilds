pkgbase=nss
pkgname=(
  nss
  ca-certificates-mozilla
)
pkgver=3.110
pkgrel=2.1
pkgdesc="Network Security Services"
url="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS"
arch=(x86_64)
license=(MPL-2.0)
depends=(
  glibc
  nspr
  p11-kit
  sqlite
  zlib
  ca-certificates-mozilla
)
makedepends=(
  gyp
  mercurial
  perl
  python
  llvm
  clang
)
source=(
  "hg+https://hg.mozilla.org/projects/nss#tag=NSS_${pkgver//./_}_RTM"
  bundle.sh
  certdata2pem.py
)
b2sums=('f554afb22dcd9a42b0e32312cdf9efa85f255a8c6ae667243b3993222312dbabbda256ac43c3e24283bcfff5e139d84302c84de06d75ad6fa67f404297e59ba7'
        '4be5dd836c844fdd7b63302a6994d62149082c3bc81eef70f373f416fed80a61a923960e4390d1c391b81ab01b409370d788818a30ffdd3a4ed467b670f990f6'
        '6bb59dcc9289916dcbf8fb6d73db0c0cd7582dc12a3aa4e8be19ec62c9ede65fdd9470a2d92ec5a114506b78d2d21b8ae0a1b45a17dc1f90f7d75434a93da510'
        'SKIP')

prepare() {
  mkdir -p certs
  for file in nss/lib/ckfw/builtins/{certdata.txt,nssckbi.h}; do
    if [[ ! -f "$file" ]]; then
      error "Required file $file not found"
      return 1
    fi
  done
  ln -srft certs nss/lib/ckfw/builtins/{certdata.txt,nssckbi.h}
}

build() {
  local buildopts=(
    --enable-libpkix
    --opt
    --system-nspr
    --system-sqlite
    --target=x64
    --clang
  )

  cd certs
  ../certdata2pem.py

  cd ..
  ./bundle.sh

  pgo_dir="$srcdir/pgo-data"
  mkdir -p "${pgo_dir}/standard"
  mkdir -p "${pgo_dir}/cs"

  orig_cflags="$CFLAGS"
  orig_cxxflags="$CXXFLAGS"
  orig_ldflags="$LDFLAGS"

  msg2 "== Building NSS with standard PGO instrumentation"
  export CFLAGS="${orig_cflags} -fprofile-generate=${pgo_dir}/standard -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -mllvm -runtime-counter-relocation -mllvm -enable-value-profiling"
  export CXXFLAGS="${orig_cxxflags} -fprofile-generate=${pgo_dir}/standard -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -mllvm -runtime-counter-relocation -mllvm -enable-value-profiling"
  export LDFLAGS="${orig_ldflags} -fprofile-generate=${pgo_dir}/standard -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -mllvm -runtime-counter-relocation -mllvm -enable-value-profiling"

  cd nss
  if ! ./build.sh "${buildopts[@]}"; then
    error "Failed to build NSS with standard PGO instrumentation"
    return 1
  fi

  if [ -d "$srcdir/dist/Release/bin" ]; then
    msg2 "Running NSS tests for standard PGO profile"
    cd tests
    export NSS_DEFAULT_DB_TYPE="sql"
    export HOST="localhost"
    export DOMSUF="localdomain"
    export NSS_CYCLES="standard"
    if ! ./ssl_gtests/ssl_gtests.sh; then
      error "SSL tests failed for standard PGO profile"
      return 1
    fi
  else
    error "Build output not found, cannot generate PGO profile"
    return 1
  fi

  cd "$srcdir"
  if ! llvm-profdata merge -output="${pgo_dir}/standard.profdata" "${pgo_dir}/standard/"; then
    error "Failed to merge standard PGO profile data"
    return 1
  fi

  msg2 "== Building NSS with context-sensitive PGO instrumentation"
  export CFLAGS="${orig_cflags} -fprofile-use=${pgo_dir}/standard.profdata -fcs-profile-generate=${pgo_dir}/cs -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -mllvm -runtime-counter-relocation -mllvm -enable-value-profiling"
  export CXXFLAGS="${orig_cxxflags} -fprofile-use=${pgo_dir}/standard.profdata -fcs-profile-generate=${pgo_dir}/cs -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -mllvm -runtime-counter-relocation -mllvm -enable-value-profiling"
  export LDFLAGS="${orig_ldflags} -fprofile-use=${pgo_dir}/standard.profdata -fcs-profile-generate=${pgo_dir}/cs -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -mllvm -runtime-counter-relocation -mllvm -enable-value-profiling"

  cd nss
  if ! ./build.sh -c "${buildopts[@]}"; then
    error "Failed to clean before building NSS with context-sensitive PGO instrumentation"
    return 1
  fi
  if ! ./build.sh "${buildopts[@]}"; then
    error "Failed to build NSS with context-sensitive PGO instrumentation"
    return 1
  fi

  if [ -d "$srcdir/dist/Release/bin" ]; then
    msg2 "Running NSS tests for context-sensitive PGO profile"
    cd tests
    export NSS_DEFAULT_DB_TYPE="sql"
    export HOST="localhost"
    export DOMSUF="localdomain"
    export NSS_CYCLES="standard"
    if ! ./ssl_gtests/ssl_gtests.sh; then
      error "SSL tests failed for context-sensitive PGO profile"
      return 1
    fi
  else
    error "Build output not found, cannot generate PGO profile"
    return 1
  fi

  cd "$srcdir"
  if ! llvm-profdata merge -output="${pgo_dir}/merged.profdata" "${pgo_dir}/cs/" "${pgo_dir}/standard.profdata"; then
    error "Failed to merge context-sensitive PGO profile data"
    return 1
  fi

  msg2 "== Building final optimized version with PGO data"

  export CFLAGS="${orig_cflags} -fprofile-use=${pgo_dir}/merged.profdata"
  export CXXFLAGS="${orig_cxxflags} -fprofile-use=${pgo_dir}/merged.profdata"
  export LDFLAGS="${orig_ldflags} -fprofile-use=${pgo_dir}/merged.profdata"

  cd nss
  if ! ./build.sh -c "${buildopts[@]}"; then
    error "Failed to clean before building final optimized NSS"
    return 1
  fi
  if ! ./build.sh "${buildopts[@]}"; then
    error "Failed to build final optimized NSS"
    return 1
  fi
}

package_nss() {
  local nsprver="$(pkg-config --modversion nspr)"
  local libdir=/usr/lib includedir=/usr/include/nss

  if [[ ! -f nss/pkg/pkg-config/nss.pc.in ]]; then
    error "nss.pc.in not found"
    return 1
  fi
  sed nss/pkg/pkg-config/nss.pc.in \
    -e "s,%prefix%,/usr,g" \
    -e "s,%exec_prefix%,\${prefix},g" \
    -e "s,%libdir%,$libdir,g" \
    -e "s,%includedir%,$includedir,g" \
    -e "s,%NSPR_VERSION%,$nsprver,g" \
    -e "s,%NSS_VERSION%,$pkgver,g" |
    install -Dm644 /dev/stdin "$pkgdir$libdir/pkgconfig/nss.pc"

  ln -s nss.pc "$pkgdir$libdir/pkgconfig/mozilla-nss.pc"

  if [[ ! -d dist/Release/lib ]]; then
    error "dist/Release/lib not found"
    return 1
  fi
  install -Dt "$pkgdir$libdir" dist/Release/lib/*.so

  local vmajor vminor vpatch
  if [[ ! -f nss/lib/nss/nss.h ]]; then
    error "nss.h not found"
    return 1
  fi
  { read vmajor; read vminor; read vpatch; } \
    < <(awk '/#define.*NSS_V(MAJOR|MINOR|PATCH)/ {print $3}' nss/lib/nss/nss.h)

  if [[ ! -f nss/pkg/pkg-config/nss-config.in ]]; then
    error "nss-config.in not found"
    return 1
  fi
  sed nss/pkg/pkg-config/nss-config.in \
    -e "s,@prefix@,/usr,g" \
    -e "s,@exec_prefix@,/usr,g" \
    -e "s,@libdir@,$libdir,g" \
    -e "s,@includedir@,$includedir,g" \
    -e "s,@MOD_MAJOR_VERSION@,$vmajor,g" \
    -e "s,@MOD_MINOR_VERSION@,$vminor,g" \
    -e "s,@MOD_PATCH_VERSION@,$vpatch,g" |
    install -D /dev/stdin "$pkgdir/usr/bin/nss-config"

  if [[ ! -d dist/Release/bin ]]; then
    error "dist/Release/bin not found"
    return 1
  fi
  install -Dt "$pkgdir/usr/bin" \
    dist/Release/bin/{*util,shlibsign,signtool,signver,ssltap}

  if [[ ! -d dist/public/nss ]]; then
    error "dist/public/nss not found"
    return 1
  fi
  install -Dt "$pkgdir$includedir" -m644 dist/public/nss/*.h

  if [[ ! -d nss/doc/nroff ]]; then
    error "nss/doc/nroff not found"
    return 1
  fi
  install -Dt "$pkgdir/usr/share/man/man1" -m644 \
    nss/doc/nroff/{*util,signtool,signver,ssltap}.1

  ln -s /usr/lib/pkcs11/p11-kit-trust.so "$pkgdir$libdir/p11-kit-trust.so"
  ln -sf p11-kit-trust.so "$pkgdir$libdir/libnssckbi.so"
}

package_ca-certificates-mozilla() {
  pkgdesc="Mozilla's set of trusted CA certificates"
  depends=('ca-certificates-utils>=20181109-3')

  if [[ ! -f ca-bundle.trust.p11-kit ]]; then
    error "ca-bundle.trust.p11-kit not found"
    return 1
  fi
  install -Dm644 ca-bundle.trust.p11-kit \
    "$pkgdir/usr/share/ca-certificates/trust-source/mozilla.trust.p11-kit"
}
