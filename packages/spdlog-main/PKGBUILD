pkgname=spdlog
pkgver=1.15.3
_pkgmajorver=1.15
pkgrel=3.6
pkgdesc='Very fast, header-only/compiled, C++ logging library (PGO optimized with custom workload)'
arch=('x86_64')
url='https://github.com/gabime/spdlog'
license=('MIT')
depends=(
  'libfmt.so'
  'gcc-libs'
  'glibc'
)
makedepends=(
  'cmake'
  'ninja'
  'clang>=19'
  'llvm>=19'
  'llvm-libs>=19'
  'git'
  'fmt'
)
source=(
    "$pkgname-$pkgver.tar.gz::https://github.com/gabime/spdlog/archive/v$pkgver.tar.gz"
    "spdlog_fmt_external.patch"
    'workload.cpp'
)
provides=(
    "libspdlog.so=${_pkgmajorver}-64"
)
sha256sums=('1586508029a7d0670dfcb2d97575dcdc242d3868a259742b69f100801ab4e16b'
            'a0eb34b7c6920f0db2587460071f53372663c191cdfe34bf5ea2704c309c745f'
            'SKIP')

# Define the workload source code
cat > workload.cpp << 'EOF'
#include <spdlog/spdlog.h>
#include <spdlog/sinks/basic_file_sink.h>
#include <spdlog/sinks/rotating_file_sink.h>
#include <spdlog/sinks/stdout_color_sinks.h>
#include <spdlog/async.h>

#include <vector>
#include <thread>
#include <chrono>
#include <random>
#include <iostream> // For error reporting

void heavy_logging_thread(int id) {
    auto logger = spdlog::get("workload_logger");
    if (!logger) {
        std::cerr << "Error: Logger 'workload_logger' not found in thread " << id << std::endl;
        return;
    }

    std::random_device rd;
    std::mt19937 gen(rd() + id); // Seed per thread
    std::uniform_int_distribution<> distrib(1, 100);
    std::uniform_int_distribution<> level_dist(0, 5); // Map to spdlog levels

    for (int i = 0; i < 5000; ++i) {
        int random_val = distrib(gen);
        int level = level_dist(gen);
        std::string msg = "Thread " + std::to_string(id) + " logging event " + std::to_string(i) + " with value " + std::to_string(random_val);

        switch (level) {
            case 0: logger->trace("{} - Trace message.", msg); break;
            case 1: logger->debug("{} - Debug info, potentially frequent.", msg); break;
            case 2: logger->info("{} - Standard info message, like progress.", msg); break;
            case 3: logger->warn("{} - Warning condition detected.", msg); break;
            case 4: logger->error("{} - Error occurred, file not found perhaps.", msg); break;
            case 5: logger->critical("{} - Critical system failure simulation!", msg); break;
        }

        if (i % 100 == 0) {
            logger->info("Thread {} reached checkpoint {}", id, i);
            std::this_thread::sleep_for(std::chrono::milliseconds(1));
        }
        if (random_val < 5) {
             std::this_thread::sleep_for(std::chrono::milliseconds(2));
        }
    }
    logger->info("Thread {} finished.", id);
}

int main() {
    try {
        // Compilation/desktop logging - synchronous file logging
        auto file_logger = spdlog::basic_logger_mt("file_logger", "compilation_log.txt", true);
        file_logger->set_level(spdlog::level::trace);
        file_logger->info("Starting simulated compilation process log.");
        for(int i=0; i< 100; ++i) {
            file_logger->info("Processing file_{}.cpp", i);
            if(i % 15 == 0) file_logger->warn("Potential issue found in file_{}.cpp", i);
        }
        file_logger->error("Failed to link final target.");
        file_logger->flush();
        spdlog::drop("file_logger");


        // Gaming/high-performance logging - asynchronous, multi-sink
        spdlog::init_thread_pool(8192, 1);
        auto stdout_sink = std::make_shared<spdlog::sinks::stdout_color_sink_mt>();
        auto rotating_sink = std::make_shared<spdlog::sinks::rotating_file_sink_mt>("game_log.txt", 1024 * 1024 * 5, 3);
        std::vector<spdlog::sink_ptr> sinks {stdout_sink, rotating_sink};
        auto async_logger = std::make_shared<spdlog::async_logger>("workload_logger", sinks.begin(), sinks.end(), spdlog::thread_pool(), spdlog::async_overflow_policy::block);
        async_logger->set_level(spdlog::level::trace);
        spdlog::register_logger(async_logger);


        // Multi-threaded logging
        std::vector<std::thread> threads;
        unsigned int num_threads = std::thread::hardware_concurrency();
        if (num_threads == 0) num_threads = 4;
        spdlog::info("Starting workload with {} threads.", num_threads);

        for (unsigned int i = 0; i < num_threads; ++i) {
            threads.emplace_back(heavy_logging_thread, i);
        }

        for (auto& t : threads) {
            if (t.joinable()) {
                t.join();
            }
        }

        spdlog::info("Workload finished. Shutting down.");
        spdlog::shutdown();

    } catch (const spdlog::spdlog_ex& ex) {
        std::cerr << "spdlog initialization error: " << ex.what() << std::endl;
        return 1;
    } catch (const std::exception& ex) {
       std::cerr << "Standard exception: " << ex.what() << std::endl;
       return 1;
    } catch (...) {
       std::cerr << "Unknown exception occurred during workload execution." << std::endl;
       return 1;
    }
    return 0;
}
EOF

_common_instrument_flags=" -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"

prepare() {
    cd "$pkgname-$pkgver"
    patch -p1 < ../spdlog_fmt_external.patch
    mkdir -p "$srcdir/pgo-profiles/standard" "$srcdir/pgo-profiles/context-sensitive"
}

# Function to compile and run the custom workload
run_workload() {
    local build_dir="$1"
    local profile_dir="$2"
    local workload_exe="$build_dir/spdlog_workload"
    local workload_lib_path="$srcdir/$build_dir"

    msg "Compiling custom workload for PGO stage ($build_dir)..."
    # Link against stage-specific spdlog AND fmt
    clang++ "$srcdir/workload.cpp" -o "$workload_exe" \
        -std=c++17 \
        -I"$srcdir/$pkgname-$pkgver/include" \
        -L"$workload_lib_path" -lspdlog -lfmt \
        -Wl,-rpath="$workload_lib_path" \
        -pthread \
        -fuse-ld=lld \
        ${CPPFLAGS} \
        ${LDFLAGS}

    if [[ ! -f "$workload_exe" ]]; then
        error "Failed to compile workload executable!"
        return 1
    fi

    msg "Running custom workload for PGO stage ($build_dir)..."
    export LLVM_PROFILE_FILE="$profile_dir/workload-%m.profraw"
    "$workload_exe"
    local workload_status=$?
    unset LLVM_PROFILE_FILE

    if [[ $workload_status -ne 0 ]]; then
       error "Workload execution failed with status $workload_status"
       return 1
    fi
    msg "Custom workload finished successfully."
    return 0
}


build() {
    local _cmake_common_options=(
        -DCMAKE_INSTALL_PREFIX=/usr
        -DCMAKE_INSTALL_LIBDIR=lib
        -DSPDLOG_BUILD_BENCH=OFF
        -DSPDLOG_FMT_EXTERNAL=ON
        -DSPDLOG_BUILD_SHARED=ON
        -DSPDLOG_BUILD_TESTS=ON
        -DCMAKE_UNITY_BUILD=ON
        -DCMAKE_CXX_COMPILER=clang++
        -Wno-dev
    )

    # Stage 1: Standard PGO Instrumentation
    msg "Starting PGO Stage 1: Standard Instrumentation..."
    cmake -S "$pkgname-$pkgver" -B build-pgo-standard -G Ninja \
        "${_cmake_common_options[@]}" \
        -DCMAKE_BUILD_TYPE=Debug \
        -DCMAKE_CXX_FLAGS="${CXXFLAGS} ${_common_instrument_flags} -fprofile-generate=$srcdir/pgo-profiles/standard" \
        -DCMAKE_EXE_LINKER_FLAGS="${LDFLAGS}" \
        -DCMAKE_SHARED_LINKER_FLAGS="${LDFLAGS}"
    cmake --build build-pgo-standard

    # Run custom workload & check status
    run_workload build-pgo-standard "$srcdir/pgo-profiles/standard" || return 1

    # Run tests
    msg "Running tests for Standard PGO profile generation..."
    export LLVM_PROFILE_FILE="$srcdir/pgo-profiles/standard/test-%m.profraw"
    cmake --build build-pgo-standard --target test
    unset LLVM_PROFILE_FILE

    # Merge standard profiles
    msg "Merging Standard PGO profiles..."
    llvm-profdata merge -output="$srcdir/pgo-profiles/standard.profdata" "$srcdir/pgo-profiles/standard"/*.profraw

    # Stage 2: Context-Sensitive PGO Instrumentation
    msg "Starting PGO Stage 2: Context-Sensitive Instrumentation..."
    cmake -S "$pkgname-$pkgver" -B build-pgo-cs -G Ninja \
        "${_cmake_common_options[@]}" \
        -DCMAKE_BUILD_TYPE=Debug \
        -DCMAKE_CXX_FLAGS="${CXXFLAGS} ${_common_instrument_flags} -fprofile-use=$srcdir/pgo-profiles/standard.profdata -fcs-profile-generate=$srcdir/pgo-profiles/context-sensitive" \
        -DCMAKE_EXE_LINKER_FLAGS="${LDFLAGS}" \
        -DCMAKE_SHARED_LINKER_FLAGS="${LDFLAGS}"
    cmake --build build-pgo-cs

    # Run custom workload again & check status
    run_workload build-pgo-cs "$srcdir/pgo-profiles/context-sensitive" || return 1

    # Run tests again
    msg "Running tests for Context-Sensitive PGO profile generation..."
    export LLVM_PROFILE_FILE="$srcdir/pgo-profiles/context-sensitive/test-%m.profraw"
    cmake --build build-pgo-cs --target test
    unset LLVM_PROFILE_FILE

    # Merge combined profiles
    msg "Merging Combined PGO profiles..."
    llvm-profdata merge -output="$srcdir/pgo-profiles/combined.profdata" "$srcdir/pgo-profiles/standard.profdata" "$srcdir/pgo-profiles/context-sensitive"/*.profraw

    # Stage 3: Final Optimized Build
    msg "Starting PGO Stage 3: Final Optimized Build..."
    cmake -S "$pkgname-$pkgver" -B build -G Ninja \
        "${_cmake_common_options[@]}" \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_CXX_FLAGS="${CXXFLAGS} -fprofile-use=$srcdir/pgo-profiles/combined.profdata" \
        -DCMAKE_EXE_LINKER_FLAGS="${LDFLAGS}" \
        -DCMAKE_SHARED_LINKER_FLAGS="${LDFLAGS}"
    cmake --build build
}

check() {
    msg "Running tests on final PGO-optimized build..."
    cmake --build build --target test
}

package() {
    DESTDIR="$pkgdir" cmake --install build
    install -vDm644 "$pkgname-$pkgver/LICENSE" -t "$pkgdir/usr/share/licenses/$pkgname/"
    install -vDm644 workload.cpp -t "$pkgdir/usr/share/doc/$pkgname/"

    msg "PGO profile data intentionally kept in $srcdir/pgo-profiles"
}
