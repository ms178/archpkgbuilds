pkgbase=fmt
pkgname=(
  fmt
)
pkgver=11.2.0
pkgrel=2.2 # Incremented pkgrel for PGO workload changes
pkgdesc='Open-source formatting library for C++ (PGO optimized with custom workload)'
arch=(x86_64)
url=https://fmt.dev
license=(MIT)
depends=(
  gcc-libs
  glibc
)
makedepends=(
  cmake
  doxygen
  git
  mkdocs
  mkdocs-material
  mkdocstrings
  ninja
  npm
  python-pymdown-extensions
  python-regex
  clang
  llvm
  llvm-libs
)
_tag=40626af88bd7df9a5fb80be7b25ac85b122d6c21
source=(
  "git+https://github.com/fmtlib/fmt.git#tag=$_tag"
  'workload_fmt.cpp' # Placeholder for the workload source file
)
b2sums=('72c7027f23292ccd5bdcc3b797547a52b9a3c59e98485a7b2bfcefcd482fb2efb761966947f42eb61bdb6f195ebbede80f18ad603b8ccc0d1a744575433892f6'
        'SKIP') # Add sha256sum for workload_fmt.cpp after creating it

provides=(
    'libfmt.so=11-64' # Provide SONAME version based on major version
)

# Define the fmt workload source code
cat > workload_fmt.cpp << 'EOF'
#include <fmt/core.h>
#include <fmt/format.h>
#include <fmt/printf.h>
#include <fmt/ranges.h>
#include <fmt/chrono.h>
#include <fmt/color.h>
#include <fmt/os.h> // For file output

#include <vector>
#include <string>
#include <thread>
#include <random>
#include <iostream> // For errors
#include <fstream>
#include <map>

struct Point { double x, y; };

template <> struct fmt::formatter<Point> {
  constexpr auto parse(format_parse_context& ctx) -> decltype(ctx.begin()) {
    return ctx.end(); // No options accepted
  }

  template <typename FormatContext>
  auto format(const Point& p, FormatContext& ctx) const -> decltype(ctx.out()) {
    return fmt::format_to(ctx.out(), "({:.1f}, {:.1f})", p.x, p.y);
  }
};

void format_various_types(int thread_id) {
    std::string out_str;
    std::vector<int> v = {1, 2, 3, 4, 5};
    std::map<std::string, int> m = {{"a", 1}, {"b", 2}};
    Point p = {1.23, 4.56};
    auto t = std::chrono::system_clock::now();

    std::random_device rd;
    std::mt19937 gen(rd() + thread_id);
    std::uniform_real_distribution<> dist(0.0, 1000.0);

    for (int i = 0; i < 2000; ++i) {
        // Basic formatting
        out_str = fmt::format("Thread {}: Iteration {}, Random float {:.4f}", thread_id, i, dist(gen));

        // Integer formatting (padding, hex)
        out_str = fmt::format("Thread {}: Int {:05d}, Hex {:#08x}", thread_id, i * thread_id, i * 17);

        // Formatting ranges
        out_str = fmt::format("Thread {}: Vector {}, Map {}", thread_id, v, m);

        // Formatting custom types
        out_str = fmt::format("Thread {}: Point {}", thread_id, p);

        // Chrono formatting
        out_str = fmt::format("Thread {}: Time {:%Y-%m-%d %H:%M:%S}", thread_id, t);

        // Formatting to buffer
        fmt::memory_buffer buf;
        fmt::format_to(std::back_inserter(buf), "Buffered message from thread {} - Iter {}", thread_id, i);
        // std::string buffered_str = fmt::to_string(buf); // Consume buffer if needed

         // printf style
        std::string printf_str = fmt::sprintf("Printf style: %d %.2f %s\n", i, dist(gen), "test");


        // Simulate occasional different paths
        if (i % 50 == 0) {
            try {
                 out_str = fmt::format(FMT_STRING("Checked format: {}"), i);
                 // Intentionally cause format error sometimes (for profiling error paths)
                 if (i % 200 == 0 && thread_id == 0) {
                    out_str = fmt::format("Mismatched args: {}", i, "extra");
                 }
            } catch(const fmt::format_error& e) {
                // fmt::print(stderr, "Caught expected format error: {}\n", e.what());
            }
        }
    }
     // Use the string to prevent optimization
    if (out_str.length() == 0) {
         std::cerr << "Error: String unexpectedly empty in thread " << thread_id << std::endl;
    }
}

int main() {
    try {
        // Simulate file logging (common use case)
        auto out_file = fmt::output_file("fmt_workload_log.txt");
        out_file.print("Starting fmt workload log at {:%Y-%m-%d %H:%M:%S}\n", std::chrono::system_clock::now());

        // Simulate console output with color
        fmt::print(fmt::emphasis::bold | fmt::fg(fmt::color::green), "Starting fmt workload...\n");

        // Multi-threaded formatting simulation
        unsigned int num_threads = std::thread::hardware_concurrency();
        if (num_threads == 0) num_threads = 4;
        fmt::print("Detected {} hardware threads. Launching workload threads...\n", num_threads);

        std::vector<std::thread> threads;
        for (unsigned int i = 0; i < num_threads; ++i) {
            threads.emplace_back(format_various_types, i);
            out_file.print("Launched thread {}\n", i);
        }

        for (auto& t : threads) {
            if (t.joinable()) {
                t.join();
            }
        }

        out_file.print("All threads finished.\n");
        fmt::print(fmt::emphasis::bold | fmt::fg(fmt::color::green), "Fmt workload finished successfully.\n");

    } catch (const std::exception& e) {
        fmt::print(stderr, "Error during fmt workload: {}\n", e.what());
        return 1;
    } catch (...) {
        fmt::print(stderr, "Unknown error during fmt workload.\n");
        return 1;
    }

    return 0;
}
EOF


_common_instrument_flags=" -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"

pkgver() {
  cd fmt
  git describe --tags
}

prepare() {
  mkdir -p "$srcdir/pgo-profiles/standard" "$srcdir/pgo-profiles/context-sensitive"
}

# Function to compile and run the custom fmt workload
run_fmt_workload() {
    local build_dir="$1"
    local profile_dir="$2"
    local workload_exe="$build_dir/fmt_workload"
    local workload_lib_path="$srcdir/$build_dir"

    msg "Compiling custom fmt workload for PGO stage ($build_dir)..."
    # Compile workload, link against stage-specific fmt library
    clang++ "$srcdir/workload_fmt.cpp" -o "$workload_exe" \
        -std=c++17 \
        -I"$srcdir/fmt/include" \
        -L"$workload_lib_path" -lfmt \
        -Wl,-rpath="$workload_lib_path" \
        -pthread \
        -fuse-ld=lld \
        ${CPPFLAGS} \
        ${LDFLAGS}

    if [[ ! -f "$workload_exe" ]]; then
        error "Failed to compile fmt workload executable!"
        return 1
    fi

    msg "Running custom fmt workload for PGO stage ($build_dir)..."
    export LLVM_PROFILE_FILE="$profile_dir/workload-%m.profraw"
    "$workload_exe"
    local workload_status=$?
    unset LLVM_PROFILE_FILE

    if [[ $workload_status -ne 0 ]]; then
       error "Fmt workload execution failed with status $workload_status"
       return 1
    fi
    msg "Custom fmt workload finished successfully."
    return 0
}

build() {
  # Common CMake options for fmt
  local _cmake_common_fmt_options=(
      -DCMAKE_INSTALL_PREFIX=/usr
      -DBUILD_SHARED_LIBS=ON
      -DCMAKE_CXX_COMPILER=clang++
      -DFMT_TEST=ON
      -Wno-dev
  )

  # Stage 1: Standard PGO Instrumentation
  msg "Starting fmt PGO Stage 1: Standard Instrumentation..."
  cmake -S fmt -B build-pgo-standard -G Ninja \
    "${_cmake_common_fmt_options[@]}" \
    -DCMAKE_BUILD_TYPE=Debug \
    -DCMAKE_CXX_FLAGS="${CXXFLAGS} ${_common_instrument_flags} -fprofile-generate=$srcdir/pgo-profiles/standard" \
    -DCMAKE_EXE_LINKER_FLAGS="${LDFLAGS}" \
    -DCMAKE_SHARED_LINKER_FLAGS="${LDFLAGS}"
  cmake --build build-pgo-standard

  # Run custom workload & check status
  run_fmt_workload build-pgo-standard "$srcdir/pgo-profiles/standard" || return 1

  # Run tests to generate additional profile data
  msg "Running tests for Standard PGO profile generation..."
  export LLVM_PROFILE_FILE="$srcdir/pgo-profiles/standard/test-%m.profraw"
  cmake --build build-pgo-standard --target test
  unset LLVM_PROFILE_FILE

  # Merge standard profiles (workload + tests)
  msg "Merging Standard PGO profiles..."
  llvm-profdata merge -output="$srcdir/pgo-profiles/standard.profdata" "$srcdir/pgo-profiles/standard"/*.profraw

  # Stage 2: Context-Sensitive PGO Instrumentation
  msg "Starting fmt PGO Stage 2: Context-Sensitive Instrumentation..."
  cmake -S fmt -B build-pgo-cs -G Ninja \
    "${_cmake_common_fmt_options[@]}" \
    -DCMAKE_BUILD_TYPE=Debug \
    -DCMAKE_CXX_FLAGS="${CXXFLAGS} ${_common_instrument_flags} -fprofile-use=$srcdir/pgo-profiles/standard.profdata -fcs-profile-generate=$srcdir/pgo-profiles/context-sensitive" \
    -DCMAKE_EXE_LINKER_FLAGS="${LDFLAGS}" \
    -DCMAKE_SHARED_LINKER_FLAGS="${LDFLAGS}"
  cmake --build build-pgo-cs

  # Run custom workload again & check status
  run_fmt_workload build-pgo-cs "$srcdir/pgo-profiles/context-sensitive" || return 1

  # Run tests again for CS profile data
  msg "Running tests for Context-Sensitive PGO profile generation..."
  export LLVM_PROFILE_FILE="$srcdir/pgo-profiles/context-sensitive/test-%m.profraw"
  cmake --build build-pgo-cs --target test
  unset LLVM_PROFILE_FILE

  # Merge combined profiles
  msg "Merging Combined PGO profiles..."
  llvm-profdata merge -output="$srcdir/pgo-profiles/combined.profdata" "$srcdir/pgo-profiles/standard.profdata" "$srcdir/pgo-profiles/context-sensitive"/*.profraw

  # Stage 3: Final Optimized Build
  msg "Starting fmt PGO Stage 3: Final Optimized Build..."
  cmake -S fmt -B build -G Ninja \
    "${_cmake_common_fmt_options[@]}" \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_CXX_FLAGS="${CXXFLAGS} -fprofile-use=$srcdir/pgo-profiles/combined.profdata" \
    -DCMAKE_EXE_LINKER_FLAGS="${LDFLAGS}" \
    -DCMAKE_SHARED_LINKER_FLAGS="${LDFLAGS}"
  cmake --build build
}

check() {
  msg "Running tests on final PGO-optimized build..."
  cmake --build build --target test
}

package_fmt() {
  # depends array moved to global scope
  # provides array moved to global scope

  DESTDIR="$pkgdir" cmake --install build --component fmt-core
  install -vDm644 -t "$pkgdir/usr/share/licenses/$pkgname" fmt/LICENSE
  install -vDm644 workload_fmt.cpp -t "$pkgdir/usr/share/doc/$pkgname/" # Install workload source

  # Do not clean up profile data
  msg "PGO profile data intentionally kept in $srcdir/pgo-profiles"
  # rm -rf "$srcdir/pgo-profiles" # Original cleanup line, now commented out
}
