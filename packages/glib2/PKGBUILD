pkgbase=glib2
pkgname=(glib2 glib2-devel)
pkgver=2.84.4
pkgrel=3.6
pkgdesc='Low level core library'
url='https://gitlab.gnome.org/GNOME/glib'
license=(LGPL-2.1-or-later)
arch=(x86_64)

depends=(
  bash
  glibc
  libffi
  libsysprof-capture
  pcre2
  util-linux-libs
  zlib
)

makedepends=(
  dbus
  dconf
  gettext
  gi-docgen
  git
  gobject-introspection
  libelf
  meson
  python
  python-docutils
  python-packaging
  shared-mime-info
  util-linux
)

checkdepends=(desktop-file-utils glib2)

source=(
  "git+https://gitlab.gnome.org/GNOME/glib.git?signed#tag=$pkgver"
  'git+https://gitlab.gnome.org/GNOME/gvdb.git'
  0001-glib-compile-schemas-Remove-noisy-deprecation-warnin.patch
  0002-gdesktopappinfo-Add-more-known-terminals.patch
  gio-querymodules.hook
  glib-compile-schemas.hook
)

b2sums=(
  'ec233c9dd6836fb362e45092cd8122757e9faaff2ed910818ecc9e88359777a5935a93f6ed26a649437c9014354bad1cc122716462c92335a280d685cf3ffc71'
  'SKIP'
  '94c73ca7070c239494873dd52d6ee09382bbb5b1201f7afd737cfa140b1a2fb0744b2c28331baf3943d1d072550c35888d21ce6f19f89481ff9d1a60d9a0b30e0'
  '14c9211c0557f6d8d9a914f1b18b7e0e23f79f4abde117cb03ab119b95bf9fa9d7a712aa0a29beb266468aeb352caa3a9e4540503cfc9fe0bbaf764371832a96'
  'acc2f474139e535f4bdd70ac22a9150f786b3395e679b14d0d3fbb9361d511bb1b5069d95b2a7ac9c0f3d901b03a0c037eb273446ba00764191b30a777bd2bc9'
)

validpgpkeys=(923B7025EE03C1C59F42684CF0942E894B2EAFA0) # Philip Withnall

# ---------------------------------------------------------------------------

prepare() {
  cd glib

  # Revert upstream’s accidental libatomic dependency
  git revert -n 4e6dc4dee0e1c6407113597180d9616b4f275f94

  # Down-stream patches
  git apply -3 ../0001-glib-compile-schemas-Remove-noisy-deprecation-warnin.patch
  git apply -3 ../0002-gdesktopappinfo-Add-more-known-terminals.patch

  # Use local gvdb clone
  git submodule init
  git submodule set-url subprojects/gvdb "$srcdir/gvdb"
  git -c protocol.file.allow=always -c protocol.allow=never submodule update
}

# ---------------------------------------------------------------------------

build() {
  local _common_opts=(
    --default-library both
    -Dc_std=gnu18
    -Dcpp_std=gnu++2a
    -Dglib_debug=disabled
    -Ddtrace=disabled
    -Dsystemtap=disabled
    -Ddocumentation=false
    -Dintrospection=enabled
    -Dman-pages=disabled
    -Dselinux=disabled
    -Dsysprof=enabled
    -Dpython.bytecompile=2
    -Db_ndebug=true
    -Db_pie=false
    -Dtests=true                 # tests drive the PGO profile
    --buildtype=release
  )

  local _pgo_dir=build-pgo
  local _covflag='-Wno-coverage-mismatch -fprofile-correction -Wno-stringop-overflow -Wno-stringop-overread -Wno-alloca-larger-than -Wno-unused-but-set-variable'

  # Produce more debug info: GLib has a lot of useful macros
  CFLAGS+=" -g3"
  CXXFLAGS+=" -g3"

  # use fat LTO objects for static libraries
  CFLAGS+=" -ffat-lto-objects"
  CXXFLAGS+=" -ffat-lto-objects"


  # ---------------- 1) Instrumentation pass ----------------
  arch-meson glib "$_pgo_dir"                                   \
    "${_common_opts[@]}"                                        \
    -Db_pgo=generate       \
    -Dc_args="$CFLAGS" -Dcpp_args="$CXXFLAGS" \
    -Dc_link_args="$LDFLAGS" -Dcpp_link_args="$LDFLAGS"\
    -Dglib_assert=true -Dglib_checks=true

  meson compile -C "$_pgo_dir"

  export LC_ALL=C.UTF-8
  dbus-run-session -- meson test -C "$_pgo_dir" \
    --no-suite flaky --no-suite slow --print-errorlogs

  # ---------------- 2) Optimised pass -----------------------
  meson configure "$_pgo_dir"                                   \
    -Db_pgo=use                                                 \
    -Dglib_assert=false -Dglib_checks=false                     \
    -Dc_args="$CFLAGS $_covflag" -Dcpp_args="$CXXFLAGS $_covflag" \
    -Dc_link_args="$LDFLAGS $_covflag" -Dcpp_link_args="$LDFLAGS $_covflag"

  meson compile -C "$_pgo_dir"

  ln -srfT "$_pgo_dir" build   # keep classic dir name
}

check() { :; }  # already run during PGO training

# ---------------------------------------------------------------------------

_pick() {
  local _dst=$1; shift
  local _f _d
  for _f; do
    _d="$srcdir/$_dst/${_f#$pkgdir/}"
    mkdir -p "$(dirname "$_d")"
    mv       "$_f" "$_d"
    rmdir -p --ignore-fail-on-non-empty "$(dirname "$_f")"
  done
}

package_glib2() {
  depends+=(libffi.so libmount.so)
  provides+=(libg{lib,io,irepository,module,object,thread}-2.0.so)
  optdepends=(
    'dconf: GSettings storage backend'
    'glib2-devel: development tools'
    'gvfs: most gio functionality'
  )
  options=(staticlibs)

  meson install -C build --destdir "$pkgdir"

  install -Dt "$pkgdir/usr/share/libalpm/hooks" -m644 *.hook
  touch "$pkgdir/usr/lib/gio/modules/.keep"

  python -m compileall -d /usr/share/glib-2.0/codegen \
    "$pkgdir/usr/share/glib-2.0/codegen"
  python -O -m compileall -d /usr/share/glib-2.0/codegen \
    "$pkgdir/usr/share/glib-2.0/codegen"

  cd "$pkgdir"

  # -------- split devel bits --------
  _pick devel usr/bin/gdbus-codegen
  _pick devel usr/bin/glib-{mkenums,genmarshal}
  _pick devel usr/bin/gresource
  _pick devel usr/bin/gtester{,-report}
  _pick devel usr/share/gdb/
  _pick devel usr/share/glib-2.0/gdb/
  _pick devel usr/share/glib-2.0/codegen/
  _pick devel usr/share/bash-completion/completions/gresource
}

package_glib2-devel() {
  pkgdesc+=' – development files'
  depends=(glib2 glibc libelf python python-packaging)
  mv devel/* "$pkgdir"
}

# vim: set sw=2 ts=2 et:
