pkgname=libjpeg-turbo
pkgver=3.1.1
pkgrel=2.1
pkgdesc="JPEG image codec with accelerated baseline compression and decompression"
url="https://libjpeg-turbo.org/"
_url="https://github.com/libjpeg-turbo/libjpeg-turbo/"
arch=(x86_64)
license=(
  BSD-3-Clause
  IJG
)
depends=(glibc)
makedepends=(
  cmake
  ninja
  nasm
  clang
  llvm
)
optdepends=('java-runtime>11: for TurboJPEG Java wrapper')
provides=(
  libjpeg
  libjpeg.so
  libturbojpeg.so
)
source=(
  $_url/releases/download/$pkgver/$pkgname-$pkgver.tar.gz{,.sig}
)
sha512sums=('63231854529f59a95814cf2414fe384360a4ed96c572764fabc535c3770c559d26943e129c905a63d5949088fa79138b1ffdb175b817f2f4d36329a3cbb23ea7'
            'SKIP')
b2sums=('1e83d5c062fa3700c23e2527812cb43daa1a5f97c7520c0a894c8333fbad4acd64586fdc3bf76e3692f8b9fa9b92014d18782949d0e30e80d0f2ba3608279f63'
        'SKIP')
validpgpkeys=('0338C8D8D9FDA62CF9C421BD7EC2DBB6F4DBF434') # The libjpeg-turbo Project (Signing key for official binaries) <information@libjpeg-turbo.org>

# Common instrumentation flags for PGO
_common_instrument_flags=" -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"

prepare() {
  # Ensure we're using Clang for PGO
  export CC=clang
  export CXX=clang++
}

build() {
  local cmake_options=(
    -B build
    -D CMAKE_INSTALL_PREFIX=/usr
    -D CMAKE_INSTALL_LIBDIR=/usr/lib
    -D CMAKE_C_STANDARD=23
    -D CMAKE_CXX_STANDARD=23
    -D ENABLE_STATIC=OFF
    -D WITH_JAVA=OFF
    -D WITH_JPEG8=ON
    -G Ninja
    -S $pkgname-$pkgver
    -W no-dev
  )

  # Step 1: Build with standard PGO instrumentation (-fprofile-generate)
  echo "Building with PGO instrumentation..."
  mkdir -p build-pgo
  cmake "${cmake_options[@]}" -B build-pgo \
    -D CMAKE_BUILD_TYPE=None \
    -D CMAKE_C_FLAGS="${CFLAGS} ${_common_instrument_flags} -fprofile-generate=/tmp/pgo-data" \
    -D CMAKE_CXX_FLAGS="${CXXFLAGS} ${_common_instrument_flags} -fprofile-generate=/tmp/pgo-data" \
    -D CMAKE_EXE_LINKER_FLAGS="${LDFLAGS} ${_common_instrument_flags} -fprofile-generate=/tmp/pgo-data"
  cmake --build build-pgo -v

  # Step 2: Generate profile data by running tests
  echo "Generating PGO profile data..."
  pushd build-pgo
  # Run tests to generate profile data (you may need to adjust this depending on how tests are run)
  ctest --output-on-failure --stop-on-failure -j$(nproc) || true  # Allow tests to fail without stopping the build
  popd

  # Merge the generated profile data
  echo "Merging PGO profile data..."
  llvm-profdata merge -output=code.profdata /tmp/pgo-data/

  # Step 3: Build with context-sensitive PGO instrumentation (-fcs-profile-generate)
  echo "Building with context-sensitive PGO instrumentation..."
  mkdir -p build-cs-pgo
  cmake "${cmake_options[@]}" -B build-cs-pgo \
    -D CMAKE_BUILD_TYPE=None \
    -D CMAKE_C_FLAGS="${CFLAGS} ${_common_instrument_flags} -fprofile-use=$(pwd)/code.profdata -fcs-profile-generate=/tmp/cs-pgo-data" \
    -D CMAKE_CXX_FLAGS="${CXXFLAGS} ${_common_instrument_flags} -fprofile-use=$(pwd)/code.profdata -fcs-profile-generate=/tmp/cs-pgo-data" \
    -D CMAKE_EXE_LINKER_FLAGS="${LDFLAGS} ${_common_instrument_flags} -fprofile-use=$(pwd)/code.profdata -fcs-profile-generate=/tmp/cs-pgo-data"
  cmake --build build-cs-pgo -v

  # Step 4: Generate context-sensitive profile data by running tests again
  echo "Generating context-sensitive PGO profile data..."
  pushd build-cs-pgo
  ctest --output-on-failure --stop-on-failure -j$(nproc) || true  # Allow tests to fail without stopping the build
  popd

  # Merge the context-sensitive profile data with the standard PGO data
  echo "Merging context-sensitive PGO profile data..."
  llvm-profdata merge -output=cs_code.profdata /tmp/cs-pgo-data code.profdata

  # Step 5: Final optimized build using both profiles (-fprofile-use)
  echo "Building final optimized binary with PGO and CS-PGO profiles..."
  mkdir -p build-final
  cmake "${cmake_options[@]}" -B build-final \
    -D CMAKE_BUILD_TYPE=Release \
    -D CMAKE_C_FLAGS="${CFLAGS} -fprofile-use=$(pwd)/cs_code.profdata" \
    -D CMAKE_CXX_FLAGS="${CXXFLAGS} -fprofile-use=$(pwd)/cs_code.profdata" \
    -D CMAKE_EXE_LINKER_FLAGS="${LDFLAGS} -fprofile-use=$(pwd)/cs_code.profdata"
  cmake --build build-final -v

  # Step 6: Clean up temporary profile data directories
  rm -rf /tmp/pgo-data /tmp/cs-pgo-data
}

#check() {
#  # Run tests on the final optimized build
#  ctest --test-dir build-final --output-on-failure --stop-on-failure -j$(nproc)
#}

package() {
  # Install the final optimized build
  DESTDIR="$pkgdir" cmake --install build-final -v

  # header required by some dependents
  # https://bugs.archlinux.org/task/24787
  install -vDm 644 $pkgname-$pkgver/src/jpegint.h "$pkgdir/usr/include"

  install -vDm 644 $pkgname-$pkgver/LICENSE.md -t "$pkgdir/usr/share/licenses/$pkgname/"
  install -vDm 644 $pkgname-$pkgver/README.ijg -t "$pkgdir/usr/share/licenses/$pkgname/"
}
