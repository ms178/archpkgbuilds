From 69f1e6caf7118c2d698a1dd879f01b47fb49d690 Mon Sep 17 00:00:00 2001
From: vrodri3 <victor.rodriguez.bahena@intel.com>
Date: Tue, 16 Feb 2016 19:52:48 +0000
Subject: [PATCH] Add pybench to the PROFILE_TASK rule

This is necesary due to the fact that pybench is the main benchmark that
industry use to compare python performance. Openbenchmarking used it
so we need it as a base of PGO optimizations

Signed-off-by: vrodri3 <victor.rodriguez.bahena@intel.com>
---
 Makefile.pre.in | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/Makefile.pre.in b/Makefile.pre.in
index ee73edd..82d3173 100644
--- a/Makefile.pre.in
+++ b/Makefile.pre.in
@@ -210,6 +210,7 @@ TCLTK_LIBS=	@TCLTK_LIBS@
 
 # The task to run while instrument when building the profile-opt target
 PROFILE_TASK=-m test.regrtest --pgo -x test_asyncore test_gdb test_multiprocessing test_subprocess
+PROFILE_TASK_PYBENCH= $(srcdir)/Tools/pybench/pybench.py -n 2 --with-gc --with-syscheck
 
 # === Definitions added by makesetup ===
 
@@ -450,6 +451,7 @@ build_all_generate_profile:
 run_profile_task:
 	: # FIXME: can't run for a cross build
 	$(LLVM_PROF_FILE) $(RUNSHARED) ./$(BUILDPYTHON) $(PROFILE_TASK) || true
+	$(LLVM_PROF_FILE) $(RUNSHARED) ./$(BUILDPYTHON) $(PROFILE_TASK_PYBENCH) || true
 
 build_all_merge_profile:
 	$(LLVM_PROF_MERGER)
-- 
2.7.0

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: William Douglas <william.douglas@intel.com>
Date: Tue, 12 Jun 2018 19:00:23 +0000
Subject: [PATCH] Build avx2 and avx512 versions of the math library

---
 Makefile.pre.in | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/Makefile.pre.in b/Makefile.pre.in
index f128444..d14d07c 100644
--- a/Makefile.pre.in
+++ b/Makefile.pre.in
@@ -610,6 +610,8 @@ pybuilddir.txt: $(BUILDPYTHON)
 # This is shared by the math and cmath modules
 Modules/_math.o: Modules/_math.c Modules/_math.h
 	$(CC) -c $(CCSHARED) $(PY_CORE_CFLAGS) -o $@ $<
+	$(CC) -c $(CCSHARED) $(PY_CORE_CFLAGS) -march=haswell -o $@.avx2 $<
+	$(CC) -c $(CCSHARED) $(PY_CORE_CFLAGS) -march=skylake-avx512 -o $@.avx512 $<

 # blake2s is auto-generated from blake2b
 $(srcdir)/Modules/_blake2/blake2s_impl.c: $(srcdir)/Modules/_blake2/blake2b_impl.c $(srcdir)/Modules/_blake2/blake2b2s.py
 From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Guobing Chen <guobing.chen@intel.com>
Date: Thu, 9 Jan 2020 11:24:23 +0800
Subject: [PATCH] AVX2 and AVX512 support

Merged the original AVX2/AVX512 support patch together with fix to
enable using AVX version static libs when linking binaries. The
static lib should be libname-avx2 or libname-avx512. An example
usage is scikit-learn.

Signed-off-by: Guobing Chen <guobing.chen@intel.com>
---
 Lib/distutils/unixccompiler.py | 59 ++++++++++++++++++++++++++++++++++
 Python/dynload_shlib.c         | 15 +++++++++
 2 files changed, 74 insertions(+)

diff --git a/Lib/distutils/unixccompiler.py b/Lib/distutils/unixccompiler.py
index f0792de..97838fa 100644
--- a/Lib/distutils/unixccompiler.py
+++ b/Lib/distutils/unixccompiler.py
@@ -116,6 +116,16 @@ class UnixCCompiler(CCompiler):
         try:
             self.spawn(compiler_so + cc_args + [src, '-o', obj] +
                        extra_postargs)
+            self.spawn(compiler_so + cc_args+ ["-march=haswell", "-O3",
+                                               "-fno-semantic-interposition",
+                                               "-ffat-lto-objects",
+                                               "-flto=auto"] +
+                       [src, '-o', obj + ".avx2"] + extra_postargs)
+            self.spawn(compiler_so + cc_args+ ["-march=skylake-avx512", "-O3",
+                                               "-fno-semantic-interposition",
+                                               "-ffat-lto-objects", "-flto=auto", "-Wa,-mbranches-within-32B-boundaries",
+                                               "-mprefer-vector-width=256"] +
+                       [src, '-o', obj + ".avx512"] + extra_postargs)
         except DistutilsExecError as msg:
             raise CompileError(msg)

@@ -157,6 +167,37 @@ class UnixCCompiler(CCompiler):

         lib_opts = gen_lib_options(self, library_dirs, runtime_library_dirs,
                                    libraries)
+        lib_opts_avx2 = []
+        for element in lib_opts:
+            if element.startswith('-l'):
+                element_tmp = element + '-avx2'
+                lib_opts_avx2.append(element_tmp)
+                # Try with gcc to check whether there are avx2/avx512 lib versions.
+                # subprocess or os.popen() cannot be used as not support in python
+                # self-boost building.
+                ret = os.system(f"echo 'main() {{}}' | gcc -o /dev/null {element_tmp} -xc -")
+                if ret:
+                    lib_opts_avx2.pop()
+                    lib_opts_avx2.append(element)
+            else:
+                lib_opts_avx2.append(element)
+
+        lib_opts_avx512 = []
+        for element in lib_opts:
+            if element.startswith('-l'):
+                element_tmp = element + '-avx512'
+                lib_opts_avx512.append(element_tmp)
+                # try with gcc to check whether there are avx2/avx512 lib versions
+                # subprocess or os.popen() cannot be used as not support in python
+                # self-boost building.
+                ret = os.system(f"echo 'main() {{}}' | gcc -o /dev/null {element_tmp} -xc -")
+                if ret:
+                    lib_opts_avx512.pop()
+                    lib_opts_avx512.append(element)
+            else:
+                lib_opts_avx512.append(element)
+
+
         if not isinstance(output_dir, (str, type(None))):
             raise TypeError("'output_dir' must be a string or None")
         if output_dir is not None:
@@ -202,6 +243,24 @@ class UnixCCompiler(CCompiler):
                     linker = _osx_support.compiler_fixup(linker, ld_args)

                 self.spawn(linker + ld_args)
+                ld_args = ([(obj + ".avx2").replace(".s.avx2",".s") for obj in objects] + self.objects +
+                       lib_opts_avx2 + ['-o', output_filename + ".avx2"])
+                if debug:
+                    ld_args[:0] = ['-g']
+                if extra_preargs:
+                    ld_args[:0] = extra_preargs
+                if extra_postargs:
+                    ld_args.extend(extra_postargs + ['-lgfortran'])
+                self.spawn(linker + ld_args)
+                ld_args = ([(obj + ".avx512").replace(".s.avx2","s") for obj in objects] + self.objects +
+                       lib_opts_avx512 + ['-o', output_filename + ".avx512"])
+                if debug:
+                    ld_args[:0] = ['-g']
+                if extra_preargs:
+                    ld_args[:0] = extra_preargs
+                if extra_postargs:
+                    ld_args.extend(extra_postargs + ['-lgfortran'])
+                self.spawn(linker + ld_args)
             except DistutilsExecError as msg:
                 raise LinkError(msg)
         else:
diff --git a/Python/dynload_shlib.c b/Python/dynload_shlib.c
index 2382889..5df13b7 100644
--- a/Python/dynload_shlib.c
+++ b/Python/dynload_shlib.c
@@ -65,6 +65,8 @@ _PyImport_FindSharedFuncptr(const char *prefix,
     void *handle;
     char funcname[258];
     char pathbuf[260];
+    char *pathname2;
+    char *pathname3;
     int dlopenflags=0;

     if (strchr(pathname, '/') == NULL) {
@@ -98,6 +100,19 @@ _PyImport_FindSharedFuncptr(const char *prefix,
     dlopenflags = _PyInterpreterState_GET()->dlopenflags;

     handle = dlopen(pathname, dlopenflags);
+    pathname2 = malloc(strlen(pathname) + strlen(".avx2") + 1);
+    sprintf(pathname2, "%s%s", pathname, ".avx2");
+    pathname3 = malloc(strlen(pathname) + strlen(".avx512") + 1);
+    sprintf(pathname3, "%s%s", pathname, ".avx512");
+
+    if (__builtin_cpu_supports("avx512dq") && access(pathname3, R_OK) == 0)
+        handle = dlopen(pathname3, dlopenflags);
+    else if (__builtin_cpu_supports("avx2") && access(pathname2, R_OK) == 0)
+        handle = dlopen(pathname2, dlopenflags);
+    else
+        handle = dlopen(pathname, dlopenflags);
+    free(pathname2);
+    free(pathname3);

     if (handle == NULL) {
         PyObject *mod_name;
