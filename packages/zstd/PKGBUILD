pkgname=zstd
pkgver=1.5.6
pkgrel=11.1
pkgdesc='Zstandard - Fast real-time compression algorithm'
url='https://facebook.github.io/zstd/'
arch=(x86_64)
license=(BSD GPL2)
depends=(glibc gcc-libs zlib xz lz4 cmake)
makedepends=(gtest)
provides=("libzstd.so" "zstd=${pkgver}" "libzstd.so=1-64")
options=(!debug lto !strip)
source=(https://github.com/facebook/zstd/releases/download/v${pkgver}/zstd-${pkgver}.tar.zst{,.sig}
        fopen-use-m.patch
        multi-thread-default.patch
        notrace.patch
)
sha256sums=('SKIP')

prepare() {
  cd ${pkgname}-${pkgver}

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    echo "Applying patch $src..."
    patch -Np1 < "../$src"
  done
  # avoid error on tests without static libs, we use LD_LIBRARY_PATH
  sed '/build static library to build tests/d' -i build/cmake/CMakeLists.txt
  sed 's/libzstd_static/libzstd_shared/g' -i build/cmake/tests/CMakeLists.txt
}

build() {
  cd ${pkgname}-${pkgver}

  # Build zstd (no instrumentation needed for perf)
  cmake -S build/cmake -B build -G Ninja \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_C_STANDARD=23 \
    -DCMAKE_CXX_STANDARD=23 \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_INSTALL_LIBDIR=lib \
    -DZSTD_ZLIB_SUPPORT=ON \
    -DZSTD_LZMA_SUPPORT=ON \
    -DZSTD_LZ4_SUPPORT=ON \
    -DZSTD_BUILD_CONTRIB=ON \
    -DZSTD_BUILD_STATIC=OFF \
    -DZSTD_BUILD_TESTS=ON \
    -DZSTD_PROGRAMS_LINK_SHARED=ON
  cmake --build build

  # Profile zstd using perf record with LBR
  msg2 "== Profiling zstd with perf and ctest (using LBR)"
  perf record -o perf.data -b --max-size=6G -F 5000 -e cycles:u -- ctest --test-dir build --output-on-failure

  # Convert perf data to BOLT format
  msg2 "== Converting perf data to BOLT format (using LBR)"
  perf2bolt build/programs/zstd -p perf.data -o build/programs/zstd.fdata

  # Optimize zstd with BOLT
  msg2 "== Optimizing zstd with BOLT"
  llvm-bolt build/programs/zstd -o build/programs/zstd.bolt \
    --data build/programs/zstd.fdata \
    --dyno-stats --cu-processing-batch-size=64 --eliminate-unreachable --frame-opt=all \
    --icf=all --jump-tables=aggressive --min-branch-clusters --stoke --sctc-mode=always \
    --plt=all --hot-data --hot-text --frame-opt-rm-stores --peepholes=all \
    --infer-stale-profile=1 --x86-strip-redundant-address-size --indirect-call-promotion=all \
    --reg-reassign --use-aggr-reg-reassign --reorder-blocks=ext-tsp --reorder-functions=cdsort \
    --split-all-cold --split-eh --split-functions --split-strategy=cdsplit

  # Replace original zstd with optimized version
  mv build/programs/zstd.bolt build/programs/zstd

  # Cleanup
  rm -rf /tmp/zstd-bolt
}

#check() {
#  cd ${pkgname}-${pkgver}
#  export LD_LIBRARY_PATH="$(pwd)/build/lib"
#  ctest -VV --test-dir build
#}

package() {
  cd ${pkgname}-${pkgver}
  DESTDIR="${pkgdir}" cmake --install build

  # Use llvm-strip only on recognized file formats
  find "$pkgdir" -type f \( -name '*.so*' -o -name '*.a' -o -executable \) -print0 | while IFS= read -r -d '' file; do
    if llvm-strip --strip-unneeded "$file" 2>/dev/null || llvm-strip --strip-all "$file" 2>/dev/null; then
      echo "Stripped: $file"
    else
      echo "Skipping: $file (not a valid object file)" >&2
    fi
  done

  ln -sf /usr/bin/zstd "${pkgdir}/usr/bin/zstdmt"
  install -Dm 644 LICENSE -t "${pkgdir}/usr/share/licenses/${pkgname}"
}
