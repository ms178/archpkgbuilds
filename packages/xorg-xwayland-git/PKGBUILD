pkgname=xorg-xwayland-git
pkgver=24.1.6.r879.g37b7ea8f8
pkgrel=1
arch=('x86_64')
license=(
  LicenseRef-Adobe-Display-PostScript
  BSD-3-Clause
  LicenseRef-DEC-3-Clause
  HPND
  LicenseRef-HPND-sell-MIT-disclaimer-xserver
  HPND-sell-variant
  ICU
  ISC
  MIT
  MIT-open-group
  NTP
  SGI-B-2.0
  SMLNJ
  X11
  X11-distribute-modifications-variant)
groups=('xorg')
url="https://xorg.freedesktop.org"
pkgdesc="Run X clients under Wayland (git version)"
depends=('nettle' 'libepoxy' 'systemd-libs' 'libxfont2'
         'pixman' 'xorg-server-common' 'libxcvt' 'mesa'
         'libglvnd' 'libxau' 'wayland' 'libdrm' 'libtirpc'
         'libei' 'libxshmfence' 'glibc')
makedepends=('meson' 'xorgproto' 'xtrans' 'libxkbfile' 'dbus'
             'xorg-font-util' 'wayland-protocols' 'mesa-libgl'
             'systemd' 'git' 'clang' 'llvm' 'weston' 'glxgears' 'mesa-demos' 'xorg-xset')
source=("xserver::git+https://gitlab.freedesktop.org/xorg/xserver.git"
        "1567.patch")
sha256sums=('SKIP'
            'SKIP') # It's highly recommended to add a checksum for local patches like 1567.patch

provides=('xorg-xwayland' 'xorg-server-xwayland' 'xorg-server-xwayland-git')
conflicts=('xorg-xwayland' 'xorg-server-xwayland' 'xorg-server-xwayland-git')
replaces=('xorg-server-xwayland-git')

pkgver() {
  cd xserver
  local branch_ref="origin/xwayland-24.1"
  local head=$(git rev-parse --short HEAD)
  local tag
  # Attempt to find the most relevant xwayland tag
  tag=$(git describe --abbrev=0 --tags --match "xwayland-*" "$branch_ref" 2>/dev/null) || \
  tag=$(git describe --abbrev=0 --tags --match "xwayland-*" HEAD 2>/dev/null) || \
  tag=$(git describe --abbrev=0 --tags "$branch_ref" 2>/dev/null) || \
  tag=$(git describe --abbrev=0 --tags HEAD 2>/dev/null) || \
  tag="custom" # Fallback if no suitable tag is found

  local revisions
  if [[ "$tag" == "custom" ]]; then # If no tag, count all revs on branch (or from HEAD)
    revisions=$(git rev-list HEAD --count)
  else
    revisions=$(git rev-list "${tag}..HEAD" --count)
  fi

  # Strip 'xwayland-' prefix from tag for version string if present
  printf "%s.r%d.g%s" "$(echo "$tag" | sed 's/^xwayland-//')" "$revisions" "$head"
}

prepare() {
    local src_file
    cd xserver
    for src_file in "${source[@]}"; do
        src_file="${src_file%%::*}"
        src_file="${src_file##*/}"
        if [[ $src_file == *.patch ]]; then
            echo "Applying patch $src_file..."
            patch --forward --strip=1 < "../${src_file}"
        fi
    done
}

build() {
  export CC="clang"
  export CXX="clang++"

  # User's custom instrumentation flags
  local _common_instrument_flags="-g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=150 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"

  # Common Meson options
  local _meson_common_options=(
    -Db_ndebug=true
    -Db_pie=false
    -Dc_std=gnu2x
    -Dcpp_std=gnu++2a
    -Db_lto=false
    --wrap-mode=nofallback
    -Dipv6=true
    -Dxvfb=false
    -Dxnest=false
    -Dxdmcp=false
    -Dxcsecurity=true
    -Dxorg=false
    -Dxephyr=false
    -Dxwayland=true
    -Dxwin=false
    -Dxquartz=false
    -Ddri3=true
    -Dglamor=true
    -Dxkb_dir=/usr/share/X11/xkb
    -Dxkb_output_dir=/var/lib/xkb
  )

  mkdir -p "${srcdir}/pgo_profiles" "${srcdir}/cs_pgo_profiles"

  ##################################################
  # STEP 1: Build with standard PGO instrumentation
  ##################################################
  echo "Building xorg-xwayland with standard PGO instrumentation..."
  local build_dir_pgo_generate="build-pgo-generate"

  local _compiler_args_pgo_generate="${_common_instrument_flags} -fprofile-instr-generate"
  local _linker_args_pgo_generate="-fprofile-instr-generate"

  arch-meson xserver "$build_dir_pgo_generate" \
      "${_meson_common_options[@]}" \
      --buildtype=debug \
      -Dc_args="${_compiler_args_pgo_generate}" \
      -Dcpp_args="${_compiler_args_pgo_generate}" \
      -Dc_link_args="${_linker_args_pgo_generate}" \
      -Dcpp_link_args="${_linker_args_pgo_generate}"

  ninja -C "$build_dir_pgo_generate"
  DESTDIR="${srcdir}/temp_install" ninja -C "$build_dir_pgo_generate" install

  ##################################################
  # STEP 2: Create script to run workload (User's Original Method - modified)
  ##################################################
  echo "Creating script to run workload for profiling (using user's pkill method)..."
cat > "${srcdir}/run_workload.sh" << 'EOF'
#!/bin/bash
set -e

# Use the current display (provided by the existing Wayland session's Xwayland)
if [ -z "$DISPLAY" ]; then
  echo "Error: DISPLAY environment variable not set. Run this script within a graphical session."
  exit 1
fi

# Debugging: Print environment variables
echo "DEBUG: DISPLAY=$DISPLAY"
echo "DEBUG: LIBGL_DRIVERS_PATH=$LIBGL_DRIVERS_PATH"
echo "DEBUG: LD_LIBRARY_PATH=$LD_LIBRARY_PATH"

# Ensure basic GL rendering is working in the ambient environment
echo "Performing ambient GL check with glxinfo..."
glxinfo | grep -E "direct rendering|OpenGL vendor|OpenGL renderer" || {
  echo "Error: Ambient glxinfo check failed. OpenGL might not be properly configured in the session."
  exit 1
}

# Get directory and binary path for the instrumented Xwayland
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
XWAYLAND_BIN="${SCRIPT_DIR}/temp_install/usr/bin/Xwayland"

# Verify instrumented binary exists
if [ ! -f "$XWAYLAND_BIN" ]; then
  echo "Error: Instrumented Xwayland binary not found at ${XWAYLAND_BIN}!"
  exit 1
fi
echo "DEBUG: Using instrumented Xwayland binary for direct calls: $XWAYLAND_BIN"
echo "DEBUG: Instrumented Xwayland version check (direct call):"
"$XWAYLAND_BIN" -version || echo "DEBUG: Failed to get version from $XWAYLAND_BIN"


# Setup temporary runtime directory (as per original script's intent)
# This primarily affects processes that might be forked by the instrumented Xwayland, if any.
export XDG_RUNTIME_DIR_PGO="$(mktemp -d -p /tmp xwayland-pgo-workload-XXXXXX)"
chmod 700 "$XDG_RUNTIME_DIR_PGO"
original_xdg_runtime_dir="$XDG_RUNTIME_DIR"
export XDG_RUNTIME_DIR="$XDG_RUNTIME_DIR_PGO"


echo "=== DIRECT BINARY EXERCISING (Instrumented Xwayland) ==="
echo "Exercising instrumented Xwayland binary with various options to generate profile data..."

"$XWAYLAND_BIN" -help > /dev/null
"$XWAYLAND_BIN" -glamor gl -showoptions 2>/dev/null || true
"$XWAYLAND_BIN" -glamor es -showoptions 2>/dev/null || true
"$XWAYLAND_BIN" -glamor off -showoptions 2>/dev/null || true

for ext in SHAPE MIT-SHM XTEST SECURITY XINERAMA XFIXES RENDER RANDR COMPOSITE DAMAGE "MIT-SCREEN-SAVER" "DOUBLE-BUFFER" RECORD DPMS "X-Resource" XVideo "XVideo-MotionCompensation" GLX; do
  "$XWAYLAND_BIN" +extension "$ext" -showoptions 2>/dev/null || true
  "$XWAYLAND_BIN" -extension "$ext" -showoptions 2>/dev/null || true
done
"$XWAYLAND_BIN" -ac -noreset -retro -verbose 5 -listen tcp -nolock -showoptions 2>/dev/null || true

echo "=== GPU-INTENSIVE TESTING (against ambient $DISPLAY) ==="
# These OpenGL tests will run against the X server specified by the ambient $DISPLAY.

glxgears -info > /dev/null &
glmark2 --run-forever &
glxheads > /dev/null &
glxgears -fullscreen > /dev/null &

echo "GPU-intensive workload running for 30 seconds on $DISPLAY..."
sleep 30

echo "Stopping X clients using pkill..."
pkill -f glxgears || true
pkill -f glmark2 || true
pkill -f glxheads || true
# Give a moment for processes to terminate and write profiles if they were instrumented
sleep 2

# Restore original XDG_RUNTIME_DIR and clean up the temporary one
export XDG_RUNTIME_DIR="$original_xdg_runtime_dir"
rm -rf "$XDG_RUNTIME_DIR_PGO"

echo "Workload completed successfully."
EOF
  chmod +x "${srcdir}/run_workload.sh"

  ##################################################
  # STEP 3: Run workload to generate PGO profiles
  ##################################################
  echo "Running workload to generate PGO profiles..."
  export LLVM_PROFILE_FILE="${srcdir}/pgo_profiles/xwayland-%m-%p.profraw"
  if ! "${srcdir}/run_workload.sh"; then
    echo "Error: Profiling workload failed for standard PGO. Check the output above for details."
    exit 1
  fi

  echo "Checking for standard PGO profiles in ${srcdir}/pgo_profiles:"
  find "${srcdir}/pgo_profiles" -type f -name "*.profraw" -print -exec ls -lh {} \;

  echo "Merging standard PGO profiles..."
  if compgen -G "${srcdir}/pgo_profiles/*.profraw" > /dev/null; then
    llvm-profdata merge -output="${srcdir}/xwayland.profdata" "${srcdir}/pgo_profiles"/*.profraw
  else
    echo "Warning: No .profraw files found to merge for standard PGO. Creating an empty but valid xwayland.profdata."
    touch "${srcdir}/dummy.profraw" # Create a dummy file
    llvm-profdata merge -output="${srcdir}/xwayland.profdata" "${srcdir}/dummy.profraw" # Merge dummy to create valid empty profdata
    rm "${srcdir}/dummy.profraw" # Clean up dummy
  fi

  ##################################################
  # STEP 4: Build with context-sensitive PGO instrumentation
  ##################################################
  echo "Building xorg-xwayland with context-sensitive PGO instrumentation..."
  local build_dir_cs_pgo_generate="build-cs-pgo-generate"

  local _compiler_args_cs_generate="${_common_instrument_flags} -fprofile-instr-use=${srcdir}/xwayland.profdata -fcs-profile-generate=${srcdir}/cs_pgo_profiles"
  local _linker_args_cs_generate="${_common_instrument_flags} -fprofile-instr-use=${srcdir}/xwayland.profdata -fcs-profile-generate=${srcdir}/cs_pgo_profiles"

  arch-meson xserver "$build_dir_cs_pgo_generate" \
      "${_meson_common_options[@]}" \
      --buildtype=debug \
      -Dc_args="${_compiler_args_cs_generate}" \
      -Dcpp_args="${_compiler_args_cs_generate}" \
      -Dc_link_args="${_linker_args_cs_generate}" \
      -Dcpp_link_args="${_linker_args_cs_generate}"

  ninja -C "$build_dir_cs_pgo_generate"
  rm -rf "${srcdir}/temp_install"
  DESTDIR="${srcdir}/temp_install" ninja -C "$build_dir_cs_pgo_generate" install

  ##################################################
  # STEP 5: Run workload again for CS-PGO profiles
  ##################################################
  echo "Running workload to generate CS-PGO profiles..."
  export LLVM_PROFILE_FILE="${srcdir}/cs_pgo_profiles/xwayland-cs-%m-%p.profraw"
  if ! "${srcdir}/run_workload.sh"; then
    echo "Error: Profiling workload failed for CS-PGO. Check the output above for details."
    exit 1
  fi

  echo "Checking for context-sensitive PGO profiles in ${srcdir}/cs_pgo_profiles:"
  find "${srcdir}/cs_pgo_profiles" -type f -name "*.profraw" -print -exec ls -lh {} \;

  echo "Merging context-sensitive PGO profiles..."
  if compgen -G "${srcdir}/cs_pgo_profiles/*.profraw" > /dev/null; then
    llvm-profdata merge -output="${srcdir}/xwayland-cs.profdata" "${srcdir}/cs_pgo_profiles"/*.profraw "${srcdir}/xwayland.profdata"
  else
    echo "Warning: No .profraw files found to merge for CS-PGO. Copying previous xwayland.profdata to xwayland-cs.profdata."
    if [ -f "${srcdir}/xwayland.profdata" ]; then
      cp "${srcdir}/xwayland.profdata" "${srcdir}/xwayland-cs.profdata"
    else
      # This case should ideally not happen if the first merge always creates a file
      echo "Error: xwayland.profdata not found to copy for CS-PGO. Creating an empty one."
      touch "${srcdir}/dummy.profraw"
      llvm-profdata merge -output="${srcdir}/xwayland-cs.profdata" "${srcdir}/dummy.profraw"
      rm "${srcdir}/dummy.profraw"
    fi
  fi

  ##################################################
  # STEP 6: Final build with all profiles
  ##################################################
  echo "Building final optimized xorg-xwayland..."
  local build_dir_final="build-final"

  local _compiler_args_final="-fprofile-instr-use=${srcdir}/xwayland-cs.profdata"
  local _linker_args_final="-fprofile-instr-use=${srcdir}/xwayland-cs.profdata"

  arch-meson xserver "$build_dir_final" \
      "${_meson_common_options[@]}" \
      --buildtype=release \
      -Dc_args="${_compiler_args_final}" \
      -Dcpp_args="${_compiler_args_final}" \
      -Dc_link_args="${_linker_args_final}" \
      -Dcpp_link_args="${_linker_args_final}"

  ninja -C "$build_dir_final"
}

package() {
  DESTDIR="${pkgdir}" ninja -C build-final install
  if [ -f "${pkgdir}/usr/lib/xorg/protocol.txt" ]; then
    rm "${pkgdir}/usr/lib/xorg/protocol.txt"
  fi
  if [ -d "${pkgdir}/usr/lib/xorg" ]; then
    rmdir --ignore-fail-on-non-empty "${pkgdir}/usr/lib/xorg"
  fi
  if [ -f "${pkgdir}/usr/share/man/man1/Xserver.1" ]; then
    rm "${pkgdir}/usr/share/man/man1/Xserver.1"
  fi
  install -Dm644 xserver/COPYING "${pkgdir}/usr/share/licenses/${pkgname}/COPYING"
}
