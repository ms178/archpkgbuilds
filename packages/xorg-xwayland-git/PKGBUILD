pkgname=xorg-xwayland-git
pkgver=24.1.8.r1026.gbf867b465
pkgrel=1
pkgdesc='Run X clients under Wayland (git, PGO tuned for real GPU)'
arch=('x86_64')
url='https://xorg.freedesktop.org'
license=('MIT' 'X11')
groups=(xorg)

depends=(nettle libepoxy systemd-libs libxfont2 pixman xorg-server-common
         libxcvt mesa libglvnd libxau wayland libdrm libtirpc libei
         libxshmfence glibc)
makedepends=(git meson clang llvm xorgproto xtrans libxkbfile dbus
             xorg-font-util wayland-protocols mesa-libgl systemd
             weston mesa-demos glmark2)

provides=(xorg-xwayland xorg-server-xwayland xorg-server-xwayland-git)
conflicts=(xorg-xwayland xorg-server-xwayland xorg-server-xwayland-git)
replaces=(xorg-server-xwayland-git)

source=(
  'xserver::git+https://gitlab.freedesktop.org/xorg/xserver.git'
  'ms178-1.patch'
)
# SUPER-GENIUS MAINTAINER NOTE: For reproducibility and security, generate a checksum for your patch
# by running `updpkgsums` in the terminal.
sha256sums=('SKIP' 'SKIP')

##############################################################################
# Extra instrumentation flags – exactly the user-supplied string
##############################################################################
_extra_instr='-g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=150 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling'

##############################################################################
# Meson feature options (shared by all passes)
##############################################################################
_meson_opts=(
  -Db_ndebug=true -Db_pie=false
  -Dc_std=gnu2x   -Dcpp_std=gnu++2a
  -Db_lto=false
  --wrap-mode=nofallback
  -Dipv6=true   -Dxvfb=false  -Dxnest=false -Dxdmcp=false
  -Dxcsecurity=true -Dxorg=false -Dxephyr=false -Dxwayland=true
  -Dxwin=false  -Dxquartz=false
  -Ddri3=true   -Dglamor=true
  -Dxkb_dir=/usr/share/X11/xkb
  -Dxkb_output_dir=/var/lib/xkb
)

pkgver() {
  cd xserver
  git fetch origin xwayland-24.1 --quiet
  local tag=$(git describe --abbrev=0 --tags --match 'xwayland-*' \
                origin/xwayland-24.1 2>/dev/null)
  local revs=$(git rev-list "${tag}..HEAD" --count)
  printf '%s.r%s.g%s' "${tag#xwayland-}" "$revs" "$(git rev-parse --short HEAD)"
}

prepare() {
  cd xserver
  # Apply patches
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    patch -Np1 -i "../${src}"
  done
}

##############################################################################
# SUPER-GENIUS MAINTAINER NOTE: The training workload has been completely
# overhauled. Instead of the outdated glxgears and a single glmark2 scene,
# this function now runs multiple, demanding glmark2 benchmarks in parallel.
# This simulates a more complex and varied load, similar to modern games,
# generating a much higher quality profile for optimization.
##############################################################################
_run_workload() {        # $1 build dir
  local builddir=$1
  local xway="$PWD/$builddir/hw/xwayland/Xwayland"
  local disp_file
  disp_file=$(mktemp -u --tmpdir xw-disp-XXXX)

  # Rootless Xwayland connecting to the running compositor via WAYLAND_DISPLAY
  "$xway" :77 -rootless -noreset -terminate -displayfd 3 -wm 2 \
         3>"$disp_file" &

  local xpid=$!
  for _ in {1..50}; do [[ -s $disp_file ]] && break; sleep 0.1; done
  [[ -s $disp_file ]] || { echo "Xwayland failed"; kill $xpid; return 1; }
  read -r dpy < "$disp_file"
  export DISPLAY=":$dpy"

  # make sure we use hardware GL (no llvmpipe)
  glxinfo | grep -q 'OpenGL renderer string:.*AMD' || \
    echo "Warning: AMD renderer not active – profiling anyway."

  # Run multiple demanding scenes to generate comprehensive profile data
  echo "Starting comprehensive training workload for 30 seconds..."
  glmark2 --fullscreen -b jellyfish --run-forever >/dev/null 2>&1 &
  glmark2 --fullscreen -b shadow --run-forever >/dev/null 2>&1 &
  glmark2 --fullscreen -b shading --shading-type=phong --run-forever >/dev/null 2>&1 &

  sleep 30

  # Cleanly terminate all child processes
  pkill -TERM glmark2 2>/dev/null || true
  wait $xpid 2>/dev/null || true
  rm -f "$disp_file"
  echo "Workload finished."
}


##############################################################################
# Three-pass build
##############################################################################
build() {
  export CC=clang
  export CXX=clang++

  # keep user optimisation flags
  local U_CFLAGS="$CFLAGS"
  local U_CXXFLAGS="$CXXFLAGS"
  local U_LDFLAGS="$LDFLAGS"

  local gen_dir="$srcdir/pgo-gen"
  local cs_dir="$srcdir/pgo-cs"
  mkdir -p "$gen_dir" "$cs_dir"

  cd xserver

  # ---------- PASS 1 : profile-generate -------------------------------
  # SUPER-GENIUS MAINTAINER NOTE: Using -fprofile-generate as requested.
  local c_gen="$U_CFLAGS $_extra_instr -fprofile-generate=$gen_dir"
  local link_gen="$U_LDFLAGS -fprofile-generate=$gen_dir"
  arch-meson . build-gen "${_meson_opts[@]}" --buildtype=release \
    -Dc_args="$c_gen" -Dcpp_args="$c_gen" \
    -Dc_link_args="$link_gen" -Dcpp_link_args="$link_gen"
  ninja -C build-gen
  LLVM_PROFILE_FILE="$gen_dir/%p.profraw" _run_workload build-gen
  llvm-profdata merge -o "$srcdir/gen.prof" "$gen_dir"/*.profraw

  # ---------- PASS 2 : profile-use + cs-generate ----------------------
  # SUPER-GENIUS MAINTAINER NOTE: Using -fprofile-use as requested.
  local c_cs="$U_CFLAGS $_extra_instr -fprofile-use=$srcdir/gen.prof -fcs-profile-generate=$cs_dir"
  local link_cs="$U_LDFLAGS -fprofile-use=$srcdir/gen.prof -fcs-profile-generate=$cs_dir"
  arch-meson . build-cs "${_meson_opts[@]}" --buildtype=release \
    -Dc_args="$c_cs" -Dcpp_args="$c_cs" \
    -Dc_link_args="$link_cs" -Dcpp_link_args="$link_cs"
  ninja -C build-cs
  LLVM_PROFILE_FILE="$cs_dir/%p.profraw" _run_workload build-cs
  llvm-profdata merge -o "$srcdir/final.prof" "$cs_dir"/*.profraw "$srcdir/gen.prof"

  # ---------- PASS 3 : final profile-use ------------------------------
  # SUPER-GENIUS MAINTAINER NOTE: Using -fprofile-use as requested. LTO remains disabled per _meson_opts.
  local c_fin="$U_CFLAGS -fprofile-use=$srcdir/final.prof"
  local link_fin="$U_LDFLAGS -fprofile-use=$srcdir/final.prof"
  arch-meson . build-final "${_meson_opts[@]}" --buildtype=release \
    -Dc_args="$c_fin" -Dcpp_args="$c_fin" \
    -Dc_link_args="$link_fin" -Dcpp_link_args="$link_fin"
  ninja -C build-final
}

##############################################################################
# package
##############################################################################
package() {
  DESTDIR="$pkgdir" ninja -C xserver/build-final install
  rm -f "$pkgdir/usr/lib/xorg/protocol.txt" \
        "$pkgdir/usr/share/man/man1/Xserver.1"
  rmdir --ignore-fail-on-non-empty "$pkgdir/usr/lib/xorg" 2>/dev/null || true
  install -Dm644 xserver/COPYING \
          "$pkgdir/usr/share/licenses/$pkgname/COPYING"
}

# vim: ts=2 sw=2 et
