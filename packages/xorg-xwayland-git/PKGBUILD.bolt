pkgname=xorg-xwayland-git
pkgver=24.1.6.r879.g37b7ea8f8
pkgrel=1
arch=('x86_64')
license=(
  LicenseRef-Adobe-Display-PostScript
  BSD-3-Clause
  LicenseRef-DEC-3-Clause
  HPND
  LicenseRef-HPND-sell-MIT-disclaimer-xserver
  HPND-sell-variant
  ICU
  ISC
  MIT
  MIT-open-group
  NTP
  SGI-B-2.0
  SMLNJ
  X11
  X11-distribute-modifications-variant)
groups=('xorg')
url="https://xorg.freedesktop.org"
pkgdesc="Run X clients under Wayland (git version)"
depends=('nettle' 'libepoxy' 'systemd-libs' 'libxfont2'
         'pixman' 'xorg-server-common' 'libxcvt' 'mesa'
         'libglvnd' 'libxau' 'wayland' 'libdrm' 'libtirpc'
         'libei' 'libxshmfence' 'glibc')
makedepends=('meson' 'xorgproto' 'xtrans' 'libxkbfile' 'dbus'
             'xorg-font-util' 'wayland-protocols' 'mesa-libgl'
             'systemd' 'git' 'clang' 'llvm' 'weston' 'glxgears' 'mesa-demos')
source=("xserver::git+https://gitlab.freedesktop.org/xorg/xserver.git"
1567.patch
)
sha256sums=('SKIP')

provides=('xorg-xwayland' 'xorg-server-xwayland' 'xorg-server-xwayland-git')
conflicts=('xorg-xwayland' 'xorg-server-xwayland' 'xorg-server-xwayland-git')
replaces=('xorg-server-xwayland-git')

pkgver() {
  cd xserver
  local branch=origin/xwayland-24.1
  local head=$(git rev-parse --short HEAD)
  local tag=$(git describe --abbrev=0 "$branch")
  local revisions=$(git rev-list "${tag}..HEAD" --count)
  printf "%s.r%d.g%s" "$(echo "$tag" | sed 's/^xwayland.//')" "$revisions" "$head"
}

prepare() {
    local src
    for src in "${source[@]}"; do
        src="${src%%::*}"
        src="${src##*/}"
        [[ $src = *.patch ]] || continue
        if [ -f "$src" ]; then
            echo "Applying patch $src..."
            patch --directory="xserver" --forward --strip=1 < "$src"
        else
            echo "Warning: Patch file $src not found"
        fi
    done
}

build() {
  # PGO instrumentation flags
  local _common_instrument_flags=" -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"

  # Create directories for profiles
  mkdir -p "${srcdir}/pgo_profiles" "${srcdir}/cs_pgo_profiles" "${srcdir}/bolt_profile"
  mkdir -p "${srcdir}/temp_install_pgo" "${srcdir}/temp_install_cs_pgo" "${srcdir}/bolt_instrumented" "${srcdir}/bolt_opt"

  ##################################################
  # STEP 0: Create comprehensive training workload
  ##################################################
  echo "Creating comprehensive training workload script..."

  cat > "${srcdir}/training_workload.sh" << 'EOF'
#!/bin/bash
set -e

# The program to test (passed as arg) or use default
PROGRAM="${1:-Xwayland}"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROGRAM_PATH="${2:-$SCRIPT_DIR/temp_install/usr/bin/$PROGRAM}"
PROFILE_DIR="${3:-$SCRIPT_DIR/pgo_profiles}"
TEST_MODE="${4:-full}"  # 'full' or 'minimal'

# Check if the binary exists
if [ ! -f "$PROGRAM_PATH" ]; then
  echo "Error: Program binary not found at $PROGRAM_PATH"
  exit 1
fi

# Verify we're running inside a graphical environment
if [ -z "$DISPLAY" ]; then
  echo "Error: DISPLAY environment variable not set. Must run inside a graphical session."
  exit 1
fi

# Test display connection
if ! xdpyinfo >/dev/null 2>&1; then
  echo "Error: Cannot connect to X display '$DISPLAY'. Please check your X server."
  exit 1
fi

# Setup runtime directory
export XDG_RUNTIME_DIR="$(mktemp -d -p /tmp xwayland-training-XXXXXX)"
chmod 700 "$XDG_RUNTIME_DIR"

# Time tracking
START_TIME=$(date +%s)
log_timing() {
  local CURRENT_TIME=$(date +%s)
  local ELAPSED=$((CURRENT_TIME - START_TIME))
  echo "[$ELAPSED s] $1"
}

log_timing "Starting training workload for $PROGRAM (mode: $TEST_MODE)"

echo "=== STATIC BINARY ANALYSIS ==="
# Extract symbols to identify functions that should be exercised
nm -D "$PROGRAM_PATH" | grep -E "T |t |W " | grep -i -E "dri|glx|Render|glamor|wayland|xwayland|Present|Composite|DDX|Drawable|pixmap|drawable|Image|picture|x11|Region|damage" | head -50 > "${SCRIPT_DIR}/key_symbols.txt"
echo "Top key symbols that should be exercised during profiling:"
cat "${SCRIPT_DIR}/key_symbols.txt"

echo "=== DIRECT BINARY EXERCISING ==="
echo "Exercising binary to generate profile data..."

# Run with options to exercise code paths - repeat multiple times to improve profiling
REPEAT_COUNT=3
if [ "$TEST_MODE" = "minimal" ]; then
  REPEAT_COUNT=1
fi

for i in $(seq 1 $REPEAT_COUNT); do
  log_timing "Run $i of direct binary exercising..."
  "$PROGRAM_PATH" -help > /dev/null
  "$PROGRAM_PATH" -version > /dev/null
  "$PROGRAM_PATH" -glamor gl -showoptions 2>/dev/null || true
  "$PROGRAM_PATH" -glamor es -showoptions 2>/dev/null || true
  "$PROGRAM_PATH" -glamor off -showoptions 2>/dev/null || true

  # Test all extensions with multiple repetitions
  for ext in SHAPE MIT-SHM XTEST SECURITY XINERAMA XFIXES RENDER RANDR COMPOSITE DAMAGE "MIT-SCREEN-SAVER" "DOUBLE-BUFFER" RECORD DPMS "X-Resource" XVideo "XVideo-MotionCompensation" GLX; do
    "$PROGRAM_PATH" +extension $ext -showoptions 2>/dev/null || true
    "$PROGRAM_PATH" -extension $ext -showoptions 2>/dev/null || true
  done

  # More combinations
  "$PROGRAM_PATH" -ac -noreset -retro -verbose 5 -listen tcp -nolock -showoptions 2>/dev/null || true
done

echo "=== INTENSIVE GPU TESTING ==="
# Run multiple graphics tests in parallel to increase code coverage
log_timing "Starting intensive graphics tests..."

# Function to run glxgears with different parameters
run_glxgears_tests() {
  for size in 100 300 500; do
    glxgears -geometry ${size}x${size} > /dev/null 2>&1 &
    GEARS_PIDS+=($!)
    sleep 2
  done

  # Run with different options
  glxgears -info > /dev/null 2>&1 &
  GEARS_PIDS+=($!)

  glxgears -fullscreen > /dev/null 2>&1 &
  GEARS_PIDS+=($!)
}

# Function to run glxinfo tests more intensively
run_glxinfo_tests() {
  if command -v glxinfo > /dev/null; then
    log_timing "Running comprehensive glxinfo tests..."
    # Run multiple glxinfo commands to exercise different paths
    glxinfo -l > /dev/null 2>&1 || true
    glxinfo -s > /dev/null 2>&1 || true
    glxinfo -v > /dev/null 2>&1 || true

    # Query each extension/capability
    for query in renderer vendor version extensions limits; do
      glxinfo -q $query > /dev/null 2>&1 || true
    done

    # Test specific visuals with more coverage
    for visual in 0x21 0x22 0x23 0x24 0x25 0x26 0x27 0x28 0x29 0x2a 0x2b 0x2c 0x2d 0x2e 0x2f; do
      glxinfo -v -i $visual > /dev/null 2>&1 || true
    done
  fi
}

# Function to run X11 clients intensively
run_x11_clients() {
  for app in xeyes xclock xlogo xwininfo xdpyinfo xprop xrandr; do
    if command -v $app > /dev/null; then
      log_timing "Running $app..."
      for i in $(seq 1 $([ "$TEST_MODE" = "minimal" ] && echo 2 || echo 5)); do
        ( $app ) > /dev/null 2>&1 &
        APP_PID=$!
        sleep 2
        kill $APP_PID 2>/dev/null || true
        wait $APP_PID 2>/dev/null || true
      done
    fi
  done
}

# Function to run glmark2 with various options
run_glmark2_tests() {
  if command -v glmark2 > /dev/null; then
    # Run with different settings to exercise more code paths
    local benchmarks="jellyfish terrain refract conditionals function loop"
    if [ "$TEST_MODE" = "minimal" ]; then
      benchmarks="jellyfish terrain"
    fi

    for test in $benchmarks; do
      log_timing "Running glmark2 benchmark: $test"
      glmark2 --benchmark $test > /dev/null 2>&1 &
      GLMARK_PIDS+=($!)
      sleep 3
      kill $GLMARK_PIDS 2>/dev/null || true
      wait $GLMARK_PIDS 2>/dev/null || true
      GLMARK_PIDS=()
    done

    # Run with different window sizes
    if [ "$TEST_MODE" = "full" ]; then
      for size in 640x480 800x600 1024x768; do
        log_timing "Running glmark2 with size: $size"
        glmark2 --size $size --run-forever > /dev/null 2>&1 &
        GLMARK_PIDS+=($!)
        sleep 5
        kill $GLMARK_PIDS 2>/dev/null || true
        wait $GLMARK_PIDS 2>/dev/null || true
        GLMARK_PIDS=()
      done
    else
      # In minimal mode, just run one size
      glmark2 --size 800x600 --run-forever > /dev/null 2>&1 &
      GLMARK_PID=$!
      sleep 5
      kill $GLMARK_PID 2>/dev/null || true
    fi
  fi
}

# Run x11perf with more specific tests and repetitions
run_x11perf_tests() {
  if command -v x11perf > /dev/null; then
    log_timing "Running intensive x11perf tests..."

    # Run a wider variety of x11perf tests to increase code coverage
    TESTS=()
    if [ "$TEST_MODE" = "full" ]; then
      TESTS=(
        rect1 rect10 rect100 rect500
        fill1 fill10 fill100 fill500
        circle1 circle10 circle100
        line1 line10 line100 line500
        odseg10 odseg100
        oseg10 oseg100
        text char2b
        polytext polychar2b
        image10 image100 image500
        dot dot1
        polypnt polypnt10
        tris4 tris16
        oddtris4 oddtris16
        winbackgnd
        copyarea10 copyarea100 copyarea500
        putimage10 putimage100 putimage500
      )
    else
      # Minimal set of tests
      TESTS=(
        rect1 rect100
        fill1 fill100
        circle1 circle100
        line1 line100
        text
        image10 image100
        copyarea10 copyarea100
      )
    fi

    for test in "${TESTS[@]}"; do
      x11perf -repeat 5 -times 50 -$test > /dev/null 2>&1 || true
      log_timing "Completed x11perf -$test"
    done
  fi
}

# Run all tests to increase code coverage
GEARS_PIDS=()
GLMARK_PIDS=()

# Run tests in separate functions to better organize the profiling
run_glxgears_tests
run_glxinfo_tests
run_x11_clients
run_glmark2_tests

if [ "$TEST_MODE" = "full" ]; then
  run_x11perf_tests
fi

# Wait a moment between test sets
log_timing "Waiting for background processes..."
sleep 5

# Check if profile data is being generated (for PGO/BOLT)
if [ -d "$PROFILE_DIR" ]; then
  PROFILE_COUNT=$(find "$PROFILE_DIR" -type f | wc -l)
  log_timing "Profile count after all tests: $PROFILE_COUNT"
fi

# Clean up background processes
for pid in "${GEARS_PIDS[@]}"; do
  kill $pid 2>/dev/null || true
done

for pid in "${GLMARK_PIDS[@]}"; do
  kill $pid 2>/dev/null || true
done

pkill -f glxgears || true
pkill -f glmark2 || true
pkill -f glxheads || true

log_timing "Training workload completed successfully"
rm -rf "$XDG_RUNTIME_DIR"
EOF

  chmod +x "${srcdir}/training_workload.sh"

  ##################################################
  # STEP 1: Build with standard PGO instrumentation
  ##################################################
  echo "Building xorg-xwayland with standard PGO instrumentation..."

  export CC="clang"
  export CXX="clang++"
  export CFLAGS="${CFLAGS} -fprofile-generate=${srcdir}/pgo_profiles ${_common_instrument_flags}"
  export CXXFLAGS="${CXXFLAGS} -fprofile-generate=${srcdir}/pgo_profiles ${_common_instrument_flags}"
  export LDFLAGS="${LDFLAGS} -fprofile-generate=${srcdir}/pgo_profiles"

  # Configure with Meson
  arch-meson xserver build-pgo \
      -D b_ndebug=true \
      -D b_pie=false \
      -D c_std=gnu2x \
      -D cpp_std=gnu++2a \
      -D b_lto=true \
      --buildtype=debug \
      --wrap-mode=nofallback \
    -D ipv6=true \
    -D xvfb=false \
    -D xnest=false \
    -D xdmcp=false \
    -D xcsecurity=true \
    -D xorg=false \
    -D xephyr=false \
    -D xwayland=true \
    -D xwin=false \
    -D xquartz=false \
    -D dri3=true \
    -D glamor=true \
    -D xkb_dir=/usr/share/X11/xkb \
    -D xkb_output_dir=/var/lib/xkb

  # Build instrumented binary
  ninja -C build-pgo

  # Install to temporary location
  DESTDIR="${srcdir}/temp_install_pgo" ninja -C build-pgo install

  ##################################################
  # STEP 2: Run comprehensive workload for standard PGO
  ##################################################
  echo "Running comprehensive workload for standard PGO profiling..."

  # Set profile output location
  export LLVM_PROFILE_FILE="${srcdir}/pgo_profiles/xwayland-%m.profraw"

  # Run the comprehensive training workload
  if ! "${srcdir}/training_workload.sh" "Xwayland" "${srcdir}/temp_install_pgo/usr/bin/Xwayland" "${srcdir}/pgo_profiles" "full"; then
    echo "Error: Standard PGO profiling workload failed. Check the output above for details."
    exit 1
  fi

  # Check if profiles were generated
  echo "Checking for standard PGO profiles:"
  find "${srcdir}/pgo_profiles" -type f -name "*.profraw" | xargs ls -lh || echo "No profiles found"

  # Merge the profiles
  echo "Merging standard PGO profiles..."
  if ! llvm-profdata merge -output="${srcdir}/xwayland.profdata" "${srcdir}/pgo_profiles"/*.profraw; then
    echo "Error: Failed to merge PGO profiles."
    exit 1
  fi

  ##################################################
  # STEP 3: Build with context-sensitive PGO
  ##################################################
  echo "Building xorg-xwayland with context-sensitive PGO..."

  # Update compiler flags
  export CFLAGS="${CFLAGS/-fprofile-generate=*/} -fprofile-use=${srcdir}/xwayland.profdata -fcs-profile-generate=${srcdir}/cs_pgo_profiles ${_common_instrument_flags}"
  export CXXFLAGS="${CXXFLAGS/-fprofile-generate=*/} -fprofile-use=${srcdir}/xwayland.profdata -fcs-profile-generate=${srcdir}/cs_pgo_profiles ${_common_instrument_flags}"
  export LDFLAGS="${LDFLAGS/-fprofile-generate=*/} -fprofile-use=${srcdir}/xwayland.profdata -fcs-profile-generate=${srcdir}/cs_pgo_profiles ${_common_instrument_flags}"

  # Configure with Meson
  arch-meson xserver build-cs-pgo \
      -D b_ndebug=true \
      -D b_pie=false \
      -D c_std=gnu2x \
      -D cpp_std=gnu++2a \
      -D b_lto=true \
      --buildtype=debug \
      --wrap-mode=nofallback \
    -D ipv6=true \
    -D xvfb=false \
    -D xnest=false \
    -D xdmcp=false \
    -D xcsecurity=true \
    -D xorg=false \
    -D xephyr=false \
    -D xwayland=true \
    -D xwin=false \
    -D xquartz=false \
    -D dri3=true \
    -D glamor=true \
    -D xkb_dir=/usr/share/X11/xkb \
    -D xkb_output_dir=/var/lib/xkb

  # Build CS instrumented binary
  ninja -C build-cs-pgo

  # Update the temporary installation
  rm -rf "${srcdir}/temp_install_pgo"
  DESTDIR="${srcdir}/temp_install_cs_pgo" ninja -C build-cs-pgo install

  ##################################################
  # STEP 4: Run workload again for CS-PGO profiles
  ##################################################
  echo "Running comprehensive workload for context-sensitive PGO..."

  # Update profile output location
  export LLVM_PROFILE_FILE="${srcdir}/cs_pgo_profiles/xwayland-cs-%m.profraw"

  # Run the comprehensive training workload for CS-PGO
  if ! "${srcdir}/training_workload.sh" "Xwayland" "${srcdir}/temp_install_cs_pgo/usr/bin/Xwayland" "${srcdir}/cs_pgo_profiles" "full"; then
    echo "Error: Context-sensitive PGO profiling workload failed. Check the output above for details."
    exit 1
  fi

  # Check if CS profiles were generated
  echo "Checking for context-sensitive PGO profiles:"
  find "${srcdir}/cs_pgo_profiles" -type f -name "*.profraw" | xargs ls -lh || echo "No profiles found"

  # Merge the profiles - CRITICAL FIX: Don't merge with standard profile yet
  echo "Merging context-sensitive PGO profiles..."
  if ! llvm-profdata merge -output="${srcdir}/xwayland-cs.profdata" "${srcdir}/cs_pgo_profiles"/*.profraw; then
    echo "Error: Failed to merge CS-PGO profiles."
    exit 1
  fi

  # Now merge both profile types for the final build
  echo "Merging both profile types for final build..."
  if ! llvm-profdata merge -output="${srcdir}/xwayland-combined.profdata" "${srcdir}/xwayland.profdata" "${srcdir}/xwayland-cs.profdata"; then
    echo "Error: Failed to create combined profile."
    exit 1
  fi

  ##################################################
  # STEP 5: Final build with all profiles
  ##################################################
  echo "Building final optimized xorg-xwayland..."

  # Update compiler flags for final build
  export CFLAGS="${CFLAGS/-fcs-profile-generate=*/} -fprofile-use=${srcdir}/xwayland-combined.profdata"
  export CXXFLAGS="${CXXFLAGS/-fcs-profile-generate=*/} -fprofile-use=${srcdir}/xwayland-combined.profdata"
  export LDFLAGS="${LDFLAGS/-fcs-profile-generate=*/} -fprofile-use=${srcdir}/xwayland-combined.profdata -Wl,--emit-relocs"

  # Configure with Meson - USING 'build' DIRECTORY FOR CONSISTENCY
  arch-meson xserver build \
      -D b_ndebug=true \
      -D b_pie=false \
      -D c_std=gnu2x \
      -D cpp_std=gnu++2a \
      -D b_lto=true \
      --buildtype=release \
      --wrap-mode=nofallback \
    -D ipv6=true \
    -D xvfb=false \
    -D xnest=false \
    -D xdmcp=false \
    -D xcsecurity=true \
    -D xorg=false \
    -D xephyr=false \
    -D xwayland=true \
    -D xwin=false \
    -D xquartz=false \
    -D dri3=true \
    -D glamor=true \
    -D xkb_dir=/usr/share/X11/xkb \
    -D xkb_output_dir=/var/lib/xkb

  # Build final optimized binary
  ninja -C build

  ##################################################
  # STEP 6: BOLT instrumentation and optimization
  ##################################################
  echo "Preparing for BOLT instrumentation..."

  # Create a temporary installation for final binary
  rm -rf "${srcdir}/temp_install_cs_pgo"
  rm -rf "${srcdir}/temp_install"
  DESTDIR="${srcdir}/temp_install" ninja -C build install

  # Define binary path
  XWAYLAND_BIN="${srcdir}/temp_install/usr/bin/Xwayland"

  # Check if binary exists
  if [ ! -f "${XWAYLAND_BIN}" ]; then
    echo "Error: Xwayland binary not found for BOLT instrumentation!"
    exit 1
  fi

  # Make a backup of the original binary
  cp -f "${XWAYLAND_BIN}" "${srcdir}/Xwayland.orig"

  # Create BOLT instrumented binary with sampling frequency of 1
  echo "Creating BOLT instrumented binary..."
  if ! llvm-bolt "${XWAYLAND_BIN}" \
    --instrument \
    --lite=false \
    --instrumentation-file="${srcdir}/bolt_profile/boltprof.fdata" \
    -o "${srcdir}/bolt_instrumented/Xwayland"; then
    echo "Error: Failed to create BOLT instrumented binary."
    exit 1
  fi

  # Make instrumented binary executable
  chmod +x "${srcdir}/bolt_instrumented/Xwayland"

  # Update the temp_install with the instrumented binary
  cp -f "${srcdir}/bolt_instrumented/Xwayland" "${srcdir}/temp_install/usr/bin/Xwayland"

  ##################################################
  # STEP 7: Run comprehensive workload for BOLT profiles
  ##################################################
  echo "Running comprehensive workload for BOLT profiling..."

  # Run the comprehensive training workload for BOLT
  if ! "${srcdir}/training_workload.sh" "Xwayland" "${srcdir}/temp_install/usr/bin/Xwayland" "${srcdir}/bolt_profile" "full"; then
    echo "Error: BOLT instrumentation workload failed. Check the output above for details."
    exit 1
  fi

  # Check if BOLT profiles were generated
  echo "Checking for BOLT profiles:"
  find "${srcdir}/bolt_profile" -type f -name "*.fdata" | xargs ls -lh || echo "No BOLT profiles found"

  # Fix the BOLT profile merging command
  echo "Merging BOLT profiles..."
  PROFILE_FILE="${srcdir}/bolt_profile/merged.fdata"

  # First, check if we have any profiles
  if ! ls "${srcdir}/bolt_profile"/*.fdata > /dev/null 2>&1; then
    echo "Error: No BOLT profile data found."
    exit 1
  fi

  # Simple concatenation of profiles
  echo "Using direct concatenation for BOLT profiles..."
  cat "${srcdir}/bolt_profile"/*.fdata > "$PROFILE_FILE"

  if [ ! -s "$PROFILE_FILE" ]; then
    echo "Error: Failed to create merged BOLT profile."
    exit 1
  fi

  # CRITICAL: Use the ORIGINAL binary as input for optimization
  echo "Creating final BOLT-optimized binary..."
  if ! llvm-bolt "${srcdir}/Xwayland.orig" \
            --data="$PROFILE_FILE" \
            --lite=false \
            --reorder-functions=cdsort      \
            --reorder-functions-use-hot-size \
            --reorder-blocks=ext-tsp        \
            --split-functions --split-strategy=cdsplit \
            --hugify                        \
            --icf=all                      \
            --peepholes=all                 \
            --reg-reassign --use-aggr-reg-reassign \
            --align-functions=32 --align-blocks --block-alignment=16 \
            --indirect-call-promotion=all --indirect-call-promotion-topn=3 \
            --jump-tables=move              \
            --dyno-stats \
            --plt=all \
    -o "${srcdir}/bolt_opt/Xwayland" 2>&1 | tee "${srcdir}/bolt_opt/bolt.log"; then
    echo "Error: BOLT optimization failed."
    exit 1
  fi

  # Make optimized binary executable
  chmod +x "${srcdir}/bolt_opt/Xwayland"

  # Copy optimized binary back to build directory
  echo "Installing BOLT-optimized binary..."
  cp -f "${srcdir}/bolt_opt/Xwayland" "${srcdir}/build/hw/xwayland/Xwayland"

  # Display BOLT optimization stats
  echo "BOLT optimization stats:"
  grep "BOLT-INFO" "${srcdir}/bolt_opt/bolt.log" | grep -E "Performance Improvement|Functions with valid profile|modified layout of|FRAME ANALYSIS|profile quality metrics" || echo "No BOLT stats found in log"

  echo "Build with PGO and BOLT optimization completed successfully"

}

check() {
  # Skip standard meson tests since we've modified the build directories
  echo "Skipping standard meson tests due to custom build directories"

  # Check if our BOLT-optimized binary exists and is valid
  if [ -f "${srcdir}/bolt_opt/Xwayland" ]; then
    echo "Verifying BOLT-optimized binary..."
    if file "${srcdir}/bolt_opt/Xwayland" | grep -q "ELF 64-bit LSB executable"; then
      echo "BOLT-optimized binary looks valid"
    else
      echo "Warning: BOLT-optimized binary may have issues"
      file "${srcdir}/bolt_opt/Xwayland"
    fi

    # Check if BOLT optimization logs contain improvement metrics
    if [ -f "${srcdir}/bolt_opt/bolt.log" ]; then
      echo "BOLT optimization metrics:"
      grep -E "BOLT-INFO: (Performance Improvement|Functions with valid profile|Bytes of code added|Modified functions|Hot code size after|Dyno Stats)" "${srcdir}/bolt_opt/bolt.log" || echo "No performance metrics found in BOLT log"
    fi
  else
    echo "Warning: BOLT-optimized binary not found at ${srcdir}/bolt_opt/Xwayland"
  fi
}

package() {
  DESTDIR="${pkgdir}" ninja -C build install

  # xorg-server-common file /usr/lib/xorg/protocol.txt
  if [ -f "${pkgdir}/usr/lib/xorg/protocol.txt" ]; then
    rm "${pkgdir}/usr/lib/xorg/protocol.txt"
  fi

  if [ -d "${pkgdir}/usr/lib/xorg" ]; then
    rmdir --ignore-fail-on-non-empty "${pkgdir}/usr/lib/xorg"
  fi

  if [ -f "${pkgdir}/usr/share/man/man1/Xserver.1" ]; then
    rm "${pkgdir}/usr/share/man/man1/Xserver.1"
  fi

  # license
  install -m644 -Dt "${pkgdir}/usr/share/licenses/${pkgname}" "$srcdir"/xserver/COPYING

  # Simple stripping approach - minimal error checking
  echo "Stripping binaries and libraries..."

  # First try to strip the main binary
  if [ -f "${pkgdir}/usr/bin/Xwayland" ]; then
    llvm-strip "${pkgdir}/usr/bin/Xwayland" || true
  fi

  # Strip all other binaries and libraries without complex logic
  find "${pkgdir}" -type f -executable | while read -r file; do
    llvm-strip "$file" 2>/dev/null || true
  done

  # Strip libraries
  find "${pkgdir}" -name "*.so*" | while read -r lib; do
    llvm-strip --strip-debug "$lib" 2>/dev/null || true
  done
}
