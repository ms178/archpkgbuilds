pkgbase=wireplumber
pkgname=(
  wireplumber
  libwireplumber
)
pkgver=0.5.12
pkgrel=3.1
pkgdesc="Session / policy manager implementation for PipeWire"
url="https://pipewire.pages.freedesktop.org/wireplumber/"
arch=(x86_64)
license=(MIT)
makedepends=(
  doxygen
  git
  glib2
  gobject-introspection
  graphviz
  lua
  meson
  pipewire
  python-lxml
  systemd
)
checkdepends=(pipewire-audio)
source=("git+https://gitlab.freedesktop.org/pipewire/$pkgbase.git#tag=$pkgver")
b2sums=('SKIP')

prepare() {
  cd $pkgbase

  # Create directories for PGO profiles
  mkdir -p "$srcdir/pgo/standard" "$srcdir/pgo/context-sensitive"
}

build() {
  # Set compiler to clang for PGO
  export CC=clang
  export CXX=clang++

  local meson_options=(
    -D b_ndebug=true
    -D b_pie=false
    -D b_lto=true
    -D c_std=gnu2x
    -D cpp_std=gnu++2a
    --buildtype=release
    --wrap-mode=nofallback
    -D doc=disabled
    -D elogind=disabled
    -D system-lua=true
  )

  # PGO-specific instrumentation flags
  local pgo_instrument_flags="-g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=150 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"

  echo "Stage 1: Building with standard PGO instrumentation"
  arch-meson $pkgbase build-instrumented \
    "${meson_options[@]}" \
    -D b_lto=false \
    -D b_ndebug=false \
    -Dc_args="$CFLAGS -fprofile-generate=${srcdir}/pgo/standard ${pgo_instrument_flags}" \
    -Dcpp_args="$CXXFLAGS -fprofile-generate=${srcdir}/pgo/standard ${pgo_instrument_flags}" \
    -Dc_link_args="$LDFLAGS -fprofile-generate=${srcdir}/pgo/standard" \
    -Dcpp_link_args="$LDFLAGS -fprofile-generate=${srcdir}/pgo/standard"

  meson compile -C build-instrumented

  echo "Stage 2: Running tests to generate standard profiling data"
  export LLVM_PROFILE_FILE="${srcdir}/pgo/standard/%p.profraw"

  echo "Running unit tests for PGO profiling..."
  cd build-instrumented
  meson test --timeout-multiplier=5 || echo "Some tests failed, continuing with PGO"
  cd ..

  # Check if profile data files were generated
  if [ -z "$(ls ${srcdir}/pgo/standard/*.profraw 2>/dev/null)" ]; then
    echo "Warning: No profile data files (*.profraw) were generated in ${srcdir}/pgo/standard/"
    echo "Continuing with regular build..."

    # Fall back to regular build without PGO
    arch-meson $pkgbase build "${meson_options[@]}"
    meson compile -C build
    return
  fi

  echo "Merging standard PGO profile data"
  llvm-profdata merge -output="${srcdir}/pgo/standard.profdata" "${srcdir}/pgo/standard"/*.profraw

  echo "Stage 3: Building with context-sensitive PGO instrumentation"
  arch-meson $pkgbase build-cs-instrumented \
    "${meson_options[@]}" \
    -D b_lto=false \
    -D b_ndebug=false \
    -Dc_args="$CFLAGS -fprofile-use=${srcdir}/pgo/standard.profdata -fcs-profile-generate=${srcdir}/pgo/context-sensitive ${pgo_instrument_flags}" \
    -Dcpp_args="$CXXFLAGS -fprofile-use=${srcdir}/pgo/standard.profdata -fcs-profile-generate=${srcdir}/pgo/context-sensitive ${pgo_instrument_flags}" \
    -Dc_link_args="$LDFLAGS -fprofile-use=${srcdir}/pgo/standard.profdata -fcs-profile-generate=${srcdir}/pgo/context-sensitive" \
    -Dcpp_link_args="$LDFLAGS -fprofile-use=${srcdir}/pgo/standard.profdata -fcs-profile-generate=${srcdir}/pgo/context-sensitive"

  meson compile -C build-cs-instrumented

  echo "Stage 4: Running tests to generate context-sensitive profiling data"
  export LLVM_PROFILE_FILE="${srcdir}/pgo/context-sensitive/%p.profraw"

  echo "Running unit tests for context-sensitive PGO profiling..."
  cd build-cs-instrumented
  meson test --timeout-multiplier=5 || echo "Some tests failed, continuing with PGO"
  cd ..

  # Check if profile data files were generated
  if [ -z "$(ls ${srcdir}/pgo/context-sensitive/*.profraw 2>/dev/null)" ]; then
    echo "Warning: No context-sensitive profile data files were generated"
    echo "Falling back to standard PGO profile"

    echo "Stage 5: Final optimized build using standard profile data"
    arch-meson $pkgbase build \
      "${meson_options[@]}" \
      -Dc_args="$CFLAGS -fprofile-use=${srcdir}/pgo/standard.profdata" \
      -Dcpp_args="$CXXFLAGS -fprofile-use=${srcdir}/pgo/standard.profdata" \
      -Dc_link_args="$LDFLAGS -fprofile-use=${srcdir}/pgo/standard.profdata" \
      -Dcpp_link_args="$LDFLAGS -fprofile-use=${srcdir}/pgo/standard.profdata"
  else
    echo "Merging context-sensitive PGO profile data with standard profile"
    llvm-profdata merge -output="${srcdir}/pgo/cs.profdata" "${srcdir}/pgo/context-sensitive"/*.profraw "${srcdir}/pgo/standard.profdata"

    echo "Stage 5: Final optimized build using merged profile data"
    arch-meson $pkgbase build \
      "${meson_options[@]}" \
      -Dc_args="$CFLAGS -fprofile-use=${srcdir}/pgo/cs.profdata" \
      -Dcpp_args="$CXXFLAGS -fprofile-use=${srcdir}/pgo/cs.profdata" \
      -Dc_link_args="$LDFLAGS -fprofile-use=${srcdir}/pgo/cs.profdata" \
      -Dcpp_link_args="$LDFLAGS -fprofile-use=${srcdir}/pgo/cs.profdata"
  fi

  meson compile -C build
}

check() {
  # Run tests on the final optimized build
  meson test -C build --print-errorlogs
}

_pick() {
  local p="$1" f d; shift
  for f; do
    d="$srcdir/$p/${f#$pkgdir/}"
    mkdir -p "$(dirname "$d")"
    mv "$f" "$d"
    rmdir -p --ignore-fail-on-non-empty "$(dirname "$f")"
  done
}

_ver=${pkgver:0:3}

package_wireplumber() {
  depends=(
    "libwireplumber=$pkgver-$pkgrel"
    libsystemd.so
    lua
    pipewire
  )
  provides=(pipewire-session-manager)
  conflicts=(pipewire-media-session)
  install=wireplumber.install

  meson install -C build --destdir "$pkgdir"

  (
    cd "$pkgdir"

    _pick libw usr/lib/libwireplumber-$_ver.so*
    _pick libw usr/lib/girepository-1.0
    _pick libw usr/lib/pkgconfig
    _pick libw usr/include
    _pick libw usr/share/gir-1.0
  )

  install -Dt "$pkgdir/usr/share/doc/$pkgname" -m644 $pkgbase/{NEWS,README}*
  install -Dt "$pkgdir/usr/share/licenses/$pkgname" -m644 $pkgbase/LICENSE
}

package_libwireplumber() {
  pkgdesc+=" - client library"
  depends=(
    libg{lib,module,object,io}-2.0.so
    libpipewire-0.3.so
  )
  provides=(libwireplumber-$_ver.so)

  mv libw/* "$pkgdir"

  install -Dt "$pkgdir/usr/share/licenses/$pkgname" -m644 $pkgbase/LICENSE
}

# vim:set sw=2 sts=-1 et:
