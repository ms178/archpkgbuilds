pkgname=libngtcp2
pkgver=1.17.0
pkgrel=2.1
pkgdesc='Implementation of IETF QUIC protocol'
url='https://github.com/ngtcp2/ngtcp2'
arch=('x86_64')
license=('MIT')
depends=(
  'glibc'
  'gnutls'
)
makedepends=(
  'brotli'
  'git'
  'llvm'
  'clang'
  'openssl'
  'libnghttp3'
)
provides=(
  'libngtcp2.so'
  'libngtcp2_crypto_gnutls.so'
)
source=("git+https://github.com/ngtcp2/ngtcp2.git#tag=v${pkgver}")
sha256sums=('SKIP')

prepare() {
  cd ngtcp2

  # Initialize submodules for examples and third-party deps
  git submodule update --init --recursive

  autoreconf -i
}

build() {
  cd ngtcp2

  # Store original flags
  local orig_cflags="$CFLAGS"
  local orig_cxxflags="$CXXFLAGS"
  local orig_ldflags="$LDFLAGS"

  # PGO directories
  local pgo_dir="$srcdir/pgo-data"
  mkdir -p "$pgo_dir"

  # Use clang
  export CC=clang
  export CXX=clang++

  ######################################################################
  # STAGE 1: Standard PGO Instrumentation
  ######################################################################
  msg2 "════════════════════════════════════════════════════════════"
  msg2 "STAGE 1/3: Standard PGO Instrumentation"
  msg2 "════════════════════════════════════════════════════════════"

  # Configure with instrumentation
  export CFLAGS="$orig_cflags -fprofile-generate"
  export CXXFLAGS="$orig_cxxflags -fprofile-generate"
  export LDFLAGS="$orig_ldflags -fprofile-generate"
  export LLVM_PROFILE_FILE="$pgo_dir/stage1-%p-%m.profraw"

  ./configure \
    --prefix=/usr \
    --with-libbrotlienc \
    --with-libbrotlidec \
    --with-gnutls \
    --with-openssl

  make -j"$(nproc)"

  # Run comprehensive training workload
  msg2 "Running Stage 1 training workload..."

  # Build-in tests
  msg2 "→ Running library tests..."
  make -j1 check 2>&1 | head -100 || true

  # If examples were built, use them
  if [[ -x examples/client ]] && [[ -x examples/server ]]; then
    msg2 "→ Running QUIC protocol tests..."

    # Generate test certificate
    local cert_dir="$srcdir/certs"
    mkdir -p "$cert_dir"
    openssl req -new -x509 -days 365 -nodes \
      -out "$cert_dir/server.crt" \
      -keyout "$cert_dir/server.key" \
      -subj "/CN=localhost" 2>/dev/null

    # Comprehensive QUIC workload
    local test_dir="$srcdir/test-stage1"
    mkdir -p "$test_dir"
    cd "$test_dir"

    # Create test data
    for size in 1 10 100 1000; do
      dd if=/dev/urandom of="test_${size}k.bin" bs=1024 count=$size 2>/dev/null
    done

    # Test scenarios
    for test in {1..10}; do
      msg2 "  Test $test/10: Connection and transfer..."

      # Start server in background
      timeout 10 "$srcdir/ngtcp2/examples/server" \
        127.0.0.1 4433 \
        "$cert_dir/server.key" \
        "$cert_dir/server.crt" \
        --document-root="$test_dir" >/dev/null 2>&1 &
      local server_pid=$!
      sleep 1

      # Run client tests
      for i in {1..3}; do
        timeout 3 "$srcdir/ngtcp2/examples/client" \
          127.0.0.1 4433 \
          https://127.0.0.1:4433/ \
          >/dev/null 2>&1 || true
      done

      # Cleanup
      kill $server_pid 2>/dev/null || true
      wait $server_pid 2>/dev/null || true
      sleep 0.5
    done

    cd "$srcdir/ngtcp2"
  else
    msg2 "→ Examples not available, running extended tests..."
    make -j1 check || true
  fi

  # Verify and merge profiles
  msg2 "Collecting Stage 1 profiles..."
  local prof_count=$(find "$pgo_dir" -name "stage1-*.profraw" 2>/dev/null | wc -l)
  msg2 "  Found $prof_count profile files"

  if [[ $prof_count -eq 0 ]]; then
    error "No Stage 1 profiles generated!"
    return 1
  fi

  llvm-profdata merge \
    -output="$pgo_dir/stage1.profdata" \
    "$pgo_dir"/stage1-*.profraw || {
    error "Failed to merge Stage 1 profiles"
    return 1
  }

  msg2 "✓ Stage 1 complete: $(stat -c%s "$pgo_dir/stage1.profdata" 2>/dev/null || echo '0') bytes"

  ######################################################################
  # STAGE 2: Context-Sensitive PGO
  ######################################################################
  msg2 "════════════════════════════════════════════════════════════"
  msg2 "STAGE 2/3: CS-PGO Instrumentation"
  msg2 "════════════════════════════════════════════════════════════"

  # Clean previous build
  msg2 "Cleaning previous build..."
  make clean || true

  # Reconfigure with CS-PGO
  export CFLAGS="$orig_cflags -fprofile-use=$pgo_dir/stage1.profdata -fcs-profile-generate"
  export CXXFLAGS="$orig_cxxflags -fprofile-use=$pgo_dir/stage1.profdata -fcs-profile-generate"
  export LDFLAGS="$orig_ldflags -fprofile-use=$pgo_dir/stage1.profdata -fcs-profile-generate"
  export LLVM_PROFILE_FILE="$pgo_dir/stage2-%p-%m.profraw"

  ./configure \
    --prefix=/usr \
    --with-libbrotlienc \
    --with-libbrotlidec \
    --with-gnutls \
    --with-openssl

  make -j"$(nproc)"

  # Run abbreviated training for CS-PGO
  msg2 "Running Stage 2 training workload..."
  make -j1 check 2>&1 | head -50 || true

  if [[ -x examples/client ]] && [[ -x examples/server ]]; then
    msg2 "→ CS-PGO protocol tests..."
    cd "$srcdir/test-stage1"  # Reuse test dir

    for test in {1..5}; do
      timeout 10 "$srcdir/ngtcp2/examples/server" \
        127.0.0.1 4433 \
        "$cert_dir/server.key" \
        "$cert_dir/server.crt" \
        --document-root="$test_dir" >/dev/null 2>&1 &
      local server_pid=$!
      sleep 1

      timeout 3 "$srcdir/ngtcp2/examples/client" \
        127.0.0.1 4433 \
        https://127.0.0.1:4433/ >/dev/null 2>&1 || true

      kill $server_pid 2>/dev/null || true
      wait $server_pid 2>/dev/null || true
      sleep 0.5
    done

    cd "$srcdir/ngtcp2"
  fi

  # Merge CS profiles
  msg2 "Collecting Stage 2 profiles..."
  local cs_count=$(find "$pgo_dir" -name "stage2-*.profraw" 2>/dev/null | wc -l)
  msg2 "  Found $cs_count CS profile files"

  if [[ $cs_count -gt 0 ]]; then
    llvm-profdata merge \
      -output="$pgo_dir/stage2.profdata" \
      "$pgo_dir"/stage2-*.profraw || {
      msg2 "⚠ Failed to merge Stage 2 profiles, using Stage 1 only"
      cp "$pgo_dir/stage1.profdata" "$pgo_dir/merged.profdata"
    }

    if [[ -f "$pgo_dir/stage2.profdata" ]]; then
      llvm-profdata merge \
        -output="$pgo_dir/merged.profdata" \
        "$pgo_dir/stage1.profdata" \
        "$pgo_dir/stage2.profdata" || {
        msg2 "⚠ Failed to merge combined profiles, using Stage 1 only"
        cp "$pgo_dir/stage1.profdata" "$pgo_dir/merged.profdata"
      }
      msg2 "✓ Merged: $(stat -c%s "$pgo_dir/merged.profdata" 2>/dev/null || echo '0') bytes"
    fi
  else
    msg2 "⚠ No CS profiles, using Stage 1 only"
    cp "$pgo_dir/stage1.profdata" "$pgo_dir/merged.profdata"
  fi

  ######################################################################
  # STAGE 3: Final Optimized Build
  ######################################################################
  msg2 "════════════════════════════════════════════════════════════"
  msg2 "STAGE 3/3: Final Optimized Build"
  msg2 "════════════════════════════════════════════════════════════"

  # Clean
  make clean || true

  # Final build with merged profiles
  unset LLVM_PROFILE_FILE

  export CFLAGS="$orig_cflags -fprofile-use=$pgo_dir/merged.profdata"
  export CXXFLAGS="$orig_cxxflags -fprofile-use=$pgo_dir/merged.profdata"
  export LDFLAGS="$orig_ldflags -fprofile-use=$pgo_dir/merged.profdata"

  ./configure \
    --prefix=/usr \
    --with-libbrotlienc \
    --with-libbrotlidec \
    --with-gnutls \
    --enable-lib-only

  make -j"$(nproc)"

  msg2 "✓ PGO optimization complete"
  msg2 "════════════════════════════════════════════════════════════"
}

package() {
  cd ngtcp2
  make DESTDIR="${pkgdir}" install
  install -Dm644 COPYING -t "${pkgdir}/usr/share/licenses/${pkgname}"
}

# vim:set sw=2 sts=-1 et:
