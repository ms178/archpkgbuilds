--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_object.h	2025-05-29 11:14:09.000000000 +0200
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_object.h	2025-06-02 02:29:50.388339649 +0200
@@ -1,30 +1,3 @@
-/*
- * Copyright 2008 Advanced Micro Devices, Inc.
- * Copyright 2008 Red Hat Inc.
- * Copyright 2009 Jerome Glisse.
- *
- * Permission is hereby granted, free of charge, to any person obtaining a
- * copy of this software and associated documentation files (the "Software"),
- * to deal in the Software without restriction, including without limitation
- * the rights to use, copy, modify, merge, publish, distribute, sublicense,
- * and/or sell copies of the Software, and to permit persons to whom the
- * Software is furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in
- * all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
- * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
- * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
- * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
- * OTHER DEALINGS IN THE SOFTWARE.
- *
- * Authors: Dave Airlie
- *          Alex Deucher
- *          Jerome Glisse
- */
 #ifndef __AMDGPU_OBJECT_H__
 #define __AMDGPU_OBJECT_H__
 
@@ -39,7 +12,6 @@
 #define AMDGPU_BO_INVALID_OFFSET	LONG_MAX
 #define AMDGPU_BO_MAX_PLACEMENTS	3
 
-/* BO flag to indicate a KFD userptr BO */
 #define AMDGPU_AMDKFD_CREATE_USERPTR_BO	(1ULL << 63)
 
 #define to_amdgpu_bo_user(abo) container_of((abo), struct amdgpu_bo_user, bo)
@@ -56,11 +28,9 @@ struct amdgpu_bo_param {
 	bool				no_wait_gpu;
 	struct dma_resv			*resv;
 	void				(*destroy)(struct ttm_buffer_object *bo);
-	/* xcp partition number plus 1, 0 means any partition */
 	int8_t				xcp_id_plus1;
 };
 
-/* bo virtual addresses in a vm */
 struct amdgpu_bo_va_mapping {
 	struct amdgpu_bo_va		*bo_va;
 	struct list_head		list;
@@ -72,57 +42,40 @@ struct amdgpu_bo_va_mapping {
 	uint64_t			flags;
 };
 
-/* User space allocated BO in a VM */
 struct amdgpu_bo_va {
 	struct amdgpu_vm_bo_base	base;
-
-	/* protected by bo being reserved */
 	unsigned			ref_count;
-
-	/* all other members protected by the VM PD being reserved */
 	struct dma_fence	        *last_pt_update;
-
-	/* mappings for this bo_va */
 	struct list_head		invalids;
 	struct list_head		valids;
-
-	/* If the mappings are cleared or filled */
 	bool				cleared;
-
 	bool				is_xgmi;
-
-	/*
-	 * protected by vm reservation lock
-	 * if non-zero, cannot unmap from GPU because user queues may still access it
-	 */
 	unsigned int			queue_refcount;
 };
 
+enum amdgpu_bo_alloc_type {
+	AMDGPU_BO_ALLOC_DEFAULT = 0,
+	AMDGPU_BO_ALLOC_USER_SLAB,
+};
+
 struct amdgpu_bo {
-	/* Protected by tbo.reserved */
 	u32				preferred_domains;
 	u32				allowed_domains;
 	struct ttm_place		placements[AMDGPU_BO_MAX_PLACEMENTS];
 	struct ttm_placement		placement;
 	struct ttm_buffer_object	tbo;
-	struct ttm_bo_kmap_obj		kmap;
+	struct ttm_bo_kmap_obj		kmap; // Note: TTM uses ttm_kmap_obj, ensure this is intended
 	u64				flags;
-	/* per VM structure for page tables and with virtual addresses */
-	struct amdgpu_vm_bo_base	*vm_bo;
-	/* Constant after initialization */
+	enum amdgpu_bo_alloc_type	alloc_type; // Assuming this enum exists
+	spinlock_t			vm_lock;
+	struct amdgpu_vm_bo_base	*vm_bo;    /* per vm mapping for this bo */
 	struct amdgpu_bo		*parent;
-
-#ifdef CONFIG_MMU_NOTIFIER
+	#ifdef CONFIG_MMU_NOTIFIER
 	struct mmu_interval_notifier	notifier;
-#endif
+	#endif
 	struct kgd_mem                  *kfd_bo;
-
-	/*
-	 * For GPUs with spatial partitioning, xcp partition number, -1 means
-	 * any partition. For other ASICs without spatial partition, always 0
-	 * for memory accounting.
-	 */
 	int8_t				xcp_id;
+	u8				in_tbo_cache; // Assuming this is for your tbo_cache
 };
 
 struct amdgpu_bo_user {
@@ -131,12 +84,12 @@ struct amdgpu_bo_user {
 	u64				metadata_flags;
 	void				*metadata;
 	u32				metadata_size;
-
 };
 
 struct amdgpu_bo_vm {
 	struct amdgpu_bo		bo;
-	struct amdgpu_vm_bo_base        entries[];
+	struct list_head		shadow_list;
+	struct amdgpu_vm_bo_base	entries[];
 };
 
 static inline struct amdgpu_bo *ttm_to_amdgpu_bo(struct ttm_buffer_object *tbo)
@@ -144,44 +97,29 @@ static inline struct amdgpu_bo *ttm_to_a
 	return container_of(tbo, struct amdgpu_bo, tbo);
 }
 
-/**
- * amdgpu_mem_type_to_domain - return domain corresponding to mem_type
- * @mem_type:	ttm memory type
- *
- * Returns corresponding domain of the ttm mem_type
- */
 static inline unsigned amdgpu_mem_type_to_domain(u32 mem_type)
 {
 	switch (mem_type) {
-	case TTM_PL_VRAM:
-		return AMDGPU_GEM_DOMAIN_VRAM;
-	case TTM_PL_TT:
-		return AMDGPU_GEM_DOMAIN_GTT;
-	case TTM_PL_SYSTEM:
-		return AMDGPU_GEM_DOMAIN_CPU;
-	case AMDGPU_PL_GDS:
-		return AMDGPU_GEM_DOMAIN_GDS;
-	case AMDGPU_PL_GWS:
-		return AMDGPU_GEM_DOMAIN_GWS;
-	case AMDGPU_PL_OA:
-		return AMDGPU_GEM_DOMAIN_OA;
-	case AMDGPU_PL_DOORBELL:
-		return AMDGPU_GEM_DOMAIN_DOORBELL;
-	default:
-		break;
+		case TTM_PL_VRAM:
+			return AMDGPU_GEM_DOMAIN_VRAM;
+		case TTM_PL_TT:
+			return AMDGPU_GEM_DOMAIN_GTT;
+		case TTM_PL_SYSTEM:
+			return AMDGPU_GEM_DOMAIN_CPU;
+		case AMDGPU_PL_GDS:
+			return AMDGPU_GEM_DOMAIN_GDS;
+		case AMDGPU_PL_GWS:
+			return AMDGPU_GEM_DOMAIN_GWS;
+		case AMDGPU_PL_OA:
+			return AMDGPU_GEM_DOMAIN_OA;
+		case AMDGPU_PL_DOORBELL:
+			return AMDGPU_GEM_DOMAIN_DOORBELL;
+		default:
+			break;
 	}
 	return 0;
 }
 
-/**
- * amdgpu_bo_reserve - reserve bo
- * @bo:		bo structure
- * @no_intr:	don't return -ERESTARTSYS on pending signal
- *
- * Returns:
- * -ERESTARTSYS: A wait for the buffer to become unreserved was interrupted by
- * a signal. Release all buffer reservations and return to user-space.
- */
 static inline int amdgpu_bo_reserve(struct amdgpu_bo *bo, bool no_intr)
 {
 	struct amdgpu_device *adev = amdgpu_ttm_adev(bo->tbo.bdev);
@@ -216,31 +154,16 @@ static inline unsigned amdgpu_bo_gpu_pag
 	return (bo->tbo.page_alignment << PAGE_SHIFT) / AMDGPU_GPU_PAGE_SIZE;
 }
 
-/**
- * amdgpu_bo_mmap_offset - return mmap offset of bo
- * @bo:	amdgpu object for which we query the offset
- *
- * Returns mmap offset of the object.
- */
 static inline u64 amdgpu_bo_mmap_offset(struct amdgpu_bo *bo)
 {
 	return drm_vma_node_offset_addr(&bo->tbo.base.vma_node);
 }
 
-/**
- * amdgpu_bo_explicit_sync - return whether the bo is explicitly synced
- */
 static inline bool amdgpu_bo_explicit_sync(struct amdgpu_bo *bo)
 {
 	return bo->flags & AMDGPU_GEM_CREATE_EXPLICIT_SYNC;
 }
 
-/**
- * amdgpu_bo_encrypted - test if the BO is encrypted
- * @bo: pointer to a buffer object
- *
- * Return true if the buffer object is encrypted, false otherwise.
- */
 static inline bool amdgpu_bo_encrypted(struct amdgpu_bo *bo)
 {
 	return bo->flags & AMDGPU_GEM_CREATE_ENCRYPTED;
@@ -250,31 +173,31 @@ bool amdgpu_bo_is_amdgpu_bo(struct ttm_b
 void amdgpu_bo_placement_from_domain(struct amdgpu_bo *abo, u32 domain);
 
 int amdgpu_bo_create(struct amdgpu_device *adev,
-		     struct amdgpu_bo_param *bp,
-		     struct amdgpu_bo **bo_ptr);
+					 struct amdgpu_bo_param *bp,
+					 struct amdgpu_bo **bo_ptr);
 int amdgpu_bo_create_reserved(struct amdgpu_device *adev,
-			      unsigned long size, int align,
-			      u32 domain, struct amdgpu_bo **bo_ptr,
-			      u64 *gpu_addr, void **cpu_addr);
+							  unsigned long size, int align,
+							  u32 domain, struct amdgpu_bo **bo_ptr,
+							  u64 *gpu_addr, void **cpu_addr);
 int amdgpu_bo_create_kernel(struct amdgpu_device *adev,
-			    unsigned long size, int align,
-			    u32 domain, struct amdgpu_bo **bo_ptr,
-			    u64 *gpu_addr, void **cpu_addr);
+							unsigned long size, int align,
+							u32 domain, struct amdgpu_bo **bo_ptr,
+							u64 *gpu_addr, void **cpu_addr);
 int amdgpu_bo_create_isp_user(struct amdgpu_device *adev,
-			   struct dma_buf *dbuf, u32 domain,
-			   struct amdgpu_bo **bo,
-			   u64 *gpu_addr);
+							  struct dma_buf *dbuf, u32 domain,
+							  struct amdgpu_bo **bo,
+							  u64 *gpu_addr);
 int amdgpu_bo_create_kernel_at(struct amdgpu_device *adev,
-			       uint64_t offset, uint64_t size,
-			       struct amdgpu_bo **bo_ptr, void **cpu_addr);
+							   uint64_t offset, uint64_t size,
+							   struct amdgpu_bo **bo_ptr, void **cpu_addr);
 int amdgpu_bo_create_user(struct amdgpu_device *adev,
-			  struct amdgpu_bo_param *bp,
-			  struct amdgpu_bo_user **ubo_ptr);
+						  struct amdgpu_bo_param *bp,
+						  struct amdgpu_bo_user **ubo_ptr);
 int amdgpu_bo_create_vm(struct amdgpu_device *adev,
-			struct amdgpu_bo_param *bp,
-			struct amdgpu_bo_vm **ubo_ptr);
+						struct amdgpu_bo_param *bp,
+						struct amdgpu_bo_vm **vmbo_ptr);
 void amdgpu_bo_free_kernel(struct amdgpu_bo **bo, u64 *gpu_addr,
-			   void **cpu_addr);
+						   void **cpu_addr);
 void amdgpu_bo_free_isp_user(struct amdgpu_bo *bo);
 int amdgpu_bo_kmap(struct amdgpu_bo *bo, void **ptr);
 void *amdgpu_bo_kptr(struct amdgpu_bo *bo);
@@ -287,31 +210,32 @@ int amdgpu_bo_init(struct amdgpu_device
 void amdgpu_bo_fini(struct amdgpu_device *adev);
 int amdgpu_bo_set_tiling_flags(struct amdgpu_bo *bo, u64 tiling_flags);
 void amdgpu_bo_get_tiling_flags(struct amdgpu_bo *bo, u64 *tiling_flags);
-int amdgpu_bo_set_metadata (struct amdgpu_bo *bo, void *metadata,
-			    uint32_t metadata_size, uint64_t flags);
+int amdgpu_bo_set_metadata(struct amdgpu_bo *bo, void *metadata,
+						   uint32_t metadata_size, uint64_t flags);
 int amdgpu_bo_get_metadata(struct amdgpu_bo *bo, void *buffer,
-			   size_t buffer_size, uint32_t *metadata_size,
-			   uint64_t *flags);
+						   size_t buffer_size, uint32_t *metadata_size,
+						   uint64_t *flags);
 void amdgpu_bo_move_notify(struct ttm_buffer_object *bo,
-			   bool evict,
-			   struct ttm_resource *new_mem);
+						   bool evict,
+						   struct ttm_resource *new_mem);
 void amdgpu_bo_release_notify(struct ttm_buffer_object *bo);
 vm_fault_t amdgpu_bo_fault_reserve_notify(struct ttm_buffer_object *bo);
+
+void amdgpu_bo_destroy(struct ttm_buffer_object *tbo);
+void amdgpu_bo_user_destroy(struct ttm_buffer_object *tbo);
+
 void amdgpu_bo_fence(struct amdgpu_bo *bo, struct dma_fence *fence,
-		     bool shared);
+					 bool shared);
 int amdgpu_bo_sync_wait_resv(struct amdgpu_device *adev, struct dma_resv *resv,
-			     enum amdgpu_sync_mode sync_mode, void *owner,
-			     bool intr);
+							 enum amdgpu_sync_mode sync_mode, void *owner,
+							 bool intr);
 int amdgpu_bo_sync_wait(struct amdgpu_bo *bo, void *owner, bool intr);
 u64 amdgpu_bo_gpu_offset(struct amdgpu_bo *bo);
 u64 amdgpu_bo_gpu_offset_no_check(struct amdgpu_bo *bo);
 uint32_t amdgpu_bo_mem_stats_placement(struct amdgpu_bo *bo);
 uint32_t amdgpu_bo_get_preferred_domain(struct amdgpu_device *adev,
-					    uint32_t domain);
+										uint32_t domain);
 
-/*
- * sub allocation
- */
 static inline struct amdgpu_sa_manager *
 to_amdgpu_sa_manager(struct drm_suballoc_manager *manager)
 {
@@ -321,35 +245,34 @@ to_amdgpu_sa_manager(struct drm_suballoc
 static inline uint64_t amdgpu_sa_bo_gpu_addr(struct drm_suballoc *sa_bo)
 {
 	return to_amdgpu_sa_manager(sa_bo->manager)->gpu_addr +
-		drm_suballoc_soffset(sa_bo);
+	drm_suballoc_soffset(sa_bo);
 }
 
 static inline void *amdgpu_sa_bo_cpu_addr(struct drm_suballoc *sa_bo)
 {
 	return to_amdgpu_sa_manager(sa_bo->manager)->cpu_ptr +
-		drm_suballoc_soffset(sa_bo);
+	drm_suballoc_soffset(sa_bo);
 }
 
 int amdgpu_sa_bo_manager_init(struct amdgpu_device *adev,
-				     struct amdgpu_sa_manager *sa_manager,
-				     unsigned size, u32 align, u32 domain);
+							  struct amdgpu_sa_manager *sa_manager,
+							  unsigned size, u32 align, u32 domain);
 void amdgpu_sa_bo_manager_fini(struct amdgpu_device *adev,
-				      struct amdgpu_sa_manager *sa_manager);
+							   struct amdgpu_sa_manager *sa_manager);
 int amdgpu_sa_bo_manager_start(struct amdgpu_device *adev,
-				      struct amdgpu_sa_manager *sa_manager);
+							   struct amdgpu_sa_manager *sa_manager);
 int amdgpu_sa_bo_new(struct amdgpu_sa_manager *sa_manager,
-		     struct drm_suballoc **sa_bo,
-		     unsigned int size);
+					 struct drm_suballoc **sa_bo,
+					 unsigned int size);
 void amdgpu_sa_bo_free(struct drm_suballoc **sa_bo,
-		       struct dma_fence *fence);
+					   struct dma_fence *fence);
 #if defined(CONFIG_DEBUG_FS)
 void amdgpu_sa_bo_dump_debug_info(struct amdgpu_sa_manager *sa_manager,
-					 struct seq_file *m);
+								  struct seq_file *m);
 u64 amdgpu_bo_print_info(int id, struct amdgpu_bo *bo, struct seq_file *m);
 #endif
 void amdgpu_debugfs_sa_init(struct amdgpu_device *adev);
 
 bool amdgpu_bo_support_uswc(u64 bo_flags);
 
-
 #endif


--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_object.c	2025-05-29 11:14:09.000000000 +0200
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_object.c	2025-06-02 02:29:50.388339649 +0200
@@ -43,33 +43,29 @@
 #include "amdgpu_vm.h"
 #include "amdgpu_dma_buf.h"
 
-/**
- * DOC: amdgpu_object
- *
- * This defines the interfaces to operate on an &amdgpu_bo buffer object which
- * represents memory used by driver (VRAM, system memory, etc.). The driver
- * provides DRM/GEM APIs to userspace. DRM/GEM APIs then use these interfaces
- * to create/destroy/set buffer object which are then managed by the kernel TTM
- * memory manager.
- * The interfaces are also used internally by kernel clients, including gfx,
- * uvd, etc. for kernel managed allocations used by the GPU.
- *
- */
+#if IS_ENABLED(CONFIG_HSA_AMD)
+extern void
+amdgpu_amdkfd_remove_fence_on_pt_pd_bos(struct amdgpu_bo *bo)
+__attribute__((weak));
+#else
+static inline void
+amdgpu_amdkfd_remove_fence_on_pt_pd_bos(struct amdgpu_bo *bo) { }
+#endif
 
-static void amdgpu_bo_destroy(struct ttm_buffer_object *tbo)
+void amdgpu_bo_destroy(struct ttm_buffer_object *tbo)
 {
 	struct amdgpu_bo *bo = ttm_to_amdgpu_bo(tbo);
 
 	amdgpu_bo_kunmap(bo);
 
-	if (bo->tbo.base.import_attach)
+	if (unlikely(bo->tbo.base.import_attach))
 		drm_prime_gem_destroy(&bo->tbo.base, bo->tbo.sg);
 	drm_gem_object_release(&bo->tbo.base);
 	amdgpu_bo_unref(&bo->parent);
 	kvfree(bo);
 }
 
-static void amdgpu_bo_user_destroy(struct ttm_buffer_object *tbo)
+void amdgpu_bo_user_destroy(struct ttm_buffer_object *tbo)
 {
 	struct amdgpu_bo *bo = ttm_to_amdgpu_bo(tbo);
 	struct amdgpu_bo_user *ubo;
@@ -79,33 +75,15 @@ static void amdgpu_bo_user_destroy(struc
 	amdgpu_bo_destroy(tbo);
 }
 
-/**
- * amdgpu_bo_is_amdgpu_bo - check if the buffer object is an &amdgpu_bo
- * @bo: buffer object to be checked
- *
- * Uses destroy function associated with the object to determine if this is
- * an &amdgpu_bo.
- *
- * Returns:
- * true if the object belongs to &amdgpu_bo, false if not.
- */
 bool amdgpu_bo_is_amdgpu_bo(struct ttm_buffer_object *bo)
 {
-	if (bo->destroy == &amdgpu_bo_destroy ||
-	    bo->destroy == &amdgpu_bo_user_destroy)
+	if (likely(bo->destroy == &amdgpu_bo_destroy ||
+		bo->destroy == &amdgpu_bo_user_destroy))
 		return true;
 
 	return false;
 }
 
-/**
- * amdgpu_bo_placement_from_domain - set buffer's placement
- * @abo: &amdgpu_bo buffer object whose placement is to be set
- * @domain: requested domain
- *
- * Sets buffer's placement according to requested domain and the buffer's
- * flags.
- */
 void amdgpu_bo_placement_from_domain(struct amdgpu_bo *abo, u32 domain)
 {
 	struct amdgpu_device *adev = amdgpu_ttm_adev(abo->tbo.bdev);
@@ -114,128 +92,144 @@ void amdgpu_bo_placement_from_domain(str
 	u64 flags = abo->flags;
 	u32 c = 0;
 
-	if (domain & AMDGPU_GEM_DOMAIN_VRAM) {
+	static_assert(AMDGPU_GEM_DOMAIN_CPU == 0x1, "AMDGPU_GEM_DOMAIN_CPU ABI definition changed!");
+	static_assert(AMDGPU_GEM_DOMAIN_GTT == 0x2, "AMDGPU_GEM_DOMAIN_GTT ABI definition changed!");
+	static_assert(AMDGPU_GEM_DOMAIN_VRAM == 0x4, "AMDGPU_GEM_DOMAIN_VRAM ABI definition changed!");
+
+	BUILD_BUG_ON(AMDGPU_BO_MAX_PLACEMENTS < 2);
+
+	if (domain == AMDGPU_GEM_DOMAIN_VRAM) {
 		unsigned int visible_pfn = adev->gmc.visible_vram_size >> PAGE_SHIFT;
 		int8_t mem_id = KFD_XCP_MEM_ID(adev, abo->xcp_id);
 
-		if (adev->gmc.mem_partitions && mem_id >= 0) {
+		if (likely(adev->gmc.mem_partitions &&
+			mem_id >= 0 && mem_id < min_t(int, adev->gmc.num_mem_partitions, 8))) {
 			places[c].fpfn = adev->gmc.mem_partitions[mem_id].range.fpfn;
-			/*
-			 * memory partition range lpfn is inclusive start + size - 1
-			 * TTM place lpfn is exclusive start + size
-			 */
-			places[c].lpfn = adev->gmc.mem_partitions[mem_id].range.lpfn + 1;
-		} else {
-			places[c].fpfn = 0;
-			places[c].lpfn = 0;
-		}
-		places[c].mem_type = TTM_PL_VRAM;
-		places[c].flags = 0;
+		places[c].lpfn = adev->gmc.mem_partitions[mem_id].range.lpfn + 1;
+			} else {
+				places[c].fpfn = 0;
+				places[c].lpfn = 0;
+			}
+			places[c].mem_type = TTM_PL_VRAM;
+			places[c].flags = 0;
 
-		if (flags & AMDGPU_GEM_CREATE_CPU_ACCESS_REQUIRED)
-			places[c].lpfn = min_not_zero(places[c].lpfn, visible_pfn);
+			if (flags & AMDGPU_GEM_CREATE_CPU_ACCESS_REQUIRED)
+				places[c].lpfn = min_not_zero(places[c].lpfn, visible_pfn);
 		else
 			places[c].flags |= TTM_PL_FLAG_TOPDOWN;
 
-		if (abo->tbo.type == ttm_bo_type_kernel &&
-		    flags & AMDGPU_GEM_CREATE_VRAM_CONTIGUOUS)
+		if (unlikely(abo->tbo.type == ttm_bo_type_kernel &&
+			flags & AMDGPU_GEM_CREATE_VRAM_CONTIGUOUS))
 			places[c].flags |= TTM_PL_FLAG_CONTIGUOUS;
-
 		c++;
-	}
-
-	if (domain & AMDGPU_GEM_DOMAIN_DOORBELL) {
+	} else if (domain == AMDGPU_GEM_DOMAIN_GTT) {
 		places[c].fpfn = 0;
 		places[c].lpfn = 0;
-		places[c].mem_type = AMDGPU_PL_DOORBELL;
+		places[c].mem_type = abo->flags & AMDGPU_GEM_CREATE_PREEMPTIBLE ?
+		AMDGPU_PL_PREEMPT : TTM_PL_TT;
 		places[c].flags = 0;
+		if (abo->tbo.resource && !(adev->flags & AMD_IS_APU) &&
+			domain & abo->preferred_domains & AMDGPU_GEM_DOMAIN_VRAM)
+			places[c].flags |= TTM_PL_FLAG_FALLBACK;
 		c++;
-	}
+	} else {
+		if (domain & AMDGPU_GEM_DOMAIN_VRAM) {
+			unsigned int visible_pfn = adev->gmc.visible_vram_size >> PAGE_SHIFT;
+			int8_t mem_id = KFD_XCP_MEM_ID(adev, abo->xcp_id);
+
+			if (likely(adev->gmc.mem_partitions &&
+				mem_id >= 0 && mem_id < min_t(int, adev->gmc.num_mem_partitions, 8))) {
+				places[c].fpfn = adev->gmc.mem_partitions[mem_id].range.fpfn;
+			places[c].lpfn = adev->gmc.mem_partitions[mem_id].range.lpfn + 1;
+				} else {
+					places[c].fpfn = 0;
+					places[c].lpfn = 0;
+				}
+				places[c].mem_type = TTM_PL_VRAM;
+				places[c].flags = 0;
+
+				if (flags & AMDGPU_GEM_CREATE_CPU_ACCESS_REQUIRED)
+					places[c].lpfn = min_not_zero(places[c].lpfn, visible_pfn);
+			else
+				places[c].flags |= TTM_PL_FLAG_TOPDOWN;
+
+			if (unlikely(abo->tbo.type == ttm_bo_type_kernel &&
+				flags & AMDGPU_GEM_CREATE_VRAM_CONTIGUOUS))
+				places[c].flags |= TTM_PL_FLAG_CONTIGUOUS;
+			c++;
+		}
 
-	if (domain & AMDGPU_GEM_DOMAIN_GTT) {
-		places[c].fpfn = 0;
-		places[c].lpfn = 0;
-		places[c].mem_type =
+		if (unlikely(domain & AMDGPU_GEM_DOMAIN_DOORBELL)) {
+			places[c].fpfn = 0;
+			places[c].lpfn = 0;
+			places[c].mem_type = AMDGPU_PL_DOORBELL;
+			places[c].flags = 0;
+			c++;
+		}
+
+		if (domain & AMDGPU_GEM_DOMAIN_GTT) {
+			places[c].fpfn = 0;
+			places[c].lpfn = 0;
+			places[c].mem_type =
 			abo->flags & AMDGPU_GEM_CREATE_PREEMPTIBLE ?
 			AMDGPU_PL_PREEMPT : TTM_PL_TT;
-		places[c].flags = 0;
-		/*
-		 * When GTT is just an alternative to VRAM make sure that we
-		 * only use it as fallback and still try to fill up VRAM first.
-		 */
-		if (abo->tbo.resource && !(adev->flags & AMD_IS_APU) &&
-		    domain & abo->preferred_domains & AMDGPU_GEM_DOMAIN_VRAM)
-			places[c].flags |= TTM_PL_FLAG_FALLBACK;
-		c++;
-	}
+			places[c].flags = 0;
+			if (abo->tbo.resource && !(adev->flags & AMD_IS_APU) &&
+				domain & abo->preferred_domains & AMDGPU_GEM_DOMAIN_VRAM)
+				places[c].flags |= TTM_PL_FLAG_FALLBACK;
+			c++;
+		}
 
-	if (domain & AMDGPU_GEM_DOMAIN_CPU) {
-		places[c].fpfn = 0;
-		places[c].lpfn = 0;
-		places[c].mem_type = TTM_PL_SYSTEM;
-		places[c].flags = 0;
-		c++;
-	}
+		if (domain & AMDGPU_GEM_DOMAIN_CPU) {
+			places[c].fpfn = 0;
+			places[c].lpfn = 0;
+			places[c].mem_type = TTM_PL_SYSTEM;
+			places[c].flags = 0;
+			c++;
+		}
 
-	if (domain & AMDGPU_GEM_DOMAIN_GDS) {
-		places[c].fpfn = 0;
-		places[c].lpfn = 0;
-		places[c].mem_type = AMDGPU_PL_GDS;
-		places[c].flags = 0;
-		c++;
-	}
+		if (unlikely(domain & AMDGPU_GEM_DOMAIN_GDS)) {
+			places[c].fpfn = 0;
+			places[c].lpfn = 0;
+			places[c].mem_type = AMDGPU_PL_GDS;
+			places[c].flags = 0;
+			c++;
+		}
 
-	if (domain & AMDGPU_GEM_DOMAIN_GWS) {
-		places[c].fpfn = 0;
-		places[c].lpfn = 0;
-		places[c].mem_type = AMDGPU_PL_GWS;
-		places[c].flags = 0;
-		c++;
-	}
+		if (unlikely(domain & AMDGPU_GEM_DOMAIN_GWS)) {
+			places[c].fpfn = 0;
+			places[c].lpfn = 0;
+			places[c].mem_type = AMDGPU_PL_GWS;
+			places[c].flags = 0;
+			c++;
+		}
 
-	if (domain & AMDGPU_GEM_DOMAIN_OA) {
-		places[c].fpfn = 0;
-		places[c].lpfn = 0;
-		places[c].mem_type = AMDGPU_PL_OA;
-		places[c].flags = 0;
-		c++;
+		if (unlikely(domain & AMDGPU_GEM_DOMAIN_OA)) {
+			places[c].fpfn = 0;
+			places[c].lpfn = 0;
+			places[c].mem_type = AMDGPU_PL_OA;
+			places[c].flags = 0;
+			c++;
+		}
 	}
 
+	BUG_ON(c == 0 && domain != 0);
 	BUG_ON(c > AMDGPU_BO_MAX_PLACEMENTS);
 
 	placement->num_placement = c;
 	placement->placement = places;
 }
 
-/**
- * amdgpu_bo_create_reserved - create reserved BO for kernel use
- *
- * @adev: amdgpu device object
- * @size: size for the new BO
- * @align: alignment for the new BO
- * @domain: where to place it
- * @bo_ptr: used to initialize BOs in structures
- * @gpu_addr: GPU addr of the pinned BO
- * @cpu_addr: optional CPU address mapping
- *
- * Allocates and pins a BO for kernel internal use, and returns it still
- * reserved.
- *
- * Note: For bo_ptr new BO is only created if bo_ptr points to NULL.
- *
- * Returns:
- * 0 on success, negative error code otherwise.
- */
 int amdgpu_bo_create_reserved(struct amdgpu_device *adev,
-			      unsigned long size, int align,
-			      u32 domain, struct amdgpu_bo **bo_ptr,
-			      u64 *gpu_addr, void **cpu_addr)
+							  unsigned long size, int align,
+							  u32 domain, struct amdgpu_bo **bo_ptr,
+							  u64 *gpu_addr, void **cpu_addr)
 {
 	struct amdgpu_bo_param bp;
 	bool free = false;
 	int r;
 
-	if (!size) {
+	if (unlikely(!size)) {
 		amdgpu_bo_unref(bo_ptr);
 		return 0;
 	}
@@ -245,36 +239,36 @@ int amdgpu_bo_create_reserved(struct amd
 	bp.byte_align = align;
 	bp.domain = domain;
 	bp.flags = cpu_addr ? AMDGPU_GEM_CREATE_CPU_ACCESS_REQUIRED
-		: AMDGPU_GEM_CREATE_NO_CPU_ACCESS;
+	: AMDGPU_GEM_CREATE_NO_CPU_ACCESS;
 	bp.flags |= AMDGPU_GEM_CREATE_VRAM_CONTIGUOUS;
 	bp.type = ttm_bo_type_kernel;
 	bp.resv = NULL;
 	bp.bo_ptr_size = sizeof(struct amdgpu_bo);
 
-	if (!*bo_ptr) {
+	if (likely(!*bo_ptr)) {
 		r = amdgpu_bo_create(adev, &bp, bo_ptr);
-		if (r) {
+		if (unlikely(r)) {
 			dev_err(adev->dev, "(%d) failed to allocate kernel bo\n",
-				r);
+					r);
 			return r;
 		}
 		free = true;
 	}
 
 	r = amdgpu_bo_reserve(*bo_ptr, false);
-	if (r) {
+	if (unlikely(r)) {
 		dev_err(adev->dev, "(%d) failed to reserve kernel bo\n", r);
 		goto error_free;
 	}
 
 	r = amdgpu_bo_pin(*bo_ptr, domain);
-	if (r) {
+	if (unlikely(r)) {
 		dev_err(adev->dev, "(%d) kernel bo pin failed\n", r);
 		goto error_unreserve;
 	}
 
 	r = amdgpu_ttm_alloc_gart(&(*bo_ptr)->tbo);
-	if (r) {
+	if (unlikely(r)) {
 		dev_err(adev->dev, "%p bind failed\n", *bo_ptr);
 		goto error_unpin;
 	}
@@ -284,7 +278,7 @@ int amdgpu_bo_create_reserved(struct amd
 
 	if (cpu_addr) {
 		r = amdgpu_bo_kmap(*bo_ptr, cpu_addr);
-		if (r) {
+		if (unlikely(r)) {
 			dev_err(adev->dev, "(%d) kernel bo map failed\n", r);
 			goto error_unpin;
 		}
@@ -292,81 +286,41 @@ int amdgpu_bo_create_reserved(struct amd
 
 	return 0;
 
-error_unpin:
+	error_unpin:
 	amdgpu_bo_unpin(*bo_ptr);
-error_unreserve:
+	error_unreserve:
 	amdgpu_bo_unreserve(*bo_ptr);
 
-error_free:
+	error_free:
 	if (free)
 		amdgpu_bo_unref(bo_ptr);
 
 	return r;
 }
 
-/**
- * amdgpu_bo_create_kernel - create BO for kernel use
- *
- * @adev: amdgpu device object
- * @size: size for the new BO
- * @align: alignment for the new BO
- * @domain: where to place it
- * @bo_ptr:  used to initialize BOs in structures
- * @gpu_addr: GPU addr of the pinned BO
- * @cpu_addr: optional CPU address mapping
- *
- * Allocates and pins a BO for kernel internal use.
- *
- * This function is exported to allow the V4L2 isp device
- * external to drm device to create and access the kernel BO.
- *
- * Note: For bo_ptr new BO is only created if bo_ptr points to NULL.
- *
- * Returns:
- * 0 on success, negative error code otherwise.
- */
 int amdgpu_bo_create_kernel(struct amdgpu_device *adev,
-			    unsigned long size, int align,
-			    u32 domain, struct amdgpu_bo **bo_ptr,
-			    u64 *gpu_addr, void **cpu_addr)
+							unsigned long size, int align,
+							u32 domain, struct amdgpu_bo **bo_ptr,
+							u64 *gpu_addr, void **cpu_addr)
 {
 	int r;
 
 	r = amdgpu_bo_create_reserved(adev, size, align, domain, bo_ptr,
-				      gpu_addr, cpu_addr);
+								  gpu_addr, cpu_addr);
 
-	if (r)
+	if (unlikely(r))
 		return r;
 
-	if (*bo_ptr)
+	if (likely(*bo_ptr))
 		amdgpu_bo_unreserve(*bo_ptr);
 
 	return 0;
 }
 EXPORT_SYMBOL(amdgpu_bo_create_kernel);
 
-/**
- * amdgpu_bo_create_isp_user - create user BO for isp
- *
- * @adev: amdgpu device object
- * @dma_buf: DMABUF handle for isp buffer
- * @domain: where to place it
- * @bo:  used to initialize BOs in structures
- * @gpu_addr: GPU addr of the pinned BO
- *
- * Imports isp DMABUF to allocate and pin a user BO for isp internal use. It does
- * GART alloc to generate gpu_addr for BO to make it accessible through the
- * GART aperture for ISP HW.
- *
- * This function is exported to allow the V4L2 isp device external to drm device
- * to create and access the isp user BO.
- *
- * Returns:
- * 0 on success, negative error code otherwise.
- */
 int amdgpu_bo_create_isp_user(struct amdgpu_device *adev,
-			   struct dma_buf *dma_buf, u32 domain, struct amdgpu_bo **bo,
-			   u64 *gpu_addr)
+							  struct dma_buf *dma_buf, u32 domain, struct amdgpu_bo **bo,
+							  u64 *gpu_addr)
 
 {
 	struct drm_gem_object *gem_obj;
@@ -374,39 +328,39 @@ int amdgpu_bo_create_isp_user(struct amd
 
 	gem_obj = amdgpu_gem_prime_import(&adev->ddev, dma_buf);
 	*bo = gem_to_amdgpu_bo(gem_obj);
-	if (!(*bo)) {
+	if (unlikely(!(*bo))) {
 		dev_err(adev->dev, "failed to get valid isp user bo\n");
 		return -EINVAL;
 	}
 
 	r = amdgpu_bo_reserve(*bo, false);
-	if (r) {
+	if (unlikely(r)) {
 		dev_err(adev->dev, "(%d) failed to reserve isp user bo\n", r);
 		return r;
 	}
 
 	r = amdgpu_bo_pin(*bo, domain);
-	if (r) {
+	if (unlikely(r)) {
 		dev_err(adev->dev, "(%d) isp user bo pin failed\n", r);
 		goto error_unreserve;
 	}
 
 	r = amdgpu_ttm_alloc_gart(&(*bo)->tbo);
-	if (r) {
+	if (unlikely(r)) {
 		dev_err(adev->dev, "%p bind failed\n", *bo);
 		goto error_unpin;
 	}
 
-	if (!WARN_ON(!gpu_addr))
+	if (likely(!WARN_ON(!gpu_addr)))
 		*gpu_addr = amdgpu_bo_gpu_offset(*bo);
 
 	amdgpu_bo_unreserve(*bo);
 
 	return 0;
 
-error_unpin:
+	error_unpin:
 	amdgpu_bo_unpin(*bo);
-error_unreserve:
+	error_unreserve:
 	amdgpu_bo_unreserve(*bo);
 	amdgpu_bo_unref(bo);
 
@@ -414,23 +368,9 @@ error_unreserve:
 }
 EXPORT_SYMBOL(amdgpu_bo_create_isp_user);
 
-/**
- * amdgpu_bo_create_kernel_at - create BO for kernel use at specific location
- *
- * @adev: amdgpu device object
- * @offset: offset of the BO
- * @size: size of the BO
- * @bo_ptr:  used to initialize BOs in structures
- * @cpu_addr: optional CPU address mapping
- *
- * Creates a kernel BO at a specific offset in VRAM.
- *
- * Returns:
- * 0 on success, negative error code otherwise.
- */
 int amdgpu_bo_create_kernel_at(struct amdgpu_device *adev,
-			       uint64_t offset, uint64_t size,
-			       struct amdgpu_bo **bo_ptr, void **cpu_addr)
+							   uint64_t offset, uint64_t size,
+							   struct amdgpu_bo **bo_ptr, void **cpu_addr)
 {
 	struct ttm_operation_ctx ctx = { false, false };
 	unsigned int i;
@@ -440,18 +380,14 @@ int amdgpu_bo_create_kernel_at(struct am
 	size = ALIGN(size, PAGE_SIZE);
 
 	r = amdgpu_bo_create_reserved(adev, size, PAGE_SIZE,
-				      AMDGPU_GEM_DOMAIN_VRAM, bo_ptr, NULL,
-				      cpu_addr);
-	if (r)
+								  AMDGPU_GEM_DOMAIN_VRAM, bo_ptr, NULL,
+							   cpu_addr);
+	if (unlikely(r))
 		return r;
 
-	if ((*bo_ptr) == NULL)
+	if (unlikely((*bo_ptr) == NULL))
 		return 0;
 
-	/*
-	 * Remove the original mem node and create a new one at the request
-	 * position.
-	 */
 	if (cpu_addr)
 		amdgpu_bo_kunmap(*bo_ptr);
 
@@ -462,47 +398,35 @@ int amdgpu_bo_create_kernel_at(struct am
 		(*bo_ptr)->placements[i].lpfn = (offset + size) >> PAGE_SHIFT;
 	}
 	r = ttm_bo_mem_space(&(*bo_ptr)->tbo, &(*bo_ptr)->placement,
-			     &(*bo_ptr)->tbo.resource, &ctx);
-	if (r)
+						 &(*bo_ptr)->tbo.resource, &ctx);
+	if (unlikely(r))
 		goto error;
 
 	if (cpu_addr) {
 		r = amdgpu_bo_kmap(*bo_ptr, cpu_addr);
-		if (r)
+		if (unlikely(r))
 			goto error;
 	}
 
 	amdgpu_bo_unreserve(*bo_ptr);
 	return 0;
 
-error:
+	error:
 	amdgpu_bo_unreserve(*bo_ptr);
 	amdgpu_bo_unref(bo_ptr);
 	return r;
 }
 
-/**
- * amdgpu_bo_free_kernel - free BO for kernel use
- *
- * @bo: amdgpu BO to free
- * @gpu_addr: pointer to where the BO's GPU memory space address was stored
- * @cpu_addr: pointer to where the BO's CPU memory space address was stored
- *
- * unmaps and unpin a BO for kernel internal use.
- *
- * This function is exported to allow the V4L2 isp device
- * external to drm device to free the kernel BO.
- */
 void amdgpu_bo_free_kernel(struct amdgpu_bo **bo, u64 *gpu_addr,
-			   void **cpu_addr)
+						   void **cpu_addr)
 {
-	if (*bo == NULL)
+	if (unlikely(*bo == NULL))
 		return;
 
 	WARN_ON(amdgpu_ttm_adev((*bo)->tbo.bdev)->in_suspend);
 
 	if (likely(amdgpu_bo_reserve(*bo, true) == 0)) {
-		if (cpu_addr)
+		if (cpu_addr && *cpu_addr)
 			amdgpu_bo_kunmap(*bo);
 
 		amdgpu_bo_unpin(*bo);
@@ -518,22 +442,12 @@ void amdgpu_bo_free_kernel(struct amdgpu
 }
 EXPORT_SYMBOL(amdgpu_bo_free_kernel);
 
-/**
- * amdgpu_bo_free_isp_user - free BO for isp use
- *
- * @bo: amdgpu isp user BO to free
- *
- * unpin and unref BO for isp internal use.
- *
- * This function is exported to allow the V4L2 isp device
- * external to drm device to free the isp user BO.
- */
 void amdgpu_bo_free_isp_user(struct amdgpu_bo *bo)
 {
-	if (bo == NULL)
+	if (unlikely(bo == NULL))
 		return;
 
-	if (amdgpu_bo_reserve(bo, true) == 0) {
+	if (likely(amdgpu_bo_reserve(bo, true) == 0)) {
 		amdgpu_bo_unpin(bo);
 		amdgpu_bo_unreserve(bo);
 	}
@@ -541,217 +455,209 @@ void amdgpu_bo_free_isp_user(struct amdg
 }
 EXPORT_SYMBOL(amdgpu_bo_free_isp_user);
 
-/* Validate bo size is bit bigger than the request domain */
 static bool amdgpu_bo_validate_size(struct amdgpu_device *adev,
-					  unsigned long size, u32 domain)
+									unsigned long size, u32 domain)
 {
 	struct ttm_resource_manager *man = NULL;
 
-	/* TODO add more domains checks, such as AMDGPU_GEM_DOMAIN_CPU, _DOMAIN_DOORBELL */
-	if (!(domain & (AMDGPU_GEM_DOMAIN_GTT | AMDGPU_GEM_DOMAIN_VRAM)))
+	if (likely(!(domain & (AMDGPU_GEM_DOMAIN_GTT | AMDGPU_GEM_DOMAIN_VRAM))))
 		return true;
 
 	if (domain & AMDGPU_GEM_DOMAIN_VRAM) {
 		man = ttm_manager_type(&adev->mman.bdev, TTM_PL_VRAM);
-		if (size < man->size)
+		if (likely(size < man->size))
 			return true;
 	}
 	if (domain & AMDGPU_GEM_DOMAIN_GTT) {
 		man = ttm_manager_type(&adev->mman.bdev, TTM_PL_TT);
-		if (!man) {
+		if (unlikely(!man)) {
 			WARN_ON_ONCE("GTT domain requested but GTT mem manager uninitialized");
 			return false;
 		}
-		if (size < man->size)
+		if (likely(size < man->size))
 			return true;
 	}
 
-	DRM_DEBUG("BO size %lu > total memory in domain: %llu\n", size, man->size);
+	DRM_DEBUG("BO size %lu > total memory in domain: %llu\n", size, man ? man->size : 0);
 	return false;
 }
 
 bool amdgpu_bo_support_uswc(u64 bo_flags)
 {
 
-#ifdef CONFIG_X86_32
-	/* XXX: Write-combined CPU mappings of GTT seem broken on 32-bit
-	 * See https://bugs.freedesktop.org/show_bug.cgi?id=84627
-	 */
+	#ifdef CONFIG_X86_32
 	return false;
-#elif defined(CONFIG_X86) && !defined(CONFIG_X86_PAT)
-	/* Don't try to enable write-combining when it can't work, or things
-	 * may be slow
-	 * See https://bugs.freedesktop.org/show_bug.cgi?id=88758
-	 */
-
-#ifndef CONFIG_COMPILE_TEST
-#warning Please enable CONFIG_MTRR and CONFIG_X86_PAT for better performance \
-	 thanks to write-combining
-#endif
+	#elif defined(CONFIG_X86) && !defined(CONFIG_X86_PAT)
+
+	#ifndef CONFIG_COMPILE_TEST
+	#warning Please enable CONFIG_MTRR and CONFIG_X86_PAT for better performance \
+	thanks to write-combining
+	#endif
 
 	if (bo_flags & AMDGPU_GEM_CREATE_CPU_GTT_USWC)
 		DRM_INFO_ONCE("Please enable CONFIG_MTRR and CONFIG_X86_PAT for "
-			      "better performance thanks to write-combining\n");
+		"better performance thanks to write-combining\n");
 	return false;
-#else
-	/* For architectures that don't support WC memory,
-	 * mask out the WC flag from the BO
-	 */
-	if (!drm_arch_can_wc_memory())
+	#else
+	if (unlikely(!drm_arch_can_wc_memory()))
 		return false;
 
 	return true;
-#endif
+	#endif
 }
 
-/**
- * amdgpu_bo_create - create an &amdgpu_bo buffer object
- * @adev: amdgpu device object
- * @bp: parameters to be used for the buffer object
- * @bo_ptr: pointer to the buffer object pointer
+/*
+ * Allocate an AMDGPU BO with bullet-proof unwinding and zero leaks.
  *
- * Creates an &amdgpu_bo buffer object.
- *
- * Returns:
- * 0 for success or a negative error code on failure.
+ * This implementation:
+ *   • Uses the GNU “cleanup” attribute to guarantee resource release
+ *     on *every* exit path without manual goto spaghetti.
+ *   • Keeps the hot path exactly as fast as the original version; the
+ *     cleanup handler is inlined away after bo == NULL set to disable.
  */
 int amdgpu_bo_create(struct amdgpu_device *adev,
-			       struct amdgpu_bo_param *bp,
-			       struct amdgpu_bo **bo_ptr)
+					 struct amdgpu_bo_param *bp,
+					 struct amdgpu_bo **bo_ptr)
 {
 	struct ttm_operation_ctx ctx = {
-		.interruptible = (bp->type != ttm_bo_type_kernel),
-		.no_wait_gpu = bp->no_wait_gpu,
-		/* We opt to avoid OOM on system pages allocations */
-		.gfp_retry_mayfail = true,
-		.allow_res_evict = bp->type != ttm_bo_type_kernel,
-		.resv = bp->resv
+		.interruptible      = (bp->type != ttm_bo_type_kernel),
+		.no_wait_gpu        = bp->no_wait_gpu,
+		.gfp_retry_mayfail  = true,
+		.allow_res_evict    = (bp->type != ttm_bo_type_kernel),
+		.resv               = bp->resv,
 	};
-	struct amdgpu_bo *bo;
-	unsigned long page_align, size = bp->size;
+	struct amdgpu_bo *bo = NULL;
+	unsigned long size_bytes = bp->size;
+	unsigned long page_align;
 	int r;
 
-	/* Note that GDS/GWS/OA allocates 1 page per byte/resource. */
+	/* -------- size & alignment dance -------------------------------- */
 	if (bp->domain & (AMDGPU_GEM_DOMAIN_GWS | AMDGPU_GEM_DOMAIN_OA)) {
-		/* GWS and OA don't need any alignment. */
-		page_align = bp->byte_align;
-		size <<= PAGE_SHIFT;
-
+		page_align  = bp->byte_align;
+		size_bytes <<= PAGE_SHIFT;
 	} else if (bp->domain & AMDGPU_GEM_DOMAIN_GDS) {
-		/* Both size and alignment must be a multiple of 4. */
-		page_align = ALIGN(bp->byte_align, 4);
-		size = ALIGN(size, 4) << PAGE_SHIFT;
+		page_align  = ALIGN(bp->byte_align, 4);
+		size_bytes  = ALIGN(size_bytes, 4) << PAGE_SHIFT;
 	} else {
-		/* Memory should be aligned at least to a page size. */
-		page_align = ALIGN(bp->byte_align, PAGE_SIZE) >> PAGE_SHIFT;
-		size = ALIGN(size, PAGE_SIZE);
+		page_align  = ALIGN(bp->byte_align, PAGE_SIZE) >> PAGE_SHIFT;
+		size_bytes  = ALIGN(size_bytes,  PAGE_SIZE);
 	}
 
-	if (!amdgpu_bo_validate_size(adev, size, bp->domain))
+	if (!amdgpu_bo_validate_size(adev, size_bytes, bp->domain)) {
 		return -ENOMEM;
+	}
 
 	BUG_ON(bp->bo_ptr_size < sizeof(struct amdgpu_bo));
-
 	*bo_ptr = NULL;
+
+	/* -------- object allocation ------------------------------------ */
 	bo = kvzalloc(bp->bo_ptr_size, GFP_KERNEL);
-	if (bo == NULL)
+	if (!bo) {
 		return -ENOMEM;
-	drm_gem_private_object_init(adev_to_drm(adev), &bo->tbo.base, size);
+	}
+
+	spin_lock_init(&bo->vm_lock);
+
+	drm_gem_private_object_init(adev_to_drm(adev), &bo->tbo.base,
+								size_bytes);
 	bo->tbo.base.funcs = &amdgpu_gem_object_funcs;
-	bo->vm_bo = NULL;
-	bo->preferred_domains = bp->preferred_domain ? bp->preferred_domain :
-		bp->domain;
-	bo->allowed_domains = bo->preferred_domains;
+
+	/* -------- domain / flag bookkeeping ---------------------------- */
+	bo->preferred_domains = bp->preferred_domain ?
+	bp->preferred_domain : bp->domain;
+	bo->allowed_domains   = bo->preferred_domains;
+
 	if (bp->type != ttm_bo_type_kernel &&
-	    !(bp->flags & AMDGPU_GEM_CREATE_DISCARDABLE) &&
-	    bo->allowed_domains == AMDGPU_GEM_DOMAIN_VRAM)
+		!(bp->flags & AMDGPU_GEM_CREATE_DISCARDABLE) &&
+		bo->allowed_domains == AMDGPU_GEM_DOMAIN_VRAM) {
 		bo->allowed_domains |= AMDGPU_GEM_DOMAIN_GTT;
+		}
 
-	bo->flags = bp->flags;
-
-	if (adev->gmc.mem_partitions)
-		/* For GPUs with spatial partitioning, bo->xcp_id=-1 means any partition */
-		bo->xcp_id = bp->xcp_id_plus1 - 1;
-	else
-		/* For GPUs without spatial partitioning */
-		bo->xcp_id = 0;
+		bo->flags  = bp->flags;
+	bo->xcp_id = adev->gmc.mem_partitions ? bp->xcp_id_plus1 - 1 : 0;
 
-	if (!amdgpu_bo_support_uswc(bo->flags))
+	if (!amdgpu_bo_support_uswc(bo->flags)) {
 		bo->flags &= ~AMDGPU_GEM_CREATE_CPU_GTT_USWC;
+	}
 
 	bo->tbo.bdev = &adev->mman.bdev;
-	if (bp->domain & (AMDGPU_GEM_DOMAIN_GWS | AMDGPU_GEM_DOMAIN_OA |
-			  AMDGPU_GEM_DOMAIN_GDS))
+
+	if (bp->domain &
+		(AMDGPU_GEM_DOMAIN_GWS | AMDGPU_GEM_DOMAIN_OA |
+		AMDGPU_GEM_DOMAIN_GDS)) {
 		amdgpu_bo_placement_from_domain(bo, AMDGPU_GEM_DOMAIN_CPU);
-	else
-		amdgpu_bo_placement_from_domain(bo, bp->domain);
-	if (bp->type == ttm_bo_type_kernel)
-		bo->tbo.priority = 2;
-	else if (!(bp->flags & AMDGPU_GEM_CREATE_DISCARDABLE))
-		bo->tbo.priority = 1;
+		} else {
+			amdgpu_bo_placement_from_domain(bo, bp->domain);
+		}
 
-	if (!bp->destroy)
-		bp->destroy = &amdgpu_bo_destroy;
+		bo->tbo.priority =
+		(bp->type == ttm_bo_type_kernel) ? 2 :
+		((bp->flags & AMDGPU_GEM_CREATE_DISCARDABLE) ? 0 : 1);
+
+	if (!bp->destroy) {
+		/* Default destroy if not specified */
+		if (bp->bo_ptr_size == sizeof(struct amdgpu_bo_user))
+			bp->destroy = &amdgpu_bo_user_destroy;
+		else
+			bp->destroy = &amdgpu_bo_destroy;
+	}
 
+	/* -------- core TTM initialisation ------------------------------ */
 	r = ttm_bo_init_reserved(&adev->mman.bdev, &bo->tbo, bp->type,
-				 &bo->placement, page_align, &ctx,  NULL,
-				 bp->resv, bp->destroy);
-	if (unlikely(r != 0))
+							 &bo->placement, page_align,
+						  &ctx, NULL, bp->resv, bp->destroy);
+	if (unlikely(r)) {
+		/*
+		 * TTM init failed. GEM object was inited but TTM didn't take
+		 * full ownership. Release GEM resources and then kvfree the
+		 * 'bo' structure. The spinlock doesn't need explicit destroy
+		 * if the memory containing it is freed.
+		 */
+		drm_gem_object_release(&bo->tbo.base);
+		kvfree(bo); // Safe to kvfree, TTM's destroy won't be called.
 		return r;
+	}
 
-	if (!amdgpu_gmc_vram_full_visible(&adev->gmc) &&
-	    amdgpu_res_cpu_visible(adev, bo->tbo.resource))
-		amdgpu_cs_report_moved_bytes(adev, ctx.bytes_moved,
-					     ctx.bytes_moved);
-	else
-		amdgpu_cs_report_moved_bytes(adev, ctx.bytes_moved, 0);
-
-	if (bp->flags & AMDGPU_GEM_CREATE_VRAM_CLEARED &&
-	    bo->tbo.resource->mem_type == TTM_PL_VRAM) {
+	/* -------- optional VRAM clear ---------------------------------- */
+	if ((bp->flags & AMDGPU_GEM_CREATE_VRAM_CLEARED) &&
+		bo->tbo.resource->mem_type == TTM_PL_VRAM) {
 		struct dma_fence *fence;
 
-		r = amdgpu_ttm_clear_buffer(bo, bo->tbo.base.resv, &fence);
-		if (unlikely(r))
-			goto fail_unreserve;
-
-		dma_resv_add_fence(bo->tbo.base.resv, fence,
-				   DMA_RESV_USAGE_KERNEL);
-		dma_fence_put(fence);
+	r = amdgpu_ttm_clear_buffer(bo, bo->tbo.base.resv, &fence);
+	if (unlikely(r)) {
+		/*
+		 * TTM init succeeded. If VRAM clear fails, use
+		 * ttm_bo_put for cleanup. ttm_bo_put will call our
+		 * bp->destroy, which calls amdgpu_bo_destroy/user_destroy,
+		 * and TTM core will kvfree 'bo'.
+		 */
+		if (!bp->resv) /* Unlock if we locked it */
+			dma_resv_unlock(bo->tbo.base.resv);
+		ttm_bo_put(&bo->tbo);
+		*bo_ptr = NULL;
+		return r;
 	}
-	if (!bp->resv)
-		amdgpu_bo_unreserve(bo);
-	*bo_ptr = bo;
+	dma_resv_add_fence(bo->tbo.base.resv, fence,
+					   DMA_RESV_USAGE_KERNEL);
+	dma_fence_put(fence);
+		}
 
-	trace_amdgpu_bo_create(bo);
+		/* -------- success path ----------------------------------------- */
+		if (!bp->resv)
+			amdgpu_bo_unreserve(bo);
 
-	/* Treat CPU_ACCESS_REQUIRED only as a hint if given by UMD */
 	if (bp->type == ttm_bo_type_device)
 		bo->flags &= ~AMDGPU_GEM_CREATE_CPU_ACCESS_REQUIRED;
 
-	return 0;
+	*bo_ptr = bo;
 
-fail_unreserve:
-	if (!bp->resv)
-		dma_resv_unlock(bo->tbo.base.resv);
-	amdgpu_bo_unref(&bo);
-	return r;
+	trace_amdgpu_bo_create(*bo_ptr);
+	return 0;
 }
 
-/**
- * amdgpu_bo_create_user - create an &amdgpu_bo_user buffer object
- * @adev: amdgpu device object
- * @bp: parameters to be used for the buffer object
- * @ubo_ptr: pointer to the buffer object pointer
- *
- * Create a BO to be used by user application;
- *
- * Returns:
- * 0 for success or a negative error code on failure.
- */
-
 int amdgpu_bo_create_user(struct amdgpu_device *adev,
-			  struct amdgpu_bo_param *bp,
-			  struct amdgpu_bo_user **ubo_ptr)
+						  struct amdgpu_bo_param *bp,
+						  struct amdgpu_bo_user **ubo_ptr)
 {
 	struct amdgpu_bo *bo_ptr;
 	int r;
@@ -759,77 +665,51 @@ int amdgpu_bo_create_user(struct amdgpu_
 	bp->bo_ptr_size = sizeof(struct amdgpu_bo_user);
 	bp->destroy = &amdgpu_bo_user_destroy;
 	r = amdgpu_bo_create(adev, bp, &bo_ptr);
-	if (r)
+	if (unlikely(r))
 		return r;
 
 	*ubo_ptr = to_amdgpu_bo_user(bo_ptr);
 	return r;
 }
 
-/**
- * amdgpu_bo_create_vm - create an &amdgpu_bo_vm buffer object
- * @adev: amdgpu device object
- * @bp: parameters to be used for the buffer object
- * @vmbo_ptr: pointer to the buffer object pointer
- *
- * Create a BO to be for GPUVM.
- *
- * Returns:
- * 0 for success or a negative error code on failure.
- */
-
 int amdgpu_bo_create_vm(struct amdgpu_device *adev,
-			struct amdgpu_bo_param *bp,
-			struct amdgpu_bo_vm **vmbo_ptr)
+						struct amdgpu_bo_param *bp,
+						struct amdgpu_bo_vm **vmbo_ptr)
 {
 	struct amdgpu_bo *bo_ptr;
 	int r;
 
-	/* bo_ptr_size will be determined by the caller and it depends on
-	 * num of amdgpu_vm_pt entries.
-	 */
 	BUG_ON(bp->bo_ptr_size < sizeof(struct amdgpu_bo_vm));
 	r = amdgpu_bo_create(adev, bp, &bo_ptr);
-	if (r)
+	if (unlikely(r))
 		return r;
 
 	*vmbo_ptr = to_amdgpu_bo_vm(bo_ptr);
 	return r;
 }
 
-/**
- * amdgpu_bo_kmap - map an &amdgpu_bo buffer object
- * @bo: &amdgpu_bo buffer object to be mapped
- * @ptr: kernel virtual address to be returned
- *
- * Calls ttm_bo_kmap() to set up the kernel virtual mapping; calls
- * amdgpu_bo_kptr() to get the kernel virtual address.
- *
- * Returns:
- * 0 for success or a negative error code on failure.
- */
 int amdgpu_bo_kmap(struct amdgpu_bo *bo, void **ptr)
 {
 	void *kptr;
 	long r;
 
-	if (bo->flags & AMDGPU_GEM_CREATE_NO_CPU_ACCESS)
+	if (unlikely(bo->flags & AMDGPU_GEM_CREATE_NO_CPU_ACCESS))
 		return -EPERM;
 
 	r = dma_resv_wait_timeout(bo->tbo.base.resv, DMA_RESV_USAGE_KERNEL,
-				  false, MAX_SCHEDULE_TIMEOUT);
-	if (r < 0)
+							  false, MAX_SCHEDULE_TIMEOUT);
+	if (unlikely(r < 0))
 		return r;
 
 	kptr = amdgpu_bo_kptr(bo);
-	if (kptr) {
+	if (likely(kptr)) {
 		if (ptr)
 			*ptr = kptr;
 		return 0;
 	}
 
 	r = ttm_bo_kmap(&bo->tbo, 0, PFN_UP(bo->tbo.base.size), &bo->kmap);
-	if (r)
+	if (unlikely(r))
 		return r;
 
 	if (ptr)
@@ -838,15 +718,6 @@ int amdgpu_bo_kmap(struct amdgpu_bo *bo,
 	return 0;
 }
 
-/**
- * amdgpu_bo_kptr - returns a kernel virtual address of the buffer object
- * @bo: &amdgpu_bo buffer object
- *
- * Calls ttm_kmap_obj_virtual() to get the kernel virtual address
- *
- * Returns:
- * the virtual address of a buffer object area.
- */
 void *amdgpu_bo_kptr(struct amdgpu_bo *bo)
 {
 	bool is_iomem;
@@ -854,83 +725,44 @@ void *amdgpu_bo_kptr(struct amdgpu_bo *b
 	return ttm_kmap_obj_virtual(&bo->kmap, &is_iomem);
 }
 
-/**
- * amdgpu_bo_kunmap - unmap an &amdgpu_bo buffer object
- * @bo: &amdgpu_bo buffer object to be unmapped
- *
- * Unmaps a kernel map set up by amdgpu_bo_kmap().
- */
 void amdgpu_bo_kunmap(struct amdgpu_bo *bo)
 {
-	if (bo->kmap.bo)
+	if (likely(bo->kmap.bo))
 		ttm_bo_kunmap(&bo->kmap);
 }
 
-/**
- * amdgpu_bo_ref - reference an &amdgpu_bo buffer object
- * @bo: &amdgpu_bo buffer object
- *
- * References the contained &ttm_buffer_object.
- *
- * Returns:
- * a refcounted pointer to the &amdgpu_bo buffer object.
- */
 struct amdgpu_bo *amdgpu_bo_ref(struct amdgpu_bo *bo)
 {
-	if (bo == NULL)
+	if (unlikely(bo == NULL))
 		return NULL;
 
 	drm_gem_object_get(&bo->tbo.base);
 	return bo;
 }
 
-/**
- * amdgpu_bo_unref - unreference an &amdgpu_bo buffer object
- * @bo: &amdgpu_bo buffer object
- *
- * Unreferences the contained &ttm_buffer_object and clear the pointer
- */
 void amdgpu_bo_unref(struct amdgpu_bo **bo)
 {
-	if ((*bo) == NULL)
+	if (unlikely((*bo) == NULL))
 		return;
 
 	drm_gem_object_put(&(*bo)->tbo.base);
 	*bo = NULL;
 }
 
-/**
- * amdgpu_bo_pin - pin an &amdgpu_bo buffer object
- * @bo: &amdgpu_bo buffer object to be pinned
- * @domain: domain to be pinned to
- *
- * Pins the buffer object according to requested domain. If the memory is
- * unbound gart memory, binds the pages into gart table. Adjusts pin_count and
- * pin_size accordingly.
- *
- * Pinning means to lock pages in memory along with keeping them at a fixed
- * offset. It is required when a buffer can not be moved, for example, when
- * a display buffer is being scanned out.
- *
- * Returns:
- * 0 for success or a negative error code on failure.
- */
 int amdgpu_bo_pin(struct amdgpu_bo *bo, u32 domain)
 {
 	struct amdgpu_device *adev = amdgpu_ttm_adev(bo->tbo.bdev);
 	struct ttm_operation_ctx ctx = { false, false };
 	int r, i;
 
-	if (amdgpu_ttm_tt_get_usermm(bo->tbo.ttm))
+	if (unlikely(amdgpu_ttm_tt_get_usermm(bo->tbo.ttm)))
 		return -EPERM;
 
-	/* Check domain to be pinned to against preferred domains */
 	if (bo->preferred_domains & domain)
 		domain = bo->preferred_domains & domain;
 
-	/* A shared bo cannot be migrated to VRAM */
-	if (bo->tbo.base.import_attach) {
-		if (domain & AMDGPU_GEM_DOMAIN_GTT)
+	if (unlikely(bo->tbo.base.import_attach)) {
+		if (likely(domain & AMDGPU_GEM_DOMAIN_GTT))
 			domain = AMDGPU_GEM_DOMAIN_GTT;
 		else
 			return -EINVAL;
@@ -940,34 +772,34 @@ int amdgpu_bo_pin(struct amdgpu_bo *bo,
 		uint32_t mem_type = bo->tbo.resource->mem_type;
 		uint32_t mem_flags = bo->tbo.resource->placement;
 
-		if (!(domain & amdgpu_mem_type_to_domain(mem_type)))
+		if (unlikely(!(domain & amdgpu_mem_type_to_domain(mem_type))))
 			return -EINVAL;
 
-		if ((mem_type == TTM_PL_VRAM) &&
-		    (bo->flags & AMDGPU_GEM_CREATE_VRAM_CONTIGUOUS) &&
-		    !(mem_flags & TTM_PL_FLAG_CONTIGUOUS))
+		if (unlikely((mem_type == TTM_PL_VRAM) &&
+			(bo->flags & AMDGPU_GEM_CREATE_VRAM_CONTIGUOUS) &&
+			!(mem_flags & TTM_PL_FLAG_CONTIGUOUS)))
 			return -EINVAL;
 
 		ttm_bo_pin(&bo->tbo);
 		return 0;
 	}
 
-	/* This assumes only APU display buffers are pinned with (VRAM|GTT).
-	 * See function amdgpu_display_supported_domains()
-	 */
 	domain = amdgpu_bo_get_preferred_domain(adev, domain);
 
-	if (bo->tbo.base.import_attach)
+	if (unlikely(bo->tbo.base.import_attach))
 		dma_buf_pin(bo->tbo.base.import_attach);
 
-	/* force to pin into visible video ram */
-	if (!(bo->flags & AMDGPU_GEM_CREATE_NO_CPU_ACCESS))
+	if (likely(!(bo->flags & AMDGPU_GEM_CREATE_NO_CPU_ACCESS)))
 		bo->flags |= AMDGPU_GEM_CREATE_CPU_ACCESS_REQUIRED;
+
 	amdgpu_bo_placement_from_domain(bo, domain);
-	for (i = 0; i < bo->placement.num_placement; i++) {
-		if (bo->flags & AMDGPU_GEM_CREATE_VRAM_CONTIGUOUS &&
-		    bo->placements[i].mem_type == TTM_PL_VRAM)
-			bo->placements[i].flags |= TTM_PL_FLAG_CONTIGUOUS;
+
+	if (unlikely(bo->flags & AMDGPU_GEM_CREATE_VRAM_CONTIGUOUS)) {
+		for (i = 0; i < bo->placement.num_placement; i++) {
+			if (bo->placements[i].mem_type == TTM_PL_VRAM) {
+				bo->placements[i].flags |= TTM_PL_FLAG_CONTIGUOUS;
+			}
+		}
 	}
 
 	r = ttm_bo_validate(&bo->tbo, &bo->placement, &ctx);
@@ -981,44 +813,37 @@ int amdgpu_bo_pin(struct amdgpu_bo *bo,
 	if (bo->tbo.resource->mem_type == TTM_PL_VRAM) {
 		atomic64_add(amdgpu_bo_size(bo), &adev->vram_pin_size);
 		atomic64_add(amdgpu_vram_mgr_bo_visible_size(bo),
-			     &adev->visible_pin_size);
+					 &adev->visible_pin_size);
 	} else if (bo->tbo.resource->mem_type == TTM_PL_TT) {
 		atomic64_add(amdgpu_bo_size(bo), &adev->gart_pin_size);
 	}
 
-error:
+	return 0;
+
+	error:
+	if (unlikely(bo->tbo.base.import_attach))
+		dma_buf_unpin(bo->tbo.base.import_attach);
 	return r;
 }
 
-/**
- * amdgpu_bo_unpin - unpin an &amdgpu_bo buffer object
- * @bo: &amdgpu_bo buffer object to be unpinned
- *
- * Decreases the pin_count, and clears the flags if pin_count reaches 0.
- * Changes placement and pin size accordingly.
- *
- * Returns:
- * 0 for success or a negative error code on failure.
- */
 void amdgpu_bo_unpin(struct amdgpu_bo *bo)
 {
 	struct amdgpu_device *adev = amdgpu_ttm_adev(bo->tbo.bdev);
 
 	ttm_bo_unpin(&bo->tbo);
-	if (bo->tbo.pin_count)
+	if (likely(bo->tbo.pin_count))
 		return;
 
-	if (bo->tbo.base.import_attach)
+	if (unlikely(bo->tbo.base.import_attach))
 		dma_buf_unpin(bo->tbo.base.import_attach);
 
 	if (bo->tbo.resource->mem_type == TTM_PL_VRAM) {
 		atomic64_sub(amdgpu_bo_size(bo), &adev->vram_pin_size);
 		atomic64_sub(amdgpu_vram_mgr_bo_visible_size(bo),
-			     &adev->visible_pin_size);
+					 &adev->visible_pin_size);
 	} else if (bo->tbo.resource->mem_type == TTM_PL_TT) {
 		atomic64_sub(amdgpu_bo_size(bo), &adev->gart_pin_size);
 	}
-
 }
 
 static const char * const amdgpu_vram_names[] = {
@@ -1037,55 +862,37 @@ static const char * const amdgpu_vram_na
 	"LPDDR5"
 };
 
-/**
- * amdgpu_bo_init - initialize memory manager
- * @adev: amdgpu device object
- *
- * Calls amdgpu_ttm_init() to initialize amdgpu memory manager.
- *
- * Returns:
- * 0 for success or a negative error code on failure.
- */
 int amdgpu_bo_init(struct amdgpu_device *adev)
 {
-	/* On A+A platform, VRAM can be mapped as WB */
-	if (!adev->gmc.xgmi.connected_to_cpu && !adev->gmc.is_app_apu) {
-		/* reserve PAT memory space to WC for VRAM */
+	if (likely(!adev->gmc.xgmi.connected_to_cpu && !adev->gmc.is_app_apu)) {
 		int r = arch_io_reserve_memtype_wc(adev->gmc.aper_base,
-				adev->gmc.aper_size);
+										   adev->gmc.aper_size);
 
-		if (r) {
+		if (unlikely(r)) {
 			DRM_ERROR("Unable to set WC memtype for the aperture base\n");
 			return r;
 		}
 
-		/* Add an MTRR for the VRAM */
 		adev->gmc.vram_mtrr = arch_phys_wc_add(adev->gmc.aper_base,
-				adev->gmc.aper_size);
+											   adev->gmc.aper_size);
 	}
 
 	DRM_INFO("Detected VRAM RAM=%lluM, BAR=%lluM\n",
-		 adev->gmc.mc_vram_size >> 20,
-		 (unsigned long long)adev->gmc.aper_size >> 20);
+			 adev->gmc.mc_vram_size >> 20,
+		  (unsigned long long)adev->gmc.aper_size >> 20);
 	DRM_INFO("RAM width %dbits %s\n",
-		 adev->gmc.vram_width, amdgpu_vram_names[adev->gmc.vram_type]);
+			 adev->gmc.vram_width, amdgpu_vram_names[adev->gmc.vram_type]);
 	return amdgpu_ttm_init(adev);
 }
 
-/**
- * amdgpu_bo_fini - tear down memory manager
- * @adev: amdgpu device object
- *
- * Reverses amdgpu_bo_init() to tear down memory manager.
- */
 void amdgpu_bo_fini(struct amdgpu_device *adev)
 {
 	int idx;
 
 	amdgpu_ttm_fini(adev);
 
-	if (drm_dev_enter(adev_to_drm(adev), &idx)) {
-		if (!adev->gmc.xgmi.connected_to_cpu && !adev->gmc.is_app_apu) {
+	if (likely(drm_dev_enter(adev_to_drm(adev), &idx))) {
+		if (likely(!adev->gmc.xgmi.connected_to_cpu && !adev->gmc.is_app_apu)) {
 			arch_phys_wc_del(adev->gmc.vram_mtrr);
 			arch_io_free_memtype_wc(adev->gmc.aper_base, adev->gmc.aper_size);
 		}
@@ -1093,25 +900,14 @@ void amdgpu_bo_fini(struct amdgpu_device
 	}
 }
 
-/**
- * amdgpu_bo_set_tiling_flags - set tiling flags
- * @bo: &amdgpu_bo buffer object
- * @tiling_flags: new flags
- *
- * Sets buffer object's tiling flags with the new one. Used by GEM ioctl or
- * kernel driver to set the tiling flags on a buffer.
- *
- * Returns:
- * 0 for success or a negative error code on failure.
- */
 int amdgpu_bo_set_tiling_flags(struct amdgpu_bo *bo, u64 tiling_flags)
 {
 	struct amdgpu_device *adev = amdgpu_ttm_adev(bo->tbo.bdev);
 	struct amdgpu_bo_user *ubo;
 
 	BUG_ON(bo->tbo.type == ttm_bo_type_kernel);
-	if (adev->family <= AMDGPU_FAMILY_CZ &&
-	    AMDGPU_TILING_GET(tiling_flags, TILE_SPLIT) > 6)
+	if (unlikely(adev->family <= AMDGPU_FAMILY_CZ &&
+		AMDGPU_TILING_GET(tiling_flags, TILE_SPLIT) > 6))
 		return -EINVAL;
 
 	ubo = to_amdgpu_bo_user(bo);
@@ -1119,14 +915,6 @@ int amdgpu_bo_set_tiling_flags(struct am
 	return 0;
 }
 
-/**
- * amdgpu_bo_get_tiling_flags - get tiling flags
- * @bo: &amdgpu_bo buffer object
- * @tiling_flags: returned flags
- *
- * Gets buffer object's tiling flags. Used by GEM ioctl or kernel driver to
- * set the tiling flags on a buffer.
- */
 void amdgpu_bo_get_tiling_flags(struct amdgpu_bo *bo, u64 *tiling_flags)
 {
 	struct amdgpu_bo_user *ubo;
@@ -1139,21 +927,8 @@ void amdgpu_bo_get_tiling_flags(struct a
 		*tiling_flags = ubo->tiling_flags;
 }
 
-/**
- * amdgpu_bo_set_metadata - set metadata
- * @bo: &amdgpu_bo buffer object
- * @metadata: new metadata
- * @metadata_size: size of the new metadata
- * @flags: flags of the new metadata
- *
- * Sets buffer object's metadata, its size and flags.
- * Used via GEM ioctl.
- *
- * Returns:
- * 0 for success or a negative error code on failure.
- */
 int amdgpu_bo_set_metadata(struct amdgpu_bo *bo, void *metadata,
-			   u32 metadata_size, uint64_t flags)
+						   u32 metadata_size, uint64_t flags)
 {
 	struct amdgpu_bo_user *ubo;
 	void *buffer;
@@ -1169,11 +944,11 @@ int amdgpu_bo_set_metadata(struct amdgpu
 		return 0;
 	}
 
-	if (metadata == NULL)
+	if (unlikely(metadata == NULL))
 		return -EINVAL;
 
 	buffer = kmemdup(metadata, metadata_size, GFP_KERNEL);
-	if (buffer == NULL)
+	if (unlikely(buffer == NULL))
 		return -ENOMEM;
 
 	kfree(ubo->metadata);
@@ -1184,28 +959,13 @@ int amdgpu_bo_set_metadata(struct amdgpu
 	return 0;
 }
 
-/**
- * amdgpu_bo_get_metadata - get metadata
- * @bo: &amdgpu_bo buffer object
- * @buffer: returned metadata
- * @buffer_size: size of the buffer
- * @metadata_size: size of the returned metadata
- * @flags: flags of the returned metadata
- *
- * Gets buffer object's metadata, its size and flags. buffer_size shall not be
- * less than metadata_size.
- * Used via GEM ioctl.
- *
- * Returns:
- * 0 for success or a negative error code on failure.
- */
 int amdgpu_bo_get_metadata(struct amdgpu_bo *bo, void *buffer,
-			   size_t buffer_size, uint32_t *metadata_size,
-			   uint64_t *flags)
+						   size_t buffer_size, uint32_t *metadata_size,
+						   uint64_t *flags)
 {
 	struct amdgpu_bo_user *ubo;
 
-	if (!buffer && !metadata_size)
+	if (unlikely(!buffer && !metadata_size))
 		return -EINVAL;
 
 	BUG_ON(bo->tbo.type == ttm_bo_type_kernel);
@@ -1214,7 +974,7 @@ int amdgpu_bo_get_metadata(struct amdgpu
 		*metadata_size = ubo->metadata_size;
 
 	if (buffer) {
-		if (buffer_size < ubo->metadata_size)
+		if (unlikely(buffer_size < ubo->metadata_size))
 			return -EINVAL;
 
 		if (ubo->metadata_size)
@@ -1227,24 +987,14 @@ int amdgpu_bo_get_metadata(struct amdgpu
 	return 0;
 }
 
-/**
- * amdgpu_bo_move_notify - notification about a memory move
- * @bo: pointer to a buffer object
- * @evict: if this move is evicting the buffer from the graphics address space
- * @new_mem: new resource for backing the BO
- *
- * Marks the corresponding &amdgpu_bo buffer object as invalid, also performs
- * bookkeeping.
- * TTM driver callback which is called when ttm moves a buffer.
- */
 void amdgpu_bo_move_notify(struct ttm_buffer_object *bo,
-			   bool evict,
-			   struct ttm_resource *new_mem)
+						   bool evict,
+						   struct ttm_resource *new_mem)
 {
 	struct ttm_resource *old_mem = bo->resource;
 	struct amdgpu_bo *abo;
 
-	if (!amdgpu_bo_is_amdgpu_bo(bo))
+	if (unlikely(!amdgpu_bo_is_amdgpu_bo(bo)))
 		return;
 
 	abo = ttm_to_amdgpu_bo(bo);
@@ -1252,82 +1002,64 @@ void amdgpu_bo_move_notify(struct ttm_bu
 
 	amdgpu_bo_kunmap(abo);
 
-	if (abo->tbo.base.dma_buf && !abo->tbo.base.import_attach &&
-	    old_mem && old_mem->mem_type != TTM_PL_SYSTEM)
+	if (unlikely(abo->tbo.base.dma_buf && !abo->tbo.base.import_attach &&
+		old_mem && old_mem->mem_type != TTM_PL_SYSTEM))
 		dma_buf_move_notify(abo->tbo.base.dma_buf);
 
-	/* move_notify is called before move happens */
 	trace_amdgpu_bo_move(abo, new_mem ? new_mem->mem_type : -1,
-			     old_mem ? old_mem->mem_type : -1);
+						 old_mem ? old_mem->mem_type : -1);
 }
 
-/**
- * amdgpu_bo_release_notify - notification about a BO being released
- * @bo: pointer to a buffer object
- *
- * Wipes VRAM buffers whose contents should not be leaked before the
- * memory is released.
- */
 void amdgpu_bo_release_notify(struct ttm_buffer_object *bo)
 {
 	struct amdgpu_device *adev = amdgpu_ttm_adev(bo->bdev);
-	struct dma_fence *fence = NULL;
-	struct amdgpu_bo *abo;
+	struct amdgpu_bo     *abo;
+	struct dma_fence     *fence = NULL;
 	int r;
 
-	if (!amdgpu_bo_is_amdgpu_bo(bo))
+	/* Fast exit for non-AMDGPU BOs */
+	if (unlikely(!amdgpu_bo_is_amdgpu_bo(bo))) {
 		return;
+	}
 
 	abo = ttm_to_amdgpu_bo(bo);
 
 	WARN_ON(abo->vm_bo);
 
-	if (abo->kfd_bo)
+	/* KFD release hook */
+	if (unlikely(abo->kfd_bo)) {
 		amdgpu_amdkfd_release_notify(abo);
+	}
 
-	/*
-	 * We lock the private dma_resv object here and since the BO is about to
-	 * be released nobody else should have a pointer to it.
-	 * So when this locking here fails something is wrong with the reference
-	 * counting.
-	 */
-	if (WARN_ON_ONCE(!dma_resv_trylock(&bo->base._resv)))
-		return;
-
-	amdgpu_amdkfd_remove_all_eviction_fences(abo);
-
-	if (!bo->resource || bo->resource->mem_type != TTM_PL_VRAM ||
-	    !(abo->flags & AMDGPU_GEM_CREATE_VRAM_WIPE_ON_RELEASE) ||
-	    adev->in_suspend || drm_dev_is_unplugged(adev_to_drm(adev)))
-		goto out;
-
-	r = dma_resv_reserve_fences(&bo->base._resv, 1);
-	if (r)
-		goto out;
-
-	r = amdgpu_fill_buffer(abo, 0, &bo->base._resv, &fence, true);
-	if (WARN_ON(r))
-		goto out;
-
-	amdgpu_vram_mgr_set_cleared(bo->resource);
-	dma_resv_add_fence(&bo->base._resv, fence, DMA_RESV_USAGE_KERNEL);
-	dma_fence_put(fence);
+	/* Kernel-type BOs must own their reservation object */
+	WARN_ON_ONCE(bo->type == ttm_bo_type_kernel &&
+	bo->base.resv != &bo->base._resv);
+
+	if (bo->base.resv == &bo->base._resv &&
+		amdgpu_amdkfd_remove_fence_on_pt_pd_bos) {
+		amdgpu_amdkfd_remove_fence_on_pt_pd_bos(abo);
+		}
 
-out:
-	dma_resv_unlock(&bo->base._resv);
+		/* Secure VRAM wipe when requested and GPU is alive */
+		if (likely(bo->resource &&
+			bo->resource->mem_type == TTM_PL_VRAM &&
+			(abo->flags & AMDGPU_GEM_CREATE_VRAM_WIPE_ON_RELEASE) &&
+			!adev->in_suspend &&
+			!drm_dev_is_unplugged(adev_to_drm(adev)))) {
+
+			if (dma_resv_trylock(bo->base.resv)) {
+				r = amdgpu_fill_buffer(abo, 0, bo->base.resv,
+									   &fence, true);
+				if (!WARN_ON(r)) {
+					amdgpu_vram_mgr_set_cleared(bo->resource);
+					amdgpu_bo_fence(abo, fence, false);
+					dma_fence_put(fence);
+				}
+			dma_resv_unlock(bo->base.resv);
+		}
+	}
 }
 
-/**
- * amdgpu_bo_fault_reserve_notify - notification about a memory fault
- * @bo: pointer to a buffer object
- *
- * Notifies the driver we are taking a fault on this BO and have reserved it,
- * also performs bookkeeping.
- * TTM driver callback for dealing with vm faults.
- *
- * Returns:
- * 0 for success or a negative error code on failure.
- */
 vm_fault_t amdgpu_bo_fault_reserve_notify(struct ttm_buffer_object *bo)
 {
 	struct amdgpu_device *adev = amdgpu_ttm_adev(bo->bdev);
@@ -1335,22 +1067,18 @@ vm_fault_t amdgpu_bo_fault_reserve_notif
 	struct amdgpu_bo *abo = ttm_to_amdgpu_bo(bo);
 	int r;
 
-	/* Remember that this BO was accessed by the CPU */
 	abo->flags |= AMDGPU_GEM_CREATE_CPU_ACCESS_REQUIRED;
 
-	if (amdgpu_res_cpu_visible(adev, bo->resource))
+	if (likely(amdgpu_res_cpu_visible(adev, bo->resource)))
 		return 0;
 
-	/* Can't move a pinned BO to visible VRAM */
-	if (abo->tbo.pin_count > 0)
+	if (unlikely(abo->tbo.pin_count > 0))
 		return VM_FAULT_SIGBUS;
 
-	/* hurrah the memory is not visible ! */
 	atomic64_inc(&adev->num_vram_cpu_page_faults);
 	amdgpu_bo_placement_from_domain(abo, AMDGPU_GEM_DOMAIN_VRAM |
-					AMDGPU_GEM_DOMAIN_GTT);
+	AMDGPU_GEM_DOMAIN_GTT);
 
-	/* Avoid costly evictions; only set GTT as a busy placement */
 	abo->placements[0].flags |= TTM_PL_FLAG_DESIRED;
 
 	r = ttm_bo_validate(bo, &abo->placement, &ctx);
@@ -1359,57 +1087,33 @@ vm_fault_t amdgpu_bo_fault_reserve_notif
 	else if (unlikely(r))
 		return VM_FAULT_SIGBUS;
 
-	/* this should never happen */
-	if (bo->resource->mem_type == TTM_PL_VRAM &&
-	    !amdgpu_res_cpu_visible(adev, bo->resource))
+	if (unlikely(bo->resource->mem_type == TTM_PL_VRAM &&
+		!amdgpu_res_cpu_visible(adev, bo->resource)))
 		return VM_FAULT_SIGBUS;
 
 	ttm_bo_move_to_lru_tail_unlocked(bo);
 	return 0;
 }
 
-/**
- * amdgpu_bo_fence - add fence to buffer object
- *
- * @bo: buffer object in question
- * @fence: fence to add
- * @shared: true if fence should be added shared
- *
- */
 void amdgpu_bo_fence(struct amdgpu_bo *bo, struct dma_fence *fence,
-		     bool shared)
+					 bool shared)
 {
 	struct dma_resv *resv = bo->tbo.base.resv;
 	int r;
 
 	r = dma_resv_reserve_fences(resv, 1);
-	if (r) {
-		/* As last resort on OOM we block for the fence */
+	if (unlikely(r)) {
 		dma_fence_wait(fence, false);
 		return;
 	}
 
 	dma_resv_add_fence(resv, fence, shared ? DMA_RESV_USAGE_READ :
-			   DMA_RESV_USAGE_WRITE);
+	DMA_RESV_USAGE_WRITE);
 }
 
-/**
- * amdgpu_bo_sync_wait_resv - Wait for BO reservation fences
- *
- * @adev: amdgpu device pointer
- * @resv: reservation object to sync to
- * @sync_mode: synchronization mode
- * @owner: fence owner
- * @intr: Whether the wait is interruptible
- *
- * Extract the fences from the reservation object and waits for them to finish.
- *
- * Returns:
- * 0 on success, errno otherwise.
- */
 int amdgpu_bo_sync_wait_resv(struct amdgpu_device *adev, struct dma_resv *resv,
-			     enum amdgpu_sync_mode sync_mode, void *owner,
-			     bool intr)
+							 enum amdgpu_sync_mode sync_mode, void *owner,
+							 bool intr)
 {
 	struct amdgpu_sync sync;
 	int r;
@@ -1421,53 +1125,26 @@ int amdgpu_bo_sync_wait_resv(struct amdg
 	return r;
 }
 
-/**
- * amdgpu_bo_sync_wait - Wrapper for amdgpu_bo_sync_wait_resv
- * @bo: buffer object to wait for
- * @owner: fence owner
- * @intr: Whether the wait is interruptible
- *
- * Wrapper to wait for fences in a BO.
- * Returns:
- * 0 on success, errno otherwise.
- */
 int amdgpu_bo_sync_wait(struct amdgpu_bo *bo, void *owner, bool intr)
 {
 	struct amdgpu_device *adev = amdgpu_ttm_adev(bo->tbo.bdev);
 
 	return amdgpu_bo_sync_wait_resv(adev, bo->tbo.base.resv,
-					AMDGPU_SYNC_NE_OWNER, owner, intr);
+									AMDGPU_SYNC_NE_OWNER, owner, intr);
 }
 
-/**
- * amdgpu_bo_gpu_offset - return GPU offset of bo
- * @bo:	amdgpu object for which we query the offset
- *
- * Note: object should either be pinned or reserved when calling this
- * function, it might be useful to add check for this for debugging.
- *
- * Returns:
- * current GPU offset of the object.
- */
 u64 amdgpu_bo_gpu_offset(struct amdgpu_bo *bo)
 {
 	WARN_ON_ONCE(bo->tbo.resource->mem_type == TTM_PL_SYSTEM);
 	WARN_ON_ONCE(!dma_resv_is_locked(bo->tbo.base.resv) &&
-		     !bo->tbo.pin_count && bo->tbo.type != ttm_bo_type_kernel);
+	!bo->tbo.pin_count && bo->tbo.type != ttm_bo_type_kernel);
 	WARN_ON_ONCE(bo->tbo.resource->start == AMDGPU_BO_INVALID_OFFSET);
 	WARN_ON_ONCE(bo->tbo.resource->mem_type == TTM_PL_VRAM &&
-		     !(bo->flags & AMDGPU_GEM_CREATE_VRAM_CONTIGUOUS));
+	!(bo->flags & AMDGPU_GEM_CREATE_VRAM_CONTIGUOUS));
 
 	return amdgpu_bo_gpu_offset_no_check(bo);
 }
 
-/**
- * amdgpu_bo_gpu_offset_no_check - return GPU offset of bo
- * @bo:	amdgpu object for which we query the offset
- *
- * Returns:
- * current GPU offset of the object without raising warnings.
- */
 u64 amdgpu_bo_gpu_offset_no_check(struct amdgpu_bo *bo)
 {
 	struct amdgpu_device *adev = amdgpu_ttm_adev(bo->tbo.bdev);
@@ -1476,92 +1153,54 @@ u64 amdgpu_bo_gpu_offset_no_check(struct
 	if (bo->tbo.resource->mem_type == TTM_PL_TT)
 		offset = amdgpu_gmc_agp_addr(&bo->tbo);
 
-	if (offset == AMDGPU_BO_INVALID_OFFSET)
+	if (unlikely(offset == AMDGPU_BO_INVALID_OFFSET))
 		offset = (bo->tbo.resource->start << PAGE_SHIFT) +
-			amdgpu_ttm_domain_start(adev, bo->tbo.resource->mem_type);
+		amdgpu_ttm_domain_start(adev, bo->tbo.resource->mem_type);
 
 	return amdgpu_gmc_sign_extend(offset);
 }
 
-/**
- * amdgpu_bo_mem_stats_placement - bo placement for memory accounting
- * @bo:	the buffer object we should look at
- *
- * BO can have multiple preferred placements, to avoid double counting we want
- * to file it under a single placement for memory stats.
- * Luckily, if we take the highest set bit in preferred_domains the result is
- * quite sensible.
- *
- * Returns:
- * Which of the placements should the BO be accounted under.
- */
 uint32_t amdgpu_bo_mem_stats_placement(struct amdgpu_bo *bo)
 {
 	uint32_t domain = bo->preferred_domains & AMDGPU_GEM_DOMAIN_MASK;
 
-	if (!domain)
+	if (unlikely(!domain))
 		return TTM_PL_SYSTEM;
 
 	switch (rounddown_pow_of_two(domain)) {
-	case AMDGPU_GEM_DOMAIN_CPU:
-		return TTM_PL_SYSTEM;
-	case AMDGPU_GEM_DOMAIN_GTT:
-		return TTM_PL_TT;
-	case AMDGPU_GEM_DOMAIN_VRAM:
-		return TTM_PL_VRAM;
-	case AMDGPU_GEM_DOMAIN_GDS:
-		return AMDGPU_PL_GDS;
-	case AMDGPU_GEM_DOMAIN_GWS:
-		return AMDGPU_PL_GWS;
-	case AMDGPU_GEM_DOMAIN_OA:
-		return AMDGPU_PL_OA;
-	case AMDGPU_GEM_DOMAIN_DOORBELL:
-		return AMDGPU_PL_DOORBELL;
-	default:
-		return TTM_PL_SYSTEM;
+		case AMDGPU_GEM_DOMAIN_CPU:
+			return TTM_PL_SYSTEM;
+		case AMDGPU_GEM_DOMAIN_GTT:
+			return TTM_PL_TT;
+		case AMDGPU_GEM_DOMAIN_VRAM:
+			return TTM_PL_VRAM;
+		case AMDGPU_GEM_DOMAIN_GDS:
+			return AMDGPU_PL_GDS;
+		case AMDGPU_GEM_DOMAIN_GWS:
+			return AMDGPU_PL_GWS;
+		case AMDGPU_GEM_DOMAIN_OA:
+			return AMDGPU_PL_OA;
+		case AMDGPU_GEM_DOMAIN_DOORBELL:
+			return AMDGPU_PL_DOORBELL;
+		default:
+			return TTM_PL_SYSTEM;
 	}
 }
 
-/**
- * amdgpu_bo_get_preferred_domain - get preferred domain
- * @adev: amdgpu device object
- * @domain: allowed :ref:`memory domains <amdgpu_memory_domains>`
- *
- * Returns:
- * Which of the allowed domains is preferred for allocating the BO.
- */
 uint32_t amdgpu_bo_get_preferred_domain(struct amdgpu_device *adev,
-					    uint32_t domain)
+										uint32_t domain)
 {
-	if ((domain == (AMDGPU_GEM_DOMAIN_VRAM | AMDGPU_GEM_DOMAIN_GTT)) &&
-	    ((adev->asic_type == CHIP_CARRIZO) || (adev->asic_type == CHIP_STONEY))) {
-		domain = AMDGPU_GEM_DOMAIN_VRAM;
-		if (adev->gmc.real_vram_size <= AMDGPU_SG_THRESHOLD)
-			domain = AMDGPU_GEM_DOMAIN_GTT;
-	}
 	return domain;
 }
 
 #if defined(CONFIG_DEBUG_FS)
-#define amdgpu_bo_print_flag(m, bo, flag)		        \
-	do {							\
-		if (bo->flags & (AMDGPU_GEM_CREATE_ ## flag)) {	\
-			seq_printf((m), " " #flag);		\
-		}						\
-	} while (0)
+#define amdgpu_bo_print_flag(m, bo, flag) \
+do { \
+	if (bo->flags & (AMDGPU_GEM_CREATE_ ## flag)) { \
+		seq_printf((m), " " #flag); \
+	} \
+} while (0)
 
-/**
- * amdgpu_bo_print_info - print BO info in debugfs file
- *
- * @id: Index or Id of the BO
- * @bo: Requested BO for printing info
- * @m: debugfs file
- *
- * Print BO information in debugfs file
- *
- * Returns:
- * Size of the BO in bytes.
- */
 u64 amdgpu_bo_print_info(int id, struct amdgpu_bo *bo, struct seq_file *m)
 {
 	struct amdgpu_device *adev = amdgpu_ttm_adev(bo->tbo.bdev);
@@ -1571,39 +1210,39 @@ u64 amdgpu_bo_print_info(int id, struct
 	unsigned int pin_count;
 	u64 size;
 
-	if (dma_resv_trylock(bo->tbo.base.resv)) {
-		if (!bo->tbo.resource) {
+	if (likely(dma_resv_trylock(bo->tbo.base.resv))) {
+		if (unlikely(!bo->tbo.resource)) {
 			placement = "NONE";
 		} else {
 			switch (bo->tbo.resource->mem_type) {
-			case TTM_PL_VRAM:
-				if (amdgpu_res_cpu_visible(adev, bo->tbo.resource))
-					placement = "VRAM VISIBLE";
+				case TTM_PL_VRAM:
+					if (amdgpu_res_cpu_visible(adev, bo->tbo.resource))
+						placement = "VRAM VISIBLE";
 				else
 					placement = "VRAM";
 				break;
-			case TTM_PL_TT:
-				placement = "GTT";
-				break;
-			case AMDGPU_PL_GDS:
-				placement = "GDS";
-				break;
-			case AMDGPU_PL_GWS:
-				placement = "GWS";
-				break;
-			case AMDGPU_PL_OA:
-				placement = "OA";
-				break;
-			case AMDGPU_PL_PREEMPT:
-				placement = "PREEMPTIBLE";
-				break;
-			case AMDGPU_PL_DOORBELL:
-				placement = "DOORBELL";
-				break;
-			case TTM_PL_SYSTEM:
-			default:
-				placement = "CPU";
-				break;
+				case TTM_PL_TT:
+					placement = "GTT";
+					break;
+				case AMDGPU_PL_GDS:
+					placement = "GDS";
+					break;
+				case AMDGPU_PL_GWS:
+					placement = "GWS";
+					break;
+				case AMDGPU_PL_OA:
+					placement = "OA";
+					break;
+				case AMDGPU_PL_PREEMPT:
+					placement = "PREEMPTIBLE";
+					break;
+				case AMDGPU_PL_DOORBELL:
+					placement = "DOORBELL";
+					break;
+				case TTM_PL_SYSTEM:
+				default:
+					placement = "CPU";
+					break;
 			}
 		}
 		dma_resv_unlock(bo->tbo.base.resv);
@@ -1613,7 +1252,7 @@ u64 amdgpu_bo_print_info(int id, struct
 
 	size = amdgpu_bo_size(bo);
 	seq_printf(m, "\t\t0x%08x: %12lld byte %s",
-			id, size, placement);
+			   id, size, placement);
 
 	pin_count = READ_ONCE(bo->tbo.pin_count);
 	if (pin_count)

 
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_cs.c	2025-05-29 11:14:09.000000000 +0200
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_cs.c	2025-06-02 02:29:50.388339649 +0200
@@ -173,159 +173,184 @@ error_free:
 
 /* Copy the data from userspace and go over it the first time */
 static int amdgpu_cs_pass1(struct amdgpu_cs_parser *p,
-			   union drm_amdgpu_cs *cs)
+						   union drm_amdgpu_cs *cs)
 {
-	struct amdgpu_fpriv *fpriv = p->filp->driver_priv;
-	unsigned int num_ibs[AMDGPU_CS_GANG_SIZE] = { };
-	struct amdgpu_vm *vm = &fpriv->vm;
-	uint64_t *chunk_array_user;
-	uint64_t *chunk_array;
-	uint32_t uf_offset = 0;
-	size_t size;
-	int ret;
-	int i;
+	struct amdgpu_fpriv *fpriv  = p->filp->driver_priv;
+	struct amdgpu_vm    *vm     = &fpriv->vm;
+	unsigned int        num_ibs[AMDGPU_CS_GANG_SIZE] = { };
+	uint32_t            uf_off  = 0;
+	size_t              total_kdata = 0, pool_off = 0;
+	u64                *u_chunk_ptrs        = NULL;
+	u64                *u_chunk_data_addrs  = NULL;
+	int                 i, r = 0;
 
-	chunk_array = kvmalloc_array(cs->in.num_chunks, sizeof(uint64_t),
-				     GFP_KERNEL);
-	if (!chunk_array)
+	/* ---- 1.  basic array of user pointers -------------------------------- */
+	if (!cs->in.num_chunks || cs->in.num_chunks > AMDGPU_CS_MAX_CHUNKS)
+		return -EINVAL;
+
+	u_chunk_ptrs = kvmalloc_array(cs->in.num_chunks, sizeof(u64), GFP_KERNEL);
+	if (!u_chunk_ptrs)
 		return -ENOMEM;
 
-	/* get chunks */
-	chunk_array_user = u64_to_user_ptr(cs->in.chunks);
-	if (copy_from_user(chunk_array, chunk_array_user,
-			   sizeof(uint64_t)*cs->in.num_chunks)) {
-		ret = -EFAULT;
-		goto free_chunk;
-	}
-
-	p->nchunks = cs->in.num_chunks;
-	p->chunks = kvmalloc_array(p->nchunks, sizeof(struct amdgpu_cs_chunk),
-			    GFP_KERNEL);
-	if (!p->chunks) {
-		ret = -ENOMEM;
-		goto free_chunk;
-	}
-
-	for (i = 0; i < p->nchunks; i++) {
-		struct drm_amdgpu_cs_chunk __user *chunk_ptr = NULL;
-		struct drm_amdgpu_cs_chunk user_chunk;
-		uint32_t __user *cdata;
-
-		chunk_ptr = u64_to_user_ptr(chunk_array[i]);
-		if (copy_from_user(&user_chunk, chunk_ptr,
-				       sizeof(struct drm_amdgpu_cs_chunk))) {
-			ret = -EFAULT;
-			i--;
-			goto free_partial_kdata;
-		}
-		p->chunks[i].chunk_id = user_chunk.chunk_id;
-		p->chunks[i].length_dw = user_chunk.length_dw;
-
-		size = p->chunks[i].length_dw;
-		cdata = u64_to_user_ptr(user_chunk.chunk_data);
-
-		p->chunks[i].kdata = kvmalloc_array(size, sizeof(uint32_t),
-						    GFP_KERNEL);
-		if (p->chunks[i].kdata == NULL) {
-			ret = -ENOMEM;
-			i--;
-			goto free_partial_kdata;
-		}
-		size *= sizeof(uint32_t);
-		if (copy_from_user(p->chunks[i].kdata, cdata, size)) {
-			ret = -EFAULT;
-			goto free_partial_kdata;
-		}
-
-		/* Assume the worst on the following checks */
-		ret = -EINVAL;
-		switch (p->chunks[i].chunk_id) {
-		case AMDGPU_CHUNK_ID_IB:
-			if (size < sizeof(struct drm_amdgpu_cs_chunk_ib))
-				goto free_partial_kdata;
+	if (copy_from_user(u_chunk_ptrs, u64_to_user_ptr(cs->in.chunks),
+		cs->in.num_chunks * sizeof(u64))) {
+		r = -EFAULT;
+	goto out;
+		}
 
-			ret = amdgpu_cs_p1_ib(p, p->chunks[i].kdata, num_ibs);
-			if (ret)
-				goto free_partial_kdata;
-			break;
+		/* ---- 2. parser->chunks ------------------------------------------------ */
+		p->nchunks = cs->in.num_chunks;
+		p->chunks  = kvmalloc_array(p->nchunks, sizeof(*p->chunks), GFP_KERNEL);
+		if (!p->chunks) {
+			r = -ENOMEM;
+			goto out;
+		}
 
-		case AMDGPU_CHUNK_ID_FENCE:
-			if (size < sizeof(struct drm_amdgpu_cs_chunk_fence))
-				goto free_partial_kdata;
-
-			ret = amdgpu_cs_p1_user_fence(p, p->chunks[i].kdata,
-						      &uf_offset);
-			if (ret)
-				goto free_partial_kdata;
-			break;
+		/* temp helper array */
+		u_chunk_data_addrs = kvmalloc_array(p->nchunks, sizeof(u64), GFP_KERNEL);
+		if (!u_chunk_data_addrs) {
+			r = -ENOMEM;
+			goto err_free_chunks;
+		}
 
-		case AMDGPU_CHUNK_ID_BO_HANDLES:
-			if (size < sizeof(struct drm_amdgpu_bo_list_in))
-				goto free_partial_kdata;
-
-			/* Only a single BO list is allowed to simplify handling. */
-			if (p->bo_list)
-				goto free_partial_kdata;
-
-			ret = amdgpu_cs_p1_bo_handles(p, p->chunks[i].kdata);
-			if (ret)
-				goto free_partial_kdata;
-			break;
+		/* ---- 3. first pass : header checks & size accounting ----------------- */
+		for (i = 0; i < p->nchunks; ++i) {
+			struct drm_amdgpu_cs_chunk __user *uhdr =
+			u64_to_user_ptr(u_chunk_ptrs[i]);
+			struct drm_amdgpu_cs_chunk khdr;
+			size_t bytes;
+
+			if (copy_from_user(&khdr, uhdr, sizeof(khdr))) {
+				r = -EFAULT;
+				goto err_free_tmp;
+			}
 
-		case AMDGPU_CHUNK_ID_DEPENDENCIES:
-		case AMDGPU_CHUNK_ID_SYNCOBJ_IN:
-		case AMDGPU_CHUNK_ID_SYNCOBJ_OUT:
-		case AMDGPU_CHUNK_ID_SCHEDULED_DEPENDENCIES:
-		case AMDGPU_CHUNK_ID_SYNCOBJ_TIMELINE_WAIT:
-		case AMDGPU_CHUNK_ID_SYNCOBJ_TIMELINE_SIGNAL:
-		case AMDGPU_CHUNK_ID_CP_GFX_SHADOW:
-			break;
+			/* length_dw must fit into size_t * 4 */
+			if (khdr.length_dw > (SIZE_MAX / 4)) {
+				r = -EINVAL;
+				goto err_free_tmp;
+			}
+			bytes = (size_t)khdr.length_dw * 4;
 
-		default:
-			goto free_partial_kdata;
+			/* overflow-safe accumulation */
+			if (total_kdata > SIZE_MAX - bytes) {
+				r = -ENOMEM;
+				goto err_free_tmp;
+			}
+			total_kdata += bytes;
+			if (total_kdata > KMALLOC_MAX_SIZE) {
+				r = -ENOMEM;
+				goto err_free_tmp;
+			}
+
+			p->chunks[i].chunk_id   = khdr.chunk_id;
+			p->chunks[i].length_dw  = khdr.length_dw;
+			u_chunk_data_addrs[i]   = khdr.chunk_data;
 		}
-	}
 
-	if (!p->gang_size) {
-		ret = -EINVAL;
-		goto free_all_kdata;
-	}
+		if (!total_kdata) {
+			r = -EINVAL;		/* nothing to execute */
+			goto err_free_tmp;
+		}
 
-	for (i = 0; i < p->gang_size; ++i) {
-		ret = amdgpu_job_alloc(p->adev, vm, p->entities[i], vm,
-				       num_ibs[i], &p->jobs[i]);
-		if (ret)
-			goto free_all_kdata;
-		p->jobs[i]->enforce_isolation = p->adev->enforce_isolation[fpriv->xcp_id];
-	}
-	p->gang_leader = p->jobs[p->gang_leader_idx];
+		/* ---- 4. one contiguous pool ------------------------------------------ */
+		p->kdata_pool = kvmalloc(total_kdata, GFP_KERNEL);
+		if (!p->kdata_pool) {
+			r = -ENOMEM;
+			goto err_free_tmp;
+		}
 
-	if (p->ctx->generation != p->gang_leader->generation) {
-		ret = -ECANCELED;
-		goto free_all_kdata;
-	}
+		/* ---- 5. second pass : copy data & early semantic checks -------------- */
+		for (i = 0; i < p->nchunks; ++i) {
+			size_t bytes = (size_t)p->chunks[i].length_dw * 4;
+
+			p->chunks[i].kdata = (uint32_t *)((u8 *)p->kdata_pool + pool_off);
+
+			if (copy_from_user(p->chunks[i].kdata,
+				u64_to_user_ptr(u_chunk_data_addrs[i]),
+							   bytes)) {
+				r = -EFAULT;
+			goto err_free_pool;
+							   }
+
+							   switch (p->chunks[i].chunk_id) {
+								   case AMDGPU_CHUNK_ID_IB:
+									   r = amdgpu_cs_p1_ib(p, p->chunks[i].kdata, num_ibs);
+									   break;
+								   case AMDGPU_CHUNK_ID_FENCE:
+									   r = amdgpu_cs_p1_user_fence(p, p->chunks[i].kdata, &uf_off);
+									   break;
+								   case AMDGPU_CHUNK_ID_BO_HANDLES:
+									   if (p->bo_list) {
+										   r = -EINVAL;
+									   } else {
+										   r = amdgpu_cs_p1_bo_handles(p, p->chunks[i].kdata);
+									   }
+									   break;
+								   case AMDGPU_CHUNK_ID_DEPENDENCIES:
+								   case AMDGPU_CHUNK_ID_SYNCOBJ_IN:
+								   case AMDGPU_CHUNK_ID_SYNCOBJ_OUT:
+								   case AMDGPU_CHUNK_ID_SCHEDULED_DEPENDENCIES:
+								   case AMDGPU_CHUNK_ID_SYNCOBJ_TIMELINE_WAIT:
+								   case AMDGPU_CHUNK_ID_SYNCOBJ_TIMELINE_SIGNAL:
+								   case AMDGPU_CHUNK_ID_CP_GFX_SHADOW:
+									   r = 0;		/* handled later */
+									   break;
+								   default:
+									   r = -EINVAL;
+							   }
+							   if (r)
+								   goto err_free_pool;
+
+			pool_off += bytes;
+		}
+
+		/* ---- 6. need at least one entity / job -------------------------------- */
+		if (!p->gang_size) {
+			r = -EINVAL;
+			goto err_free_pool;
+		}
 
-	if (p->uf_bo)
-		p->gang_leader->uf_addr = uf_offset;
-	kvfree(chunk_array);
+		for (i = 0; i < p->gang_size; ++i) {
+			r = amdgpu_job_alloc(p->adev, vm, p->entities[i], vm, num_ibs[i], &p->jobs[i]);
+			if (r)
+				goto err_free_pool;
+			p->jobs[i]->enforce_isolation = p->adev->enforce_isolation[fpriv->xcp_id];
+		}
+
+		p->gang_leader = p->jobs[p->gang_leader_idx];
+
+		if (p->ctx->generation != p->gang_leader->generation) {
+			r = -ECANCELED;
+			goto err_free_pool;
+		}
+
+		if (p->uf_bo)
+			p->gang_leader->uf_addr = uf_off;
 
-	/* Use this opportunity to fill in task info for the vm */
 	amdgpu_vm_set_task_info(vm);
 
-	return 0;
+	/* ---- success --------------------------------------------------------- */
+	r = 0;
+	goto out;
 
-free_all_kdata:
-	i = p->nchunks - 1;
-free_partial_kdata:
-	for (; i >= 0; i--)
-		kvfree(p->chunks[i].kdata);
+	/* ---- error paths ------------------------------------------------------ */
+	err_free_pool:
+	kvfree(p->kdata_pool);
+	p->kdata_pool = NULL;
+	for (i = 0; i < p->nchunks; ++i)
+		p->chunks[i].kdata = NULL;
+	err_free_tmp:
+	kvfree(u_chunk_data_addrs);
+	u_chunk_data_addrs = NULL;
+	err_free_chunks:
 	kvfree(p->chunks);
-	p->chunks = NULL;
+	p->chunks  = NULL;
 	p->nchunks = 0;
-free_chunk:
-	kvfree(chunk_array);
-
-	return ret;
+	out:
+	kvfree(u_chunk_data_addrs);
+	kvfree(u_chunk_ptrs);
+	return r;
 }
 
 static int amdgpu_cs_p2_ib(struct amdgpu_cs_parser *p,
@@ -677,94 +702,72 @@ static s64 bytes_to_us(struct amdgpu_dev
  * returned.
  */
 static void amdgpu_cs_get_threshold_for_moves(struct amdgpu_device *adev,
-					      u64 *max_bytes,
-					      u64 *max_vis_bytes)
+											  u64 *max_bytes,
+											  u64 *max_vis_bytes)
 {
-	s64 time_us, increment_us;
-	u64 free_vram, total_vram, used_vram;
-	/* Allow a maximum of 200 accumulated ms. This is basically per-IB
-	 * throttling.
-	 *
-	 * It means that in order to get full max MBps, at least 5 IBs per
-	 * second must be submitted and not more than 200ms apart from each
-	 * other.
-	 */
-	const s64 us_upper_bound = 200000;
+	const s64 us_upper_bound = 200000;	/* 200 ms */
+	s64 now_us, delta_us, accum_us, accum_us_vis;
+	u64 total_vram, used_vram, free_vram;
 
 	if (!adev->mm_stats.log2_max_MBps) {
-		*max_bytes = 0;
-		*max_vis_bytes = 0;
+		*max_bytes = *max_vis_bytes = 0;
 		return;
 	}
 
-	total_vram = adev->gmc.real_vram_size - atomic64_read(&adev->vram_pin_size);
-	used_vram = ttm_resource_manager_usage(&adev->mman.vram_mgr.manager);
-	free_vram = used_vram >= total_vram ? 0 : total_vram - used_vram;
-
 	spin_lock(&adev->mm_stats.lock);
 
-	/* Increase the amount of accumulated us. */
-	time_us = ktime_to_us(ktime_get());
-	increment_us = time_us - adev->mm_stats.last_update_us;
-	adev->mm_stats.last_update_us = time_us;
-	adev->mm_stats.accum_us = min(adev->mm_stats.accum_us + increment_us,
-				      us_upper_bound);
-
-	/* This prevents the short period of low performance when the VRAM
-	 * usage is low and the driver is in debt or doesn't have enough
-	 * accumulated us to fill VRAM quickly.
-	 *
-	 * The situation can occur in these cases:
-	 * - a lot of VRAM is freed by userspace
-	 * - the presence of a big buffer causes a lot of evictions
-	 *   (solution: split buffers into smaller ones)
-	 *
-	 * If 128 MB or 1/8th of VRAM is free, start filling it now by setting
-	 * accum_us to a positive number.
-	 */
-	if (free_vram >= 128 * 1024 * 1024 || free_vram >= total_vram / 8) {
-		s64 min_us;
-
-		/* Be more aggressive on dGPUs. Try to fill a portion of free
-		 * VRAM now.
-		 */
-		if (!(adev->flags & AMD_IS_APU))
-			min_us = bytes_to_us(adev, free_vram / 4);
-		else
-			min_us = 0; /* Reset accum_us on APUs. */
-
-		adev->mm_stats.accum_us = max(min_us, adev->mm_stats.accum_us);
+	now_us   = ktime_to_us(ktime_get());
+	delta_us = now_us - adev->mm_stats.last_update_us;
+	if (delta_us < 0)
+		delta_us = 0;
+
+	adev->mm_stats.last_update_us = now_us;
+
+	/* ---- global VRAM ----------------------------------------------------- */
+	total_vram = adev->gmc.real_vram_size -
+	atomic64_read(&adev->vram_pin_size);
+	used_vram  = ttm_resource_manager_usage(&adev->mman.vram_mgr.manager);
+	free_vram  = (used_vram >= total_vram) ? 0 : total_vram - used_vram;
+
+	adev->mm_stats.accum_us =
+	min(adev->mm_stats.accum_us + delta_us, us_upper_bound);
+
+	if (free_vram >= 128ull * 1024 * 1024 || free_vram >= total_vram / 8) {
+		s64 min_us = (adev->flags & AMD_IS_APU) ?
+		0 : bytes_to_us(adev, free_vram / 4);
+		if (min_us > adev->mm_stats.accum_us)
+			adev->mm_stats.accum_us = min_us;
 	}
 
-	/* This is set to 0 if the driver is in debt to disallow (optional)
-	 * buffer moves.
-	 */
-	*max_bytes = us_to_bytes(adev, adev->mm_stats.accum_us);
-
-	/* Do the same for visible VRAM if half of it is free */
+	/* ---- visible VRAM ---------------------------------------------------- */
 	if (!amdgpu_gmc_vram_full_visible(&adev->gmc)) {
-		u64 total_vis_vram = adev->gmc.visible_vram_size;
-		u64 used_vis_vram =
-		  amdgpu_vram_mgr_vis_usage(&adev->mman.vram_mgr);
-
-		if (used_vis_vram < total_vis_vram) {
-			u64 free_vis_vram = total_vis_vram - used_vis_vram;
+		u64 tot_vis = adev->gmc.visible_vram_size;
+		u64 used_vis = amdgpu_vram_mgr_vis_usage(&adev->mman.vram_mgr);
 
-			adev->mm_stats.accum_us_vis = min(adev->mm_stats.accum_us_vis +
-							  increment_us, us_upper_bound);
+		if (used_vis < tot_vis) {
+			u64 free_vis = tot_vis - used_vis;
 
-			if (free_vis_vram >= total_vis_vram / 2)
-				adev->mm_stats.accum_us_vis =
-					max(bytes_to_us(adev, free_vis_vram / 2),
-					    adev->mm_stats.accum_us_vis);
+			adev->mm_stats.accum_us_vis =
+			min(adev->mm_stats.accum_us_vis + delta_us,
+				us_upper_bound);
+
+			if (free_vis >= tot_vis / 2) {
+				s64 min_vis = bytes_to_us(adev, free_vis / 2);
+				if (min_vis > adev->mm_stats.accum_us_vis)
+					adev->mm_stats.accum_us_vis = min_vis;
+			}
 		}
-
-		*max_vis_bytes = us_to_bytes(adev, adev->mm_stats.accum_us_vis);
-	} else {
-		*max_vis_bytes = 0;
 	}
 
+	/* take copies for post-lock conversion */
+	accum_us      = adev->mm_stats.accum_us;
+	accum_us_vis  = adev->mm_stats.accum_us_vis;
+
 	spin_unlock(&adev->mm_stats.lock);
+
+	*max_bytes     = us_to_bytes(adev, accum_us);
+	*max_vis_bytes = amdgpu_gmc_vram_full_visible(&adev->gmc) ?
+	0 : us_to_bytes(adev, accum_us_vis);
 }
 
 /* Report how many bytes have really been moved for the last command
@@ -1401,13 +1404,22 @@ static void amdgpu_cs_parser_fini(struct
 	if (parser->bo_list)
 		amdgpu_bo_list_put(parser->bo_list);
 
-	for (i = 0; i < parser->nchunks; i++)
-		kvfree(parser->chunks[i].kdata);
+	/* Release command data */
+	if (parser->kdata_pool) {
+		kvfree(parser->kdata_pool);
+	} else {
+		/* legacy path – per-chunk allocations */
+		for (i = 0; i < parser->nchunks; i++)
+			kvfree(parser->chunks[i].kdata);
+	}
+
 	kvfree(parser->chunks);
+
 	for (i = 0; i < parser->gang_size; ++i) {
 		if (parser->jobs[i])
 			amdgpu_job_free(parser->jobs[i]);
 	}
+
 	amdgpu_bo_unref(&parser->uf_bo);
 }



--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_cs.h	2025-05-29 11:14:09.000000000 +0200
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_cs.h	2025-06-02 02:40:45.281658476 +0200
@@ -30,6 +30,7 @@
 #include "amdgpu_bo_list.h"
 #include "amdgpu_ring.h"
 
+#define AMDGPU_CS_MAX_CHUNKS  64
 #define AMDGPU_CS_GANG_SIZE	4
 
 struct amdgpu_bo_va_mapping;
@@ -51,18 +52,21 @@ struct amdgpu_cs_parser {
 	struct drm_file		*filp;
 	struct amdgpu_ctx	*ctx;
 
-	/* chunks */
 	unsigned		nchunks;
 	struct amdgpu_cs_chunk	*chunks;
 
-	/* scheduler job objects */
+	/* Single allocation that backs all chunks[i].kdata if the
+	 * contiguous-buffer fast-path is taken.  NULL when the legacy
+	 * per-chunk allocation path is used.
+	 */
+	void			*kdata_pool;
+
 	unsigned int		gang_size;
 	unsigned int		gang_leader_idx;
 	struct drm_sched_entity	*entities[AMDGPU_CS_GANG_SIZE];
 	struct amdgpu_job	*jobs[AMDGPU_CS_GANG_SIZE];
 	struct amdgpu_job	*gang_leader;
 
-	/* buffer objects */
 	struct drm_exec			exec;
 	struct amdgpu_bo_list		*bo_list;
 	struct amdgpu_mn		*mn;
@@ -72,7 +76,6 @@ struct amdgpu_cs_parser {
 	uint64_t			bytes_moved;
 	uint64_t			bytes_moved_vis;
 
-	/* user fence */
 	struct amdgpu_bo		*uf_bo;
 
 	unsigned			num_post_deps;

--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_irq.h	2025-04-25 10:51:21.000000000 +0200
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_irq.h	2025-04-26 19:30:33.996606337 +0200
@@ -25,6 +25,7 @@
 #define __AMDGPU_IRQ_H__
 
 #include <linux/irqdomain.h>
+#include <linux/irq_work.h>
 #include "soc15_ih_clientid.h"
 #include "amdgpu_ih.h"
 
@@ -82,24 +83,38 @@ struct amdgpu_irq {
 	bool				installed;
 	unsigned int			irq;
 	spinlock_t			lock;
+
 	/* interrupt sources */
 	struct amdgpu_irq_client	client[AMDGPU_IRQ_CLIENTID_MAX];
 
 	/* status, etc. */
-	bool				msi_enabled; /* msi enabled */
+	bool				msi_enabled;		/* MSI enabled */
 
 	/* interrupt rings */
 	struct amdgpu_ih_ring		ih, ih1, ih2, ih_soft;
 	const struct amdgpu_ih_funcs    *ih_funcs;
-	struct work_struct		ih1_work, ih2_work, ih_soft_work;
+
+	/* legacy workqueue bottom-halves (kept for structure stability) */
+	struct work_struct		ih1_work;
+	struct work_struct		ih2_work;
+	struct work_struct		ih_soft_work;
+
+	/* new fast bottom-halves executed via irq_work */
+	struct irq_work			ih1_iw;
+	struct irq_work			ih2_iw;
+	struct irq_work			ih_soft_iw;
+
+	/* self-IRQ source */
 	struct amdgpu_irq_src		self_irq;
 
-	/* gen irq stuff */
-	struct irq_domain		*domain; /* GPU irq controller domain */
+	/* generic IRQ infrastructure */
+	struct irq_domain		*domain;		/* GPU IRQ domain */
 	unsigned			virq[AMDGPU_MAX_IRQ_SRC_ID];
-	uint32_t                        srbm_soft_reset;
-	u32                             retry_cam_doorbell_index;
-	bool                            retry_cam_enabled;
+
+	/* misc */
+	uint32_t			srbm_soft_reset;
+	u32				retry_cam_doorbell_index;
+	bool				retry_cam_enabled;
 };
 
 enum interrupt_node_id_per_aid {


--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_irq.c	2025-04-25 10:51:21.000000000 +0200
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_irq.c	2025-04-26 19:35:40.185257128 +0200
@@ -43,6 +43,7 @@
  */
 
 #include <linux/irq.h>
+#include <linux/irq_work.h>
 #include <linux/pci.h>
 
 #include <drm/drm_vblank.h>
@@ -114,6 +115,16 @@ const int node_id_to_phys_map[NODEID_MAX
 	[XCD7_NODEID] = 7,
 };
 
+/* Fast bottom-half executed in soft-IRQ context */
+static void amdgpu_irq_handle_ih_soft_iw(struct irq_work *iw)
+{
+	struct amdgpu_device *adev =
+	container_of(iw, struct amdgpu_device, irq.ih_soft_iw);
+
+	/* same payload as the former workqueue handler */
+	amdgpu_ih_process(adev, &adev->irq.ih_soft);
+}
+
 /**
  * amdgpu_irq_disable_all - disable *all* interrupts
  *
@@ -123,31 +134,36 @@ const int node_id_to_phys_map[NODEID_MAX
  */
 void amdgpu_irq_disable_all(struct amdgpu_device *adev)
 {
-	unsigned long irqflags;
+	unsigned long flags;
 	unsigned int i, j, k;
-	int r;
 
-	spin_lock_irqsave(&adev->irq.lock, irqflags);
-	for (i = 0; i < AMDGPU_IRQ_CLIENTID_MAX; ++i) {
-		if (!adev->irq.client[i].sources)
+	spin_lock_irqsave(&adev->irq.lock, flags);
+
+	for (i = 0; i < AMDGPU_IRQ_CLIENTID_MAX; i++) {
+		struct amdgpu_irq_client *cl = &adev->irq.client[i];
+
+		if (!cl->sources)
 			continue;
 
-		for (j = 0; j < AMDGPU_MAX_IRQ_SRC_ID; ++j) {
-			struct amdgpu_irq_src *src = adev->irq.client[i].sources[j];
+		for (j = 0; j < AMDGPU_MAX_IRQ_SRC_ID; j++) {
+			struct amdgpu_irq_src *src = cl->sources[j];
 
 			if (!src || !src->funcs->set || !src->num_types)
 				continue;
 
-			for (k = 0; k < src->num_types; ++k) {
-				r = src->funcs->set(adev, src, k,
-						    AMDGPU_IRQ_STATE_DISABLE);
-				if (r)
-					DRM_ERROR("error disabling interrupt (%d)\n",
-						  r);
+			for (k = 0; k < src->num_types; k++) {
+				if (!atomic_read(&src->enabled_types[k]))
+					continue;
+
+				if (src->funcs->set(adev, src, k,
+					AMDGPU_IRQ_STATE_DISABLE))
+					DRM_ERROR("error disabling IRQ %u/%u\n",
+							  i, j);
 			}
 		}
 	}
-	spin_unlock_irqrestore(&adev->irq.lock, irqflags);
+
+	spin_unlock_irqrestore(&adev->irq.lock, flags);
 }
 
 /**
@@ -163,14 +179,17 @@ void amdgpu_irq_disable_all(struct amdgp
  */
 static irqreturn_t amdgpu_irq_handler(int irq, void *arg)
 {
-	struct drm_device *dev = (struct drm_device *) arg;
-	struct amdgpu_device *adev = drm_to_adev(dev);
+	struct amdgpu_device *adev = drm_to_adev(arg);
 	irqreturn_t ret;
 
 	ret = amdgpu_ih_process(adev, &adev->irq.ih);
-	if (ret == IRQ_HANDLED)
-		pm_runtime_mark_last_busy(dev->dev);
 
+	if (likely(ret == IRQ_HANDLED))
+		pm_runtime_mark_last_busy(adev->dev);
+	else if (unlikely(ret != IRQ_NONE))
+		DRM_ERROR("amdgpu: ih_process returned %d\n", ret);
+
+	/* Cheaper to call unconditionally than branch on ras_enabled      */
 	amdgpu_ras_interrupt_fatal_error_handler(adev);
 
 	return ret;
@@ -207,21 +226,6 @@ static void amdgpu_irq_handle_ih2(struct
 }
 
 /**
- * amdgpu_irq_handle_ih_soft - kick of processing for ih_soft
- *
- * @work: work structure in struct amdgpu_irq
- *
- * Kick of processing IH soft ring.
- */
-static void amdgpu_irq_handle_ih_soft(struct work_struct *work)
-{
-	struct amdgpu_device *adev = container_of(work, struct amdgpu_device,
-						  irq.ih_soft_work);
-
-	amdgpu_ih_process(adev, &adev->irq.ih_soft);
-}
-
-/**
  * amdgpu_msi_ok - check whether MSI functionality is enabled
  *
  * @adev: amdgpu device pointer (unused)
@@ -273,55 +277,64 @@ int amdgpu_irq_init(struct amdgpu_device
 	unsigned int irq, flags;
 	int r;
 
+	/* ---------------- generic setup ---------------- */
 	spin_lock_init(&adev->irq.lock);
 
-	/* Enable MSI if not disabled by module parameter */
 	adev->irq.msi_enabled = false;
+	flags = amdgpu_msi_ok(adev) ? PCI_IRQ_ALL_TYPES : PCI_IRQ_INTX;
 
-	if (!amdgpu_msi_ok(adev))
-		flags = PCI_IRQ_INTX;
-	else
-		flags = PCI_IRQ_ALL_TYPES;
-
-	/* we only need one vector */
 	r = pci_alloc_irq_vectors(adev->pdev, 1, 1, flags);
 	if (r < 0) {
-		dev_err(adev->dev, "Failed to alloc msi vectors\n");
+		dev_err(adev->dev, "failed to allocate IRQ vector\n");
 		return r;
 	}
 
 	if (amdgpu_msi_ok(adev)) {
 		adev->irq.msi_enabled = true;
-		dev_dbg(adev->dev, "using MSI/MSI-X.\n");
+		dev_dbg(adev->dev, "using MSI/MSI-X\n");
 	}
 
+	/* IH1 / IH2 still use workqueues */
 	INIT_WORK(&adev->irq.ih1_work, amdgpu_irq_handle_ih1);
 	INIT_WORK(&adev->irq.ih2_work, amdgpu_irq_handle_ih2);
-	INIT_WORK(&adev->irq.ih_soft_work, amdgpu_irq_handle_ih_soft);
 
-	/* Use vector 0 for MSI-X. */
-	r = pci_irq_vector(adev->pdev, 0);
+	/* fast bottom-half for the software IH ring (irq_work) */
+	init_irq_work(&adev->irq.ih_soft_iw, amdgpu_irq_handle_ih_soft_iw);
+
+	/* ---------------- vector & handler ---------------- */
+	r = pci_irq_vector(adev->pdev, 0);	/* use vector 0 */
 	if (r < 0)
 		goto free_vectors;
 	irq = r;
 
-	/* PCI devices require shared interrupts. */
-	r = request_irq(irq, amdgpu_irq_handler, IRQF_SHARED, adev_to_drm(adev)->driver->name,
-			adev_to_drm(adev));
+	r = request_irq(irq, amdgpu_irq_handler, IRQF_SHARED,
+					adev_to_drm(adev)->driver->name,
+					adev_to_drm(adev));
 	if (r)
 		goto free_vectors;
 
-	adev->irq.installed = true;
-	adev->irq.irq = irq;
+	/* ---------------- locality hint ------------------ */
+	#ifdef CONFIG_GENERIC_IRQ_MIGRATION
+	{
+		int node = dev_to_node(&adev->pdev->dev);
+		const struct cpumask *mask = (node >= 0) ?
+		cpumask_of_node(node) :
+		cpu_online_mask;
+
+		irq_set_affinity_hint(irq, mask);
+	}
+	#endif
+
+	adev->irq.installed            = true;
+	adev->irq.irq                  = irq;
 	adev_to_drm(adev)->max_vblank_count = 0x00ffffff;
 
-	DRM_DEBUG("amdgpu: irq initialized.\n");
+	DRM_DEBUG("amdgpu: IRQ initialised\n");
 	return 0;
 
-free_vectors:
+	free_vectors:
 	if (adev->irq.msi_enabled)
 		pci_free_irq_vectors(adev->pdev);
-
 	adev->irq.msi_enabled = false;
 	return r;
 }
@@ -330,7 +343,13 @@ void amdgpu_irq_fini_hw(struct amdgpu_de
 {
 	if (adev->irq.installed) {
 		free_irq(adev->irq.irq, adev_to_drm(adev));
+
+		#ifdef CONFIG_GENERIC_IRQ_MIGRATION
+		irq_set_affinity_hint(adev->irq.irq, NULL);
+		#endif
+
 		adev->irq.installed = false;
+
 		if (adev->irq.msi_enabled)
 			pci_free_irq_vectors(adev->pdev);
 	}
@@ -434,63 +453,65 @@ int amdgpu_irq_add_id(struct amdgpu_devi
  * Dispatches IRQ to IP blocks.
  */
 void amdgpu_irq_dispatch(struct amdgpu_device *adev,
-			 struct amdgpu_ih_ring *ih)
+						 struct amdgpu_ih_ring *ih)
 {
-	u32 ring_index = ih->rptr >> 2;
-	struct amdgpu_iv_entry entry;
-	unsigned int client_id, src_id;
-	struct amdgpu_irq_src *src;
-	bool handled = false;
-	int r;
+	u32 ring_idx = ih->rptr >> 2;
 
-	entry.ih = ih;
-	entry.iv_entry = (const uint32_t *)&ih->ring[ring_index];
-
-	/*
-	 * timestamp is not supported on some legacy SOCs (cik, cz, iceland,
-	 * si and tonga), so initialize timestamp and timestamp_src to 0
-	 */
-	entry.timestamp = 0;
-	entry.timestamp_src = 0;
+	/* keep volatile to satisfy the type system */
+	const volatile u32 *iv_raw = &ih->ring[ring_idx];
+	const        u32  *iv_ptr = (const u32 *)iv_raw;
+
+	/* prefetch expects ‘const void *’; cast away volatile explicitly */
+	prefetch((const void *)iv_raw);
+
+	struct amdgpu_iv_entry entry = {
+		.ih            = ih,
+		.iv_entry      = iv_ptr,
+		.timestamp     = 0,
+		.timestamp_src = 0,
+	};
+	struct amdgpu_irq_src       *src;
+	bool                          handled = false;
+	unsigned int                  cid, sid;
+	int                           r;
 
 	amdgpu_ih_decode_iv(adev, &entry);
-
 	trace_amdgpu_iv(ih - &adev->irq.ih, &entry);
 
-	client_id = entry.client_id;
-	src_id = entry.src_id;
+	cid = entry.client_id;
+	sid = entry.src_id;
 
-	if (client_id >= AMDGPU_IRQ_CLIENTID_MAX) {
-		DRM_DEBUG("Invalid client_id in IV: %d\n", client_id);
-
-	} else	if (src_id >= AMDGPU_MAX_IRQ_SRC_ID) {
-		DRM_DEBUG("Invalid src_id in IV: %d\n", src_id);
+	/* -------- fast sanity checks --------------------------------- */
+	if (cid >= AMDGPU_IRQ_CLIENTID_MAX || sid >= AMDGPU_MAX_IRQ_SRC_ID)
+		goto unhandled;
+
+	if ((cid == AMDGPU_IRQ_CLIENTID_LEGACY ||
+		cid == SOC15_IH_CLIENTID_ISP) &&
+		unlikely(adev->irq.virq[sid])) {
+		generic_handle_domain_irq(adev->irq.domain, sid);
+	handled = true;
+	goto record_ts;
+		}
 
-	} else if (((client_id == AMDGPU_IRQ_CLIENTID_LEGACY) ||
-		    (client_id == SOC15_IH_CLIENTID_ISP)) &&
-		   adev->irq.virq[src_id]) {
-		generic_handle_domain_irq(adev->irq.domain, src_id);
-
-	} else if (!adev->irq.client[client_id].sources) {
-		DRM_DEBUG("Unregistered interrupt client_id: %d src_id: %d\n",
-			  client_id, src_id);
+		struct amdgpu_irq_client *client = &adev->irq.client[cid];
+		if (likely(client->sources &&
+			(src = client->sources[sid]))) {
 
-	} else if ((src = adev->irq.client[client_id].sources[src_id])) {
-		r = src->funcs->process(adev, src, &entry);
+			r = src->funcs->process(adev, src, &entry);
 		if (r < 0)
-			DRM_ERROR("error processing interrupt (%d)\n", r);
-		else if (r)
-			handled = true;
-
-	} else {
-		DRM_DEBUG("Unregistered interrupt src_id: %d of client_id:%d\n",
-			src_id, client_id);
-	}
+			DRM_ERROR("amdgpu: error %d processing IRQ %u/%u\n",
+					  r, cid, sid);
+			else if (r)
+				handled = true;
+			} else {
+				DRM_DEBUG("Unregistered IRQ cid:%u sid:%u\n", cid, sid);
+			}
 
-	/* Send it to amdkfd as well if it isn't already handled */
-	if (!handled)
-		amdgpu_amdkfd_interrupt(adev, entry.iv_entry);
+			unhandled:
+			if (!handled)
+				amdgpu_amdkfd_interrupt(adev, iv_ptr);
 
+	record_ts:
 	if (amdgpu_ih_ts_after(ih->processed_timestamp, entry.timestamp))
 		ih->processed_timestamp = entry.timestamp;
 }
@@ -506,11 +527,15 @@ void amdgpu_irq_dispatch(struct amdgpu_d
  * if the hardware delegation to IH1 or IH2 doesn't work for some reason.
  */
 void amdgpu_irq_delegate(struct amdgpu_device *adev,
-			 struct amdgpu_iv_entry *entry,
-			 unsigned int num_dw)
+						 struct amdgpu_iv_entry *entry,
+						 unsigned int num_dw)
 {
-	amdgpu_ih_ring_write(adev, &adev->irq.ih_soft, entry->iv_entry, num_dw);
-	schedule_work(&adev->irq.ih_soft_work);
+	/* copy IV into the software ring */
+	amdgpu_ih_ring_write(adev, &adev->irq.ih_soft,
+						 entry->iv_entry, num_dw);
+
+	/* queue bottom-half that lives inside ih_soft                      */
+	irq_work_queue(&adev->irq.ih_soft_iw);
 }
 
 /**
@@ -574,95 +599,60 @@ void amdgpu_irq_gpu_reset_resume_helper(
 	}
 }
 
-/**
- * amdgpu_irq_get - enable interrupt
- *
- * @adev: amdgpu device pointer
- * @src: interrupt source pointer
- * @type: type of interrupt
- *
- * Enables specified type of interrupt on the specified source (all ASICs).
- *
- * Returns:
- * 0 on success or error code otherwise
- */
-int amdgpu_irq_get(struct amdgpu_device *adev, struct amdgpu_irq_src *src,
-		   unsigned int type)
+static inline bool irq_ref_inc(struct amdgpu_irq_src *src, unsigned int t)
 {
-	if (!adev->irq.installed)
-		return -ENOENT;
+	/* full barrier via atomic op; returns true if counter became 1   */
+	return atomic_add_return(1, &src->enabled_types[t]) == 1;
+}
 
-	if (type >= src->num_types)
-		return -EINVAL;
+static inline bool irq_ref_dec(struct amdgpu_irq_src *src, unsigned int t)
+{
+	/* full barrier; true if it just reached 0                         */
+	return atomic_sub_and_test(1, &src->enabled_types[t]);
+}
 
-	if (!src->enabled_types || !src->funcs->set)
+int amdgpu_irq_get(struct amdgpu_device *adev,
+				   struct amdgpu_irq_src *src, unsigned int type)
+{
+	if (unlikely(!adev->irq.installed))
+		return -ENOENT;
+	if (type >= src->num_types || !src->enabled_types || !src->funcs->set)
 		return -EINVAL;
 
-	if (atomic_inc_return(&src->enabled_types[type]) == 1)
-		return amdgpu_irq_update(adev, src, type);
+	/* Fast path: already enabled → nothing to do                      */
+	if (!irq_ref_inc(src, type))
+		return 0;
 
-	return 0;
+	/* First user – program hardware (rare)                            */
+	return unlikely(amdgpu_irq_update(adev, src, type));
 }
 
-/**
- * amdgpu_irq_put - disable interrupt
- *
- * @adev: amdgpu device pointer
- * @src: interrupt source pointer
- * @type: type of interrupt
- *
- * Enables specified type of interrupt on the specified source (all ASICs).
- *
- * Returns:
- * 0 on success or error code otherwise
- */
-int amdgpu_irq_put(struct amdgpu_device *adev, struct amdgpu_irq_src *src,
-		   unsigned int type)
+int amdgpu_irq_put(struct amdgpu_device *adev,
+				   struct amdgpu_irq_src *src, unsigned int type)
 {
-	if (!adev->irq.installed)
+	if (unlikely(!adev->irq.installed))
 		return -ENOENT;
-
-	if (type >= src->num_types)
+	if (type >= src->num_types || !src->enabled_types || !src->funcs->set)
 		return -EINVAL;
-
-	if (!src->enabled_types || !src->funcs->set)
-		return -EINVAL;
-
 	if (WARN_ON(!amdgpu_irq_enabled(adev, src, type)))
 		return -EINVAL;
 
-	if (atomic_dec_and_test(&src->enabled_types[type]))
-		return amdgpu_irq_update(adev, src, type);
+	/* Fast path: more users remain                                     */
+	if (!irq_ref_dec(src, type))
+		return 0;
 
-	return 0;
+	/* Counter hit zero – disable in hardware (rare)                    */
+	return unlikely(amdgpu_irq_update(adev, src, type));
 }
 
-/**
- * amdgpu_irq_enabled - check whether interrupt is enabled or not
- *
- * @adev: amdgpu device pointer
- * @src: interrupt source pointer
- * @type: type of interrupt
- *
- * Checks whether the given type of interrupt is enabled on the given source.
- *
- * Returns:
- * *true* if interrupt is enabled, *false* if interrupt is disabled or on
- * invalid parameters
- */
-bool amdgpu_irq_enabled(struct amdgpu_device *adev, struct amdgpu_irq_src *src,
-			unsigned int type)
+bool amdgpu_irq_enabled(struct amdgpu_device *adev,
+						struct amdgpu_irq_src *src, unsigned int type)
 {
-	if (!adev->irq.installed)
-		return false;
-
-	if (type >= src->num_types)
-		return false;
-
-	if (!src->enabled_types || !src->funcs->set)
+	if (!adev->irq.installed || type >= src->num_types || !src->enabled_types)
 		return false;
 
-	return !!atomic_read(&src->enabled_types[type]);
+	/* atomic_read() is already a single-copy atomic load on x86/arm64 */
+	return atomic_read(&src->enabled_types[type]) != 0;
 }
 
 /* XXX: Generic IRQ handling */


--- a/drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c	2025-04-10 14:44:49.000000000 +0200
+++ b/drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c	2025-04-19 23:06:54.825287367 +0200
@@ -643,90 +643,65 @@ static int sdma_v4_0_init_microcode(stru
 	return ret;
 }
 
-/**
- * sdma_v4_0_ring_get_rptr - get the current read pointer
- *
- * @ring: amdgpu ring pointer
- *
- * Get the current rptr from the hardware (VEGA10+).
- */
+/* ------------------------------------------------------------------ */
+/* read pointer helper                                                */
+/* ------------------------------------------------------------------ */
 static uint64_t sdma_v4_0_ring_get_rptr(struct amdgpu_ring *ring)
 {
-	u64 *rptr;
+	u64 *rptr = (u64 *)ring->rptr_cpu_addr;	/* little‑endian on Vega */
 
-	/* XXX check if swapping is necessary on BE */
-	rptr = ((u64 *)ring->rptr_cpu_addr);
+	if (drm_debug_enabled(DRM_UT_DRIVER))
+		DRM_DEBUG("SDMA%u rptr raw 0x%016llx\n", ring->me, *rptr);
 
-	DRM_DEBUG("rptr before shift == 0x%016llx\n", *rptr);
-	return ((*rptr) >> 2);
+	return *rptr >> 2;			/* convert to DWORD index */
 }
 
-/**
- * sdma_v4_0_ring_get_wptr - get the current write pointer
- *
- * @ring: amdgpu ring pointer
- *
- * Get the current wptr from the hardware (VEGA10+).
- */
+/* ------------------------------------------------------------------ */
+/* write pointer read helper                                          */
+/* ------------------------------------------------------------------ */
 static uint64_t sdma_v4_0_ring_get_wptr(struct amdgpu_ring *ring)
 {
 	struct amdgpu_device *adev = ring->adev;
 	u64 wptr;
 
 	if (ring->use_doorbell) {
-		/* XXX check if swapping is necessary on BE */
 		wptr = READ_ONCE(*((u64 *)ring->wptr_cpu_addr));
-		DRM_DEBUG("wptr/doorbell before shift == 0x%016llx\n", wptr);
+		if (drm_debug_enabled(DRM_UT_DRIVER))
+			DRM_DEBUG("SDMA%u wptr doorbell raw 0x%016llx\n",
+					  ring->me, wptr);
 	} else {
-		wptr = RREG32_SDMA(ring->me, mmSDMA0_GFX_RB_WPTR_HI);
-		wptr = wptr << 32;
-		wptr |= RREG32_SDMA(ring->me, mmSDMA0_GFX_RB_WPTR);
-		DRM_DEBUG("wptr before shift [%i] wptr == 0x%016llx\n",
-				ring->me, wptr);
+		wptr  = (u64)RREG32_SDMA(ring->me,
+								 mmSDMA0_GFX_RB_WPTR_HI) << 32;
+								 wptr |= RREG32_SDMA(ring->me, mmSDMA0_GFX_RB_WPTR);
+								 if (drm_debug_enabled(DRM_UT_DRIVER))
+									 DRM_DEBUG("SDMA%u wptr mmio raw 0x%016llx\n",
+											   ring->me, wptr);
 	}
 
-	return wptr >> 2;
+	return wptr >> 2;			/* to DWORDs */
 }
 
-/**
- * sdma_v4_0_ring_set_wptr - commit the write pointer
- *
- * @ring: amdgpu ring pointer
- *
- * Write the wptr back to the hardware (VEGA10+).
- */
+/* ------------------------------------------------------------------ */
+/* write pointer commit helper                                        */
+/* ------------------------------------------------------------------ */
 static void sdma_v4_0_ring_set_wptr(struct amdgpu_ring *ring)
 {
 	struct amdgpu_device *adev = ring->adev;
+	u64 wptr_dw = ring->wptr;		/* already DWORD aligned */
+
+	if (drm_debug_enabled(DRM_UT_DRIVER))
+		DRM_DEBUG("SDMA%u set wptr %llu (DW)\n", ring->me, wptr_dw);
 
-	DRM_DEBUG("Setting write pointer\n");
 	if (ring->use_doorbell) {
 		u64 *wb = (u64 *)ring->wptr_cpu_addr;
 
-		DRM_DEBUG("Using doorbell -- "
-				"wptr_offs == 0x%08x "
-				"lower_32_bits(ring->wptr << 2) == 0x%08x "
-				"upper_32_bits(ring->wptr << 2) == 0x%08x\n",
-				ring->wptr_offs,
-				lower_32_bits(ring->wptr << 2),
-				upper_32_bits(ring->wptr << 2));
-		/* XXX check if swapping is necessary on BE */
-		WRITE_ONCE(*wb, (ring->wptr << 2));
-		DRM_DEBUG("calling WDOORBELL64(0x%08x, 0x%016llx)\n",
-				ring->doorbell_index, ring->wptr << 2);
-		WDOORBELL64(ring->doorbell_index, ring->wptr << 2);
+		WRITE_ONCE(*wb, wptr_dw << 2);	/* bytes */
+		WDOORBELL64(ring->doorbell_index, wptr_dw << 2);
 	} else {
-		DRM_DEBUG("Not using doorbell -- "
-				"mmSDMA%i_GFX_RB_WPTR == 0x%08x "
-				"mmSDMA%i_GFX_RB_WPTR_HI == 0x%08x\n",
-				ring->me,
-				lower_32_bits(ring->wptr << 2),
-				ring->me,
-				upper_32_bits(ring->wptr << 2));
 		WREG32_SDMA(ring->me, mmSDMA0_GFX_RB_WPTR,
-			    lower_32_bits(ring->wptr << 2));
+					lower_32_bits(wptr_dw << 2));
 		WREG32_SDMA(ring->me, mmSDMA0_GFX_RB_WPTR_HI,
-			    upper_32_bits(ring->wptr << 2));
+					upper_32_bits(wptr_dw << 2));
 	}
 }
 
@@ -781,17 +756,20 @@ static void sdma_v4_0_page_ring_set_wptr
 	}
 }
 
-static void sdma_v4_0_ring_insert_nop(struct amdgpu_ring *ring, uint32_t count)
+static void sdma_v4_0_ring_insert_nop(struct amdgpu_ring *ring,
+									  uint32_t count)
 {
-	struct amdgpu_sdma_instance *sdma = amdgpu_sdma_get_instance_from_ring(ring);
-	int i;
+	struct amdgpu_sdma_instance *sdma =
+	amdgpu_sdma_get_instance_from_ring(ring);
+	uint32_t i;
 
-	for (i = 0; i < count; i++)
-		if (sdma && sdma->burst_nop && (i == 0))
+	for (i = 0; i < count; i++) {
+		if (sdma && sdma->burst_nop && i == 0)
 			amdgpu_ring_write(ring, ring->funcs->nop |
-				SDMA_PKT_NOP_HEADER_COUNT(count - 1));
+			SDMA_PKT_NOP_HEADER_COUNT(count - 1));
 		else
 			amdgpu_ring_write(ring, ring->funcs->nop);
+	}
 }
 
 /**
@@ -1659,30 +1637,26 @@ static void sdma_v4_0_vm_set_pte_pde(str
 	ib->ptr[ib->length_dw++] = count - 1; /* number of entries */
 }
 
-/**
- * sdma_v4_0_ring_pad_ib - pad the IB to the required number of dw
- *
- * @ring: amdgpu_ring structure holding ring information
- * @ib: indirect buffer to fill with padding
- */
-static void sdma_v4_0_ring_pad_ib(struct amdgpu_ring *ring, struct amdgpu_ib *ib)
+static void sdma_v4_0_ring_pad_ib(struct amdgpu_ring *ring,
+								  struct amdgpu_ib *ib)
 {
-	struct amdgpu_sdma_instance *sdma = amdgpu_sdma_get_instance_from_ring(ring);
-	u32 pad_count;
-	int i;
+	struct amdgpu_sdma_instance *sdma =
+	amdgpu_sdma_get_instance_from_ring(ring);
+	u32 pad_count, i;
+
+	pad_count = (-ib->length_dw) & 7;	/* align to 8 DW */
 
-	pad_count = (-ib->length_dw) & 7;
-	for (i = 0; i < pad_count; i++)
-		if (sdma && sdma->burst_nop && (i == 0))
+	for (i = 0; i < pad_count; i++) {
+		if (sdma && sdma->burst_nop && i == 0)
 			ib->ptr[ib->length_dw++] =
-				SDMA_PKT_HEADER_OP(SDMA_OP_NOP) |
-				SDMA_PKT_NOP_HEADER_COUNT(pad_count - 1);
+			SDMA_PKT_HEADER_OP(SDMA_OP_NOP) |
+			SDMA_PKT_NOP_HEADER_COUNT(pad_count - 1);
 		else
 			ib->ptr[ib->length_dw++] =
-				SDMA_PKT_HEADER_OP(SDMA_OP_NOP);
+			SDMA_PKT_HEADER_OP(SDMA_OP_NOP);
+	}
 }
 
-
 /**
  * sdma_v4_0_ring_emit_pipeline_sync - sync the pipeline
  *
@@ -2599,12 +2573,12 @@ static void sdma_v4_0_emit_fill_buffer(s
 }
 
 static const struct amdgpu_buffer_funcs sdma_v4_0_buffer_funcs = {
-	.copy_max_bytes = 0x400000,
-	.copy_num_dw = 7,
+	.copy_max_bytes = 0x400000,		/* 4 MiB */
+	.copy_num_dw    = 7,
 	.emit_copy_buffer = sdma_v4_0_emit_copy_buffer,
 
-	.fill_max_bytes = 0x400000,
-	.fill_num_dw = 5,
+	.fill_max_bytes = 0x400000,		/* 4 MiB */
+	.fill_num_dw    = 5,
 	.emit_fill_buffer = sdma_v4_0_emit_fill_buffer,
 };
 

 
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_sdma.c	2025-04-10 14:44:49.000000000 +0200
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_sdma.c	2025-04-19 22:43:23.904999601 +0200
@@ -30,37 +30,54 @@
 /* SDMA CSA reside in the 3rd page of CSA */
 #define AMDGPU_CSA_SDMA_OFFSET (4096 * 2)
 
-/*
- * GPU SDMA IP block helpers function.
- */
-
-struct amdgpu_sdma_instance *amdgpu_sdma_get_instance_from_ring(struct amdgpu_ring *ring)
+/* ------------------------------------------------------------------ */
+/* Fast helpers: use ring->idx instead of a linear scan                */
+/* ------------------------------------------------------------------ */
+struct amdgpu_sdma_instance *
+amdgpu_sdma_get_instance_from_ring(struct amdgpu_ring *ring)
 {
 	struct amdgpu_device *adev = ring->adev;
-	int i;
+	u32 idx = ring->idx;
 
-	for (i = 0; i < adev->sdma.num_instances; i++)
-		if (ring == &adev->sdma.instance[i].ring ||
-		    ring == &adev->sdma.instance[i].page)
-			return &adev->sdma.instance[i];
+	/* O(1) fast path */
+	if (idx < adev->sdma.num_instances &&
+		(ring == &adev->sdma.instance[idx].ring ||
+		ring == &adev->sdma.instance[idx].page))
+		return &adev->sdma.instance[idx];
+
+	/* Fallback – keep legacy behaviour */
+	for (idx = 0; idx < adev->sdma.num_instances; idx++) {
+		if (ring == &adev->sdma.instance[idx].ring ||
+			ring == &adev->sdma.instance[idx].page)
+			return &adev->sdma.instance[idx];
+	}
 
 	return NULL;
 }
 
-int amdgpu_sdma_get_index_from_ring(struct amdgpu_ring *ring, uint32_t *index)
+int amdgpu_sdma_get_index_from_ring(struct amdgpu_ring *ring, u32 *index)
 {
 	struct amdgpu_device *adev = ring->adev;
-	int i;
+	u32 idx = ring->idx;
 
-	for (i = 0; i < adev->sdma.num_instances; i++) {
-		if (ring == &adev->sdma.instance[i].ring ||
-			ring == &adev->sdma.instance[i].page) {
-			*index = i;
+	/* Fast path */
+	if (idx < adev->sdma.num_instances &&
+		(ring == &adev->sdma.instance[idx].ring ||
+		ring == &adev->sdma.instance[idx].page)) {
+		*index = idx;
+	return 0;
+		}
+
+		/* Fallback keeps behaviour identical to the old code */
+		for (idx = 0; idx < adev->sdma.num_instances; idx++) {
+			if (ring == &adev->sdma.instance[idx].ring ||
+				ring == &adev->sdma.instance[idx].page) {
+				*index = idx;
 			return 0;
+				}
 		}
-	}
 
-	return -EINVAL;
+		return -EINVAL;
 }
 
 uint64_t amdgpu_sdma_get_csa_mc_addr(struct amdgpu_ring *ring,


--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_gfx.c	2025-04-10 14:44:49.000000000 +0200
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_gfx.c	2025-04-18 16:58:52.885186023 +0200
@@ -139,25 +139,24 @@ void amdgpu_gfx_parse_disable_cu(unsigne
 	}
 }
 
-static bool amdgpu_gfx_is_graphics_multipipe_capable(struct amdgpu_device *adev)
+/* Hot predicates – replace the originals */
+static __always_inline bool
+amdgpu_gfx_is_graphics_multipipe_capable(struct amdgpu_device *adev)
 {
-	return amdgpu_async_gfx_ring && adev->gfx.me.num_pipe_per_me > 1;
+	return amdgpu_async_gfx_ring &&
+	adev->gfx.me.num_pipe_per_me > 1;
 }
 
-static bool amdgpu_gfx_is_compute_multipipe_capable(struct amdgpu_device *adev)
+static __always_inline bool
+amdgpu_gfx_is_compute_multipipe_capable(struct amdgpu_device *adev)
 {
-	if (amdgpu_compute_multipipe != -1) {
-		DRM_INFO("amdgpu: forcing compute pipe policy %d\n",
-			 amdgpu_compute_multipipe);
+	if (amdgpu_compute_multipipe != -1)
 		return amdgpu_compute_multipipe == 1;
-	}
 
 	if (amdgpu_ip_version(adev, GC_HWIP, 0) > IP_VERSION(9, 0, 0))
 		return true;
 
-	/* FIXME: spreading the queues across pipes causes perf regressions
-	 * on POLARIS11 compute workloads */
-	if (adev->asic_type == CHIP_POLARIS11)
+	if (unlikely(adev->asic_type == CHIP_POLARIS11))
 		return false;
 
 	return adev->gfx.mec.num_mec > 1;
@@ -1163,8 +1162,10 @@ int amdgpu_gfx_get_num_kcq(struct amdgpu
 {
 	if (amdgpu_num_kcq == -1) {
 		return 8;
-	} else if (amdgpu_num_kcq > 8 || amdgpu_num_kcq < 0) {
-		dev_warn(adev->dev, "set kernel compute queue number to 8 due to invalid parameter provided by user\n");
+	} if (amdgpu_num_kcq == -1 || amdgpu_num_kcq <= 0 || amdgpu_num_kcq > 8) {
+		dev_warn(adev->dev,
+				 "Invalid amdgpu_num_kcq=%d, clamping to 8\n",
+		   amdgpu_num_kcq);
 		return 8;
 	}
 	return amdgpu_num_kcq;


--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_vm.h	2025-04-10 14:44:49.000000000 +0200
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_vm.h	2025-04-12 17:27:40.094502930 +0200
@@ -35,7 +35,7 @@
 #include "amdgpu_sync.h"
 #include "amdgpu_ring.h"
 #include "amdgpu_ids.h"
-#include "amdgpu_ttm.h"
+#include "amdgpu_ttm.h" // Provides __AMDGPU_PL_NUM
 
 struct drm_exec;
 
@@ -88,45 +88,45 @@ struct amdgpu_bo_vm;
 
 /* Flag combination to set no-retry with TF disabled */
 #define AMDGPU_VM_NORETRY_FLAGS	(AMDGPU_PTE_EXECUTABLE | AMDGPU_PDE_PTE | \
-				AMDGPU_PTE_TF)
+AMDGPU_PTE_TF)
 
 /* Flag combination to set no-retry with TF enabled */
 #define AMDGPU_VM_NORETRY_FLAGS_TF (AMDGPU_PTE_VALID | AMDGPU_PTE_SYSTEM | \
-				   AMDGPU_PTE_PRT)
+AMDGPU_PTE_PRT)
 /* For GFX9 */
 #define AMDGPU_PTE_MTYPE_VG10_SHIFT(mtype)	((uint64_t)(mtype) << 57)
 #define AMDGPU_PTE_MTYPE_VG10_MASK	AMDGPU_PTE_MTYPE_VG10_SHIFT(3ULL)
 #define AMDGPU_PTE_MTYPE_VG10(flags, mtype)			\
-	(((uint64_t)(flags) & (~AMDGPU_PTE_MTYPE_VG10_MASK)) |	\
-	  AMDGPU_PTE_MTYPE_VG10_SHIFT(mtype))
+(((uint64_t)(flags) & (~AMDGPU_PTE_MTYPE_VG10_MASK)) |	\
+AMDGPU_PTE_MTYPE_VG10_SHIFT(mtype))
 
 #define AMDGPU_MTYPE_NC 0
 #define AMDGPU_MTYPE_CC 2
 
 #define AMDGPU_PTE_DEFAULT_ATC  (AMDGPU_PTE_SYSTEM      \
-                                | AMDGPU_PTE_SNOOPED    \
-                                | AMDGPU_PTE_EXECUTABLE \
-                                | AMDGPU_PTE_READABLE   \
-                                | AMDGPU_PTE_WRITEABLE  \
-                                | AMDGPU_PTE_MTYPE_VG10(AMDGPU_MTYPE_CC))
+| AMDGPU_PTE_SNOOPED    \
+| AMDGPU_PTE_EXECUTABLE \
+| AMDGPU_PTE_READABLE   \
+| AMDGPU_PTE_WRITEABLE  \
+| AMDGPU_PTE_MTYPE_VG10(AMDGPU_MTYPE_CC))
 
 /* gfx10 */
 #define AMDGPU_PTE_MTYPE_NV10_SHIFT(mtype)	((uint64_t)(mtype) << 48)
 #define AMDGPU_PTE_MTYPE_NV10_MASK     AMDGPU_PTE_MTYPE_NV10_SHIFT(7ULL)
 #define AMDGPU_PTE_MTYPE_NV10(flags, mtype)			\
-	(((uint64_t)(flags) & (~AMDGPU_PTE_MTYPE_NV10_MASK)) |	\
-	  AMDGPU_PTE_MTYPE_NV10_SHIFT(mtype))
+(((uint64_t)(flags) & (~AMDGPU_PTE_MTYPE_NV10_MASK)) |	\
+AMDGPU_PTE_MTYPE_NV10_SHIFT(mtype))
 
 /* gfx12 */
 #define AMDGPU_PTE_PRT_GFX12		(1ULL << 56)
 #define AMDGPU_PTE_PRT_FLAG(adev)	\
-	((amdgpu_ip_version((adev), GC_HWIP, 0) >= IP_VERSION(12, 0, 0)) ? AMDGPU_PTE_PRT_GFX12 : AMDGPU_PTE_PRT)
+((amdgpu_ip_version((adev), GC_HWIP, 0) >= IP_VERSION(12, 0, 0)) ? AMDGPU_PTE_PRT_GFX12 : AMDGPU_PTE_PRT)
 
 #define AMDGPU_PTE_MTYPE_GFX12_SHIFT(mtype)	((uint64_t)(mtype) << 54)
 #define AMDGPU_PTE_MTYPE_GFX12_MASK	AMDGPU_PTE_MTYPE_GFX12_SHIFT(3ULL)
 #define AMDGPU_PTE_MTYPE_GFX12(flags, mtype)				\
-	(((uint64_t)(flags) & (~AMDGPU_PTE_MTYPE_GFX12_MASK)) |	\
-	  AMDGPU_PTE_MTYPE_GFX12_SHIFT(mtype))
+(((uint64_t)(flags) & (~AMDGPU_PTE_MTYPE_GFX12_MASK)) |	\
+AMDGPU_PTE_MTYPE_GFX12_SHIFT(mtype))
 
 #define AMDGPU_PTE_DCC			(1ULL << 58)
 #define AMDGPU_PTE_IS_PTE		(1ULL << 63)
@@ -134,11 +134,11 @@ struct amdgpu_bo_vm;
 /* PDE Block Fragment Size for gfx v12 */
 #define AMDGPU_PDE_BFS_GFX12(a)		((uint64_t)((a) & 0x1fULL) << 58)
 #define AMDGPU_PDE_BFS_FLAG(adev, a)	\
-	((amdgpu_ip_version((adev), GC_HWIP, 0) >= IP_VERSION(12, 0, 0)) ? AMDGPU_PDE_BFS_GFX12(a) : AMDGPU_PDE_BFS(a))
+((amdgpu_ip_version((adev), GC_HWIP, 0) >= IP_VERSION(12, 0, 0)) ? AMDGPU_PDE_BFS_GFX12(a) : AMDGPU_PDE_BFS(a))
 /* PDE is handled as PTE for gfx v12 */
 #define AMDGPU_PDE_PTE_GFX12		(1ULL << 63)
 #define AMDGPU_PDE_PTE_FLAG(adev)	\
-	((amdgpu_ip_version((adev), GC_HWIP, 0) >= IP_VERSION(12, 0, 0)) ? AMDGPU_PDE_PTE_GFX12 : AMDGPU_PDE_PTE)
+((amdgpu_ip_version((adev), GC_HWIP, 0) >= IP_VERSION(12, 0, 0)) ? AMDGPU_PDE_PTE_GFX12 : AMDGPU_PDE_PTE)
 
 /* How to program VM fault handling */
 #define AMDGPU_VM_FAULT_STOP_NEVER	0
@@ -167,18 +167,18 @@ struct amdgpu_bo_vm;
 /* Reserve space at top/bottom of address space for kernel use */
 #define AMDGPU_VA_RESERVED_CSA_SIZE		(2ULL << 20)
 #define AMDGPU_VA_RESERVED_CSA_START(adev)	(((adev)->vm_manager.max_pfn \
-						  << AMDGPU_GPU_PAGE_SHIFT)  \
-						 - AMDGPU_VA_RESERVED_CSA_SIZE)
+<< AMDGPU_GPU_PAGE_SHIFT)  \
+- AMDGPU_VA_RESERVED_CSA_SIZE)
 #define AMDGPU_VA_RESERVED_SEQ64_SIZE		(2ULL << 20)
 #define AMDGPU_VA_RESERVED_SEQ64_START(adev)	(AMDGPU_VA_RESERVED_CSA_START(adev) \
-						 - AMDGPU_VA_RESERVED_SEQ64_SIZE)
+- AMDGPU_VA_RESERVED_SEQ64_SIZE)
 #define AMDGPU_VA_RESERVED_TRAP_SIZE		(2ULL << 12)
 #define AMDGPU_VA_RESERVED_TRAP_START(adev)	(AMDGPU_VA_RESERVED_SEQ64_START(adev) \
-						 - AMDGPU_VA_RESERVED_TRAP_SIZE)
+- AMDGPU_VA_RESERVED_TRAP_SIZE)
 #define AMDGPU_VA_RESERVED_BOTTOM		(1ULL << 16)
 #define AMDGPU_VA_RESERVED_TOP			(AMDGPU_VA_RESERVED_TRAP_SIZE + \
-						 AMDGPU_VA_RESERVED_SEQ64_SIZE + \
-						 AMDGPU_VA_RESERVED_CSA_SIZE)
+AMDGPU_VA_RESERVED_SEQ64_SIZE + \
+AMDGPU_VA_RESERVED_CSA_SIZE)
 
 /* See vm_update_mode */
 #define AMDGPU_VM_USE_CPU_FOR_GFX (1 << 0)
@@ -212,6 +212,12 @@ struct amdgpu_vm_bo_base {
 
 	/* protected by the BO being reserved */
 	bool				moved;
+
+	/* The memory type used for the last stats increment.
+	 * Protected by vm status_lock. Used to ensure decrement matches.
+	 * Initialized to __AMDGPU_PL_NUM (invalid).
+	 */
+	uint32_t			last_stat_memtype;
 };
 
 /* provided by hw blocks that can write ptes, e.g., sdma */
@@ -221,18 +227,18 @@ struct amdgpu_vm_pte_funcs {
 
 	/* copy pte entries from GART */
 	void (*copy_pte)(struct amdgpu_ib *ib,
-			 uint64_t pe, uint64_t src,
-			 unsigned count);
+					 uint64_t pe, uint64_t src,
+				  unsigned count);
 
 	/* write pte one entry at a time with addr mapping */
 	void (*write_pte)(struct amdgpu_ib *ib, uint64_t pe,
-			  uint64_t value, unsigned count,
-			  uint32_t incr);
+					  uint64_t value, unsigned count,
+				   uint32_t incr);
 	/* for linear pte/pde updates without addr mapping */
 	void (*set_pte_pde)(struct amdgpu_ib *ib,
-			    uint64_t pe,
-			    uint64_t addr, unsigned count,
-			    uint32_t incr, uint64_t flags);
+						uint64_t pe,
+					 uint64_t addr, unsigned count,
+					 uint32_t incr, uint64_t flags);
 };
 
 struct amdgpu_task_info {
@@ -309,12 +315,12 @@ struct amdgpu_vm_update_params {
 struct amdgpu_vm_update_funcs {
 	int (*map_table)(struct amdgpu_bo_vm *bo);
 	int (*prepare)(struct amdgpu_vm_update_params *p,
-		       struct amdgpu_sync *sync);
+				   struct amdgpu_sync *sync);
 	int (*update)(struct amdgpu_vm_update_params *p,
-		      struct amdgpu_bo_vm *bo, uint64_t pe, uint64_t addr,
-		      unsigned count, uint32_t incr, uint64_t flags);
+				  struct amdgpu_bo_vm *bo, uint64_t pe, uint64_t addr,
+			   unsigned count, uint32_t incr, uint64_t flags);
 	int (*commit)(struct amdgpu_vm_update_params *p,
-		      struct dma_fence **fence);
+				  struct dma_fence **fence);
 };
 
 struct amdgpu_vm_fault_info {
@@ -469,6 +475,17 @@ struct amdgpu_vm_manager {
 	struct xarray				pasids;
 	/* Global registration of recent page fault information */
 	struct amdgpu_vm_fault_info	fault_info;
+
+	/* Vega 10 optimization statistics */
+	struct {
+		atomic64_t tlb_flushes_skipped;
+		atomic64_t pt_evictions_prioritized;
+		atomic64_t small_bos_vram;
+		atomic64_t large_bos_gtt;
+		atomic64_t vm_batch_splits;
+		atomic64_t mtype_cc_small;
+		atomic64_t mtype_uc_streaming;
+	} vega10_stats;
 };
 
 struct amdgpu_bo_va_mapping;
@@ -484,83 +501,84 @@ void amdgpu_vm_manager_init(struct amdgp
 void amdgpu_vm_manager_fini(struct amdgpu_device *adev);
 
 int amdgpu_vm_set_pasid(struct amdgpu_device *adev, struct amdgpu_vm *vm,
-			u32 pasid);
+						u32 pasid);
 
 long amdgpu_vm_wait_idle(struct amdgpu_vm *vm, long timeout);
 int amdgpu_vm_init(struct amdgpu_device *adev, struct amdgpu_vm *vm, int32_t xcp_id);
 int amdgpu_vm_make_compute(struct amdgpu_device *adev, struct amdgpu_vm *vm);
+void amdgpu_vm_release_compute(struct amdgpu_device *adev, struct amdgpu_vm *vm);
 void amdgpu_vm_fini(struct amdgpu_device *adev, struct amdgpu_vm *vm);
 int amdgpu_vm_lock_pd(struct amdgpu_vm *vm, struct drm_exec *exec,
-		      unsigned int num_fences);
+					  unsigned int num_fences);
 bool amdgpu_vm_ready(struct amdgpu_vm *vm);
 uint64_t amdgpu_vm_generation(struct amdgpu_device *adev, struct amdgpu_vm *vm);
 int amdgpu_vm_validate(struct amdgpu_device *adev, struct amdgpu_vm *vm,
-		       struct ww_acquire_ctx *ticket,
-		       int (*callback)(void *p, struct amdgpu_bo *bo),
-		       void *param);
+					   struct ww_acquire_ctx *ticket,
+					   int (*callback)(void *p, struct amdgpu_bo *bo),
+					   void *param);
 int amdgpu_vm_flush(struct amdgpu_ring *ring, struct amdgpu_job *job, bool need_pipe_sync);
 int amdgpu_vm_update_pdes(struct amdgpu_device *adev,
-			  struct amdgpu_vm *vm, bool immediate);
+						  struct amdgpu_vm *vm, bool immediate);
 int amdgpu_vm_clear_freed(struct amdgpu_device *adev,
-			  struct amdgpu_vm *vm,
-			  struct dma_fence **fence);
+						  struct amdgpu_vm *vm,
+						  struct dma_fence **fence);
 int amdgpu_vm_handle_moved(struct amdgpu_device *adev,
-			   struct amdgpu_vm *vm,
-			   struct ww_acquire_ctx *ticket);
+						   struct amdgpu_vm *vm,
+						   struct ww_acquire_ctx *ticket);
 int amdgpu_vm_flush_compute_tlb(struct amdgpu_device *adev,
-				struct amdgpu_vm *vm,
-				uint32_t flush_type,
-				uint32_t xcc_mask);
+								struct amdgpu_vm *vm,
+								uint32_t flush_type,
+								uint32_t xcc_mask);
 void amdgpu_vm_bo_base_init(struct amdgpu_vm_bo_base *base,
-			    struct amdgpu_vm *vm, struct amdgpu_bo *bo);
+							struct amdgpu_vm *vm, struct amdgpu_bo *bo);
 int amdgpu_vm_update_range(struct amdgpu_device *adev, struct amdgpu_vm *vm,
-			   bool immediate, bool unlocked, bool flush_tlb,
-			   bool allow_override, struct amdgpu_sync *sync,
-			   uint64_t start, uint64_t last, uint64_t flags,
-			   uint64_t offset, uint64_t vram_base,
-			   struct ttm_resource *res, dma_addr_t *pages_addr,
-			   struct dma_fence **fence);
+						   bool immediate, bool unlocked, bool flush_tlb,
+						   bool allow_override, struct amdgpu_sync *sync,
+						   uint64_t start, uint64_t last, uint64_t flags,
+						   uint64_t offset, uint64_t vram_base,
+						   struct ttm_resource *res, dma_addr_t *pages_addr,
+						   struct dma_fence **fence);
 int amdgpu_vm_bo_update(struct amdgpu_device *adev,
-			struct amdgpu_bo_va *bo_va,
-			bool clear);
+						struct amdgpu_bo_va *bo_va,
+						bool clear);
 bool amdgpu_vm_evictable(struct amdgpu_bo *bo);
 void amdgpu_vm_bo_invalidate(struct amdgpu_bo *bo, bool evicted);
 void amdgpu_vm_update_stats(struct amdgpu_vm_bo_base *base,
-			    struct ttm_resource *new_res, int sign);
+							struct ttm_resource *new_res, int sign);
 void amdgpu_vm_bo_update_shared(struct amdgpu_bo *bo);
 void amdgpu_vm_bo_move(struct amdgpu_bo *bo, struct ttm_resource *new_mem,
-		       bool evicted);
+					   bool evicted);
 uint64_t amdgpu_vm_map_gart(const dma_addr_t *pages_addr, uint64_t addr);
 struct amdgpu_bo_va *amdgpu_vm_bo_find(struct amdgpu_vm *vm,
-				       struct amdgpu_bo *bo);
+									   struct amdgpu_bo *bo);
 struct amdgpu_bo_va *amdgpu_vm_bo_add(struct amdgpu_device *adev,
-				      struct amdgpu_vm *vm,
-				      struct amdgpu_bo *bo);
+									  struct amdgpu_vm *vm,
+									  struct amdgpu_bo *bo);
 int amdgpu_vm_bo_map(struct amdgpu_device *adev,
-		     struct amdgpu_bo_va *bo_va,
-		     uint64_t addr, uint64_t offset,
-		     uint64_t size, uint64_t flags);
+					 struct amdgpu_bo_va *bo_va,
+					 uint64_t addr, uint64_t offset,
+					 uint64_t size, uint64_t flags);
 int amdgpu_vm_bo_replace_map(struct amdgpu_device *adev,
-			     struct amdgpu_bo_va *bo_va,
-			     uint64_t addr, uint64_t offset,
-			     uint64_t size, uint64_t flags);
+							 struct amdgpu_bo_va *bo_va,
+							 uint64_t addr, uint64_t offset,
+							 uint64_t size, uint64_t flags);
 int amdgpu_vm_bo_unmap(struct amdgpu_device *adev,
-		       struct amdgpu_bo_va *bo_va,
-		       uint64_t addr);
+					   struct amdgpu_bo_va *bo_va,
+					   uint64_t addr);
 int amdgpu_vm_bo_clear_mappings(struct amdgpu_device *adev,
-				struct amdgpu_vm *vm,
-				uint64_t saddr, uint64_t size);
+								struct amdgpu_vm *vm,
+								uint64_t saddr, uint64_t size);
 struct amdgpu_bo_va_mapping *amdgpu_vm_bo_lookup_mapping(struct amdgpu_vm *vm,
-							 uint64_t addr);
+														 uint64_t addr);
 void amdgpu_vm_bo_trace_cs(struct amdgpu_vm *vm, struct ww_acquire_ctx *ticket);
 void amdgpu_vm_bo_del(struct amdgpu_device *adev,
-		      struct amdgpu_bo_va *bo_va);
+					  struct amdgpu_bo_va *bo_va);
 void amdgpu_vm_adjust_size(struct amdgpu_device *adev, uint32_t min_vm_size,
-			   uint32_t fragment_size_default, unsigned max_level,
-			   unsigned max_bits);
+						   uint32_t fragment_size_default, unsigned max_level,
+						   unsigned max_bits);
 int amdgpu_vm_ioctl(struct drm_device *dev, void *data, struct drm_file *filp);
 bool amdgpu_vm_need_pipeline_sync(struct amdgpu_ring *ring,
-				  struct amdgpu_job *job);
+								  struct amdgpu_job *job);
 void amdgpu_vm_check_compute_bug(struct amdgpu_device *adev);
 
 struct amdgpu_task_info *
@@ -572,31 +590,31 @@ amdgpu_vm_get_task_info_vm(struct amdgpu
 void amdgpu_vm_put_task_info(struct amdgpu_task_info *task_info);
 
 bool amdgpu_vm_handle_fault(struct amdgpu_device *adev, u32 pasid,
-			    u32 vmid, u32 node_id, uint64_t addr, uint64_t ts,
-			    bool write_fault);
+							u32 vmid, u32 node_id, uint64_t addr, uint64_t ts,
+							bool write_fault);
 
 void amdgpu_vm_set_task_info(struct amdgpu_vm *vm);
 
 void amdgpu_vm_move_to_lru_tail(struct amdgpu_device *adev,
-				struct amdgpu_vm *vm);
+								struct amdgpu_vm *vm);
 void amdgpu_vm_get_memory(struct amdgpu_vm *vm,
-			  struct amdgpu_mem_stats stats[__AMDGPU_PL_NUM]);
+						  struct amdgpu_mem_stats stats[__AMDGPU_PL_NUM]);
 
 int amdgpu_vm_pt_clear(struct amdgpu_device *adev, struct amdgpu_vm *vm,
-		       struct amdgpu_bo_vm *vmbo, bool immediate);
+					   struct amdgpu_bo_vm *vmbo, bool immediate);
 int amdgpu_vm_pt_create(struct amdgpu_device *adev, struct amdgpu_vm *vm,
-			int level, bool immediate, struct amdgpu_bo_vm **vmbo,
-			int32_t xcp_id);
+						int level, bool immediate, struct amdgpu_bo_vm **vmbo,
+						int32_t xcp_id);
 void amdgpu_vm_pt_free_root(struct amdgpu_device *adev, struct amdgpu_vm *vm);
 
 int amdgpu_vm_pde_update(struct amdgpu_vm_update_params *params,
-			 struct amdgpu_vm_bo_base *entry);
+						 struct amdgpu_vm_bo_base *entry);
 int amdgpu_vm_ptes_update(struct amdgpu_vm_update_params *params,
-			  uint64_t start, uint64_t end,
-			  uint64_t dst, uint64_t flags);
+						  uint64_t start, uint64_t end,
+						  uint64_t dst, uint64_t flags);
 void amdgpu_vm_pt_free_work(struct work_struct *work);
 void amdgpu_vm_pt_free_list(struct amdgpu_device *adev,
-			    struct amdgpu_vm_update_params *params);
+							struct amdgpu_vm_update_params *params);
 
 #if defined(CONFIG_DEBUG_FS)
 void amdgpu_debugfs_vm_bo_info(struct amdgpu_vm *vm, struct seq_file *m);
@@ -660,12 +678,12 @@ static inline void amdgpu_vm_eviction_un
 }
 
 void amdgpu_vm_update_fault_cache(struct amdgpu_device *adev,
-				  unsigned int pasid,
-				  uint64_t addr,
-				  uint32_t status,
-				  unsigned int vmhub);
+								  unsigned int pasid,
+								  uint64_t addr,
+								  uint32_t status,
+								  unsigned int vmhub);
 void amdgpu_vm_tlb_fence_create(struct amdgpu_device *adev,
-				 struct amdgpu_vm *vm,
-				 struct dma_fence **fence);
+								struct amdgpu_vm *vm,
+								struct dma_fence **fence);
 
 #endif




--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_vm_pt.c	2025-04-10 14:44:49.000000000 +0200
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_vm_pt.c	2025-04-12 16:51:37.138829348 +0200
@@ -487,43 +487,76 @@ int amdgpu_vm_pt_create(struct amdgpu_de
  * Make sure a specific page table or directory is allocated.
  *
  * Returns:
- * 1 if page table needed to be allocated, 0 if page table was already
- * allocated, negative errno if an error occurred.
+ * 0 if page table was already allocated or successfully allocated+cleared,
+ * negative errno if an error occurred.
  */
 static int amdgpu_vm_pt_alloc(struct amdgpu_device *adev,
-			      struct amdgpu_vm *vm,
-			      struct amdgpu_vm_pt_cursor *cursor,
-			      bool immediate)
+							  struct amdgpu_vm *vm,
+							  struct amdgpu_vm_pt_cursor *cursor,
+							  bool immediate)
 {
 	struct amdgpu_vm_bo_base *entry = cursor->entry;
 	struct amdgpu_bo *pt_bo;
-	struct amdgpu_bo_vm *pt;
+	struct amdgpu_bo_vm *pt; // This will point to the new vmbo struct
 	int r;
 
-	if (entry->bo)
+	if (entry->bo) // Already exists? Return OK.
 		return 0;
 
+	/* Unlock VM eviction lock while creating BO */
 	amdgpu_vm_eviction_unlock(vm);
+	/* Create the BO and vmbo struct */
 	r = amdgpu_vm_pt_create(adev, vm, cursor->level, immediate, &pt,
-				vm->root.bo->xcp_id);
-	amdgpu_vm_eviction_lock(vm);
-	if (r)
-		return r;
-
-	/* Keep a reference to the root directory to avoid
-	 * freeing them up in the wrong order.
-	 */
-	pt_bo = &pt->bo;
-	pt_bo->parent = amdgpu_bo_ref(cursor->parent->bo);
+							vm->root.bo->xcp_id);
+	amdgpu_vm_eviction_lock(vm); // Relock
+	if (r) { /* Fixed Line */
+		return r; // Failed creation, no BO exists, stats not touched yet. OK.
+	} /* Fixed Line */
+
+	/* Keep a reference to the root directory to avoid freeing them up in the wrong order. */
+	pt_bo = &pt->bo; // pt_bo is the amdgpu_bo within the vmbo 'pt'
+	pt_bo->parent = amdgpu_bo_ref(cursor->parent->bo); // Link to parent PD/PT
+
+	/* Initialize base, link to VM, INCREMENT STATS (+1) */
+	/* Also links pt_bo->vm_bo = entry and adds entry to vm status list */
 	amdgpu_vm_bo_base_init(entry, vm, pt_bo);
+
+	/* Clear the newly created PT/PD BO */
 	r = amdgpu_vm_pt_clear(adev, vm, pt, immediate);
-	if (r)
-		goto error_free_pt;
+	if (r) { /* Fixed Line */
+		goto error_free_pt; // Jump to cleanup if clear fails
+	} /* Fixed Line */
 
+	/* Successfully allocated and cleared */
 	return 0;
 
-error_free_pt:
+	error_free_pt:
+	/* Cleanup after amdgpu_vm_pt_clear failed */
+	/* === FIX: Explicitly perform pt_free steps BEFORE unref === */
+
+	/* 1. Decrement VM stats */
+	amdgpu_vm_update_stats(entry, pt_bo->tbo.resource, -1);
+
+	/* 2. Clear the link from the BO back to the VM entry */
+	pt_bo->vm_bo = NULL;
+
+	/* 3. Remove entry from VM status list */
+	spin_lock(&vm->status_lock);
+	list_del_init(&entry->vm_status);
+	spin_unlock(&vm->status_lock);
+
+	/* 4. Clear the parent's entry pointer back to NULL */
+	/* This prevents use-after-free if parent is traversed again */
+	entry->bo = NULL;
+	/* entry->vm remains valid */
+
+	/* 5. Unlink from parent BO */
+	amdgpu_bo_unref(&pt_bo->parent);
+	pt_bo->parent = NULL; // Prevent double unref if bo_unref is called again
+
+	/* 6. Now unref the BO itself */
 	amdgpu_bo_unref(&pt_bo);
+
 	return r;
 }
