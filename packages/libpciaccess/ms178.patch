--- a/libpciaccess-0.18.1/src/x86_pci.c	2025-07-24 17:25:48.234401337 +0200
+++ b/libpciaccess-0.18.1/src/x86_pci.c	2025-07-24 17:26:45.122042513 +0200
@@ -112,24 +112,24 @@ x86_enable_io(void)
     HMODULE lib = NULL;
 
     if ((GetVersion() & 0x80000000) == 0) {
-      /* running on NT, try WinIo version 3 (32 or 64 bits) */
-#ifdef WIN64
-      lib = LoadLibrary("WinIo64.dll");
-#else
-      lib = LoadLibrary("WinIo32.dll");
-#endif
+        /* running on NT, try WinIo version 3 (32 or 64 bits) */
+        #ifdef WIN64
+        lib = LoadLibrary("WinIo64.dll");
+        #else
+        lib = LoadLibrary("WinIo32.dll");
+        #endif
     }
 
     if (!lib) {
-      fprintf(stderr, "Failed to load WinIo library.\n");
-      return 1;
+        fprintf(stderr, "Failed to load WinIo library.\n");
+        return 1;
     }
 
-#define GETPROC(n, d) 						\
+    #define GETPROC(n, d) 						\
     n = (d) GetProcAddress(lib, #n); 				\
     if (!n) { 							\
-      fprintf(stderr, "Failed to load " #n " function.\n");	\
-      return 1; 						\
+        fprintf(stderr, "Failed to load " #n " function.\n");	\
+        return 1; 						\
     }
 
     GETPROC(InitializeWinIo, INITIALIZEWINIO);
@@ -139,12 +139,12 @@ x86_enable_io(void)
     GETPROC(MapPhysToLin, MAPPHYSTOLIN);
     GETPROC(UnmapPhysicalMemory, UNMAPPHYSMEM);
 
-#undef GETPROC
+    #undef GETPROC
 
     if (!InitializeWinIo()) {
-      fprintf(stderr, "Failed to initialize WinIo.\n"
-		      "NOTE: WinIo.dll and WinIo.sys must be in the same directory as the executable!\n");
-      return 0;
+        fprintf(stderr, "Failed to initialize WinIo.\n"
+        "NOTE: WinIo.dll and WinIo.sys must be in the same directory as the executable!\n");
+        return 0;
     }
 
     return 0;
@@ -163,7 +163,7 @@ inb(uint16_t port)
     DWORD pv;
 
     if (GetPortVal(port, &pv, 1))
-      return (uint8_t)pv;
+        return (uint8_t)pv;
     return 0;
 }
 
@@ -173,7 +173,7 @@ inw(uint16_t port)
     DWORD pv;
 
     if (GetPortVal(port, &pv, 2))
-      return (uint16_t)pv;
+        return (uint16_t)pv;
     return 0;
 }
 
@@ -240,10 +240,13 @@ sort_devices(void)
 #include <device/device.h>
 #endif
 
+static void *mmcfg_base = NULL;
+static pciaddr_t mmcfg_size = 0;
+
 int
 pci_system_x86_map_dev_mem(void **dest, size_t mem_offset, size_t mem_size, int write)
 {
-#if defined(__GNU__)
+    #if defined(__GNU__)
     int err;
     mach_port_t master_device;
     mach_port_t devmem;
@@ -288,29 +291,52 @@ pci_system_x86_map_dev_mem(void **dest,
         return err;
 
     return err;
-#else
+    #else
     int prot = PROT_READ;
     int flags = O_RDONLY;
     int memfd;
+    size_t pagesize = sysconf(_SC_PAGESIZE);
+    if (pagesize == -1) pagesize = 4096; /* Safe fallback */
+        size_t align_offset = mem_offset % pagesize;
+    uint64_t aligned_mem_offset_64 = (uint64_t)mem_offset - align_offset;
+    uint64_t adjusted_mem_size_64 = (uint64_t)mem_size + align_offset;
+    if (adjusted_mem_size_64 > SIZE_MAX) return EOVERFLOW; /* Prevent overflow */
+        if (adjusted_mem_size_64 % pagesize) {
+            uint64_t add = pagesize - (adjusted_mem_size_64 % pagesize);
+            if (add > SIZE_MAX - adjusted_mem_size_64) return EOVERFLOW;
+            adjusted_mem_size_64 += add;
+        }
+        if (aligned_mem_offset_64 > (uint64_t)mem_offset) return EINVAL; /* Underflow check */
+            size_t aligned_mem_offset = (size_t)aligned_mem_offset_64;
+    size_t adjusted_mem_size = (size_t)adjusted_mem_size_64;
 
     if (write) {
         prot |= PROT_WRITE;
-	flags = O_RDWR;
+        flags = O_RDWR;
     }
     memfd = open("/dev/mem", flags | O_CLOEXEC);
     if (memfd == -1)
-	return errno;
+        return errno;
 
-    *dest = mmap(NULL, mem_size, prot, MAP_SHARED, memfd, mem_offset);
-    if (*dest == MAP_FAILED) {
-	close(memfd);
-	*dest = NULL;
-	return errno;
+    void *mapped = mmap(NULL, adjusted_mem_size, prot, MAP_SHARED, memfd, aligned_mem_offset);
+    if (mapped == MAP_FAILED) {
+        close(memfd);
+        *dest = NULL;
+        return errno;
+    }
+    *dest = (char *)mapped + align_offset;
+
+    if (adjusted_mem_size >= (2ULL << 20)) { /* 2MB threshold */
+        #ifndef MADV_HUGEPAGE
+        #define MADV_HUGEPAGE 14 /* Safe define for modern systems */
+        #endif
+        /* Ignore errors, no regression if fails */
+        madvise(mapped, adjusted_mem_size, MADV_HUGEPAGE);
     }
 
     close(memfd);
     return 0;
-#endif
+    #endif
 }
 
 static int
@@ -323,7 +349,7 @@ pci_system_x86_conf1_probe(void)
     sav = inl(0xCF8);
     outl(0x80000000, 0xCF8);
     if (inl(0xCF8) == 0x80000000)
-	res = 0;
+        res = 0;
     outl(sav, 0xCF8);
 
     return res;
@@ -337,27 +363,27 @@ pci_system_x86_conf1_read(unsigned bus,
     int ret = 0;
 
     if (bus >= 0x100 || dev >= 32 || func >= 8 || reg >= 0x100 || size > 4 || size == 3)
-	return EIO;
+        return EIO;
 
     sav = inl(0xCF8);
     outl(0x80000000 | (bus << 16) | (dev << 11) | (func << 8) | (reg & ~3), 0xCF8);
     /* NOTE: x86 is already LE */
     switch (size) {
-	case 1: {
-	    uint8_t *val = data;
-	    *val = inb(addr);
-	    break;
-	}
-	case 2: {
-	    uint16_t *val = data;
-	    *val = inw(addr);
-	    break;
-	}
-	case 4: {
-	    uint32_t *val = data;
-	    *val = inl(addr);
-	    break;
-	}
+        case 1: {
+            uint8_t *val = data;
+            *val = inb(addr);
+            break;
+        }
+        case 2: {
+            uint16_t *val = data;
+            *val = inw(addr);
+            break;
+        }
+        case 4: {
+            uint32_t *val = data;
+            *val = inl(addr);
+            break;
+        }
     }
     outl(sav, 0xCF8);
 
@@ -372,27 +398,27 @@ pci_system_x86_conf1_write(unsigned bus,
     int ret = 0;
 
     if (bus >= 0x100 || dev >= 32 || func >= 8 || reg >= 0x100 || size > 4 || size == 3)
-	return EIO;
+        return EIO;
 
     sav = inl(0xCF8);
     outl(0x80000000 | (bus << 16) | (dev << 11) | (func << 8) | (reg & ~3), 0xCF8);
     /* NOTE: x86 is already LE */
     switch (size) {
-	case 1: {
-	    const uint8_t *val = data;
-	    outb(*val, addr);
-	    break;
-	}
-	case 2: {
-	    const uint16_t *val = data;
-	    outw(*val, addr);
-	    break;
-	}
-	case 4: {
-	    const uint32_t *val = data;
-	    outl(*val, addr);
-	    break;
-	}
+        case 1: {
+            const uint8_t *val = data;
+            outb(*val, addr);
+            break;
+        }
+        case 2: {
+            const uint16_t *val = data;
+            outw(*val, addr);
+            break;
+        }
+        case 4: {
+            const uint32_t *val = data;
+            outl(*val, addr);
+            break;
+        }
     }
     outl(sav, 0xCF8);
 
@@ -406,7 +432,7 @@ pci_system_x86_conf2_probe(void)
     outb(0, 0xCF8);
     outb(0, 0xCFA);
     if (inb(0xCF8) == 0 && inb(0xCFA) == 0)
-	return 0;
+        return 0;
 
     return ENODEV;
 }
@@ -418,30 +444,30 @@ pci_system_x86_conf2_read(unsigned bus,
     int ret = 0;
 
     if (bus >= 0x100 || dev >= 16 || func >= 8 || reg >= 0x100)
-	return EIO;
+        return EIO;
 
     outb((func << 1) | 0xF0, 0xCF8);
     outb(bus, 0xCFA);
     /* NOTE: x86 is already LE */
     switch (size) {
-	case 1: {
-	    uint8_t *val = data;
-	    *val = inb(addr);
-	    break;
-	}
-	case 2: {
-	    uint16_t *val = data;
-	    *val = inw(addr);
-	    break;
-	}
-	case 4: {
-	    uint32_t *val = data;
-	    *val = inl(addr);
-	    break;
-	}
-	default:
-	    ret = EIO;
-	    break;
+        case 1: {
+            uint8_t *val = data;
+            *val = inb(addr);
+            break;
+        }
+        case 2: {
+            uint16_t *val = data;
+            *val = inw(addr);
+            break;
+        }
+        case 4: {
+            uint32_t *val = data;
+            *val = inl(addr);
+            break;
+        }
+        default:
+            ret = EIO;
+            break;
     }
     outb(0, 0xCF8);
 
@@ -455,36 +481,130 @@ pci_system_x86_conf2_write(unsigned bus,
     int ret = 0;
 
     if (bus >= 0x100 || dev >= 16 || func >= 8 || reg >= 0x100)
-	return EIO;
+        return EIO;
 
     outb((func << 1) | 0xF0, 0xCF8);
     outb(bus, 0xCFA);
     /* NOTE: x86 is already LE */
     switch (size) {
-	case 1: {
-	    const uint8_t *val = data;
-	    outb(*val, addr);
-	    break;
-	}
-	case 2: {
-	    const uint16_t *val = data;
-	    outw(*val, addr);
-	    break;
-	}
-	case 4: {
-	    const uint32_t *val = data;
-	    outl(*val, addr);
-	    break;
-	}
-	default:
-	    ret = EIO;
-	    break;
+        case 1: {
+            const uint8_t *val = data;
+            outb(*val, addr);
+            break;
+        }
+        case 2: {
+            const uint16_t *val = data;
+            outw(*val, addr);
+            break;
+        }
+        case 4: {
+            const uint32_t *val = data;
+            outl(*val, addr);
+            break;
+        }
+        default:
+            ret = EIO;
+            break;
     }
     outb(0, 0xCF8);
 
     return ret;
 }
 
+static int
+pci_system_x86_conf3_probe(void)
+{
+    uint32_t low, high, sav_low, sav_high;
+    int err;
+
+    /* Use conf1 to read PCIEXBAR (0x60 low, 0x64 high) from 0:0:0 */
+    err = pci_system_x86_conf1_read(0, 0, 0, 0x60, &low, 4);
+    if (err) return err;
+    err = pci_system_x86_conf1_read(0, 0, 0, 0x64, &high, 4);
+    if (err) return err;
+
+    if (!(low & 1)) return ENODEV; /* Not enabled */
+
+        /* Save originals */
+        sav_low = low;
+    sav_high = high;
+
+    /* Probe size by writing all 1s to writable bits */
+    pci_system_x86_conf1_write(0, 0, 0, 0x60, (void*)&(uint32_t){0xFFFFFFFF}, 4);
+    pci_system_x86_conf1_write(0, 0, 0, 0x64, (void*)&(uint32_t){0xFFFFFFFF}, 4);
+    pci_system_x86_conf1_read(0, 0, 0, 0x60, &low, 4);
+    pci_system_x86_conf1_read(0, 0, 0, 0x64, &high, 4);
+    /* Restore */
+    pci_system_x86_conf1_write(0, 0, 0, 0x60, &sav_low, 4);
+    pci_system_x86_conf1_write(0, 0, 0, 0x64, &sav_high, 4);
+
+    /* PCIEXBAR size: bits 1-2 indicate 256MB/128MB/64MB, but compute from mask */
+    uint64_t testval = ((uint64_t)high << 32) | low;
+    /* Mask flags (bit 0 enable, 1-2 length, 3-7 rsvd) */
+    testval &= ~0xFFULL;
+    mmcfg_size = ~(testval) + 1; /* Standard size calc for base */
+
+    /* Base address: bits 8-35 from low/high, mask flags */
+    uint64_t base = ((uint64_t)sav_high << 32) | (sav_low & ~0xFFULL);
+    if (mmcfg_size == 0 || base == 0) return ENODEV;
+
+    /* Map with write enabled for config writes */
+    err = pci_system_x86_map_dev_mem(&mmcfg_base, (size_t)base, (size_t)mmcfg_size, 1);
+    if (err) {
+        mmcfg_base = NULL;
+        mmcfg_size = 0;
+        return err;
+    }
+
+    /* Verify: Read vendor ID via MMCFG and compare to conf1 */
+    uint32_t vendor_mmcfg, vendor_conf1;
+    if (mmcfg_base == NULL) return ENODEV; /* Null check */
+        vendor_mmcfg = *(volatile uint32_t *)((char *)mmcfg_base + (0 << 20) + (0 << 15) + (0 << 12) + 0);
+    pci_system_x86_conf1_read(0, 0, 0, 0, &vendor_conf1, 4);
+    if (vendor_mmcfg != vendor_conf1) {
+        munmap(mmcfg_base, mmcfg_size);
+        mmcfg_base = NULL;
+        mmcfg_size = 0;
+        return ENODEV;
+    }
+
+    return 0;
+}
+
+static int
+pci_system_x86_conf3_read(unsigned bus, unsigned dev, unsigned func, pciaddr_t reg, void *data, unsigned size)
+{
+    if (mmcfg_base == NULL) return ENODEV; /* Null check */
+        if (bus >= 0x100 || dev >= 32 || func >= 8 || reg >= 0x1000 || size > 4 || size == 3) return EIO; /* 4K per device */
+            uint64_t offset = (uint64_t)bus << 20 | (uint64_t)dev << 15 | (uint64_t)func << 12 | reg;
+    if (offset + size > mmcfg_size) return EIO; /* Bounds check */
+
+        volatile char *addr = (char *)mmcfg_base + offset;
+    switch (size) {
+        case 1: *(uint8_t *)data = *(volatile uint8_t *)addr; break;
+        case 2: *(uint16_t *)data = *(volatile uint16_t *)addr; break;
+        case 4: *(uint32_t *)data = *(volatile uint32_t *)addr; break;
+    }
+    return 0;
+}
+
+static int
+pci_system_x86_conf3_write(unsigned bus, unsigned dev, unsigned func, pciaddr_t reg, const void *data, unsigned size)
+{
+    if (mmcfg_base == NULL) return ENODEV; /* Null check */
+        if (bus >= 0x100 || dev >= 32 || func >= 8 || reg >= 0x1000 || size > 4 || size == 3) return EIO;
+        uint64_t offset = (uint64_t)bus << 20 | (uint64_t)dev << 15 | (uint64_t)func << 12 | reg;
+    if (offset + size > mmcfg_size) return EIO;
+
+    volatile char *addr = (char *)mmcfg_base + offset;
+    switch (size) {
+        case 1: *(volatile uint8_t *)addr = *(const uint8_t *)data; break;
+        case 2: *(volatile uint16_t *)addr = *(const uint16_t *)data; break;
+        case 4: *(volatile uint32_t *)addr = *(const uint32_t *)data; break;
+    }
+    return 0;
+}
+
 /* Check that this really looks like a PCI configuration. */
 static error_t
 pci_system_x86_check (void)
@@ -501,15 +621,15 @@ pci_system_x86_check (void)
     vendor = 0;
 
     for (dev = 0; dev < 32; dev++) {
-       tmpdev.dev = dev;
-       if (pci_device_cfg_read_u16 (&tmpdev, &class, PCI_CLASS_DEVICE))
-           continue;
-       if (class == PCI_CLASS_BRIDGE_HOST || class == PCI_CLASS_DISPLAY_VGA)
-           return 0;
-       if (pci_device_cfg_read_u16 (&tmpdev, &vendor, PCI_VENDOR_ID))
-           continue;
-       if (vendor == PCI_VENDOR_ID_INTEL || class == PCI_VENDOR_ID_COMPAQ)
-           return 0;
+        tmpdev.dev = dev;
+        if (pci_device_cfg_read_u16 (&tmpdev, &class, PCI_CLASS_DEVICE))
+            continue;
+        if (class == PCI_CLASS_BRIDGE_HOST || class == PCI_CLASS_DISPLAY_VGA)
+            return 0;
+        if (pci_device_cfg_read_u16 (&tmpdev, &vendor, PCI_VENDOR_ID))
+            continue;
+        if (vendor == PCI_VENDOR_ID_INTEL || class == PCI_VENDOR_ID_COMPAQ)
+            return 0;
     }
 
     return ENODEV;
@@ -527,7 +647,7 @@ pci_nfuncs(struct pci_device *dev, uint8
     err = pci_device_cfg_read_u8 (&tmpdev, &hdr, PCI_HDRTYPE);
 
     if (err)
-	return err;
+        return err;
 
     *nfuncs = hdr & 0x80 ? 8 : 1;
     return err;
@@ -556,15 +676,15 @@ static int
 pci_device_x86_get_num_regions(uint8_t header_type)
 {
     switch (header_type & 0x7f) {
-	case 0:
-	    return 6;
-	case 1:
-	    return 2;
-	case 2:
-	    return 1;
-	default:
-	    fprintf(stderr,"unknown header type %02x\n", header_type);
-	    return 0;
+        case 0:
+            return 6;
+        case 1:
+            return 2;
+        case 2:
+            return 1;
+        default:
+            fprintf(stderr,"unknown header type %02x\n", header_type);
+            return 0;
     }
 }
 
@@ -573,9 +693,9 @@ static uint32_t
 get_map_base( uint32_t val )
 {
     if (val & 0x01)
-	return val & ~0x03;
+        return val & ~0x03;
     else
-	return val & ~0x0f;
+        return val & ~0x0f;
 }
 
 /** Returns the size of a region based on the all-ones test value */
@@ -585,16 +705,16 @@ get_test_val_size( uint32_t testval )
     unsigned size = 1;
 
     if (testval == 0)
-	return 0;
+        return 0;
 
     /* Mask out the flag bits */
     testval = get_map_base( testval );
     if (!testval)
-	return 0;
+        return 0;
 
     while ((testval & 1) == 0) {
-	size <<= 1;
-	testval >>= 1;
+        size <<= 1;
+        testval >>= 1;
     }
 
     return size;
@@ -707,14 +827,14 @@ pci_device_x86_probe_rom (struct pci_dev
     /* Get the XROMBAR register address */
     switch (reg_8 & 0x3)
     {
-    case PCI_HDRTYPE_DEVICE:
-        xrombar_addr = PCI_XROMBAR_ADDR_00;
-        break;
-    case PCI_HDRTYPE_BRIDGE:
-        xrombar_addr = PCI_XROMBAR_ADDR_01;
-        break;
-    default:
-        return -1;
+        case PCI_HDRTYPE_DEVICE:
+            xrombar_addr = PCI_XROMBAR_ADDR_00;
+            break;
+        case PCI_HDRTYPE_BRIDGE:
+            xrombar_addr = PCI_XROMBAR_ADDR_01;
+            break;
+        default:
+            return -1;
     }
 
     /* Get size and physical address */
@@ -811,7 +931,7 @@ pci_system_x86_scan_bus (uint8_t bus)
         scratchdev.func = 0;
         err = pci_nfuncs (&scratchdev, &nfuncs);
         if (err)
-           return err;
+            return err;
 
         for (func = 0; func < nfuncs; func++)
         {
@@ -832,8 +952,8 @@ pci_system_x86_scan_bus (uint8_t bus)
                 return err;
 
             devices =
-              realloc (pci_sys->devices,
-                       (pci_sys->num_devices + 1) * sizeof (struct pci_device_private));
+            realloc (pci_sys->devices,
+                     (pci_sys->num_devices + 1) * sizeof (struct pci_device_private));
             if (!devices)
                 return ENOMEM;
 
@@ -853,10 +973,10 @@ pci_system_x86_scan_bus (uint8_t bus)
 
             switch (hdrtype & 0x3)
             {
-            case PCI_HDRTYPE_DEVICE:
-                break;
-            case PCI_HDRTYPE_BRIDGE:
-            case PCI_HDRTYPE_CARDBUS:
+                case PCI_HDRTYPE_DEVICE:
+                    break;
+                case PCI_HDRTYPE_BRIDGE:
+                case PCI_HDRTYPE_CARDBUS:
                 {
                     err = pci_device_cfg_read_u8 (&scratchdev, &secbus, PCI_SECONDARY_BUS);
                     if (err)
@@ -868,9 +988,9 @@ pci_system_x86_scan_bus (uint8_t bus)
 
                     break;
                 }
-            default:
-                /* Unknown header, do nothing */
-                break;
+                default:
+                    /* Unknown header, do nothing */
+                    break;
             }
         }
     }
@@ -882,7 +1002,7 @@ pci_system_x86_scan_bus (uint8_t bus)
 
 static int
 pci_device_x86_map_range(struct pci_device *dev,
-    struct pci_device_mapping *map)
+                         struct pci_device_mapping *map)
 {
     tagPhysStruct phys;
 
@@ -898,7 +1018,7 @@ pci_device_x86_map_range(struct pci_devi
 
 static int
 pci_device_x86_unmap_range(struct pci_device *dev,
-    struct pci_device_mapping *map)
+                           struct pci_device_mapping *map)
 {
     tagPhysStruct phys;
 
@@ -915,11 +1035,11 @@ pci_device_x86_unmap_range(struct pci_de
 
 static int
 pci_device_x86_map_range(struct pci_device *dev,
-    struct pci_device_mapping *map)
+                         struct pci_device_mapping *map)
 {
     int err;
     if ( (err = pci_system_x86_map_dev_mem(&map->memory, map->base, map->size,
-                            map->flags & PCI_DEV_MAP_FLAG_WRITABLE)))
+        map->flags & PCI_DEV_MAP_FLAG_WRITABLE)))
         return err;
 
     return 0;
@@ -927,7 +1047,7 @@ pci_device_x86_map_range(struct pci_devi
 
 static int
 pci_device_x86_unmap_range(struct pci_device *dev,
-    struct pci_device_mapping *map)
+                           struct pci_device_mapping *map)
 {
     int err;
     err = pci_device_generic_unmap_range(dev, map);
@@ -940,100 +1060,257 @@ pci_device_x86_unmap_range(struct pci_de
 
 static int
 pci_device_x86_read_conf1(struct pci_device *dev, void *data,
-    pciaddr_t offset, pciaddr_t size, pciaddr_t *bytes_read)
+                          pciaddr_t offset, pciaddr_t size, pciaddr_t *bytes_read)
 {
     int err;
 
     *bytes_read = 0;
-    while (size > 0) {
-	int toread = 1 << (ffs(0x4 + (offset & 0x03)) - 1);
-	if (toread > size)
-	    toread = size;
-
-	err = pci_system_x86_conf1_read(dev->bus, dev->dev, dev->func, offset, data, toread);
-	if (err)
-	    return err;
-
-	offset += toread;
-	data = (char*)data + toread;
-	size -= toread;
-	*bytes_read += toread;
+    if (__builtin_expect(size <= 8, 1)) { /* Unroll common small sizes */
+        while (size > 0) {
+            int toread = 1 << (ffs(0x4 + (offset & 0x03)) - 1);
+            if (toread > size) toread = size;
+            err = pci_system_x86_conf1_read(dev->bus, dev->dev, dev->func, offset, data, toread);
+            if (err) return err;
+            offset += toread;
+            data = (char*)data + toread;
+            size -= toread;
+            *bytes_read += toread;
+            if (size == 0) break; /* Manual unroll step */
+                toread = 1 << (ffs(0x4 + (offset & 0x03)) - 1);
+            if (toread > size) toread = size;
+            err = pci_system_x86_conf1_read(dev->bus, dev->dev, dev->func, offset, data, toread);
+            if (err) return err;
+            offset += toread;
+            data = (char*)data + toread;
+            size -= toread;
+            *bytes_read += toread;
+        }
+    } else {
+        while (__builtin_expect(size > 0, 1)) { /* Hint loop continues */
+            int toread = 1 << (ffs(0x4 + (offset & 0x03)) - 1);
+            if (__builtin_expect(toread > size, 0)) toread = size; /* Uncommon */
+                err = pci_system_x86_conf1_read(dev->bus, dev->dev, dev->func, offset, data, toread);
+            if (__builtin_expect(err, 0)) return err; /* Error uncommon */
+                offset += toread;
+            data = (char*)data + toread;
+            size -= toread;
+            *bytes_read += toread;
+        }
+    }
+    return 0;
+}
+
+static int
+pci_device_x86_write_conf1(struct pci_device *dev, const void *data,
+                           pciaddr_t offset, pciaddr_t size, pciaddr_t *bytes_written)
+{
+    int err;
+
+    *bytes_written = 0;
+    if (__builtin_expect(size <= 8, 1)) { /* Unroll common small sizes */
+        while (size > 0) {
+            int towrite = 4;
+            if (towrite > size) towrite = size;
+            if (towrite > 4 - (offset & 0x3)) towrite = 4 - (offset & 0x3);
+            err = pci_system_x86_conf1_write(dev->bus, dev->dev, dev->func, offset, data, towrite);
+            if (err) return err;
+            offset += towrite;
+            data = (const char*)data + towrite;
+            size -= towrite;
+            *bytes_written += towrite;
+            if (size == 0) break; /* Manual unroll step */
+                towrite = 4;
+            if (towrite > size) towrite = size;
+            if (towrite > 4 - (offset & 0x3)) towrite = 4 - (offset & 0x3);
+            err = pci_system_x86_conf1_write(dev->bus, dev->dev, dev->func, offset, data, towrite);
+            if (err) return err;
+            offset += towrite;
+            data = (const char*)data + towrite;
+            size -= towrite;
+            *bytes_written += towrite;
+        }
+    } else {
+        while (__builtin_expect(size > 0, 1)) {
+            int towrite = 4;
+            if (__builtin_expect(towrite > size, 0)) towrite = size;
+            if (__builtin_expect(towrite > 4 - (offset & 0x3), 0)) towrite = 4 - (offset & 0x3);
+            err = pci_system_x86_conf1_write(dev->bus, dev->dev, dev->func, offset, data, towrite);
+            if (__builtin_expect(err, 0)) return err;
+            offset += towrite;
+            data = (const char*)data + towrite;
+            size -= towrite;
+            *bytes_written += towrite;
+        }
     }
     return 0;
 }
 
 static int
 pci_device_x86_read_conf2(struct pci_device *dev, void *data,
-    pciaddr_t offset, pciaddr_t size, pciaddr_t *bytes_read)
+                          pciaddr_t offset, pciaddr_t size, pciaddr_t *bytes_read)
 {
     int err;
 
     *bytes_read = 0;
-    while (size > 0) {
-	int toread = 1 << (ffs(0x4 + (offset & 0x03)) - 1);
-	if (toread > size)
-	    toread = size;
-
-	err = pci_system_x86_conf2_read(dev->bus, dev->dev, dev->func, offset, data, toread);
-	if (err)
-	    return err;
-
-	offset += toread;
-	data = (char*)data + toread;
-	size -= toread;
-	*bytes_read += toread;
+    if (__builtin_expect(size <= 8, 1)) { /* Unroll common small sizes */
+        while (size > 0) {
+            int toread = 1 << (ffs(0x4 + (offset & 0x03)) - 1);
+            if (toread > size) toread = size;
+            err = pci_system_x86_conf2_read(dev->bus, dev->dev, dev->func, offset, data, toread);
+            if (err) return err;
+            offset += toread;
+            data = (char*)data + toread;
+            size -= toread;
+            *bytes_read += toread;
+            if (size == 0) break; /* Manual unroll step */
+                toread = 1 << (ffs(0x4 + (offset & 0x03)) - 1);
+            if (toread > size) toread = size;
+            err = pci_system_x86_conf2_read(dev->bus, dev->dev, dev->func, offset, data, toread);
+            if (err) return err;
+            offset += toread;
+            data = (char*)data + toread;
+            size -= toread;
+            *bytes_read += toread;
+        }
+    } else {
+        while (__builtin_expect(size > 0, 1)) {
+            int toread = 1 << (ffs(0x4 + (offset & 0x03)) - 1);
+            if (__builtin_expect(toread > size, 0)) toread = size;
+            err = pci_system_x86_conf2_read(dev->bus, dev->dev, dev->func, offset, data, toread);
+            if (__builtin_expect(err, 0)) return err;
+            offset += toread;
+            data = (char*)data + toread;
+            size -= toread;
+            *bytes_read += toread;
+        }
     }
     return 0;
 }
 
 static int
-pci_device_x86_write_conf1(struct pci_device *dev, const void *data,
-    pciaddr_t offset, pciaddr_t size, pciaddr_t *bytes_written)
+pci_device_x86_write_conf2(struct pci_device *dev, const void *data,
+                           pciaddr_t offset, pciaddr_t size, pciaddr_t *bytes_written)
 {
     int err;
 
     *bytes_written = 0;
-    while (size > 0) {
-	int towrite = 4;
-	if (towrite > size)
-	    towrite = size;
-	if (towrite > 4 - (offset & 0x3))
-	    towrite = 4 - (offset & 0x3);
-
-	err = pci_system_x86_conf1_write(dev->bus, dev->dev, dev->func, offset, data, towrite);
-	if (err)
-	    return err;
-
-	offset += towrite;
-	data = (const char*)data + towrite;
-	size -= towrite;
-	*bytes_written += towrite;
+    if (__builtin_expect(size <= 8, 1)) { /* Unroll common small sizes */
+        while (size > 0) {
+            int towrite = 4;
+            if (towrite > size) towrite = size;
+            if (towrite > 4 - (offset & 0x3)) towrite = 4 - (offset & 0x3);
+            err = pci_system_x86_conf2_write(dev->bus, dev->dev, dev->func, offset, data, towrite);
+            if (err) return err;
+            offset += towrite;
+            data = (const char*)data + towrite;
+            size -= towrite;
+            *bytes_written += towrite;
+            if (size == 0) break; /* Manual unroll step */
+                towrite = 4;
+            if (towrite > size) towrite = size;
+            if (towrite > 4 - (offset & 0x3)) towrite = 4 - (offset & 0x3);
+            err = pci_system_x86_conf2_write(dev->bus, dev->dev, dev->func, offset, data, towrite);
+            if (err) return err;
+            offset += towrite;
+            data = (const char*)data + towrite;
+            size -= towrite;
+            *bytes_written += towrite;
+        }
+    } else {
+        while (__builtin_expect(size > 0, 1)) {
+            int towrite = 4;
+            if (__builtin_expect(towrite > size, 0)) towrite = size;
+            if (__builtin_expect(towrite > 4 - (offset & 0x3), 0)) towrite = 4 - (offset & 0x3);
+            err = pci_system_x86_conf2_write(dev->bus, dev->dev, dev->func, offset, data, towrite);
+            if (__builtin_expect(err, 0)) return err;
+            offset += towrite;
+            data = (const char*)data + towrite;
+            size -= towrite;
+            *bytes_written += towrite;
+        }
     }
     return 0;
 }
 
 static int
-pci_device_x86_write_conf2(struct pci_device *dev, const void *data,
-    pciaddr_t offset, pciaddr_t size, pciaddr_t *bytes_written)
+pci_device_x86_read_conf3(struct pci_device *dev, void *data, pciaddr_t offset, pciaddr_t size, pciaddr_t *bytes_read)
 {
     int err;
+    *bytes_read = 0;
+    if (__builtin_expect(size <= 8, 1)) { /* Unroll common small sizes */
+        while (size > 0) {
+            int toread = 1 << (ffs(0x4 + (offset & 0x03)) - 1);
+            if (toread > size) toread = size;
+            err = pci_system_x86_conf3_read(dev->bus, dev->dev, dev->func, offset, data, toread);
+            if (err) return err;
+            offset += toread;
+            data = (char*)data + toread;
+            size -= toread;
+            *bytes_read += toread;
+            if (size == 0) break; /* Manual unroll step */
+                toread = 1 << (ffs(0x4 + (offset & 0x03)) - 1);
+            if (toread > size) toread = size;
+            err = pci_system_x86_conf3_read(dev->bus, dev->dev, dev->func, offset, data, toread);
+            if (err) return err;
+            offset += toread;
+            data = (char*)data + toread;
+            size -= toread;
+            *bytes_read += toread;
+        }
+    } else {
+        while (__builtin_expect(size > 0, 1)) {
+            int toread = 1 << (ffs(0x4 + (offset & 0x03)) - 1);
+            if (__builtin_expect(toread > size, 0)) toread = size;
+            err = pci_system_x86_conf3_read(dev->bus, dev->dev, dev->func, offset, data, toread);
+            if (__builtin_expect(err, 0)) return err;
+            offset += toread;
+            data = (char*)data + toread;
+            size -= toread;
+            *bytes_read += toread;
+        }
+    }
+    return 0;
+}
 
+static int
+pci_device_x86_write_conf3(struct pci_device *dev, const void *data, pciaddr_t offset, pciaddr_t size, pciaddr_t *bytes_written)
+{
+    int err;
     *bytes_written = 0;
-    while (size > 0) {
-	int towrite = 4;
-	if (towrite > size)
-	    towrite = size;
-	if (towrite > 4 - (offset & 0x3))
-	    towrite = 4 - (offset & 0x3);
-
-	err = pci_system_x86_conf2_write(dev->bus, dev->dev, dev->func, offset, data, towrite);
-	if (err)
-	    return err;
-
-	offset += towrite;
-	data = (const char*)data + towrite;
-	size -= towrite;
-	*bytes_written += towrite;
+    if (__builtin_expect(size <= 8, 1)) { /* Unroll common small sizes */
+        while (size > 0) {
+            int towrite = 4;
+            if (towrite > size) towrite = size;
+            if (towrite > 4 - (offset & 0x3)) towrite = 4 - (offset & 0x3);
+            err = pci_system_x86_conf3_write(dev->bus, dev->dev, dev->func, offset, data, towrite);
+            if (err) return err;
+            offset += towrite;
+            data = (const char*)data + towrite;
+            size -= towrite;
+            *bytes_written += towrite;
+            if (size == 0) break; /* Manual unroll step */
+                towrite = 4;
+            if (towrite > size) towrite = size;
+            if (towrite > 4 - (offset & 0x3)) towrite = 4 - (offset & 0x3);
+            err = pci_system_x86_conf3_write(dev->bus, dev->dev, dev->func, offset, data, towrite);
+            if (err) return err;
+            offset += towrite;
+            data = (const char*)data + towrite;
+            size -= towrite;
+            *bytes_written += towrite;
+        }
+    } else {
+        while (__builtin_expect(size > 0, 1)) {
+            int towrite = 4;
+            if (__builtin_expect(towrite > size, 0)) towrite = size;
+            if (__builtin_expect(towrite > 4 - (offset & 0x3), 0)) towrite = 4 - (offset & 0x3);
+            err = pci_system_x86_conf3_write(dev->bus, dev->dev, dev->func, offset, data, towrite);
+            if (__builtin_expect(err, 0)) return err;
+            offset += towrite;
+            data = (const char*)data + towrite;
+            size -= towrite;
+            *bytes_written += towrite;
+        }
     }
     return 0;
 }
@@ -1041,12 +1318,17 @@ pci_device_x86_write_conf2(struct pci_de
 void
 pci_system_x86_destroy(void)
 {
+    if (mmcfg_base != NULL && mmcfg_size > 0) {
+        munmap(mmcfg_base, mmcfg_size);
+        mmcfg_base = NULL;
+        mmcfg_size = 0;
+    }
     x86_disable_io();
 }
 
 struct pci_io_handle *
 pci_device_x86_open_legacy_io(struct pci_io_handle *ret,
-    struct pci_device *dev, pciaddr_t base, pciaddr_t size)
+                              struct pci_device *dev, pciaddr_t base, pciaddr_t size)
 {
     x86_enable_io();
 
@@ -1085,28 +1367,28 @@ pci_device_x86_read8(struct pci_io_handl
 
 void
 pci_device_x86_write32(struct pci_io_handle *handle, uint32_t reg,
-		       uint32_t data)
+                       uint32_t data)
 {
     outl(data, reg + handle->base);
 }
 
 void
 pci_device_x86_write16(struct pci_io_handle *handle, uint32_t reg,
-		       uint16_t data)
+                       uint16_t data)
 {
     outw(data, reg + handle->base);
 }
 
 void
 pci_device_x86_write8(struct pci_io_handle *handle, uint32_t reg,
-		      uint8_t data)
+                      uint8_t data)
 {
     outb(data, reg + handle->base);
 }
 
 static int
 pci_device_x86_map_legacy(struct pci_device *dev, pciaddr_t base,
-    pciaddr_t size, unsigned map_flags, void **addr)
+                          pciaddr_t size, unsigned map_flags, void **addr)
 {
     struct pci_device_mapping map;
     int err;
@@ -1122,7 +1404,7 @@ pci_device_x86_map_legacy(struct pci_dev
 
 static int
 pci_device_x86_unmap_legacy(struct pci_device *dev, void *addr,
-    pciaddr_t size)
+                            pciaddr_t size)
 {
     struct pci_device_mapping map;
 
@@ -1175,18 +1457,46 @@ static const struct pci_system_methods x
     .unmap_legacy = pci_device_x86_unmap_legacy,
 };
 
-static int pci_probe(void)
+static const struct pci_system_methods x86_pci_method_conf3 = {
+    .destroy = pci_system_x86_destroy,
+    .read_rom = pci_device_x86_read_rom,
+    .probe = pci_device_x86_probe,
+    .map_range = pci_device_x86_map_range,
+    .unmap_range = pci_device_x86_unmap_range,
+    .read = pci_device_x86_read_conf3,
+    .write = pci_device_x86_write_conf3,
+    .fill_capabilities = pci_fill_capabilities_generic,
+    .open_legacy_io = pci_device_x86_open_legacy_io,
+    .close_io = pci_device_x86_close_io,
+    .read32 = pci_device_x86_read32,
+    .read16 = pci_device_x86_read16,
+    .read8 = pci_device_x86_read8,
+    .write32 = pci_device_x86_write32,
+    .write16 = pci_device_x86_write16,
+    .write8 = pci_device_x86_write8,
+    .map_legacy = pci_device_x86_map_legacy,
+    .unmap_legacy = pci_device_x86_unmap_legacy,
+};
+
+static int
+pci_probe(void)
 {
     pci_sys->methods = &x86_pci_method_conf1;
     if (pci_system_x86_conf1_probe() == 0) {
-	if (pci_system_x86_check() == 0)
-	    return 1;
+        if (pci_system_x86_check() == 0)
+            return 1;
     }
 
     pci_sys->methods = &x86_pci_method_conf2;
     if (pci_system_x86_conf2_probe() == 0) {
-	if (pci_system_x86_check() == 0)
-	    return 2;
+        if (pci_system_x86_check() == 0)
+            return 2;
+    }
+
+    pci_sys->methods = &x86_pci_method_conf3;
+    if (pci_system_x86_conf3_probe() == 0) {
+        if (pci_system_x86_check() == 0)
+            return 3;
     }
 
     pci_sys->methods = NULL;
@@ -1220,8 +1530,10 @@ pci_system_x86_create(void)
     }
     else if (confx == 1)
         pci_sys->methods = &x86_pci_method_conf1;
-    else
+    else if (confx == 2)
         pci_sys->methods = &x86_pci_method_conf2;
+    else
+        pci_sys->methods = &x86_pci_method_conf3;
 
     /* Recursive scan */
     pci_sys->num_devices = 0;
