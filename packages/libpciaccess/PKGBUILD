pkgname=libpciaccess
pkgver=0.18.1
pkgrel=3.1
pkgdesc="X11 PCI access library"
arch=(x86_64)
license=('LicenseRef-libpciaccess')
url="https://gitlab.freedesktop.org/xorg/lib/libpciaccess"
depends=('glibc' 'zlib')
makedepends=('xorg-util-macros' 'meson' 'llvm' 'clang' 'ninja' 'python')
source=(https://xorg.freedesktop.org/releases/individual/lib/${pkgname}-${pkgver}.tar.xz{,.sig} ms178.patch)
sha512sums=('ef27999446e735df2331e94219ee3dafe9198a2472bb452f63ef9c9c446d5431f9e231e224cfabdeba1402974a5a0064546f9abced4d1770f994f5fc0c2b3310'
            'SKIP')
validpgpkeys=('4A193C06D35E7C670FA4EF0BA2FB9E081F2D130E') # Alan Coopersmith <alan.coopersmith@oracle.com>
#validpgpkeys+=('8703B6700E7EE06D7A39B8D6EDAE37B02CEB490D') # "Emil Velikov <emil.l.velikov@gmail.com>"
#validpgpkeys+=('995ED5C8A6138EB0961F18474C09DD83CAAA50B2') # "Adam Jackson <ajax@nwnk.net>"

run_training_workload() {
    local build_dir="$1"
    local pgo_dir="$2"
    local tmpdir="$3"

    echo "Running PCI access training workload for gaming system..."
    mkdir -p "${tmpdir}/results"

    # Function to test PCI operations
    test_pci_operations() {
        local testname="$1"
        local cmd="$2"

        echo "Running test: ${testname}"
        LD_LIBRARY_PATH="${build_dir}" $cmd > "${tmpdir}/results/${testname}.log" 2>&1 || true
    }

    # First run the project's native scanpci as it properly uses the library
    if [ -x "${build_dir}/scanpci/scanpci" ]; then
        echo "Running native scanpci from build directory"
        LD_LIBRARY_PATH="${build_dir}" "${build_dir}/scanpci/scanpci"
    fi

    # Create test program with corrected struct members and function names
    cat > "${tmpdir}/test_pci.c" << 'EOF'
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <pciaccess.h>
#include <time.h>
#include <unistd.h>

// Define number of standard PCI regions if not defined
#ifndef PCI_NUM_REGIONS
#define PCI_NUM_REGIONS 6
#endif

void dump_device_info(struct pci_device *dev) {
    printf("PCI Device: %04x:%04x (rev %02x)\n",
        dev->vendor_id, dev->device_id, dev->revision);
    printf("  Class:    %06x\n", dev->device_class);
    printf("  Regions:  %d\n", PCI_NUM_REGIONS);

    for (int i = 0; i < PCI_NUM_REGIONS; i++) {
        if (dev->regions[i].size > 0) {
            printf("    Region %d: base=%llx size=%llx is_IO=%d is_prefetchable=%d\n",
                i, (unsigned long long)dev->regions[i].base_addr,
                (unsigned long long)dev->regions[i].size,
                dev->regions[i].is_IO, dev->regions[i].is_prefetchable);
        }
    }
}

int test_config_access_patterns(struct pci_device *dev) {
    int ret;
    uint32_t value;

    // Test different access patterns - sequential
    for (int offset = 0; offset < 256; offset += 4) {
        ret = pci_device_cfg_read_u32(dev, &value, offset);
        if (ret != 0) return ret;
    }

    // Random access pattern
    for (int i = 0; i < 50; i++) {
        int offset = (rand() % 64) * 4;  // Random aligned offset
        ret = pci_device_cfg_read_u32(dev, &value, offset);
        if (ret != 0) return ret;
    }

    // Byte-by-byte access (for odd offsets)
    uint8_t byte_val;
    for (int offset = 0; offset < 64; offset++) {
        ret = pci_device_cfg_read_u8(dev, &byte_val, offset);
        if (ret != 0) return ret;
    }

    // Word access
    uint16_t word_val;
    for (int offset = 0; offset < 64; offset += 2) {
        ret = pci_device_cfg_read_u16(dev, &word_val, offset);
        if (ret != 0) return ret;
    }

    return 0;
}

int main(int argc, char **argv) {
    int ret, i;
    uint32_t value;
    struct pci_device_iterator *iter;
    struct pci_device *dev;

    // Seed random number generator for varied access patterns
    srand(time(NULL));

    ret = pci_system_init();
    if (ret != 0) {
        fprintf(stderr, "pci_system_init failed: %d\n", ret);
        return 1;
    }

    // Parse command
    if (argc < 2) {
        fprintf(stderr, "Usage: %s <command>\n", argv[0]);
        return 1;
    }

    const char *cmd = argv[1];

    // Scan all devices
    iter = pci_slot_match_iterator_create(NULL);
    if (iter == NULL) {
        fprintf(stderr, "Failed to create iterator\n");
        return 1;
    }

    if (strcmp(cmd, "--list") == 0) {
        while ((dev = pci_device_next(iter)) != NULL) {
            printf("%04x:%04x [%04x:%04x] class %06x\n",
                dev->vendor_id, dev->device_id,
                dev->subvendor_id, dev->subdevice_id,
                dev->device_class);
        }
    } else if (strcmp(cmd, "--scan") == 0) {
        while ((dev = pci_device_next(iter)) != NULL) {
            ret = pci_device_probe(dev);
            if (ret == 0) {
                dump_device_info(dev);
            }
        }
    } else if (strcmp(cmd, "--read") == 0 && argc > 3) {
        // Read specific device
        unsigned int domain = 0, bus = 0, dev_id = 0, func = 0;
        int offset = 0;

        sscanf(argv[2], "%x:%x.%x", &bus, &dev_id, &func);
        offset = strtol(argv[3], NULL, 0);

        struct pci_id_match match = {
            .vendor_id = PCI_MATCH_ANY,
            .device_id = PCI_MATCH_ANY,
            .subvendor_id = PCI_MATCH_ANY,
            .subdevice_id = PCI_MATCH_ANY,
            .device_class = 0,
            .device_class_mask = 0,
            .match_data = 0
        };

        iter = pci_id_match_iterator_create(&match);
        while ((dev = pci_device_next(iter)) != NULL) {
            if (dev->bus == bus && dev->dev == dev_id && dev->func == func) {
                ret = pci_device_probe(dev);
                if (ret != 0) continue;

                ret = pci_device_cfg_read_u32(dev, &value, offset);
                if (ret == 0) {
                    printf("Value at offset 0x%x: 0x%08x\n", offset, value);
                } else {
                    printf("Failed to read: %d\n", ret);
                }
                break;
            }
        }
    } else if (strcmp(cmd, "--loop") == 0) {
        // Heavy load test - iteration over all devices multiple times
        for (i = 0; i < 100; i++) {
            pci_iterator_destroy(iter);
            iter = pci_slot_match_iterator_create(NULL);

            while ((dev = pci_device_next(iter)) != NULL) {
                pci_device_probe(dev);
                // Read device config space
                for (int offset = 0; offset < 64; offset += 4) {
                    pci_device_cfg_read_u32(dev, &value, offset);
                }
            }
        }
    } else if (strcmp(cmd, "--vga") == 0) {
        // Find VGA/GPUs
        while ((dev = pci_device_next(iter)) != NULL) {
            if ((dev->device_class >> 16) == 0x03) { // Display controller
                pci_device_probe(dev);
                dump_device_info(dev);
                test_config_access_patterns(dev);
            }
        }
    } else if (strcmp(cmd, "--network") == 0) {
        // Find network devices
        while ((dev = pci_device_next(iter)) != NULL) {
            if ((dev->device_class >> 16) == 0x02) { // Network controller
                pci_device_probe(dev);
                dump_device_info(dev);
                test_config_access_patterns(dev);
            }
        }
    } else if (strcmp(cmd, "--stress") == 0) {
        // Stress test with heavy access patterns
        for (int run = 0; run < 5; run++) {
            pci_iterator_destroy(iter);
            iter = pci_slot_match_iterator_create(NULL);

            while ((dev = pci_device_next(iter)) != NULL) {
                pci_device_probe(dev);
                test_config_access_patterns(dev);
            }
        }
    } else if (strcmp(cmd, "--benchmark") == 0) {
        // Benchmark PCI access performance
        clock_t start = clock();
        int iterations = 1000;

        for (i = 0; i < iterations; i++) {
            // Get first device
            pci_iterator_destroy(iter);
            iter = pci_slot_match_iterator_create(NULL);
            dev = pci_device_next(iter);

            if (dev) {
                pci_device_probe(dev);
                for (int offset = 0; offset < 64; offset += 4) {
                    pci_device_cfg_read_u32(dev, &value, offset);
                }
            }
        }

        clock_t end = clock();
        double cpu_time = ((double) (end - start)) / CLOCKS_PER_SEC;
        printf("PCI benchmark: %d iterations in %.6f seconds (%.0f iterations/sec)\n",
               iterations, cpu_time, iterations / cpu_time);
    } else {
        // Default basic info dump
        while ((dev = pci_device_next(iter)) != NULL) {
            printf("%04x:%04x [%02x:%02x.%d]\n",
                dev->vendor_id, dev->device_id,
                dev->bus, dev->dev, dev->func);
        }
    }

    pci_iterator_destroy(iter);
    pci_system_cleanup();
    return 0;
}
EOF

    # Compile the test program
    cd "${tmpdir}"
    gcc -o test_pci test_pci.c -I"${build_dir}/include" -L"${build_dir}" -lpciaccess

    # Make sure we run all our tests
    echo "Running custom PCI tests to exercise all code paths"

    # Run standard tests
    test_pci_operations "list_all" "./test_pci --list"
    test_pci_operations "scan_all" "./test_pci --scan"

    # Run gaming-specific device tests
    test_pci_operations "vga_devices" "./test_pci --vga"
    test_pci_operations "network_devices" "./test_pci --network"

    # Run heavy load and stress tests
    test_pci_operations "heavy_load" "./test_pci --loop"
    test_pci_operations "stress_test" "./test_pci --stress"
    test_pci_operations "benchmark" "./test_pci --benchmark"

    # Extract common PCI devices from actual system and test specific reads
    lspci | head -n 20 | while read -r line; do
        if [[ "$line" =~ ^([0-9a-f]+):([0-9a-f]+)\.([0-9a-f]+) ]]; then
            bus="${BASH_REMATCH[1]}"
            dev="${BASH_REMATCH[2]}"
            func="${BASH_REMATCH[3]}"

            # Try reading different offsets in the PCI configuration space
            for offset in 0 4 8 12 16 20 24 28; do
                test_pci_operations "read_${bus}_${dev}_${func}_${offset}" "./test_pci --read ${bus}:${dev}.${func} ${offset}"
            done
        fi
    done

    # Test PCI device enumeration speed with repeated scans
    for i in {1..10}; do
        test_pci_operations "enum_speed_${i}" "./test_pci --list"
    done

    echo "Training workload complete"
}
export -f run_training_workload

prepare() {
  mkdir -p build
  # Apply patches
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    patch -Np1 -i "${src}"
  done
}

build() {
  cd "${srcdir}/${pkgname}-${pkgver}"

  # Save original flags
  orig_cflags="${CFLAGS}"
  orig_cxxflags="${CXXFLAGS}"
  orig_ldflags="${LDFLAGS}"

  # Set PGO directory
  pgo_dir="/tmp/makepkg/${pkgname}/src/${pkgname}-pgo"
  mkdir -p "${pgo_dir}"

  # PGO instrumentation flags - greatly increase counters to fix warnings
  _common_instrument_flags=" -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"

  ###########################################################################
  # Phase 1: Standard PGO Instrumentation Build
  ###########################################################################
  msg2 "== Building with standard PGO instrumentation"

  # Clean previous build artifacts
  rm -rf "${srcdir}/build_std"
  rm -rf "${pgo_dir}/standard"
  mkdir -p "${srcdir}/build_std"
  mkdir -p "${pgo_dir}/standard"

  # Configure with standard instrumentation flags
  export CFLAGS="${orig_cflags}${_common_instrument_flags} -fprofile-generate=${pgo_dir}/standard"
  export CXXFLAGS="${orig_cxxflags}${_common_instrument_flags} -fprofile-generate=${pgo_dir}/standard"
  export LDFLAGS="${orig_ldflags} -fprofile-generate=${pgo_dir}/standard"

  meson setup "${srcdir}/build_std" \
      --prefix=/usr \
      -D b_ndebug=false \
      -D b_pie=false \
      -D c_std=gnu2x \
      -D cpp_std=gnu++2a \
      -D b_lto=true \
      --buildtype=debug \
      --wrap-mode=nofallback

  ninja -C "${srcdir}/build_std"

  ###########################################################################
  # Phase 2: Standard PGO Training
  ###########################################################################
  msg2 "== Running standard PGO training workload"

  # Train the standard version
  export LD_LIBRARY_PATH="${srcdir}/build_std"
  cd "${srcdir}/build_std"

  # Run meson tests if available
  meson test || echo "No tests defined or tests failed, continuing..."

  # Make sure we run scanpci if available
  if [ -x "${srcdir}/build_std/scanpci/scanpci" ]; then
    echo "Running scanpci from build directory"
    "${srcdir}/build_std/scanpci/scanpci"
  fi

  # Create a simple test program to exercise the library more thoroughly
  echo "Creating custom PCI test program"
cat > "${srcdir}/pci_test.c" << EOF
#include <stdio.h>
#include <stdlib.h>
#include <pciaccess.h>

int main() {
    struct pci_device_iterator *iter;
    struct pci_device *dev;
    int ret, i;
    uint32_t value;

    ret = pci_system_init();
    if (ret != 0) {
        fprintf(stderr, "pci_system_init failed: %d\\n", ret);
        return 1;
    }

    // Test 1: Basic device enumeration
    printf("Enumerating all PCI devices:\\n");
    iter = pci_slot_match_iterator_create(NULL);
    while ((dev = pci_device_next(iter)) != NULL) {
        printf("Device %04x:%04x at %02x:%02x.%d\\n",
               dev->vendor_id, dev->device_id, dev->bus, dev->dev, dev->func);
    }
    pci_iterator_destroy(iter);

    // Test 2: Heavy device probing
    printf("\\nProbing all devices with full information:\\n");
    iter = pci_slot_match_iterator_create(NULL);
    while ((dev = pci_device_next(iter)) != NULL) {
        ret = pci_device_probe(dev);
        if (ret == 0) {
            printf("Device %04x:%04x class %06x:\\n",
                   dev->vendor_id, dev->device_id, dev->device_class);

            // Read config space
            for (i = 0; i < 64; i += 4) {
                pci_device_cfg_read_u32(dev, &value, i);
                printf("  Config[0x%02x] = 0x%08x\\n", i, value);
            }

            // Display regions
            for (i = 0; i < 6; i++) {
                if (dev->regions[i].size > 0) {
                    printf("  Region %d: base=0x%llx size=0x%llx\\n",
                           i, (unsigned long long)dev->regions[i].base_addr,
                           (unsigned long long)dev->regions[i].size);
                }
            }
        }
    }
    pci_iterator_destroy(iter);

    // Test 3: Find specific device classes
    printf("\\nFinding GPU devices:\\n");
    iter = pci_slot_match_iterator_create(NULL);
    while ((dev = pci_device_next(iter)) != NULL) {
        if ((dev->device_class >> 16) == 0x03) { // Display controller
            pci_device_probe(dev);
            printf("GPU: %04x:%04x at %02x:%02x.%d\\n",
                   dev->vendor_id, dev->device_id, dev->bus, dev->dev, dev->func);
        }
    }
    pci_iterator_destroy(iter);

    pci_system_cleanup();
    return 0;
}
EOF

  # Compile and run the test program
  gcc -o "${srcdir}/pci_test" "${srcdir}/pci_test.c" -I"${srcdir}/build_std/include" -L"${srcdir}/build_std" -lpciaccess
  LD_LIBRARY_PATH="${srcdir}/build_std" "${srcdir}/pci_test"

  # Run multiple iterations to ensure good coverage
  for i in {1..5}; do
    echo "Running test iteration $i"
    LD_LIBRARY_PATH="${srcdir}/build_std" "${srcdir}/pci_test" > /dev/null
  done

  cd "${srcdir}/${pkgname}-${pkgver}"

  # Merge standard PGO profiles
  echo "Merging standard PGO profiles..."
  llvm-profdata merge -output="${pgo_dir}/standard.profdata" "${pgo_dir}/standard"

  ###########################################################################
  # Phase 3: Context-sensitive PGO Instrumentation Build (uses standard profiles)
  ###########################################################################
  msg2 "== Building with context-sensitive PGO instrumentation"

  # Clean previous build artifacts
  rm -rf "${srcdir}/build_cs"
  rm -rf "${pgo_dir}/cs"
  mkdir -p "${srcdir}/build_cs"
  mkdir -p "${pgo_dir}/cs"

  # Configure with context-sensitive instrumentation AND standard profile data
  export CFLAGS="${orig_cflags}${_common_instrument_flags} -fprofile-use=${pgo_dir}/standard.profdata -fcs-profile-generate=${pgo_dir}/cs"
  export CXXFLAGS="${orig_cxxflags}${_common_instrument_flags} -fprofile-use=${pgo_dir}/standard.profdata -fcs-profile-generate=${pgo_dir}/cs"
  export LDFLAGS="${orig_ldflags} -fprofile-use=${pgo_dir}/standard.profdata -fcs-profile-generate=${pgo_dir}/cs"

  meson setup "${srcdir}/build_cs" \
      --prefix=/usr \
      -D b_ndebug=false \
      -D b_pie=false \
      -D c_std=gnu2x \
      -D cpp_std=gnu++2a \
      -D b_lto=true \
      --buildtype=debug \
      --wrap-mode=nofallback

  ninja -C "${srcdir}/build_cs"

  ###########################################################################
  # Phase 4: Context-sensitive PGO Training
  ###########################################################################
  msg2 "== Running context-sensitive PGO training workload"

  # Train the context-sensitive version
  export LD_LIBRARY_PATH="${srcdir}/build_cs"
  cd "${srcdir}/build_cs"

  # Run meson tests if available
  meson test || echo "No tests defined or tests failed, continuing..."

  # Make sure we run scanpci if available
  if [ -x "${srcdir}/build_cs/scanpci/scanpci" ]; then
    echo "Running scanpci from build directory"
    "${srcdir}/build_cs/scanpci/scanpci"
  fi

  # Run the custom test program again with context-sensitive instrumentation
  LD_LIBRARY_PATH="${srcdir}/build_cs" "${srcdir}/pci_test"

  # Run multiple iterations to ensure good coverage
  for i in {1..5}; do
    echo "Running test iteration $i"
    LD_LIBRARY_PATH="${srcdir}/build_cs" "${srcdir}/pci_test" > /dev/null
  done

  cd "${srcdir}/${pkgname}-${pkgver}"

  # Merge context-sensitive profiles
  echo "Merging context-sensitive PGO profiles..."
  llvm-profdata merge -output="${pgo_dir}/cs.profdata" "${pgo_dir}/cs"

  ###########################################################################
  # Phase 5: Build with PGO Optimization (using both profile types)
  ###########################################################################
  msg2 "== Building with PGO optimization"

  # Clean optimized build directory
  rm -rf "${srcdir}/build_opt"
  mkdir -p "${srcdir}/build_opt"

  # Merge both profiles into a final profile
  llvm-profdata merge -output="${pgo_dir}/merged.profdata" \
    "${pgo_dir}/standard.profdata" "${pgo_dir}/cs.profdata"

  # Configure with profile use flags
  export CFLAGS="${orig_cflags} -fprofile-use=${pgo_dir}/merged.profdata"
  export CXXFLAGS="${orig_cxxflags} -fprofile-use=${pgo_dir}/merged.profdata"
  export LDFLAGS="${orig_ldflags} -fprofile-use=${pgo_dir}/merged.profdata -Wl,--emit-relocs"

  meson setup "${srcdir}/build_opt" \
      --prefix=/usr \
      -D b_ndebug=true \
      -D b_pie=false \
      -D c_std=gnu2x \
      -D cpp_std=gnu++2a \
      -D b_lto=true \
      --buildtype=release \
      --wrap-mode=nofallback

  # Build with profile optimizations
  ninja -C "${srcdir}/build_opt"

  ###########################################################################
  # Phase 6: BOLT Instrumentation
  ###########################################################################
  msg2 "== BOLT instrumentation phase"

  # Find the main library file
  lib_file=$(find "${srcdir}/build_opt" -name "*.so.*" -type f | head -1)
  lib_name=$(basename "$lib_file")
  lib_dir=$(dirname "$lib_file")

  echo "Instrumenting library: ${lib_file}"

  # Create a clean directory for BOLT profile data
  rm -rf "${pgo_dir}/bolt_profiles"
  mkdir -p "${pgo_dir}/bolt_profiles"

  # Instrument the library with BOLT
  llvm-bolt "${lib_file}" \
    --instrument \
    --lite=false \
    --skip-funcs=".text/1" \
    --instrumentation-file="${pgo_dir}/bolt_profiles/profile" \
    -o "${lib_file}.inst"

  # Backup original and replace with instrumented version
  mv "${lib_file}" "${lib_file}.org"
  mv "${lib_file}.inst" "${lib_file}"

  ###########################################################################
  # Phase 7: BOLT Training
  ###########################################################################
  msg2 "== Running BOLT training workload"

  # Set explicit environment variables for instrumentation
  export BOLT_USE_INSTRUMENT=1
  export BOLT_OUTPUT_DIR="${pgo_dir}/bolt_profiles"
  export LD_LIBRARY_PATH="${lib_dir}"

  # Run with the custom PCI test program for BOLT training
  "${srcdir}/pci_test"

  # Run multiple iterations to ensure good coverage
  for i in {1..5}; do
    echo "Running BOLT test iteration $i"
    "${srcdir}/pci_test" > /dev/null
  done

  # Also run scanpci if available
  if [ -x "${srcdir}/build_opt/scanpci/scanpci" ]; then
    echo "Running scanpci for BOLT training"
    LD_LIBRARY_PATH="${lib_dir}" "${srcdir}/build_opt/scanpci/scanpci"
  fi

  echo "Training workload complete"

  # Debug - list all generated profiles
  echo "BOLT profiles generated:"
  find "${pgo_dir}/bolt_profiles" -type f

  ###########################################################################
  # Phase 8: Merge BOLT Profiles
  ###########################################################################
  msg2 "== Merging BOLT profiles"

  # Only proceed if profiles were generated
  bolt_profiles=$(find "${pgo_dir}/bolt_profiles" -type f)
  if [ -n "$bolt_profiles" ]; then
    # Merge all profiles into one
    merge-fdata ${bolt_profiles} -o "${pgo_dir}/combined.fdata"
    echo "BOLT profiles merged successfully"
  else
    echo "Warning: No BOLT profiles found, skipping optimization"
    cp "${lib_file}.org" "${lib_file}.bolt" || true
    touch "${pgo_dir}/combined.fdata" || true  # Create empty file to prevent failure
  fi

  ###########################################################################
  # Phase 9: Final BOLT Optimization
  ###########################################################################
  msg2 "== Applying final BOLT optimizations"

  # Use combined.fdata and have a fallback if it's missing
  if [ -s "${pgo_dir}/combined.fdata" ]; then
    # Apply BOLT optimizations with profile data
    llvm-bolt "${lib_file}.org" \
      --data="${pgo_dir}/combined.fdata" \
      -o "${lib_file}.bolt" \
      --dyno-stats \
      --frame-opt=all \
      --lite=false \
      --infer-stale-profile=1 \
      --icf=all \
      --plt=all \
      --hugify \
      --peepholes=all \
      --x86-strip-redundant-address-size \
      --indirect-call-promotion=all \
      --reorder-blocks=ext-tsp \
      --reorder-functions=cdsort \
      --split-all-cold \
      --split-eh \
      --split-functions \
      --split-strategy=cdsplit \
      --align-functions=32 \
      --frame-opt-rm-stores \
      --jump-tables=aggressive \
      --skip-funcs=".text/1" \
      --stoke || cp "${lib_file}.org" "${lib_file}.bolt"
  else
    # If no valid profile data, just optimize without profile data
    echo "No valid profile data, applying basic BOLT optimizations"
    llvm-bolt "${lib_file}.org" \
      -o "${lib_file}.bolt" \
      --dyno-stats \
      --reorder-blocks=ext-tsp \
      --split-functions \
      --split-eh \
      --skip-funcs=".text/1" || cp "${lib_file}.org" "${lib_file}.bolt"
  fi

  ###########################################################################
  # Phase 10: Finalize Build
  ###########################################################################
  msg2 "== Finalizing build with optimized library"

  # Replace original library with BOLT-optimized version
  mv "${lib_file}.bolt" "${lib_file}"

  # Fix symlinks if needed
  soname=$(echo "$lib_name" | sed -r 's/libpciaccess\.so\.([0-9]+).*/\1/')
  if [ -n "$soname" ]; then
    cd "${lib_dir}"
    ln -sf "${lib_name}" "libpciaccess.so.${soname}"
    ln -sf "libpciaccess.so.${soname}" "libpciaccess.so"
  fi

  # Restore environment
  cd "${srcdir}"
  export CFLAGS="${orig_cflags}"
  export CXXFLAGS="${orig_cxxflags}"
  export LDFLAGS="${orig_ldflags}"
}

check() {
  meson test -C build_opt
}

package() {
  DESTDIR="$pkgdir" ninja -C build_opt install

  # Use LLVM strip
  find "$pkgdir" -type f \( -name '*.so*' -o -name '*.a' -o -executable \) -print0 | while IFS= read -r -d '' file; do
    if llvm-strip --strip-unneeded "$file" 2>/dev/null || llvm-strip --strip-all "$file" 2>/dev/null; then
      echo "Stripped: $file"
    else
      echo "Skipping: $file (not a valid object file)" >&2
    fi
  done

  install -Dm644 "$pkgname"-$pkgver/COPYING -t "${pkgdir}/usr/share/licenses/${pkgname}/"
}
