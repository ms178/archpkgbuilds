pkgname=fish
pkgver=4.0.1
pkgrel=3.1
pkgdesc='Smart and user friendly shell intended mostly for interactive use'
url='https://fishshell.com/'
arch=('x86_64')
license=('GPL2')
depends=('glibc' 'gcc-libs' 'ncurses' 'pcre2')
optdepends=('python: man page completion parser / web config tool'
            'pkgfile: command-not-found hook')
makedepends=('cmake' 'python-sphinx' 'rust' 'cargo' 'llvm' 'llvm-libs')
checkdepends=('expect' 'procps-ng')
install=fish.install
backup=(etc/fish/config.fish)
source=("${pkgname}::git+https://github.com/fish-shell/fish-shell#tag=${pkgver}?signed")
validpgpkeys=(003837986104878835FA516D7A67D962D88A709A) # David Adam <zanchey@gmail.com>
sha256sums=('SKIP')

prepare() {
  cd ${pkgname}
  # Ensure rustup stable toolchain is used
  rustup default stable

  # Create pgo-training.fish script
  cat > pgo-training.fish << 'EOF'
#!/usr/bin/env fish

# Exit on error but continue with other tests if one fails
function run_test_section
    set -l name $argv[1]
    set -l cmd $argv[2..-1]
    echo "==== Running Test Section: $name ===="
    eval $cmd || echo "WARNING: Section $name failed, continuing with other tests"
    echo ""
end

# Create a function to simulate user typing with completions
function simulate_typing
    set -l cmd $argv
    # Simulate typing each character with potential completions
    for i in (seq 1 (string length $cmd))
        set -l partial (string sub -l $i $cmd)
        # Every 3 characters, simulate tab completion
        if test (math "$i % 3") = 0
            echo "Simulating completion for: $partial"
        end
    end
    # Finally execute the full command
    eval $cmd
end

# Basic shell operations
run_test_section "Basic Commands" '
    echo "Running basic commands..."
    ls -l
    pwd
    cd $HOME
    cd -
    echo "Hello, world!"
    set -l var "test variable with spaces"
    echo $var
    which fish
    type fish
    time ls -la
'

# Command substitution and variable expansion
run_test_section "Command Substitution" '
    echo "Testing command substitution..."
    set -l current_dir (pwd)
    echo "Current directory: $current_dir"

    echo "Files in current directory: "(ls)

    # Nested command substitutions
    echo "Nested substitution: "(echo (echo (echo "deep")))

    # Variable expansion with substring
    set -l long_string "This is a very long string for testing substring operations"
    echo $long_string
    echo "Substring: "(string sub -l 10 $long_string)

    # Variable expansion with indices
    set -l multi_value one two three four five
    echo "All values: $multi_value"
    echo "First value: $multi_value[1]"
    echo "Last two values: $multi_value[-2..-1]"
    echo "Range: $multi_value[2..4]"
'

# Completion system (extensive)
run_test_section "Completions" '
    echo "Testing completion system..."

    # List available completions for various commands
    complete -c ls
    complete -c cd
    complete -c git
    complete -c fish

    # Simulate completion logic for various commands
    simulate_typing "ls -l"
    simulate_typing "cd ~"
    simulate_typing "fish --help"

    # Register and use a custom completion
    complete -c mytest -a "option1 option2 option3" -d "My test command"
    complete -c mytest
'

# Scripts, functions and program structures
run_test_section "Functions and Structures" '
    echo "Testing functions and control structures..."

    # Define and call functions
    function greet
        set -l name $argv[1]
        if test -n "$name"
            echo "Hello, $name!"
        else
            echo "Hello, anonymous user!"
        end
    end

    greet "PGO Tester"
    greet

    # Loops
    for i in (seq 1 5)
        echo "Loop iteration $i"
    end

    # While loop
    set -l counter 3
    while test $counter -gt 0
        echo "Countdown: $counter"
        set counter (math $counter - 1)
    end

    # Conditionals
    if test (count $PATH) -gt 5
        echo "PATH has many entries"
    else if test (count $PATH) -gt 2
        echo "PATH has a few entries"
    else
        echo "PATH has very few entries"
    end

    # Switch statement
    set -l fruit banana
    switch $fruit
        case apple
            echo "Its an apple"
        case banana
            echo "Its a banana"
        case "*"
            echo "Its something else"
    end
'

# History and search operations
run_test_section "History" '
    echo "Testing history functionality..."

    # Add some commands to history
    echo "History test command 1"
    sleep 0.1
    echo "History test command 2"
    sleep 0.1
    echo "History test command 3"
    sleep 0.1

    # Search history
    history
    history --search "History test"
    history --contains "command 2"
    history --exact "History test command 3"
'

# Job control and process management
run_test_section "Job Control" '
    echo "Testing job control..."

    # Start background jobs
    sleep 1 &
    set -l job1 $last_pid
    echo "Started job 1: $job1"

    sleep 2 &
    set -l job2 $last_pid
    echo "Started job 2: $job2"

    # List jobs
    jobs

    # Wait for first job
    wait $job1
    echo "Job 1 completed"

    # Kill second job
    kill $job2
    echo "Job 2 terminated"
'

# Path handling and wildcards
run_test_section "Path Handling" '
    echo "Testing path handling and wildcards..."

    # Create test directory structure
    mkdir -p /tmp/fish_pgo_test/{dir1,dir2,dir3}
    touch /tmp/fish_pgo_test/file1.txt
    touch /tmp/fish_pgo_test/file2.txt
    touch /tmp/fish_pgo_test/dir1/subfile.txt

    # List with wildcards
    ls /tmp/fish_pgo_test/*.txt
    ls /tmp/fish_pgo_test/dir*

    # Path normalization
    echo (realpath /tmp/fish_pgo_test/../fish_pgo_test/./dir1)

    # Cleanup
    rm -rf /tmp/fish_pgo_test
'

# Error handling
run_test_section "Error Handling" '
    echo "Testing error handling..."

    # Intentionally cause errors
    echo "Command that doesnt exist:"
    non_existent_command || echo "Error caught successfully"

    # Status variable
    echo $status

    # Handle error in if statement
    if non_existent_command_2
        echo "This shouldnt print"
    else
        echo "Error detected in if statement"
    end
'

# String manipulation
run_test_section "String Manipulation" '
    echo "Testing string operations..."

    set -l test_string "The quick brown fox jumps over the lazy dog"

    # String length
    echo "Length: "(string length $test_string)

    # Substring
    echo "Substring: "(string sub -s 5 -l 5 $test_string)

    # Replace
    echo "Replace: "(string replace "quick" "fast" $test_string)

    # Match
    echo "Match: "(string match -r "b.*n" $test_string)

    # Split
    echo "Split results:"
    string split " " $test_string | head -n 3
'

# Advanced fish features (lists, arrays, math)
run_test_section "Advanced Features" '
    echo "Testing advanced features..."

    # Lists and arrays
    set -l my_list alpha beta gamma delta
    set -a my_list epsilon
    echo "List: $my_list"
    echo "Sliced list: $my_list[2..4]"

    # Math operations
    echo "Math: "(math "5 * 4 + 3")
    echo "Math with variables: "(math "sqrt($status) + 10")

    # Set operations
    set -l set1 1 2 3 4
    set -l set2 3 4 5 6
    set -l intersection
    for i in $set1
        if contains $i $set2
            set -a intersection $i
        end
    end
    echo "Intersection: $intersection"
'

# Configuration handling
run_test_section "Configuration" '
    echo "Testing configuration handling..."

    # Show current fish_greeting
    echo "Current greeting: $fish_greeting"

    # Modify and show a variable
    set -l old_fish_greeting $fish_greeting
    set -g fish_greeting "PGO training in progress"
    echo "New greeting: $fish_greeting"

    # Restore
    set -g fish_greeting $old_fish_greeting
'

# Interactive features (simulated)
run_test_section "Interactive Features" '
    echo "Testing interactive features (simulated)..."

    # Test autosuggestions indirectly
    for cmd in "ls -" "cd ~/" "echo Hello" "git st"
        echo "Would suggest for: $cmd"
    end

    # Test syntax highlighting indirectly
    echo "Command with pipes: ls -la | grep fish | wc -l"
    echo "Command with redirection: echo test > /dev/null"
    echo "Command with error syntax: for i in (1 2 3)"
'

# Command timing
run_test_section "Command Timing" '
    echo "Testing command timing..."

    time sleep 0.1
    time ls -la /
    time for i in (seq 1 100); echo $i; end
'

# Environment variables
run_test_section "Environment Variables" '
    echo "Testing environment variables..."

    # List some environment variables
    echo "PATH: $PATH"
    echo "HOME: $HOME"
    echo "USER: $USER"

    # Set and export
    set -l local_var "local value"
    set -gx EXPORTED_VAR "exported value"

    echo "Local: $local_var"
    echo "Exported: $EXPORTED_VAR"

    # Use envvar in command
    echo $HOME/test_file
'

# Prompt rendering - FIXED
run_test_section "Prompt" '
    echo "Testing prompt rendering..."

    # Define a test prompt function
    function fish_prompt_pgo_test
        echo -n "PGO-TEST:"(pwd | string replace "$HOME" "~")"\\$ "
    end

    # Use it to print a prompt
    set -l original_prompt fish_prompt
    function fish_prompt
        fish_prompt_pgo_test
    end

    # Force prompt rendering
    echo "Current prompt would be: "(fish_prompt)

    # Restore original
    functions --erase fish_prompt
'

echo "===== PGO TRAINING COMPLETED SUCCESSFULLY ====="
EOF

  # Make pgo-training.fish executable
  chmod +x pgo-training.fish
}

build() {
  cd ${pkgname}

  # Save original RUSTFLAGS
  ORIGINAL_RUSTFLAGS="$RUSTFLAGS"

  # Use the C++ linker for Rust (fixes undefined symbols)
  export RUSTFLAGS="${ORIGINAL_RUSTFLAGS:+$ORIGINAL_RUSTFLAGS }-C linker=c++"

  # Disable LTO (fish does not support it)
  export CARGO_PROFILE_RELEASE_LTO=false
  export CARGO_PROFILE_RELEASE_PANIC=abort
  export CARGO_PROFILE_RELEASE_CODEGEN_UNITS=1

  # Step 1: Instrumentation build for PGO
  echo "Building with PGO instrumentation..."
  mkdir -p pgo-data
  # Use RelWithDebInfo instead of Debug for more accurate profiling
  export RUSTFLAGS="${RUSTFLAGS} -Cprofile-generate=$PWD/pgo-data"
  cmake \
    -B build-instrumented \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_INSTALL_SYSCONFDIR=/etc \
    -DCMAKE_BUILD_TYPE=RelWithDebInfo \
    -DCMAKE_C_STANDARD=23 \
    -DCMAKE_CXX_STANDARD=23 \
    -DBUILD_DOCS=False \
    -DBUILD_TESTING=ON \
    -Wno-dev
  make -C build-instrumented VERBOSE=1

  # Step 2: Run tests to generate profiling data
  echo "Running tests to generate PGO data..."

  # Set up minimal environment for fish to run correctly
  export XDG_DATA_HOME="$PWD/build-instrumented"
  export XDG_CONFIG_HOME="$PWD/build-instrumented"

  # Run PGO training script
  echo "Running PGO training script..."
  export FISH_BUILD_DIR="$PWD/build-instrumented"
  "$FISH_BUILD_DIR/fish" ./pgo-training.fish || {
    echo "Error: PGO training script failed"
    exit 1
  }

  # Run Rust tests (188) using ctest
  echo "Running Rust tests (cargo-test)..."
  (cd build-instrumented && ctest -R cargo-test --output-on-failure) || {
    echo "Error: cargo-test failed"
    exit 1
  }

  # Additional tests for better coverage
  echo "Running additional tests for better PGO coverage..."
  (cd build-instrumented && ctest -R test_ --output-on-failure) || {
    echo "Warning: Some additional tests failed, but continuing with available profile data"
  }

  # Step 3: Merge profiling data
  echo "Merging PGO profiling data..."
  # Specify input files explicitly for more reliable merging
  llvm-profdata merge -output=pgo-data/merged.profdata pgo-data/*.profraw || {
    echo "Error: Failed to merge profile data"
    exit 1
  }

  # Step 4: Optimization build using PGO data
  echo "Building with PGO optimization..."
  # Reset RUSTFLAGS and set for optimization build with proper spacing
  export RUSTFLAGS="${ORIGINAL_RUSTFLAGS:+$ORIGINAL_RUSTFLAGS }-C linker=c++ -Cprofile-use=$PWD/pgo-data/merged.profdata"
  cmake \
    -B build-optimized \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_INSTALL_SYSCONFDIR=/etc \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_C_STANDARD=23 \
    -DCMAKE_CXX_STANDARD=23 \
    -DBUILD_DOCS=False \
    -DBUILD_TESTING=ON \
    -Wno-dev
  make -C build-optimized VERBOSE=1
}

package() {
  cd ${pkgname}
  make -C build-optimized DESTDIR="${pkgdir}" install
}
