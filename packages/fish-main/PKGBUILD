pkgname=fish
pkgver=4.0.0
pkgrel=3.1
pkgdesc='Smart and user friendly shell intended mostly for interactive use'
url='https://fishshell.com/'
arch=('x86_64')
license=('GPL2')
depends=('glibc' 'gcc-libs' 'ncurses' 'pcre2')
optdepends=('python: man page completion parser / web config tool'
            'pkgfile: command-not-found hook')
makedepends=('cmake' 'python-sphinx' 'rust' 'cargo')
checkdepends=('expect' 'procps-ng')
install=fish.install
backup=(etc/fish/config.fish)
source=("${pkgname}::git+https://github.com/fish-shell/fish-shell#tag=${pkgver}?signed")
validpgpkeys=(003837986104878835FA516D7A67D962D88A709A) # David Adam <zanchey@gmail.com>
sha256sums=('SKIP')

build() {
  cd ${pkgname}

  # Use the C++ linker for Rust (fixes undefined symbols)
  export RUSTFLAGS+=" -C linker=c++"

  # Tell Cargo to use system libraries and disable LTO which fixes linking
  export CARGO_PROFILE_RELEASE_LTO=true
  export CARGO_PROFILE_RELEASE_PANIC=abort
  export CARGO_PROFILE_RELEASE_CODEGEN_UNITS=1

  # Configure with standard build flags
  cmake \
    -B build \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_INSTALL_SYSCONFDIR=/etc \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_C_STANDARD=23 \
    -DCMAKE_CXX_STANDARD=23 \
    -DBUILD_DOCS=False \
    -Wno-dev

  make -C build VERBOSE=1
}

#check() {
#  cd ${pkgname}
#  # Use the existing build directory and run tests directly with 'make test'
#  make -C build test
#}

package() {
  cd ${pkgname}
  make -C build DESTDIR="${pkgdir}" install
}
