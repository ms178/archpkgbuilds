pkgname=glslang
pkgver=15.1.0
pkgrel=8.1
pkgdesc="OpenGL and OpenGL ES shader front end and validator"
arch=('x86_64')
url='https://github.com/KhronosGroup/glslang'
license=('BSD')
depends=('gcc-libs' 'spirv-tools')
makedepends=('cmake' 'ninja' 'spirv-headers' 'python' 'llvm')
options=('staticlibs' '!strip')
source=(${pkgname}-${pkgver}.tar.gz::https://github.com/KhronosGroup/glslang/archive/${pkgver}.tar.gz)
sha256sums=('1c4d0a5a38c8aaf89a2d7e6093be734320599f5a6775b2726beeb05b0c054e66')

build() {
  cd ${pkgname}-${pkgver}

  # Store original flags
  CFLAGS_ORIG="$CFLAGS"
  CXXFLAGS_ORIG="$CXXFLAGS"
  LDFLAGS_ORIG="$LDFLAGS"

  # Create directories for PGO profiles
  mkdir -p "$srcdir/pgo_standard"
  mkdir -p "$srcdir/pgo_cs"
  mkdir -p "$srcdir/bolt_profile"

  # Create run-instrumented-tests.sh script with correct paths
  cat > "$srcdir/run-instrumented-tests.sh" << EOF
#!/bin/bash

# Set LD_LIBRARY_PATH (include both glslang and SPIRV)
export LD_LIBRARY_PATH="$srcdir/${pkgname}-${pkgver}/build-pgo/glslang:$srcdir/${pkgname}-${pkgver}/build-pgo/SPIRV:\$LD_LIBRARY_PATH"

# Execute the glslang test script with the correct path and any arguments passed by ctest
"$srcdir/${pkgname}-${pkgver}/Test/glslang-test.sh" "\$@"
EOF
  chmod +x "$srcdir/run-instrumented-tests.sh"

  # Create compiler wrapper scripts to guarantee LLVM flags are used
  cat > "$srcdir/clang-wrapper.sh" << 'EOF'
#!/bin/bash
exec clang "$@" -mllvm -vp-counters-per-site=200 -mllvm -runtime-counter-relocation -mllvm -enable-value-profiling
EOF

  cat > "$srcdir/clang++-wrapper.sh" << 'EOF'
#!/bin/bash
exec clang++ "$@" -mllvm -vp-counters-per-site=200 -mllvm -runtime-counter-relocation -mllvm -enable-value-profiling
EOF

  chmod +x "$srcdir/clang-wrapper.sh" "$srcdir/clang++-wrapper.sh"

  local _common_cmake_options=(
    -DCMAKE_INSTALL_PREFIX=/usr
    -DCMAKE_C_STANDARD=23
    -DCMAKE_CXX_STANDARD=23
    -DALLOW_EXTERNAL_SPIRV_TOOLS=ON
    -DGLSLANG_TESTS=ON
  )

  # --- Stage 1: Standard PGO - First round with standard instrumentation ---
  echo "Stage 1: Building with standard PGO instrumentation..."

  # Set environment variables for compiler flags
  export LLVM_VP_COUNTERS_PER_SITE=200
  export LLVM_PROFILE_FILE="$srcdir/pgo_standard/%m-%p.profraw"
  export CFLAGS_OVERRIDE="-mllvm -vp-counters-per-site=200 -mllvm -runtime-counter-relocation -mllvm -enable-value-profiling"
  export CXXFLAGS_OVERRIDE="-mllvm -vp-counters-per-site=200 -mllvm -runtime-counter-relocation -mllvm -enable-value-profiling"

  # Add standard PGO instrumentation flags with increased counters
  CFLAGS+=" -fprofile-generate=$srcdir/pgo_standard $CFLAGS_OVERRIDE -g3 -fno-omit-frame-pointer"
  CXXFLAGS+=" -fprofile-generate=$srcdir/pgo_standard $CXXFLAGS_OVERRIDE -g3 -fno-omit-frame-pointer"
  LDFLAGS+=" -fprofile-generate=$srcdir/pgo_standard -g3 -fno-omit-frame-pointer"

  # Explicitly set CMAKE flags with custom compiler wrappers
  cmake \
    -Bbuild-pgo1 \
    -GNinja \
    -DCMAKE_BUILD_TYPE=Debug \
    "${_common_cmake_options[@]}" \
    -DBUILD_SHARED_LIBS=ON \
    -DCMAKE_C_COMPILER="$srcdir/clang-wrapper.sh" \
    -DCMAKE_CXX_COMPILER="$srcdir/clang++-wrapper.sh" \
    -DCMAKE_C_FLAGS="$CFLAGS" \
    -DCMAKE_CXX_FLAGS="$CXXFLAGS" \
    -DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS" \
    -DCMAKE_SHARED_LINKER_FLAGS="$LDFLAGS" \
    -DCMAKE_CXX_FLAGS_DEBUG="$CXXFLAGS_OVERRIDE" \
    -DCMAKE_C_FLAGS_DEBUG="$CFLAGS_OVERRIDE"

  ninja -Cbuild-pgo1

  # Run tests to generate standard PGO profile data
  echo "Running tests to generate standard PGO profile data..."
  cd build-pgo1
  export LD_LIBRARY_PATH="$srcdir/${pkgname}-${pkgver}/build-pgo1/glslang:$srcdir/${pkgname}-${pkgver}/build-pgo1/SPIRV:$LD_LIBRARY_PATH"
  ctest -C Release -VV -R ".*" -j$(nproc) --output-on-failure
  cd ..

  # Additional profiling: Run standalone executables with sample inputs
  if [ -x "build-pgo1/StandAlone/glslang" ]; then
    echo "Running standalone executables for better profile coverage..."
    find Test -name "*.vert" -o -name "*.frag" | head -n 50 | \
    while read -r testfile; do
      build-pgo1/StandAlone/glslang --stdin -S vert "$testfile" > /dev/null 2>&1 || true
    done
  fi

  # Merge standard profile data
  echo "Merging standard PGO profile data..."
  llvm-profdata merge -output="$srcdir/standard.profdata" "$srcdir/pgo_standard"/*.profraw

  # Verify merged .profdata file
  if [ ! -s "$srcdir/standard.profdata" ]; then
    echo "Error: Standard .profdata file is empty!"
    return 1
  fi

  # --- Stage 2: Context-Sensitive PGO - Second round using first profile ---
  echo "Stage 2: Building with context-sensitive PGO instrumentation..."

  # Update environment variables for CS profile
  export LLVM_PROFILE_FILE="$srcdir/pgo_cs/%m-%p.profraw"

  # Create new wrapper scripts for CS-PGO
  cat > "$srcdir/clang-cs-wrapper.sh" << 'EOF'
#!/bin/bash
exec clang "$@" -mllvm -vp-counters-per-site=200 -mllvm -runtime-counter-relocation -mllvm -enable-value-profiling
EOF

  cat > "$srcdir/clang++-cs-wrapper.sh" << 'EOF'
#!/bin/bash
exec clang++ "$@" -mllvm -vp-counters-per-site=200 -mllvm -runtime-counter-relocation -mllvm -enable-value-profiling
EOF

  chmod +x "$srcdir/clang-cs-wrapper.sh" "$srcdir/clang++-cs-wrapper.sh"

  # Update flags for CS-PGO instrumentation, using standard profile data
  CFLAGS="${CFLAGS_ORIG} -fprofile-use=$srcdir/standard.profdata -fcs-profile-generate=$srcdir/pgo_cs $CFLAGS_OVERRIDE -g3 -fno-omit-frame-pointer"
  CXXFLAGS="${CXXFLAGS_ORIG} -fprofile-use=$srcdir/standard.profdata -fcs-profile-generate=$srcdir/pgo_cs $CXXFLAGS_OVERRIDE -g3 -fno-omit-frame-pointer"
  LDFLAGS="${LDFLAGS_ORIG} -fprofile-use=$srcdir/standard.profdata -fcs-profile-generate=$srcdir/pgo_cs -g3 -fno-omit-frame-pointer"

  cmake \
    -Bbuild-pgo2 \
    -GNinja \
    -DCMAKE_BUILD_TYPE=Debug \
    "${_common_cmake_options[@]}" \
    -DBUILD_SHARED_LIBS=ON \
    -DCMAKE_C_COMPILER="$srcdir/clang-cs-wrapper.sh" \
    -DCMAKE_CXX_COMPILER="$srcdir/clang++-cs-wrapper.sh" \
    -DCMAKE_C_FLAGS="$CFLAGS" \
    -DCMAKE_CXX_FLAGS="$CXXFLAGS" \
    -DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS" \
    -DCMAKE_SHARED_LINKER_FLAGS="$LDFLAGS" \
    -DCMAKE_CXX_FLAGS_DEBUG="$CXXFLAGS_OVERRIDE" \
    -DCMAKE_C_FLAGS_DEBUG="$CFLAGS_OVERRIDE"

  ninja -Cbuild-pgo2

  # Run tests to generate context-sensitive profile data
  echo "Running tests to generate context-sensitive PGO profile data..."
  cd build-pgo2
  export LD_LIBRARY_PATH="$srcdir/${pkgname}-${pkgver}/build-pgo2/glslang:$srcdir/${pkgname}-${pkgver}/build-pgo2/SPIRV:$LD_LIBRARY_PATH"
  ctest -C Release -VV -R ".*" -j$(nproc) --output-on-failure
  cd ..

  # Run the same additional profiling as before
  if [ -x "build-pgo2/StandAlone/glslang" ]; then
    echo "Running standalone executables for better context-sensitive profile coverage..."
    find Test -name "*.vert" -o -name "*.frag" | head -n 50 | \
    while read -r testfile; do
      build-pgo2/StandAlone/glslang --stdin -S vert "$testfile" > /dev/null 2>&1 || true
    done
  fi

  # Merge context-sensitive profile with standard profile
  echo "Merging context-sensitive profile with standard profile..."
  llvm-profdata merge -output="$srcdir/merged.profdata" "$srcdir/pgo_cs"/*.profraw "$srcdir/standard.profdata"

  # Verify merged .profdata file
  if [ ! -s "$srcdir/merged.profdata" ]; then
    echo "Error: Merged .profdata file is empty!"
    return 1
  fi

  # --- Stage 3: Final build with merged profile data ---
  echo "Stage 3: Building final version with merged profile data..."

  # Clear any profile environment variables
  unset LLVM_PROFILE_FILE
  unset LLVM_VP_COUNTERS_PER_SITE
  unset CFLAGS_OVERRIDE
  unset CXXFLAGS_OVERRIDE

  # Update flags for the final optimized build
  CFLAGS="${CFLAGS_ORIG} -fprofile-use=$srcdir/merged.profdata"
  CXXFLAGS="${CXXFLAGS_ORIG} -fprofile-use=$srcdir/merged.profdata"
  LDFLAGS="${LDFLAGS_ORIG} -fprofile-use=$srcdir/merged.profdata -Wl,--emit-relocs"

  # Add advanced optimization flags
  CFLAGS+=" -fno-common -ffunction-sections -fdata-sections"
  CXXFLAGS+=" -fno-common -ffunction-sections -fdata-sections"
  LDFLAGS+=" -Wl,--gc-sections"

  cmake \
    -Bbuild-pgo \
    -GNinja \
    -DCMAKE_BUILD_TYPE=Release \
    "${_common_cmake_options[@]}" \
    -DBUILD_SHARED_LIBS=ON \
    -DCMAKE_C_FLAGS="$CFLAGS" \
    -DCMAKE_CXX_FLAGS="$CXXFLAGS" \
    -DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS" \
    -DCMAKE_SHARED_LINKER_FLAGS="$LDFLAGS"

  ninja -Cbuild-pgo

  # --- Stage 4: Instrument for BOLT ---
  echo "Creating instrumented binaries for BOLT..."

  # Array of binaries to instrument - use readlink -f to resolve symlinks
  local binaries=(
    "$(readlink -f "$srcdir/${pkgname}-${pkgver}/build-pgo/StandAlone/glslang")"
    "$srcdir/${pkgname}-${pkgver}/build-pgo/StandAlone/spirv-remap"
  )

  # Clean up build directory
  echo "Cleaning up build directory..."
  rm -f "$srcdir/${pkgname}-${pkgver}/build-pgo/StandAlone/"*.orig
  rm -f "$srcdir/${pkgname}-${pkgver}/build-pgo/StandAlone/"*.inst
  rm -f "$srcdir/${pkgname}-${pkgver}/build-pgo/StandAlone/"*.bolt

  # Ensure binaries exist and are executable
  for binary in "${binaries[@]}"; do
    # Skip if binary is a symlink
    if [ -L "$binary" ]; then
      echo "Skipping symlink: $binary"
      continue
    fi

    if [ ! -x "$binary" ]; then
      echo "Warning: Skipping missing or non-executable binary: $binary"
      continue
    fi

    # Debug binary information
    echo "Processing binary: $binary"
    echo "Binary type: $(file "$binary")"

    # Check if binary has already been processed by BOLT
    if readelf -S "$binary" 2>/dev/null | grep -q "__bolt_runtime_start" || file "$binary" | grep -q "BOLT"; then
      echo "Warning: Skipping already processed binary: $binary"
      continue
    fi

    # Backup original binary if not already backed up
    if [ ! -f "$binary.orig" ]; then
      cp "$binary" "$binary.orig"
    else
      cp "$binary.orig" "$binary"
    fi

    # Instrument binary
    echo "Instrumenting binary: $binary"
    llvm-bolt "$binary" \
      --instrument \
      --instrumentation-file-append-pid \
      --instrumentation-file="$srcdir/bolt_profile/prof.fdata" \
      -o "$binary.inst"
    mv "$binary.inst" "$binary"
  done

  # Run tests with instrumented binaries to generate BOLT profile data
  echo "Running tests with instrumented binaries for BOLT..."
  export LD_LIBRARY_PATH="$srcdir/${pkgname}-${pkgver}/build-pgo/glslang:$srcdir/${pkgname}-${pkgver}/build-pgo/SPIRV:$LD_LIBRARY_PATH"
  echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"

  cd build-pgo
  ctest -C Release -VV -j$(nproc) --output-on-failure \
      -D "TEST_COMMAND=$srcdir/run-instrumented-tests.sh"
  cd ..

  # Run the same additional workloads for BOLT as we did for PGO
  if [ -x "build-pgo/StandAlone/glslang" ]; then
    echo "Running standalone executables for better BOLT profile coverage..."
    find Test -name "*.vert" -o -name "*.frag" | head -n 50 | \
    while read -r testfile; do
      build-pgo/StandAlone/glslang --stdin -S vert "$testfile" > /dev/null 2>&1 || true
    done
  fi

  # Verify BOLT profile data files
  echo "Looking for BOLT profile data files..."
  ls -la "$srcdir/bolt_profile/"

  if ! ls "$srcdir/bolt_profile/prof.fdata"* >/dev/null 2>&1; then
    echo "Warning: No BOLT profile data files found. Skipping BOLT optimization."
    return 0
  fi

  echo "Merging BOLT profile data files..."
  merge-fdata "$srcdir/bolt_profile/prof.fdata"* > "$srcdir/bolt_profile/merged.fdata"

  # Verify merged BOLT profile data file size
  if [ ! -s "$srcdir/bolt_profile/merged.fdata" ]; then
    echo "Error: Merged BOLT profile data file is empty!"
    return 1
  fi

  # --- Stage 5: Optimize with BOLT ---
  echo "Optimizing with BOLT..."

  local bolt_options=(
    --data "$srcdir/bolt_profile/merged.fdata"
    --dyno-stats
    --lite=false
    --eliminate-unreachable
    --frame-opt=all
    --icf=all
    --jump-tables=aggressive
    --min-branch-clusters
    --stoke
    --sctc-mode=always
    --plt=all
    --hot-data
    --hugify
    --frame-opt-rm-stores
    --peepholes=all
    --infer-stale-profile=1
    --x86-strip-redundant-address-size
    --indirect-call-promotion=all
    --reorder-blocks=ext-tsp
    --reorder-functions=cdsort
    --split-all-cold
    --split-eh
    --split-functions
    --split-strategy=cdsplit
    --use-gnu-stack
    --align-functions=32
  )

  # Optimize binaries
  for binary in "${binaries[@]}"; do
    if [ -L "$binary" ]; then
      echo "Skipping symlink: $binary"
      continue
    fi

    if [ -f "${binary}.orig" ]; then
      llvm-bolt "${binary}.orig" \
        "${bolt_options[@]}" \
        -o "${binary}.bolt" || \
        echo "Warning: BOLT optimization failed for ${binary}"
    else
      echo "Warning: Original binary not found for ${binary}"
    fi
  done
}

package() {
  cd ${pkgname}-${pkgver}

  # Install PGO-optimized files first
  DESTDIR="${pkgdir}" cmake --install build-pgo

  # Install BOLT-optimized binaries if they exist
  # Using full paths for BOLT-optimized binaries
  if [ -f "$srcdir/${pkgname}-${pkgver}/build-pgo/StandAlone/glslang.bolt" ]; then
    install -Dm755 "$srcdir/${pkgname}-${pkgver}/build-pgo/StandAlone/glslang.bolt" "${pkgdir}/usr/bin/glslang"
  fi
  if [ -f "$srcdir/${pkgname}-${pkgver}/build-pgo/StandAlone/spirv-remap.bolt" ]; then
    install -Dm755 "$srcdir/${pkgname}-${pkgver}/build-pgo/StandAlone/spirv-remap.bolt" "${pkgdir}/usr/bin/spirv-remap"
  fi

  # Install license
  install -Dm644 LICENSE.txt "${pkgdir}"/usr/share/licenses/${pkgname}/LICENSE

  # Create symlinks for shared libraries
  cd "${pkgdir}"/usr/lib
  for lib in *.so.*; do
    ln -sf "${lib}" "${lib%.*}"
    ln -sf "${lib}" "${lib%.*.*}"
  done

  # Create symlink for glslangValidator
  cd "${pkgdir}"/usr/bin
  ln -sf glslang glslangValidator

  # Use llvm-strip only on recognized file formats
  find "$pkgdir" -type f \( -name '*.so*' -o -name '*.a' -o -executable \) -print0 | while IFS= read -r -d '' file; do
    if [ -L "$file" ]; then
      continue  # Skip symlinks
    fi
    if llvm-strip --strip-unneeded "$file" 2>/dev/null || llvm-strip --strip-all "$file" 2>/dev/null; then
      echo "Stripped: $file"
    else
      echo "Skipping: $file (not a valid object file)" >&2
    fi
  done
}
