pkgname=glslang
pkgver=1.4.321.0
pkgrel=3.1
pkgdesc="OpenGL and OpenGL ES shader front end and validator"
arch=('x86_64')
url='https://github.com/KhronosGroup/glslang'
license=('BSD')
depends=('gcc-libs' 'spirv-tools')
makedepends=('cmake' 'ninja' 'spirv-headers' 'python' 'llvm' 'clang')
options=('staticlibs' 'strip')
source=("git+${url}.git#tag=vulkan-sdk-${pkgver}")
sha256sums=('1cb7900efba3481c0c1ccae14b50bac99d59bc9d9fd5d0764f36dd0dc62c2320')

safe() { ( timeout 30s "$@" >/dev/null 2>&1 ) || true ; }

# --- generate_training_shaders (unchanged from previous correct version) ---
generate_training_shaders() {
  local output_dir="$1"
  echo "Generating synthetic GLSL shaders for training in $output_dir..."
  mkdir -p "$output_dir"
  # ... (shader generation code remains the same) ...
  cat > "$output_dir/simple.vert" << 'EOF'
#version 450
layout(location = 0) in vec3 inPosition;
layout(location = 1) in vec3 inColor;
layout(location = 0) out vec3 fragColor;
void main() {
    gl_Position = vec4(inPosition, 1.0);
    fragColor = inColor;
}
EOF
  cat > "$output_dir/complex.vert" << 'EOF'
#version 450
#extension GL_ARB_separate_shader_objects : enable
layout(binding = 0) uniform UniformBufferObject { mat4 model; mat4 view; mat4 proj; float time; } ubo;
layout(location = 0) in vec3 inPosition; layout(location = 1) in vec3 inNormal; layout(location = 2) in vec2 inTexCoord;
layout(location = 0) out vec3 fragPosition; layout(location = 1) out vec3 fragNormal; layout(location = 2) out vec2 fragTexCoord; layout(location = 3) out vec3 fragColor;
const vec3 COLORS[6] = vec3[]( vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0), vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 1.0) );
vec3 computeColor(vec3 position, float time) { int index = int(mod(position.x * position.y * position.z * 10.0 + time, 6.0)); return COLORS[index]; }
void main() { vec3 animatedPosition = inPosition; animatedPosition.y += sin(ubo.time * 2.0 + inPosition.x * 4.0) * 0.2; gl_Position = ubo.proj * ubo.view * ubo.model * vec4(animatedPosition, 1.0); fragPosition = vec3(ubo.model * vec4(animatedPosition, 1.0)); fragNormal = mat3(transpose(inverse(ubo.model))) * inNormal; fragTexCoord = inTexCoord; fragColor = computeColor(inPosition, ubo.time); }
EOF
  cat > "$output_dir/lighting.frag" << 'EOF'
#version 450
#extension GL_ARB_separate_shader_objects : enable
layout(binding = 1) uniform sampler2D texSampler; layout(binding = 2) uniform LightingData { vec3 lightPos; vec3 viewPos; vec3 lightColor; float ambientStrength; float specularStrength; float shininess; } lighting;
layout(location = 0) in vec3 fragPosition; layout(location = 1) in vec3 fragNormal; layout(location = 2) in vec2 fragTexCoord; layout(location = 3) in vec3 fragColor_in;
layout(location = 0) out vec4 outColor;
void main() { vec3 ambient = lighting.ambientStrength * lighting.lightColor; vec3 norm = normalize(fragNormal); vec3 lightDir = normalize(lighting.lightPos - fragPosition); float diff = max(dot(norm, lightDir), 0.0); vec3 diffuse = diff * lighting.lightColor; vec3 viewDir = normalize(lighting.viewPos - fragPosition); vec3 reflectDir = reflect(-lightDir, norm); float spec = pow(max(dot(viewDir, reflectDir), 0.0), lighting.shininess); vec3 specular = lighting.specularStrength * spec * lighting.lightColor; vec3 result = (ambient + diffuse + specular) * fragColor_in * texture(texSampler, fragTexCoord).rgb; outColor = vec4(result, 1.0); }
EOF
  cat > "$output_dir/compute_filter.comp" << 'EOF'
#version 450
#extension GL_ARB_separate_shader_objects : enable
layout(local_size_x = 16, local_size_y = 16) in;
layout(binding = 0, rgba8) uniform image2D inputImage; layout(binding = 1, rgba8) uniform image2D outputImage;
layout(binding = 2) uniform FilterParams { float kernel[9]; int width; int height; float intensity; } params;
void main() { ivec2 pixel_coord = ivec2(gl_GlobalInvocationID.xy); if (pixel_coord.x >= params.width || pixel_coord.y >= params.height) { return; } vec4 sum = vec4(0.0); int kernelIndex = 0; for (int i = -1; i <= 1; i++) { for (int j = -1; j <= 1; j++) { ivec2 sample_coord = pixel_coord + ivec2(i, j); sample_coord = clamp(sample_coord, ivec2(0), ivec2(params.width-1, params.height-1)); vec4 sample = imageLoad(inputImage, sample_coord); sum += sample * params.kernel[kernelIndex++]; } } vec4 original = imageLoad(inputImage, pixel_coord); vec4 filtered = mix(original, sum, params.intensity); imageStore(outputImage, pixel_coord, filtered); }
EOF
  cat > "$output_dir/tessellation_control.tesc" << 'EOF'
#version 450
#extension GL_ARB_separate_shader_objects : enable
layout(vertices = 3) out;
layout(binding = 0) uniform TessParams { float innerLevel; float outerLevel; float time; } tessParams;
layout(location = 0) in vec3 inPosition_tc[]; layout(location = 1) in vec3 inNormal_tc[]; layout(location = 2) in vec2 inTexCoord_tc[];
layout(location = 0) out vec3 outPosition_tc[]; layout(location = 1) out vec3 outNormal_tc[]; layout(location = 2) out vec2 outTexCoord_tc[];
float calculateTessLevel(vec3 pos0, vec3 pos1) { float midX = (pos0.x + pos1.x) / 2.0; float variation = sin(tessParams.time + midX * 3.0) * 0.5 + 0.5; return mix(1.0, tessParams.outerLevel, variation); }
void main() { outPosition_tc[gl_InvocationID] = inPosition_tc[gl_InvocationID]; outNormal_tc[gl_InvocationID] = inNormal_tc[gl_InvocationID]; outTexCoord_tc[gl_InvocationID] = inTexCoord_tc[gl_InvocationID]; if (gl_InvocationID == 0) { gl_TessLevelInner[0] = tessParams.innerLevel; gl_TessLevelOuter[0] = calculateTessLevel(inPosition_tc[1], inPosition_tc[2]); gl_TessLevelOuter[1] = calculateTessLevel(inPosition_tc[2], inPosition_tc[0]); gl_TessLevelOuter[2] = calculateTessLevel(inPosition_tc[0], inPosition_tc[1]); } }
EOF
  cat > "$output_dir/tessellation_eval.tese" << 'EOF'
#version 450
#extension GL_ARB_separate_shader_objects : enable
layout(triangles, equal_spacing, ccw) in;
layout(binding = 1) uniform UniformBufferObject_tese { mat4 model; mat4 view; mat4 proj; float time; float displacement; } ubo_tese;
layout(location = 0) in vec3 inPosition_te[]; layout(location = 1) in vec3 inNormal_te[]; layout(location = 2) in vec2 inTexCoord_te[];
layout(location = 0) out vec3 fragPosition_te; layout(location = 1) out vec3 fragNormal_te; layout(location = 2) out vec2 fragTexCoord_te;
vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2) { return gl_TessCoord.x * v0 + gl_TessCoord.y * v1 + gl_TessCoord.z * v2; }
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2) { return gl_TessCoord.x * v0 + gl_TessCoord.y * v1 + gl_TessCoord.z * v2; }
void main() { vec3 position = interpolate3D(inPosition_te[0], inPosition_te[1], inPosition_te[2]); vec3 normal = normalize(interpolate3D(inNormal_te[0], inNormal_te[1], inNormal_te[2])); vec2 texCoord = interpolate2D(inTexCoord_te[0], inTexCoord_te[1], inTexCoord_te[2]); float disp = sin(position.x * 10.0 + ubo_tese.time) * sin(position.z * 10.0 + ubo_tese.time) * ubo_tese.displacement; position += normal * disp; gl_Position = ubo_tese.proj * ubo_tese.view * ubo_tese.model * vec4(position, 1.0); fragPosition_te = vec3(ubo_tese.model * vec4(position, 1.0)); fragNormal_te = mat3(transpose(inverse(mat3(ubo_tese.model)))) * normal; fragTexCoord_te = texCoord; }
EOF
  cat > "$output_dir/explode.geom" << 'EOF'
#version 450
#extension GL_ARB_separate_shader_objects : enable
layout(triangles) in; layout(triangle_strip, max_vertices = 3) out;
layout(binding = 3) uniform GeometryParams { float magnitude; float time; } geoParams;
layout(location = 0) in vec3 inPosition_g[]; layout(location = 1) in vec3 inNormal_g[]; layout(location = 2) in vec2 inTexCoord_g[];
layout(location = 0) out vec3 fragPosition_g; layout(location = 1) out vec3 fragNormal_g; layout(location = 2) out vec2 fragTexCoord_g; layout(location = 3) out vec3 fragBaryCoords_g;
void main() { vec3 a = inPosition_g[1] - inPosition_g[0]; vec3 b = inPosition_g[2] - inPosition_g[0]; vec3 triangleNormal = normalize(cross(a, b)); float explodeFactor = geoParams.magnitude * (0.5 * sin(geoParams.time) + 0.5); vec3 explodeDirection = triangleNormal * explodeFactor; for (int i = 0; i < 3; i++) { gl_Position = gl_in[i].gl_Position + vec4(explodeDirection, 0.0); fragPosition_g = inPosition_g[i] + explodeDirection; fragNormal_g = inNormal_g[i]; fragTexCoord_g = inTexCoord_g[i]; fragBaryCoords_g = vec3(0.0); fragBaryCoords_g[i] = 1.0; EmitVertex(); } EndPrimitive(); }
EOF
  cat > "$output_dir/complex_input.vert" << 'EOF'
#version 450
#extension GL_ARB_separate_shader_objects : enable
layout(location = 0) in vec3 in_position; layout(location = 1) in vec2 in_texcoord0; layout(location = 2) in vec3 in_normal; layout(location = 3) in vec4 in_tangent; layout(location = 4) in vec4 in_color;
layout(binding = 0) uniform PerFrameUBO { mat4 view; mat4 proj; float time; vec3 cameraPos; }; layout(binding = 1) uniform PerObjectUBO { mat4 model; float roughness; float metallic; };
layout(location = 0) out vec3 v_world_pos; layout(location = 1) out vec2 v_texcoord0; layout(location = 2) out vec3 v_normal_world; layout(location = 3) out mat3 v_tbn; layout(location = 4) out vec4 v_color; layout(location = 5) out float v_intensity_discard;
void main() { vec4 world_pos_4 = model * vec4(in_position, 1.0); gl_Position = proj * view * world_pos_4; v_world_pos = world_pos_4.xyz; v_texcoord0 = in_texcoord0; mat3 normal_matrix = transpose(inverse(mat3(model))); v_normal_world = normalize(normal_matrix * in_normal); vec3 T = normalize(normal_matrix * in_tangent.xyz); vec3 B = normalize(cross(v_normal_world, T) * in_tangent.w); v_tbn = mat3(T, B, v_normal_world); v_color = in_color * (0.8 + 0.2 * sin(time + float(gl_InstanceID) * 0.1)); v_intensity_discard = 0.5 + 0.5 * cos(in_position.x * 50.0 + time + float(gl_VertexID) * 0.01); }
EOF
  cat > "$output_dir/cubemap_discard_effects.frag" << 'EOF'
#version 450
#extension GL_ARB_separate_shader_objects : enable
layout(binding = 0) uniform PerFrameUBO_Frag { mat4 view_frag; mat4 proj_frag; float time_frag; vec3 cameraPos_frag; };
layout(binding = 1) uniform PerObjectUBO_Frag { mat4 model_frag; float roughness_frag; float metallic_frag; };
layout(binding = 2) uniform samplerCube skyboxSampler; layout(binding = 3) uniform sampler2D detailSampler;
layout(location = 0) in vec3 v_world_pos; layout(location = 1) in vec2 v_texcoord0; layout(location = 2) in vec3 v_normal_world; layout(location = 3) in mat3 v_tbn; layout(location = 4) in vec4 v_color; layout(location = 5) in float v_intensity_discard;
layout(location = 0) out vec4 out_final_color;
const float PI = 3.14159265359;
float luma(vec3 color) { return dot(color, vec3(0.299, 0.587, 0.114)); }
void main() { if (v_intensity_discard < 0.15 || texture(detailSampler, v_texcoord0 * 5.0).a < 0.2) { discard; } vec3 N = normalize(v_normal_world); vec3 V = normalize(cameraPos_frag - v_world_pos); vec3 R = reflect(-V, N); vec3 sky_reflection_color = textureLod(skyboxSampler, R, roughness_frag * 8.0).rgb; vec4 base_color = v_color * texture(detailSampler, v_texcoord0); vec3 final_rgb = base_color.rgb * 0.3 + sky_reflection_color * 0.7; float dist_from_origin = length(v_world_pos); if (mod(dist_from_origin, 10.0) < 1.0) { final_rgb = pow(final_rgb, vec3(1.5)); } else if (N.z < 0.0) { final_rgb *= vec3(0.8, 0.8, 1.2); } for (int i = 0; i < 2; ++i) { final_rgb.rg = final_rgb.gr; if (luma(final_rgb) > 0.75) break; } out_final_color = vec4(final_rgb, base_color.a); }
EOF
  cat > "$output_dir/subgroup_ssbo_shared.comp" << 'EOF'
#version 450
#extension GL_KHR_shader_subgroup_ballot : require
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
struct Particle { vec4 position; vec4 velocity; uvec4 aux; };
layout(std430, binding = 0) buffer ParticlesSSBO_In { Particle particles_in[]; }; layout(std430, binding = 1) buffer ParticlesSSBO_Out { Particle particles_out[]; }; layout(std430, binding = 2) buffer AggregateResults { uint total_active; float max_speed; uint elected_particle_idx; } aggregate;
layout(binding = 3) uniform ComputeParams { float delta_time; vec3 gravity; uint particle_count; };
shared vec3 shared_positions[64]; shared float shared_speeds[64];
void main() { uint global_idx = gl_GlobalInvocationID.x; uint local_idx = gl_LocalInvocationID.x; if (global_idx >= particle_count) { return; } Particle p_in = particles_in[global_idx]; Particle p_out; p_out.velocity.xyz = p_in.velocity.xyz + gravity * delta_time; p_out.position.xyz = p_in.position.xyz + p_out.velocity.xyz * delta_time; p_out.position.w = max(0.0, p_in.position.w - delta_time); p_out.velocity.w = p_in.velocity.w; p_out.aux = p_in.aux; shared_positions[local_idx] = p_out.position.xyz; shared_speeds[local_idx] = length(p_out.velocity.xyz); barrier(); float group_max_speed = 0.0f; if (local_idx == 0) { for (uint i = 0; i < gl_WorkGroupSize.x; ++i) { group_max_speed = max(group_max_speed, shared_speeds[i]); } atomicMax(aggregate.max_speed, floatBitsToUint(group_max_speed)); } bool is_particle_active = (p_out.position.w > 0.0); uvec4 ballot = subgroupBallot(is_particle_active); if (subgroupElect()) { uint active_in_subgroup = subgroupBallotBitCount(ballot); atomicAdd(aggregate.total_active, active_in_subgroup); if (is_particle_active) { uint first_active_lane = subgroupBallotFindLSB(ballot); if (gl_SubgroupInvocationID == first_active_lane) { atomicExchange(aggregate.elected_particle_idx, global_idx); } } } if (p_out.aux.x % 2u == 0u) { for(int i=0; i<3; ++i) { p_out.velocity.xy = p_out.velocity.yx * (1.0f + float(i)*0.01f); } } particles_out[global_idx] = p_out; }
EOF
  cat > "$output_dir/invalid_syntax.vert" << 'EOF'
#version 450
layout(location = 0) in vec3 inPosition
layout(location = 1) in vec3 inColor; // Missing semicolon above
layout(location = 0) out vec3 fragColor;
void main() {
    gl_Position = vec4(inPosition, 1.0);
    fragColor = inColor
} // Missing semicolon above
EOF
  cat > "$output_dir/invalid_type.frag" << 'EOF'
#version 450
layout(location = 0) in vec3 fragColor_invalid;
layout(location = 0) out vec4 outColor_invalid;
void main() {
    outColor_invalid = fragColor_invalid; // Type mismatch: vec3 assigned to vec4
}
EOF
  cat > "$output_dir/invalid_undeclared.comp" << 'EOF'
#version 450
layout(local_size_x = 16, local_size_y = 16) in;
void main() {
    undeclaredVariable = 5.0; // Using undeclared variable
}
EOF
  echo "Successfully generated $(ls -1 "$output_dir" | wc -l) training shaders"
  return 0
}

# Function to run comprehensive training workload
# Arg 1: Absolute path to the build directory containing the binaries/libs TO RUN
# Arg 2: Workload tag string (e.g., "standard-pgo", "cs-pgo", "bolt")
# Arg 3: Absolute path to generated synthetic shaders
# Arg 4: Absolute path to workload scratch/temp directory
# Arg 5 (Optional): Absolute path to directory context for ctest (if different from Arg 1)
run_training_workload() {
  local exec_build_dir_abs="$1"
  local workload_tag="$2"
  local synthetic_shaders_dir_abs="$3"
  local workload_temp_dir_abs="$4"
  local ctest_context_dir_abs="${5:-$exec_build_dir_abs}" # Default context is exec dir

  echo ">>> Workload [$workload_tag] — Executing binaries from: $exec_build_dir_abs"

  # Define executables based on the execution directory
  local glslang_exe="$exec_build_dir_abs/StandAlone/glslangValidator"
  [[ -x "$glslang_exe" ]] || glslang_exe="$exec_build_dir_abs/StandAlone/glslang"
  local spirv_remap_exe="$exec_build_dir_abs/StandAlone/spirv-remap"

  local original_ld_path="${LD_LIBRARY_PATH:-}"
  export LD_LIBRARY_PATH="$exec_build_dir_abs/glslang:$exec_build_dir_abs/SPIRV${original_ld_path:+:$original_ld_path}"
  echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH"

  # --- 1. Run ctest (Skip for BOLT workload) ---
  if [[ "$workload_tag" != "bolt" ]]; then
    echo "Running ctest from context: $ctest_context_dir_abs"
    if [ -f "$ctest_context_dir_abs/CTestTestfile.cmake" ]; then
        (
        cd "$ctest_context_dir_abs"
        ctest -C Release -VV -j"$(nproc)" --output-on-failure || echo "Warning: ctest for [$workload_tag] reported failures."
        )
    else
        echo "Warning: Cannot run ctest, CTestTestfile.cmake not found in $ctest_context_dir_abs"
    fi
  else
      echo "Skipping ctest execution for BOLT workload."
  fi

  # --- 2. Shader Compilation Workload ---
  if [ ! -x "$glslang_exe" ]; then
    echo "Warning: glslang binary ($glslang_exe) not found. Skipping shader compilation workload."
  else
    local spv_out_dir="$workload_temp_dir_abs/spirv_output_${workload_tag}"
    rm -rf "$spv_out_dir"; mkdir -p "$spv_out_dir"

    local shader_exts=("vert" "frag" "comp" "tesc" "tese" "geom")
    local opts=("" "-Os" "-Od")
    local targets=("" "--target-env vulkan1.3" "--target-env opengl4.6")

    # CWD for build() is $srcdir/$pkgname. Need access to ./Test
    if [ -d "Test" ]; then
        echo "Processing upstream shaders from ./Test/ ..."
        find Test -type f \( -name '*.vert' -o -name '*.frag' -o -name '*.comp' -o -name '*.tesc' -o -name '*.tese' -o -name '*.geom' \) \
          | head -n 40 | while read -r shader_path; do
            local ext="${shader_path##*.}"
            [[ " ${shader_exts[*]} " =~ " ${ext} " ]] || continue
            for opt_flag in "${opts[@]}"; do
              for target_flag in "${targets[@]}"; do
                safe "$glslang_exe" $opt_flag $target_flag -S "$ext" "$shader_path"
                [[ -n "$target_flag" && -n "$opt_flag" ]] && \
                  safe "$glslang_exe" $opt_flag $target_flag -V -o \
                    "$spv_out_dir/$(basename "${shader_path%.*}").${opt_flag:-Odefault}.${target_flag// /_}.${ext}.spv" "$shader_path"
              done
            done
        done
    else
        echo "Warning: ./Test directory not found at CWD. Skipping upstream shader processing."
    fi

    echo "Processing synthetic shaders from $synthetic_shaders_dir_abs ..."
    for shader_path in "$synthetic_shaders_dir_abs"/*; do
      local base="${shader_path##*/}"; local ext="${shader_path##*.}"
      [[ " ${shader_exts[*]} " =~ " ${ext} " ]] || continue
      if [[ "$base" == invalid_* ]]; then
        safe "$glslang_exe" "$shader_path"
        continue
      fi
      for opt_flag in "${opts[@]}"; do
        for target_flag in "${targets[@]}"; do
          safe "$glslang_exe" $opt_flag $target_flag -S "$ext" "$shader_path"
          # Generate SPIR-V for all valid combinations for spirv-remap input
          safe "$glslang_exe" $opt_flag $target_flag -V -o \
            "$spv_out_dir/${base%.*}.${opt_flag:-Odefault}.${target_flag// /_}.${ext}.spv" "$shader_path"
        done
      done
    done
  fi

  # --- 3. SPIRV-Remap Workload ---
  if [ -x "$spirv_remap_exe" ]; then
    local spv_input_for_remap_dir="$workload_temp_dir_abs/spirv_output_${workload_tag}"
    if [ -d "$spv_input_for_remap_dir" ] && [ "$(find "$spv_input_for_remap_dir" -name '*.spv' -print -quit)" ]; then
      local remap_module_count=$(find "$spv_input_for_remap_dir" -name '*.spv' | wc -l)
      echo "Running spirv-remap on $remap_module_count modules..."
      local remap_output_base_dir="$workload_temp_dir_abs/spirv_remap_out_${workload_tag}"
      rm -rf "$remap_output_base_dir"; mkdir -p "$remap_output_base_dir"/{map,dce,opt,strip}
      find "$spv_input_for_remap_dir" -maxdepth 1 -name '*.spv' -print0 | while IFS= read -r -d '' spv; do
        local fname=$(basename "$spv")
        safe "$spirv_remap_exe" --map all   --input "$spv" --output "$remap_output_base_dir/map/${fname%.spv}.map.spv"
        safe "$spirv_remap_exe" --dce all   --input "$spv" --output "$remap_output_base_dir/dce/${fname%.spv}.dce.spv"
        safe "$spirv_remap_exe" --opt all   --input "$spv" --output "$remap_output_base_dir/opt/${fname%.spv}.opt.spv"
        safe "$spirv_remap_exe" --strip all --input "$spv" --output "$remap_output_base_dir/strip/${fname%.spv}.str.spv"
      done
    else
      echo "No SPIR-V files found for spirv-remap."
    fi
  else
      echo "spirv-remap binary ($spirv_remap_exe) not found. Skipping."
  fi

  export LD_LIBRARY_PATH="$original_ld_path"
  echo "<<< Workload [$workload_tag] completed."
  return 0
}

build() {
  cd "${pkgname}"

  local CFLAGS_ORIG="$CFLAGS"
  local CXXFLAGS_ORIG="$CXXFLAGS"
  local LDFLAGS_ORIG="$LDFLAGS"

  local pgo_std_profraw_dir_abs="$srcdir/pgo_standard_profraw"
  local pgo_cs_profraw_dir_abs="$srcdir/pgo_cs_profraw"
  local bolt_fdata_dir_abs="$srcdir/bolt_profile_fdata"
  local bolt_instrumented_bin_base_abs="$srcdir/bolt_instrumented_bin_base"
  local bolt_optimized_bin_dir_abs="$srcdir/bolt_optimized_bin"
  local workload_shaders_dir_abs="$srcdir/workload_shaders"
  local workload_temp_dir_abs="$srcdir/workload_temp"

  mkdir -p "$pgo_std_profraw_dir_abs" "$pgo_cs_profraw_dir_abs" "$bolt_fdata_dir_abs" \
             "$bolt_instrumented_bin_base_abs" "$bolt_optimized_bin_dir_abs" \
             "$workload_shaders_dir_abs" "$workload_temp_dir_abs"

  cleanup() { rm -f "$srcdir/clang-wrapper.sh" "$srcdir/clang++-wrapper.sh"; }
  trap cleanup EXIT

  generate_training_shaders "$workload_shaders_dir_abs"

  cat > "$srcdir/clang-wrapper.sh" << 'EOF'
#!/bin/bash
exec clang "$@" -mllvm -vp-counters-per-site=200 -mllvm -runtime-counter-relocation -mllvm -enable-value-profiling
EOF
  cat > "$srcdir/clang++-wrapper.sh" << 'EOF'
#!/bin/bash
exec clang++ "$@" -mllvm -vp-counters-per-site=200 -mllvm -runtime-counter-relocation -mllvm -enable-value-profiling
EOF
  chmod +x "$srcdir/clang-wrapper.sh" "$srcdir/clang++-wrapper.sh"

  local _common_cmake_options=(-DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_C_STANDARD=23 -DCMAKE_CXX_STANDARD=23 -DALLOW_EXTERNAL_SPIRV_TOOLS=ON -DGLSLANG_TESTS=ON)
  local _vp_flags_direct="-g3 -fno-omit-frame-pointer"

  # --- Stage 1: Standard PGO ---
  echo "Stage 1: Building with standard PGO instrumentation..."
  export LLVM_PROFILE_FILE="$pgo_std_profraw_dir_abs/%m-%p.profraw"
  local build_pgo1_dir_rel="build-pgo1-instr"

  CFLAGS="${CFLAGS_ORIG} -fprofile-generate=$pgo_std_profraw_dir_abs ${_vp_flags_direct}"
  CXXFLAGS="${CXXFLAGS_ORIG} -fprofile-generate=$pgo_std_profraw_dir_abs ${_vp_flags_direct}"
  LDFLAGS="${LDFLAGS_ORIG} -fprofile-generate=$pgo_std_profraw_dir_abs"

  cmake -B "$build_pgo1_dir_rel" -S . -GNinja -DCMAKE_BUILD_TYPE=Debug "${_common_cmake_options[@]}" -DBUILD_SHARED_LIBS=ON \
    -DCMAKE_C_COMPILER="$srcdir/clang-wrapper.sh" -DCMAKE_CXX_COMPILER="$srcdir/clang++-wrapper.sh" \
    -DCMAKE_C_FLAGS="$CFLAGS" -DCMAKE_CXX_FLAGS="$CXXFLAGS" -DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS" -DCMAKE_SHARED_LINKER_FLAGS="$LDFLAGS"
  ninja -C "$build_pgo1_dir_rel" || { echo "Error: Stage 1 PGO build failed"; return 1; }

  # Pass absolute path to build dir for workload
  run_training_workload "$PWD/$build_pgo1_dir_rel" "standard-pgo" "$workload_shaders_dir_abs" "$workload_temp_dir_abs"

  llvm-profdata merge -output="$srcdir/standard.profdata" "$pgo_std_profraw_dir_abs"/*.profraw || { echo "Error merging standard PGO data!"; return 1; }
  [[ -s "$srcdir/standard.profdata" && $(stat -c%s "$srcdir/standard.profdata") -gt 1000 ]] || { echo "Standard PGO data invalid!"; return 1; }

  # --- Stage 2: Context-Sensitive PGO ---
  echo "Stage 2: Building with context-sensitive PGO instrumentation..."
  export LLVM_PROFILE_FILE="$pgo_cs_profraw_dir_abs/%m-%p.profraw"
  local build_pgo2_dir_rel="build-pgo2-csinstr"

  CFLAGS="${CFLAGS_ORIG} -fprofile-use=$srcdir/standard.profdata -fcs-profile-generate=$pgo_cs_profraw_dir_abs ${_vp_flags_direct}"
  CXXFLAGS="${CXXFLAGS_ORIG} -fprofile-use=$srcdir/standard.profdata -fcs-profile-generate=$pgo_cs_profraw_dir_abs ${_vp_flags_direct}"
  LDFLAGS="${LDFLAGS_ORIG} -fprofile-use=$srcdir/standard.profdata -fcs-profile-generate=$pgo_cs_profraw_dir_abs"

  cmake -B "$build_pgo2_dir_rel" -S . -GNinja -DCMAKE_BUILD_TYPE=Debug "${_common_cmake_options[@]}" -DBUILD_SHARED_LIBS=ON \
    -DCMAKE_C_COMPILER="$srcdir/clang-wrapper.sh" -DCMAKE_CXX_COMPILER="$srcdir/clang++-wrapper.sh" \
    -DCMAKE_C_FLAGS="$CFLAGS" -DCMAKE_CXX_FLAGS="$CXXFLAGS" -DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS" -DCMAKE_SHARED_LINKER_FLAGS="$LDFLAGS"
  ninja -C "$build_pgo2_dir_rel" || { echo "Error: Stage 2 CS-PGO build failed"; return 1; }

  # Pass absolute path to build dir for workload
  run_training_workload "$PWD/$build_pgo2_dir_rel" "cs-pgo" "$workload_shaders_dir_abs" "$workload_temp_dir_abs"

  local cs_profraw_files=(); mapfile -t cs_profraw_files < <(find "$pgo_cs_profraw_dir_abs" -name "*.profraw")
  [[ ${#cs_profraw_files[@]} -gt 0 ]] || { echo "Error: No CS profile data found!"; return 1; }
  llvm-profdata merge -output="$srcdir/cs.profdata" "${cs_profraw_files[@]}" || { echo "Error merging CS PGO data!"; return 1; }
  llvm-profdata merge -weighted-input=1,"$srcdir/standard.profdata" -weighted-input=3,"$srcdir/cs.profdata" -output="$srcdir/merged.profdata" || { echo "Error merging final PGO data!"; return 1; }

  # --- Stage 3: Final PGO-optimized build ---
  echo "Stage 3: Building final PGO-optimized version..."
  unset LLVM_PROFILE_FILE
  local build_pgo_final_dir_rel="build-pgo-final"
  local pgo_final_build_dir_abs="$PWD/$build_pgo_final_dir_rel" # Save absolute path for BOLT

  CFLAGS="${CFLAGS_ORIG} -fprofile-use=$srcdir/merged.profdata -fno-common -ffunction-sections -fdata-sections"
  CXXFLAGS="${CXXFLAGS_ORIG} -fprofile-use=$srcdir/merged.profdata -fno-common -ffunction-sections -fdata-sections"
  LDFLAGS="${LDFLAGS_ORIG} -fprofile-use=$srcdir/merged.profdata -Wl,--gc-sections -Wl,--emit-relocs"

  cmake -B "$build_pgo_final_dir_rel" -S . -GNinja -DCMAKE_BUILD_TYPE=Release "${_common_cmake_options[@]}" -DBUILD_SHARED_LIBS=ON \
    -DCMAKE_C_FLAGS="$CFLAGS" -DCMAKE_CXX_FLAGS="$CXXFLAGS" -DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS" -DCMAKE_SHARED_LINKER_FLAGS="$LDFLAGS"
  ninja -C "$build_pgo_final_dir_rel" || { echo "Error: Final PGO build failed"; return 1; }

  # --- Stage 4: Instrument for BOLT ---
  echo "Stage 4: Instrumenting PGO-finalized binaries for BOLT..."
  local pgo_execs_to_bolt=()
  while IFS= read -r -d '' file; do
    [[ -x "$file" && ! -L "$file" ]] && file -bi "$file" | grep -q 'application/x-executable\|application/x-pie-executable' && pgo_execs_to_bolt+=("$file")
  done < <(find "$pgo_final_build_dir_abs/StandAlone" -type f -print0)

  if [ ${#pgo_execs_to_bolt[@]} -eq 0 ]; then
      echo "Warning: No PGO executables found for BOLT. Skipping BOLT." && touch "$srcdir/BOLT_SKIPPED" && return 0
  fi

  rm -rf "$bolt_instrumented_bin_base_abs"; mkdir -p "$bolt_instrumented_bin_base_abs/StandAlone" \
                                                 "$bolt_instrumented_bin_base_abs/glslang" \
                                                 "$bolt_instrumented_bin_base_abs/SPIRV"

  for pgo_exec_path in "${pgo_execs_to_bolt[@]}"; do
    local bin_name=$(basename "$pgo_exec_path")
    echo "Instrumenting for BOLT: $bin_name"
    if ! llvm-bolt "$pgo_exec_path" --instrument --lite=false --instrumentation-file-append-pid \
         --instrumentation-file="$bolt_fdata_dir_abs/prof.fdata" \
         -o "$bolt_instrumented_bin_base_abs/StandAlone/$bin_name"; then
      echo "Warning: BOLT instrumentation failed for $bin_name. Copying PGO version." && cp "$pgo_exec_path" "$bolt_instrumented_bin_base_abs/StandAlone/$bin_name"
    fi
  done

  cp -aL "$pgo_final_build_dir_abs/glslang"/*.so* "$bolt_instrumented_bin_base_abs/glslang/" 2>/dev/null || true
  cp -aL "$pgo_final_build_dir_abs/SPIRV"/*.so* "$bolt_instrumented_bin_base_abs/SPIRV/" 2>/dev/null || true

  # Run workload using the instrumented binaries
  # Pass the absolute path to the instrumented binaries dir as the first arg
  run_training_workload "$bolt_instrumented_bin_base_abs" "bolt" "$workload_shaders_dir_abs" "$workload_temp_dir_abs"
  # Note: PATH manipulation is NOT needed here as run_training_workload now uses the first arg to find executables.

  local bolt_fdata_files=(); mapfile -t bolt_fdata_files < <(find "$bolt_fdata_dir_abs" -name "prof.fdata*" -type f)
  if [ ${#bolt_fdata_files[@]} -eq 0 ]; then
    echo "Warning: No BOLT profile data files found. Skipping BOLT optimization." && touch "$srcdir/BOLT_SKIPPED" && return 0
  fi
  if ! merge-fdata "${bolt_fdata_files[@]}" > "$bolt_fdata_dir_abs/merged.fdata"; then
    echo "Error: Failed to merge BOLT profile data! Skipping BOLT optimization." && touch "$srcdir/BOLT_SKIPPED" && return 0
  fi
  [[ -s "$bolt_fdata_dir_abs/merged.fdata" ]] || { echo "Warning: Merged BOLT data empty! Skipping BOLT."; touch "$srcdir/BOLT_SKIPPED"; return 0; }

  # --- Stage 5: Optimize with BOLT ---
  echo "Stage 5: Optimizing with BOLT..."
  rm -rf "$bolt_optimized_bin_dir_abs"; mkdir -p "$bolt_optimized_bin_dir_abs"

  local bolt_common_opts=(--data "$bolt_fdata_dir_abs/merged.fdata" --dyno-stats --use-gnu-stack)
  local bolt_aggressive_opts=("${bolt_common_opts[@]}" --lite=false --icf=all --plt=all --peepholes=all \
    --x86-strip-redundant-address-size --indirect-call-promotion=all --reorder-blocks=ext-tsp \
    --reorder-functions=cdsort --split-all-cold --split-eh --split-functions --split-strategy=cdsplit --hugify)

  for pgo_exec_path in "${pgo_execs_to_bolt[@]}"; do # Optimize the original PGO binaries using the collected data
    local bin_name=$(basename "$pgo_exec_path")
    echo "BOLT-optimizing: $bin_name"
    local bolt_log="$bolt_optimized_bin_dir_abs/${bin_name}.bolt.log"
    if ! llvm-bolt "$pgo_exec_path" "${bolt_aggressive_opts[@]}" -o "$bolt_optimized_bin_dir_abs/$bin_name" > "$bolt_log" 2>&1; then
      echo "Warning: Aggressive BOLT failed for $bin_name. Check log. Trying basic..."
      if ! llvm-bolt "$pgo_exec_path" "${bolt_common_opts[@]}" -o "$bolt_optimized_bin_dir_abs/$bin_name" >> "$bolt_log" 2>&1; then
        echo "Error: Basic BOLT also failed for $bin_name. Using PGO version." && cp "$pgo_exec_path" "$bolt_optimized_bin_dir_abs/$bin_name"
      fi
    fi
    if [ -f "$bolt_optimized_bin_dir_abs/$bin_name" ] && [ -x "$bolt_optimized_bin_dir_abs/$bin_name" ]; then
        echo "BOLT success for $bin_name. PGO size: $(stat -c%s "$pgo_exec_path"), BOLT size: $(stat -c%s "$bolt_optimized_bin_dir_abs/$bin_name")"
    else
        echo "Error: BOLT output missing/invalid for $bin_name. Using PGO version." && cp "$pgo_exec_path" "$bolt_optimized_bin_dir_abs/$bin_name"
    fi
  done
  echo "BOLT logs in $bolt_optimized_bin_dir_abs/*.bolt.log"
}

# --- package() function (unchanged from previous correct version) ---
package() {
  cd "${pkgname}"

  local pgo_final_build_dir_rel="build-pgo-final"

  echo "Installing PGO-optimized files from '$pgo_final_build_dir_rel'..."
  DESTDIR="${pkgdir}" cmake --install "$pgo_final_build_dir_rel"

  if [ -f "$srcdir/BOLT_SKIPPED" ]; then
    echo "BOLT optimization was skipped. Package contains PGO-optimized executables."
  elif [ -d "$srcdir/bolt_optimized_bin" ] && [ "$(ls -A "$srcdir/bolt_optimized_bin" 2>/dev/null)" ]; then
    echo "Overlaying PGO executables with BOLT-optimized versions..."
    find "$srcdir/bolt_optimized_bin" -maxdepth 1 -type f -executable -print0 | while IFS= read -r -d '' bolt_binary_path; do
      local bin_name=$(basename "$bolt_binary_path")
      if [ -d "${pkgdir}/usr/bin" ]; then
        echo "Installing BOLT executable: $bin_name"
        install -Dm755 "$bolt_binary_path" "${pkgdir}/usr/bin/$bin_name"
      else
        echo "Warning: ${pkgdir}/usr/bin not found for BOLT binary $bin_name."
      fi
    done
  else
    echo "No BOLT-optimized executables found or dir empty. Package contains PGO-optimized executables."
  fi

  install -Dm644 LICENSE.txt "${pkgdir}/usr/share/licenses/${pkgname}/LICENSE"

  echo "Relying on CMake for library symlinks. Verify if correct."

  if [ -d "${pkgdir}/usr/bin" ] && [ -f "${pkgdir}/usr/bin/glslang" ]; then
    ln -sf glslang "${pkgdir}/usr/bin/glslangValidator"
  fi

  local should_strip=true
  for opt in "${options[@]}"; do
    if [[ "$opt" == "!strip" ]]; then
      should_strip=false
      break
    fi
  done

  if $should_strip; then
    echo "Stripping ELF files..."
    find "$pkgdir" -type f -print0 | while IFS= read -r -d '' file_to_strip; do
      if [ -L "$file_to_strip" ]; then continue; fi
      if file -bi "$file_to_strip" | grep -qE 'application/(x-executable|x-sharedlib|x-pie-executable)'; then
        if llvm-strip --strip-unneeded "$file_to_strip" &>/dev/null || llvm-strip --strip-all "$file_to_strip" &>/dev/null; then
          :
        else
          echo "Warning: Failed to strip $file_to_strip"
        fi
      fi
    done
  else
    echo "Skipping stripping as '!strip' option is set."
  fi
}
