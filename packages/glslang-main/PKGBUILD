pkgname=glslang
pkgver=15.2.0
pkgrel=8.1
pkgdesc="OpenGL and OpenGL ES shader front end and validator"
arch=('x86_64')
url="https://github.com/KhronosGroup/glslang"
license=('BSD')
depends=('gcc-libs' 'spirv-tools')
makedepends=('cmake' 'ninja' 'spirv-headers' 'python' 'llvm' 'clang')
provides=("${pkgname}=${pkgver}")
options=(staticlibs)

source=("${pkgname}-${pkgver}.tar.gz::https://github.com/KhronosGroup/glslang/archive/refs/tags/v${pkgver}.tar.gz")
sha256sums=('1c4d0a5a38c8aaf89a2d7e6093be734320599f5a6775b2726beeb05b0c054e66')

# =============================================================================
# Helper Function: Generate Comprehensive Synthetic Shaders for Gaming Workload
# =============================================================================
generate_training_shaders() {
  local output_dir="$1"
  msg2 "Generating comprehensive synthetic GLSL shaders for training in $output_dir..."
  mkdir -p "$output_dir"
  # --- Minimal & Basic Cases ---
  cat >"$output_dir/minimal.vert" <<'EOF'
#version 460 core
layout(location=0) in vec3 in_pos;
void main() { gl_Position = vec4(in_pos, 1.0); }
EOF
  cat >"$output_dir/minimal.frag" <<'EOF'
#version 460 core
layout(location=0) out vec4 out_color;
void main() { out_color = vec4(0.0, 1.0, 0.0, 1.0); }
EOF
  # --- Standard Pipeline Stages with More Features ---
  cat >"$output_dir/instanced_animated.vert" <<'EOF'
#version 460 core
#extension GL_ARB_separate_shader_objects : enable
struct InstanceData { mat4 modelMatrix; vec4 colorMultiplier; };
layout(binding = 0) uniform SceneUBO { mat4 view; mat4 proj; float time; } scene;
layout(binding = 1) readonly buffer InstanceSSBO { InstanceData instances[]; };
layout(location = 0) in vec3 in_position; layout(location = 1) in vec3 in_normal; layout(location = 2) in vec2 in_texcoord; layout(location = 3) in vec3 in_tangent;
layout(location = 0) out vec3 v_position_world; layout(location = 1) out vec3 v_normal_world; layout(location = 2) out vec2 v_texcoord; layout(location = 3) out mat3 v_tbn; layout(location = 4) out vec4 v_color_mult;
void main() { InstanceData data = instances[gl_InstanceID]; vec3 pos = in_position; pos.y += sin(scene.time * 3.0 + in_position.x * 5.0 + float(gl_InstanceID) * 0.1) * 0.1; mat4 model = data.modelMatrix; mat4 model_view = scene.view * model; v_position_world = vec3(model * vec4(pos, 1.0)); mat3 normal_mtx = transpose(inverse(mat3(model))); v_normal_world = normalize(normal_mtx * in_normal); vec3 T = normalize(normal_mtx * in_tangent); vec3 N = v_normal_world; T = normalize(T - dot(T, N) * N); vec3 B = cross(N, T); v_tbn = mat3(T, B, N); v_texcoord = in_texcoord; v_color_mult = data.colorMultiplier; gl_Position = scene.proj * model_view * vec4(pos, 1.0); }
EOF
  cat >"$output_dir/pbr_normal_shadow.frag" <<'EOF'
#version 460 core
#extension GL_ARB_separate_shader_objects : enable
struct Material { vec3 albedo; float metallic; float roughness; float ao; }; struct Light { vec3 position; vec3 color; float intensity; };
layout(binding = 2) uniform MaterialUBO { Material material; }; layout(binding = 3) uniform LightUBO { Light lights[4]; vec3 viewPos; int lightCount; };
layout(binding = 4) uniform sampler2D albedoMap; layout(binding = 5) uniform sampler2D normalMap; layout(binding = 6) uniform sampler2D mraoMap; layout(binding = 7) uniform sampler2DShadow shadowMap;
uniform mat4 lightSpaceMatrix; layout(location = 0) in vec3 v_pos; layout(location = 1) in vec3 v_norm; layout(location = 2) in vec2 v_uv; layout(location = 3) in mat3 v_tbn; layout(location = 4) in vec4 v_colMult;
layout(location = 0) out vec4 out_color; const float PI = 3.14159265359;
float D_GGX(vec3 N, vec3 H, float r) { float a2=r*r*r*r; float NdotH=max(dot(N,H),0.0); float d=(NdotH*NdotH)*(a2-1.0)+1.0; return a2/max(PI*d*d,0.001); }
float G_Schlick(float NdotV, float r) { float k=pow(r+1.0,2.0)/8.0; return NdotV/(NdotV*(1.0-k)+k); }
vec3 F_Schlick(float cosT, vec3 F0) { return F0+(1.0-F0)*pow(clamp(1.0-cosT,0.0,1.0),5.0); }
float shadowFactor(vec3 posWS, vec3 N, vec3 L){ vec4 posLS=lightSpaceMatrix*vec4(posWS,1.0); vec3 P=posLS.xyz/posLS.w*0.5+0.5; if(P.z>1.0) return 0.0; float bias=max(0.005*(1.0-dot(N,L)),0.0005); return texture(shadowMap,vec3(P.xy,P.z-bias)); }
void main(){ vec3 albedo=texture(albedoMap,v_uv).rgb*material.albedo; vec3 mrao=texture(mraoMap,v_uv).rgb; float metallic=mrao.r*material.metallic; float roughness=clamp(mrao.g*material.roughness,0.05,1.0); float ao=mrao.b*material.ao; vec3 N=normalize(v_tbn*(texture(normalMap,v_uv).xyz*2.0-1.0)); vec3 V=normalize(viewPos-v_pos); vec3 F0=mix(vec3(0.04),albedo,metallic); vec3 Lo=vec3(0); for(int i=0;i<lightCount;i++){ vec3 L=normalize(lights[i].position-v_pos); vec3 H=normalize(V+L); float dist=length(lights[i].position-v_pos); float atten=lights[i].intensity/(dist*dist); vec3 radiance=lights[i].color*atten; float NdotL=max(dot(N,L),0.0); vec3 F=F_Schlick(max(dot(H,V),0.0),F0); float G=G_Schlick(max(dot(N,V),0.0),roughness)*G_Schlick(NdotL,roughness); float D=D_GGX(N,H,roughness); vec3 num=D*F*G; float den=4.0*max(dot(N,V),0.0)*NdotL+0.001; vec3 spec=num/den; vec3 kS=F; vec3 kD=(1.0-kS)*(1.0-metallic); float sh=1.0-shadowFactor(v_pos,N,L); Lo+=(kD*albedo/PI+spec)*radiance*NdotL*sh; } vec3 ambient=vec3(0.03)*albedo*ao; vec3 color=(ambient+Lo)*v_colMult.rgb; color=color/(color+vec3(1.0)); color=pow(color,vec3(1.0/2.2)); out_color=vec4(color,1.0); }
EOF
  # --- tessellation + geometry + compute shaders ---
  cat >"$output_dir/tessellation.tesc" <<'EOF'
#version 460 core
layout(vertices=3) out; layout(location=0)in vec3 pIn[]; layout(location=0)out vec3 pOut[];
layout(push_constant)uniform P{float inner;float outer;}pc;
void main(){pOut[gl_InvocationID]=pIn[gl_InvocationID]; if(gl_InvocationID==0){gl_TessLevelInner[0]=pc.inner;gl_TessLevelOuter[0]=pc.outer;gl_TessLevelOuter[1]=pc.outer;gl_TessLevelOuter[2]=pc.outer;}}
EOF
  cat >"$output_dir/tessellation.tese" <<'EOF'
#version 460 core
layout(triangles,equal_spacing,cw)in; layout(push_constant)uniform M{mat4 mvp;}m; layout(location=0)in vec3 pIn[];
void main(){vec3 p=gl_TessCoord.x*pIn[0]+gl_TessCoord.y*pIn[1]+gl_TessCoord.z*pIn[2]; gl_Position=m.mvp*vec4(p,1);}
EOF
  cat >"$output_dir/explode.geom" <<'EOF'
#version 460 core
layout(triangles) in; layout(triangle_strip,max_vertices=3) out; layout(push_constant)uniform G{float mag;}g;
void main(){vec3 n=normalize(cross(gl_in[1].gl_Position.xyz-gl_in[0].gl_Position.xyz, gl_in[2].gl_Position.xyz-gl_in[0].gl_Position.xyz))*g.mag; for(int i=0;i<3;i++){gl_Position=gl_in[i].gl_Position+vec4(n,0);EmitVertex();} EndPrimitive();}
EOF
  cat >"$output_dir/blur.comp" <<'EOF'
#version 450
layout(local_size_x=8,local_size_y=8)in; layout(binding=0,rgba8) uniform image2D img;
void main(){ivec2 id=ivec2(gl_GlobalInvocationID.xy); vec4 s=vec4(0); for(int y=-1;y<=1;y++) for(int x=-1;x<=1;x++) s+=imageLoad(img,id+ivec2(x,y)); imageStore(img,id,s/9.0);}
EOF
  cat >"$output_dir/visualize_normals.geom" <<'EOF'
#version 460 core
layout(triangles) in; layout(line_strip,max_vertices=6) out; layout(location=0) in vec3 v_pos[]; layout(location=1) in vec3 v_norm[];
layout(binding = 0) uniform U{mat4 vp;float len;vec4 col;}u; layout(location=0) out vec4 g_col;
void main(){for(int i=0;i<3;i++){ vec3 p=v_pos[i],n=normalize(v_norm[i]); gl_Position=u.vp*vec4(p,1); g_col=vec4(1); EmitVertex(); gl_Position=u.vp*vec4(p+n*u.len,1); g_col=u.col; EmitVertex(); EndPrimitive();}}
EOF
  # --- Intentionally invalid shaders ---
  cat >"$output_dir/invalid_syntax_v2.vert" <<'EOF'
#version 460 core layout(location=0) in vec3 P void main(){gl_Position=vec4(P,1);}
EOF
  cat >"$output_dir/invalid_type_v2.frag" <<'EOF'
#version 460 core layout(location=0) out vec4 O; void main(){O=vec3(1);}
EOF
  cat >"$output_dir/invalid_undeclared_v2.comp" <<'EOF'
#version 460 core layout(local_size_x=1) in; void main(){unknown_var=1.0;}
EOF
  cat >"$output_dir/invalid_qualifier.vert" <<'EOF'
#version 460 core layout(location=0) in vec3 pos; layout(location=0) out float value_out; void main(){gl_Position=vec4(pos,1);value_out=1.0;}
EOF
  cat >"$output_dir/invalid_qualifier.frag" <<'EOF'
#version 460 core layout(location=0) flat in int value_in; layout(location=0) out vec4 color; void main(){color=vec4(float(value_in));}
EOF
  cat >"$output_dir/invalid_builtin.frag" <<'EOF'
#version 460 core layout(location=0) out vec4 color; void main(){gl_FragCoord=vec4(0);color=vec4(1);}
EOF

  msg "Generated $(ls -1 "$output_dir" | wc -l) shaders."
  return 0
}

# =============================================================================
# Helper Function: Run Training Workload (robust – per‑file spirv‑remap)
# =============================================================================
run_training_workload() {
  local build_dir=$1          # build directory that contains StandAlone/*
  local tag=$2                # label: standard‑pgo / cs‑pgo
  local shaders_dir=$3        # directory from generate_training_shaders
  local tmp_dir=$4            # scratch directory for this run

  msg2 ">>> Workload [$tag]  —  build=$build_dir"

  # ──────────────────────────────────────────────────────────────────────────
  # Locate tools
  # ──────────────────────────────────────────────────────────────────────────
  local glslang_bin="$build_dir/StandAlone/glslangValidator"
  [[ -x $glslang_bin ]] || glslang_bin="$build_dir/StandAlone/glslang"
  local remap_bin="$build_dir/StandAlone/spirv-remap"

  # ──────────────────────────────────────────────────────────────────────────
  # Prepare environment
  # ──────────────────────────────────────────────────────────────────────────
  local old_ld="${LD_LIBRARY_PATH:-}" # Store original safely
  export LD_LIBRARY_PATH="$build_dir/glslang:$build_dir/SPIRV${old_ld:+:$old_ld}"
  msg "LD_LIBRARY_PATH=$LD_LIBRARY_PATH"

  safe() { ( timeout 10s "$@" >/dev/null 2>&1 ) || true ; } # Add timeout to safe wrapper

  # ──────────────────────────────────────────────────────────────────────────
  # 1. Integrated tests (ctest)
  # ──────────────────────────────────────────────────────────────────────────
  # This now runs for both PGO stages
  msg2 "[$tag] Running ctest..."
  ( cd "$build_dir" && ctest -j"$(nproc)" --output-on-failure -C Release || warning "ctest failed for $tag run" )

  # If validator is missing we can’t continue extended workload
  if [[ ! -x $glslang_bin ]]; then
    warning "glslang binary ($glslang_bin) not found in $build_dir – extended workload skipped."
    export LD_LIBRARY_PATH="$old_ld"
    return 0
  fi

  # ──────────────────────────────────────────────────────────────────────────
  # 2. Compile shader corpus
  # ──────────────────────────────────────────────────────────────────────────
  local spv_dir="$tmp_dir/spirv"
  rm -rf "$spv_dir"; mkdir -p "$spv_dir"

  local shader_types=(vert frag comp tesc tese geom)
  local opt_levels=("" "-Os" "-Od")
  local targets=("" "--target-env vulkan1.2" "--target-env opengl4.5")

  in_array() { local k=$1; shift; for e; do [[ $e == "$k" ]] && return 0; done; return 1; }

  # ---- Upstream Test/ shaders (cap to 50 for speed) ----
  local test_root="$srcdir/${pkgname}-${pkgver}/Test"
  msg2 "[$tag] Compiling ~50 upstream shaders …"
  find "$test_root" -type f \( -name '*.vert' -o -name '*.frag' -o -name '*.comp' \
       -o -name '*.tesc' -o -name '*.tese' -o -name '*.geom' \) \
       | head -n 50 | while read -r sh; do
        ext=${sh##*.}
        in_array "$ext" "${shader_types[@]}" || continue
        for opt in "${opt_levels[@]}"; do
          for tgt in "${targets[@]}"; do
            safe "$glslang_bin" $opt $tgt -S "$ext" "$sh" # Safe already includes timeout
            [[ -n $tgt ]] && safe "$glslang_bin" $opt $tgt -V -o \
              "$spv_dir/$(basename "$sh").${opt:-O0}.${tgt// /_}.spv" "$sh"
          done
        done
  done

  # ---- Synthetic shaders from generator ----
  msg2 "[$tag] Compiling synthetic shaders …"
  for sh in "$shaders_dir"/*; do
    base=${sh##*/}; ext=${sh##*.}
    in_array "$ext" "${shader_types[@]}" || continue

    if [[ $base == invalid_* ]]; then
      safe "$glslang_bin" "$sh" # Safe already includes timeout
      continue
    fi

    for opt in "${opt_levels[@]}"; do
      for tgt in "${targets[@]}"; do
        safe "$glslang_bin" $opt $tgt -S "$ext" "$sh" # Safe already includes timeout
        [[ -n $tgt ]] && safe "$glslang_bin" $opt $tgt -V -o \
          "$spv_dir/${base}.${opt:-O0}.${tgt// /_}.spv" "$sh"
      done
    done
  done

  # ──────────────────────────────────────────────────────────────────────────
  # 3. spirv‑remap (per‑file to avoid directory crash)
  # ──────────────────────────────────────────────────────────────────────────
  if [[ -x $remap_bin ]] && find "$spv_dir" -maxdepth 1 -name '*.spv' -print -quit | grep -q .; then
    msg2 "[$tag] Running spirv‑remap on $(find "$spv_dir" -name '*.spv' | wc -l) modules …"
    mkdir -p "$spv_dir/remap"
    find "$spv_dir" -maxdepth 1 -name '*.spv' -print0 | while IFS= read -r -d '' spv; do
      fname=$(basename "$spv")
      # Safe already includes timeout
      safe "$remap_bin" --map all   --input "$spv" --output "$spv_dir/remap/${fname%.spv}.map.spv"
      safe "$remap_bin" --dce all   --input "$spv" --output "$spv_dir/remap/${fname%.spv}.dce.spv"
      safe "$remap_bin" --opt all   --input "$spv" --output "$spv_dir/remap/${fname%.spv}.opt.spv"
      safe "$remap_bin" --strip all --input "$spv" --output "$spv_dir/remap/${fname%.spv}.str.spv"
    done
  else
    warning "spirv-remap missing or no SPIR‑V files produced."
  fi

  export LD_LIBRARY_PATH="$old_ld"
  msg2 "<<< Workload [$tag] completed."
}

# =============================================================================
# Build Function
# =============================================================================
build() {
  cd "${pkgname}-${pkgver}"

  # --- Configuration ---
  local _arch_cflags="$CFLAGS"
  local _arch_cxxflags="$CXXFLAGS"
  local _arch_ldflags="$LDFLAGS"

  export CC=clang
  export CXX=clang++

  local _profraw_dir_std="$srcdir/profraw_standard"
  local _profraw_dir_cs="$srcdir/profraw_cs"
  local _profdata_std="$srcdir/standard.profdata"
  local _profdata_cs="$srcdir/cs.profdata"
  local _profdata_merged="$srcdir/merged.profdata"
  local _build_dir_pgo1="$srcdir/build-pgo1-instr"
  local _build_dir_pgo2="$srcdir/build-pgo2-csinstr"
  local _build_dir_pgo_final="$srcdir/build-pgo-final"
  # REMOVED BOLT Dirs: _bolt_profile_dir, _bolt_profile_merged, _bolt_build_instr, _bolt_build_optim
  local _workload_shaders_dir="$srcdir/workload_shaders"
  local _workload_temp_dir="$srcdir/workload_temp"

  # REMOVED BOLT skip arrays

  mkdir -p "$_profraw_dir_std" "$_profraw_dir_cs" \
             "$_workload_shaders_dir" "$_workload_temp_dir" # Removed BOLT dirs

  generate_training_shaders "$_workload_shaders_dir"

  local _common_cmake_options=(
    -DCMAKE_INSTALL_PREFIX=/usr
    -DCMAKE_C_STANDARD=23
    -DCMAKE_CXX_STANDARD=23
    -DALLOW_EXTERNAL_SPIRV_TOOLS=ON
    -DGLSLANG_TESTS=ON
    -DBUILD_SHARED_LIBS=ON
  )
  local _vp_flags="-g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=128 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"

  # --- Stage 1: Standard PGO Instrumentation Build ---
  msg2 "Stage 1: Building with standard PGO instrumentation..."
  export LLVM_PROFILE_FILE="$_profraw_dir_std/%m-%p.profraw"
  CFLAGS="${_arch_cflags} -fprofile-generate=$_profraw_dir_std ${_vp_flags}"
  CXXFLAGS="${_arch_cxxflags} -fprofile-generate=$_profraw_dir_std ${_vp_flags}"
  LDFLAGS="${_arch_ldflags} -fprofile-generate=$_profraw_dir_std"
  cmake -B "$_build_dir_pgo1" -GNinja -DCMAKE_BUILD_TYPE=Debug "${_common_cmake_options[@]}" \
    -DCMAKE_C_FLAGS="$CFLAGS" -DCMAKE_CXX_FLAGS="$CXXFLAGS" \
    -DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS" -DCMAKE_SHARED_LINKER_FLAGS="$LDFLAGS"
  ninja -C "$_build_dir_pgo1" || return 1

  # --- Stage 1: Run Workload ---
  run_training_workload "$_build_dir_pgo1" "standard-pgo" "$_workload_shaders_dir" "$_workload_temp_dir"

  # --- Stage 1: Merge Profile Data ---
  msg2 "Stage 1: Merging standard PGO profile data..."
  llvm-profdata merge -output="$_profdata_std" "$_profraw_dir_std"/*.profraw || return 1
  [[ -s "$_profdata_std" && $(stat -c%s "$_profdata_std") -gt 1000 ]] || { error "Standard PGO profile data invalid!"; return 1; }


  # --- Stage 2: Context-Sensitive PGO Instrumentation Build ---
  msg2 "Stage 2: Building with context-sensitive PGO instrumentation..."
  export LLVM_PROFILE_FILE="$_profraw_dir_cs/%m-%p.profraw"
  CFLAGS="${_arch_cflags} -fprofile-use=$_profdata_std -fcs-profile-generate=$_profraw_dir_cs ${_vp_flags}"
  CXXFLAGS="${_arch_cxxflags} -fprofile-use=$_profdata_std -fcs-profile-generate=$_profraw_dir_cs ${_vp_flags}"
  LDFLAGS="${_arch_ldflags} -fprofile-use=$_profdata_std -fcs-profile-generate=$_profraw_dir_cs"
  cmake -B "$_build_dir_pgo2" -GNinja -DCMAKE_BUILD_TYPE=Debug "${_common_cmake_options[@]}" \
    -DCMAKE_C_FLAGS="$CFLAGS" -DCMAKE_CXX_FLAGS="$CXXFLAGS" \
    -DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS" -DCMAKE_SHARED_LINKER_FLAGS="$LDFLAGS"
  ninja -C "$_build_dir_pgo2" || return 1

  # --- Stage 2: Run Workload ---
  run_training_workload "$_build_dir_pgo2" "cs-pgo" "$_workload_shaders_dir" "$_workload_temp_dir"

  # --- Stage 2: Merge Profile Data ---
  msg2 "Stage 2: Merging context-sensitive PGO profile data..."
  local _cs_profraw_files=()
  mapfile -t _cs_profraw_files < <(find "$_profraw_dir_cs" -name "*.profraw")
  [[ ${#_cs_profraw_files[@]} -gt 0 ]] || { error "No CS profile data (*.profraw) found!"; return 1; }
  msg "Found ${#_cs_profraw_files[@]} CS profile data files."
  llvm-profdata merge -output="$_profdata_cs" "${_cs_profraw_files[@]}" || return 1
  [[ -s "$_profdata_cs" && $(stat -c%s "$_profdata_cs") -gt 100 ]] || { error "Merged CS profile data invalid!"; return 1; }

  msg2 "Stage 2: Merging CS and Standard profile data with weighting..."
  llvm-profdata merge -output="$_profdata_merged" -weighted-input=1,"$_profdata_std" -weighted-input=3,"$_profdata_cs" || return 1
  [[ -s "$_profdata_merged" ]] || { error "Final merged PGO profile data invalid!"; return 1; }


  # --- Stage 3: Final PGO-Optimized Build ---
  msg2 "Stage 3: Building final version optimized with PGO data..."
  unset LLVM_PROFILE_FILE
  CFLAGS="${_arch_cflags} -fprofile-use=$_profdata_merged"
  CXXFLAGS="${_arch_cxxflags} -fprofile-use=$_profdata_merged"
  # REMOVED: -Wl,--emit-relocs from LDFLAGS as BOLT is removed
  LDFLAGS="${_arch_ldflags} -fprofile-use=$_profdata_merged"
  cmake -B "$_build_dir_pgo_final" -GNinja -DCMAKE_BUILD_TYPE=Release "${_common_cmake_options[@]}" \
    -DCMAKE_C_FLAGS="$CFLAGS" -DCMAKE_CXX_FLAGS="$CXXFLAGS" \
    -DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS" -DCMAKE_SHARED_LINKER_FLAGS="$LDFLAGS"
  ninja -C "$_build_dir_pgo_final" || return 1

  msg2 "PGO build process completed."
}

# =============================================================================
# Package Function
# =============================================================================
package() {
  cd "${pkgname}-${pkgver}"
  local _build_dir_pgo_final="$srcdir/build-pgo-final"
  # REMOVED: _bolt_build_optim variable

  # Install the PGO-optimized version using CMake install
  msg2 "Installing PGO-optimized files..."
  DESTDIR="$pkgdir" cmake --install "$_build_dir_pgo_final"

  # Install license
  install -Dm644 LICENSE.txt "${pkgdir}/usr/share/licenses/${pkgname}/LICENSE"

  # Create glslangValidator symlink (standard practice)
  if [[ -f "$pkgdir/usr/bin/glslang" ]]; then
    ln -sf glslang "$pkgdir/usr/bin/glslangValidator"
  fi

  # Strip ELF files (robustly)
  msg2 "Stripping ELF files..."
  find "$pkgdir" -type f -print0 | while IFS= read -r -d '' file; do
    # Skip symlinks
    [[ -L "$file" ]] && continue

    # Check if it's an ELF file
    if file -b --mime-type "$file" | grep -qE 'application/(x-executable|x-sharedlib|x-pie-executable)'; then
        # Attempt stripping
        if llvm-strip --strip-unneeded "$file" &>/dev/null || llvm-strip --strip-all "$file" &>/dev/null; then
            : # Successfully stripped
        else
            warning "Failed to strip: $file"
        fi
    fi
  done
}
