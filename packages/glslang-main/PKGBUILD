pkgname=glslang
pkgver=1.4.313.0
pkgrel=10.1
pkgdesc="OpenGL and OpenGL ES shader front end and validator"
arch=('x86_64')
url='https://github.com/KhronosGroup/glslang'
license=('BSD')
depends=('gcc-libs' 'spirv-tools')
makedepends=('cmake' 'ninja' 'spirv-headers' 'python' 'llvm' 'clang')
options=('staticlibs')
source=("git+${url}.git#tag=vulkan-sdk-${pkgver}")
sha256sums=('1cb7900efba3481c0c1ccae14b50bac99d59bc9d9fd5d0764f36dd0dc62c2320')

##############################################################################
# 1.  HELPER: generate large shader corpus                                   #
##############################################################################
_generate_shaders() {           # $1 = output dir
  local out="$1"; rm -rf "$out"; mkdir -p "$out"
  echo "→ generating shaders in $out"

  # Templates with safe placeholders
  cat >"$out/t.vert" <<'V'
#version 460 core
layout(location=0) in vec3 p;
layout(push_constant) uniform PC { mat4 mvp; } pc;
void main(){ gl_Position = pc.mvp*vec4(p,1); }
V
  cat >"$out/t.frag" <<'F'
#version 460 core
layout(location=0) out vec4 c;
void main(){ c = vec4(@R,@G,@B,1); }
F
  cat >"$out/t.comp" <<'C'
#version 460 core
layout(local_size_x=@LS) in;
void main(){}
C

  for i in {0..99}; do
    cp "$out/t.vert"                       "$out/v${i}.vert"
    sed -e "s/@R/0.$((i%9))/" \
        -e "s/@G/0.$((i%7))/" \
        -e "s/@B/0.$((i%5))/" "$out/t.frag" > "$out/f${i}.frag"
    sed  "s/@LS/$((16+i%96))/"              "$out/t.comp" > "$out/c${i}.comp"
  done

  # Additional malformed shaders to hit error paths
  cat >"$out/invalid.vert" <<'BAD'
#version 460
layout(location=0) in vec3 p   // missing semicolon
void main(){ gl_Position = vec4(p,1); }
BAD
}

##############################################################################
# 2.  HELPER: run comprehensive workload against freshly built glslang       #
##############################################################################
_run_workload() {               # $1=builddir
  local bdir="$1"; echo ":: workload using $bdir"
  local glslv="$bdir/StandAlone/glslangValidator"
  [[ -x $glslv ]] || { echo "!! glslangValidator missing"; return 0; }

  local wroot="$srcdir/workload"
  _generate_shaders "$wroot/glsl"

  # compile GLSL → SPIR-V
  find "$wroot/glsl" -type f -name '*.*' -print0 | \
  while IFS= read -r -d '' f; do
    stage=${f##*.}; stage=${stage:0:4}
    "$glslv" -q --target-env vulkan1.3 -S "$stage" "$f" \
             -o "$f.spv" >/dev/null 2>&1 || true
  done

  # validate / optimise through spirv-tools that glslang links against
  local spirv_tools_bin="$bdir/External/spirv-tools-core/opt"
  if [[ -x $spirv_tools_bin ]]; then
    while IFS= read -r -d '' spv; do
      "$spirv_tools_bin" "$spv" -o /dev/null >/dev/null 2>&1 || true
    done < <(find "$wroot" -name '*.spv' -print0)
  fi

  # run ctest (logs suppressed, failures tolerated)
  if [[ -f $bdir/CTestTestfile.cmake ]]; then
    ( cd "$bdir"; ctest -j"$(nproc)" >/dev/null 2>&1 || true )
  fi

  rm -rf "$wroot"
}

##############################################################################
# 3.  BUILD – three-stage Context-Sensitive PGO                              #
##############################################################################
build() {
  cd glslang
  rm -rf build{,-s1,-s2}

  local base_c="$CFLAGS" base_cxx="$CXXFLAGS" base_ld="$LDFLAGS"
  local vp="-Xclang -mllvm -Xclang -vp-counters-per-site=150 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"
  local instr="-g3 -fno-omit-frame-pointer $vp"

  local cm_opts=(
    -DCMAKE_INSTALL_PREFIX=/usr
    -DBUILD_SHARED_LIBS=ON
    -DALLOW_EXTERNAL_SPIRV_TOOLS=ON
    -DGLSLANG_TESTS=ON
  )

  # Stage-1 : profile-generate
  local p1="$srcdir/p1"; mkdir -p "$p1"
  cmake -S . -B build-s1 -G Ninja "${cm_opts[@]}" -DCMAKE_BUILD_TYPE=Plain \
        -DCMAKE_C_FLAGS="$base_c -fprofile-generate=$p1 $instr" \
        -DCMAKE_CXX_FLAGS="$base_cxx -fprofile-generate=$p1 $instr" \
        -DCMAKE_EXE_LINKER_FLAGS="$base_ld -fprofile-generate=$p1"
  ninja -C build-s1
  _run_workload "$PWD/build-s1"
  llvm-profdata merge -output "$srcdir/p1.profdata" "$p1"/*.profraw

  # Stage-2 : cs-profile-generate
  local p2="$srcdir/p2"; mkdir -p "$p2"
  cmake -S . -B build-s2 -G Ninja "${cm_opts[@]}" -DCMAKE_BUILD_TYPE=Plain \
        -DCMAKE_C_FLAGS="$base_c -fprofile-use=$srcdir/p1.profdata -fcs-profile-generate=$p2 $instr" \
        -DCMAKE_CXX_FLAGS="$base_cxx -fprofile-use=$srcdir/p1.profdata -fcs-profile-generate=$p2 $instr" \
        -DCMAKE_EXE_LINKER_FLAGS="$base_ld -fprofile-use=$srcdir/p1.profdata -fcs-profile-generate=$p2"
  ninja -C build-s2
  _run_workload "$PWD/build-s2"
  llvm-profdata merge -output "$srcdir/final.profdata" "$p2"/*.profraw "$srcdir/p1.profdata"

  # Stage-3 : final
  cmake -S . -B build -G Ninja "${cm_opts[@]}" -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_C_FLAGS="$base_c -fprofile-use=$srcdir/final.profdata" \
        -DCMAKE_CXX_FLAGS="$base_cxx -fprofile-use=$srcdir/final.profdata" \
        -DCMAKE_EXE_LINKER_FLAGS="$base_ld -fprofile-use=$srcdir/final.profdata"
  ninja -C build
}

##############################################################################
check() { ( cd glslang/build && ctest -j"$(nproc)" --output-on-failure ); }

##############################################################################
package() {
  DESTDIR="$pkgdir" cmake --install glslang/build
  install -Dm644 glslang/LICENSE.txt \
          "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
  ln -sf glslang "$pkgdir/usr/bin/glslangValidator"
}
