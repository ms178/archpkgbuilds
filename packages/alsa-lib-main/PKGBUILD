# Maintainer: Your Name <your@email.com>
pkgname=alsa-lib
_pkgver=1.2.14
pkgver=$_pkgver
pkgrel=3.8
pkgdesc="An alternative implementation of Linux sound support (PGO+CS-PGO optimized)"
arch=(x86_64)
url="https://www.alsa-project.org"
license=(LGPL2.1)
depends=(
  alsa-topology-conf
  alsa-ucm-conf
  glibc
)
provides=(
  libasound.so
  libatopology.so
)
makedepends=(
  git
  clang
  llvm
  autoconf automake libtool
)
checkdepends=(
  # Add any check-only dependencies if applicable
)
install=${pkgname}.install
options=(strip)
source=(
  "$pkgname-$_pkgver::git+https://github.com/alsa-project/alsa-lib.git#tag=v$_pkgver"
)
sha512sums=('SKIP')
b2sums=('SKIP')
validpgpkeys=('F04DF50737AC1A884C4B3D718380596DA6E59C91') # ALSA project

prepare() {
  cd "$pkgname-$_pkgver"
  autoreconf -fiv
}

build() {
  cd "$pkgname-$_pkgver"

  export CC="clang"
  export CXX="clang++"

  local _original_cflags="$CFLAGS"
  local _original_cxxflags="$CXXFLAGS"
  local _original_ldflags="$LDFLAGS"
  local PGO_DATA_DIR="${srcdir}/pgo_data"
  local CS_PGO_DATA_DIR="${srcdir}/cspgo_data"
  mkdir -p "$PGO_DATA_DIR" "$CS_PGO_DATA_DIR"

  local _configure_opts=(
    --prefix=/usr
    --without-debug
  )

  # --- Stage 1: PGO Instrumentation Build ---
  msg "Stage 1: Building PGO instrumented build..."
  export CFLAGS="$_original_cflags -fprofile-generate=$PGO_DATA_DIR -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"
  export CXXFLAGS="$_original_cxxflags -fprofile-generate=$PGO_DATA_DIR -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"
  export LDFLAGS="$_original_ldflags -fprofile-generate=$PGO_DATA_DIR -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"

  ./configure "${_configure_opts[@]}" || { error "Configure failed (Stage 1)"; return 1; }
  make -j"$(nproc)" || { error "Make failed (Stage 1)"; return 1; }

  # --- Stage 1: PGO Training Run ---
  msg "Stage 1: Running PGO training (make check)..."
  export LLVM_PROFILE_FILE="${PGO_DATA_DIR}/alsa-%p_%m.profraw"
  (
    export LD_LIBRARY_PATH="${PWD}/.libs${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}"
    msg2 "Running 'make check' with LD_LIBRARY_PATH=$LD_LIBRARY_PATH"
    if ! make -k check; then
      warning "Some tests failed during PGO training (Stage 1), but proceeding."
    fi
  )
  unset LLVM_PROFILE_FILE

  # --- Merge PGO profiles ---
  msg "Stage 1: Merging PGO profiles..."
  if ! find "$PGO_DATA_DIR" -name '*.profraw' -print -quit | grep -q .; then
    error "No raw PGO profile data (*.profraw) generated. Aborting."
    return 1
  fi
  if ! llvm-profdata merge -output="${PGO_DATA_DIR}/default.profdata" "${PGO_DATA_DIR}"/*.profraw; then
    error "llvm-profdata merge failed (Stage 1). Aborting."
    return 1
  fi
  if [ ! -s "${PGO_DATA_DIR}/default.profdata" ]; then
    error "Merged PGO profile data is empty or missing (Stage 1). Aborting."
    return 1
  fi
  rm -f "${PGO_DATA_DIR}"/*.profraw

  # --- Stage 2: CS-PGO Instrumentation Build ---
  msg "Stage 2: Building CS-PGO instrumented build..."
  make distclean || warning "make distclean failed before Stage 2 configure"
  if [ ! -f configure ]; then
    msg2 "Configure script missing after distclean, running autoreconf..."
    autoreconf -fiv || { error "autoreconf failed before Stage 2 configure"; return 1; }
  fi

  export CFLAGS="$_original_cflags -fprofile-use=${PGO_DATA_DIR}/default.profdata -fcs-profile-generate=$CS_PGO_DATA_DIR -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"
  export CXXFLAGS="$_original_cxxflags -fprofile-use=${PGO_DATA_DIR}/default.profdata -fcs-profile-generate=$CS_PGO_DATA_DIR -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"
  export LDFLAGS="$_original_ldflags -fprofile-use=${PGO_DATA_DIR}/default.profdata -fcs-profile-generate=$CS_PGO_DATA_DIR -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"

  ./configure "${_configure_opts[@]}" || { error "Configure failed (Stage 2)"; return 1; }
  make -j"$(nproc)" || { error "Make failed (Stage 2)"; return 1; }

  # --- Stage 2: CS-PGO Training Run ---
  msg "Stage 2: Running CS-PGO training (make check)..."
  export LLVM_PROFILE_FILE="${CS_PGO_DATA_DIR}/alsa-cs-%p_%m.profraw"
  (
    export LD_LIBRARY_PATH="${PWD}/.libs${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}"
    msg2 "Running 'make check' with LD_LIBRARY_PATH=$LD_LIBRARY_PATH"
    if ! make -k check; then
      warning "Some tests failed during CS-PGO training (Stage 2), but proceeding."
    fi
  )
  unset LLVM_PROFILE_FILE

  # --- Merge CS-PGO profiles ---
  msg "Stage 2: Merging CS-PGO profiles..."
  if ! find "$CS_PGO_DATA_DIR" -name '*.profraw' -print -quit | grep -q .; then
    warning "No raw CS-PGO profile data (*.profraw) generated. Final build will use only Stage 1 PGO data."
    cp "${PGO_DATA_DIR}/default.profdata" "${CS_PGO_DATA_DIR}/cs.profdata" || { error "Failed to copy fallback profile data."; return 1; }
  else
    if ! llvm-profdata merge -output="${CS_PGO_DATA_DIR}/cs.profdata" "${CS_PGO_DATA_DIR}"/*.profraw "${PGO_DATA_DIR}/default.profdata"; then
      error "llvm-profdata merge failed (Stage 2). Aborting."
      return 1
    fi
    rm -f "${CS_PGO_DATA_DIR}"/*.profraw
  fi
  if [ ! -s "${CS_PGO_DATA_DIR}/cs.profdata" ]; then
    error "Final merged CS-PGO profile data is empty or missing (Stage 2). Aborting."
    return 1
  fi

  # --- Stage 3: Final Optimized Build ---
  msg "Stage 3: Building final CS-PGO optimized build..."
  make distclean || warning "make distclean failed before Stage 3 configure"
  if [ ! -f configure ]; then
      msg2 "Configure script missing after distclean, running autoreconf..."
      autoreconf -fiv || { error "autoreconf failed before Stage 3 configure"; return 1; }
  fi

  export CFLAGS="$_original_cflags -fprofile-use=${CS_PGO_DATA_DIR}/cs.profdata"
  export CXXFLAGS="$_original_cxxflags -fprofile-use=${CS_PGO_DATA_DIR}/cs.profdata"
  export LDFLAGS="$_original_ldflags -fprofile-use=${CS_PGO_DATA_DIR}/cs.profdata"

  ./configure "${_configure_opts[@]}" || { error "Configure failed (Stage 3)"; return 1; }
  make -j"$(nproc)" || { error "Make failed (Stage 3)"; return 1; }

  msg "CS-PGO build process completed successfully."
}

#check() {
#  cd "$pkgname-$_pkgver"
#  msg "Running final checks on optimized build..."
#  (
#    export LD_LIBRARY_PATH="${PWD}/.libs${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}"
#    msg2 "Running final 'make check' with LD_LIBRARY_PATH=$LD_LIBRARY_PATH"
#    if ! make -k check; then
#      error "Final 'make check' reported failures. Review test output."
#      return 1
#    fi
#  )
#}

package() {
  cd "$pkgname-$_pkgver"
  msg "Installing package..."
  make DESTDIR="${pkgdir}" install || error "make install failed"

  # Install documentation, if available
  install -d "${pkgdir}/usr/share/doc/${pkgname}/"
  for docfile in MEMORY-LEAK TODO NOTES ChangeLog doc/asoundrc.txt; do
    [ -e "$docfile" ] && install -m644 "$docfile" "${pkgdir}/usr/share/doc/${pkgname}/"
  done

  if [[ ! " ${options[@]} " =~ " !strip " ]]; then
    msg "Stripping binaries..."
    find "${pkgdir}" -type f -print0 | while IFS= read -r -d '' file; do
      if file -b --mime-type "$file" | grep -qE 'application/(x-executable|x-sharedlib)'; then
        msg2 "Stripping: $file"
        if ! llvm-strip --strip-unneeded "$file" 2>/dev/null; then
          warning "llvm-strip --strip-unneeded failed on $file"
        fi
      fi
    done
  else
    msg "Skipping stripping due to !strip option."
  fi
}
