From ee3effe6c895858d5a3c5f8845fbb23cb7471bd8 Mon Sep 17 00:00:00 2001
From: Peter Jung <admin@ptr1337.dev>
Date: Mon, 12 Dec 2022 20:47:00 +0100
Subject: [PATCH] arch/x86/Makefile

Signed-off-by: Peter Jung <admin@ptr1337.dev>
---
 arch/x86/Makefile | 28 ++++------------------------
 1 file changed, 4 insertions(+), 24 deletions(-)

diff --git a/arch/x86/Makefile b/arch/x86/Makefile
index 2d799a69918e..69c43437bc4d 100644
--- a/arch/x86/Makefile
+++ b/arch/x86/Makefile
@@ -12,25 +12,6 @@ else
         KBUILD_DEFCONFIG := $(ARCH)_defconfig
 endif
 
-ifdef CONFIG_CC_IS_GCC
-RETPOLINE_CFLAGS	:= $(call cc-option,-mindirect-branch=thunk-extern -mindirect-branch-register)
-RETPOLINE_CFLAGS	+= $(call cc-option,-mindirect-branch-cs-prefix)
-RETPOLINE_VDSO_CFLAGS	:= $(call cc-option,-mindirect-branch=thunk-inline -mindirect-branch-register)
-endif
-ifdef CONFIG_CC_IS_CLANG
-RETPOLINE_CFLAGS	:= -mretpoline-external-thunk
-RETPOLINE_VDSO_CFLAGS	:= -mretpoline
-endif
-
-ifdef CONFIG_RETHUNK
-RETHUNK_CFLAGS		:= -mfunction-return=thunk-extern
-RETPOLINE_CFLAGS	+= $(RETHUNK_CFLAGS)
-endif
-
-export RETHUNK_CFLAGS
-export RETPOLINE_CFLAGS
-export RETPOLINE_VDSO_CFLAGS
-
 # For gcc stack alignment is specified with -mpreferred-stack-boundary,
 # clang has the option -mstack-alignment for that purpose.
 ifneq ($(call cc-option, -mpreferred-stack-boundary=4),)
@@ -43,8 +24,8 @@ endif
 
 # How to compile the 16-bit code.  Note we always compile for -march=i386;
 # that way we can complain to the user if the CPU is insufficient.
-REALMODE_CFLAGS	:= -m16 -g -Os -DDISABLE_BRANCH_PROFILING -D__DISABLE_EXPORTS \
-		   -Wall -Wstrict-prototypes -march=i386 -mregparm=3 \
+REALMODE_CFLAGS	:= -m16 -g0 -O2 -DDISABLE_BRANCH_PROFILING -D__DISABLE_EXPORTS \
+		   -Wall -Wstrict-prototypes -march=native -mregparm=3 \
 		   -fno-strict-aliasing -fomit-frame-pointer -fno-pic \
 		   -mno-mmx -mno-sse $(call cc-option,-fcf-protection=none)
 
@@ -67,9 +48,8 @@ export BITS
 #
 #    https://gcc.gnu.org/bugzilla/show_bug.cgi?id=53383
 #
-KBUILD_CFLAGS += -mno-sse -mno-mmx -mno-sse2 -mno-3dnow -mno-avx -mno-avx2 \
-		   -mno-avx512f -O3
-KBUILD_RUSTFLAGS += -Ctarget-feature=-sse,-sse2,-sse3,-ssse3,-sse4.1,-sse4.2,-avx,-avx2
+KBUILD_CFLAGS += -mno-sse -mno-mmx
+KBUILD_RUSTFLAGS += -C target-cpu=native
 
 ifeq ($(CONFIG_X86_KERNEL_IBT),y)
 #
-- 
2.39.0

