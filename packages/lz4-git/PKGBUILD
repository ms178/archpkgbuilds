pkgname=lz4
epoch=1
pkgver=1.10.0
pkgrel=3.5
pkgdesc='Extremely fast compression algorithm'
arch=('x86_64')
url='https://lz4.github.io/lz4/'
license=('GPL-2.0-or-later')
makedepends=('git' 'meson' 'ninja' 'clang' 'llvm' 'lld' 'coreutils' 'tar')
checkdepends=('diffutils')
depends=('glibc')
provides=('liblz4.so')
source=("git+https://github.com/lz4/lz4.git#tag=v$pkgver?depth=1")
sha256sums=('SKIP')
options=(strip)

# --- PGO Workload Functions (User Provided) ---

# Function to generate diverse training files reflecting target workloads
generate_training_data() {
  local training_base_dir="$1"
  local training_dir="${training_base_dir}/training" # Actual files go here
  local MB_SCALE=1048576 # 1 MiB

  # Only generate if the directory doesn't exist (to reuse between stages)
  if [ -d "${training_dir}" ]; then
    echo "Training data already exists in ${training_dir}, skipping generation."
    return 0
  fi

  echo "Generating comprehensive training data in ${training_dir}..."
  mkdir -p "${training_dir}"

  # --- Compilation Workload Data ---
  echo "--> Generating Compilation Data..."
  mkdir -p "${training_dir}/compilation/projectA/src" "${training_dir}/compilation/projectA/include" "${training_dir}/compilation/projectB"
  # Simple C/C++ files
  for i in {1..50}; do
    cat <<EOF > "${training_dir}/compilation/projectA/src/module_${i}.c"
#include "header_${i}.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Function simulating some work
int process_data_${i}(const char* input) {
    if (!input) return -1;
    // printf("Processing module ${i}: %s\\n", input); // Reduce verbosity
    // Simulate allocation and string operations
    char* buffer = malloc(256);
    if (!buffer) return -1;
    strncpy(buffer, input, 255);
    buffer[255] = '\\0';
    // Some dummy calculations
    int result = 0;
    for(int j=0; j<strlen(buffer); ++j) result += buffer[j];
    free(buffer);
    return result % 100;
}

#ifndef HEADER_${i}_H
#define HEADER_${i}_H
struct DataStruct_${i} { int id; char name[64]; };
int process_data_${i}(const char* input);
#endif
EOF
    cp "${training_dir}/compilation/projectA/src/module_${i}.c" "${training_dir}/compilation/projectA/include/header_${i}.h" # Use same content for header for simplicity
  done
  # Larger source file
  cat $(find "${training_dir}/compilation/projectA/" -type f) > "${training_dir}/compilation/projectB/large_source_file.c"
  # Build Logs (simulated)
  for i in {1..5}; do
    { for j in {1..5000}; do echo "[$(date +%T.%N)] INFO: Compiling object $j for target $i..."; done;
      echo "WARNING: Linker symbol collision detected in build $i";
      for j in {1..1000}; do echo "DEBUG: Variable value $j = $((RANDOM % 1000))"; done;
      echo "ERROR: Build $i failed with exit code 1";
    } > "${training_dir}/compilation/build_log_${i}.log"
  done

  # --- Gaming Workload Data (Simulated) ---
  echo "--> Generating Gaming Data..."
  mkdir -p "${training_dir}/gaming/assets/textures" "${training_dir}/gaming/assets/models" "${training_dir}/gaming/config" "${training_dir}/gaming/scripts"
  # Textures (binary, some random, some slightly patterned)
  dd if=/dev/urandom of="${training_dir}/gaming/assets/textures/noise_1.bin" bs=1M count=10 status=none
  dd if=/dev/zero bs=1k count=1 | tr '\0' '\123\456\701' | dd bs=1M count=5 of="${training_dir}/gaming/assets/textures/pattern_1.bin" status=none
  # Models (binary)
  dd if=/dev/urandom of="${training_dir}/gaming/assets/models/character_mesh.bin" bs=1M count=8 status=none
  # Config files (text, xml/json like)
  for i in {1..20}; do
    cat <<EOF > "${training_dir}/gaming/config/settings_${i}.xml"
<settings game="Game ${i}">
  <resolution width="1920" height="1080"/>
  <graphics quality="high" vsync="true"/>
  <audio volume="0.8" device="default"/>
  <controls sensitivity="0.5">
    <keybind action="jump" key="SPACE"/>
    <keybind action="move_forward" key="W"/>
  </controls>
  <!-- Repetitive section -->
  $(yes '<data value="placeholder"/>' | head -n 500)
</settings>
EOF
  done
  # Scripts (text, lua-like)
  for i in {1..30}; do
    cat <<EOF > "${training_dir}/gaming/scripts/ai_behavior_${i}.lua"
function update_ai_${i}(entity, delta_time)
  local state = entity:get_state()
  if state == "idle" then
    entity:wander(delta_time * 5.0)
  elseif state == "attacking" then
    entity:attack_target(entity:get_target())
  end
  -- Log debugging info periodically
  -- if math.random() < 0.01 then log_debug("AI ${i} state: " .. state) end -- Reduce verbosity
end
-- Constant data table
local ai_params_${i} = { speed = 10.5, health = 100, damage = 15 }
EOF
  done

  # --- General Desktop Data ---
  echo "--> Generating Desktop Data..."
  mkdir -p "${training_dir}/desktop/documents" "${training_dir}/desktop/misc"
  # Documents (text, some repetitive)
  yes "This is a line in a long document that repeats itself for testing compression. " | head -c 5M > "${training_dir}/desktop/documents/report.txt"
  seq 1 500000 > "${training_dir}/desktop/documents/numbers.csv"
  # Misc binary data
  dd if=/dev/urandom of="${training_dir}/desktop/misc/archive_data.bin" bs=1M count=15 status=none
  # Highly compressible
  printf "%0.sX" $(seq 1 10000000) > "${training_dir}/desktop/misc/zeros_x.txt"

  # --- Pre-compressed Data ---
  # Skipping generation here for build env safety

  echo "Training data generation complete in ${training_dir}."
}
export -f generate_training_data

# Function to run comprehensive lz4 workload
run_lz4_workload() {
  local lz4_binary="$1"
  local training_data_dir="$2" # Root of the generated /training dir
  local tmp_work_dir="$3" # Base temporary directory for this run

  echo "Running comprehensive lz4 workload using: ${lz4_binary}"
  echo "Training data source: ${training_data_dir}"
  echo "Temporary work dir: ${tmp_work_dir}"

  # Try chmod first, then check
  chmod +x "${lz4_binary}" 2>/dev/null || echo "Warning: chmod failed on ${lz4_binary}"

  # Check if binary exists and is executable before proceeding
  if [ ! -x "${lz4_binary}" ]; then
      echo "Error: Cannot find or execute lz4 binary at ${lz4_binary}"
      # Add listing for context
      echo "Listing directory: $(dirname ${lz4_binary})"
      ls -l "$(dirname ${lz4_binary})" || echo "Cannot list $(dirname ${lz4_binary})"
      echo "Listing build root: $(dirname $(dirname $(dirname ${lz4_binary})))"
      ls -l "$(dirname $(dirname $(dirname ${lz4_binary})))" || echo "Cannot list $(dirname $(dirname $(dirname ${lz4_binary})))"
      return 1
  fi
  mkdir -p "${tmp_work_dir}"

  local tmp_compress_dir="${tmp_work_dir}/compressed"
  local tmp_decompress_dir="${tmp_work_dir}/decompressed"
  mkdir -p "${tmp_compress_dir}" "${tmp_decompress_dir}"

  # --- Compression Workloads ---
  msg "--> Workload: Compressing individual files (various levels)..."
  find "${training_data_dir}" \( -path "*/compilation/*" -o -path "*/gaming/*" -o -path "*/desktop/*" \) -type f -not -name '*.lz4' -print0 | \
    xargs -0 -P$(nproc) -I{} sh -c \
    '"$1" -f -1 "$2" "$3/$(basename "$2").l1.lz4"' _ "$lz4_binary" "{}" "$tmp_compress_dir"
  find "${training_data_dir}" \( -path "*/desktop/*" -o -path "*/gaming/assets/*" -o -path "*/compilation/build_log_*.log" \) -type f -not -name '*.lz4' -print0 | \
    xargs -0 -P$(nproc) -I{} sh -c \
    '"$1" -f -9 "$2" "$3/$(basename "$2").l9.lz4"' _ "$lz4_binary" "{}" "$tmp_compress_dir"

  msg "--> Workload: Simulating tar | lz4..."
  tar cf - -C "${training_data_dir}/compilation" projectA projectB | "$lz4_binary" -1 > "${tmp_compress_dir}/compilation_archive.tar.lz4" 2>/dev/null
  tar cf - -C "${training_data_dir}/gaming" assets | "$lz4_binary" -9 > "${tmp_compress_dir}/gaming_assets.tar.lz4" 2>/dev/null

  msg "--> Workload: Simulating cat | lz4..."
  cat "${training_data_dir}/desktop/documents/report.txt" | "$lz4_binary" > "${tmp_compress_dir}/report_piped.txt.lz4" 2>/dev/null
  cat "${training_data_dir}/desktop/misc/archive_data.bin" | "$lz4_binary" > "${tmp_compress_dir}/archive_data_piped.bin.lz4" 2>/dev/null


  # --- Decompression Workloads ---
  msg "--> Workload: Decompressing individual files..."
  find "${tmp_compress_dir}" -maxdepth 1 -name '*.lz4' -type f -print0 | \
    xargs -0 -P$(nproc) -I{} sh -c \
    '"$1" -d -f "$2" "$3/$(basename "$2" .lz4).decomp"' _ "$lz4_binary" "{}" "$tmp_decompress_dir" || true

  msg "--> Workload: Simulating lz4 -dc | tar xf..."
  "$lz4_binary" -dc "${tmp_compress_dir}/compilation_archive.tar.lz4" 2>/dev/null | tar xf - -C "$tmp_decompress_dir" || true
  "$lz4_binary" -dc "${tmp_compress_dir}/gaming_assets.tar.lz4" 2>/dev/null | tar xf - -C "$tmp_decompress_dir" || true

  msg "--> Workload: Simulating lz4 -dc > file..."
  "$lz4_binary" -dc "${tmp_compress_dir}/report_piped.txt.lz4" > "${tmp_decompress_dir}/report_piped.txt" 2>/dev/null || true
  "$lz4_binary" -dc "${tmp_compress_dir}/archive_data_piped.bin.lz4" > "${tmp_decompress_dir}/archive_data_piped.bin" 2>/dev/null || true


  # --- Testing Workloads ---
  msg "--> Workload: Testing (-t) files..."
  find "${tmp_compress_dir}" -maxdepth 1 -name '*.lz4' -type f -print0 | \
    xargs -0 -P$(nproc) -I{} sh -c \
    '"$1" -t "$2" >/dev/null 2>&1 || true' _ "$lz4_binary" "{}"

  echo "Comprehensive lz4 workload finished."
  # Cleanup the temporary directories for this run
  rm -rf "${tmp_compress_dir}" "${tmp_decompress_dir}"
}
export -f run_lz4_workload

# --- Standard PKGBUILD Functions ---

prepare() {
  # --- PGO/CS-PGO Toolchain Setup ---
  export CC=clang
  export CXX=clang++
  export LDFLAGS+=" -fuse-ld=lld"
  export AR=llvm-ar
  export NM=llvm-nm
  export STRIP=llvm-strip
  export OBJCOPY=llvm-objcopy
  export OBJDUMP=llvm-objdump
  export READELF=llvm-readelf
  export RANLIB=llvm-ranlib
}

build() {
  # Setup cleanup trap for temporary directories
  trap 'rm -rf "$srcdir/pgo" "$srcdir/cspgo" "$srcdir/pgo_training_data" "$srcdir/pgo_workload_tmp_stage1" "$srcdir/cspgo_workload_tmp_stage2" build' EXIT

  # Create directory for PGO profiles
  mkdir -p "$srcdir/pgo"
  # Create directory for CS-PGO profiles
  mkdir -p "$srcdir/cspgo"
  # Directory for training data (generated once)
  local _pgo_training_data_dir="$srcdir/pgo_training_data"
  # Common additional flags (User provided, do not change)
  local _common_instrument_flags=" -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"
  # Save original flags from makepkg.conf
  local _original_cflags="$CFLAGS"
  local _original_ldflags="$LDFLAGS"
  # Base Meson configure options
   local _meson_common_config_opts=(
     -Dcontrib=true
     -Dexamples=true
     -Dprograms=true
     -Db_ndebug=true
     -Db_pie=false
     -Dc_std=gnu2x
     -Dcpp_std=gnu++2a
     -Dpython.bytecompile=2
     --unity=off
     --wrap-mode=nofallback
   )
  # Meson source directory (verify this path in lz4 repo)
  local _meson_source_dir="$srcdir/$pkgname/build/meson"
  # *** CORRECTED *** Absolute path to expected binary location based on original check()
  local _lz4_binary_path="$srcdir/build/meson/programs/lz4"

  # Generate training data (will only run fully the first time)
  generate_training_data "$_pgo_training_data_dir"

  # --- Stage 1: Build with PGO instrumentation ---
  msg "Starting PGO Instrumentation Build (Stage 1/3)..."
  # Combine flags (User flags, do not change)
  local _pgo_c_args="${_original_cflags} -fprofile-generate=$srcdir/pgo ${_common_instrument_flags}"
  # Linker flags (User flags + remove common flags)
  local _pgo_c_link_args="${_original_ldflags} -fprofile-generate=$srcdir/pgo"

  # Setup and Configure Stage 1
  meson setup --prefix=/usr --buildtype=release "${_meson_source_dir}" build
  meson configure build "${_meson_common_config_opts[@]}" \
      -Db_lto=false \
      -Dc_args="${_pgo_c_args}" \
      -Dc_link_args="${_pgo_c_link_args}"

  # Compile Stage 1 - Exit build script if this fails
  meson compile -C build -j$(nproc) || return 1

  # === DEBUGGING START ===
  msg "DEBUG: Checking for binary after Stage 1 compile at CORRECTED path..."
  ls -l "${_lz4_binary_path}" || msg "DEBUG: Binary not found at ${_lz4_binary_path}"
  # === DEBUGGING END ===

  # Run workload to generate PGO profile data
  msg "Running comprehensive workload to generate PGO profile data (Stage 1/3)..."
  local pgo_workload_tmp_stage1="$srcdir/pgo_workload_tmp_stage1"
  mkdir -p "$pgo_workload_tmp_stage1"
  export LLVM_PROFILE_FILE="$srcdir/pgo/%p-%m.profraw"
  # Use ABSOLUTE path to the binary
  run_lz4_workload "${_lz4_binary_path}" "${_pgo_training_data_dir}/training" "$pgo_workload_tmp_stage1"
  unset LLVM_PROFILE_FILE

  # Merge PGO profiles
  msg "Merging PGO profiles (Stage 1/3)..."
  llvm-profdata merge -output="$srcdir/pgo/default.profdata" "$srcdir"/pgo/*.profraw

  # Clean up build directory for the next stage
  rm -rf build

  # --- Stage 2: Build with CS-PGO instrumentation ---
  msg "Starting CS-PGO Instrumentation Build (Stage 2/3)..."
  # Combine flags (User flags, do not change)
  local _cspgo_c_args="${_original_cflags} -fprofile-use=$srcdir/pgo/default.profdata -fcs-profile-generate=$srcdir/cspgo ${_common_instrument_flags}"
  # Linker flags (User flags + remove common flags)
  local _cspgo_c_link_args="${_original_ldflags} -fprofile-use=$srcdir/pgo/default.profdata -fcs-profile-generate=$srcdir/cspgo"

  # Setup and Configure Stage 2
  meson setup --prefix=/usr --buildtype=release "${_meson_source_dir}" build
  meson configure build "${_meson_common_config_opts[@]}" \
      -Db_lto=false \
      -Dc_args="${_cspgo_c_args}" \
      -Dc_link_args="${_cspgo_c_link_args}"

  # Compile Stage 2 - Exit build script if this fails
  meson compile -C build -j$(nproc) || return 1

  # === DEBUGGING START ===
  msg "DEBUG: Checking for binary after Stage 2 compile at CORRECTED path..."
  ls -l "${_lz4_binary_path}" || msg "DEBUG: Binary not found at ${_lz4_binary_path}"
  # === DEBUGGING END ===

  # Run workload to generate CS-PGO profile data
  msg "Running comprehensive workload to generate CS-PGO profile data (Stage 2/3)..."
  local cspgo_workload_tmp_stage2="$srcdir/cspgo_workload_tmp_stage2"
  mkdir -p "$cspgo_workload_tmp_stage2"
  export LLVM_PROFILE_FILE="$srcdir/cspgo/%p-%m.profraw"
  # Use ABSOLUTE path to the binary
  run_lz4_workload "${_lz4_binary_path}" "${_pgo_training_data_dir}/training" "$cspgo_workload_tmp_stage2"
  unset LLVM_PROFILE_FILE

  # Merge CS-PGO profiles with PGO profiles
  msg "Merging CS-PGO profiles with PGO profiles (Stage 2/3)..."
  llvm-profdata merge -output="$srcdir/cspgo/cs.profdata" "$srcdir/cspgo"/*.profraw "$srcdir/pgo/default.profdata"

  # Clean up build directory for the final stage
  rm -rf build

  # --- Stage 3: Build with merged CS-PGO data ---
  msg "Starting Final Optimized Build (Stage 3/3)..."
  # Combine flags (User flags, do not change)
  local _final_lto_flags="-flto"
  local _final_c_args="${_original_cflags} -fprofile-use=$srcdir/cspgo/cs.profdata ${_final_lto_flags}"
  local _final_c_link_args="${_original_ldflags} -fprofile-use=$srcdir/cspgo/cs.profdata ${_final_lto_flags}"

  # Setup and Configure Stage 3
  meson setup --prefix=/usr --buildtype=release "${_meson_source_dir}" build
  meson configure build "${_meson_common_config_opts[@]}" \
      -Db_lto=false \
      -Dc_args="${_final_c_args}" \
      -Dc_link_args="${_final_c_link_args}"

  # Compile Final Stage - Exit build script if this fails
  meson compile -C build -j$(nproc) || return 1

  # === DEBUGGING START ===
  msg "DEBUG: Checking for binary after Stage 3 compile at CORRECTED path..."
  ls -l "${_lz4_binary_path}" || msg "DEBUG: Binary not found at ${_lz4_binary_path}"
  # === DEBUGGING END ===

  msg "PGO/CS-PGO Build Process Complete."
  # Cleanup handled by trap on exit/success
}

check() {
  # Run checks against the final optimized build in ./build
  msg "Running checks on the final optimized build..."
  # *** CORRECTED *** Absolute path to expected binary location for check
  local _check_binary_path="$srcdir/build/meson/programs/lz4"

  # Ensure the build dir and binary exist before changing into it or running checks
  if [ ! -d "$srcdir/build" ]; then
    error "Build directory '$srcdir/build' not found for check(). Check build stage."
    return 1
  fi
  # Also check subdirectory existence before checking binary
  if [ ! -d "$(dirname "${_check_binary_path}")" ]; then
    error "Directory '$(dirname "${_check_binary_path}")' not found for check(). Check build structure."
    ls -l "$srcdir/build/meson" # List meson dir for context
    return 1
  fi
  if [ ! -x "${_check_binary_path}" ]; then
      error "lz4 executable '${_check_binary_path}' not found or not executable for check()."
      ls -l "$(dirname "${_check_binary_path}")" # List programs dir for context
      return 1
  fi

  # Perform checks from srcdir, using absolute path to binary
  local test_infile="/etc/passwd" # Use system file
  # Use temporary files in srcdir to avoid issues with build dir cleanup/permissions
  local test_outfile="$srcdir/passwd.lz4.check.$$"
  local test_decomp_outfile="$srcdir/passwd.check.$$"

  rm -f "$test_outfile" "$test_decomp_outfile" # Clean previous potential runs

  msg "  Running lz4 compress check..."
  "${_check_binary_path}" "$test_infile" "$test_outfile" || { error "Check: Compression failed."; rm -f "$test_outfile" "$test_decomp_outfile"; return 1; }
  msg "  Running lz4 decompress check..."
  "${_check_binary_path}" -d "$test_outfile" "$test_decomp_outfile" || { error "Check: Decompression failed."; rm -f "$test_outfile" "$test_decomp_outfile"; return 1; }
  msg "  Running diff check..."
  diff -q "$test_infile" "$test_decomp_outfile" || { error "Check: Decompressed file differs from original."; rm -f "$test_outfile" "$test_decomp_outfile"; return 1; }

  rm -f "$test_outfile" "$test_decomp_outfile" # Clean up successful check
  msg "Checks passed."
}

package() {
  # Install from the final build directory created in Stage 3
  if [ ! -d "$srcdir/build" ]; then
    error "Build directory '$srcdir/build' not found for package(). Check build stage."
    return 1
  fi
  # Verify install paths if needed, but assume Meson handles it correctly
  meson install -C build --destdir "$pkgdir"
}

# vim:set ts=2 sw=2 et:
