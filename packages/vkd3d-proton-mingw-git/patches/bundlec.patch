--- bundle.c.orig	2025-07-08 16:20:15.785909300 +0200
+++ bundle.c	2025-07-08 16:34:00.519997738 +0200
@@ -20,52 +20,95 @@
 
 #include "vkd3d_private.h"
 
+#ifndef likely
+#   define likely(x)   __builtin_expect(!!(x), 1)
+#endif
+#ifndef unlikely
+#   define unlikely(x) __builtin_expect(!!(x), 0)
+#endif
+
+#if defined(__GNUC__) || defined(__clang__)
+#   define VKD3D_ALWAYS_INLINE  __attribute__((always_inline)) inline
+#else
+#   define VKD3D_ALWAYS_INLINE  inline
+#endif
+
 /* ID3D12CommandAllocator */
 static inline struct d3d12_bundle_allocator *impl_from_ID3D12CommandAllocator(ID3D12CommandAllocator *iface)
 {
     return CONTAINING_RECORD(iface, struct d3d12_bundle_allocator, ID3D12CommandAllocator_iface);
 }
 
-static void *d3d12_bundle_allocator_alloc_chunk_data(struct d3d12_bundle_allocator *allocator, size_t size)
+static inline void *
+d3d12_bundle_allocator_alloc_chunk_data(struct d3d12_bundle_allocator *allocator,
+                                        size_t                         size)
 {
-    size_t chunk_offset = 0;
-    void *chunk = NULL;
+    /* --------------- 1.1  overflow-safe power-of-two alignment ---- */
+    const size_t align_mask = VKD3D_BUNDLE_COMMAND_ALIGNMENT - 1u;
+
+    if (unlikely(size > SIZE_MAX - align_mask))
+        return NULL;                                     /* overflow */
+
+        size = (size + align_mask) & ~align_mask;
 
-    size = align(size, VKD3D_BUNDLE_COMMAND_ALIGNMENT);
+    /* --------------- 1.2  try current chunk (FAST path) ----------- */
+    void   *chunk        = NULL;
+    size_t  chunk_offset = 0;
 
     if (allocator->chunks_count)
     {
-        chunk = allocator->chunks[allocator->chunks_count - 1];
+        chunk        = allocator->chunks[allocator->chunks_count - 1];
         chunk_offset = allocator->chunk_offset;
     }
 
-    if (!chunk || chunk_offset + size > VKD3D_BUNDLE_CHUNK_SIZE)
+    if (likely(chunk && chunk_offset + size <= VKD3D_BUNDLE_CHUNK_SIZE))
     {
-        if (!vkd3d_array_reserve((void **)&allocator->chunks, &allocator->chunks_size,
-                allocator->chunks_count + 1, sizeof(*allocator->chunks)))
-            return NULL;
+        allocator->chunk_offset = chunk_offset + size;
+        return (uint8_t *)chunk + chunk_offset;
+    }
 
-        if (!(chunk = vkd3d_malloc(VKD3D_BUNDLE_CHUNK_SIZE)))
-            return NULL;
+    /* --------------- 1.3  SLOW path – allocate new chunk ---------- */
+    if (!vkd3d_array_reserve((void **)&allocator->chunks, &allocator->chunks_size,
+        allocator->chunks_count + 1,
+        sizeof(*allocator->chunks)))
+        return NULL;                                     /* OOM */
+
+        /* Oversized commands get a dedicated block. */
+        {
+            const size_t alloc_size = size > VKD3D_BUNDLE_CHUNK_SIZE
+            ? size
+            : VKD3D_BUNDLE_CHUNK_SIZE;
+
+            chunk = vkd3d_malloc(alloc_size);
+            if (!chunk)
+                return NULL;
+        }
 
         allocator->chunks[allocator->chunks_count++] = chunk;
-        allocator->chunk_offset = chunk_offset = 0;
-    }
+        allocator->chunk_offset = size;                     /* first alloc */
 
-    allocator->chunk_offset = chunk_offset + size;
-    return void_ptr_offset(chunk, chunk_offset);
+        return chunk;                                       /* offset == 0 */
 }
 
-static void d3d12_bundle_allocator_free_chunks(struct d3d12_bundle_allocator *allocator)
+static void
+d3d12_bundle_allocator_reset_chunks(struct d3d12_bundle_allocator *allocator)
+{
+    /* Only metadata is reset – memory retained for next frame. */
+    allocator->chunk_offset = 0;
+    /* chunks_count / array stay intact for quick reuse. */
+}
+
+static void
+d3d12_bundle_allocator_free_chunks(struct d3d12_bundle_allocator *allocator)
 {
     size_t i;
 
-    for (i = 0; i < allocator->chunks_count; i++)
+    for (i = 0; i < allocator->chunks_count; ++i)
         vkd3d_free(allocator->chunks[i]);
 
     vkd3d_free(allocator->chunks);
-    allocator->chunks = NULL;
-    allocator->chunks_size = 0;
+    allocator->chunks       = NULL;
+    allocator->chunks_size  = 0;
     allocator->chunks_count = 0;
     allocator->chunk_offset = 0;
 }
@@ -171,14 +214,15 @@ static HRESULT STDMETHODCALLTYPE d3d12_b
     return d3d12_device_query_interface(allocator->device, iid, device);
 }
 
-static HRESULT STDMETHODCALLTYPE d3d12_bundle_allocator_Reset(ID3D12CommandAllocator *iface)
+static HRESULT STDMETHODCALLTYPE
+d3d12_bundle_allocator_Reset(ID3D12CommandAllocator *iface)
 {
     struct d3d12_bundle_allocator *allocator = impl_from_ID3D12CommandAllocator(iface);
-    struct d3d12_bundle *bundle;
+    struct d3d12_bundle           *bundle    = allocator->current_bundle;
 
     TRACE("iface %p.\n", iface);
 
-    if ((bundle = allocator->current_bundle))
+    if (bundle)
     {
         if (bundle->is_recording)
         {
@@ -190,7 +234,7 @@ static HRESULT STDMETHODCALLTYPE d3d12_b
         bundle->tail = NULL;
     }
 
-    d3d12_bundle_allocator_free_chunks(allocator);
+    d3d12_bundle_allocator_reset_chunks(allocator);
     return S_OK;
 }
 
@@ -250,11 +294,19 @@ static inline struct d3d12_bundle *impl_
     return CONTAINING_RECORD(iface, struct d3d12_bundle, ID3D12GraphicsCommandList_iface);
 }
 
-void *d3d12_bundle_add_command(struct d3d12_bundle *bundle, pfn_d3d12_bundle_command proc, size_t size)
+static VKD3D_ALWAYS_INLINE void *
+d3d12_bundle_add_command(struct d3d12_bundle           *bundle,
+                         pfn_d3d12_bundle_command       proc,
+                         size_t                         size)
 {
-    struct d3d12_bundle_command *command = d3d12_bundle_allocator_alloc_chunk_data(bundle->allocator, size);
+    struct d3d12_bundle_command *command =
+    d3d12_bundle_allocator_alloc_chunk_data(bundle->allocator, size);
+
+    if (unlikely(command == NULL))
+        return NULL;                                    /* propagate OOM */
 
-    command->proc = proc;
+        /* populate node ------------------------------------------------ */
+        command->proc = proc;
     command->next = NULL;
 
     if (bundle->tail)
@@ -1909,14 +1961,26 @@ HRESULT d3d12_bundle_create(struct d3d12
     return S_OK;
 }
 
-void d3d12_bundle_execute(struct d3d12_bundle *bundle, d3d12_command_list_iface *list)
+void d3d12_bundle_execute(struct d3d12_bundle         *bundle,
+                          d3d12_command_list_iface    *list)
 {
-    struct d3d12_bundle_command *command = bundle->head;
+    struct d3d12_bundle_command *c = bundle ? bundle->head : NULL;
 
-    while (command)
+    while (c)
     {
-        command->proc(list, command);
-        command = command->next;
+        struct d3d12_bundle_command *n; /* all decls first (C89) */
+
+        __builtin_prefetch(c->next, 0, 1);
+        c->proc(list, c);
+
+        n = c->next;
+        if (unlikely(n == NULL))
+            break;
+
+        __builtin_prefetch(n->next, 0, 1);
+        n->proc(list, n);
+
+        c = n->next; /* advance two steps */
     }
 }
 
