pkgbase=cairo
pkgname=(
  cairo-git
)
pkgver=1.18.4+12+g7fd0cd0a9
pkgrel=1
pkgdesc="2D graphics library with support for multiple output devices (PGO+CS-PGO optimized)"
url="https://cairographics.org/"
arch=(x86_64)
license=(LGPL MPL)
depends=(lzo zlib libpng fontconfig freetype2 libx11 libxext libxrender libxcb
         glib2 pixman)
makedepends=(
  valgrind
  git
  meson
  clang      # For PGO
  llvm       # For llvm-profdata
  python
)
provides=(cairo)
conflicts=(cairo)
options=(strip)
source=("git+https://gitlab.freedesktop.org/cairo/cairo.git")
sha256sums=('SKIP')

pkgver() {
  cd cairo
  git describe --tags | sed 's/-/+/g'
}

prepare() {
  cd cairo

  # Generate the workload C file for PGO training
  cat > "$srcdir/cairo_workload.c" << 'EOF'
#include <cairo.h>
#include <cairo-pdf.h>
#include <cairo-svg.h>
#include <cairo-ps.h>
#include <cairo-xlib.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <time.h>
#include <math.h>
#include <X11/Xlib.h>

#define WORKLOAD_ITERATIONS 5
#define SURFACE_WIDTH 1920
#define SURFACE_HEIGHT 1080
#define NUM_SHAPES 200
#define NUM_TEXT_ELEMENTS 50
#define NUM_GRADIENTS 20
#define NUM_IMAGES 10

// Get random float between min and max
float rand_float(float min, float max) {
    return min + (max - min) * (float)rand() / RAND_MAX;
}

// Get random int between min and max (inclusive)
int rand_int(int min, int max) {
    return min + rand() % (max - min + 1);
}

// Draw random shapes with various styles
void draw_random_shapes(cairo_t *cr, int num_shapes) {
    for (int i = 0; i < num_shapes; i++) {
        // Set random color with alpha
        cairo_set_source_rgba(cr,
            rand_float(0, 1),
            rand_float(0, 1),
            rand_float(0, 1),
            rand_float(0.1, 1.0));

        // Set random line width
        cairo_set_line_width(cr, rand_float(0.5, 10.0));

        // Choose random line cap and join styles
        int cap_style = rand_int(0, 2);
        int join_style = rand_int(0, 2);
        cairo_set_line_cap(cr, cap_style);
        cairo_set_line_join(cr, join_style);

        // Set random dash pattern occasionally
        if (rand_int(0, 4) == 0) {
            double dashes[4];
            dashes[0] = rand_float(2, 20);
            dashes[1] = rand_float(2, 20);
            dashes[2] = rand_float(2, 20);
            dashes[3] = rand_float(2, 20);
            cairo_set_dash(cr, dashes, rand_int(1, 4), 0);
        } else {
            cairo_set_dash(cr, NULL, 0, 0);
        }

        // Choose a random shape type
        int shape_type = rand_int(0, 5);

        switch (shape_type) {
            case 0: { // Rectangle
                double x = rand_float(0, SURFACE_WIDTH);
                double y = rand_float(0, SURFACE_HEIGHT);
                double width = rand_float(10, 300);
                double height = rand_float(10, 300);

                if (rand_int(0, 1)) {
                    // Rounded rectangle
                    double radius = rand_float(5, 30);
                    double degrees = M_PI / 180.0;

                    cairo_new_sub_path(cr);
                    cairo_arc(cr, x + width - radius, y + radius, radius, -90 * degrees, 0 * degrees);
                    cairo_arc(cr, x + width - radius, y + height - radius, radius, 0 * degrees, 90 * degrees);
                    cairo_arc(cr, x + radius, y + height - radius, radius, 90 * degrees, 180 * degrees);
                    cairo_arc(cr, x + radius, y + radius, radius, 180 * degrees, 270 * degrees);
                    cairo_close_path(cr);
                } else {
                    // Regular rectangle
                    cairo_rectangle(cr, x, y, width, height);
                }
                break;
            }
            case 1: { // Circle/Ellipse
                double x = rand_float(0, SURFACE_WIDTH);
                double y = rand_float(0, SURFACE_HEIGHT);

                if (rand_int(0, 1)) {
                    // Circle
                    double radius = rand_float(5, 150);
                    cairo_arc(cr, x, y, radius, 0, 2 * M_PI);
                } else {
                    // Ellipse
                    double width = rand_float(10, 300);
                    double height = rand_float(10, 300);

                    cairo_save(cr);
                    cairo_translate(cr, x, y);
                    cairo_scale(cr, width / 2.0, height / 2.0);
                    cairo_arc(cr, 0, 0, 1.0, 0, 2 * M_PI);
                    cairo_restore(cr);
                }
                break;
            }
            case 2: { // Line
                cairo_move_to(cr, rand_float(0, SURFACE_WIDTH), rand_float(0, SURFACE_HEIGHT));
                cairo_line_to(cr, rand_float(0, SURFACE_WIDTH), rand_float(0, SURFACE_HEIGHT));
                break;
            }
            case 3: { // Bezier curve
                cairo_move_to(cr, rand_float(0, SURFACE_WIDTH), rand_float(0, SURFACE_HEIGHT));
                cairo_curve_to(cr,
                    rand_float(0, SURFACE_WIDTH), rand_float(0, SURFACE_HEIGHT),
                    rand_float(0, SURFACE_WIDTH), rand_float(0, SURFACE_HEIGHT),
                    rand_float(0, SURFACE_WIDTH), rand_float(0, SURFACE_HEIGHT));
                break;
            }
            case 4: { // Polygon
                int num_points = rand_int(3, 8);
                cairo_move_to(cr, rand_float(0, SURFACE_WIDTH), rand_float(0, SURFACE_HEIGHT));

                for (int j = 0; j < num_points; j++) {
                    cairo_line_to(cr, rand_float(0, SURFACE_WIDTH), rand_float(0, SURFACE_HEIGHT));
                }

                cairo_close_path(cr);
                break;
            }
            case 5: { // Star
                double x = rand_float(0, SURFACE_WIDTH);
                double y = rand_float(0, SURFACE_HEIGHT);
                double r1 = rand_float(20, 100);
                double r2 = r1 / 2;
                int points = rand_int(5, 10);

                double angle = -M_PI / 2;
                double angle_inc = M_PI / points;

                cairo_move_to(cr, x + r1 * cos(angle), y + r1 * sin(angle));

                for (int j = 0; j < points; j++) {
                    angle += angle_inc;
                    cairo_line_to(cr, x + r2 * cos(angle), y + r2 * sin(angle));
                    angle += angle_inc;
                    cairo_line_to(cr, x + r1 * cos(angle), y + r1 * sin(angle));
                }

                cairo_close_path(cr);
                break;
            }
        }

        // Choose fill or stroke or both
        int draw_type = rand_int(0, 2);
        if (draw_type == 0) {
            cairo_fill(cr);
        } else if (draw_type == 1) {
            cairo_stroke(cr);
        } else {
            cairo_fill_preserve(cr);
            cairo_set_source_rgba(cr,
                rand_float(0, 1),
                rand_float(0, 1),
                rand_float(0, 1),
                rand_float(0.5, 1.0));
            cairo_stroke(cr);
        }
    }
}

// Draw text with various fonts, sizes, and styles
void draw_random_text(cairo_t *cr, int num_texts) {
    const char* fonts[] = {
        "Arial", "Helvetica", "Times New Roman", "Courier New",
        "Verdana", "Georgia", "Comic Sans MS", "Impact",
        "Tahoma", "Trebuchet MS", "Sans", "Serif", "Monospace"
    };
    const int num_fonts = sizeof(fonts) / sizeof(fonts[0]);

    const char* sample_texts[] = {
        "Cairo Graphics", "Hello, World!", "PGO Workload",
        "Testing Cairo", "Graphics Library", "Vector Drawing",
        "Performance Test", "Optimization", "Context Sensitive",
        "Profile Guided", "2D Graphics", "Text Rendering"
    };
    const int num_samples = sizeof(sample_texts) / sizeof(sample_texts[0]);

    for (int i = 0; i < num_texts; i++) {
        // Set random font
        const char* font = fonts[rand_int(0, num_fonts - 1)];
        double size = rand_float(10, 72);
        int is_bold = rand_int(0, 1);
        int is_italic = rand_int(0, 1);

        cairo_select_font_face(cr, font,
            is_italic ? CAIRO_FONT_SLANT_ITALIC : CAIRO_FONT_SLANT_NORMAL,
            is_bold ? CAIRO_FONT_WEIGHT_BOLD : CAIRO_FONT_WEIGHT_NORMAL);
        cairo_set_font_size(cr, size);

        // Set random color
        cairo_set_source_rgba(cr,
            rand_float(0, 1),
            rand_float(0, 1),
            rand_float(0, 1),
            rand_float(0.5, 1.0));

        // Position text randomly
        double x = rand_float(0, SURFACE_WIDTH - 300);
        double y = rand_float(50, SURFACE_HEIGHT - 50);

        // Choose random text
        const char* text = sample_texts[rand_int(0, num_samples - 1)];

        // Draw text with random rotation occasionally
        if (rand_int(0, 4) == 0) {
            cairo_save(cr);
            cairo_translate(cr, x, y);
            cairo_rotate(cr, rand_float(-M_PI/4, M_PI/4));
            cairo_move_to(cr, 0, 0);
            cairo_show_text(cr, text);
            cairo_restore(cr);
        } else {
            cairo_move_to(cr, x, y);
            cairo_show_text(cr, text);
        }

        // Add text decoration occasionally
        if (rand_int(0, 3) == 0) {
            cairo_text_extents_t extents;
            cairo_text_extents(cr, text, &extents);

            cairo_set_line_width(cr, rand_float(0.5, 2.0));

            // Underline or strikethrough
            if (rand_int(0, 1) == 0) {
                // Underline
                cairo_move_to(cr, x, y + 3);
                cairo_rel_line_to(cr, extents.width, 0);
                cairo_stroke(cr);
            } else {
                // Strikethrough
                cairo_move_to(cr, x, y - extents.height/2);
                cairo_rel_line_to(cr, extents.width, 0);
                cairo_stroke(cr);
            }
        }
    }
}

// Create and draw gradients
void draw_random_gradients(cairo_t *cr, int num_gradients) {
    for (int i = 0; i < num_gradients; i++) {
        double x0, y0, x1, y1, radius;
        cairo_pattern_t *pattern;

        // Choose linear or radial gradient
        if (rand_int(0, 1) == 0) {
            // Linear gradient
            x0 = rand_float(0, SURFACE_WIDTH);
            y0 = rand_float(0, SURFACE_HEIGHT);
            x1 = rand_float(0, SURFACE_WIDTH);
            y1 = rand_float(0, SURFACE_HEIGHT);

            pattern = cairo_pattern_create_linear(x0, y0, x1, y1);
        } else {
            // Radial gradient
            x0 = rand_float(0, SURFACE_WIDTH);
            y0 = rand_float(0, SURFACE_HEIGHT);
            radius = rand_float(50, 300);

            pattern = cairo_pattern_create_radial(
                x0, y0, 0,
                x0, y0, radius);
        }

        // Add color stops
        int num_stops = rand_int(2, 5);
        for (int j = 0; j < num_stops; j++) {
            double offset = (double)j / (num_stops - 1);
            cairo_pattern_add_color_stop_rgba(pattern, offset,
                rand_float(0, 1),
                rand_float(0, 1),
                rand_float(0, 1),
                rand_float(0.5, 1.0));
        }

        // Set the pattern as source
        cairo_set_source(cr, pattern);

        // Draw a shape with the gradient
        double width = rand_float(100, 500);
        double height = rand_float(100, 500);
        double x = rand_float(0, SURFACE_WIDTH - width);
        double y = rand_float(0, SURFACE_HEIGHT - height);

        int shape = rand_int(0, 2);
        if (shape == 0) {
            // Rectangle
            cairo_rectangle(cr, x, y, width, height);
        } else if (shape == 1) {
            // Circle
            cairo_arc(cr, x + width/2, y + height/2,
                      fmin(width, height)/2, 0, 2 * M_PI);
        } else {
            // Polygon
            int num_points = rand_int(3, 8);
            cairo_move_to(cr, x + width/2, y);

            for (int j = 1; j <= num_points; j++) {
                double angle = 2 * M_PI * j / num_points;
                cairo_line_to(cr,
                    x + width/2 + width/2 * cos(angle),
                    y + height/2 + height/2 * sin(angle));
            }
            cairo_close_path(cr);
        }

        // Fill the shape
        cairo_fill(cr);

        // Clean up
        cairo_pattern_destroy(pattern);
    }
}

// Create and draw a surface pattern (simulating image drawing)
void draw_random_images(cairo_t *cr, int num_images) {
    for (int i = 0; i < num_images; i++) {
        // Create a small surface to use as a pattern
        int img_width = rand_int(100, 400);
        int img_height = rand_int(100, 400);

        cairo_surface_t *image = cairo_image_surface_create(
            CAIRO_FORMAT_ARGB32, img_width, img_height);
        cairo_t *img_cr = cairo_create(image);

        // Fill with a base color
        cairo_set_source_rgb(img_cr,
            rand_float(0, 1),
            rand_float(0, 1),
            rand_float(0, 1));
        cairo_paint(img_cr);

        // Draw some shapes on the image
        draw_random_shapes(img_cr, rand_int(5, 15));

        // Create a pattern from the image
        cairo_pattern_t *pattern = cairo_pattern_create_for_surface(image);

        // Set pattern extend mode
        int extend_mode = rand_int(0, 3);
        cairo_pattern_set_extend(pattern, extend_mode);

        // Apply random transformation to pattern
        cairo_matrix_t matrix;
        cairo_matrix_init_identity(&matrix);

        if (rand_int(0, 1)) {
            // Scale
            cairo_matrix_scale(&matrix,
                rand_float(0.5, 2.0),
                rand_float(0.5, 2.0));
        }

        if (rand_int(0, 1)) {
            // Rotate
            cairo_matrix_rotate(&matrix, rand_float(0, 2 * M_PI));
        }

        if (rand_int(0, 1)) {
            // Translate
            cairo_matrix_translate(&matrix,
                rand_float(-50, 50),
                rand_float(-50, 50));
        }

        cairo_pattern_set_matrix(pattern, &matrix);

        // Set the pattern as source
        cairo_set_source(cr, pattern);

        // Draw a rectangle with the pattern
        double x = rand_float(0, SURFACE_WIDTH - 300);
        double y = rand_float(0, SURFACE_HEIGHT - 300);
        double width = rand_float(100, 300);
        double height = rand_float(100, 300);

        cairo_rectangle(cr, x, y, width, height);
        cairo_fill(cr);

        // Clean up
        cairo_pattern_destroy(pattern);
        cairo_destroy(img_cr);
        cairo_surface_destroy(image);
    }
}

// Draw complex paths with curves
void draw_complex_paths(cairo_t *cr, int count) {
    for (int i = 0; i < count; i++) {
        // Set random style
        cairo_set_line_width(cr, rand_float(0.5, 5.0));
        cairo_set_source_rgba(cr,
            rand_float(0, 1),
            rand_float(0, 1),
            rand_float(0, 1),
            rand_float(0.5, 1.0));

        // Start point
        double x = rand_float(0, SURFACE_WIDTH);
        double y = rand_float(0, SURFACE_HEIGHT);
        cairo_move_to(cr, x, y);

        // Create a complex path with multiple segments
        int segments = rand_int(3, 10);
        for (int j = 0; j < segments; j++) {
            int type = rand_int(0, 2);

            if (type == 0) {
                // Line segment
                cairo_line_to(cr,
                    rand_float(0, SURFACE_WIDTH),
                    rand_float(0, SURFACE_HEIGHT));
            } else if (type == 1) {
                // Curve segment
                cairo_curve_to(cr,
                    rand_float(0, SURFACE_WIDTH),
                    rand_float(0, SURFACE_HEIGHT),
                    rand_float(0, SURFACE_WIDTH),
                    rand_float(0, SURFACE_HEIGHT),
                    rand_float(0, SURFACE_WIDTH),
                    rand_float(0, SURFACE_HEIGHT));
            } else {
                // Arc segment
                double radius = rand_float(20, 100);
                double angle1 = rand_float(0, 2 * M_PI);
                double angle2 = angle1 + rand_float(M_PI/4, M_PI);

                cairo_arc(cr,
                    rand_float(0, SURFACE_WIDTH),
                    rand_float(0, SURFACE_HEIGHT),
                    radius, angle1, angle2);
            }
        }

        // Close path sometimes
        if (rand_int(0, 1)) {
            cairo_close_path(cr);
        }

        // Stroke or fill
        if (rand_int(0, 2) == 0) {
            cairo_stroke(cr);
        } else {
            cairo_fill(cr);
        }
    }
}

// Main workload function
int main() {
    printf("Starting Cairo Graphics Workload...\n");
    srand(time(NULL));

    // Test various surface types
    const char* surface_types[] = {"image", "pdf", "svg", "ps", "xlib"};
    const int num_types = sizeof(surface_types) / sizeof(surface_types[0]);

    for (int iter = 0; iter < WORKLOAD_ITERATIONS; ++iter) {
        printf("Workload iteration %d/%d\n", iter + 1, WORKLOAD_ITERATIONS);

        // For each surface type
        for (int type_idx = 0; type_idx < num_types; type_idx++) {
            const char* type = surface_types[type_idx];
            cairo_surface_t *surface = NULL;

            // Create appropriate surface
            if (strcmp(type, "image") == 0) {
                surface = cairo_image_surface_create(
                    CAIRO_FORMAT_ARGB32, SURFACE_WIDTH, SURFACE_HEIGHT);
            } else if (strcmp(type, "pdf") == 0) {
                char filename[100];
                sprintf(filename, "/tmp/cairo_workload_%d.pdf", iter);
                surface = cairo_pdf_surface_create(
                    filename, SURFACE_WIDTH, SURFACE_HEIGHT);
            } else if (strcmp(type, "svg") == 0) {
                char filename[100];
                sprintf(filename, "/tmp/cairo_workload_%d.svg", iter);
                surface = cairo_svg_surface_create(
                    filename, SURFACE_WIDTH, SURFACE_HEIGHT);
            } else if (strcmp(type, "ps") == 0) {
                char filename[100];
                sprintf(filename, "/tmp/cairo_workload_%d.ps", iter);
                surface = cairo_ps_surface_create(
                    filename, SURFACE_WIDTH, SURFACE_HEIGHT);
            } else if (strcmp(type, "xlib") == 0) {
                // Try to create an X11 surface if display is available
                Display *dpy = XOpenDisplay(NULL);
                if (dpy) {
                    int screen = DefaultScreen(dpy);
                    Window win = XCreateSimpleWindow(
                        dpy, DefaultRootWindow(dpy),
                        0, 0, SURFACE_WIDTH, SURFACE_HEIGHT, 0,
                        BlackPixel(dpy, screen), WhitePixel(dpy, screen));

                    XMapWindow(dpy, win);
                    XFlush(dpy);

                    surface = cairo_xlib_surface_create(
                        dpy, win, DefaultVisual(dpy, screen),
                        SURFACE_WIDTH, SURFACE_HEIGHT);
                } else {
                    printf("Cannot open X display, skipping xlib surface test\n");
                    continue;
                }
            }

            if (!surface) {
                printf("Failed to create %s surface, skipping\n", type);
                continue;
            }

            printf("Testing %s surface...\n", type);

            // Create cairo context
            cairo_t *cr = cairo_create(surface);

            // Clear background
            cairo_set_source_rgb(cr, 1, 1, 1);
            cairo_paint(cr);

            // Draw various elements
            draw_random_shapes(cr, NUM_SHAPES);
            draw_random_text(cr, NUM_TEXT_ELEMENTS);
            draw_random_gradients(cr, NUM_GRADIENTS);
            draw_random_images(cr, NUM_IMAGES);
            draw_complex_paths(cr, NUM_SHAPES / 2);

            // Flush and finish
            cairo_surface_flush(surface);
            cairo_show_page(cr);

            // Clean up
            cairo_destroy(cr);
            cairo_surface_destroy(surface);

            // Clean up X resources if needed
            if (strcmp(type, "xlib") == 0) {
                Display *dpy = cairo_xlib_surface_get_display(surface);
                XCloseDisplay(dpy);
            }

            // Remove temporary files
            if (strcmp(type, "image") != 0 && strcmp(type, "xlib") != 0) {
                char filename[100];
                sprintf(filename, "/tmp/cairo_workload_%d.%s", iter, type);
                unlink(filename);
            }
        }
    }

    printf("Cairo Graphics workload finished.\n");
    return 0;
}
EOF

  # Ensure we have the necessary build dependencies
  if ! pkg-config --exists cairo; then
    echo "Warning: Cairo not found in system, workload compilation might fail"
  fi
}

# Function to compile and run the custom workload
run_cairo_workload() {
  local build_dir="$1"
  local pgo_flags="$2"  # Pass PGO flags to ensure workload generates profiles
  local orig_cflags="$3"
  local orig_ldflags="$4"
  local profile_dir="$5"  # Directory where profile data should be stored
  local temp_install_dir="${srcdir}/temp_install"

  cd "$build_dir" || return 1

  echo "Compiling Cairo workload..."

  # Use the Cairo from our temporary installation
  local cairo_include_dir="${temp_install_dir}/usr/include"
  local cairo_lib_dir="${temp_install_dir}/usr/lib"

  # Check if the headers and libraries exist
  if [[ ! -f "$cairo_include_dir/cairo/cairo.h" ]]; then
    echo "Error: Cairo headers not found in $cairo_include_dir/cairo"
    find "${temp_install_dir}" -name "cairo.h" -print
    return 1
  fi

  if [[ ! -f "$cairo_lib_dir/libcairo.so" ]] && [[ ! -f "$cairo_lib_dir/libcairo.a" ]]; then
    echo "Error: Cairo libraries not found in $cairo_lib_dir"
    find "${temp_install_dir}" -name "libcairo*" -print
    return 1
  fi

  echo "Using Cairo headers from: $cairo_include_dir"
  echo "Using Cairo libraries from: $cairo_lib_dir"

  # Create a modified workload file with correct include paths and fix RAND_MAX warning
  sed -e 's|#include <cairo.h>|#include <cairo/cairo.h>|g' \
      -e 's|#include <cairo-pdf.h>|#include <cairo/cairo-pdf.h>|g' \
      -e 's|#include <cairo-svg.h>|#include <cairo/cairo-svg.h>|g' \
      -e 's|#include <cairo-ps.h>|#include <cairo/cairo-ps.h>|g' \
      -e 's|#include <cairo-xlib.h>|#include <cairo/cairo-xlib.h>|g' \
      -e 's|(float)rand() / RAND_MAX|(float)((double)rand() / RAND_MAX)|g' \
      "$srcdir/cairo_workload.c" > "$srcdir/cairo_workload_fixed.c"

  # Compile the workload with PGO instrumentation
  CC=clang CFLAGS="$orig_cflags $pgo_flags -I${cairo_include_dir}" \
  LDFLAGS="$orig_ldflags $pgo_flags -L${cairo_lib_dir} -Wl,-rpath,${cairo_lib_dir}" \
  clang "$srcdir/cairo_workload_fixed.c" \
    -o "$srcdir/cairo_workload_runner" \
    -I"${cairo_include_dir}" \
    -L"${cairo_lib_dir}" \
    -lcairo -lX11 -lm || {
      echo "Failed to compile Cairo workload";
      return 1;
    }

  echo "Running Cairo graphics workload..."

  # Create a wrapper script to set environment variables and run the workload
  cat > "$srcdir/run_workload.sh" << EOF
#!/bin/bash
export LD_LIBRARY_PATH="${cairo_lib_dir}:\${LD_LIBRARY_PATH}"
"$srcdir/cairo_workload_runner"
EOF
  chmod +x "$srcdir/run_workload.sh"

  # Run the workload with a timeout using the wrapper script
  timeout 60 "$srcdir/run_workload.sh" || {
    status=$?
    if [ $status -eq 124 ]; then
      echo "Warning: Workload timed out after 60 seconds"
    else
      echo "Warning: Workload exited with status $status"
    fi
    # Return success even if the workload crashes, as long as we've generated some profile data
    if find "$profile_dir" -name "*.profraw" | grep -q .; then
      echo "Profile data was generated before crash, continuing with PGO"
      return 0
    else
      echo "No profile data was generated, PGO failed"
      return 1
    fi
  }

  rm -f "$srcdir/cairo_workload_runner" "$srcdir/cairo_workload_fixed.c" "$srcdir/run_workload.sh"
  return 0
}

build() {
  cd cairo

  # --- Setup ---
  export CC="clang"
  export CXX="clang++"
  _original_cflags="$CFLAGS"
  _original_cxxflags="$CXXFLAGS"
  _original_ldflags="$LDFLAGS"
  local PGO_DATA_DIR="${srcdir}/pgo_data"
  local CS_PGO_DATA_DIR="${srcdir}/cspgo_data"
  mkdir -p "$PGO_DATA_DIR" "$CS_PGO_DATA_DIR"
  trap 'rm -rf "$PGO_DATA_DIR" "$CS_PGO_DATA_DIR" "$srcdir/cairo_workload.c" "$srcdir/cairo_workload_runner"' EXIT
  local _meson_opts=(
    -D spectre=disabled
    -D python.bytecompile=2
    -D dwrite=disabled
    -D gtk_doc=false
    -D tee=enabled
    -D xlib-xcb=enabled
    -D b_ndebug=true
    -D b_pie=false
    -D c_std=gnu18
    -D cpp_std=gnu++2a
    --buildtype=release
    -D quartz=disabled
    -D symbol-lookup=disabled
    -D tests=disabled
  )
  local pgo_failed=false
  # --- End Setup ---

  # --- Stage 1: PGO Instrumentation Build ---
  echo "Stage 1: Building PGO instrumented build..."
  local _pgo_instr_flags="-fprofile-generate=$PGO_DATA_DIR -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"
  export CFLAGS="$_original_cflags $_pgo_instr_flags"
  export CXXFLAGS="$_original_cxxflags $_pgo_instr_flags"
  export LDFLAGS="$_original_ldflags $_pgo_instr_flags"

  # Create a clean build directory
  rm -rf "${srcdir}/build-pgo"
  arch-meson "${srcdir}/build-pgo" "${_meson_opts[@]}" || { echo "Configure failed (Stage 1)"; return 1; }
  meson compile -C "${srcdir}/build-pgo" || { echo "Build failed (Stage 1)"; return 1; }

  # Install to a temporary location for the workload
  DESTDIR="${srcdir}/temp_install" meson install -C "${srcdir}/build-pgo"

  # --- Stage 1: PGO Training Run ---
  echo "Stage 1: Running custom Cairo PGO training workload..."
  export LLVM_PROFILE_FILE="${PGO_DATA_DIR}/cairo-%p-%m.profraw"
  run_cairo_workload "${srcdir}/cairo" "$_pgo_instr_flags" "$_original_cflags" "$_original_ldflags" "$PGO_DATA_DIR" || {
    echo "Custom workload failed (Stage 1)";
    # Check if any profile data was generated despite the failure
    if find "$PGO_DATA_DIR" -name "*.profraw" | grep -q .; then
      echo "Profile data was generated before failure, continuing with PGO"
    else
      pgo_failed=true;
    fi
  }
  unset LLVM_PROFILE_FILE

  # --- Stage 1: Merge PGO Profiles ---
  echo "Stage 1: Merging PGO profiles..."
  sleep 1  # Ensure all profile files are written
  if ! find "$PGO_DATA_DIR" -name "*.profraw" | grep -q .; then
    echo "No raw PGO profile data (*.profraw) generated. Aborting PGO."
    pgo_failed=true
  elif ! $pgo_failed; then
    if ! llvm-profdata merge -output="${PGO_DATA_DIR}/default.profdata" "${PGO_DATA_DIR}"/*.profraw; then
      echo "llvm-profdata merge failed (Stage 1). Aborting PGO."
      pgo_failed=true
    elif [ ! -s "${PGO_DATA_DIR}/default.profdata" ]; then
      echo "Merged PGO profile data is empty or missing (Stage 1). Aborting PGO."
      pgo_failed=true
    fi
    rm -f "${PGO_DATA_DIR}"/*.profraw
  fi
  # --- End Stage 1 ---

  # --- Stage 2: CS-PGO Instrumentation Build ---
  if ! $pgo_failed; then
    echo "Stage 2: Building CS-PGO instrumented build..."
    # Clean up temporary install
    rm -rf "${srcdir}/temp_install"

    # Clean build directory
    rm -rf "${srcdir}/build-cspgo"

    local _cspgo_instr_flags="-fprofile-use=${PGO_DATA_DIR}/default.profdata -fcs-profile-generate=$CS_PGO_DATA_DIR -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"
    export CFLAGS="$_original_cflags $_cspgo_instr_flags"
    export CXXFLAGS="$_original_cxxflags $_cspgo_instr_flags"
    export LDFLAGS="$_original_ldflags $_cspgo_instr_flags"

    arch-meson "${srcdir}/build-cspgo" "${_meson_opts[@]}" || { echo "Configure failed (Stage 2)"; pgo_failed=true; }
    if ! $pgo_failed; then
      meson compile -C "${srcdir}/build-cspgo" || { echo "Build failed (Stage 2)"; pgo_failed=true; }

      # Install to a temporary location for the workload
      if ! $pgo_failed; then
        DESTDIR="${srcdir}/temp_install" meson install -C "${srcdir}/build-cspgo"
      fi
    fi
  fi
  # --- End Stage 2 ---

  # --- Stage 2: CS-PGO Training Run ---
  if ! $pgo_failed; then
  echo "Stage 2: Running custom Cairo CS-PGO training workload..."
  export LLVM_PROFILE_FILE="${CS_PGO_DATA_DIR}/cairo-cs-%p-%m.profraw"
  run_cairo_workload "${srcdir}/cairo" "$_cspgo_instr_flags" "$_original_cflags" "$_original_ldflags" "$CS_PGO_DATA_DIR" || {
    echo "Custom workload failed (Stage 2)";
    # Check if any profile data was generated despite the failure
    if find "$CS_PGO_DATA_DIR" -name "*.profraw" | grep -q .; then
      echo "Profile data was generated before failure, continuing with PGO"
    else
      pgo_failed=true;
    fi
  }
  unset LLVM_PROFILE_FILE

    # --- Stage 2: Merge CS-PGO Profiles ---
    echo "Stage 2: Merging CS-PGO profiles..."
    sleep 1  # Ensure all profile files are written
    if ! find "$CS_PGO_DATA_DIR" -name "*.profraw" | grep -q .; then
      echo "Warning: No raw CS-PGO profile data (*.profraw) generated. Final build will use only Stage 1 PGO data."
      cp "${PGO_DATA_DIR}/default.profdata" "${CS_PGO_DATA_DIR}/cs.profdata" || { echo "Failed to copy fallback profile data."; pgo_failed=true; }
    elif ! $pgo_failed; then
      if ! llvm-profdata merge -output="${CS_PGO_DATA_DIR}/cs.profdata" "${CS_PGO_DATA_DIR}"/*.profraw "${PGO_DATA_DIR}/default.profdata"; then
        echo "llvm-profdata merge failed (Stage 2). Aborting CS-PGO."
        pgo_failed=true
      fi
      rm -f "${CS_PGO_DATA_DIR}"/*.profraw
    fi
    if ! $pgo_failed && [ ! -s "${CS_PGO_DATA_DIR}/cs.profdata" ]; then
      echo "Final merged CS-PGO profile data is empty or missing (Stage 2). Aborting CS-PGO."
      pgo_failed=true
    fi
  fi
  # --- End Stage 2 ---

  # --- Stage 3: Final Optimized Build ---
  echo "Stage 3: Building final optimized build..."
  # Clean up temporary install
  rm -rf "${srcdir}/temp_install"

  # Clean build directory for final build
  rm -rf "${srcdir}/build"

  CFLAGS="$_original_cflags"
  CXXFLAGS="$_original_cxxflags"
  LDFLAGS="$_original_ldflags"
  if ! $pgo_failed; then
    if [ -s "${CS_PGO_DATA_DIR}/cs.profdata" ]; then
      echo "Applying CS-PGO profile data for final build."
      local _final_opt_flags="-fprofile-use=${CS_PGO_DATA_DIR}/cs.profdata"
    elif [ -s "${PGO_DATA_DIR}/default.profdata" ]; then
      echo "Applying fallback PGO profile data for final build."
      local _final_opt_flags="-fprofile-use=${PGO_DATA_DIR}/default.profdata"
    else
      echo "Warning: No usable profile data found. Building without PGO."
      local _final_opt_flags=""
    fi
    CFLAGS+=" $_final_opt_flags"
    CXXFLAGS+=" $_final_opt_flags"
    LDFLAGS+=" $_final_opt_flags"
  else
    echo "Warning: Building final version without PGO optimization due to previous errors."
  fi
  export CFLAGS CXXFLAGS LDFLAGS

  arch-meson "${srcdir}/build" "${_meson_opts[@]}" || { echo "Configure failed (Stage 3)"; return 1; }
  meson compile -C "${srcdir}/build" || { echo "Build failed (Stage 3)"; return 1; }
  # --- End Stage 3 ---

  if $pgo_failed; then
    echo "Warning: PGO optimization could not be fully applied. Package built without PGO."
  else
    echo "CS-PGO build process completed successfully."
  fi
}

package() {
  provides=(
    libcairo-gobject.so
    libcairo-script-interpreter.so
    libcairo.so
    cairo
    cairo-git
  )

  meson install -C "${srcdir}/build" --destdir "$pkgdir"

  # Strip binaries if not explicitly disabled
  if [[ ! " ${options[@]} " =~ " !strip " ]]; then
    echo "Stripping binaries..."
    find "$pkgdir" -type f -print0 | while IFS= read -r -d '' file; do
      if file -b --mime-type "$file" | grep -qE 'application/(x-executable|x-sharedlib)'; then
        echo "Stripping: $file"
        strip --strip-unneeded "$file" 2>/dev/null || echo "Warning: strip failed on $file"
      fi
    done
  else
    echo "Skipping stripping due to !strip option."
  fi
}
