pkgname=mimalloc
pkgver=2.2.3
pkgrel=4.2
pkgdesc='General-purpose allocator with excellent performance characteristics'
arch=(x86_64)
url='https://github.com/microsoft/mimalloc'
license=(MIT)
depends=(glibc)
makedepends=(git cmake ninja clang llvm)
options=(strip)
source=("$pkgname::git+$url#tag=v${pkgver}")
b2sums=('SKIP')

#####################################################################
#  Helpers                                                          #
#####################################################################
# 1.  High quality training workload – *improved*:
#     • threads = 2×$(nproc) (but ≥4)
#     • randomised pattern order per thread
#     • exercises malloc/free/calloc/realloc/mi_*  + aligned alloc
#     • stress-loops scaled with CPU count
# 2.  Training built once, re-linked for every stage
#####################################################################
_generate_training_c() {
  cat > "$srcdir/mimalloc_training.c" <<'EOF'
#define _POSIX_C_SOURCE 199309L
#include <mimalloc.h>
#include <pthread.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <stdint.h>
#include <unistd.h>

static int nthreads;
static int iters;

static void* worker(void* tidptr) {
  uintptr_t tid = (uintptr_t)tidptr;
  unsigned int seed = (unsigned int)(time(NULL) ^ tid * 0x9e3779b9);
  for (int it = 0; it < iters; ++it) {
    int op = rand_r(&seed) & 7;
    size_t sz = (rand_r(&seed) % 8192) + 1;
    void* p = NULL;

    switch (op) {
      case 0: p = malloc(sz);                                     break;
      case 1: p = calloc(1, sz);                                  break;
      case 2: p = mi_malloc(sz);                                  break;
      case 3: p = mi_zalloc(sz);                                  break;
      case 4: p = mi_malloc_aligned(sz, 1ull << (rand_r(&seed)%6+4)); break;
      case 5: { p = malloc(sz); void* q = realloc(p, sz*2); mi_free(q ? q : p); p = NULL; break; }
      case 6: p = malloc(sz); break;  /* fallthrough to default free */
      default: break;
    }
    if (p) { memset(p, (int)tid, sz < 1024 ? sz : 1024); mi_free(p); }
  }
  return NULL;
}

int main(void) {
  nthreads = sysconf(_SC_NPROCESSORS_ONLN)*2;
  if (nthreads < 4) nthreads = 4;
  iters = 50000 / nthreads + 1;

  printf("mimalloc training: %d threads × %d iterations\n", nthreads, iters);

  pthread_t ts[nthreads];
  for (int i=0;i<nthreads;i++) pthread_create(&ts[i], NULL, worker, (void*)(uintptr_t)i);
  for (int i=0;i<nthreads;i++) pthread_join(ts[i], NULL);

  // optional stats
  // mi_stats_print(NULL);
  return 0;
}
EOF
}

#####################################################################
#  pkgver – git describe                                            #
#####################################################################
pkgver() {
  cd "$pkgname"
  git describe --tags | sed 's/^v//'
}

#####################################################################
#  Build                                                             #
#####################################################################
build() {
  cd "$pkgname"
  _generate_training_c

  # keep pristine makepkg flags
  local _BASE_CFLAGS="$CFLAGS"
  local _BASE_CXXFLAGS="$CXXFLAGS"
  local _BASE_LDFLAGS="$LDFLAGS"

  local _cmake_common=(
    -D CMAKE_INSTALL_PREFIX=/usr
    -D MI_BUILD_SHARED=ON
    -D MI_BUILD_STATIC=ON
    -D MI_BUILD_OBJECT=OFF      # ← disable failing object target
    -D MI_INSTALL_TOPLEVEL=ON
    -D MI_OVERRIDE=ON
    -D CMAKE_UNITY_BUILD=OFF    # ← avoid object-name collision
  )

  ########################
  # Stage-1  PG-generate #
  ########################
  local _pgo_dir="$srcdir/pgo"
  mkdir -p "${_pgo_dir}"
  local _pgo_flags="-fprofile-generate=${_pgo_dir} -fno-omit-frame-pointer -g3 \
                    -Xclang -mllvm -Xclang -vp-counters-per-site=2048 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"

  cmake -B build-pgo-gen -G Ninja \
        "${_cmake_common[@]}" \
        -D CMAKE_C_FLAGS="${_BASE_CFLAGS} ${_pgo_flags}" \
        -D CMAKE_CXX_FLAGS="${_BASE_CXXFLAGS} ${_pgo_flags}" \
        -D CMAKE_EXE_LINKER_FLAGS="${_BASE_LDFLAGS} ${_pgo_flags}" \
        -D CMAKE_BUILD_TYPE=None
  ninja -C build-pgo-gen

  # Run unit-tests
  ( cd build-pgo-gen; ctest --output-on-failure -j$(nproc) ) || true

  # Build & run training
  clang ${_BASE_CFLAGS} -pthread \
        -Iinclude -Lbuild-pgo-gen -lmimalloc \
        "$srcdir/mimalloc_training.c" \
        -o "$srcdir/mimalloc_training"
  ( LD_LIBRARY_PATH="$PWD/build-pgo-gen" "$srcdir/mimalloc_training" )

  llvm-profdata merge -output="${_pgo_dir}/stage1.profdata" "${_pgo_dir}"/*.profraw
  rm -f "${_pgo_dir}"/*.profraw

  ########################
  # Stage-2  CS-PGO gen  #
  ########################
  local _cs_dir="$srcdir/cspgo"
  mkdir -p "${_cs_dir}"
  local _cs_flags="-fprofile-use=${_pgo_dir}/stage1.profdata \
                   -fcs-profile-generate=${_cs_dir} \
                   -fno-omit-frame-pointer -g3 \
                   -Xclang -mllvm -Xclang -vp-counters-per-site=2048 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"

  cmake -B build-cspgo-gen -G Ninja \
        "${_cmake_common[@]}" \
        -D CMAKE_C_FLAGS="${_BASE_CFLAGS} ${_cs_flags}" \
        -D CMAKE_CXX_FLAGS="${_BASE_CXXFLAGS} ${_cs_flags}" \
        -D CMAKE_EXE_LINKER_FLAGS="${_BASE_LDFLAGS} ${_cs_flags}" \
        -D CMAKE_BUILD_TYPE=None
  ninja -C build-cspgo-gen
  ( cd build-cspgo-gen; ctest --output-on-failure -j$(nproc) ) || true
  ( LD_LIBRARY_PATH="$PWD/build-cspgo-gen" "$srcdir/mimalloc_training" )

  llvm-profdata merge -output="${_cs_dir}/stage2.profdata" \
                      "${_cs_dir}"/*.profraw "${_pgo_dir}/stage1.profdata"

  ########################
  # Stage-3  Final build #
  ########################
  local _final_flags="-fprofile-use=${_cs_dir}/stage2.profdata"
  cmake -B build-final -G Ninja \
        "${_cmake_common[@]}" \
        -D CMAKE_C_FLAGS="${_BASE_CFLAGS} ${_final_flags}" \
        -D CMAKE_CXX_FLAGS="${_BASE_CXXFLAGS} ${_final_flags}" \
        -D CMAKE_EXE_LINKER_FLAGS="${_BASE_LDFLAGS} ${_final_flags}" \
        -D CMAKE_BUILD_TYPE=Release
  ninja -C build-final
}

#####################################################################
#  Tests on final artefacts                                         #
#####################################################################
check() {
  cd "$pkgname/build-final"
  LD_LIBRARY_PATH="$PWD" ctest --output-on-failure -j$(nproc)
}

#####################################################################
#  Install                                                          #
#####################################################################
package() {
  cd "$pkgname"
  DESTDIR="$pkgdir" cmake --install build-final
  install -Dm644 LICENSE -t "$pkgdir/usr/share/licenses/$pkgname"
}
