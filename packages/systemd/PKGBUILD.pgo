pkgbase=systemd
pkgname=('systemd'
         'systemd-libs'
         'systemd-resolvconf'
         'systemd-sysvcompat'
)
_tag='257.6'
# Upstream versioning is incompatible with pacman's version comparisons, one
# way or another. So we replace dashes and tildes with the empty string to
# make sure pacman's version comparing does the right thing for rc versions:
pkgver="${_tag/[-~]/}"
pkgrel=3.1
arch=('x86_64')
license=('LGPL-2.1-or-later')
url='https://www.github.com/systemd/systemd'
makedepends=('acl' 'cryptsetup' 'docbook-xsl' 'gperf' 'lz4' 'xz' 'pam' 'libelf'
             'intltool' 'iptables' 'kmod' 'libarchive' 'libcap' 'libidn2' 'libgcrypt'
             'libmicrohttpd' 'libxcrypt' 'libxslt' 'util-linux' 'linux-api-headers'
             'python-jinja' 'python-lxml' 'quota-tools' 'shadow' 'git'
             'meson' 'libseccomp' 'pcre2' 'audit' 'kexec-tools' 'libxkbcommon'
             'bash-completion' 'p11-kit' 'systemd' 'libfido2' 'tpm2-tss' 'rsync'
             'bpf' 'libbpf' 'clang' 'llvm' 'curl' 'gnutls' 'python-pyelftools'
             'libpwquality' 'qrencode' 'lib32-gcc-libs' 'python-pefile')
conflicts=("mkinitcpio<38-1")
validpgpkeys=('63CDA1E5D3FC22B998D20DD6327F26951A015CC4'  # Lennart Poettering <lennart@poettering.net>
              'A9EA9081724FFAE0484C35A1A81CEA22BC8C7E2E'  # Luca Boccassi <luca.boccassi@gmail.com>
              '9A774DB5DB996C154EBBFBFDA0099A18E29326E1'  # Yu Watanabe <watanabe.yu+github@gmail.com>
              '5C251B5FC54EB2F80F407AAAC54CA336CFEB557E') # Zbigniew JÄ™drzejewski-Szmek <zbyszek@in.waw.pl>
source=("git+https://github.com/systemd/systemd#tag=v${_tag}?signed"
        '0001-Use-Arch-Linux-device-access-groups.patch'
        clear.patch
        # bootloader files
        'arch.conf'
        'loader.conf'
        'splash-arch.bmp'
        # pam configuration
        'systemd-user.pam'
        # pacman / libalpm hooks
        'systemd-hook'
        '20-systemd-sysusers.hook'
        '30-systemd-binfmt.hook'
        '30-systemd-catalog.hook'
        '30-systemd-daemon-reload-system.hook'
        '30-systemd-daemon-reload-user.hook'
        '30-systemd-hwdb.hook'
        '30-systemd-restart-marked.hook'
        '30-systemd-sysctl.hook'
        '30-systemd-tmpfiles.hook'
        '30-systemd-udev-reload.hook'
        '30-systemd-update.hook')
sha512sums=('8ac4d672e4be9f43a6f177cfa0ad91c1d5434e85c6aef633740b6a0e27f6ca15c859b29269a775fe32f14626944db5be87e1a8ebaa7620de7452dd14d902e09e'
            '3ccf783c28f7a1c857120abac4002ca91ae1f92205dcd5a84aff515d57e706a3f9240d75a0a67cff5085716885e06e62597baa86897f298662ec36a940cf410e'
            '61032d29241b74a0f28446f8cf1be0e8ec46d0847a61dadb2a4f096e8686d5f57fe5c72bcf386003f6520bc4b5856c32d63bf3efe7eb0bc0deefc9f68159e648'
            'c416e2121df83067376bcaacb58c05b01990f4614ad9de657d74b6da3efa441af251d13bf21e3f0f71ddcb4c9ea658b81da3d915667dc5c309c87ec32a1cb5a5'
            '5a1d78b5170da5abe3d18fdf9f2c3a4d78f15ba7d1ee9ec2708c4c9c2e28973469bc19386f70b3cf32ffafbe4fcc4303e5ebbd6d5187a1df3314ae0965b25e75'
            'b90c99d768dc2a4f020ba854edf45ccf1b86a09d2f66e475de21fe589ff7e32c33ef4aa0876d7f1864491488fd7edb2682fc0d68e83a6d4890a0778dc2d6fe19'
            '3cb8f88c1bffc753d0c540be5d25a0fdb9224478cca64743b5663340f2f26b197775286e6e680228db54c614dcd11da1135e625674a622127681662bec4fa886'
            '299dcc7094ce53474521356647bdd2fb069731c08d14a872a425412fcd72da840727a23664b12d95465bf313e8e8297da31259508d1c62cc2dcea596160e21c5'
            '0d6bc3d928cfafe4e4e0bc04dbb95c5d2b078573e4f9e0576e7f53a8fab08a7077202f575d74a3960248c4904b5f7f0661bf17dbe163c524ab51dd30e3cb80f7'
            '2b50b25e8680878f7974fa9d519df7e141ca11c4bfe84a92a5d01bb193f034b1726ea05b3c0030bad1fbda8dbb78bf1dc7b73859053581b55ba813c39b27d9dc'
            'a436d3f5126c6c0d6b58c6865e7bd38dbfbfb7babe017eeecb5e9d162c21902cbf4e0a68cf3ac2f99815106f9fa003b075bd2b4eb5d16333fa913df6e2f3e32a'
            '190112e38d5a5c0ca91b89cd58f95595262a551530a16546e1d84700fc9644aa2ca677953ffff655261e8a7bff6e6af4e431424df5f13c00bc90b77c421bc32d'
            'a1661ab946c6cd7d3c6251a2a9fd68afe231db58ce33c92c42594aedb5629be8f299ba08a34713327b373a3badd1554a150343d8d3e5dfb102999c281bd49154'
            '9426829605bbb9e65002437e02ed54e35c20fdf94706770a3dc1049da634147906d6b98bf7f5e7516c84068396a12c6feaf72f92b51bdf19715e0f64620319de'
            'da7a97d5d3701c70dd5388b0440da39006ee4991ce174777931fea2aa8c90846a622b2b911f02ae4d5fffb92680d9a7e211c308f0f99c04896278e2ee0d9a4dc'
            'a50d202a9c2e91a4450b45c227b295e1840cc99a5e545715d69c8af789ea3dd95a03a30f050d52855cabdc9183d4688c1b534eaa755ebe93616f9d192a855ee3'
            '825b9dd0167c072ba62cabe0677e7cd20f2b4b850328022540f122689d8b25315005fa98ce867cf6e7460b2b26df16b88bb3b5c9ebf721746dce4e2271af7b97')

_meson_version="${pkgver}-${pkgrel}"
_systemd_src_dir="${pkgbase}"

if ((_systemd_UPSTREAM)); then
  _meson_version="${pkgver}"
fi

# Some heuristics to detect that we are building on OBS, with no network access. Skip
# git verification, and use the OBS-provided tarball instead. The sources will be
# unpacked by OBS in $package-$version/
if [ -f /.build/build.dist ] && [ -d /usr/src/packages/SOURCES ] &&  [ -d /usr/src/packages/BUILD ] &&  [ -d /usr/src/packages/OTHER ]; then
  source[0]="$(find . -name "${pkgbase}-${pkgver}.tar.*" -print -quit)"
  sha512sums[0]='SKIP'
  _systemd_src_dir="${pkgbase}-${pkgver}"
fi

_backports=(
)

_reverts=(
)

prepare() {
  cd "${_systemd_src_dir}"

  # Replace cdrom/dialout/tape groups with optical/uucp/storage
  patch -Np1 -i ../0001-Use-Arch-Linux-device-access-groups.patch
  patch -Np1 -i ../clear.patch

  # return if not a git repository
  if ! git status >/dev/null 2>&1; then
    return
  fi

  local _c _l
  for _c in "${_backports[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git cherry-pick --mainline 1 --no-commit "${_c}"
  done
  for _c in "${_reverts[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git revert --mainline 1 --no-commit "${_c}"
  done

}

build() {
  local _timeservers=({0..3}.de.pool.ntp.org)
  local _nameservers=(
    # We use these public name services, ordered by their privacy policy (hopefully):
    #  * Cloudflare (https://1.1.1.1/)
    #  * Quad9 (https://www.quad9.net/)
    #  * Google (https://developers.google.com/speed/public-dns/)
    '1.1.1.1#cloudflare-dns.com'
    '2606:4700:4700::1111#cloudflare-dns.com'
  )

  local _meson_options=(
    -Dversion-tag="${_meson_version}-arch"
    -Dvcs-tag=false
    -Dshared-lib-tag="${_meson_version}"

    -Dapparmor=disabled
    -Dbootloader=disabled
    -Dxenctrl=disabled
    -Dbpf-framework=enabled
    -Dima=false
    -Dinstall-tests=true
    -Dlibidn2=enabled
    -Dlz4=enabled
    -Dman=enabled
    -Dnscd=false
    -Dselinux=disabled
    -Dsshdprivsepdir=/usr/share/empty.sshd
    -Dvmlinux-h=provided
    -Dvmlinux-h-path=/usr/src/linux-cachymod-614-bore-lto/vmlinux.h
    -Dukify=disabled
    -Dwerror=false

    -Ddbuspolicydir=/usr/share/dbus-1/system.d
    -Ddefault-dnssec=no
    -Ddefault-kill-user-processes=false
    -Ddefault-locale='C.UTF-8'
    -Dlocalegen-path=/usr/bin/locale-gen
    -Ddns-over-tls=openssl
    -Dfallback-hostname='archlinux'
    -Dnologin-path=/usr/bin/nologin
    -Dntp-servers="${_timeservers[*]}"
    -Ddns-servers="${_nameservers[*]}"
    -Drpmmacrosdir=no
    -Dsysvinit-path=
    -Dsysvrcnd-path=

    -Dsbat-distro='arch'
    -Dsbat-distro-summary='Arch Linux'
    -Dsbat-distro-pkgname="${pkgname}"
    -Dsbat-distro-version="${pkgver}"
    -Dsbat-distro-url="https://archlinux.org/packages/core/x86_64/${pkgname}/"
  )

  # Define common instrumentation flags for PGO
  local _common_instrument_flags="-g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"

  # Directory for PGO data
  local _pgo_dir="${srcdir}/pgo_data"
  mkdir -p "${_pgo_dir}"

  # Save original compiler and linker flags
  local _orig_cc="${CC:-clang}"
  local _orig_cxx="${CXX:-clang++}"
  local _orig_cflags="${CFLAGS}"
  local _orig_cxxflags="${CXXFLAGS}"
  local _orig_ldflags="${LDFLAGS}"
  local _orig_cppflags="${CPPFLAGS}"

  # Patch out -Wl,--fatal-warnings from meson.build
  sed -i "/'-Wl,--fatal-warnings',/d" "${_systemd_src_dir}/meson.build"

  # Function to run systemd training workload with proper timeout
  run_training_workload() {
    local build_dir="$1"
    local workload_name="$2"

    echo "Running $workload_name training workload..."
    cd "$build_dir" || exit

    # Create directory for test files
    mkdir -p test_data

    # Disable pagers to prevent interactive prompts
    export SYSTEMD_PAGER=""
    export PAGER="cat"

    # Use timeout to prevent hanging commands - 5 seconds to allow more complex operations
    local TIMEOUT_CMD="timeout 5"

    # Run help and version commands - these should be safe
    echo "Testing core components..."
    ./systemd --version
    ./systemd --help --no-pager

    echo "Testing systemd-analyze..."
    ./systemd-analyze --version
    ./systemd-analyze --help --no-pager
    $TIMEOUT_CMD ./systemd-analyze blame 2>/dev/null || true
    $TIMEOUT_CMD ./systemd-analyze critical-chain 2>/dev/null || true

    echo "Testing systemctl..."
    ./systemctl --version
    ./systemctl --help --no-pager
    $TIMEOUT_CMD ./systemctl list-units --type=service 2>/dev/null || true
    $TIMEOUT_CMD ./systemctl list-dependencies 2>/dev/null || true
    $TIMEOUT_CMD ./systemctl status 2>/dev/null || true

    echo "Testing journalctl..."
    if [ -f ./journalctl ]; then
      ./journalctl --version
      ./journalctl --help --no-pager
      $TIMEOUT_CMD ./journalctl -n 10 --no-pager 2>/dev/null || true
      $TIMEOUT_CMD ./journalctl -p 3 --no-pager 2>/dev/null || true
      $TIMEOUT_CMD ./journalctl --since "1 hour ago" --no-pager 2>/dev/null || true
    fi

    echo "Testing networkctl..."
    if [ -f ./networkctl ]; then
      ./networkctl --version
      ./networkctl --help --no-pager
      $TIMEOUT_CMD ./networkctl list 2>/dev/null || true
      $TIMEOUT_CMD ./networkctl status 2>/dev/null || true
    fi

    echo "Testing resolvectl..."
    if [ -f ./resolvectl ]; then
      ./resolvectl --version
      ./resolvectl --help --no-pager
      $TIMEOUT_CMD ./resolvectl status 2>/dev/null || true
      $TIMEOUT_CMD ./resolvectl query archlinux.org 2>/dev/null || true
    fi

    echo "Testing systemd-path..."
    if [ -f ./systemd-path ]; then
      $TIMEOUT_CMD ./systemd-path 2>/dev/null || true
      $TIMEOUT_CMD ./systemd-path user 2>/dev/null || true
      $TIMEOUT_CMD ./systemd-path system 2>/dev/null || true
    fi

    echo "Testing systemd-detect-virt..."
    if [ -f ./systemd-detect-virt ]; then
      $TIMEOUT_CMD ./systemd-detect-virt 2>/dev/null || true
      $TIMEOUT_CMD ./systemd-detect-virt --container 2>/dev/null || true
      $TIMEOUT_CMD ./systemd-detect-virt --vm 2>/dev/null || true
    fi

    echo "Testing systemd-creds..."
    if [ -f ./systemd-creds ]; then
      ./systemd-creds --version
      ./systemd-creds --help --no-pager

      # Create test file and test encryption/decryption
      echo "test secret" > test_data/test-secret.txt
      $TIMEOUT_CMD ./systemd-creds encrypt test_data/test-secret.txt test_data/test-secret.encrypted 2>/dev/null || true
      if [ -f test_data/test-secret.encrypted ]; then
        $TIMEOUT_CMD ./systemd-creds decrypt test_data/test-secret.encrypted 2>/dev/null || true
      fi
    fi

    echo "Testing timedatectl..."
    if [ -f ./timedatectl ]; then
      ./timedatectl --version 2>/dev/null || true
      ./timedatectl --help --no-pager 2>/dev/null || true
      $TIMEOUT_CMD ./timedatectl status 2>/dev/null || true
      $TIMEOUT_CMD ./timedatectl list-timezones 2>/dev/null || true
    fi

    echo "Testing loginctl..."
    if [ -f ./loginctl ]; then
      ./loginctl --version 2>/dev/null || true
      ./loginctl --help --no-pager 2>/dev/null || true
      $TIMEOUT_CMD ./loginctl list-sessions 2>/dev/null || true
      $TIMEOUT_CMD ./loginctl list-users 2>/dev/null || true
    fi

    echo "Testing udevadm..."
    if [ -f ./udevadm ]; then
      ./udevadm --version 2>/dev/null || true
      ./udevadm --help --no-pager 2>/dev/null || true
      $TIMEOUT_CMD ./udevadm info /dev/input 2>/dev/null || true
      $TIMEOUT_CMD ./udevadm monitor --property --udev 2>/dev/null || true
    fi

    echo "Testing systemd-nspawn..."
    if [ -f ./systemd-nspawn ]; then
      ./systemd-nspawn --version 2>/dev/null || true
      ./systemd-nspawn --help --no-pager 2>/dev/null || true
    fi

    echo "Testing sample unit files for gaming and compilation workloads..."
    cat > test_data/gaming.service <<EOF
[Unit]
Description=Test Gaming Service
Documentation=man:systemd.service(5)

[Service]
Type=simple
ExecStart=/bin/bash -c "sleep 1"
Environment="SDL_VIDEODRIVER=x11" "DISPLAY=:0"
CPUSchedulingPolicy=fifo
CPUSchedulingPriority=99

[Install]
WantedBy=multi-user.target
EOF

    cat > test_data/compilation.service <<EOF
[Unit]
Description=Test Compilation Service
Documentation=man:systemd.service(5)

[Service]
Type=simple
ExecStart=/bin/bash -c "clang -O3 -o test test.c"
Nice=10
CPUAffinity=0-3
IOWeight=50

[Install]
WantedBy=multi-user.target
EOF

    if [ -f ./systemd-analyze ]; then
      $TIMEOUT_CMD ./systemd-analyze verify test_data/gaming.service 2>/dev/null || true
      $TIMEOUT_CMD ./systemd-analyze verify test_data/compilation.service 2>/dev/null || true
    fi

    echo "Testing systemd-id128..."
    if [ -f ./systemd-id128 ]; then
      ./systemd-id128 --version 2>/dev/null || true
      ./systemd-id128 --help --no-pager 2>/dev/null || true
      $TIMEOUT_CMD ./systemd-id128 machine-id 2>/dev/null || true
      $TIMEOUT_CMD ./systemd-id128 boot-id 2>/dev/null || true
    fi

    echo "Testing systemd-run for gaming and compilation scenarios..."
    if [ -f ./systemd-run ]; then
      ./systemd-run --version 2>/dev/null || true
      ./systemd-run --help --no-pager 2>/dev/null || true
      $TIMEOUT_CMD ./systemd-run --user --scope --property="CPUSchedulingPolicy=fifo" --property="CPUSchedulingPriority=99" /bin/bash -c "sleep 1" 2>/dev/null || true
      $TIMEOUT_CMD ./systemd-run --user --scope --property="Nice=10" --property="CPUAffinity=0-3" --property="IOWeight=50" /bin/bash -c "gcc -O3 -o test test.c" 2>/dev/null || true
    fi

    echo "Testing busctl..."
    if [ -f ./busctl ]; then
      ./busctl --version 2>/dev/null || true
      ./busctl --help --no-pager 2>/dev/null || true
      $TIMEOUT_CMD ./busctl list 2>/dev/null || true
      $TIMEOUT_CMD ./busctl status 2>/dev/null || true
    fi

    echo "Testing coredumpctl..."
    if [ -f ./coredumpctl ]; then
      ./coredumpctl --version 2>/dev/null || true
      ./coredumpctl --help --no-pager 2>/dev/null || true
      $TIMEOUT_CMD ./coredumpctl list 2>/dev/null || true
    fi

    echo "Testing systemd-notify..."
    if [ -f ./systemd-notify ]; then
      ./systemd-notify --version 2>/dev/null || true
      ./systemd-notify --help --no-pager 2>/dev/null || true
      $TIMEOUT_CMD ./systemd-notify --ready 2>/dev/null || true
    fi

    echo "Testing systemd-tmpfiles for gaming and compilation..."
    if [ -f ./systemd-tmpfiles ]; then
      ./systemd-tmpfiles --version 2>/dev/null || true
      ./systemd-tmpfiles --help --no-pager 2>/dev/null || true
      cat > test_data/tmpfiles.conf <<EOF
d /tmp/gaming-cache 0755 - - - -
d /tmp/compilation-cache 0755 - - - -
EOF
      $TIMEOUT_CMD ./systemd-tmpfiles --create test_data/tmpfiles.conf 2>/dev/null || true
    fi

    echo "Testing systemd-cgtop for resource usage simulation..."
    if [ -f ./systemd-cgtop ]; then
      ./systemd-cgtop --version 2>/dev/null || true
      ./systemd-cgtop --help --no-pager 2>/dev/null || true
      $TIMEOUT_CMD ./systemd-cgtop -b -n 1 2>/dev/null || true
    fi

    echo "$workload_name training workload completed successfully"

    # Return to source directory
    cd "${srcdir}" || exit
  }

  # Step 1: Initial build with standard profile generation (debug mode)
  echo "Building with standard profile generation (debug mode)..."
  export CC="${_orig_cc}"
  export CXX="${_orig_cxx}"

  arch-meson "${pkgbase}" build-pgo-gen "${_meson_options[@]}" "${MESON_EXTRA_CONFIGURE_OPTIONS[@]}" \
      -Db_ndebug=false \
      -Db_pie=false \
      -Dc_std=gnu2x \
      -Dcpp_std=gnu++2a \
      -Dc_args="${_orig_cflags} -fprofile-generate=${_pgo_dir} ${_common_instrument_flags}" \
      -Dcpp_args="${_orig_cxxflags} -fprofile-generate=${_pgo_dir} ${_common_instrument_flags}" \
      -Dc_link_args="${_orig_ldflags} -fprofile-generate=${_pgo_dir} ${_common_instrument_flags}" \
      -Dcpp_link_args="${_orig_ldflags} -fprofile-generate=${_pgo_dir} ${_common_instrument_flags}"

  meson compile -C build-pgo-gen

  # Step 2: Run the improved training workload for standard PGO
  run_training_workload "build-pgo-gen" "standard PGO"

  # Step 3: Merge the profile data
  echo "Merging profile data..."
  llvm-profdata merge -output="${_pgo_dir}/systemd.profdata" "${_pgo_dir}"/*.profraw

  # Step 4: Second build with context-sensitive profile generation (debug mode)
  echo "Building with context-sensitive profile generation (debug mode)..."
   # Reset flags, important for correct profile use
  export CC="${_orig_cc}"
  export CXX="${_orig_cxx}"

  arch-meson "${pkgbase}" build-pgo-cs "${_meson_options[@]}" "${MESON_EXTRA_CONFIGURE_OPTIONS[@]}" \
      -Db_ndebug=false \
      -Db_pie=false \
      -Dc_std=gnu2x \
      -Dcpp_std=gnu++2a \
      -Dc_args="${_orig_cflags} -fprofile-use=${_pgo_dir}/systemd.profdata -fcs-profile-generate=${_pgo_dir}/cs ${_common_instrument_flags}" \
      -Dcpp_args="${_orig_cxxflags} -fprofile-use=${_pgo_dir}/systemd.profdata -fcs-profile-generate=${_pgo_dir}/cs ${_common_instrument_flags}" \
      -Dc_link_args="${_orig_ldflags} -fprofile-use=${_pgo_dir}/systemd.profdata -fcs-profile-generate=${_pgo_dir}/cs ${_common_instrument_flags}" \
      -Dcpp_link_args="${_orig_ldflags} -fprofile-use=${_pgo_dir}/systemd.profdata -fcs-profile-generate=${_pgo_dir}/cs ${_common_instrument_flags}"

  meson compile -C build-pgo-cs

  # Step 5: Run the improved training workload for context-sensitive PGO
  run_training_workload "build-pgo-cs" "context-sensitive PGO"

  # Step 6: Merge both profile data sets
  echo "Merging standard and context-sensitive profile data..."
  llvm-profdata merge -output="${_pgo_dir}/systemd-cs.profdata" "${_pgo_dir}/cs"/*.profraw "${_pgo_dir}/systemd.profdata"

  # Step 7: Final build with the merged profile data (release mode)
  echo "Performing final build with merged profile data (release mode)..."

    # Reset compiler and linker
  export CC="${_orig_cc}"
  export CXX="${_orig_cxx}"

  # Remove old build directory to avoid potential conflicts
  rm -rf build

  arch-meson "${pkgbase}" build "${_meson_options[@]}" "${MESON_EXTRA_CONFIGURE_OPTIONS[@]}" \
      -Db_ndebug=true \
      -Db_pie=false \
      -Dc_std=gnu2x \
      -Dcpp_std=gnu++2a \
      -Dc_args="${_orig_cflags} -fprofile-use=${_pgo_dir}/systemd-cs.profdata" \
      -Dcpp_args="${_orig_cxxflags} -fprofile-use=${_pgo_dir}/systemd-cs.profdata" \
      -Dc_link_args="${_orig_ldflags} -fprofile-use=${_pgo_dir}/systemd-cs.profdata" \
      -Dcpp_link_args="${_orig_ldflags} -fprofile-use=${_pgo_dir}/systemd-cs.profdata"

  meson compile -C build
}

check() {
  meson test -C build --print-errorlogs
}

package_systemd() {
  pkgdesc='system and service manager'
  license+=(
    'CC0-1.0' # siphash
    'GPL-2.0-or-later' # udev
    'MIT-0' # documentation and config files
  )
  depends=("systemd-libs=${pkgver}"
           'acl' 'libacl.so' 'bash' 'cryptsetup' 'libcryptsetup.so' 'dbus'
           'dbus-units' 'kbd' 'kmod' 'hwdata' 'libcap' 'libcap.so'
           'libgcrypt' 'libxcrypt' 'libcrypt.so' 'libidn2' 'lz4' 'pam'
           'libelf' 'libseccomp' 'libseccomp.so' 'util-linux' 'libblkid.so'
           'libmount.so' 'xz' 'pcre2' 'audit' 'libaudit.so'
           'openssl' 'libcrypto.so' 'libssl.so')
  provides=('nss-myhostname' "systemd-tools=$pkgver" "udev=$pkgver")
  replaces=('nss-myhostname' 'systemd-tools' 'udev')
  conflicts=('nss-myhostname' 'systemd-tools' 'udev')
  optdepends=('libmicrohttpd: systemd-journal-gatewayd and systemd-journal-remote'
              'quota-tools: kernel-level quota management'
              'systemd-sysvcompat: symlink package to provide sysvinit binaries'
              'systemd-ukify: combine kernel and initrd into a signed Unified Kernel Image'
              'polkit: allow administration as unprivileged user'
              'curl: systemd-journal-upload, machinectl pull-tar and pull-raw'
              'gnutls: systemd-journal-gatewayd and systemd-journal-remote'
              'qrencode: show QR codes'
              'iptables: firewall features'
              'libarchive: convert DDIs to tarballs'
              'libbpf: support BPF programs'
              'libpwquality: check password quality'
              'libfido2: unlocking LUKS2 volumes with FIDO2 token'
              'libp11-kit: support PKCS#11'
              'tpm2-tss: unlocking LUKS2 volumes with TPM2')
  backup=(etc/pam.d/systemd-user
          etc/systemd/coredump.conf
          etc/systemd/homed.conf
          etc/systemd/journald.conf
          etc/systemd/journal-remote.conf
          etc/systemd/journal-upload.conf
          etc/systemd/logind.conf
          etc/systemd/networkd.conf
          etc/systemd/oomd.conf
          etc/systemd/pstore.conf
          etc/systemd/resolved.conf
          etc/systemd/sleep.conf
          etc/systemd/system.conf
          etc/systemd/timesyncd.conf
          etc/systemd/user.conf
          etc/udev/iocost.conf
          etc/udev/udev.conf)
  install=systemd.install

  meson install -C build --no-rebuild --destdir "$pkgdir" "${_meson_install[@]}"

  # we'll create this on installation
  rmdir "$pkgdir"/var/log/journal/remote

  # runtime libraries shipped with systemd-libs
  install -d -m0755 systemd-libs/lib/
  mv "$pkgdir"/usr/lib/lib{nss,systemd,udev}*.so* systemd-libs/lib/
  mv "$pkgdir"/usr/lib/pkgconfig systemd-libs/lib/pkgconfig
  mv "$pkgdir"/usr/include systemd-libs/include
  mv "$pkgdir"/usr/share/man/man3 systemd-libs/man3

  # manpages shipped with systemd-sysvcompat
  rm "$pkgdir"/usr/share/man/man8/{halt,poweroff,reboot,shutdown}.8

  # executable (symlinks) shipped with systemd-sysvcompat
  rm "$pkgdir"/usr/bin/{halt,init,poweroff,reboot,shutdown}

  # files shipped with systemd-resolvconf
  rm "$pkgdir"/usr/{bin/resolvconf,share/man/man1/resolvconf.1}

  # tests shipped with systemd-tests (for upstream)
  install -d -m0755 systemd-tests/
  mv "$pkgdir"/usr/lib/systemd/tests systemd-tests/

  # avoid a potential conflict with [core]/filesystem
  rm "$pkgdir"/usr/share/factory/etc/{issue,nsswitch.conf}
  sed -i -e '/^C \/etc\/nsswitch\.conf/d' \
    -e '/^C \/etc\/issue/d' "$pkgdir"/usr/lib/tmpfiles.d/etc.conf

  # ship default policy to leave services disabled
  echo 'disable *' >"$pkgdir"/usr/lib/systemd/system-preset/99-default.preset

  # The group 'systemd-journal' is allocated dynamically and may have varying
  # gid on different systems. Let's install with gid 0 (root), systemd-tmpfiles
  # will fix the permissions for us. (see /usr/lib/tmpfiles.d/systemd.conf)
  install -d -o root -g root -m 2755 "$pkgdir"/var/log/journal

  # add example bootctl configuration
  install -D -m0644 arch.conf "$pkgdir"/usr/share/systemd/bootctl/arch.conf
  install -D -m0644 loader.conf "$pkgdir"/usr/share/systemd/bootctl/loader.conf
  install -D -m0644 splash-arch.bmp "$pkgdir"/usr/share/systemd/bootctl/splash-arch.bmp

  # pacman hooks
  install -D -m0755 systemd-hook "$pkgdir"/usr/share/libalpm/scripts/systemd-hook
  install -D -m0644 -t "$pkgdir"/usr/share/libalpm/hooks *.hook

  # overwrite the systemd-user PAM configuration with our own
  install -D -m0644 systemd-user.pam "$pkgdir"/etc/pam.d/systemd-user

  # create a directory for cryptsetup keys
  install -d -m0700 "$pkgdir"/etc/cryptsetup-keys.d

  # handle uncommon license
  install -d -m0755 "$pkgdir/usr/share/licenses/$pkgbase"
  ln -s -t "$_" /usr/share/doc/systemd/LICENSES/MIT-0.txt
}

package_systemd-libs() {
  pkgdesc='systemd client libraries'
  depends=('glibc' 'gcc-libs' 'libcap' 'libgcrypt' 'lz4' 'xz' 'zstd')
  license+=(
    'CC0-1.0' # siphash
    'GPL-2.0-or-later WITH Linux-syscall-note' # src/basic/linux/*
  )
  provides=('libsystemd' 'libsystemd.so' 'libudev.so')
  conflicts=('libsystemd')
  replaces=('libsystemd')

  install -d -m0755 "$pkgdir"/usr/share/man
  mv systemd-libs/lib "$pkgdir"/usr/lib
  mv systemd-libs/include "$pkgdir"/usr/include
  mv systemd-libs/man3 "$pkgdir"/usr/share/man/man3
}

package_systemd-resolvconf() {
  pkgdesc='systemd resolvconf replacement (for use with systemd-resolved)'
  depends=("systemd=${pkgver}")
  provides=('openresolv' 'resolvconf')
  conflicts=('resolvconf')

  install -d -m0755 "$pkgdir"/usr/bin
  ln -s resolvectl "$pkgdir"/usr/bin/resolvconf

  install -d -m0755 "$pkgdir"/usr/share/man/man1
  ln -s resolvectl.1.gz "$pkgdir"/usr/share/man/man1/resolvconf.1.gz
}

package_systemd-sysvcompat() {
  pkgdesc='sysvinit compat for systemd'
  conflicts=('sysvinit')
  depends=("systemd=${pkgver}")

  install -D -m0644 -t "$pkgdir"/usr/share/man/man8 \
    build/man/{halt,poweroff,reboot,shutdown}.8

  install -d -m0755 "$pkgdir"/usr/bin
  ln -s ../lib/systemd/systemd "$pkgdir"/usr/bin/init
  for tool in halt poweroff reboot shutdown; do
    ln -s systemctl "$pkgdir"/usr/bin/$tool
  done
}

package_systemd-tests() {
  pkgdesc='systemd tests'
  depends=("systemd=${pkgver}")

  install -d -m0755 "$pkgdir"/usr/lib/systemd
  mv systemd-tests/tests "$pkgdir"/usr/lib/systemd/tests
}
