From cb6c0c0a77a8a5739a6f3b109826b42b210c7bd4 Mon Sep 17 00:00:00 2001
From: Dimitri John Ledkov <dimitri.j.ledkov@intel.com>
Date: Tue, 23 Jun 2015 11:26:11 +0100
Subject: [PATCH 03/38] core: use mmap to load files.

---
 src/core/load-fragment.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/core/load-fragment.c b/src/core/load-fragment.c
index 3ff6eae8fc..e45d595346 100644
--- a/src/core/load-fragment.c
+++ b/src/core/load-fragment.c
@@ -6091,7 +6091,7 @@ int unit_load_fragment(Unit *u) {
                 /* Try to open the file name. A symlink is OK, for example for linked files or masks. We
                  * expect that all symlinks within the lookup paths have been already resolved, but we don't
                  * verify this here. */
-                f = fopen(fragment, "re");
+                f = fopen(fragment, "rem");
                 if (!f)
                         return log_unit_notice_errno(u, errno, "Failed to open %s: %m", fragment);

--
2.36.1

From 54e9c48151c1bd7d6a8d623d7bfe2c3de2e4ef3b Mon Sep 17 00:00:00 2001
From: Auke Kok <auke-jan.h.kok@intel.com>
Date: Fri, 14 Jul 2017 11:34:36 -0700
Subject: [PATCH 24/38] Make timesyncd a "simple" service

the daemon ends up waiting 100 msec on networking conditions before notifying
that it is done, even though that's really not relevant
---
 units/systemd-timesyncd.service.in | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/units/systemd-timesyncd.service.in b/units/systemd-timesyncd.service.in
index c606461091..3771ede671 100644
--- a/units/systemd-timesyncd.service.in
+++ b/units/systemd-timesyncd.service.in
@@ -51,7 +51,7 @@ StateDirectory=systemd/timesync
 SystemCallArchitectures=native
 SystemCallErrorNumber=EPERM
 SystemCallFilter=@system-service @clock
-Type=notify
+Type=simple
 User=systemd-timesync
 {{SERVICE_WATCHDOG}}

--
2.36.1

From f4e78dca2ed3fd3ea9c0b4bad9652d4990e295d6 Mon Sep 17 00:00:00 2001
From: Arjan van de Ven <arjan@linux.intel.com>
Date: Wed, 13 Jun 2018 11:49:55 -0700
Subject: [PATCH 28/38] don't use libm just for integer exp10()

---
 src/resolve/resolved-dns-rr.c | 7 ++++---
 1 file changed, 4 insertions(+), 3 deletions(-)

diff --git a/src/resolve/resolved-dns-rr.c b/src/resolve/resolved-dns-rr.c
index 92245770bc..56d85bb09a 100644
--- a/src/resolve/resolved-dns-rr.c
+++ b/src/resolve/resolved-dns-rr.c
@@ -703,6 +703,7 @@ int dns_resource_record_equal(const DnsResourceRecord *a, const DnsResourceRecor
         return dns_resource_record_payload_equal(a, b);
 }

+static double exp10table[16] = {1E0, 1E1, 1E2, 1E3, 1E4, 1E5, 1E6, 1E7, 1E8, 1E9, 1E10, 1E11, 1E12, 1E13, 1E14, 1E15};
 static char* format_location(uint32_t latitude, uint32_t longitude, uint32_t altitude,
                              uint8_t size, uint8_t horiz_pre, uint8_t vert_pre) {
         char *s;
@@ -712,9 +713,9 @@ static char* format_location(uint32_t latitude, uint32_t longitude, uint32_t alt
         int lat = latitude >= 1U<<31 ? (int) (latitude - (1U<<31)) : (int) ((1U<<31) - latitude);
         int lon = longitude >= 1U<<31 ? (int) (longitude - (1U<<31)) : (int) ((1U<<31) - longitude);
         double alt = altitude >= 10000000u ? altitude - 10000000u : -(double)(10000000u - altitude);
-        double siz = (size >> 4) * exp10((double) (size & 0xF));
-        double hor = (horiz_pre >> 4) * exp10((double) (horiz_pre & 0xF));
-        double ver = (vert_pre >> 4) * exp10((double) (vert_pre & 0xF));
+        double siz = (size >> 4) * exp10table[size & 0xF];
+        double hor = (horiz_pre >> 4) * exp10table[horiz_pre & 0xF];
+        double ver = (vert_pre >> 4) * exp10table[vert_pre & 0xF];

         if (asprintf(&s, "%d %d %.3f %c %d %d %.3f %c %.2fm %.2fm %.2fm %.2fm",
                      (lat / 60000 / 60),
--
2.36.1

From bd049a7fd3be8c3f4403c33f339fec22d5b42635 Mon Sep 17 00:00:00 2001
From: Mark D Horn <mark.d.horn@intel.com>
Date: Fri, 3 Apr 2020 11:37:22 -0700
Subject: [PATCH 37/38] units: use /var/swapfile if found

New unit to automatically make use of a swapfile if
it exists, not a symlink, and /var is writable.

Signed-off-by: Mark D Horn <mark.d.horn@intel.com>
---
 units/meson.build       |  2 ++
 units/var-swapfile.swap | 19 +++++++++++++++++++
 2 files changed, 21 insertions(+)
 create mode 100644 units/var-swapfile.swap

diff --git a/units/var-swapfile.swap b/units/var-swapfile.swap
new file mode 100644
index 0000000000..6c61cf8ca4
--- /dev/null
+++ b/units/var-swapfile.swap
@@ -0,0 +1,19 @@
+#  SPDX-License-Identifier: LGPL-2.1+
+#
+#  This file is part of systemd.
+#
+#  systemd is free software; you can redistribute it and/or modify it
+#  under the terms of the GNU Lesser General Public License as published by
+#  the Free Software Foundation; either version 2.1 of the License, or
+#  (at your option) any later version.
+
+[Unit]
+Description=Default Swap File (/var/swapfile)
+Documentation=man:systemd.swap(5)
+ConditionPathExists=/var/swapfile
+ConditionPathIsSymbolicLink=!/var/swapfile
+ConditionPathIsReadWrite=/var/swapfile
+
+[Swap]
+What=/var/swapfile
+Options=discard,fixpgsz
--
2.36.1

--- systemd-stable-255.2/units/meson.build~	2024-01-02 15:16:59.000000000 +0000
+++ systemd-stable-255.2/units/meson.build	2024-01-02 16:26:58.381989309 +0000
@@ -714,6 +714,10 @@
           'file' : 'veritysetup-pre.target',
           'conditions' : ['HAVE_LIBCRYPTSETUP'],
         },
+	{
+	  'file' : 'var-swapfile.swap',
+	  'symlinks' : ['swap.target.wants/'],
+        },
         {
           'file' : 'veritysetup.target',
           'conditions' : ['HAVE_LIBCRYPTSETUP'],

--- systemd-stable-255.2/src/libsystemd/sd-daemon/sd-daemon.c~	2023-12-24 09:00:51.000000000 +0000
+++ systemd-stable-255.2/src/libsystemd/sd-daemon/sd-daemon.c	2024-01-02 16:17:19.678790549 +0000
@@ -27,6 +27,7 @@
 #include "stat-util.h"
 #include "strv.h"
 #include "time-util.h"
+#include "missing_syscall.h"

 #define SNDBUF_SIZE (8*1024*1024)


From a2e68c13c42b3082560f9068489b2b93a3e76ec7 Mon Sep 17 00:00:00 2001
From: Auke Kok <auke-jan.h.kok@intel.com>
Date: Fri, 14 Jul 2017 11:31:38 -0700
Subject: [PATCH 21/38] Remove libm memory overhead.

timesyncd pulls in libm, only for one single exp2() in a debug log
statement save the memory by not logging this little bit of info.
---
 src/timesync/timesyncd-manager.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/timesync/timesyncd-manager.c b/src/timesync/timesyncd-manager.c
index 9325523838..12bcf18dc3 100644
--- a/src/timesync/timesyncd-manager.c
+++ b/src/timesync/timesyncd-manager.c
@@ -556,7 +556,7 @@ static int manager_receive_response(sd_event_source *source, int fd, uint32_t re
                   NTP_FIELD_VERSION(ntpmsg.field),
                   NTP_FIELD_MODE(ntpmsg.field),
                   ntpmsg.stratum,
-                  exp2(ntpmsg.precision), ntpmsg.precision,
+                  0.0, ntpmsg.precision,
                   root_distance,
                   ntpmsg.stratum == 1 ? ntpmsg.refid : "n/a",
                   origin - OFFSET_1900_1970,
--
2.36.1

From 9380d230e9e307c9fe81a777eb7a421b39e47698 Mon Sep 17 00:00:00 2001
From: Auke Kok <auke-jan.h.kok@intel.com>
Date: Fri, 14 Jul 2017 11:33:26 -0700
Subject: [PATCH 22/38] skip not-present ACPI devices

Xen and older Qemu expose a boatload (253) ACPI devices to the guest
that are not present; these show up in sysfs but there's nothing
meaningful one can do with them.

This patch will have udev skip these devices to save the 100ms+
boot time
---
 src/libsystemd/sd-device/device-enumerator.c | 19 +++++++++++++++++++
 1 file changed, 19 insertions(+)

diff --git a/src/libsystemd/sd-device/device-enumerator.c b/src/libsystemd/sd-device/device-enumerator.c
index 39f769c35c..38734e0145 100644
--- a/src/libsystemd/sd-device/device-enumerator.c
+++ b/src/libsystemd/sd-device/device-enumerator.c
@@ -665,6 +665,22 @@ static bool relevant_sysfs_subdir(const struct dirent *de) {
         return IN_SET(de->d_type, DT_DIR, DT_LNK);
 }

+static int acpi_status_disabled(char *sysfspath) {
+        FILE *file;
+        unsigned int i;
+        char newpath[4096];
+        char line[128];
+        sprintf(newpath, "%s/status", sysfspath);
+        file = fopen(newpath, "r");
+        if (!file)
+                return 0;
+        fclose(file);
+
+        if (strstr(sysfspath, "acpi") && strstr(sysfspath, "device:"))
+                return 1;
+        return 0;
+}
+
 static int enumerator_scan_dir_and_add_devices(
                 sd_device_enumerator *enumerator,
                 const char *basedir,
@@ -703,6 +719,9 @@ static int enumerator_scan_dir_and_add_devices(

                 (void) sprintf(syspath, "%s%s", path, de->d_name);

+                if (acpi_status_disabled(syspath))
+                        continue;
+
                 k = sd_device_new_from_syspath(&device, syspath);
                 if (k < 0) {
                         if (k != -ENODEV)
--
2.36.1

From b4fd6697af9a31c22d24b040fd3559c3fc465f09 Mon Sep 17 00:00:00 2001
From: Arjan van de Ven <arjan@linux.intel.com>
Date: Wed, 13 Jun 2018 13:42:12 -0700
Subject: [PATCH 29/38] Notify systemd earlier that resolved is ready.

---
 src/resolve/resolved.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/resolve/resolved.c b/src/resolve/resolved.c
index d3bc902752..a5878d71ee 100644
--- a/src/resolve/resolved.c
+++ b/src/resolve/resolved.c
@@ -69,6 +69,8 @@ static int run(int argc, char *argv[]) {

         assert_se(sigprocmask_many(SIG_BLOCK, NULL, SIGTERM, SIGINT, SIGUSR1, SIGUSR2, SIGRTMIN+1, -1) >= 0);

+        notify_stop = notify_start(NOTIFY_READY, NOTIFY_STOPPING);
+
         r = manager_new(&m);
         if (r < 0)
                 return log_error_errno(r, "Could not create manager: %m");
@@ -87,8 +89,6 @@ static int run(int argc, char *argv[]) {
         if (r < 0)
                 return log_error_errno(r, "Failed to drop remaining caps: %m");

-        notify_stop = notify_start(NOTIFY_READY, NOTIFY_STOPPING);
-
         r = sd_event_loop(m->event);
         if (r < 0)
                 return log_error_errno(r, "Event loop failed: %m");
--
2.36.1

From 36c36ee824758c5d999270f2663a1037b4fcbc55 Mon Sep 17 00:00:00 2001
From: Arjan van de Ven <arjan@linux.intel.com>
Date: Mon, 14 Jan 2019 09:43:59 -0800
Subject: [PATCH 32/38] Do not enable audit by default in the journal.

---
 man/journald.conf.xml         | 2 +-
 src/journal/journald-server.c | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/journal/journald-server.c b/src/journal/journald-server.c
index 04a99dcfc0..eef6246ce9 100644
--- a/src/journal/journald-server.c
+++ b/src/journal/journald-server.c
@@ -2293,7 +2293,7 @@ int server_init(Server *s, const char *namespace) {
                 .compress.threshold_bytes = UINT64_MAX,
                 .seal = true,

-                .set_audit = true,
+                .set_audit = false,

                 .watchdog_usec = USEC_INFINITY,

--
2.36.1

From 8e4cfbbec6543cef4b40df3a83d890d91b222e3a Mon Sep 17 00:00:00 2001
From: Auke Kok <auke-jan.h.kok@intel.com>
Date: Fri, 31 Mar 2017 10:15:52 -0700
Subject: [PATCH 19/38] network-online: complete once one link is online, not
 all.

---
 units/systemd-networkd-wait-online.service.in | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

--- systemd-stable-255.2/units/systemd-networkd-wait-online.service.in~	2023-12-24 09:00:51.000000000 +0000
+++ systemd-stable-255.2/units/systemd-networkd-wait-online.service.in	2024-01-02 15:43:18.572623833 +0000
@@ -19,7 +19,7 @@

 [Service]
 Type=oneshot
-ExecStart={{LIBEXECDIR}}/systemd-networkd-wait-online
+ExecStart={{LIBEXECDIR}}/systemd-networkd-wait-online --any
 RemainAfterExit=yes

 [Install]

From c02c742c26edc93400f7dfb9509c6fa6c3fea4e9 Mon Sep 17 00:00:00 2001
From: Arjan van de Ven <arjan@linux.intel.com>
Date: Sun, 19 Jun 2016 00:51:22 +0000
Subject: [PATCH 16/38] not load iptables

---
 src/core/kmod-setup.c | 4 ----
 1 file changed, 4 deletions(-)

--- systemd-stable-255.2/src/core/kmod-setup.c~	2023-12-24 09:00:51.000000000 +0000
+++ systemd-stable-255.2/src/core/kmod-setup.c	2024-01-02 15:38:06.349377373 +0000
@@ -132,10 +132,6 @@
                 /* This should never be a module */
                 { "unix",                       "/proc/net/unix",            true,  true,  NULL               },

-#if HAVE_LIBIPTC
-                /* netfilter is needed by networkd, nspawn among others, and cannot be autoloaded */
-                { "ip_tables",                  "/proc/net/ip_tables_names", false, false, NULL               },
-#endif
                 /* virtio_rng would be loaded by udev later, but real entropy might be needed very early */
                 { "virtio_rng",                 NULL,                        false, false, has_virtio_rng     },

