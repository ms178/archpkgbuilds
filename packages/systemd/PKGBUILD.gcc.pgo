pkgbase=systemd
pkgname=('systemd'
         'systemd-libs'
         'systemd-resolvconf'
         'systemd-sysvcompat'
)
_tag='257.7'
pkgver="${_tag/[-~]/}"
pkgrel=10.1
arch=('x86_64')
license=('LGPL-2.1-or-later')
url='https://www.github.com/systemd/systemd'
makedepends=('acl' 'cryptsetup' 'gperf' 'lz4' 'xz' 'pam' 'libelf'
             'intltool' 'iptables' 'kmod' 'libarchive' 'libcap' 'libidn2' 'libgcrypt'
             'libmicrohttpd' 'libxcrypt' 'util-linux' 'linux-api-headers'
             'python-jinja' 'python-lxml' 'quota-tools' 'shadow' 'git'
             'meson' 'libseccomp' 'pcre2' 'audit' 'kexec-tools' 'libxkbcommon'
             'bash-completion' 'p11-kit' 'systemd' 'libfido2' 'tpm2-tss' 'rsync'
             'bpf' 'libbpf' 'curl' 'gnutls' 'python-pyelftools'
             'libpwquality' 'qrencode' 'lib32-gcc-libs' 'python-pefile')
conflicts=("mkinitcpio<38-1")
validpgpkeys=('63CDA1E5D3FC22B998D20DD6327F26951A015CC4'
              'A9EA9081724FFAE0484C35A1A81CEA22BC8C7E2E'
              '9A774DB5DB996C154EBBFBFDA0099A18E29326E1'
              '5C251B5FC54EB2F80F407AAAC54CA336CFEB557E')
source=("git+https://github.com/systemd/systemd#tag=v${_tag}?signed"
        '0001-Use-Arch-Linux-device-access-groups.patch'
        clear.patch
        'arch.conf'
        'loader.conf'
        'splash-arch.bmp'
        'systemd-user.pam'
        'systemd-hook'
        '20-systemd-sysusers.hook'
        '30-systemd-binfmt.hook'
        '30-systemd-catalog.hook'
        '30-systemd-daemon-reload-system.hook'
        '30-systemd-daemon-reload-user.hook'
        '30-systemd-hwdb.hook'
        '30-systemd-restart-marked.hook'
        '30-systemd-sysctl.hook'
        '30-systemd-tmpfiles.hook'
        '30-systemd-udev-reload.hook'
        '30-systemd-update.hook')
sha512sums=('SKIP'
            '3ccf783c28f7a1c857120abac4002ca91ae1f92205dcd5a84aff515d57e706a3f9240d75a0a67cff5085716885e06e62597baa86897f298662ec36a940cf410e'
            '61032d29241b74a0f28446f8cf1be0e8ec46d0847a61dadb2a4f096e8686d5f57fe5c72bcf386003f6520bc4b5856c32d63bf3efe7eb0bc0deefc9f68159e648'
            'c416e2121df83067376bcaacb58c05b01990f4614ad9de657d74b6da3efa441af251d13bf21e3f0f71ddcb4c9ea658b81da3d915667dc5c309c87ec32a1cb5a5'
            '5a1d78b5170da5abe3d18fdf9f2c3a4d78f15ba7d1ee9ec2708c4c9c2e28973469bc19386f70b3cf32ffafbe4fcc4303e5ebbd6d5187a1df3314ae0965b25e75'
            'b90c99d768dc2a4f020ba854edf45ccf1b86a09d2f66e475de21fe589ff7e32c33ef4aa0876d7f1864491488fd7edb2682fc0d68e83a6d4890a0778dc2d6fe19'
            '3cb8f88c1bffc753d0c540be5d25a0fdb9224478cca64743b5663340f2f26b197775286e6e680228db54c614dcd11da1135e625674a622127681662bec4fa886'
            '299dcc7094ce53474521356647bdd2fb069731c08d14a872a425412fcd72da840727a23664b12d95465bf313e8e8297da31259508d1c62cc2dcea596160e21c5'
            '0d6bc3d928cfafe4e4e0bc04dbb95c5d2b078573e4f9e0576e7f53a8fab08a7077202f575d74a3960248c4904b5f7f0661bf17dbe163c524ab51dd30e3cb80f7'
            '2b50b25e8680878f7974fa9d519df7e141ca11c4bfe84a92a5d01bb193f034b1726ea05b3c0030bad1fbda8dbb78bf1dc7b73859053581b55ba813c39b27d9dc'
            'a436d3f5126c6c0d6b58c6865e7bd38dbfbfb7babe017eeecb5e9d162c21902cbf4e0a68cf3ac2f99815106f9fa003b075bd2b4eb5d16333fa913df6e2f3e32a'
            '190112e38d5a5c0ca91b89cd58f95595262a551530a16546e1d84700fc9644aa2ca677953ffff655261e8a7bff6e6af4e431424df5f13c00bc90b77c421bc32d'
            'a1661ab946c6cd7d3c6251a2a9fd68afe231db58ce33c92c42594aedb5629be8f299ba08a34713327b373a3badd1554a150343d8d3e5dfb102999c281bd49154'
            '9426829605bbb9e65002437e02ed54e35c20fdf94706770a3dc1049da634147906d6b98bf7f5e7516c84068396a12c6feaf72f92b51bdf19715e0f64620319de'
            'da7a97d5d3701c70dd5388b0440da39006ee4991ce174777931fea2aa8c90846a622b2b911f02ae4d5fffb92680d9a7e211c308f0f99c04896278e2ee0d9a4dc'
            'a50d202a9c2e91a4450b45c227b295e1840cc99a5e545715d69c8af789ea3dd95a03a30f050d52855cabdc9183d4688c1b534eaa755ebe93616f9d192a855ee3'
            '825b9dd0167c072ba62cabe0677e7cd20f2b4b850328022540f122689d8b25315005fa98ce867cf6e7460b2b26df16b88bb3b5c9ebf721746dce4e2271af7b97')

_meson_version="${pkgver}-${pkgrel}"
_systemd_src_dir="${pkgbase}"

prepare() {
  cd "${_systemd_src_dir}"
  patch -Np1 -i ../0001-Use-Arch-Linux-device-access-groups.patch
  patch -Np1 -i ../clear.patch
}

build() {
  local _timeservers=({0..3}.de.pool.ntp.org)
  local _nameservers=('1.1.1.1#cloudflare-dns.com' '2606:4700:4700::1111#cloudflare-dns.com')

  local _meson_options=(
    -Dversion-tag="${_meson_version}-arch" -Dvcs-tag=false -Dshared-lib-tag="${_meson_version}"
    -Dapparmor=disabled -Dbootloader=disabled -Dxenctrl=disabled -Dbpf-framework=enabled
    -Dima=false -Dinstall-tests=true -Dlibidn2=enabled -Dlz4=enabled -Dman=enabled
    -Dnscd=false -Dselinux=disabled -Dsshdprivsepdir=/usr/share/empty.sshd
    -Dvmlinux-h=provided -Dvmlinux-h-path=/usr/src/linux-cachymod-615-bore-lto/vmlinux.h -Dukify=disabled -Dwerror=false
    -Ddbuspolicydir=/usr/share/dbus-1/system.d -Ddefault-dnssec=no -Ddefault-kill-user-processes=false
    -Ddefault-locale='C.UTF-8' -Dlocalegen-path=/usr/bin/locale-gen -Ddns-over-tls=openssl
    -Dfallback-hostname='cachyos' -Dnologin-path=/usr/bin/nologin -Dntp-servers="${_timeservers[*]}"
    -Ddns-servers="${_nameservers[*]}" -Drpmmacrosdir=no -Dsysvinit-path= -Dsysvrcnd-path=
    -Dsbat-distro='arch' -Dsbat-distro-summary='CachyOS' -Dsbat-distro-pkgname="${pkgname}"
    -Dsbat-distro-version="${pkgver}" -Dsbat-distro-url="https://archlinux.org/packages/core/x86_64/${pkgname}/"
  )

  local _pgo_dir="${srcdir}/pgo-data"
  mkdir -p "${_pgo_dir}"

  run_training_workload() {
    local build_dir="$1"
    msg2 "Running sophisticated training workload in $build_dir..."
    cd "$build_dir"
    export SYSTEMD_PAGER=cat PAGER=cat
    local TIMEOUT_CMD="timeout 7"
    mkdir -p etc/systemd/system etc/tmpfiles.d
    cat > etc/systemd/system/pgo-test.service <<EOF
[Unit]
Description=PGO Test Service
[Service]
Type=oneshot
ExecStart=/usr/bin/true
EOF
    cat > etc/systemd/system/pgo-test.socket <<EOF
[Unit]
Description=PGO Test Socket
[Socket]
ListenStream=12345
Accept=no
EOF
    cat > etc/tmpfiles.d/pgo-test.conf <<EOF
d /var/run/pgo-test 0755 root root -
EOF
    msg2 "  (1/7) Exercising core, service, and analysis tools..."
    ./systemd --version &>/dev/null || true
    ./systemd-analyze --version &>/dev/null || true
    $TIMEOUT_CMD ./systemd-analyze blame &>/dev/null || true
    $TIMEOUT_CMD ./systemd-analyze critical-chain &>/dev/null || true
    $TIMEOUT_CMD ./systemd-analyze verify ../etc/systemd/system/pgo-test.service &>/dev/null || true
    $TIMEOUT_CMD ./systemd-analyze verify ../etc/systemd/system/pgo-test.socket &>/dev/null || true
    $TIMEOUT_CMD ./systemctl list-units --all &>/dev/null || true
    $TIMEOUT_CMD ./systemctl list-sockets &>/dev/null || true
    $TIMEOUT_CMD ./systemctl list-timers &>/dev/null || true
    $TIMEOUT_CMD ./systemctl show --property=MainPID,ExecMainStatus,NRestarts &>/dev/null || true
    msg2 "  (2/7) Exercising logging and journal tools..."
    if [[ -f ./journalctl ]]; then
      $TIMEOUT_CMD ./journalctl -n 10 --no-pager --all &>/dev/null || true
      $TIMEOUT_CMD ./journalctl -p err..alert --no-pager &>/dev/null || true
      $TIMEOUT_CMD ./journalctl --verify &>/dev/null || true
      $TIMEOUT_CMD ./journalctl --list-catalog &>/dev/null || true
    fi
    msg2 "  (3/7) Exercising device and hardware management tools..."
    if [[ -f ./udevadm ]]; then
      $TIMEOUT_CMD ./udevadm info /dev/null &>/dev/null || true
      $TIMEOUT_CMD ./udevadm trigger &>/dev/null || true
      $TIMEOUT_CMD ./udevadm settle &>/dev/null || true
    fi
    msg2 "  (4/7) Exercising network and resolver tools..."
    if [[ -f ./networkctl ]]; then $TIMEOUT_CMD ./networkctl list &>/dev/null || true; fi
    if [[ -f ./resolvectl ]]; then
      $TIMEOUT_CMD ./resolvectl query archlinux.org cachyos.org &>/dev/null || true
      $TIMEOUT_CMD ./resolvectl dns &>/dev/null || true
      $TIMEOUT_CMD ./resolvectl domain &>/dev/null || true
    fi
    msg2 "  (5/7) Exercising session, user, and time tools..."
    if [[ -f ./loginctl ]]; then
      $TIMEOUT_CMD ./loginctl list-sessions &>/dev/null || true
      $TIMEOUT_CMD ./loginctl show-session 1 &>/dev/null || true
    fi
    if [[ -f ./timedatectl ]]; then $TIMEOUT_CMD ./timedatectl status &>/dev/null || true; fi
    if [[ -f ./homectl ]]; then $TIMEOUT_CMD ./homectl inspect non-existent-user &>/dev/null || true; fi
    msg2 "  (6/7) Exercising filesystem and IPC tools..."
    if [[ -f ./systemd-tmpfiles ]]; then $TIMEOUT_CMD ./systemd-tmpfiles --create ../etc/tmpfiles.d/pgo-test.conf &>/dev/null || true; fi
    if [[ -f ./systemd-path ]]; then
        for type in user-config user-data system-config system-data; do
            $TIMEOUT_CMD ./systemd-path $type &>/dev/null || true
        done
    fi
    if [[ -f ./busctl ]]; then
        $TIMEOUT_CMD ./busctl list &>/dev/null || true
        $TIMEOUT_CMD ./busctl introspect org.freedesktop.systemd1 /org/freedesktop/systemd1 &>/dev/null || true
    fi
    msg2 "  (7/7) Simulating real-world scenarios (gaming/compilation)..."
    if [[ -f ./systemd-run ]]; then
      $TIMEOUT_CMD ./systemd-run --user --scope --property="CPUSchedulingPolicy=fifo" --property="CPUSchedulingPriority=99" true &>/dev/null || true
      $TIMEOUT_CMD ./systemd-run --user --scope --property="Nice=10" --property="CPUAffinity=0" --property="IOWeight=200" true &>/dev/null || true
    fi
    cd "${srcdir}"
    msg2 "Sophisticated training workload completed."
  }

  # STAGE 1: Instrumented build with GCC
  msg2 "PGO: Building instrumented binaries with GCC..."
  export CC=gcc CXX=g++
  arch-meson "${_systemd_src_dir}" build-pgo-gen "${_meson_options[@]}" \
    -Dc_args="${CFLAGS} -fprofile-generate=${_pgo_dir}" \
    -Dcpp_args="${CXXFLAGS} -fprofile-generate=${_pgo_dir}" \
    -Dc_link_args="${LDFLAGS} -fprofile-generate=${_pgo_dir}" \
    -Dcpp_link_args="${LDFLAGS} -fprofile-generate=${_pgo_dir}"
  ninja -C build-pgo-gen

  # STAGE 2: Run the training workload
  run_training_workload "build-pgo-gen"

  # STAGE 3: Final build using the generated profile data
  msg2 "PGO: Building final optimized binaries with profile data..."
  export CC=gcc CXX=g++
  arch-meson "${_systemd_src_dir}" build "${_meson_options[@]}" \
    -Dc_args="${CFLAGS} -fprofile-use=${_pgo_dir} -fprofile-correction" \
    -Dcpp_args="${CXXFLAGS} -fprofile-use=${_pgo_dir} -fprofile-correction" \
    -Dc_link_args="${LDFLAGS} -fprofile-use=${_pgo_dir} -fprofile-correction" \
    -Dcpp_link_args="${LDFLAGS} -fprofile-use=${_pgo_dir} -fprofile-correction"
  ninja -C build
}

check() {
  meson test -C build --print-errorlogs
}

package_systemd() {
  pkgdesc='system and service manager'
  license+=('GPL-2.0-or-later' 'MIT-0')
  depends=("systemd-libs=${pkgver}" 'acl' 'bash' 'cryptsetup' 'dbus' 'dbus-units' 'kbd' 'kmod' 'hwdata' 'libcap' 'libgcrypt' 'libxcrypt' 'libidn2' 'lz4' 'pam' 'libelf' 'libseccomp' 'util-linux' 'xz' 'pcre2' 'audit' 'openssl')
  provides=('nss-myhostname' "systemd-tools=$pkgver" "udev=$pkgver")
  replaces=('nss-myhostname' 'systemd-tools' 'udev')
  conflicts=('nss-myhostname' 'systemd-tools' 'udev')
  optdepends=('libmicrohttpd: systemd-journal-gatewayd and systemd-journal-remote' 'quota-tools: kernel-level quota management' 'systemd-sysvcompat: symlink package to provide sysvinit binaries' 'polkit: allow administration as unprivileged user' 'curl: systemd-journal-upload, machinectl pull-tar and pull-raw' 'gnutls: systemd-journal-gatewayd and systemd-journal-remote' 'qrencode: show QR codes' 'iptables: firewall features' 'libarchive: convert DDIs to tarballs' 'libbpf: support BPF programs' 'libpwquality: check password quality' 'libfido2: unlocking LUKS2 volumes with FIDO2 token' 'libp11-kit: support PKCS#11' 'tpm2-tss: unlocking LUKS2 volumes with TPM2')
  backup=(etc/pam.d/systemd-user etc/systemd/coredump.conf etc/systemd/homed.conf etc/systemd/journald.conf etc/systemd/journal-remote.conf etc/systemd/journal-upload.conf etc/systemd/logind.conf etc/systemd/networkd.conf etc/systemd/oomd.conf etc/systemd/pstore.conf etc/systemd/resolved.conf etc/systemd/sleep.conf etc/systemd/system.conf etc/systemd/timesyncd.conf etc/systemd/user.conf etc/udev/iocost.conf etc/udev/udev.conf)
  install=systemd.install

  meson install -C build --destdir "$pkgdir"

  # we'll create this on installation
  rmdir "$pkgdir"/var/log/journal/remote

  # runtime libraries shipped with systemd-libs
  install -d -m0755 systemd-libs/lib/
  mv "$pkgdir"/usr/lib/lib{nss,systemd,udev}*.so* systemd-libs/lib/
  mv "$pkgdir"/usr/lib/pkgconfig systemd-libs/lib/pkgconfig
  mv "$pkgdir"/usr/include systemd-libs/include
  mv "$pkgdir"/usr/share/man/man3 systemd-libs/man3

  # tests are moved to systemd-tests
  install -d -m0755 systemd-tests/
  mv "$pkgdir"/usr/lib/systemd/tests systemd-tests/

  # avoid a potential conflict with [core]/filesystem
  rm "$pkgdir"/usr/share/factory/etc/{issue,nsswitch.conf}
  sed -i -e '/^C \/etc\/nsswitch\.conf/d' -e '/^C \/etc\/issue/d' "$pkgdir"/usr/lib/tmpfiles.d/etc.conf

  # ship default policy to leave services disabled
  echo 'disable *' >"$pkgdir"/usr/lib/systemd/system-preset/99-default.preset

  install -d -o root -g root -m 2755 "$pkgdir"/var/log/journal

  # add example bootctl configuration
  install -D -m0644 arch.conf "$pkgdir"/usr/share/systemd/bootctl/arch.conf
  install -D -m0644 loader.conf "$pkgdir"/usr/share/systemd/bootctl/loader.conf
  install -D -m0644 splash-arch.bmp "$pkgdir"/usr/share/systemd/bootctl/splash-arch.bmp

  # pacman hooks
  install -D -m0755 systemd-hook "$pkgdir"/usr/share/libalpm/scripts/systemd-hook
  install -D -m0644 -t "$pkgdir"/usr/share/libalpm/hooks *.hook

  # overwrite the systemd-user PAM configuration with our own
  install -D -m0644 systemd-user.pam "$pkgdir"/etc/pam.d/systemd-user

  # create a directory for cryptsetup keys
  install -d -m0700 "$pkgdir"/etc/cryptsetup-keys.d

  # handle uncommon license
  install -d -m0755 "$pkgdir/usr/share/licenses/$pkgbase"
  ln -s -t "$_" /usr/share/doc/systemd/LICENSES/MIT-0.txt
}

package_systemd-libs() {
  pkgdesc='systemd client libraries'
  depends=('glibc' 'gcc-libs' 'libcap' 'libgcrypt' 'lz4' 'xz' 'zstd')
  license+=('GPL-2.0-or-later WITH Linux-syscall-note')
  provides=('libsystemd' 'libsystemd.so' 'libudev.so')
  conflicts=('libsystemd')
  replaces=('libsystemd')

  install -d -m0755 "$pkgdir"/usr/share/man
  mv systemd-libs/lib "$pkgdir"/usr/lib
  mv systemd-libs/include "$pkgdir"/usr/include
  mv systemd-libs/man3 "$pkgdir"/usr/share/man/man3
}

package_systemd-resolvconf() {
  pkgdesc='systemd resolvconf replacement (for use with systemd-resolved)'
  depends=("systemd=${pkgver}")
  provides=('openresolv' 'resolvconf')
  conflicts=('resolvconf')

  install -d -m0755 "$pkgdir"/usr/bin
  ln -s resolvectl "$pkgdir"/usr/bin/resolvconf
  install -d -m0755 "$pkgdir"/usr/share/man/man1
  ln -s resolvectl.1.gz "$pkgdir"/usr/share/man/man1/resolvconf.1.gz
}

package_systemd-sysvcompat() {
  pkgdesc='sysvinit compat for systemd'
  conflicts=('sysvinit')
  depends=("systemd=${pkgver}")

  install -D -m0644 -t "$pkgdir"/usr/share/man/man8 build/man/{halt,poweroff,reboot,shutdown}.8
  install -d -m0755 "$pkgdir"/usr/bin
  ln -s ../lib/systemd/systemd "$pkgdir"/usr/bin/init
  for tool in halt poweroff reboot shutdown; do
    ln -s systemctl "$pkgdir"/usr/bin/$tool
  done
}

package_systemd-tests() {
  pkgdesc='systemd tests'
  depends=("systemd=${pkgver}")

  install -d -m0755 "$pkgdir"/usr/lib/systemd
  mv systemd-tests/tests "$pkgdir"/usr/lib/systemd/tests
}
