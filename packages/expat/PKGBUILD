pkgname=expat
pkgver=2.6.4
pkgrel=2.1
pkgdesc="An XML parser library"
arch=(x86_64)
url="https://libexpat.github.io/"
license=(MIT)
depends=(glibc)
makedepends=(cmake clang llvm)
provides=(libexpat.so)
options=(strip)
source=("https://github.com/libexpat/libexpat/releases/download/R_${pkgver//./_}/${pkgname}-${pkgver}.tar.bz2"{,.asc})
sha512sums=('46cc9d725f359b77681a2875bfefa15ceee50eb9513f6577607c0c5833dfa4241565c74f26b84b38d802c3cd8c32f00204fd74272bcecbd21229425764eef86c'
            'SKIP')
b2sums=('a829bd94d2cc9b305874ae2539dd4388ea99eaed21d2da17bbd99a1e7735b0f7cb910d096f72c71b128dcb8ffdff9021109e7ff5e562d8cefad228fd8d66f897'
        'SKIP')
validpgpkeys=(3176EF7DB2367F1FCA4F306B1F9B0E909AF37285) # Sebastian Pipping

# PGO instrumentation flags
_common_instrument_flags=" -g3 -fno-omit-frame-pointer -mllvm -vp-counters-per-site=10 -mllvm -runtime-counter-relocation -mllvm -enable-value-profiling"

prepare() {
  # Create directories for PGO profiles
  mkdir -p "$srcdir/pgo/standard" "$srcdir/pgo/context-sensitive"
}

build() {
  # Store base flags to avoid accumulating stage-specific flags
  local base_cflags="${CFLAGS}"
  local base_cxxflags="${CXXFLAGS}"
  local base_ldflags="${LDFLAGS}"

  # Stage 1: Build with standard PGO instrumentation (-fprofile-generate)
  export CC=clang
  export CXX=clang++
  export CFLAGS="${base_cflags} -fprofile-generate=${srcdir}/pgo/standard ${_common_instrument_flags}"
  export CXXFLAGS="${base_cxxflags} -fprofile-generate=${srcdir}/pgo/standard ${_common_instrument_flags}"
  export LDFLAGS="${base_ldflags} -fprofile-generate=${srcdir}/pgo/standard"

  cmake -DCMAKE_INSTALL_PREFIX=/usr \
        -DCMAKE_BUILD_TYPE=Debug \
        -DCMAKE_C_STANDARD=23 \
        -DCMAKE_CXX_STANDARD=20 \
        -DEXPAT_BUILD_DOCS=OFF \
        -DEXPAT_BUILD_EXAMPLES=OFF \
        -DEXPAT_BUILD_TOOLS=OFF \
        -W no-dev \
        -B build-instrumented \
        -S "$pkgname-$pkgver"
  make VERBOSE=1 -C build-instrumented

  # Stage 2: Run the instrumented binary to generate profiling data
  # Note: For expat, we need to run tests or a representative workload to generate profile data.
  # Here, we use the test suite as a workload.
  # Set LLVM_PROFILE_FILE to ensure profile data is written to the correct location
  export LLVM_PROFILE_FILE="${srcdir}/pgo/standard/%p.profraw"
  make VERBOSE=1 -C build-instrumented test

  # Check if profile data files were generated
  if [ -z "$(ls ${srcdir}/pgo/standard/*.profraw 2>/dev/null)" ]; then
    echo "Error: No profile data files (*.profraw) were generated in ${srcdir}/pgo/standard/"
    exit 1
  fi

  # Merge the standard PGO profile data
  llvm-profdata merge -output="${srcdir}/pgo/standard.profdata" "${srcdir}/pgo/standard"/*.profraw

  # Stage 3: Build with context-sensitive PGO instrumentation (-fcs-profile-generate)
  export CFLAGS="${base_cflags} -fprofile-use=${srcdir}/pgo/standard.profdata -fcs-profile-generate=${srcdir}/pgo/context-sensitive ${_common_instrument_flags}"
  export CXXFLAGS="${base_cxxflags} -fprofile-use=${srcdir}/pgo/standard.profdata -fcs-profile-generate=${srcdir}/pgo/context-sensitive ${_common_instrument_flags}"
  export LDFLAGS="${base_ldflags} -fprofile-use=${srcdir}/pgo/standard.profdata -fcs-profile-generate=${srcdir}/pgo/context-sensitive"

  cmake -DCMAKE_INSTALL_PREFIX=/usr \
        -DCMAKE_BUILD_TYPE=Debug \
        -DCMAKE_C_STANDARD=23 \
        -DCMAKE_CXX_STANDARD=20 \
        -DEXPAT_BUILD_DOCS=OFF \
        -DEXPAT_BUILD_EXAMPLES=OFF \
        -DEXPAT_BUILD_TOOLS=OFF \
        -W no-dev \
        -B build-cs-instrumented \
        -S "$pkgname-$pkgver"
  make VERBOSE=1 -C build-cs-instrumented

  # Stage 4: Run the context-sensitive instrumented binary to generate additional profiling data
  export LLVM_PROFILE_FILE="${srcdir}/pgo/context-sensitive/%p.profraw"
  make VERBOSE=1 -C build-cs-instrumented test

  # Check if profile data files were generated
  if [ -z "$(ls ${srcdir}/pgo/context-sensitive/*.profraw 2>/dev/null)" ]; then
    echo "Error: No profile data files (*.profraw) were generated in ${srcdir}/pgo/context-sensitive/"
    exit 1
  fi

  # Merge the context-sensitive PGO profile data with the standard profile
  llvm-profdata merge -output="${srcdir}/pgo/cs.profdata" "${srcdir}/pgo/context-sensitive"/*.profraw "${srcdir}/pgo/standard.profdata"

  # Stage 5: Final optimized build using the merged profile data (-fprofile-use)
  export CFLAGS="${base_cflags} -fprofile-use=${srcdir}/pgo/cs.profdata ${_common_instrument_flags}"
  export CXXFLAGS="${base_cxxflags} -fprofile-use=${srcdir}/pgo/cs.profdata ${_common_instrument_flags}"
  export LDFLAGS="${base_ldflags} -fprofile-use=${srcdir}/pgo/cs.profdata"

  cmake -DCMAKE_INSTALL_PREFIX=/usr \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_C_STANDARD=23 \
        -DCMAKE_CXX_STANDARD=20 \
        -DEXPAT_BUILD_DOCS=OFF \
        -DEXPAT_BUILD_EXAMPLES=OFF \
        -DEXPAT_BUILD_TOOLS=OFF \
        -W no-dev \
        -B build-optimized \
        -S "$pkgname-$pkgver"
  make VERBOSE=1 -C build-optimized
}

check() {
  # Run tests on the final optimized build
  make VERBOSE=1 -C build-optimized test
}

package() {
  # Install the final optimized build
  make VERBOSE=1 DESTDIR="$pkgdir" -C build-optimized install
  install -vDm 644 "$pkgname-$pkgver/COPYING" -t "${pkgdir}/usr/share/licenses/$pkgname/"
  install -vDm 644 "$pkgname-$pkgver/"{AUTHORS,Changes,README.md} -t "${pkgdir}/usr/share/doc/${pkgname}/"
}
