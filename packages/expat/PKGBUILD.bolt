pkgname=expat
pkgver=2.6.4
pkgrel=2.1
pkgdesc="An XML parser library"
arch=(x86_64)
url="https://libexpat.github.io/"
license=(MIT)
depends=(glibc)
makedepends=(cmake clang llvm)
provides=(libexpat.so)
options=(!strip)
source=("https://github.com/libexpat/libexpat/releases/download/R_${pkgver//./_}/${pkgname}-${pkgver}.tar.bz2"{,.asc})
sha512sums=('46cc9d725f359b77681a2875bfefa15ceee50eb9513f6577607c0c5833dfa4241565c74f26b84b38d802c3cd8c32f00204fd74272bcecbd21229425764eef86c'
            'SKIP')
b2sums=('a829bd94d2cc9b305874ae2539dd4388ea99eaed21d2da17bbd99a1e7735b0f7cb910d096f72c71b128dcb8ffdff9021109e7ff5e562d8cefad228fd8d66f897'
        'SKIP')
validpgpkeys=(3176EF7DB2367F1FCA4F306B1F9B0E909AF37285) # Sebastian Pipping

# PGO instrumentation flags
_common_instrument_flags=" -g3 -fno-omit-frame-pointer -mllvm -vp-counters-per-site=10 -mllvm -runtime-counter-relocation -mllvm -enable-value-profiling"

prepare() {
  # Create directories for PGO profiles
  mkdir -p "$srcdir/pgo/standard" "$srcdir/pgo/context-sensitive"

  # Create a directory for XML test files
  mkdir -p "$srcdir/xml_samples"

  # Create a variety of XML test files of different sizes and complexity
  cat > "$srcdir/xml_samples/simple.xml" << EOF
<?xml version="1.0" encoding="UTF-8"?>
<root>
  <element>Content</element>
  <empty_element/>
</root>
EOF

  cat > "$srcdir/xml_samples/attributes.xml" << EOF
<?xml version="1.0" encoding="UTF-8"?>
<root attr1="value1" attr2="value2">
  <element id="1" class="test">Content with attributes</element>
  <element id="2" class="test">More content</element>
</root>
EOF

  cat > "$srcdir/xml_samples/nested.xml" << EOF
<?xml version="1.0" encoding="UTF-8"?>
<root>
  <level1>
    <level2>
      <level3>
        <level4>Deeply nested content</level4>
        <level4>More nested content</level4>
      </level3>
      <level3 attr="value">Another branch</level3>
    </level2>
    <level2>Sibling content</level2>
  </level1>
  <empty_branch/>
</root>
EOF

  cat > "$srcdir/xml_samples/entities.xml" << EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE root [
  <!ENTITY entity1 "This is entity 1">
  <!ENTITY entity2 "This is entity 2">
]>
<root>
  <element>&entity1;</element>
  <element>&entity2;</element>
  <element>&lt;escaped&gt;</element>
</root>
EOF

  cat > "$srcdir/xml_samples/namespace.xml" << EOF
<?xml version="1.0" encoding="UTF-8"?>
<root xmlns="http://default-namespace.org"
      xmlns:ns1="http://namespace1.org"
      xmlns:ns2="http://namespace2.org">
  <element>Default namespace</element>
  <ns1:element>Namespace 1</ns1:element>
  <ns2:element ns1:attr="value">Namespace 2 with ns1 attribute</ns2:element>
</root>
EOF

  # Create a larger XML file with repetitive elements
  echo '<?xml version="1.0" encoding="UTF-8"?>' > "$srcdir/xml_samples/large.xml"
  echo '<root>' >> "$srcdir/xml_samples/large.xml"
  for i in {1..1000}; do
    echo "  <item id=\"$i\">" >> "$srcdir/xml_samples/large.xml"
    echo "    <name>Item $i</name>" >> "$srcdir/xml_samples/large.xml"
    echo "    <description>This is the description for item $i</description>" >> "$srcdir/xml_samples/large.xml"
    echo "    <properties>" >> "$srcdir/xml_samples/large.xml"
    echo "      <property key=\"color\">blue</property>" >> "$srcdir/xml_samples/large.xml"
    echo "      <property key=\"size\">medium</property>" >> "$srcdir/xml_samples/large.xml"
    echo "      <property key=\"material\">metal</property>" >> "$srcdir/xml_samples/large.xml"
    echo "    </properties>" >> "$srcdir/xml_samples/large.xml"
    echo "  </item>" >> "$srcdir/xml_samples/large.xml"
  done
  echo '</root>' >> "$srcdir/xml_samples/large.xml"

  # Create a test program that uses expat to parse XML files
  cat > "$srcdir/test_expat.c" << 'EOF'
#include <expat.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/stat.h>

// Handlers for the XML parser
static void XMLCALL startElementHandler(void *userData, const XML_Char *name, const XML_Char **atts) {
    printf("Start element: %s\n", name);
    int i;
    for (i = 0; atts[i]; i += 2) {
        printf("  Attribute: %s = %s\n", atts[i], atts[i + 1]);
    }
}

static void XMLCALL endElementHandler(void *userData, const XML_Char *name) {
    printf("End element: %s\n", name);
}

static void XMLCALL characterDataHandler(void *userData, const XML_Char *s, int len) {
    char *data = (char*)malloc(len + 1);
    memcpy(data, s, len);
    data[len] = '\0';
    printf("Character data: %s\n", data);
    free(data);
}

static void XMLCALL namespaceStartHandler(void *userData,
                                         const XML_Char *prefix,
                                         const XML_Char *uri) {
    printf("Namespace start: prefix=%s, uri=%s\n",
           prefix ? prefix : "(default)", uri);
}

static void XMLCALL namespaceEndHandler(void *userData,
                                       const XML_Char *prefix) {
    printf("Namespace end: prefix=%s\n",
           prefix ? prefix : "(default)");
}

// Process a single XML file
int process_file(const char *filename) {
    FILE *fp;
    struct stat fileinfo;
    XML_Parser parser;
    char *buffer;
    size_t filesize;
    size_t bytes_read;
    int result = 0;

    // Get the file size
    stat(filename, &fileinfo);
    filesize = fileinfo.st_size;

    // Open the file
    fp = fopen(filename, "r");
    if (fp == NULL) {
        fprintf(stderr, "Failed to open file: %s\n", filename);
        return 1;
    }

    // Create the parser
    parser = XML_ParserCreateNS(NULL, ' ');
    if (parser == NULL) {
        fprintf(stderr, "Failed to create parser\n");
        fclose(fp);
        return 1;
    }

    // Set the handlers
    XML_SetElementHandler(parser, startElementHandler, endElementHandler);
    XML_SetCharacterDataHandler(parser, characterDataHandler);
    XML_SetNamespaceDeclHandler(parser, namespaceStartHandler, namespaceEndHandler);

    // Allocate buffer for file content
    buffer = (char*)malloc(filesize);
    if (buffer == NULL) {
        fprintf(stderr, "Failed to allocate memory\n");
        XML_ParserFree(parser);
        fclose(fp);
        return 1;
    }

    // Read the file content
    bytes_read = fread(buffer, 1, filesize, fp);
    if (bytes_read != filesize) {
        fprintf(stderr, "Failed to read file: %s\n", filename);
        free(buffer);
        XML_ParserFree(parser);
        fclose(fp);
        return 1;
    }

    // Parse the XML
    if (XML_Parse(parser, buffer, filesize, 1) == XML_STATUS_ERROR) {
        fprintf(stderr, "Parse error at line %lu: %s\n",
                XML_GetCurrentLineNumber(parser),
                XML_ErrorString(XML_GetErrorCode(parser)));
        result = 1;
    }

    // Clean up
    free(buffer);
    XML_ParserFree(parser);
    fclose(fp);
    return result;
}

int main(int argc, char *argv[]) {
    // Process files specified on command line
    if (argc < 2) {
        fprintf(stderr, "Usage: %s <xml_file1> [xml_file2 ...]\n", argv[0]);
        return 1;
    }

    int i;
    int result = 0;
    for (i = 1; i < argc; i++) {
        printf("Processing file: %s\n", argv[i]);
        if (process_file(argv[i]) != 0) {
            result = 1;
        }
        // Process the file multiple times to generate more profile data
        for (int j = 0; j < 5; j++) {
            process_file(argv[i]);
        }
    }

    return result;
}
EOF
}

# Function to run the XML test harness with the given library
run_xml_tests() {
  local lib_path="$1"
  local output_dir="$2"

  echo "Compiling test program against library at: $lib_path"

  # Get the directory containing the library
  local lib_dir=$(dirname "$lib_path")

  # Compile the test program against the specific library
  gcc -o "$output_dir/test_expat" "$srcdir/test_expat.c" -L"$lib_dir" -I"$srcdir/$pkgname-$pkgver/expat/lib" -lexpat -Wl,-rpath,"$lib_dir"

  # Run the test program on each XML file
  for xml_file in "$srcdir/xml_samples/"*.xml; do
    echo "Testing with file: $xml_file"
    LD_LIBRARY_PATH="$lib_dir" "$output_dir/test_expat" "$xml_file" > /dev/null

    # Run the large file multiple times to exercise the parser thoroughly
    if [[ "$xml_file" == *"large.xml" ]]; then
      echo "Running large file test 5 more times..."
      for i in {1..5}; do
        LD_LIBRARY_PATH="$lib_dir" "$output_dir/test_expat" "$xml_file" > /dev/null
      done
    fi
  done

  # Also run the built-in tests
  make VERBOSE=1 -C "$output_dir" test
}

build() {
  # Store base flags to avoid accumulating stage-specific flags
  local base_cflags="${CFLAGS}"
  local base_cxxflags="${CXXFLAGS}"
  local base_ldflags="${LDFLAGS}"

  # Stage 1: Build with standard PGO instrumentation (-fprofile-generate)
  export CC=clang
  export CXX=clang++
  export CFLAGS="${base_cflags} -fprofile-generate=${srcdir}/pgo/standard ${_common_instrument_flags}"
  export CXXFLAGS="${base_cxxflags} -fprofile-generate=${srcdir}/pgo/standard ${_common_instrument_flags}"
  export LDFLAGS="${base_ldflags} -fprofile-generate=${srcdir}/pgo/standard"

  cmake -DCMAKE_INSTALL_PREFIX=/usr \
        -DCMAKE_BUILD_TYPE=Debug \
        -DCMAKE_C_STANDARD=23 \
        -DCMAKE_CXX_STANDARD=20 \
        -DEXPAT_BUILD_DOCS=OFF \
        -DEXPAT_BUILD_EXAMPLES=OFF \
        -DEXPAT_BUILD_TOOLS=OFF \
        -W no-dev \
        -B build-instrumented \
        -S "$pkgname-$pkgver"
  make VERBOSE=1 -C build-instrumented

  # Stage 2: Run our custom test harness to generate profiling data
  export LLVM_PROFILE_FILE="${srcdir}/pgo/standard/%p.profraw"
  run_xml_tests "$srcdir/build-instrumented/libexpat.so" "build-instrumented"

  # Check if profile data files were generated
  if [ -z "$(ls ${srcdir}/pgo/standard/*.profraw 2>/dev/null)" ]; then
    echo "Error: No profile data files (*.profraw) were generated in ${srcdir}/pgo/standard/"
    exit 1
  fi

  # Merge the standard PGO profile data
  llvm-profdata merge -output="${srcdir}/pgo/standard.profdata" "${srcdir}/pgo/standard"/*.profraw

  # Stage 3: Build with context-sensitive PGO instrumentation (-fcs-profile-generate)
  export CFLAGS="${base_cflags} -fprofile-use=${srcdir}/pgo/standard.profdata -fcs-profile-generate=${srcdir}/pgo/context-sensitive ${_common_instrument_flags}"
  export CXXFLAGS="${base_cxxflags} -fprofile-use=${srcdir}/pgo/standard.profdata -fcs-profile-generate=${srcdir}/pgo/context-sensitive ${_common_instrument_flags}"
  export LDFLAGS="${base_ldflags} -fprofile-use=${srcdir}/pgo/standard.profdata -fcs-profile-generate=${srcdir}/pgo/context-sensitive"

  cmake -DCMAKE_INSTALL_PREFIX=/usr \
        -DCMAKE_BUILD_TYPE=Debug \
        -DCMAKE_C_STANDARD=23 \
        -DCMAKE_CXX_STANDARD=20 \
        -DEXPAT_BUILD_DOCS=OFF \
        -DEXPAT_BUILD_EXAMPLES=OFF \
        -DEXPAT_BUILD_TOOLS=OFF \
        -W no-dev \
        -B build-cs-instrumented \
        -S "$pkgname-$pkgver"
  make VERBOSE=1 -C build-cs-instrumented

  # Stage 4: Run custom test harness on context-sensitive instrumented binary
  export LLVM_PROFILE_FILE="${srcdir}/pgo/context-sensitive/%p.profraw"
  run_xml_tests "$srcdir/build-cs-instrumented/libexpat.so" "build-cs-instrumented"

  # Check if profile data files were generated
  if [ -z "$(ls ${srcdir}/pgo/context-sensitive/*.profraw 2>/dev/null)" ]; then
    echo "Error: No profile data files (*.profraw) were generated in ${srcdir}/pgo/context-sensitive/"
    exit 1
  fi

  # Merge the context-sensitive PGO profile data with the standard profile
  llvm-profdata merge -output="${srcdir}/pgo/cs.profdata" "${srcdir}/pgo/context-sensitive"/*.profraw "${srcdir}/pgo/standard.profdata"

  # Stage 5: Final optimized build using the merged profile data (-fprofile-use)
  export CFLAGS="${base_cflags} -fprofile-use=${srcdir}/pgo/cs.profdata"
  export CXXFLAGS="${base_cxxflags} -fprofile-use=${srcdir}/pgo/cs.profdata"
  export LDFLAGS="${base_ldflags} -fprofile-use=${srcdir}/pgo/cs.profdata -Wl,--emit-relocs"

  cmake -DCMAKE_INSTALL_PREFIX=/usr \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_C_STANDARD=23 \
        -DCMAKE_CXX_STANDARD=20 \
        -DEXPAT_BUILD_DOCS=OFF \
        -DEXPAT_BUILD_EXAMPLES=OFF \
        -DEXPAT_BUILD_TOOLS=OFF \
        -W no-dev \
        -B build-optimized \
        -S "$pkgname-$pkgver"
  make VERBOSE=1 -C build-optimized

  # --- Stage 6: Instrument for BOLT ---
  echo "Creating instrumented binaries for BOLT..."

  # Create directory for BOLT profiles
  mkdir -p "$srcdir/bolt_profile"
  chmod -R 777 "$srcdir/bolt_profile"

  # Find the actual location of the library
  local lib_file=$(find "$srcdir/build-optimized" -name "libexpat.so.*" -type f -not -path "*/CMakeFiles/*" | head -n 1)
  if [ -z "$lib_file" ]; then
    echo "Error: Cannot find libexpat.so.* in build directory"
    exit 1
  fi

  echo "Found library at: $lib_file"

  # Get the directory containing the shared library
  local lib_dir=$(dirname "$lib_file")

  # Clean up any previous BOLT files
  echo "Cleaning up previous BOLT files..."
  find "$lib_dir" -name "*.bolt" -o -name "*.orig" -o -name "*.inst" -delete
  rm -rf "$srcdir/bolt_profile/"*

  # Instrument the binary
  echo "Backing up original binary: $lib_file"
  cp -f "$lib_file" "$lib_file.orig"

  # Instrument binary with BOLT
  echo "Instrumenting binary: $lib_file"
  llvm-bolt "$lib_file.orig" \
    -instrument \
    --instrumentation-file="$srcdir/bolt_profile/profile.fdata" \
    --instrumentation-file-append-pid \
    -o "$lib_file.inst"

  # Configure environment for running instrumented binary
  echo "Setting up environment for test run..."
  export BOLT_USE_SYSTEM_PROXY=0
  export LD_PRELOAD="$lib_file.inst"
  export BOLT_DATA_DIRECTORY="$srcdir/bolt_profile"

  # Verify that instrumented binary exists
  echo "Instrumented binary size: $(stat -c %s "$lib_file.inst") bytes"
  chmod +x "$lib_file.inst"

  # Replace original with instrumented binary for testing
  mv "$lib_file" "$lib_file.bak"
  cp "$lib_file.inst" "$lib_file"

  # Print environment for debugging
  echo "LD_PRELOAD=$LD_PRELOAD"
  echo "BOLT_DATA_DIRECTORY=$BOLT_DATA_DIRECTORY"

  # Run our custom test harness with the instrumented library
  echo "Running custom XML test harness with instrumented binary..."
  run_xml_tests "$lib_file" "$srcdir/build-optimized"

  # Restore original binary
  echo "Restoring original binary..."
  mv "$lib_file.bak" "$lib_file"

  # List profile data files
  echo "Checking for BOLT profile data files..."
  ls -la "$srcdir/bolt_profile/"

  # Wait for delayed file writing
  sleep 2

  # Find profile data files
  local profile_files=$(find "$srcdir/bolt_profile" -name "*.fdata*" -type f)
  if [ -z "$profile_files" ]; then
    echo "Warning: No BOLT profile data files found in expected location. Trying alternative locations..."
    profile_files=$(find "$(pwd)" -name "*.fdata*" -type f -mtime -1)
    if [ -z "$profile_files" ]; then
      profile_files=$(find "$HOME" -name "profile.fdata*" -type f -mtime -1)
    fi
  fi

  if [ -z "$profile_files" ]; then
    echo "Error: No BOLT profile data files found. Skipping BOLT optimization."
    return 0
  fi

  echo "Found profile files: $profile_files"

  # Create merged profile
  local merged_fdata="$srcdir/bolt_profile/merged.fdata"
  echo "Merging profile data files into $merged_fdata"
  cat $profile_files > "$merged_fdata"

  # Verify merged profile
  echo "Merged profile size: $(stat -c %s "$merged_fdata") bytes"
  if [ ! -s "$merged_fdata" ]; then
    echo "Error: Merged BOLT profile is empty. Skipping BOLT optimization."
    return 0
  fi

  # --- Stage 7: Optimize with BOLT ---
  echo "Optimizing binary with BOLT..."

  # Create output directory
  mkdir -p "$srcdir/build-optimized/bolt"

  # Use the specified BOLT optimization flags
  local bolt_output="$srcdir/build-optimized/bolt/$(basename "$lib_file").bolt"
  echo "Running BOLT optimization on $lib_file.orig"
  echo "Output will be: $bolt_output"

  if ! llvm-bolt "$lib_file.orig" \
     -data="$merged_fdata" \
     --dyno-stats \
     --lite=false \
     --eliminate-unreachable \
     --frame-opt=all \
     --icf=all \
     --jump-tables=aggressive \
     --min-branch-clusters \
     --stoke \
     --sctc-mode=always \
     --plt=all \
     --hot-data \
     --hugify \
     --frame-opt-rm-stores \
     --peepholes=all \
     --infer-stale-profile=1 \
     --x86-strip-redundant-address-size \
     --indirect-call-promotion=all \
     --reorder-blocks=ext-tsp \
     --reorder-functions=cdsort \
     --split-all-cold \
     --split-eh \
     --split-functions \
     --split-strategy=cdsplit \
     --use-gnu-stack \
     --align-functions=32 \
     -o "$bolt_output"; then
    echo "Warning: BOLT optimization failed. Using original binary."
  elif [ -f "$bolt_output" ] && [ -s "$bolt_output" ]; then
    echo "BOLT optimization succeeded. Replacing binary with optimized version."
    cp -f "$bolt_output" "$lib_file"
    chmod --reference="$lib_file.orig" "$lib_file"
  else
    echo "Warning: BOLT produced invalid output. Using original binary."
  fi
}

check() {
  # Run tests on the final optimized build
  make VERBOSE=1 -C build-optimized test
}

package() {
  # Install the final optimized build (including BOLT-optimized binaries)
  make VERBOSE=1 DESTDIR="$pkgdir" -C build-optimized install
  install -vDm 644 "$pkgname-$pkgver/COPYING" -t "${pkgdir}/usr/share/licenses/$pkgname/"
  install -vDm 644 "$pkgname-$pkgver/"{AUTHORS,Changes,README.md} -t "${pkgdir}/usr/share/doc/${pkgname}/"

  # Use LLVM strip
  find "$pkgdir" -type f \( -name '*.so*' -o -name '*.a' -o -executable \) -print0 | while IFS= read -r -d '' file; do
    if llvm-strip --strip-unneeded "$file" 2>/dev/null || llvm-strip --strip-all "$file" 2>/dev/null; then
      echo "Stripped: $file"
    else
      echo "Skipping: $file (not a valid object file)" >&2
    fi
  done

}
