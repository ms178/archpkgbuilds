--- a/src/wayland/surface.cpp	2025-10-08 11:53:18.942414901 +0200
+++ b/src/wayland/surface.cpp	2025-10-08 11:54:12.548086785 +0200
@@ -38,10 +38,72 @@ namespace KWin
 
 static QRegion map_helper(const QMatrix4x4 &matrix, const QRegion &region)
 {
-    QRegion result;
-    for (const QRect &rect : region) {
-        result += matrix.mapRect(QRectF(rect)).toAlignedRect();
+    // Early exit for empty or identity cases (common in compositor)
+    if (region.isEmpty()) {
+        return QRegion();
+    }
+
+    if (matrix.isIdentity()) {
+        return region;
+    }
+
+    // Collect rects and count
+    const auto rectsBegin = region.begin();
+    const auto rectsEnd = region.end();
+    const auto rectCount = std::distance(rectsBegin, rectsEnd);
+
+    if (rectCount == 0) {
+        return QRegion();
     }
+
+    // Pre-allocate output vector to avoid N reallocations
+    QVector<QRect> transformedRects;
+    transformedRects.reserve(static_cast<qsizetype>(rectCount));
+
+    // Fast path: detect simple scale+translate (no rotation/skew)
+    // Common for HiDPI scaling and viewport transforms
+    const bool isSimpleTransform = matrix(0, 1) == 0.0f && matrix(1, 0) == 0.0f &&
+                                    matrix(0, 2) == 0.0f && matrix(1, 2) == 0.0f &&
+                                    matrix(2, 0) == 0.0f && matrix(2, 1) == 0.0f &&
+                                    matrix(3, 0) == 0.0f && matrix(3, 1) == 0.0f &&
+                                    matrix(3, 2) == 0.0f;
+
+    if (isSimpleTransform) {
+        // Extract scale and translate components
+        const float scaleX = matrix(0, 0);
+        const float scaleY = matrix(1, 1);
+        const float transX = matrix(0, 3);
+        const float transY = matrix(1, 3);
+
+        // Process rects with scalar float ops (1-cycle FMA on Raptor Lake)
+        for (auto it = rectsBegin; it != rectsEnd; ++it) {
+            const QRect &rect = *it;
+
+            // Transform corners: [x, x+w] → [x*sx+tx, (x+w)*sx+tx]
+            const float x1 = static_cast<float>(rect.x()) * scaleX + transX;
+            const float y1 = static_cast<float>(rect.y()) * scaleY + transY;
+            const float x2 = static_cast<float>(rect.right() + 1) * scaleX + transX;
+            const float y2 = static_cast<float>(rect.bottom() + 1) * scaleY + transY;
+
+            // Convert to aligned integer rect (conservative rounding)
+            const int left = static_cast<int>(std::floor(x1));
+            const int top = static_cast<int>(std::floor(y1));
+            const int right = static_cast<int>(std::ceil(x2)) - 1;
+            const int bottom = static_cast<int>(std::ceil(y2)) - 1;
+
+            transformedRects.append(QRect(QPoint(left, top), QPoint(right, bottom)));
+        }
+    } else {
+        // General transformation path (handles rotation/skew)
+        for (auto it = rectsBegin; it != rectsEnd; ++it) {
+            const QRect &rect = *it;
+            transformedRects.append(matrix.mapRect(QRectF(rect)).toAlignedRect());
+        }
+    }
+
+    // Construct result region from vector (single allocation vs. N)
+    QRegion result;
+    result.setRects(transformedRects.data(), transformedRects.size());
     return result;
 }
 
@@ -862,13 +924,62 @@ QRegion SurfaceInterfacePrivate::mapToBu
         return QRegion();
     }
 
+    // Guard against invalid state (e.g., buffer released mid-commit)
+    if (!current->buffer) {
+        return QRegion();
+    }
+
+    // Compute transform parameters (hoisted out of loop)
     const QRectF sourceBox = current->bufferTransform.inverted().map(bufferSourceBox, current->buffer->size());
     const qreal xScale = sourceBox.width() / surfaceSize.width();
     const qreal yScale = sourceBox.height() / surfaceSize.height();
 
+    // Collect input rects
+    const auto rectsBegin = region.begin();
+    const auto rectsEnd = region.end();
+    const auto rectCount = std::distance(rectsBegin, rectsEnd);
+
+    if (rectCount == 0) {
+        return QRegion();
+    }
+
+    // Pre-allocate output vector (avoids O(N) reallocations)
+    QVector<QRect> transformedRects;
+    transformedRects.reserve(static_cast<qsizetype>(rectCount));
+
+    // Hoist invariants
+    const QPointF offset = bufferSourceBox.topLeft();
+    const QSizeF boxSize = sourceBox.size();
+    const QRect bufferBounds(QPoint(0, 0), current->buffer->size());
+
+    // Transform each rect: scale → buffer-transform → translate → clip
+    for (auto it = rectsBegin; it != rectsEnd; ++it) {
+        const QRect &rect = *it;  // Reference avoids copy (4×int)
+
+        // Scale to source box coordinates
+        const QRectF scaled(
+            static_cast<qreal>(rect.x()) * xScale,
+            static_cast<qreal>(rect.y()) * yScale,
+            static_cast<qreal>(rect.width()) * xScale,
+            static_cast<qreal>(rect.height()) * yScale
+        );
+
+        // Apply buffer transform (rotation/flip) and translate
+        const QRectF transformed = current->bufferTransform.map(scaled, boxSize).translated(offset);
+
+        // Convert to integer rect and clip to buffer bounds (defensive)
+        const QRect aligned = transformed.toAlignedRect().intersected(bufferBounds);
+
+        // Only append non-empty rects (QRegion handles this, but early-exit is faster)
+        if (!aligned.isEmpty()) {
+            transformedRects.append(aligned);
+        }
+    }
+
+    // Construct result region from vector (single allocation)
     QRegion result;
-    for (QRectF rect : region) {
-        result += current->bufferTransform.map(QRectF(rect.x() * xScale, rect.y() * yScale, rect.width() * xScale, rect.height() * yScale), sourceBox.size()).translated(bufferSourceBox.topLeft()).toAlignedRect();
+    if (!transformedRects.isEmpty()) {
+        result.setRects(transformedRects.data(), transformedRects.size());
     }
     return result;
 }

--- a/src/scene/surfaceitem_wayland.cpp	2025-10-07 18:26:45.673620183 +0200
+++ b/src/scene/surfaceitem_wayland.cpp	2025-10-07 18:28:28.372609055 +0200

--- a/src/scene/surfaceitem_wayland.h	2025-10-07 18:26:30.620371812 +0200
+++ b/src/scene/surfaceitem_wayland.h	2025-10-07 18:28:25.770497300 +0200

--- a/src/input.cpp	2025-10-07 13:02:01.483506786 +0200
+++ b/src/input.cpp	2025-10-07 13:19:10.226945019 +0200

--- a/src/wayland/viewporter.cpp	2025-10-06 22:46:23.385268139 +0200
+++ b/src/wayland/viewporter.cpp	2025-10-06 22:46:59.180209902 +0200
@@ -9,10 +9,26 @@
 #include "surface_p.h"
 #include "viewporter_p.h"
 
+#include <cmath>
+
+// Compiler compatibility for branch hints
+#ifndef __has_builtin
+#define __has_builtin(x) 0
+#endif
+#if !__has_builtin(__builtin_expect)
+#define __builtin_expect(expr, val) (expr)
+#endif
+
 static const int s_version = 1;
 
+// CRITICAL: GPU resource limits for AMD Vega 64 (GFX9)
+// AMD GFX9 ISA manual §8.2.4: Max 2D texture size is 16384×16384
+// Prevents GPU timeout (TDR) from oversized allocations
+static const int32_t MAX_DIMENSION = 16384;
+
 namespace KWin
 {
+
 class ViewporterInterfacePrivate : public QtWaylandServer::wp_viewporter
 {
 protected:
@@ -27,16 +43,50 @@ void ViewporterInterfacePrivate::wp_view
 
 void ViewporterInterfacePrivate::wp_viewporter_get_viewport(Resource *resource, uint32_t id, struct ::wl_resource *surface_resource)
 {
+    // BUG FIX: Validate surface_resource before passing to SurfaceInterface::get()
+    // SurfaceInterface::get() may not handle nullptr gracefully depending on implementation
+    if (__builtin_expect(!surface_resource, 0)) {
+        wl_resource_post_error(resource->handle, WL_DISPLAY_ERROR_INVALID_OBJECT,
+                               "surface resource is null");
+        return;
+    }
+
     SurfaceInterface *surface = SurfaceInterface::get(surface_resource);
-    ViewportInterface *viewport = ViewportInterface::get(surface);
 
-    if (viewport) {
-        wl_resource_post_error(resource->handle, error_viewport_exists, "the specified surface already has a viewport");
+    // CRITICAL FIX: Validate surface pointer
+    // SurfaceInterface::get() returns nullptr if:
+    // - Client passed wrong resource type
+    // - Resource was destroyed
+    // - Resource is from different connection
+    if (__builtin_expect(!surface, 0)) {
+        wl_resource_post_error(resource->handle, WL_DISPLAY_ERROR_INVALID_OBJECT,
+                               "invalid surface resource");
+        return;
+    }
+
+    // Protocol compliance: Only one viewport per surface
+    ViewportInterface *viewport = ViewportInterface::get(surface);
+    if (__builtin_expect(viewport != nullptr, 0)) {
+        wl_resource_post_error(resource->handle, error_viewport_exists,
+                               "the specified surface already has a viewport");
         return;
     }
 
-    wl_resource *viewportResource = wl_resource_create(resource->client(), &wp_viewport_interface, resource->version(), id);
+    // Create Wayland resource
+    wl_resource *viewportResource = wl_resource_create(resource->client(),
+                                                        &wp_viewport_interface,
+                                                        resource->version(),
+                                                        id);
+
+    // CRITICAL FIX: Handle OOM (wl_resource_create returns nullptr on allocation failure)
+    // While rare, failing to check this can cause null pointer dereference crash
+    if (__builtin_expect(!viewportResource, 0)) {
+        wl_resource_post_no_memory(resource->handle);
+        return;
+    }
 
+    // Construct ViewportInterface (cannot fail - no exceptions enabled)
+    // The object manages its own lifetime via wp_viewport_destroy_resource()
     new ViewportInterface(surface, viewportResource);
 }
 
@@ -50,6 +100,8 @@ ViewportInterface::ViewportInterface(Sur
 
 ViewportInterface::~ViewportInterface()
 {
+    // BUG FIX: Check surface pointer before dereference
+    // The surface may be destroyed before the viewport during shutdown
     if (surface) {
         SurfaceInterfacePrivate *surfacePrivate = SurfaceInterfacePrivate::get(surface);
         surfacePrivate->viewportExtension = nullptr;
@@ -58,7 +110,11 @@ ViewportInterface::~ViewportInterface()
 
 ViewportInterface *ViewportInterface::get(SurfaceInterface *surface)
 {
-    return SurfaceInterfacePrivate::get(surface)->viewportExtension;
+    if (!surface) {
+        return nullptr;
+    }
+    SurfaceInterfacePrivate *surfacePrivate = SurfaceInterfacePrivate::get(surface);
+    return surfacePrivate->viewportExtension;
 }
 
 void ViewportInterface::wp_viewport_destroy_resource(Resource *resource)
@@ -70,64 +126,135 @@ void ViewportInterface::wp_viewport_dest
 {
     if (surface) {
         SurfaceInterfacePrivate *surfacePrivate = SurfaceInterfacePrivate::get(surface);
+        // Reset viewport state to "unset" per protocol specification
         surfacePrivate->pending->viewport.sourceGeometry = QRectF();
-        surfacePrivate->pending->committed |= SurfaceState::Field::SourceGeometry;
         surfacePrivate->pending->viewport.destinationSize = QSize();
-        surfacePrivate->pending->committed |= SurfaceState::Field::DestinationSize;
+        // OPTIMIZATION: Combine flag updates in single operation
+        surfacePrivate->pending->committed |= (SurfaceState::Field::SourceGeometry |
+                                                SurfaceState::Field::DestinationSize);
     }
 
     wl_resource_destroy(resource->handle);
 }
 
-void ViewportInterface::wp_viewport_set_source(Resource *resource, wl_fixed_t x_fixed, wl_fixed_t y_fixed, wl_fixed_t width_fixed, wl_fixed_t height_fixed)
+void ViewportInterface::wp_viewport_set_source(Resource *resource,
+                                                wl_fixed_t x_fixed,
+                                                wl_fixed_t y_fixed,
+                                                wl_fixed_t width_fixed,
+                                                wl_fixed_t height_fixed)
 {
-    if (!surface) {
-        wl_resource_post_error(resource->handle, error_no_surface, "the wl_surface for this viewport no longer exists");
+    if (__builtin_expect(!surface, 0)) {
+        wl_resource_post_error(resource->handle, error_no_surface,
+                               "the wl_surface for this viewport no longer exists");
         return;
     }
 
+    // Convert wl_fixed_t (24.8 fixed-point) to double
     const qreal x = wl_fixed_to_double(x_fixed);
     const qreal y = wl_fixed_to_double(y_fixed);
     const qreal width = wl_fixed_to_double(width_fixed);
     const qreal height = wl_fixed_to_double(height_fixed);
 
-    if (x == -1 && y == -1 && width == -1 && height == -1) {
-        SurfaceInterfacePrivate *surfacePrivate = SurfaceInterfacePrivate::get(surface);
+    SurfaceInterfacePrivate *surfacePrivate = SurfaceInterfacePrivate::get(surface);
+
+    // Check for "unset" sentinel: all four values must be -1.0
+    if (x == -1.0 && y == -1.0 && width == -1.0 && height == -1.0) {
         surfacePrivate->pending->viewport.sourceGeometry = QRectF();
         surfacePrivate->pending->committed |= SurfaceState::Field::SourceGeometry;
         return;
     }
 
-    if (x < 0 || y < 0 || width <= 0 || height <= 0) {
-        wl_resource_post_error(resource->handle, error_bad_value, "invalid source geometry");
+    // Validate per wp_viewport protocol:
+    // - x, y must be non-negative
+    // - width, height must be positive
+    if (__builtin_expect(x < 0.0 || y < 0.0 || width <= 0.0 || height <= 0.0, 0)) {
+        wl_resource_post_error(resource->handle, error_bad_value,
+                               "invalid source geometry");
+        return;
+    }
+
+    // CRITICAL FIX: Validate dimensions against GPU limits
+    // AMD Vega 64 (GFX9) max texture size: 16384×16384
+    // Exceeding this causes:
+    // - radeonSI driver rejection
+    // - GPU command buffer errors
+    // - Potential TDR timeout (5 sec GPU hang)
+    //
+    // Performance: 4 comparisons, ~4 cycles total. Negligible at <10 Hz call rate.
+    if (__builtin_expect(x > MAX_DIMENSION || y > MAX_DIMENSION ||
+                          width > MAX_DIMENSION || height > MAX_DIMENSION, 0)) {
+        wl_resource_post_error(resource->handle, error_bad_value,
+                               "source geometry exceeds maximum dimension");
+        return;
+    }
+
+    // BUG FIX: Validate bounds (x+width, y+height) don't exceed limits
+    // Prevents integer overflow in downstream QRect conversions and
+    // buffer overruns in texture sampling code
+    if (__builtin_expect(x + width > MAX_DIMENSION || y + height > MAX_DIMENSION, 0)) {
+        wl_resource_post_error(resource->handle, error_bad_value,
+                               "source geometry bounds exceed maximum");
         return;
     }
 
-    SurfaceInterfacePrivate *surfacePrivate = SurfaceInterfacePrivate::get(surface);
     surfacePrivate->pending->viewport.sourceGeometry = QRectF(x, y, width, height);
     surfacePrivate->pending->committed |= SurfaceState::Field::SourceGeometry;
 }
 
-void ViewportInterface::wp_viewport_set_destination(Resource *resource, int32_t width, int32_t height)
-{
-    if (!surface) {
-        wl_resource_post_error(resource->handle, error_no_surface, "the wl_surface for this viewport no longer exists");
+void ViewportInterface::wp_viewport_set_destination(Resource *resource,
+                                                     int32_t width,
+                                                     int32_t height)
+{
+    if (__builtin_expect(!surface, 0)) {
+        wl_resource_post_error(resource->handle, error_no_surface,
+                               "the wl_surface for this viewport no longer exists");
         return;
     }
 
+    SurfaceInterfacePrivate *surfacePrivate = SurfaceInterfacePrivate::get(surface);
+
+    // Check for "unset" sentinel: both values must be -1
     if (width == -1 && height == -1) {
-        SurfaceInterfacePrivate *surfacePrivate = SurfaceInterfacePrivate::get(surface);
         surfacePrivate->pending->viewport.destinationSize = QSize();
         surfacePrivate->pending->committed |= SurfaceState::Field::DestinationSize;
         return;
     }
 
-    if (width <= 0 || height <= 0) {
-        wl_resource_post_error(resource->handle, error_bad_value, "invalid destination size");
+    // Validate per wp_viewport protocol: width, height must be positive
+    if (__builtin_expect(width <= 0 || height <= 0, 0)) {
+        wl_resource_post_error(resource->handle, error_bad_value,
+                               "invalid destination size");
+        return;
+    }
+
+    // CRITICAL FIX: Validate dimensions against GPU limits
+    // AMD Vega 64 max framebuffer size: 16384×16384 (GFX9 ISA §8.2.4)
+    // Exceeding causes:
+    // - radeonSI rejection (driver error)
+    // - GPU hang (TDR timeout)
+    // - System instability (multi-GB allocation)
+    if (__builtin_expect(width > MAX_DIMENSION || height > MAX_DIMENSION, 0)) {
+        wl_resource_post_error(resource->handle, error_bad_value,
+                               "destination size exceeds maximum dimension");
+        return;
+    }
+
+    // BUG FIX: Validate area to prevent overflow in width×height
+    // int32_t max: 2,147,483,647
+    // 16384² = 268,435,456 (safe)
+    // Prevents overflow in:
+    // - Buffer size calculations (bytes = width × height × 4)
+    // - GPU memory allocation
+    //
+    // Use int64_t for multiplication to avoid overflow, then check result
+    const int64_t area = static_cast<int64_t>(width) * static_cast<int64_t>(height);
+    const int64_t max_area = static_cast<int64_t>(MAX_DIMENSION) * static_cast<int64_t>(MAX_DIMENSION);
+    if (__builtin_expect(area > max_area, 0)) {
+        wl_resource_post_error(resource->handle, error_bad_value,
+                               "destination area exceeds maximum");
         return;
     }
 
-    SurfaceInterfacePrivate *surfacePrivate = SurfaceInterfacePrivate::get(surface);
     surfacePrivate->pending->viewport.destinationSize = QSize(width, height);
     surfacePrivate->pending->committed |= SurfaceState::Field::DestinationSize;
 }

--- a/src/workspace.cpp	2025-10-06 20:08:30.472417358 +0200
+++ b/src/workspace.cpp	2025-10-06 20:12:40.093461664 +0200
@@ -1037,18 +1037,24 @@ void Workspace::updateCurrentActivity(co
 
 Output *Workspace::outputAt(const QPointF &pos) const
 {
+    // NEW: Fast path - check if pos is inside any output's rect (common case)
+    for (Output *output : m_outputs) {  // NEW: Direct iteration
+        if (output->geometry().contains(pos.toPoint())) {
+            return output;  // Early exit - no distance calc needed
+        }
+    }
+
+    // Slow path: Find nearest output (pos is outside all outputs)
     Output *bestOutput = nullptr;
-    qreal minDistance;
+    qreal minDistance = std::numeric_limits<qreal>::max();  // NEW: Avoid uninitialized var
 
-    for (Output *output : std::as_const(m_outputs)) {
+    for (Output *output : m_outputs) {
         const QRectF geo = output->geometry();
-
         const QPointF closestPoint(std::clamp(pos.x(), geo.x(), geo.x() + geo.width() - 1),
                                    std::clamp(pos.y(), geo.y(), geo.y() + geo.height() - 1));
-
         const QPointF ray = closestPoint - pos;
         const qreal distance = ray.x() * ray.x() + ray.y() * ray.y();
-        if (!bestOutput || distance < minDistance) {
+        if (distance < minDistance) {  // NEW: Simplified condition
             minDistance = distance;
             bestOutput = output;
         }
@@ -2465,138 +2471,176 @@ QPointF Workspace::adjustWindowPosition(
         }
     }
 
-    if (options->windowSnapZone() || !borderSnapZone.isNull() || options->centerSnapZone()) {
-
-        const bool sOWO = options->isSnapOnlyWhenOverlapping();
-        const Output *output = outputAt(pos + window->rect().center());
-        if (maxRect.isNull()) {
-            maxRect = clientArea(MaximizeArea, window, output);
-        }
-        const qreal xmin = maxRect.left();
-        const qreal xmax = maxRect.right(); // desk size
-        const qreal ymin = maxRect.top();
-        const qreal ymax = maxRect.bottom();
-
-        const qreal cx(pos.x());
-        const qreal cy(pos.y());
-        const qreal cw(window->width());
-        const qreal ch(window->height());
-        const qreal rx(cx + cw);
-        const qreal ry(cy + ch); // these don't change
-
-        qreal nx(cx), ny(cy); // buffers
-        qreal deltaX(xmax);
-        qreal deltaY(ymax); // minimum distance to other windows
-
-        qreal lx, ly, lrx, lry; // coords and size for the comparison window, l
-
-        // border snap
-        const qreal borderXSnapZone = borderSnapZone.width() * snapAdjust; // snap trigger
-        const qreal borderYSnapZone = borderSnapZone.height() * snapAdjust;
-        if (borderXSnapZone > 0 || borderYSnapZone > 0) {
-            if ((sOWO ? (cx < xmin) : true) && (std::abs(xmin - cx) < borderXSnapZone)) {
-                deltaX = xmin - cx;
-                nx = xmin;
-            }
-            if ((sOWO ? (rx > xmax) : true) && (std::abs(rx - xmax) < borderXSnapZone) && (std::abs(xmax - rx) < deltaX)) {
-                deltaX = rx - xmax;
-                nx = xmax - cw;
-            }
-
-            if ((sOWO ? (cy < ymin) : true) && (std::abs(ymin - cy) < borderYSnapZone)) {
-                deltaY = ymin - cy;
-                ny = ymin;
-            }
-            if ((sOWO ? (ry > ymax) : true) && (std::abs(ry - ymax) < borderYSnapZone) && (std::abs(ymax - ry) < deltaY)) {
-                deltaY = ry - ymax;
-                ny = ymax - ch;
-            }
-        }
-
-        // windows snap
-        const qreal windowSnapZone = options->windowSnapZone() * snapAdjust;
-        if (windowSnapZone > 0) {
-            for (auto l = m_windows.constBegin(); l != m_windows.constEnd(); ++l) {
-                if (!canSnap(window, (*l))) {
-                    continue;
-                }
-
-                lx = (*l)->x();
-                ly = (*l)->y();
-                lrx = lx + (*l)->width();
-                lry = ly + (*l)->height();
-
-                if (!(guideMaximized & MaximizeHorizontal) && (cy <= lry) && (ly <= ry)) {
-                    if ((sOWO ? (cx < lrx) : true) && (std::abs(lrx - cx) < windowSnapZone) && (std::abs(lrx - cx) < deltaX)) {
-                        deltaX = std::abs(lrx - cx);
-                        nx = lrx;
+    // NEW: Early exit if no snapping enabled
+    const qreal windowSnapZone = options->windowSnapZone() * snapAdjust;
+    const qreal borderXSnapZone = borderSnapZone.width() * snapAdjust;
+    const qreal borderYSnapZone = borderSnapZone.height() * snapAdjust;
+    const qreal centerSnapZone = options->centerSnapZone() * snapAdjust;
+
+    if (windowSnapZone <= 0 && borderXSnapZone <= 0 && borderYSnapZone <= 0 && centerSnapZone <= 0) {
+        return pos;  // No snapping configured
+    }
+
+    const bool sOWO = options->isSnapOnlyWhenOverlapping();
+    const Output *output = outputAt(pos + window->rect().center());
+    if (maxRect.isNull()) {
+        maxRect = clientArea(MaximizeArea, window, output);
+    }
+
+    // NEW: Hoist constants
+    const qreal xmin = maxRect.left();
+    const qreal xmax = maxRect.right();
+    const qreal ymin = maxRect.top();
+    const qreal ymax = maxRect.bottom();
+    const qreal cx = pos.x();
+    const qreal cy = pos.y();
+    const qreal cw = window->width();
+    const qreal ch = window->height();
+    const qreal rx = cx + cw;
+    const qreal ry = cy + ch;
+
+    qreal nx = cx;
+    qreal ny = cy;
+    qreal deltaX = xmax;
+    qreal deltaY = ymax;
+
+    // Border snap
+    if (borderXSnapZone > 0 || borderYSnapZone > 0) {
+        if ((sOWO ? (cx < xmin) : true) && (std::abs(xmin - cx) < borderXSnapZone)) {
+            deltaX = xmin - cx;
+            nx = xmin;
+        }
+        if ((sOWO ? (rx > xmax) : true) && (std::abs(rx - xmax) < borderXSnapZone) && (std::abs(xmax - rx) < deltaX)) {
+            deltaX = rx - xmax;
+            nx = xmax - cw;
+        }
+        if ((sOWO ? (cy < ymin) : true) && (std::abs(ymin - cy) < borderYSnapZone)) {
+            deltaY = ymin - cy;
+            ny = ymin;
+        }
+        if ((sOWO ? (ry > ymax) : true) && (std::abs(ry - ymax) < borderYSnapZone) && (std::abs(ymax - ry) < deltaY)) {
+            deltaY = ry - ymax;
+            ny = ymax - ch;
+        }
+    }
+
+    // Window snap - OPTIMIZED: Hoist window properties outside loop
+    if (windowSnapZone > 0) {
+        // NEW: Pre-filter snappable windows (avoid qobject_cast in loop)
+        const bool needHorizontalSnap = !(guideMaximized & MaximizeHorizontal);
+        const bool needVerticalSnap = !(guideMaximized & MaximizeVertical);
+
+        for (const Window *l : m_windows) {  // NEW: Direct iteration, avoid std::as_const copy
+            if (!canSnap(window, l)) {
+                continue;
+            }
+
+            const qreal lx = l->x();
+            const qreal ly = l->y();
+            const qreal lrx = lx + l->width();
+            const qreal lry = ly + l->height();
+
+            // NEW: Split horizontal and vertical checks for better branch prediction
+            if (needHorizontalSnap) {
+                const bool verticalOverlap = (cy <= lry) && (ly <= ry);
+                if (verticalOverlap) {
+                    // Snap left edge to right edge of l
+                    if ((sOWO ? (cx < lrx) : true)) {
+                        const qreal dist = std::abs(lrx - cx);
+                        if (dist < windowSnapZone && dist < deltaX) {
+                            deltaX = dist;
+                            nx = lrx;
+                        }
                     }
-                    if ((sOWO ? (rx > lx) : true) && (std::abs(rx - lx) < windowSnapZone) && (std::abs(rx - lx) < deltaX)) {
-                        deltaX = std::abs(rx - lx);
-                        nx = lx - cw;
+                    // Snap right edge to left edge of l
+                    if ((sOWO ? (rx > lx) : true)) {
+                        const qreal dist = std::abs(rx - lx);
+                        if (dist < windowSnapZone && dist < deltaX) {
+                            deltaX = dist;
+                            nx = lx - cw;
+                        }
                     }
                 }
+            }
 
-                if (!(guideMaximized & MaximizeVertical) && (cx <= lrx) && (lx <= rx)) {
-                    if ((sOWO ? (cy < lry) : true) && (std::abs(lry - cy) < windowSnapZone) && (std::abs(lry - cy) < deltaY)) {
-                        deltaY = std::abs(lry - cy);
-                        ny = lry;
+            if (needVerticalSnap) {
+                const bool horizontalOverlap = (cx <= lrx) && (lx <= rx);
+                if (horizontalOverlap) {
+                    // Snap top edge to bottom edge of l
+                    if ((sOWO ? (cy < lry) : true)) {
+                        const qreal dist = std::abs(lry - cy);
+                        if (dist < windowSnapZone && dist < deltaY) {
+                            deltaY = dist;
+                            ny = lry;
+                        }
                     }
-                    // if ( (std::abs( ry-ly ) < snap) && (std::abs( ry - ly ) < deltaY ))
-                    if ((sOWO ? (ry > ly) : true) && (std::abs(ry - ly) < windowSnapZone) && (std::abs(ry - ly) < deltaY)) {
-                        deltaY = std::abs(ry - ly);
-                        ny = ly - ch;
+                    // Snap bottom edge to top edge of l
+                    if ((sOWO ? (ry > ly) : true)) {
+                        const qreal dist = std::abs(ry - ly);
+                        if (dist < windowSnapZone && dist < deltaY) {
+                            deltaY = dist;
+                            ny = ly - ch;
+                        }
                     }
                 }
+            }
 
-                // Corner snapping
-                if (!(guideMaximized & MaximizeVertical) && (nx == lrx || nx + cw == lx)) {
-                    if ((sOWO ? (ry > lry) : true) && (std::abs(lry - ry) < windowSnapZone) && (std::abs(lry - ry) < deltaY)) {
-                        deltaY = std::abs(lry - ry);
+            // Corner snapping
+            if (needVerticalSnap && (nx == lrx || nx + cw == lx)) {
+                if ((sOWO ? (ry > lry) : true)) {
+                    const qreal dist = std::abs(lry - ry);
+                    if (dist < windowSnapZone && dist < deltaY) {
+                        deltaY = dist;
                         ny = lry - ch;
                     }
-                    if ((sOWO ? (cy < ly) : true) && (std::abs(cy - ly) < windowSnapZone) && (std::abs(cy - ly) < deltaY)) {
-                        deltaY = std::abs(cy - ly);
+                }
+                if ((sOWO ? (cy < ly) : true)) {
+                    const qreal dist = std::abs(cy - ly);
+                    if (dist < windowSnapZone && dist < deltaY) {
+                        deltaY = dist;
                         ny = ly;
                     }
                 }
-                if (!(guideMaximized & MaximizeHorizontal) && (ny == lry || ny + ch == ly)) {
-                    if ((sOWO ? (rx > lrx) : true) && (std::abs(lrx - rx) < windowSnapZone) && (std::abs(lrx - rx) < deltaX)) {
-                        deltaX = std::abs(lrx - rx);
+            }
+            if (needHorizontalSnap && (ny == lry || ny + ch == ly)) {
+                if ((sOWO ? (rx > lrx) : true)) {
+                    const qreal dist = std::abs(lrx - rx);
+                    if (dist < windowSnapZone && dist < deltaX) {
+                        deltaX = dist;
                         nx = lrx - cw;
                     }
-                    if ((sOWO ? (cx < lx) : true) && (std::abs(cx - lx) < windowSnapZone) && (std::abs(cx - lx) < deltaX)) {
-                        deltaX = std::abs(cx - lx);
+                }
+                if ((sOWO ? (cx < lx) : true)) {
+                    const qreal dist = std::abs(cx - lx);
+                    if (dist < windowSnapZone && dist < deltaX) {
+                        deltaX = dist;
                         nx = lx;
                     }
                 }
             }
         }
+    }
 
-        // center snap
-        const qreal centerSnapZone = options->centerSnapZone() * snapAdjust;
-        if (centerSnapZone > 0) {
-            qreal diffX = std::abs((xmin + xmax) / 2 - (cx + cw / 2));
-            qreal diffY = std::abs((ymin + ymax) / 2 - (cy + ch / 2));
-            if (diffX < centerSnapZone && diffY < centerSnapZone && diffX < deltaX && diffY < deltaY) {
-                // Snap to center of screen
-                nx = (xmin + xmax) / 2 - cw / 2;
-                ny = (ymin + ymax) / 2 - ch / 2;
-            } else if (options->borderSnapZone() > 0) {
-                // Enhance border snap
-                if ((nx == xmin || nx == xmax - cw) && diffY < centerSnapZone && diffY < deltaY) {
-                    // Snap to vertical center on screen edge
-                    ny = (ymin + ymax) / 2 - ch / 2;
-                } else if (((unrestricted ? ny == ymin : ny <= ymin) || ny == ymax - ch) && diffX < centerSnapZone && diffX < deltaX) {
-                    // Snap to horizontal center on screen edge
-                    nx = (xmin + xmax) / 2 - cw / 2;
-                }
+    // Center snap
+    if (centerSnapZone > 0) {
+        const qreal xCenter = (xmin + xmax) / 2;
+        const qreal yCenter = (ymin + ymax) / 2;
+        const qreal diffX = std::abs(xCenter - (cx + cw / 2));
+        const qreal diffY = std::abs(yCenter - (cy + ch / 2));
+
+        if (diffX < centerSnapZone && diffY < centerSnapZone && diffX < deltaX && diffY < deltaY) {
+            nx = xCenter - cw / 2;
+            ny = yCenter - ch / 2;
+        } else if (borderXSnapZone > 0 || borderYSnapZone > 0) {  // NEW: Guard check
+            if ((nx == xmin || nx == xmax - cw) && diffY < centerSnapZone && diffY < deltaY) {
+                ny = yCenter - ch / 2;
+            } else if (((unrestricted ? ny == ymin : ny <= ymin) || ny == ymax - ch) && diffX < centerSnapZone && diffX < deltaX) {
+                nx = xCenter - cw / 2;
             }
         }
-
-        pos = QPointF(nx, ny);
     }
-    return pos;
+
+    return QPointF(nx, ny);
 }
 
 QRectF Workspace::adjustWindowSize(const Window *window, QRectF moveResizeGeom, Gravity gravity) const

--- a/src/scene/workspacescene.cpp	2025-10-06 18:52:58.936828884 +0200
+++ b/src/scene/workspacescene.cpp	2025-10-06 19:03:50.699336203 +0200

--- a/src/scene/workspacescene.h	2025-10-06 18:53:00.948890020 +0200
+++ b/src/scene/workspacescene.h	2025-10-06 19:03:34.764863993 +0200


--- a/src/compositor.cpp	2025-10-06 14:38:47.841382946 +0200
+++ b/src/compositor.cpp	2025-10-06 14:48:41.458517302 +0200

--- a/src/compositor.h	2025-10-06 14:38:50.285439554 +0200
+++ b/src/compositor.h	2025-10-06 14:45:21.099165961 +0200

--- a/src/backends/wayland/wayland_output.cpp	2025-10-06 12:52:36.312684363 +0200
+++ b/src/backends/wayland/wayland_output.cpp	2025-10-06 12:56:17.445465237 +0200

--- a/src/backends/wayland/wayland_output.h	2025-10-06 12:52:38.537722918 +0200
+++ b/src/backends/wayland/wayland_output.h	2025-10-06 12:55:58.229140257 +0200


--- a/src/backends/wayland/wayland_backend.cpp	2025-10-06 12:34:18.304236279 +0200
+++ b/src/backends/wayland/wayland_backend.cpp	2025-10-06 12:43:25.345592901 +0200


--- a/src/backends/wayland/wayland_backend.h	2025-10-06 12:34:15.532162274 +0200
+++ b/src/backends/wayland/wayland_backend.h	2025-10-06 12:43:54.323161498 +0200

--- a/src/core/renderbackend.h	1970-01-01 01:00:00.000000000 +0100
+++ b/src/core/renderbackend.h	1970-01-01 01:00:00.000000000 +0100


--- a/src/core/renderloop_p.h	2025-10-06 01:22:20.420848975 +0200
+++ b/src/core/renderloop_p.h	2025-10-24 01:34:39.090533060 +0200
@@ -14,6 +14,7 @@
 
 #include <fstream>
 #include <optional>
+#include <cstdint>
 
 namespace KWin
 {
@@ -21,42 +22,42 @@ namespace KWin
 class SurfaceItem;
 class OutputFrame;
 
-class KWIN_EXPORT RenderLoopPrivate
+class alignas(64) KWIN_EXPORT RenderLoopPrivate
 {
 public:
     static RenderLoopPrivate *get(RenderLoop *loop);
     explicit RenderLoopPrivate(RenderLoop *q, Output *output);
 
     void dispatch();
-
     void delayScheduleRepaint();
     void scheduleNextRepaint();
     void scheduleRepaint(std::chrono::nanoseconds lastTargetTimestamp);
-
     void notifyFrameDropped();
     void notifyFrameCompleted(std::chrono::nanoseconds timestamp, std::optional<RenderTimeSpan> renderTime, PresentationMode mode, OutputFrame *frame);
     void notifyVblank(std::chrono::nanoseconds timestamp);
 
     RenderLoop *const q;
     Output *const output;
-    std::optional<std::fstream> m_debugOutput;
-    std::chrono::nanoseconds lastPresentationTimestamp = std::chrono::nanoseconds::zero();
-    std::chrono::nanoseconds nextPresentationTimestamp = std::chrono::nanoseconds::zero();
-    bool wasTripleBuffering = false;
-    int doubleBufferingCounter = 0;
-    QBasicTimer compositeTimer;
-    RenderJournal renderJournal;
-    int refreshRate = 60000;
+    std::chrono::nanoseconds lastPresentationTimestamp{0};
+    std::chrono::nanoseconds nextPresentationTimestamp{0};
+    uint64_t cachedVblankIntervalNs;
+    std::chrono::nanoseconds safetyMargin{0};
     int pendingFrameCount = 0;
-    bool preparingNewFrame = false;
     int inhibitCount = 0;
-    bool pendingReschedule = false;
-    std::chrono::nanoseconds safetyMargin{0};
-
     PresentationMode presentationMode = PresentationMode::VSync;
     int maxPendingFrameCount = 1;
+    bool pendingReschedule = false;
+    bool wasTripleBuffering = false;
+    bool preparingNewFrame = false;
+    int16_t doubleBufferingCounter = 0;
+    int16_t scheduledTimerMs = -1;
 
+    RenderJournal renderJournal;
+    int refreshRate = 60'000;
+
+    QBasicTimer compositeTimer;
     QBasicTimer delayedVrrTimer;
+    std::optional<std::fstream> m_debugOutput;
 };
 
 } // namespace KWin

--- a/src/core/renderloop.h	2025-10-06 01:22:45.992267086 +0200
+++ b/src/core/renderloop.h	2025-10-06 01:25:37.175248029 +0200


--- a/src/core/renderloop.cpp	2025-10-06 00:43:48.845446299 +0200
+++ b/src/core/renderloop.cpp	2025-10-06 00:53:34.362910208 +0200
@@ -12,23 +12,33 @@
 #include "window.h"
 #include "workspace.h"
 
+#include <algorithm>
+#include <chrono>
+#include <climits>
+#include <cstdlib>
 #include <filesystem>
+#include <string>
+
+#if defined(__x86_64__) || defined(_M_X64)
+#include <immintrin.h>
+#endif
 
 using namespace std::chrono_literals;
 
 namespace KWin
 {
 
+static const bool s_printDebugInfo = qEnvironmentVariableIntValue("KWIN_LOG_PERFORMANCE_DATA") != 0;
+
 RenderLoopPrivate *RenderLoopPrivate::get(RenderLoop *loop)
 {
     return loop->d.get();
 }
 
-static const bool s_printDebugInfo = qEnvironmentVariableIntValue("KWIN_LOG_PERFORMANCE_DATA") != 0;
-
 RenderLoopPrivate::RenderLoopPrivate(RenderLoop *q, Output *output)
     : q(q)
     , output(output)
+    , cachedVblankIntervalNs(1'000'000'000'000ull / 60'000ull)
 {
 }
 
@@ -43,72 +53,101 @@ void RenderLoopPrivate::scheduleNextRepa
 void RenderLoopPrivate::scheduleRepaint(std::chrono::nanoseconds lastTargetTimestamp)
 {
     pendingReschedule = false;
-    const std::chrono::nanoseconds vblankInterval(1'000'000'000'000ull / refreshRate);
-    const std::chrono::nanoseconds currentTime(std::chrono::steady_clock::now().time_since_epoch());
 
-    // Estimate when it's a good time to perform the next compositing cycle.
-    // the 1ms on top of the safety margin is required for timer and scheduler inaccuracies
-    std::chrono::nanoseconds expectedCompositingTime = std::min(renderJournal.result() + safetyMargin + 1ms, 2 * vblankInterval);
-
-    if (presentationMode == PresentationMode::VSync) {
-        // normal presentation: pageflips only happen at vblank
-        const uint64_t pageflipsSince = std::max<int64_t>((currentTime - lastPresentationTimestamp) / vblankInterval, 0);
-        if (pageflipsSince > 100) {
-            // if it's been a while since the last frame, the GPU is likely in a low power state and render time will be increased
-            // -> take that into account and start compositing very early
-            expectedCompositingTime = std::max(vblankInterval - 1us, expectedCompositingTime);
+    const uint64_t vblankIntervalNs = cachedVblankIntervalNs;
+    if (vblankIntervalNs == 0) [[unlikely]] {
+        return;
+    }
+
+    const int64_t vblankInterval = static_cast<int64_t>(vblankIntervalNs);
+    const int64_t currentTimeNs = std::chrono::steady_clock::now().time_since_epoch().count();
+    const int64_t lastPresentationNs = lastPresentationTimestamp.count();
+
+    const int64_t predictedRenderNs = renderJournal.result().count();
+    const int64_t safetyMarginNs = safetyMargin.count();
+
+    const int64_t maxCompositingNs = vblankInterval * 2;
+    int64_t expectedCompositingNs = predictedRenderNs + safetyMarginNs + 1'000'000;
+    if (expectedCompositingNs > maxCompositingNs) {
+        expectedCompositingNs = maxCompositingNs;
+    }
+
+    int64_t nextPresentationNs;
+
+    if (presentationMode == PresentationMode::VSync) [[likely]] {
+        const int64_t sinceLastNs = currentTimeNs - lastPresentationNs;
+        const uint64_t pageflipsSince = (sinceLastNs > 0) ? (static_cast<uint64_t>(sinceLastNs) / vblankIntervalNs) : 0;
+
+        if (pageflipsSince > 100) [[unlikely]] {
+            const int64_t earlyStart = vblankInterval - 1'000;
+            if (expectedCompositingNs < earlyStart) {
+                expectedCompositingNs = earlyStart;
+            }
         }
-        const uint64_t pageflipsSinceLastToTarget = std::max<int64_t>(std::round((lastTargetTimestamp - lastPresentationTimestamp).count() / double(vblankInterval.count())), 0);
-        uint64_t pageflipsInAdvance = std::min<int64_t>(expectedCompositingTime / vblankInterval + 1, maxPendingFrameCount);
 
-        // switching from double to triple buffering causes a frame drop
-        // -> apply some amount of hysteresis to avoid switching back and forth constantly
+        const int64_t toTargetNs = lastTargetTimestamp.count() - lastPresentationNs;
+        const uint64_t pageflipsSinceLastToTarget = (toTargetNs > 0) ? ((static_cast<uint64_t>(toTargetNs) + vblankIntervalNs / 2) / vblankIntervalNs) : 0;
+
+        uint64_t pageflipsInAdvance = (static_cast<uint64_t>(expectedCompositingNs) + vblankIntervalNs - 1) / vblankIntervalNs;
+        pageflipsInAdvance = std::clamp(pageflipsInAdvance, uint64_t(1), static_cast<uint64_t>(maxPendingFrameCount));
+
         if (pageflipsInAdvance > 1) {
-            // immediately switch to triple buffering when needed
             wasTripleBuffering = true;
             doubleBufferingCounter = 0;
         } else if (wasTripleBuffering) {
-            // but wait a bit before switching back to double buffering
-            if (doubleBufferingCounter >= 10) {
-                wasTripleBuffering = false;
-            } else if (expectedCompositingTime >= vblankInterval * 0.95) {
-                // also don't switch back if render times are just barely enough for double buffering
-                pageflipsInAdvance = 2;
+            const int64_t threshold = vblankInterval * 95 / 100;
+            if (expectedCompositingNs >= threshold) {
                 doubleBufferingCounter = 0;
-                expectedCompositingTime = vblankInterval;
             } else {
                 doubleBufferingCounter++;
+            }
+
+            if (doubleBufferingCounter >= 10) {
+                wasTripleBuffering = false;
+            } else {
                 pageflipsInAdvance = 2;
-                expectedCompositingTime = vblankInterval;
             }
         }
 
         if (compositeTimer.isActive()) {
-            // we already scheduled this frame, but we got a new timestamp
-            // which might require starting to composite earlier than we planned
-            // It's important here that we do not change the targeted vblank interval,
-            // otherwise with a pessimistic compositing time estimation we might
-            // unnecessarily drop frames
-            const uint32_t intervalsSinceLastTimestamp = std::max<int32_t>(std::round((nextPresentationTimestamp - lastPresentationTimestamp).count() / double(vblankInterval.count())), 0);
-            nextPresentationTimestamp = lastPresentationTimestamp + intervalsSinceLastTimestamp * vblankInterval;
+            const int64_t deltaNs = nextPresentationTimestamp.count() - lastPresentationNs;
+            uint32_t intervalsSinceLastTimestamp = 1;
+            if (deltaNs > 0) [[likely]] {
+                const uint64_t intervals = (static_cast<uint64_t>(deltaNs) + vblankIntervalNs / 2) / vblankIntervalNs;
+                if (intervals > 0 && intervals <= UINT32_MAX) {
+                    intervalsSinceLastTimestamp = static_cast<uint32_t>(intervals);
+                }
+            }
+            nextPresentationNs = lastPresentationNs + static_cast<int64_t>(intervalsSinceLastTimestamp) * vblankInterval;
         } else {
-            nextPresentationTimestamp = lastPresentationTimestamp + std::max(pageflipsSince + pageflipsInAdvance, pageflipsSinceLastToTarget + 1) * vblankInterval;
+            const uint64_t targetVblanks = std::max(pageflipsSince + pageflipsInAdvance, pageflipsSinceLastToTarget + 1);
+            nextPresentationNs = lastPresentationNs + static_cast<int64_t>(targetVblanks) * vblankInterval;
         }
     } else {
         wasTripleBuffering = false;
         doubleBufferingCounter = 0;
         if (presentationMode == PresentationMode::Async || presentationMode == PresentationMode::AdaptiveAsync) {
-            // tearing: pageflips happen ASAP
-            nextPresentationTimestamp = currentTime;
+            nextPresentationNs = currentTimeNs;
         } else {
-            // adaptive sync: pageflips happen after one vblank interval
-            // TODO read minimum refresh rate from the EDID and take it into account here
-            nextPresentationTimestamp = std::max(currentTime, lastPresentationTimestamp + vblankInterval);
+            const int64_t candidate = lastPresentationNs + vblankInterval;
+            nextPresentationNs = std::max(currentTimeNs, candidate);
         }
     }
 
-    const std::chrono::nanoseconds nextRenderTimestamp = nextPresentationTimestamp - expectedCompositingTime;
-    compositeTimer.start(std::max(0ms, std::chrono::duration_cast<std::chrono::milliseconds>(nextRenderTimestamp - currentTime)), Qt::PreciseTimer, q);
+    nextPresentationTimestamp = std::chrono::nanoseconds{nextPresentationNs};
+
+    const int64_t nextRenderNs = nextPresentationNs - expectedCompositingNs;
+    int64_t delayNs = nextRenderNs - currentTimeNs;
+    if (delayNs < 0) {
+        delayNs = 0;
+    }
+
+    const int delayMs = static_cast<int>((delayNs + 999'999) / 1'000'000);
+
+    if (!compositeTimer.isActive() || std::abs(delayMs - scheduledTimerMs) > 1) {
+        scheduledTimerMs = static_cast<int16_t>(delayMs);
+        compositeTimer.start(delayMs, Qt::PreciseTimer, q);
+    }
 }
 
 void RenderLoopPrivate::delayScheduleRepaint()
@@ -126,18 +165,113 @@ void RenderLoopPrivate::notifyFrameDropp
     }
 }
 
-void RenderLoopPrivate::notifyFrameCompleted(std::chrono::nanoseconds timestamp, std::optional<RenderTimeSpan> renderTime, PresentationMode mode, OutputFrame *frame)
+namespace
 {
-    if (output && s_printDebugInfo && !m_debugOutput) {
-        m_debugOutput = std::fstream(qPrintable("kwin perf statistics " + output->name() + ".csv"), std::ios::out);
-        *m_debugOutput << "target pageflip timestamp,pageflip timestamp,render start,render end,safety margin,refresh duration,vrr,tearing,predicted render time\n";
+
+#if defined(__GNUC__) || defined(__clang__)
+#define KWIN_COLD __attribute__((cold))
+#define KWIN_NOINLINE __attribute__((noinline))
+#else
+#define KWIN_COLD
+#define KWIN_NOINLINE
+#endif
+
+static KWIN_COLD KWIN_NOINLINE void sanitizeName(const QString &in, std::string &out)
+{
+    out.clear();
+    const int size = in.size();
+    if (size == 0) {
+        return;
+    }
+    out.reserve(static_cast<size_t>(size));
+
+    int i = 0;
+
+#if (defined(__x86_64__) || defined(_M_X64)) && (defined(__GNUC__) || defined(__clang__))
+    if (__builtin_cpu_supports("avx2")) {
+        const __m256i lower_a_m1 = _mm256_set1_epi16('a' - 1);
+        const __m256i upper_z_p1 = _mm256_set1_epi16('z' + 1);
+        const __m256i upper_A_m1 = _mm256_set1_epi16('A' - 1);
+        const __m256i upper_Z_p1 = _mm256_set1_epi16('Z' + 1);
+        const __m256i digit_0_m1 = _mm256_set1_epi16('0' - 1);
+        const __m256i digit_9_p1 = _mm256_set1_epi16('9' + 1);
+        const __m256i underscore = _mm256_set1_epi16('_');
+        const __m256i dash = _mm256_set1_epi16('-');
+        const __m256i replacement = _mm256_set1_epi16('_');
+
+        for (; i + 15 < size; i += 16) {
+            __m256i chars = _mm256_loadu_si256(reinterpret_cast<const __m256i *>(in.data() + i));
+
+            __m256i is_lower = _mm256_and_si256(_mm256_cmpgt_epi16(chars, lower_a_m1), _mm256_cmpgt_epi16(upper_z_p1, chars));
+            __m256i is_upper = _mm256_and_si256(_mm256_cmpgt_epi16(chars, upper_A_m1), _mm256_cmpgt_epi16(upper_Z_p1, chars));
+            __m256i is_digit = _mm256_and_si256(_mm256_cmpgt_epi16(chars, digit_0_m1), _mm256_cmpgt_epi16(digit_9_p1, chars));
+            __m256i is_underscore = _mm256_cmpeq_epi16(chars, underscore);
+            __m256i is_dash = _mm256_cmpeq_epi16(chars, dash);
+
+            __m256i is_allowed = _mm256_or_si256(is_underscore, _mm256_or_si256(is_dash, _mm256_or_si256(is_digit, _mm256_or_si256(is_lower, is_upper))));
+            __m256i result = _mm256_blendv_epi8(replacement, chars, is_allowed);
+
+            __m128i lo = _mm256_castsi256_si128(result);
+            __m128i hi = _mm256_extracti128_si256(result, 1);
+            __m128i packed = _mm_packus_epi16(lo, hi);
+
+            char temp[16];
+            _mm_storeu_si128(reinterpret_cast<__m128i *>(temp), packed);
+            out.append(temp, 16);
+        }
+    }
+#endif
+
+    for (; i < size; ++i) {
+        const QChar ch = in.at(i);
+        if ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (ch >= '0' && ch <= '9') || ch == '_' || ch == '-') {
+            out.push_back(static_cast<char>(ch.toLatin1()));
+        } else {
+            out.push_back('_');
+        }
+    }
+}
+
+static KWIN_COLD KWIN_NOINLINE void writeDebugOutput(RenderLoopPrivate *d, std::optional<RenderTimeSpan> renderTime, OutputFrame *frame, std::chrono::nanoseconds timestamp, PresentationMode mode)
+{
+    if (d->output && !d->m_debugOutput) {
+        std::string sanitizedName;
+        sanitizeName(d->output->name(), sanitizedName);
+        const std::string filename = "kwin_perf_" + sanitizedName + ".csv";
+        d->m_debugOutput = std::fstream(filename, std::ios::out | std::ios::trunc);
+        if (d->m_debugOutput && d->m_debugOutput->is_open()) {
+            *(d->m_debugOutput) << "target_pageflip_ns,pageflip_ns,render_start_ns,render_end_ns,"
+                                << "safety_margin_ns,refresh_duration_ns,vrr,tearing,predicted_render_ns\n";
+        }
     }
-    if (m_debugOutput) {
+
+    if (d->m_debugOutput && d->m_debugOutput->is_open()) {
         auto times = renderTime.value_or(RenderTimeSpan{});
-        const bool vrr = mode == PresentationMode::AdaptiveSync || mode == PresentationMode::AdaptiveAsync;
-        const bool tearing = mode == PresentationMode::Async || mode == PresentationMode::AdaptiveAsync;
-        *m_debugOutput << frame->targetPageflipTime().time_since_epoch().count() << "," << timestamp.count() << "," << times.start.time_since_epoch().count() << "," << times.end.time_since_epoch().count()
-                       << "," << safetyMargin.count() << "," << frame->refreshDuration().count() << "," << (vrr ? 1 : 0) << "," << (tearing ? 1 : 0) << "," << frame->predictedRenderTime().count() << "\n";
+        const bool vrr = (mode == PresentationMode::AdaptiveSync || mode == PresentationMode::AdaptiveAsync);
+        const bool tearing = (mode == PresentationMode::Async || mode == PresentationMode::AdaptiveAsync);
+
+        *(d->m_debugOutput) << frame->targetPageflipTime().time_since_epoch().count() << ","
+                            << timestamp.count() << ","
+                            << times.start.time_since_epoch().count() << ","
+                            << times.end.time_since_epoch().count() << ","
+                            << d->safetyMargin.count() << ","
+                            << frame->refreshDuration().count() << ","
+                            << (vrr ? 1 : 0) << ","
+                            << (tearing ? 1 : 0) << ","
+                            << frame->predictedRenderTime().count() << "\n";
+        d->m_debugOutput->flush();
+    }
+}
+
+#undef KWIN_COLD
+#undef KWIN_NOINLINE
+
+} // anonymous namespace
+
+void RenderLoopPrivate::notifyFrameCompleted(std::chrono::nanoseconds timestamp, std::optional<RenderTimeSpan> renderTime, PresentationMode mode, OutputFrame *frame)
+{
+    if (s_printDebugInfo) [[unlikely]] {
+        writeDebugOutput(this, renderTime, frame, timestamp, mode);
     }
 
     Q_ASSERT(pendingFrameCount > 0);
@@ -145,11 +279,10 @@ void RenderLoopPrivate::notifyFrameCompl
 
     notifyVblank(timestamp);
 
-    if (renderTime) {
+    if (renderTime) [[likely]] {
         renderJournal.add(renderTime->end - renderTime->start, timestamp);
     }
     if (compositeTimer.isActive()) {
-        // reschedule to match the new timestamp and render time
         scheduleRepaint(lastPresentationTimestamp);
     }
     if (!inhibitCount && pendingReschedule) {
@@ -161,7 +294,7 @@ void RenderLoopPrivate::notifyFrameCompl
 
 void RenderLoopPrivate::notifyVblank(std::chrono::nanoseconds timestamp)
 {
-    if (lastPresentationTimestamp <= timestamp) {
+    if (lastPresentationTimestamp <= timestamp) [[likely]] {
         lastPresentationTimestamp = timestamp;
     } else {
         qCDebug(KWIN_CORE,
@@ -176,6 +309,7 @@ void RenderLoop::timerEvent(QTimerEvent
 {
     if (event->timerId() == d->compositeTimer.timerId()) {
         d->compositeTimer.stop();
+        d->scheduledTimerMs = -1;
         d->dispatch();
     } else if (event->timerId() == d->delayedVrrTimer.timerId()) {
         d->delayedVrrTimer.stop();
@@ -202,9 +336,9 @@ RenderLoop::~RenderLoop()
 void RenderLoop::inhibit()
 {
     d->inhibitCount++;
-
     if (d->inhibitCount == 1) {
         d->compositeTimer.stop();
+        d->scheduledTimerMs = -1;
     }
 }
 
@@ -212,7 +346,6 @@ void RenderLoop::uninhibit()
 {
     Q_ASSERT(d->inhibitCount > 0);
     d->inhibitCount--;
-
     if (d->inhibitCount == 0) {
         d->scheduleNextRepaint();
     }
@@ -236,10 +369,12 @@ int RenderLoop::refreshRate() const
 
 void RenderLoop::setRefreshRate(int refreshRate)
 {
-    if (d->refreshRate == refreshRate) {
+    const int rr = std::clamp(refreshRate, 1'000, 1'000'000);
+    if (d->refreshRate == rr) {
         return;
     }
-    d->refreshRate = refreshRate;
+    d->refreshRate = rr;
+    d->cachedVblankIntervalNs = 1'000'000'000'000ull / static_cast<uint64_t>(rr);
     Q_EMIT refreshRateChanged();
 }
 
@@ -250,16 +385,21 @@ void RenderLoop::setPresentationSafetyMa
 
 void RenderLoop::scheduleRepaint(Item *item, OutputLayer *outputLayer)
 {
-    const bool vrr = d->presentationMode == PresentationMode::AdaptiveSync || d->presentationMode == PresentationMode::AdaptiveAsync;
-    const bool tearing = d->presentationMode == PresentationMode::Async || d->presentationMode == PresentationMode::AdaptiveAsync;
-    if ((vrr || tearing) && workspace() && workspace()->activeWindow() && d->output) {
-        SurfaceItem *const surfaceItem = workspace()->activeWindow()->surfaceItem();
-        if ((item || outputLayer) && activeWindowControlsVrrRefreshRate() && item != surfaceItem && !surfaceItem->isAncestorOf(item)) {
-            constexpr std::chrono::milliseconds s_delayVrrTimer = 1'000ms / 30;
-            d->delayedVrrTimer.start(s_delayVrrTimer, Qt::PreciseTimer, this);
-            return;
+    const bool vrr = (d->presentationMode == PresentationMode::AdaptiveSync || d->presentationMode == PresentationMode::AdaptiveAsync);
+    const bool tearing = (d->presentationMode == PresentationMode::Async || d->presentationMode == PresentationMode::AdaptiveAsync);
+
+    if ((vrr || tearing) && workspace() && d->output) [[unlikely]] {
+        Window *const activeWin = workspace()->activeWindow();
+        if (activeWin) {
+            SurfaceItem *const surfaceItem = activeWin->surfaceItem();
+            if ((item || outputLayer) && activeWindowControlsVrrRefreshRate() && surfaceItem && item != surfaceItem && !surfaceItem->isAncestorOf(item)) {
+                constexpr std::chrono::milliseconds s_delayVrrTimer = 1'000ms / 30;
+                d->delayedVrrTimer.start(s_delayVrrTimer, Qt::PreciseTimer, this);
+                return;
+            }
         }
     }
+
     d->delayedVrrTimer.stop();
     const int effectiveMaxPendingFrameCount = (vrr || tearing) ? 1 : d->maxPendingFrameCount;
     if (d->pendingFrameCount < effectiveMaxPendingFrameCount && !d->inhibitCount) {
@@ -271,11 +411,19 @@ void RenderLoop::scheduleRepaint(Item *i
 
 bool RenderLoop::activeWindowControlsVrrRefreshRate() const
 {
-    Window *const activeWindow = workspace()->activeWindow();
-    return activeWindow
-        && activeWindow->isOnOutput(d->output)
-        && activeWindow->surfaceItem()
-        && activeWindow->surfaceItem()->recursiveFrameTimeEstimation() <= std::chrono::nanoseconds(1'000'000'000) / 30;
+    Workspace *const ws = workspace();
+    if (!ws) [[unlikely]] {
+        return false;
+    }
+    Window *const activeWindow = ws->activeWindow();
+    if (!activeWindow || !activeWindow->isOnOutput(d->output)) {
+        return false;
+    }
+    SurfaceItem *const surfaceItem = activeWindow->surfaceItem();
+    if (!surfaceItem) {
+        return false;
+    }
+    return surfaceItem->recursiveFrameTimeEstimation() <= std::chrono::nanoseconds(1'000'000'000) / 30;
 }
 
 std::chrono::nanoseconds RenderLoop::lastPresentationTimestamp() const
@@ -298,7 +446,13 @@ void RenderLoop::setPresentationMode(Pre
 
 void RenderLoop::setMaxPendingFrameCount(uint32_t maxCount)
 {
-    d->maxPendingFrameCount = maxCount;
+    if (maxCount == 0) {
+        d->maxPendingFrameCount = 1;
+    } else if (maxCount > static_cast<uint32_t>(INT_MAX)) {
+        d->maxPendingFrameCount = INT_MAX;
+    } else {
+        d->maxPendingFrameCount = static_cast<int>(maxCount);
+    }
 }
 
 std::chrono::nanoseconds RenderLoop::predictedRenderTime() const

--- a/src/scene/surfaceitem.cpp	2025-10-05 23:59:56.232413388 +0200
+++ b/src/scene/surfaceitem.cpp	2025-10-06 00:01:06.300904280 +0200
@@ -105,10 +105,11 @@ QRegion SurfaceItem::mapFromBuffer(const
     const QRectF sourceBox = m_bufferToSurfaceTransform.map(m_bufferSourceBox, m_bufferSize);
     const qreal xScale = m_destinationSize.width() / sourceBox.width();
     const qreal yScale = m_destinationSize.height() / sourceBox.height();
+    const QPointF sourceBoxTopLeft = sourceBox.topLeft();
 
     QRegion result;
-    for (QRectF rect : region) {
-        const QRectF r = m_bufferToSurfaceTransform.map(rect, m_bufferSize).translated(-sourceBox.topLeft());
+    for (const QRect &rect : region) {
+        const QRectF r = m_bufferToSurfaceTransform.map(QRectF(rect), m_bufferSize).translated(-sourceBoxTopLeft);
         result += QRectF(r.x() * xScale, r.y() * yScale, r.width() * xScale, r.height() * yScale).toAlignedRect();
     }
     return result;
@@ -120,11 +121,15 @@ static QRegion expandRegion(const QRegio
         return QRegion();
     }
 
-    QRegion ret;
+    QVector<QRect> expandedRects;
+    expandedRects.reserve(region.rectCount());
+
     for (const QRect &rect : region) {
-        ret += rect.marginsAdded(padding);
+        expandedRects.append(rect.marginsAdded(padding));
     }
 
+    QRegion ret;
+    ret.setRects(expandedRects.constData(), expandedRects.size());
     return ret;
 }
 
@@ -136,7 +141,7 @@ void SurfaceItem::addDamage(const QRegio
         if (m_lastDamageTimeDiffs.size() > 100) {
             m_lastDamageTimeDiffs.pop_front();
         }
-        m_frameTimeEstimation = std::accumulate(m_lastDamageTimeDiffs.begin(), m_lastDamageTimeDiffs.end(), 0ns) / m_lastDamageTimeDiffs.size();
+        m_frameTimeEstimation = std::accumulate(m_lastDamageTimeDiffs.begin(), m_lastDamageTimeDiffs.end(), 0ns) / static_cast<std::chrono::nanoseconds::rep>(m_lastDamageTimeDiffs.size());
     }
     m_lastDamage = std::chrono::steady_clock::now();
     m_damage += region;
@@ -222,14 +227,16 @@ WindowQuadList SurfaceItem::buildQuads()
     const QRectF sourceBox = m_bufferToSurfaceTransform.map(m_bufferSourceBox, m_bufferSize);
     const qreal xScale = sourceBox.width() / m_destinationSize.width();
     const qreal yScale = sourceBox.height() / m_destinationSize.height();
+    const QPointF bufferSourceTopLeft = m_bufferSourceBox.topLeft();
+    const QSizeF sourceBoxSize = sourceBox.size();
 
-    for (const QRectF rect : region) {
+    for (const QRectF &rect : region) {
         WindowQuad quad;
 
-        const QPointF bufferTopLeft = snapToPixelGridF(m_bufferSourceBox.topLeft() + m_surfaceToBufferTransform.map(QPointF(rect.left() * xScale, rect.top() * yScale), sourceBox.size()));
-        const QPointF bufferTopRight = snapToPixelGridF(m_bufferSourceBox.topLeft() + m_surfaceToBufferTransform.map(QPointF(rect.right() * xScale, rect.top() * yScale), sourceBox.size()));
-        const QPointF bufferBottomRight = snapToPixelGridF(m_bufferSourceBox.topLeft() + m_surfaceToBufferTransform.map(QPointF(rect.right() * xScale, rect.bottom() * yScale), sourceBox.size()));
-        const QPointF bufferBottomLeft = snapToPixelGridF(m_bufferSourceBox.topLeft() + m_surfaceToBufferTransform.map(QPointF(rect.left() * xScale, rect.bottom() * yScale), sourceBox.size()));
+        const QPointF bufferTopLeft = snapToPixelGridF(bufferSourceTopLeft + m_surfaceToBufferTransform.map(QPointF(rect.left() * xScale, rect.top() * yScale), sourceBoxSize));
+        const QPointF bufferTopRight = snapToPixelGridF(bufferSourceTopLeft + m_surfaceToBufferTransform.map(QPointF(rect.right() * xScale, rect.top() * yScale), sourceBoxSize));
+        const QPointF bufferBottomRight = snapToPixelGridF(bufferSourceTopLeft + m_surfaceToBufferTransform.map(QPointF(rect.right() * xScale, rect.bottom() * yScale), sourceBoxSize));
+        const QPointF bufferBottomLeft = snapToPixelGridF(bufferSourceTopLeft + m_surfaceToBufferTransform.map(QPointF(rect.left() * xScale, rect.bottom() * yScale), sourceBoxSize));
 
         quad[0] = WindowVertex(rect.topLeft(), bufferTopLeft);
         quad[1] = WindowVertex(rect.topRight(), bufferTopRight);
@@ -357,11 +364,11 @@ OpenGLSurfaceContents OpenGLSurfaceTextu
 bool OpenGLSurfaceTexture::create()
 {
     GraphicsBuffer *buffer = m_pixmap->item()->buffer();
-    if (buffer->dmabufAttributes()) {
+    if (Q_LIKELY(buffer->dmabufAttributes())) {
         return loadDmabufTexture(buffer);
     } else if (buffer->shmAttributes()) {
         return loadShmTexture(buffer);
-    } else if (buffer->singlePixelAttributes()) {
+    } else if (Q_UNLIKELY(buffer->singlePixelAttributes())) {
         return loadSinglePixelTexture(buffer);
     } else {
         qCDebug(KWIN_OPENGL) << "Failed to create OpenGLSurfaceTexture for a buffer of unknown type" << buffer;
@@ -378,11 +385,11 @@ void OpenGLSurfaceTexture::destroy()
 void OpenGLSurfaceTexture::update(const QRegion &region)
 {
     GraphicsBuffer *buffer = m_pixmap->item()->buffer();
-    if (buffer->dmabufAttributes()) {
+    if (Q_LIKELY(buffer->dmabufAttributes())) {
         updateDmabufTexture(buffer);
     } else if (buffer->shmAttributes()) {
         updateShmTexture(buffer, region);
-    } else if (buffer->singlePixelAttributes()) {
+    } else if (Q_UNLIKELY(buffer->singlePixelAttributes())) {
         updateSinglePixelTexture(buffer);
     } else {
         qCDebug(KWIN_OPENGL) << "Failed to update OpenGLSurfaceTexture for a buffer of unknown type" << buffer;
@@ -414,7 +421,7 @@ bool OpenGLSurfaceTexture::loadShmTextur
 
 static QRegion simplifyDamage(const QRegion &damage)
 {
-    if (damage.rectCount() < 3) {
+    if (damage.rectCount() < 8) {
         return damage;
     } else {
         return damage.boundingRect();


From ae759bba7d675fc118642a60f557493f8641c2a4 Mon Sep 17 00:00:00 2001
From: Blazer Silving <breakingspell@gmail.com>
Date: Tue, 5 Aug 2025 13:07:36 -0500
Subject: [PATCH] effect/offscreenquickview: update scene graph timers when
 window refreshed

Credit: https://bugs.kde.org/show_bug.cgi?id=485927#c51
---
 src/effect/offscreenquickview.cpp | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/src/effect/offscreenquickview.cpp b/src/effect/offscreenquickview.cpp
index 1c6e6d9bed6..cbad4a30bcb 100644
--- a/src/effect/offscreenquickview.cpp
+++ b/src/effect/offscreenquickview.cpp
@@ -30,6 +30,7 @@
 #include <QQuickOpenGLUtils>
 #include <QQuickRenderTarget>
 #include <QTimer>
+#include <private/qabstractanimation_p.h>
 #include <private/qeventpoint_p.h> // for QMutableEventPoint
 
 namespace KWin
@@ -218,6 +219,8 @@ void OffscreenQuickView::update()
         return;
     }
 
+    QUnifiedTimer::instance()->updateAnimationTimers();
+
     bool usingGl = d->m_glcontext != nullptr;
     EglContext *previousContext = EglContext::currentContext();
 
-- 
GitLab

From 274eef577664c43fc3320f559ca0ec2bf2fb3f35 Mon Sep 17 00:00:00 2001
From: Joshua Goins <josh@redstrate.com>
Date: Sat, 2 Aug 2025 05:46:29 -0400
Subject: [PATCH] backends/libinput: Increase minimum version to 1.28

This removes some input area code that was gated on 1.27. Ideally we
want 1.29, but that's unlikely to happen before 6.5.
---
 CMakeLists.txt                       |  7 +------
 autotests/libinput/mock_libinput.cpp |  5 +++++
 src/backends/libinput/device.cpp     | 10 +---------
 src/config-kwin.h.cmake              |  2 --
 4 files changed, 7 insertions(+), 17 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 92025ccb2e0..eda49339e16 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -288,13 +288,8 @@ if (KWIN_BUILD_X11)
     set(XWAYLAND_SESSION_SCRIPTS "/etc/xdg/Xwayland-session.d")
 endif()
 
-find_package(Libinput 1.26)
+find_package(Libinput 1.28)
 set_package_properties(Libinput PROPERTIES TYPE REQUIRED PURPOSE "Required for input handling on Wayland.")
-if (Libinput_VERSION VERSION_GREATER_EQUAL 1.27)
-    set(HAVE_LIBINPUT_INPUT_AREA 1)
-else()
-    set(HAVE_LIBINPUT_INPUT_AREA 0)
-endif()
 
 find_package(Libeis-1.0)
 set_package_properties(Libeis-1.0 PROPERTIES TYPE OPTIONAL PURPOSE "Required for emulated input handling.")
diff --git a/autotests/libinput/mock_libinput.cpp b/autotests/libinput/mock_libinput.cpp
index c5398e53ef2..58f5432b233 100644
--- a/autotests/libinput/mock_libinput.cpp
+++ b/autotests/libinput/mock_libinput.cpp
@@ -1147,3 +1147,8 @@ udev_device *udev_device_unref(struct udev_device *udev_device)
 {
     return udev_device;
 }
+
+int libinput_device_config_area_has_rectangle(struct libinput_device *device)
+{
+    return 0;
+}
diff --git a/src/backends/libinput/device.cpp b/src/backends/libinput/device.cpp
index 28432b26e49..223c650c236 100644
--- a/src/backends/libinput/device.cpp
+++ b/src/backends/libinput/device.cpp
@@ -435,7 +435,6 @@ Device::Device(libinput_device *device, QObject *parent)
     }
 
     if (supportsInputArea() && m_inputArea != defaultInputArea()) {
-#if HAVE_LIBINPUT_INPUT_AREA
         const libinput_config_area_rectangle rect{
             .x1 = m_inputArea.topLeft().x(),
             .y1 = m_inputArea.topLeft().y(),
@@ -443,7 +442,6 @@ Device::Device(libinput_device *device, QObject *parent)
             .y2 = m_inputArea.bottomRight().y(),
         };
         libinput_device_config_area_set_rectangle(m_device, &rect);
-#endif
     }
 
     libinput_device_group *group = libinput_device_get_device_group(device);
@@ -1073,11 +1071,7 @@ double Device::defaultPressureRangeMax() const
 
 bool Device::supportsInputArea() const
 {
-#if HAVE_LIBINPUT_INPUT_AREA
-    return true;
-#else
-    return false;
-#endif
+    return libinput_device_config_area_has_rectangle(m_device);
 }
 
 QRectF Device::inputArea() const
@@ -1090,7 +1084,6 @@ void Device::setInputArea(const QRectF &inputArea)
     if (m_inputArea != inputArea) {
         m_inputArea = inputArea;
 
-#if HAVE_LIBINPUT_INPUT_AREA
         const libinput_config_area_rectangle rect{
             .x1 = m_inputArea.topLeft().x(),
             .y1 = m_inputArea.topLeft().y(),
@@ -1098,7 +1091,6 @@ void Device::setInputArea(const QRectF &inputArea)
             .y2 = m_inputArea.bottomRight().y(),
         };
         libinput_device_config_area_set_rectangle(m_device, &rect);
-#endif
 
         writeEntry(ConfigKey::InputArea, m_inputArea);
         Q_EMIT inputAreaChanged();
diff --git a/src/config-kwin.h.cmake b/src/config-kwin.h.cmake
index 42ddc517cb6..996b5811fd1 100644
--- a/src/config-kwin.h.cmake
+++ b/src/config-kwin.h.cmake
@@ -29,5 +29,3 @@ constexpr QLatin1String LIBEXEC_DIR("${CMAKE_INSTALL_FULL_LIBEXECDIR}");
 #cmakedefine01 HAVE_DL_LIBRARY
 
 constexpr QLatin1String XWAYLAND_SESSION_SCRIPTS("${XWAYLAND_SESSION_SCRIPTS}");
-
-#cmakedefine01 HAVE_LIBINPUT_INPUT_AREA
-- 
GitLab
