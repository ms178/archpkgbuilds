--- renderloop_p.h.orig	2025-10-24 17:01:34.429557337 +0200
+++ renderloop_p.h	2025-10-24 19:20:18.759660019 +0200
@@ -14,6 +14,7 @@
 
 #include <fstream>
 #include <optional>
+#include <cstdint>
 
 namespace KWin
 {
@@ -21,42 +22,42 @@ namespace KWin
 class SurfaceItem;
 class OutputFrame;
 
-class KWIN_EXPORT RenderLoopPrivate
+class alignas(64) KWIN_EXPORT RenderLoopPrivate
 {
 public:
     static RenderLoopPrivate *get(RenderLoop *loop);
     explicit RenderLoopPrivate(RenderLoop *q, Output *output);
 
     void dispatch();
-
     void delayScheduleRepaint();
     void scheduleNextRepaint();
     void scheduleRepaint(std::chrono::nanoseconds lastTargetTimestamp);
-
     void notifyFrameDropped();
     void notifyFrameCompleted(std::chrono::nanoseconds timestamp, std::optional<RenderTimeSpan> renderTime, PresentationMode mode, OutputFrame *frame);
     void notifyVblank(std::chrono::nanoseconds timestamp);
 
     RenderLoop *const q;
     Output *const output;
-    std::optional<std::fstream> m_debugOutput;
-    std::chrono::nanoseconds lastPresentationTimestamp = std::chrono::nanoseconds::zero();
-    std::chrono::nanoseconds nextPresentationTimestamp = std::chrono::nanoseconds::zero();
-    bool wasTripleBuffering = false;
-    int doubleBufferingCounter = 0;
-    QBasicTimer compositeTimer;
-    RenderJournal renderJournal;
-    int refreshRate = 60000;
+    std::chrono::nanoseconds lastPresentationTimestamp{0};
+    std::chrono::nanoseconds nextPresentationTimestamp{0};
+    uint64_t cachedVblankIntervalNs;
+    std::chrono::nanoseconds safetyMargin{0};
     int pendingFrameCount = 0;
-    bool preparingNewFrame = false;
     int inhibitCount = 0;
-    bool pendingReschedule = false;
-    std::chrono::nanoseconds safetyMargin{0};
-
     PresentationMode presentationMode = PresentationMode::VSync;
     int maxPendingFrameCount = 1;
+    bool pendingReschedule = false;
+    bool wasTripleBuffering = false;
+    bool preparingNewFrame = false;
+    int16_t doubleBufferingCounter = 0;
+    int16_t scheduledTimerMs = -1;
 
+    RenderJournal renderJournal;
+    int refreshRate = 60'000;
+
+    QBasicTimer compositeTimer;
     QBasicTimer delayedVrrTimer;
+    std::optional<std::fstream> m_debugOutput;
 };
 
 } // namespace KWin
