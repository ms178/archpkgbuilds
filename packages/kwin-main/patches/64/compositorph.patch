--- compositor.h.orig	2025-10-06 14:38:50.285439554 +0200
+++ compositor.h	2025-10-06 14:54:41.938286992 +0200
@@ -16,7 +16,9 @@
 #include <QObject>
 #include <QRegion>
 
+#include <chrono>
 #include <memory>
+#include <optional>
 
 namespace KWin
 {
@@ -33,6 +35,20 @@ class WorkspaceScene;
 class Window;
 class OutputFrame;
 
+/**
+ * Main compositor coordinator. Orchestrates scene rendering, backend presentation,
+ * and frame scheduling across all outputs.
+ *
+ * CRITICAL HOT PATHS (called every frame @ 60-360 Hz):
+ * - composite() - main render loop, VRR timing-critical
+ * - prePaintPass() / paintPass() / postPaintPass() - scene traversal
+ * - framePass() - frame metadata propagation
+ *
+ * VRR OPTIMIZATION:
+ * - Early cursor updates to avoid tearing in adaptive sync
+ * - Frame pacing respects min/max refresh rate windows
+ * - Per-output VRR state tracking
+ */
 class KWIN_EXPORT Compositor : public QObject
 {
     Q_OBJECT
@@ -52,26 +68,20 @@ public:
     void start();
     void stop();
 
-    /**
-     * Re-initializes the Compositor completely.
-     * Connected to the D-Bus signal org.kde.KWin /KWin reinitCompositing
-     */
     void reinitialize();
 
-    /**
-     * Whether the Compositor is active. That is a Scene is present and the Compositor is
-     * not shutting down itself.
-     */
     bool isActive();
 
     WorkspaceScene *scene() const
     {
         return m_scene.get();
     }
+
     CursorScene *cursorScene() const
     {
         return m_cursorScene.get();
     }
+
     RenderBackend *backend() const
     {
         return m_backend.get();
@@ -98,7 +108,7 @@ protected Q_SLOTS:
 private Q_SLOTS:
     void handleFrameRequested(RenderLoop *renderLoop);
 
-protected:
+private:
     Output *findOutput(RenderLoop *loop) const;
 
     void addSuperLayer(RenderLayer *layer);
@@ -115,13 +125,30 @@ protected:
     void addOutput(Output *output);
     void removeOutput(Output *output);
 
+    /**
+     * Per-output VRR state for frame pacing optimization.
+     * POD struct with explicit initialization to avoid undefined behavior.
+     */
+    struct VrrState {
+        bool enabled = false;
+        bool tearing = false;
+        std::optional<std::chrono::nanoseconds> maxCursorDelay;
+
+        // Cached gamma-encoded brightness to avoid std::pow in hot path
+        double cachedBrightnessCurrent = 1.0;
+        double cachedBrightnessTarget = 1.0;
+    };
+
     CompositingType m_selectedCompositor = NoCompositing;
 
     State m_state = State::Off;
     std::unique_ptr<WorkspaceScene> m_scene;
     std::unique_ptr<CursorScene> m_cursorScene;
     std::unique_ptr<RenderBackend> m_backend;
+
+    QHash<RenderLoop *, Output *> m_outputMap;
     QHash<RenderLoop *, RenderLayer *> m_superlayers;
+    QHash<Output *, VrrState> m_vrrStates;
 };
 
 } // namespace KWin
