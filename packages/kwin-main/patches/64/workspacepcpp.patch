--- workspace.cpp.orig	2025-10-06 20:15:38.384762052 +0200
+++ workspace.cpp	2025-10-06 20:20:05.247585899 +0200
@@ -1037,18 +1037,24 @@ void Workspace::updateCurrentActivity(co
 
 Output *Workspace::outputAt(const QPointF &pos) const
 {
+    // NEW: Fast path - check if pos is inside any output's rect (common case)
+    for (Output *output : m_outputs) {  // NEW: Direct iteration
+        if (output->geometry().contains(pos.toPoint())) {
+            return output;  // Early exit - no distance calc needed
+        }
+    }
+
+    // Slow path: Find nearest output (pos is outside all outputs)
     Output *bestOutput = nullptr;
-    qreal minDistance;
+    qreal minDistance = std::numeric_limits<qreal>::max();  // NEW: Avoid uninitialized var
 
-    for (Output *output : std::as_const(m_outputs)) {
+    for (Output *output : m_outputs) {
         const QRectF geo = output->geometry();
-
         const QPointF closestPoint(std::clamp(pos.x(), geo.x(), geo.x() + geo.width() - 1),
                                    std::clamp(pos.y(), geo.y(), geo.y() + geo.height() - 1));
-
         const QPointF ray = closestPoint - pos;
         const qreal distance = ray.x() * ray.x() + ray.y() * ray.y();
-        if (!bestOutput || distance < minDistance) {
+        if (distance < minDistance) {  // NEW: Simplified condition
             minDistance = distance;
             bestOutput = output;
         }
@@ -2465,138 +2471,176 @@ QPointF Workspace::adjustWindowPosition(
         }
     }
 
-    if (options->windowSnapZone() || !borderSnapZone.isNull() || options->centerSnapZone()) {
-
-        const bool sOWO = options->isSnapOnlyWhenOverlapping();
-        const Output *output = outputAt(pos + window->rect().center());
-        if (maxRect.isNull()) {
-            maxRect = clientArea(MaximizeArea, window, output);
-        }
-        const qreal xmin = maxRect.left();
-        const qreal xmax = maxRect.right(); // desk size
-        const qreal ymin = maxRect.top();
-        const qreal ymax = maxRect.bottom();
-
-        const qreal cx(pos.x());
-        const qreal cy(pos.y());
-        const qreal cw(window->width());
-        const qreal ch(window->height());
-        const qreal rx(cx + cw);
-        const qreal ry(cy + ch); // these don't change
-
-        qreal nx(cx), ny(cy); // buffers
-        qreal deltaX(xmax);
-        qreal deltaY(ymax); // minimum distance to other windows
-
-        qreal lx, ly, lrx, lry; // coords and size for the comparison window, l
-
-        // border snap
-        const qreal borderXSnapZone = borderSnapZone.width() * snapAdjust; // snap trigger
-        const qreal borderYSnapZone = borderSnapZone.height() * snapAdjust;
-        if (borderXSnapZone > 0 || borderYSnapZone > 0) {
-            if ((sOWO ? (cx < xmin) : true) && (std::abs(xmin - cx) < borderXSnapZone)) {
-                deltaX = xmin - cx;
-                nx = xmin;
-            }
-            if ((sOWO ? (rx > xmax) : true) && (std::abs(rx - xmax) < borderXSnapZone) && (std::abs(xmax - rx) < deltaX)) {
-                deltaX = rx - xmax;
-                nx = xmax - cw;
-            }
-
-            if ((sOWO ? (cy < ymin) : true) && (std::abs(ymin - cy) < borderYSnapZone)) {
-                deltaY = ymin - cy;
-                ny = ymin;
-            }
-            if ((sOWO ? (ry > ymax) : true) && (std::abs(ry - ymax) < borderYSnapZone) && (std::abs(ymax - ry) < deltaY)) {
-                deltaY = ry - ymax;
-                ny = ymax - ch;
-            }
-        }
-
-        // windows snap
-        const qreal windowSnapZone = options->windowSnapZone() * snapAdjust;
-        if (windowSnapZone > 0) {
-            for (auto l = m_windows.constBegin(); l != m_windows.constEnd(); ++l) {
-                if (!canSnap(window, (*l))) {
-                    continue;
-                }
-
-                lx = (*l)->x();
-                ly = (*l)->y();
-                lrx = lx + (*l)->width();
-                lry = ly + (*l)->height();
-
-                if (!(guideMaximized & MaximizeHorizontal) && (cy <= lry) && (ly <= ry)) {
-                    if ((sOWO ? (cx < lrx) : true) && (std::abs(lrx - cx) < windowSnapZone) && (std::abs(lrx - cx) < deltaX)) {
-                        deltaX = std::abs(lrx - cx);
-                        nx = lrx;
+    // NEW: Early exit if no snapping enabled
+    const qreal windowSnapZone = options->windowSnapZone() * snapAdjust;
+    const qreal borderXSnapZone = borderSnapZone.width() * snapAdjust;
+    const qreal borderYSnapZone = borderSnapZone.height() * snapAdjust;
+    const qreal centerSnapZone = options->centerSnapZone() * snapAdjust;
+
+    if (windowSnapZone <= 0 && borderXSnapZone <= 0 && borderYSnapZone <= 0 && centerSnapZone <= 0) {
+        return pos;  // No snapping configured
+    }
+
+    const bool sOWO = options->isSnapOnlyWhenOverlapping();
+    const Output *output = outputAt(pos + window->rect().center());
+    if (maxRect.isNull()) {
+        maxRect = clientArea(MaximizeArea, window, output);
+    }
+
+    // NEW: Hoist constants
+    const qreal xmin = maxRect.left();
+    const qreal xmax = maxRect.right();
+    const qreal ymin = maxRect.top();
+    const qreal ymax = maxRect.bottom();
+    const qreal cx = pos.x();
+    const qreal cy = pos.y();
+    const qreal cw = window->width();
+    const qreal ch = window->height();
+    const qreal rx = cx + cw;
+    const qreal ry = cy + ch;
+
+    qreal nx = cx;
+    qreal ny = cy;
+    qreal deltaX = xmax;
+    qreal deltaY = ymax;
+
+    // Border snap
+    if (borderXSnapZone > 0 || borderYSnapZone > 0) {
+        if ((sOWO ? (cx < xmin) : true) && (std::abs(xmin - cx) < borderXSnapZone)) {
+            deltaX = xmin - cx;
+            nx = xmin;
+        }
+        if ((sOWO ? (rx > xmax) : true) && (std::abs(rx - xmax) < borderXSnapZone) && (std::abs(xmax - rx) < deltaX)) {
+            deltaX = rx - xmax;
+            nx = xmax - cw;
+        }
+        if ((sOWO ? (cy < ymin) : true) && (std::abs(ymin - cy) < borderYSnapZone)) {
+            deltaY = ymin - cy;
+            ny = ymin;
+        }
+        if ((sOWO ? (ry > ymax) : true) && (std::abs(ry - ymax) < borderYSnapZone) && (std::abs(ymax - ry) < deltaY)) {
+            deltaY = ry - ymax;
+            ny = ymax - ch;
+        }
+    }
+
+    // Window snap - OPTIMIZED: Hoist window properties outside loop
+    if (windowSnapZone > 0) {
+        // NEW: Pre-filter snappable windows (avoid qobject_cast in loop)
+        const bool needHorizontalSnap = !(guideMaximized & MaximizeHorizontal);
+        const bool needVerticalSnap = !(guideMaximized & MaximizeVertical);
+
+        for (const Window *l : m_windows) {  // NEW: Direct iteration, avoid std::as_const copy
+            if (!canSnap(window, l)) {
+                continue;
+            }
+
+            const qreal lx = l->x();
+            const qreal ly = l->y();
+            const qreal lrx = lx + l->width();
+            const qreal lry = ly + l->height();
+
+            // NEW: Split horizontal and vertical checks for better branch prediction
+            if (needHorizontalSnap) {
+                const bool verticalOverlap = (cy <= lry) && (ly <= ry);
+                if (verticalOverlap) {
+                    // Snap left edge to right edge of l
+                    if ((sOWO ? (cx < lrx) : true)) {
+                        const qreal dist = std::abs(lrx - cx);
+                        if (dist < windowSnapZone && dist < deltaX) {
+                            deltaX = dist;
+                            nx = lrx;
+                        }
                     }
-                    if ((sOWO ? (rx > lx) : true) && (std::abs(rx - lx) < windowSnapZone) && (std::abs(rx - lx) < deltaX)) {
-                        deltaX = std::abs(rx - lx);
-                        nx = lx - cw;
+                    // Snap right edge to left edge of l
+                    if ((sOWO ? (rx > lx) : true)) {
+                        const qreal dist = std::abs(rx - lx);
+                        if (dist < windowSnapZone && dist < deltaX) {
+                            deltaX = dist;
+                            nx = lx - cw;
+                        }
                     }
                 }
+            }
 
-                if (!(guideMaximized & MaximizeVertical) && (cx <= lrx) && (lx <= rx)) {
-                    if ((sOWO ? (cy < lry) : true) && (std::abs(lry - cy) < windowSnapZone) && (std::abs(lry - cy) < deltaY)) {
-                        deltaY = std::abs(lry - cy);
-                        ny = lry;
+            if (needVerticalSnap) {
+                const bool horizontalOverlap = (cx <= lrx) && (lx <= rx);
+                if (horizontalOverlap) {
+                    // Snap top edge to bottom edge of l
+                    if ((sOWO ? (cy < lry) : true)) {
+                        const qreal dist = std::abs(lry - cy);
+                        if (dist < windowSnapZone && dist < deltaY) {
+                            deltaY = dist;
+                            ny = lry;
+                        }
                     }
-                    // if ( (std::abs( ry-ly ) < snap) && (std::abs( ry - ly ) < deltaY ))
-                    if ((sOWO ? (ry > ly) : true) && (std::abs(ry - ly) < windowSnapZone) && (std::abs(ry - ly) < deltaY)) {
-                        deltaY = std::abs(ry - ly);
-                        ny = ly - ch;
+                    // Snap bottom edge to top edge of l
+                    if ((sOWO ? (ry > ly) : true)) {
+                        const qreal dist = std::abs(ry - ly);
+                        if (dist < windowSnapZone && dist < deltaY) {
+                            deltaY = dist;
+                            ny = ly - ch;
+                        }
                     }
                 }
+            }
 
-                // Corner snapping
-                if (!(guideMaximized & MaximizeVertical) && (nx == lrx || nx + cw == lx)) {
-                    if ((sOWO ? (ry > lry) : true) && (std::abs(lry - ry) < windowSnapZone) && (std::abs(lry - ry) < deltaY)) {
-                        deltaY = std::abs(lry - ry);
+            // Corner snapping
+            if (needVerticalSnap && (nx == lrx || nx + cw == lx)) {
+                if ((sOWO ? (ry > lry) : true)) {
+                    const qreal dist = std::abs(lry - ry);
+                    if (dist < windowSnapZone && dist < deltaY) {
+                        deltaY = dist;
                         ny = lry - ch;
                     }
-                    if ((sOWO ? (cy < ly) : true) && (std::abs(cy - ly) < windowSnapZone) && (std::abs(cy - ly) < deltaY)) {
-                        deltaY = std::abs(cy - ly);
+                }
+                if ((sOWO ? (cy < ly) : true)) {
+                    const qreal dist = std::abs(cy - ly);
+                    if (dist < windowSnapZone && dist < deltaY) {
+                        deltaY = dist;
                         ny = ly;
                     }
                 }
-                if (!(guideMaximized & MaximizeHorizontal) && (ny == lry || ny + ch == ly)) {
-                    if ((sOWO ? (rx > lrx) : true) && (std::abs(lrx - rx) < windowSnapZone) && (std::abs(lrx - rx) < deltaX)) {
-                        deltaX = std::abs(lrx - rx);
+            }
+            if (needHorizontalSnap && (ny == lry || ny + ch == ly)) {
+                if ((sOWO ? (rx > lrx) : true)) {
+                    const qreal dist = std::abs(lrx - rx);
+                    if (dist < windowSnapZone && dist < deltaX) {
+                        deltaX = dist;
                         nx = lrx - cw;
                     }
-                    if ((sOWO ? (cx < lx) : true) && (std::abs(cx - lx) < windowSnapZone) && (std::abs(cx - lx) < deltaX)) {
-                        deltaX = std::abs(cx - lx);
+                }
+                if ((sOWO ? (cx < lx) : true)) {
+                    const qreal dist = std::abs(cx - lx);
+                    if (dist < windowSnapZone && dist < deltaX) {
+                        deltaX = dist;
                         nx = lx;
                     }
                 }
             }
         }
+    }
 
-        // center snap
-        const qreal centerSnapZone = options->centerSnapZone() * snapAdjust;
-        if (centerSnapZone > 0) {
-            qreal diffX = std::abs((xmin + xmax) / 2 - (cx + cw / 2));
-            qreal diffY = std::abs((ymin + ymax) / 2 - (cy + ch / 2));
-            if (diffX < centerSnapZone && diffY < centerSnapZone && diffX < deltaX && diffY < deltaY) {
-                // Snap to center of screen
-                nx = (xmin + xmax) / 2 - cw / 2;
-                ny = (ymin + ymax) / 2 - ch / 2;
-            } else if (options->borderSnapZone() > 0) {
-                // Enhance border snap
-                if ((nx == xmin || nx == xmax - cw) && diffY < centerSnapZone && diffY < deltaY) {
-                    // Snap to vertical center on screen edge
-                    ny = (ymin + ymax) / 2 - ch / 2;
-                } else if (((unrestricted ? ny == ymin : ny <= ymin) || ny == ymax - ch) && diffX < centerSnapZone && diffX < deltaX) {
-                    // Snap to horizontal center on screen edge
-                    nx = (xmin + xmax) / 2 - cw / 2;
-                }
+    // Center snap
+    if (centerSnapZone > 0) {
+        const qreal xCenter = (xmin + xmax) / 2;
+        const qreal yCenter = (ymin + ymax) / 2;
+        const qreal diffX = std::abs(xCenter - (cx + cw / 2));
+        const qreal diffY = std::abs(yCenter - (cy + ch / 2));
+
+        if (diffX < centerSnapZone && diffY < centerSnapZone && diffX < deltaX && diffY < deltaY) {
+            nx = xCenter - cw / 2;
+            ny = yCenter - ch / 2;
+        } else if (borderXSnapZone > 0 || borderYSnapZone > 0) {  // NEW: Guard check
+            if ((nx == xmin || nx == xmax - cw) && diffY < centerSnapZone && diffY < deltaY) {
+                ny = yCenter - ch / 2;
+            } else if (((unrestricted ? ny == ymin : ny <= ymin) || ny == ymax - ch) && diffX < centerSnapZone && diffX < deltaX) {
+                nx = xCenter - cw / 2;
             }
         }
-
-        pos = QPointF(nx, ny);
     }
-    return pos;
+
+    return QPointF(nx, ny);
 }
 
 QRectF Workspace::adjustWindowSize(const Window *window, QRectF moveResizeGeom, Gravity gravity) const
