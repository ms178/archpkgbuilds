--- wayland_backend.cpp.orig	2025-10-06 12:34:18.304236279 +0200
+++ wayland_backend.cpp	2025-10-06 13:58:10.239284295 +0200
@@ -33,6 +33,8 @@
 #include <unistd.h>
 #include <wayland-client-core.h>
 
+#include <limits>
+
 #include "wayland-linux-dmabuf-unstable-v1-client-protocol.h"
 
 namespace KWin
@@ -227,6 +229,7 @@ bool WaylandInputDevice::isEnabled() con
 
 void WaylandInputDevice::setEnabled(bool enabled)
 {
+    Q_UNUSED(enabled)
 }
 
 bool WaylandInputDevice::isKeyboard() const
@@ -305,7 +308,7 @@ WaylandSeat::WaylandSeat(KWayland::Clien
     , m_seat(nativeSeat)
     , m_backend(backend)
 {
-    auto updateKeyboardDevice = [this](){
+    auto updateKeyboardDevice = [this]() {
         if (m_seat->hasKeyboard()) {
             createKeyboardDevice();
         } else {
@@ -462,13 +465,14 @@ void WaylandBackend::createOutputs()
     // we need to multiply the initial window size with the scale in order to
     // create an output window of this size in the end
     const QSize pixelSize = m_options.outputSize * m_options.outputScale;
-    for (int i = 0; i < m_options.outputCount; i++) {
+
+    const int outputCount = std::clamp(m_options.outputCount, 0, 64);
+    m_outputs.reserve(outputCount);
+
+    for (int i = 0; i < outputCount; i++) {
         WaylandOutput *output = createOutput(QStringLiteral("WL-%1").arg(i), pixelSize, m_options.outputScale, m_options.fullscreen);
         m_outputs << output;
-        Q_EMIT outputAdded(output);
     }
-
-    Q_EMIT outputsQueried();
 }
 
 WaylandOutput *WaylandBackend::createOutput(const QString &name, const QSize &size, qreal scale, bool fullscreen)
@@ -562,6 +566,7 @@ Outputs WaylandBackend::outputs() const
 
 Output *WaylandBackend::createVirtualOutput(const QString &name, const QString &description, const QSize &size, double scale)
 {
+    Q_UNUSED(description)
     return createOutput(name, size * scale, scale, false);
 }
 
