--- renderbackend.h.orig	2025-10-06 10:46:34.419515781 +0200
+++ renderbackend.h	2025-10-06 12:14:44.204609899 +0200
@@ -12,7 +12,14 @@
 
 #include <QObject>
 #include <QPointer>
+#include <QRegion>
+#include <QHash>
+#include <QList>
+
+#include <chrono>
 #include <memory>
+#include <optional>
+#include <vector>
 
 namespace KWin
 {
@@ -25,6 +32,12 @@ class RenderLoop;
 class DrmDevice;
 class SyncTimeline;
 
+/**
+ * PresentationFeedback interface for receiving presentation events.
+ *
+ * presented() is invoked when a frame is actually presented to the screen, with the
+ * refresh cycle duration, a monotonic timestamp, and the presentation mode used.
+ */
 class PresentationFeedback
 {
 public:
@@ -33,9 +46,16 @@ public:
     PresentationFeedback(PresentationFeedback &&move) = default;
     virtual ~PresentationFeedback() = default;
 
-    virtual void presented(std::chrono::nanoseconds refreshCycleDuration, std::chrono::nanoseconds timestamp, PresentationMode mode) = 0;
+    virtual void presented(std::chrono::nanoseconds refreshCycleDuration,
+                           std::chrono::nanoseconds timestamp,
+                           PresentationMode mode) = 0;
 };
 
+/**
+ * Span of time for a rendering operation, represented with steady_clock time points.
+ * start and end default to epoch (0ns) so a default-constructed span is valid and
+ * identifiable as "unset" unless overwritten.
+ */
 struct RenderTimeSpan
 {
     std::chrono::steady_clock::time_point start = std::chrono::steady_clock::time_point{std::chrono::nanoseconds::zero()};
@@ -44,30 +64,45 @@ struct RenderTimeSpan
     RenderTimeSpan operator|(const RenderTimeSpan &other) const;
 };
 
+/**
+ * Abstract interface to query a render time span from a GPU/CPU query object.
+ */
 class KWIN_EXPORT RenderTimeQuery
 {
 public:
     virtual ~RenderTimeQuery() = default;
-    virtual std::optional<RenderTimeSpan> query() = 0;
+    [[nodiscard]] virtual std::optional<RenderTimeSpan> query() = 0;
 };
 
+/**
+ * CPU-side render time query using steady_clock timestamps.
+ */
 class KWIN_EXPORT CpuRenderTimeQuery : public RenderTimeQuery
 {
 public:
     /**
-     * marks the start of the query
+     * Marks the start of the query.
      */
     explicit CpuRenderTimeQuery();
 
+    /**
+     * Marks the end of the query.
+     */
     void end();
 
-    std::optional<RenderTimeSpan> query() override;
+    [[nodiscard]] std::optional<RenderTimeSpan> query() override;
 
 private:
     const std::chrono::steady_clock::time_point m_start;
     std::optional<std::chrono::steady_clock::time_point> m_end;
 };
 
+/**
+ * Represents a single frame targeted for presentation on an Output.
+ *
+ * It aggregates content metadata, presentation mode, damage, and optional timing
+ * queries used to estimate render duration and to report presentation feedback.
+ */
 class KWIN_EXPORT OutputFrame
 {
 public:
@@ -79,27 +114,28 @@ public:
     void addFeedback(std::unique_ptr<PresentationFeedback> &&feedback);
 
     void setContentType(ContentType type);
-    std::optional<ContentType> contentType() const;
+    [[nodiscard]] std::optional<ContentType> contentType() const;
 
     void setPresentationMode(PresentationMode mode);
-    PresentationMode presentationMode() const;
+    [[nodiscard]] PresentationMode presentationMode() const;
 
     void setDamage(const QRegion &region);
-    QRegion damage() const;
+    [[nodiscard]] QRegion damage() const;
+
     void addRenderTimeQuery(std::unique_ptr<RenderTimeQuery> &&query);
 
-    std::chrono::steady_clock::time_point targetPageflipTime() const;
-    std::chrono::nanoseconds refreshDuration() const;
-    std::chrono::nanoseconds predictedRenderTime() const;
+    [[nodiscard]] std::chrono::steady_clock::time_point targetPageflipTime() const;
+    [[nodiscard]] std::chrono::nanoseconds refreshDuration() const;
+    [[nodiscard]] std::chrono::nanoseconds predictedRenderTime() const;
 
-    std::optional<double> brightness() const;
+    [[nodiscard]] std::optional<double> brightness() const;
     void setBrightness(double brightness);
 
-    std::optional<double> artificialHdrHeadroom() const;
+    [[nodiscard]] std::optional<double> artificialHdrHeadroom() const;
     void setArtificialHdrHeadroom(double edr);
 
 private:
-    std::optional<RenderTimeSpan> queryRenderTime() const;
+    [[nodiscard]] std::optional<RenderTimeSpan> queryRenderTime() const;
 
     const QPointer<RenderLoop> m_loop;
     const std::chrono::nanoseconds m_refreshDuration;
@@ -123,19 +159,19 @@ class KWIN_EXPORT RenderBackend : public
     Q_OBJECT
 
 public:
-    virtual CompositingType compositingType() const = 0;
+    [[nodiscard]] virtual CompositingType compositingType() const = 0;
 
-    virtual bool checkGraphicsReset();
+    [[nodiscard]] virtual bool checkGraphicsReset();
 
-    virtual OutputLayer *primaryLayer(Output *output) = 0;
-    virtual OutputLayer *cursorLayer(Output *output);
-    virtual bool present(Output *output, const std::shared_ptr<OutputFrame> &frame) = 0;
+    [[nodiscard]] virtual OutputLayer *primaryLayer(Output *output) = 0;
+    [[nodiscard]] virtual OutputLayer *cursorLayer(Output *output);
+    [[nodiscard]] virtual bool present(Output *output, const std::shared_ptr<OutputFrame> &frame) = 0;
     virtual void repairPresentation(Output *output);
 
-    virtual DrmDevice *drmDevice() const;
+    [[nodiscard]] virtual DrmDevice *drmDevice() const;
 
-    virtual bool testImportBuffer(GraphicsBuffer *buffer);
-    virtual QHash<uint32_t, QList<uint64_t>> supportedFormats() const;
+    [[nodiscard]] virtual bool testImportBuffer(GraphicsBuffer *buffer);
+    [[nodiscard]] virtual QHash<uint32_t, QList<uint64_t>> supportedFormats() const;
 };
 
 } // namespace KWin
