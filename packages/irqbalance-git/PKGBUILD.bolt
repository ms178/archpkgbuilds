# Maintainer: Chocobo1 <chocobo1 AT archlinux DOT net>

pkgname=irqbalance-git
pkgver=1.9.4.r65.g9322ac1
pkgrel=1
pkgdesc="A daemon to help balance the CPU load generated by interrupts across all of a systems CPUs"
arch=('i686' 'x86_64')
url="https://irqbalance.github.io/irqbalance/"
license=('GPL')
options=(!strip)
depends=('glibc' 'numactl' 'systemd-libs')
makedepends=('git' 'glib2' 'libcap-ng' 'ncurses' 'systemd')
provides=('irqbalance')
conflicts=('irqbalance')
backup=('etc/irqbalance.env')
source=("git+https://github.com/Irqbalance/irqbalance.git")
sha256sums=('SKIP')


prepare() {
  cd "irqbalance"

  sed \
    -e 's|/path/to/|/etc/|g' \
    -e 's|/usr/sbin|/usr/bin|g' \
    -i "misc/irqbalance.service"
}

pkgver() {
  cd "irqbalance"

  git describe --long --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g'
}

build() {
  cd "irqbalance"

  # Store original flags
  CFLAGS_ORIG="$CFLAGS"
  CXXFLAGS_ORIG="$CXXFLAGS"
  LDFLAGS_ORIG="$LDFLAGS"

  # Stage 1: Instrumented build for PGO
  export LLVM_PROFILE_FILE="$srcdir/%p.profraw"
  CFLAGS+=" -g3 -fno-omit-frame-pointer -fprofile-generate -mllvm -vp-counters-per-site=10"
  CXXFLAGS+=" -g3 -fno-omit-frame-pointer -fprofile-generate -mllvm -vp-counters-per-site=10"
  LDFLAGS+=" -g3 -fno-omit-frame-pointer -fprofile-generate -mllvm -vp-counters-per-site=10"

  # First build with instrumentation
  autoreconf -vfi
  ./configure \
    --prefix="/usr" \
    --sbindir="/usr/bin" \
    --with-systemd \
    --enable-debug

  make

  # Run irqbalance briefly to generate profile data
  ./irqbalance --oneshot

  # Merge profile data
  llvm-profdata merge -output="$srcdir/default.profdata" "$srcdir"/*.profraw
  rm -f "$srcdir"/*.profraw

  # Clean build directory
  make clean

  # Stage 2: Build with PGO data and prepare for BOLT
  CFLAGS="$CFLAGS_ORIG -fprofile-use=$srcdir/default.profdata"
  CXXFLAGS="$CXXFLAGS_ORIG -fprofile-use=$srcdir/default.profdata"
  LDFLAGS="$LDFLAGS_ORIG -fprofile-use=$srcdir/default.profdata -Wl,--emit-relocs"

  autoreconf -vfi
  ./configure \
    --prefix="/usr" \
    --sbindir="/usr/bin" \
    --with-systemd \
    --disable-debug

  make
}

check() {
  cd "$srcdir/irqbalance"

  # Create directory for BOLT profile data
  mkdir -p "$srcdir/bolt_profile"

  # Run with perf recording
  perf record --max-size=6G -F 500000 -e branch-instructions:u,cycles:u,cache-misses:u,branch-misses:u,branches:u,branch-loads:u,branch-load-misses:u,iTLB-load-misses:u,dTLB-store-misses:u,dTLB-load-misses:u,L1-icache-load-misses:u,LLC-load-misses:u -b -- ./irqbalance --oneshot

  # Convert perf data to BOLT profile format
  perf2bolt ./irqbalance -p perf.data -o "$srcdir/bolt_profile/perf.fdata"

  # Create optimized binary directory
  mkdir -p "$srcdir/bolt_opt"

  # Optimize using BOLT
  llvm-bolt ./irqbalance \
    --data "$srcdir/bolt_profile/perf.fdata" \
    --dyno-stats \
    --lite=false \
    --cu-processing-batch-size=64 \
    --eliminate-unreachable \
    --frame-opt=all \
    --icf=all \
    --jump-tables=aggressive \
    --min-branch-clusters \
    --stoke \
    --sctc-mode=always \
    --plt=all \
    --hot-data \
    --hot-text \
    --frame-opt-rm-stores \
    --peepholes=all \
    --infer-stale-profile=1 \
    --x86-strip-redundant-address-size \
    --indirect-call-promotion=all \
    --reg-reassign \
    --use-aggr-reg-reassign \
    --reorder-blocks=ext-tsp \
    --reorder-functions=cdsort \
    --split-all-cold \
    --split-eh \
    --split-functions \
    --split-strategy=cdsplit \
    -o "$srcdir/bolt_opt/irqbalance.bolt"

  # Copy optimized binary back
  cp "$srcdir/bolt_opt/irqbalance.bolt" ./irqbalance
}


package() {
  cd "irqbalance"
  make DESTDIR="$pkgdir" install

  # Replace the binary with BOLT-optimized version
  install -Dm755 irqbalance "$pkgdir/usr/bin/irqbalance"

  install -Dm644 "misc/irqbalance.env" -t "$pkgdir/etc"
  install -Dm644 "misc/irqbalance.service" -t "$pkgdir/usr/lib/systemd/system"

  # Use llvm-strip only on recognized file formats
  find "$pkgdir" -type f \( -name '*.so*' -o -name '*.a' -o -executable \) -print0 | while IFS= read -r -d '' file; do
    if llvm-strip --strip-unneeded "$file" 2>/dev/null || llvm-strip --strip-all "$file" 2>/dev/null; then
      echo "Stripped: $file"
    else
      echo "Skipping: $file (not a valid object file)" >&2
    fi
  done
}
