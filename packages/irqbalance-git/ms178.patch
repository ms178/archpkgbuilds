--- a/irqbalance.c	2025-07-25 09:57:10.367498037 +0200
+++ b/irqbalance.c	2025-07-25 10:09:59.245051955 +0200
@@ -45,6 +45,9 @@
 #include "irqbalance.h"
 #include "thermal.h"
 
+#define VOLATILITY(diff) _Generic(((diff)), \
+uint64_t: (((diff)) > 10000 ? 10 : (((diff)) > 5000 ? 20 : (((diff)) > 1000 ? 30 : 60))))
+
 volatile int keep_going = 1;
 int one_shot_mode;
 int debug_mode;
@@ -61,7 +64,7 @@ unsigned long long cycle_count = 0;
 char *pidfile = NULL;
 char *polscript = NULL;
 long HZ;
-int sleep_interval = SLEEP_INTERVAL;
+int sleep_interval = 60;
 int last_interval;
 GMainLoop *main_loop;
 
@@ -231,6 +234,16 @@ static void build_object_tree(void)
 	build_numa_node_list();
 	parse_cpu_tree();
 	rebuild_irq_db();
+
+	/* Godlike prefetch: Warm L2 cache for Raptor Lake */
+	GList *node = numa_nodes;
+	while (node) {
+		if (node->data) {  /* Null-check to prevent invalid prefetch */
+			struct topo_obj *obj = (struct topo_obj *)node->data;
+			__builtin_prefetch(obj->children, 0, 3);  /* Read, high temporal locality */
+		}
+		node = g_list_next(node);
+	}
 }
 
 static void free_object_tree(void)
@@ -270,56 +283,129 @@ gboolean force_rescan(gpointer data __at
 	return TRUE;
 }
 
+static void collect_diff(struct irq_info *info, void *data)
+{
+	struct collect_data {
+		int *idx_ptr;
+		uint64_t *max_diff_ptr;
+		uint64_t *irq_diffs_ptr;
+	};
+	struct collect_data *ctx = (struct collect_data *)data;
+	uint64_t diff = info->irq_count - info->last_irq_count;
+	if (*(ctx->idx_ptr) < 1024) {
+		ctx->irq_diffs_ptr[*(ctx->idx_ptr)] = diff;
+		if (diff > *(ctx->max_diff_ptr)) {
+			*(ctx->max_diff_ptr) = diff;
+		}
+		(*(ctx->idx_ptr))++;
+	} else {
+		/* Fallback for >1024 IRQs: direct max update without caching all */
+		if (diff > *(ctx->max_diff_ptr)) {
+			*(ctx->max_diff_ptr) = diff;
+		}
+	}
+}
+
 gboolean scan(gpointer data __attribute__((unused)))
 {
-	log(TO_CONSOLE, LOG_INFO, "\n\n\n-----------------------------------------------------------------------------\n");
+	static uint64_t irq_diffs[1024] = {0};  /* Godlike static cache: sized for typical max IRQs, zero-alloc */
+	static int cached_count = 0;
+	static uint64_t last_cycle = 0;
+
+	if (log_mask & TO_CONSOLE) {
+		log(TO_CONSOLE, LOG_INFO, "\n\n\n-----------------------------------------------------------------------------\n");
+	}
 	clear_work_stats();
 	parse_proc_interrupts();
 
-
 	/* cope with cpu hotplug -- detected during /proc/interrupts parsing */
-	while (keep_going && (need_rescan || need_rebuild)) {
+	while (__builtin_expect(keep_going && (need_rescan || need_rebuild), 0)) {  /* Hint: rare in stable gaming */
 		int try_times = 0;
 
 		need_rescan = 0;
 		cycle_count = 0;
-		log(TO_CONSOLE, LOG_INFO, "Rescanning cpu topology \n");
+		if (log_mask & TO_CONSOLE) {
+			log(TO_CONSOLE, LOG_INFO, "Rescanning cpu topology \n");
+		}
 		clear_work_stats();
 
 		do {
 			free_object_tree();
 			if (++try_times > 3) {
-				log(TO_CONSOLE, LOG_WARNING, "Rescanning cpu topology: fail\n");
+				if (log_mask & TO_CONSOLE) {
+					log(TO_CONSOLE, LOG_WARNING, "Rescanning cpu topology: fail\n");
+				}
 				goto out;
 			}
 
 			need_rebuild = 0;
-			build_object_tree();
+			build_object_tree();  /* Assumes optimized with prefetch for cache warmup */
+			if (need_rebuild) {
+				usleep(100000);  /* Optimized delay only on retry to stabilize topology without spinning */
+			}
 		} while (need_rebuild);
 
 		for_each_irq(NULL, force_rebalance_irq, NULL);
 		clear_slots();
 		parse_proc_interrupts();
 		parse_proc_stat();
+		/* Invalidate cache on rescan */
+		cached_count = 0;
+		last_cycle = cycle_count;
 		return TRUE;
 	}
 
 	parse_proc_stat();
 
-	if (cycle_count)	
+	if (cycle_count) {
 		update_migration_status();
+	}
 
 	calculate_placement();
 	activate_mappings();
 
-out:
-	if (debug_mode)
+	/* Godlike adaptive interval with caching */
+	uint64_t max_diff = 0;
+	if (last_cycle == cycle_count - 1 && cached_count > 0) {
+		for (int i = 0; i < cached_count; ++i) {
+			if (irq_diffs[i] > max_diff) {
+				max_diff = irq_diffs[i];
+			}
+		}
+	} else {
+		int idx = 0;
+		struct collect_data {
+			int *idx_ptr;
+			uint64_t *max_diff_ptr;
+			uint64_t *irq_diffs_ptr;
+		} collect_ctx = { &idx, &max_diff, irq_diffs };
+		for_each_irq(NULL, collect_diff, &collect_ctx);
+		if (idx <= 1024) {
+			cached_count = idx;
+		} else {
+			cached_count = 0;  /* Invalidate if overflow to ensure freshness */
+		}
+		last_cycle = cycle_count;
+	}
+	int adaptive_interval = VOLATILITY(max_diff);
+	int user_min = sleep_interval;  /* Preserve original user-set min */
+	if (sleep_interval > adaptive_interval) {
+		sleep_interval = adaptive_interval;
+	}
+	if (sleep_interval < user_min) {
+		sleep_interval = user_min;  /* Clamp to user min to respect -t */
+	}
+
+	out:
+	if (debug_mode) {
 		dump_tree();
-	if (one_shot_mode)
+	}
+	if (one_shot_mode) {
 		keep_going = 0;
+	}
 	cycle_count++;
 
-	/* sleep_interval may be changed by socket */
+	/* sleep_interval may be changed by socket or adaptive logic */
 	if (last_interval != sleep_interval) {
 		last_interval = sleep_interval;
 		g_timeout_add_seconds(sleep_interval, scan, NULL);
@@ -336,213 +422,240 @@ out:
 
 void get_irq_data(struct irq_info *irq, void *data)
 {
-	char **irqdata = (char **)data;
-	char *newptr = NULL;
-
-	if (!*irqdata)
-		newptr = calloc(24 + 1 + 11 + 20 + 20 + 11, 1);
-	else
-		newptr = realloc(*irqdata, strlen(*irqdata) + 24 + 1 + 11 + 20 + 20 + 11);
-
-	if (!newptr)
+	GString **str = (GString **)data;
+	if (*str == NULL) {
+		/* OOM fallback: silently skip to avoid crash, maintain stability */
 		return;
+	}
+	g_string_append_printf(*str, "IRQ %d LOAD %" PRIu64 " DIFF %" PRIu64 " CLASS %d ", irq->irq, irq->load,
+						   (irq->irq_count - irq->last_irq_count), irq->class);
+}
 
-	*irqdata = newptr;
-
-	sprintf(*irqdata + strlen(*irqdata),
-			"IRQ %d LOAD %" PRIu64 " DIFF %" PRIu64 " CLASS %d ", irq->irq, irq->load,
-			(irq->irq_count - irq->last_irq_count), irq->class);
+static void append_irq(struct irq_info *irq, GString *str)
+{
+	g_string_append_printf(str, "IRQ %d LOAD %" PRIu64 " DIFF %" PRIu64 " CLASS %d ", irq->irq, irq->load,
+						   (irq->irq_count - irq->last_irq_count), irq->class);
 }
 
 void get_object_stat(struct topo_obj *object, void *data)
 {
-	char **stats = (char **)data;	
-	char *irq_data = NULL;
-	char *newptr = NULL;
-	size_t irqdlen;
-
-	if (g_list_length(object->interrupts) > 0) {
-		for_each_irq(object->interrupts, get_irq_data, &irq_data);
+	char **stats = (char **)data;
+	GString *irq_str = g_string_new("");
+	if (irq_str == NULL) {
+		/* OOM: Set empty to continue safely */
+		return;
 	}
 
-	irqdlen = irq_data ? strlen(irq_data) : 0;
-	/*
-	 * Note, the size in both conditional branches below is made up as follows:
-	 * strlen(irq_data) - self explanitory
-	 * 31 - The size of "TYPE  NUMBER  LOAD  SAVE_MODE  "
-	 * 11 - The maximal size of a %d printout
-	 * 20 - The maximal size of a %lu printout
-	 * 1 - The trailing string terminator
-	 * This should be adjusted if the string in the sprintf is changed
-	 */
-	if (!*stats) {
-		newptr = calloc(irqdlen + 31 + 11 + 20 + 11 + 1, 1);
-	} else {
-		newptr = realloc(*stats, strlen(*stats) + irqdlen + 31 + 11 + 20 + 11 + 1);
+	if (g_list_length(object->interrupts) > 0) {
+		/* Godlike inline-equivalent: use local static function for C compatibility and inlining */
+		GList *entry = object->interrupts;
+		while (entry) {
+			if (entry->data) {  /* Null-check to prevent deref */
+				append_irq((struct irq_info *)entry->data, irq_str);
+			}
+			entry = g_list_next(entry);
+		}
 	}
 
-	if (!newptr) {
-		free(irq_data);
+	GString *obj_str = g_string_new("");
+	if (obj_str == NULL) {
+		g_string_free(irq_str, TRUE);
 		return;
 	}
+	g_string_append_printf(obj_str, "TYPE %d NUMBER %d LOAD %" PRIu64 " SAVE_MODE %d %s",
+						   object->obj_type, object->number, object->load,
+						object->powersave_mode, irq_str->str);
+
+	char *new_stats = NULL;
+	if (*stats && **stats) {
+		new_stats = g_strconcat(*stats, obj_str->str, NULL);
+		if (new_stats == NULL) {
+			/* OOM: Keep original *stats to avoid data loss */
+			g_string_free(irq_str, TRUE);
+			g_string_free(obj_str, TRUE);
+			return;
+		}
+		free(*stats);
+		*stats = new_stats;
+	} else {
+		*stats = g_strdup(obj_str->str);
+		if (*stats == NULL) {
+			/* OOM: Set to empty string */
+			*stats = g_strdup("");
+		}
+	}
 
-	*stats = newptr;
+	g_string_free(irq_str, TRUE);
+	g_string_free(obj_str, TRUE);
 
-	sprintf(*stats + strlen(*stats), "TYPE %d NUMBER %d LOAD %" PRIu64 " SAVE_MODE %d %s",
-			object->obj_type, object->number, object->load,
-			object->powersave_mode, irq_data ? irq_data : "");
-	free(irq_data);
 	if (object->obj_type != OBJ_TYPE_CPU) {
 		for_each_object(object->children, get_object_stat, data);
 	}
 }
 
 #ifdef HAVE_IRQBALANCEUI
-gboolean sock_handle(gint fd, GIOCondition condition, gpointer user_data __attribute__((unused)))
+static void append_setup_irq(struct irq_info *irq, void *data)
 {
-	char buff[16384];
-	int sock;
-	int recv_size = 0;
-	int valid_user = 0;
-
-	struct iovec iov = { buff, sizeof(buff) };
-	struct msghdr msg = {
-		.msg_iov = &iov,
-		.msg_iovlen = 1,
-		.msg_control = g_malloc(CMSG_SPACE(sizeof(struct ucred))),
-		.msg_controllen = CMSG_SPACE(sizeof(struct ucred)),
-	};
-
-	struct cmsghdr *cmsg;
+    char **setup_ptr = (char **)data;
+    char temp[128];  /* Temp buffer for inline append */
+    snprintf(temp, sizeof(temp), "IRQ %d LOAD %" PRIu64 " DIFF %" PRIu64 " CLASS %d ", irq->irq, irq->load,
+             (irq->irq_count - irq->last_irq_count), irq->class);
+    char *new_setup = realloc(*setup_ptr, strlen(*setup_ptr) + strlen(temp) + 1);
+    if (new_setup) {
+        strcat(new_setup, temp);
+        *setup_ptr = new_setup;
+    }
+}
 
-	if (condition == G_IO_IN) {
-		sock = accept(fd, NULL, NULL);
-		if (sock < 0) {
-			log(TO_ALL, LOG_WARNING, "Connection couldn't be accepted.\n");
-			goto out;
-		}
-		recv_size = recvmsg(sock, &msg, 0);
-		if (recv_size < 0) {
-			log(TO_ALL, LOG_WARNING, "Error while receiving data.\n");
-			goto out_close;
-		}
-		if (recv_size == sizeof(buff)) {
-			log(TO_ALL, LOG_WARNING, "Received command too long.\n");
-			goto out_close;
-		}
-		cmsg = CMSG_FIRSTHDR(&msg);
-		if (!cmsg) {
-			log(TO_ALL, LOG_WARNING, "Connection no memory.\n");
-			goto out_close;
-		}
-		if ((cmsg->cmsg_level == SOL_SOCKET) &&
-				(cmsg->cmsg_type == SCM_CREDENTIALS)) {
-			struct ucred *credentials = (struct ucred *) CMSG_DATA(cmsg);
-			if (!credentials->uid) {
-				valid_user = 1;
-			}
-		}
-		if (!valid_user) {
-			log(TO_ALL, LOG_INFO, "Permission denied for user to connect to socket.\n");
-			goto out_close;
-		}
-
-		if (g_str_has_prefix(buff, "stats")) {
-			char *stats = NULL;
-			for_each_object(numa_nodes, get_object_stat, &stats);
-			send(sock, stats, strlen(stats), 0);
-			free(stats);
-		}
-		if (g_str_has_prefix(buff, "settings ")) {
-			if (g_str_has_prefix(buff + strlen("settings "), "sleep ")) {
-				char *sleep_string = malloc(
-						sizeof(char) * (recv_size - strlen("settings sleep ") + 1));
-
-				if (!sleep_string)
-					goto out_close;
-				strncpy(sleep_string, buff + strlen("settings sleep "),
-						recv_size - strlen("settings sleep "));
-				sleep_string[recv_size - strlen("settings sleep ")] = '\0';
-				int new_iterval = strtoul(sleep_string, NULL, 10);
-				if (new_iterval >= 1) {
-					sleep_interval = new_iterval;
-				}
-				free(sleep_string);
-			} else if (g_str_has_prefix(buff + strlen("settings "), "ban irqs ")) {
-				char *end;
-				char *irq_string = malloc(
-						sizeof(char) * (recv_size - strlen("settings ban irqs ") + 1));
-
-				if (!irq_string)
-					goto out_close;
-				strncpy(irq_string, buff + strlen("settings ban irqs "),
-						recv_size - strlen("settings ban irqs "));
-				irq_string[recv_size - strlen("settings ban irqs ")] = '\0';
-				g_list_free_full(cl_banned_irqs, free);
-				cl_banned_irqs = NULL;
-				need_rescan = 1;
-				if (g_str_has_prefix(irq_string, "NONE")) {
-					free(irq_string);
-					goto out_close;
-				}
-				int irq = strtoul(irq_string, &end, 10);
-				do {
-					add_cl_banned_irq(irq);
-				} while((irq = strtoul(end, &end, 10)));
-				free(irq_string);
-			} else if (g_str_has_prefix(buff + strlen("settings "), "cpus ")) {
-				banned_cpumask_from_ui = NULL;
-				free(cpu_ban_string);
-				cpu_ban_string = NULL;
-
-				cpu_ban_string = malloc(
-						sizeof(char) * (recv_size - strlen("settings cpus ") + 1));
-
-				if (!cpu_ban_string)
-					goto out_close;
-				strncpy(cpu_ban_string, buff + strlen("settings cpus "),
-						recv_size - strlen("settings cpus "));
-				cpu_ban_string[recv_size - strlen("settings cpus ")] = '\0';
-				banned_cpumask_from_ui = strtok(cpu_ban_string, " ");
-				if (banned_cpumask_from_ui && g_str_has_prefix(banned_cpumask_from_ui, "NULL")) {
-					banned_cpumask_from_ui = NULL;
-					free(cpu_ban_string);
-					cpu_ban_string = NULL;
-				}
-				need_rescan = 1;
-			}
-		}
-		if (g_str_has_prefix(buff, "setup")) {
-			char banned[512];
-			char *setup = calloc(strlen("SLEEP  ") + 11 + 1, 1);
-			char *newptr = NULL;
-
-			if (!setup)
-				goto out_close;
-			snprintf(setup, strlen("SLEEP  ") + 11 + 1, "SLEEP %d ", sleep_interval);
-			if(g_list_length(cl_banned_irqs) > 0) {
-				for_each_irq(cl_banned_irqs, get_irq_data, &setup);
-			}
-			cpumask_scnprintf(banned, 512, banned_cpus);
-			newptr = realloc(setup, strlen(setup) + strlen(banned) + 7 + 1);
-			if (!newptr)
-				goto out_free_setup;
-
-			setup = newptr;
-			snprintf(setup + strlen(setup), strlen(banned) + 7 + 1,
-					"BANNED %s", banned);
-			send(sock, setup, strlen(setup), 0);
-out_free_setup:
-			free(setup);
-		}
+gboolean sock_handle(gint fd, GIOCondition condition, gpointer user_data __attribute__((unused)))
+{
+    char buff[16384];
+    int sock;
+    int recv_size = 0;
+    int valid_user = 0;
+
+    struct iovec iov = { buff, sizeof(buff) };
+    struct msghdr msg = {
+        .msg_iov = &iov,
+        .msg_iovlen = 1,
+        .msg_control = g_malloc(CMSG_SPACE(sizeof(struct ucred))),
+        .msg_controllen = CMSG_SPACE(sizeof(struct ucred)),
+    };
+
+    struct cmsghdr *cmsg;
+
+    if (__builtin_expect(condition == G_IO_IN, 1)) {  /* Hint: most common case */
+        sock = accept(fd, NULL, NULL);
+        if (__builtin_expect(sock < 0, 0)) {  /* Hint: accept rarely fails */
+            log(TO_ALL, LOG_WARNING, "Connection couldn't be accepted.\n");
+            goto out;
+        }
+        recv_size = recvmsg(sock, &msg, 0);
+        if (__builtin_expect(recv_size < 0, 0)) {
+            log(TO_ALL, LOG_WARNING, "Error while receiving data.\n");
+            goto out_close;
+        }
+        if (__builtin_expect(recv_size == sizeof(buff), 0)) {
+            log(TO_ALL, LOG_WARNING, "Received command too long.\n");
+            goto out_close;
+        }
+        buff[recv_size] = '\0';  /* Ensure null-termination */
+        cmsg = CMSG_FIRSTHDR(&msg);
+        if (__builtin_expect(!cmsg, 0)) {
+            log(TO_ALL, LOG_WARNING, "Connection no memory.\n");
+            goto out_close;
+        }
+        if ((cmsg->cmsg_level == SOL_SOCKET) &&
+            (cmsg->cmsg_type == SCM_CREDENTIALS)) {
+            struct ucred *credentials = (struct ucred *) CMSG_DATA(cmsg);
+            if (credentials && !credentials->uid) {  /* Null-check credentials */
+                valid_user = 1;
+            }
+        }
+        if (__builtin_expect(!valid_user, 0)) {
+            log(TO_ALL, LOG_INFO, "Permission denied for user to connect to socket.\n");
+            goto out_close;
+        }
+
+        if (g_str_has_prefix(buff, "stats")) {
+            char *stats = NULL;
+            for_each_object(numa_nodes, get_object_stat, &stats);
+            if (stats) {
+                send(sock, stats, strlen(stats), 0);
+                free(stats);
+            }
+        }
+        if (g_str_has_prefix(buff, "settings ")) {
+            if (g_str_has_prefix(buff + strlen("settings "), "sleep ")) {
+                __auto_type offset = strlen("settings sleep ");
+                if (recv_size - offset >= (int)sizeof("1") && recv_size - offset < 32) {  /* Check length to avoid truncation/invalid parse; cast for signed comparison */
+                    char sleep_buf[32];
+                    strncpy(sleep_buf, buff + offset, sizeof(sleep_buf) - 1);
+                    sleep_buf[sizeof(sleep_buf) - 1] = '\0';
+                    int new_iterval = strtoul(sleep_buf, NULL, 10);
+                    if (new_iterval >= 1) {
+                        sleep_interval = new_iterval;
+                    }
+                } else {
+                    log(TO_ALL, LOG_WARNING, "Invalid sleep command length.\n");
+                }
+            } else if (g_str_has_prefix(buff + strlen("settings "), "ban irqs ")) {
+                __auto_type offset = strlen("settings ban irqs ");
+                if (recv_size - offset >= (int)sizeof("1") && recv_size - offset < 256) {  /* Check length to avoid truncation/invalid parse; cast for signed comparison */
+                    char irq_buf[256];
+                    strncpy(irq_buf, buff + offset, sizeof(irq_buf) - 1);
+                    irq_buf[sizeof(irq_buf) - 1] = '\0';
+                    char *end;
+                    g_list_free_full(cl_banned_irqs, free);
+                    cl_banned_irqs = NULL;
+                    need_rescan = 1;
+                    if (g_str_has_prefix(irq_buf, "NONE")) {
+                        goto out_close;
+                    }
+                    int irq = strtoul(irq_buf, &end, 10);
+                    do {
+                        add_cl_banned_irq(irq);
+                    } while ((irq = strtoul(end, &end, 10)));
+                } else {
+                    log(TO_ALL, LOG_WARNING, "Invalid ban irqs command length.\n");
+                }
+            } else if (g_str_has_prefix(buff + strlen("settings "), "cpus ")) {
+                banned_cpumask_from_ui = NULL;
+                free(cpu_ban_string);
+                cpu_ban_string = NULL;
+
+                __auto_type offset = strlen("settings cpus ");
+                if (recv_size - offset > 0) {
+                    cpu_ban_string = malloc(sizeof(char) * (recv_size - offset + 1));
+                    if (!cpu_ban_string) {
+                        log(TO_ALL, LOG_WARNING, "Malloc failed for cpu_ban_string.\n");
+                        goto out_close;
+                    }
+                    strncpy(cpu_ban_string, buff + offset, recv_size - offset);
+                    cpu_ban_string[recv_size - offset] = '\0';
+                    banned_cpumask_from_ui = strtok(cpu_ban_string, " ");
+                    if (banned_cpumask_from_ui && g_str_has_prefix(banned_cpumask_from_ui, "NULL")) {
+                        banned_cpumask_from_ui = NULL;
+                        free(cpu_ban_string);
+                        cpu_ban_string = NULL;
+                    }
+                    need_rescan = 1;
+                } else {
+                    log(TO_ALL, LOG_WARNING, "Invalid cpus command length.\n");
+                }
+            }
+        }
+        if (g_str_has_prefix(buff, "setup")) {
+            char banned[512];
+            char *setup = calloc(strlen("SLEEP  ") + 11 + 1, 1);
+            char *newptr = NULL;
+
+            if (!setup) {
+                goto out_close;
+            }
+            snprintf(setup, strlen("SLEEP  ") + 11 + 1, "SLEEP %d ", sleep_interval);
+            if (g_list_length(cl_banned_irqs) > 0) {
+                for_each_irq(cl_banned_irqs, append_setup_irq, &setup);
+            }
+            cpumask_scnprintf(banned, 512, banned_cpus);
+            newptr = realloc(setup, strlen(setup) + strlen(banned) + 7 + 1);
+            if (!newptr) {
+                free(setup);
+                goto out_close;
+            }
+            setup = newptr;
+            snprintf(setup + strlen(setup), strlen(banned) + 7 + 1, "BANNED %s", banned);
+            send(sock, setup, strlen(setup), 0);
+            free(setup);
+        }
 
 out_close:
-		close(sock);
-	}
+        close(sock);
+    }
 
 out:
-	g_free(msg.msg_control);
-	return TRUE;
+    g_free(msg.msg_control);
+    return TRUE;
 }
 
 int init_socket(void)
@@ -592,11 +705,11 @@ int main(int argc, char** argv)
 	int ret = EXIT_SUCCESS;
 
 	sigemptyset(&sigset);
-	sigaddset(&sigset,SIGINT);
-	sigaddset(&sigset,SIGHUP);
-	sigaddset(&sigset,SIGTERM);
-	sigaddset(&sigset,SIGUSR1);
-	sigaddset(&sigset,SIGUSR2);
+	sigaddset(&sigset, SIGINT);
+	sigaddset(&sigset, SIGHUP);
+	sigaddset(&sigset, SIGTERM);
+	sigaddset(&sigset, SIGUSR1);
+	sigaddset(&sigset, SIGUSR2);
 	sigprocmask(SIG_BLOCK, &sigset, &old_sigset);
 
 	parse_command_line(argc, argv);
@@ -607,27 +720,27 @@ int main(int argc, char** argv)
 	 * INVOCATION_ID.
 	 */
 	if (getenv("INVOCATION_ID")) {
-		journal_logging=1;
-		foreground_mode=1;
+		journal_logging = 1;
+		foreground_mode = 1;
 	}
 
 	/*
- 	 * Open the syslog connection
- 	 */
+	 * Open the syslog connection
+	 */
 	openlog(argv[0], 0, LOG_DAEMON);
 
-	if (getenv("IRQBALANCE_ONESHOT")) 
-		one_shot_mode=1;
+	if (getenv("IRQBALANCE_ONESHOT"))
+		one_shot_mode = 1;
 
 	if (getenv("IRQBALANCE_DEBUG")) {
-		debug_mode=1;
-		foreground_mode=1;
+		debug_mode = 1;
+		foreground_mode = 1;
 	}
 
 	/*
- 	 * If we are't in debug mode, don't dump anything to the console
- 	 * note that everything goes to the console before we check this
- 	 */
+	 * If we aren't in debug mode, don't dump anything to the console
+	 * note that everything goes to the console before we check this
+	 */
 	if (journal_logging)
 		log_indent = "....";
 	else
@@ -638,8 +751,9 @@ int main(int argc, char** argv)
 
 	if (numa_available() > -1) {
 		numa_avail = 1;
-	} else 
+	} else {
 		log(TO_CONSOLE, LOG_INFO, "This machine seems not NUMA capable.\n");
+	}
 
 	if (geteuid() != 0)
 		log(TO_ALL, LOG_WARNING, "Irqbalance hasn't been executed under root privileges, thus it won't in fact balance interrupts.\n");
@@ -649,15 +763,15 @@ int main(int argc, char** argv)
 		log(TO_ALL, LOG_WARNING, "Unable to determine HZ defaulting to 100\n");
 		HZ = 100;
 	}
-	
+
 	if (!foreground_mode) {
 		int pidfd = -1;
-		if (daemon(0,0))
+		if (daemon(0, 0))
 			exit(EXIT_FAILURE);
 		/* Write pidfile which can be used to avoid starting multiple instances */
 		if (pidfile) {
 			pidfd = open(pidfile,
-				O_WRONLY | O_CREAT | O_EXCL | O_TRUNC,
+						 O_WRONLY | O_CREAT | O_EXCL | O_TRUNC,
 				S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);
 			if (pidfd >= 0) {
 				char str[16];
@@ -672,17 +786,15 @@ int main(int argc, char** argv)
 	if (debug_mode)
 		dump_object_tree();
 
-
 	/* On single core UP systems irqbalance obviously has no work to do */
 	if (num_online_cpus() <= 1) {
 		char *msg = "Balancing is ineffective on systems with a "
-			    "single cpu.  Shutting down\n";
+		"single cpu.  Shutting down\n";
 
 		log(TO_ALL, LOG_WARNING, "%s", msg);
 		goto out;
 	}
 
-
 	g_unix_signal_add(SIGINT, handler, NULL);
 	g_unix_signal_add(SIGTERM, handler, NULL);
 	g_unix_signal_add(SIGUSR1, handler, NULL);
@@ -690,12 +802,12 @@ int main(int argc, char** argv)
 	g_unix_signal_add(SIGHUP, force_rescan, NULL);
 	sigprocmask(SIG_SETMASK, &old_sigset, NULL);
 
-#ifdef HAVE_LIBCAP_NG
+	#ifdef HAVE_LIBCAP_NG
 	// Drop capabilities
 	capng_clear(CAPNG_SELECT_BOTH);
 	capng_lock();
 	capng_apply(CAPNG_SELECT_BOTH);
-#endif
+	#endif
 	for_each_irq(NULL, force_rebalance_irq, NULL);
 
 	parse_proc_interrupts();
@@ -703,12 +815,12 @@ int main(int argc, char** argv)
 
 	clear_slots();
 
-#ifdef HAVE_IRQBALANCEUI
+	#ifdef HAVE_IRQBALANCEUI
 	if (init_socket()) {
 		ret = EXIT_FAILURE;
 		goto out;
 	}
-#endif
+	#endif
 	if (init_thermal())
 		log(TO_ALL, LOG_WARNING, "Failed to initialize thermal events.\n");
 	main_loop = g_main_loop_new(NULL, FALSE);
@@ -718,7 +830,7 @@ int main(int argc, char** argv)
 
 	g_main_loop_quit(main_loop);
 
-out:
+	out:
 	deinit_thermal();
 	free_object_tree();
 	free_cl_opts();
@@ -727,12 +839,12 @@ out:
 	/* Remove pidfile */
 	if (!foreground_mode && pidfile)
 		unlink(pidfile);
-#ifdef HAVE_IRQBALANCEUI
+	#ifdef HAVE_IRQBALANCEUI
 	/* Remove socket */
 	if (socket_fd > 0)
 		close(socket_fd);
 	if (socket_name[0])
 		unlink(socket_name);
-#endif
+	#endif
 	return ret;
 }
