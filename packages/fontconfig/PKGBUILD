# Maintainer: Jan Alexander Steffens (heftig) <heftig@archlinux.org>
# Contributor: Jan de Groot <jgc@archlinux.org>

pkgname=fontconfig
pkgver=2.17.1
pkgrel=5.1
epoch=2
pkgdesc="Library for configuring and customizing font access"
url=https://www.freedesktop.org/wiki/Software/fontconfig/
arch=(x86_64)
license=('HPND AND Unicode-DFS-2016')
depends=(
  bash
  expat
  freetype2
  glibc
)
makedepends=(
  docbook-sgml
  docbook-utils
  git
  gperf
  meson
  perl-sgmls
  clang
  llvm
)
provides=(fontconfig-docs)
conflicts=(fontconfig-docs)
replaces=('fontconfig-docs<2:2.13.93-1')
backup=(etc/fonts/fonts.conf)
install=fontconfig.install
source=(
  "git+https://gitlab.freedesktop.org/fontconfig/fontconfig.git?signed#tag=$pkgver"
  40-fontconfig-config.script
  40-fontconfig-config.hook
  fontconfig.hook
)
b2sums=('2fbcf5b9df5d1d9c7ce2a02c7fe5d28631b2ad6ba56905b159dfd8a57224d10cb75e89ca4a1d5c9c07dc09949b384ced4e7fd6c8790aa196a2744ba8ca59c293'
        '7fb63e76ab126bc0a7decfd74c53429ad1ce6d13de2f14037259616d8d4150b8fa4601c7f02b75918ccd5995d424816dc9d01a5fe7e39dc3dd1fcc83dfdb0fe8'
        'b06b3f2b8c0c38139a9247c26a641e6dc01d50b530478dd14133175a603f60b0af901af16c9fcf1ce73d23786ea14bfdbacd39f1dcfd88f6382965ad22be1411'
        'dfbf47c069c88da7687511356cef5bb94b7190e558a6f08390d6976fa7065ba7137ccb0a5ca1defdef655091afe74eb8a3d33fb9f3e0633409aa79f753ad276d')
validpgpkeys=(
  F77A64C4B5B45FF8763A278F65755979B34E1294 # Akira TAGOH <akira@tagoh.org>
  ECFFBC3A6B365E721E5BD79830757AA21971A672 # Akira TAGOH <akira@tagoh.org>
)

# Comprehensive training workload to drive PGO without modifying system fonts
_training_workload() {
  local _builddir="$1"
  (
    set -e
    local _sysroot="${_builddir}/fc-sysroot"
    local _cachedir="${_sysroot}/var/cache/fontconfig"
    mkdir -p "${_cachedir}" "${_sysroot}/etc/fonts"
    # Use current system config if available (read-only copy)
    if [[ -f /etc/fonts/fonts.conf ]]; then
      install -m644 /etc/fonts/fonts.conf "${_sysroot}/etc/fonts/"
    fi
    for d in conf.d conf.avail; do
      [[ -d /etc/fonts/${d} ]] && cp -a "/etc/fonts/${d}" "${_sysroot}/etc/fonts/" || true
    done

    export FONTCONFIG_SYSROOT="${_sysroot}"
    export FONTCONFIG_CACHEDIR="${_cachedir}"
    export XDG_CACHE_HOME="${_sysroot}/.cache"
    export HOME="${_sysroot}"

    _fc() { find "${_builddir}" -type f -executable -name "$1" -print -quit; }
    local FC_CACHE=$(_fc fc-cache) FC_LIST=$(_fc fc-list) FC_MATCH=$(_fc fc-match)
    local FC_SCAN=$(_fc fc-scan) FC_QUERY=$(_fc fc-query) FC_PATTERN=$(_fc fc-pattern)

    [[ -z ${FC_CACHE} || -z ${FC_LIST} ]] && exit 0

    local font_dirs=()
    for dir in /usr/share/fonts/{TTF,OTF,Type1,truetype,opentype,cantarell,liberation,noto,adobe-source-code-pro,gsfonts}; do
      [[ -d "$dir" ]] && font_dirs+=("$dir")
    done

    [[ ${#font_dirs[@]} -gt 0 ]] && "${FC_CACHE}" -fsv "${font_dirs[@]}" || true

    local common_fonts=(
      "sans-serif" "serif" "monospace"
      "Arial" "Times New Roman" "Courier New"
      "DejaVu Sans" "Liberation Mono" "Noto Sans"
      "Cantarell" "FreeSans" "FreeMono"
    )

    for font in "${common_fonts[@]}"; do
      "${FC_MATCH}" "$font" >/dev/null 2>&1 || true
      "${FC_MATCH}" "$font:bold" >/dev/null 2>&1 || true
      "${FC_MATCH}" "$font:italic" >/dev/null 2>&1 || true
      "${FC_MATCH}" "$font:weight=200" >/dev/null 2>&1 || true
    done

    "${FC_LIST}" : family style | head -n 2000 >/dev/null 2>&1 || true
    "${FC_LIST}" : lang | sort -u >/dev/null 2>&1 || true

    if [[ -n ${FC_PATTERN} ]]; then
      for size in 8 9 10 11 12 14 16 18 20 24 32 48; do
        "${FC_PATTERN}" "Sans-$size" >/dev/null 2>&1 || true
        "${FC_PATTERN}" "Serif-$size:weight=bold" >/dev/null 2>&1 || true
      done
    fi

    if [[ -n ${FC_SCAN} && ${#font_dirs[@]} -gt 0 ]]; then
      find "${font_dirs[@]}" KATEX_INLINE_OPEN -name "*.ttf" -o -name "*.otf" KATEX_INLINE_CLOSE -type f 2>/dev/null | head -20 | xargs -r "${FC_SCAN}" >/dev/null 2>&1 || true
    fi
  ) || true
}

prepare() {
  cd fontconfig
}

build() {
  # Use LLVM/Clang for PGO; preserve user's flags; add PGO flags on top
  export CC=clang
  export CXX=clang++

  # Upstream meson options that do NOT change system font behavior
  local meson_options=(
    -D bitmap-conf=noinstall
    -D default-sub-pixel-rendering=noinstall
    -D doc-html=enabled
    -D doc-pdf=disabled
    -D doc-txt=disabled
  )

  # Stage 1: instrumented build (Clang IR-level PGO)
  local PGO_RAW_DIR="$srcdir/profraw"
  local PGO_DATA="$srcdir/pgo.profdata"
  rm -rf "$PGO_RAW_DIR" "$PGO_DATA"
  mkdir -p "$PGO_RAW_DIR"

  local CFLAGS_GEN="$CFLAGS -fprofile-generate"
  local CXXFLAGS_GEN="$CXXFLAGS -fprofile-generate"
  local LDFLAGS_GEN="$LDFLAGS -fprofile-generate"

  arch-meson fontconfig build-pgo-gen "${meson_options[@]}" \
    -D c_args="$CFLAGS_GEN" \
    -D cpp_args="$CXXFLAGS_GEN" \
    -D c_link_args="$LDFLAGS_GEN" \
    -D cpp_link_args="$LDFLAGS_GEN"

  LLVM_PROFILE_FILE="$PGO_RAW_DIR/%p-%m.profraw" meson compile -C build-pgo-gen
  # Non-fatal tests, they improve coverage
  LLVM_PROFILE_FILE="$PGO_RAW_DIR/%p-%m.profraw" meson test -C build-pgo-gen --print-errorlogs --no-rebuild --num-processes "$(nproc)" || true
  LLVM_PROFILE_FILE="$PGO_RAW_DIR/%p-%m.profraw" _training_workload "$srcdir/build-pgo-gen"

  if compgen -G "$PGO_RAW_DIR/*.profraw" >/dev/null; then
    llvm-profdata merge -use-md5 -compress-all-sections -o "$PGO_DATA" "$PGO_RAW_DIR"/*.profraw
  fi

  # Stage 2: PGO-use optimized build (final)
  local CFLAGS_USE="$CFLAGS"
  local CXXFLAGS_USE="$CXXFLAGS"
  local LDFLAGS_USE="$LDFLAGS"
  if [[ -f "$PGO_DATA" ]]; then
    CFLAGS_USE+=" -fprofile-use=$PGO_DATA"
    CXXFLAGS_USE+=" -fprofile-use=$PGO_DATA"
    LDFLAGS_USE+=" -fprofile-use=$PGO_DATA"
  fi

  arch-meson fontconfig build "${meson_options[@]}" \
    -D c_args="$CFLAGS_USE" \
    -D cpp_args="$CXXFLAGS_USE" \
    -D c_link_args="$LDFLAGS_USE" \
    -D cpp_link_args="$LDFLAGS_USE"

  meson compile -C build
}

check() {
  meson test -C build --print-errorlogs
}

package() {
  depends+=(
    libexpat.so
    libfreetype.so
  )
  provides+=(libfontconfig.so)

  meson install -C build --destdir "$pkgdir"

  # Handle conf.d using the hook to avoid overwriting or changing user-selected symlinks.
  # This exactly mirrors upstream behavior and prevents file conflicts and font changes.
  mkdir -p "$pkgdir/usr/share/fontconfig/conf.default"
  for _f in "$pkgdir"/etc/fonts/conf.d/*.conf; do
    [[ -e $_f ]] || continue
    ln -sr "$pkgdir"/usr/share/fontconfig/conf.{avail,default}/"${_f##*/}"
    rm "$_f"
  done

  install -Dm644 *.hook -t "$pkgdir/usr/share/libalpm/hooks"
  install -D 40-fontconfig-config.script \
    "$pkgdir/usr/share/libalpm/scripts/40-fontconfig-config"
  install -Dm644 fontconfig/COPYING -t "$pkgdir/usr/share/licenses/$pkgname"
}
