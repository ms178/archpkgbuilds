pkgname=fontconfig
pkgver=2.17.1
pkgrel=4.7
epoch=2
pkgdesc='Library for configuring and customizing font access'
url='https://www.freedesktop.org/wiki/Software/fontconfig/'
arch=(x86_64)
license=(custom)
depends=(expat freetype2)
makedepends=(
  docbook-sgml docbook-utils git gperf meson perl-sgmls llvm python-pytest-tap python-requests
)
provides=(fontconfig-docs libfontconfig.so libfontconfig.so=1-64)
conflicts=(fontconfig-docs)
replaces=('fontconfig-docs<2:2.13.93-1')
backup=(etc/fonts/fonts.conf)
install=fontconfig.install
options=(strip)

create_pytest_tap_stub() {
  local d="$srcdir/pytest_tap_stub/pytest_tap"
  mkdir -p "$d"
  cat >"$d/__init__.py" <<'PY'
from importlib import import_module as _im
plugin = _im(__name__ + ".plugin")
PY

  cat >"$d/plugin.py" <<'PY'
import sys, io, pytest

def pytest_addoption(parser):
    parser.addoption("--tap", action="store_true",
                     help="Emit TAP v13 (stub)")

def pytest_configure(config):
    if not config.getoption("--tap"):
        return
    # Remove ALL default reporters and output
    tr = config.pluginmanager.get_plugin("terminalreporter")
    if tr:
        config.pluginmanager.unregister(tr)
    # Disable capture and logging
    config.option.capture = "no"
    config.option.showcapture = "no"
    # Register our TAP reporter
    config.pluginmanager.register(_TAP(config), "tap_stub")

class _TAP:
    def __init__(self, cfg):
        self.count = 0
        self.results = []
        # Suppress all pytest output during collection and execution
        self._orig_stdout = sys.stdout
        self._orig_stderr = sys.stderr
        self._buffer = io.StringIO()
        sys.stdout = self._buffer
        sys.stderr = self._buffer

    def pytest_runtest_logreport(self, report):
        if report.when != "call":
            return
        self.count += 1
        name = report.nodeid.replace("::", ".")
        if report.skipped:
            line = f"ok {self.count} # SKIP {name}"
        elif report.passed:
            line = f"ok {self.count} {name}"
        else:
            line = f"not ok {self.count} {name}"
        self.results.append(line)

    def pytest_sessionfinish(self, session, exitstatus):
        # Restore stdout/stderr and write clean TAP output
        sys.stdout = self._orig_stdout
        sys.stderr = self._orig_stderr
        print("TAP version 13")
        for result in self.results:
            print(result)
        print(f"1..{self.count}")
        sys.stdout.flush()
PY
  export PYTHONPATH="$srcdir/pytest_tap_stub${PYTHONPATH:+:$PYTHONPATH}"
}

source=(
  "git+https://gitlab.freedesktop.org/fontconfig/fontconfig.git#tag=$pkgver"
  40-fontconfig-config.script
  40-fontconfig-config.hook
  fontconfig.hook
)
b2sums=('SKIP'
        '7fb63e76ab126bc0a7decfd74c53429ad1ce6d13de2f14037259616d8d4150b8fa4601c7f02b75918ccd5995d424816dc9d01a5fe7e39dc3dd1fcc83dfdb0fe8'
        'b06b3f2b8c0c38139a9247c26a641e6dc01d50b530478dd14133175a603f60b0af901af16c9fcf1ce73d23786ea14bfdbacd39f1dcfd88f6382965ad22be1411'
        'dfbf47c069c88da7687511356cef5bb94b7190e558a6f08390d6976fa7065ba7137ccb0a5ca1defdef655091afe74eb8a3d33fb9f3e0633409aa79f753ad276d')

_run_training_workload() {
  local _builddir="$1"
  echo "::  Running optimized training workload in ${_builddir}"

  (
    set -e

    # ---- private sysroot ----------------------------------------------------
    local _sysroot="${_builddir}/fc-sysroot"
    local _cachedir="${_sysroot}/var/cache/fontconfig"
    mkdir -p "${_cachedir}" "${_sysroot}/etc/fonts"

    if [[ -f /etc/fonts/fonts.conf ]]; then
      install -m644 /etc/fonts/fonts.conf "${_sysroot}/etc/fonts/"
    else
      install -m644 "${srcdir}/fontconfig/fonts.conf" "${_sysroot}/etc/fonts/"
    fi
    for d in conf.d conf.avail; do
      [[ -d /etc/fonts/${d} ]] && cp -a /etc/fonts/${d} "${_sysroot}/etc/fonts/"
    done

    export FONTCONFIG_SYSROOT="${_sysroot}"
    export FONTCONFIG_CACHEDIR="${_cachedir}"
    export XDG_CACHE_HOME="${_sysroot}/.cache"
    export HOME="${_sysroot}"

    _fc() { find "${_builddir}" -type f -executable -name "$1" -print -quit; }
    local FC_CACHE=$(_fc fc-cache)   FC_LIST=$(_fc fc-list)   FC_MATCH=$(_fc fc-match)
    local FC_SCAN=$(_fc fc-scan)     FC_QUERY=$(_fc fc-query) FC_PATTERN=$(_fc fc-pattern)

    [[ -z ${FC_CACHE} || -z ${FC_LIST} ]] && exit 0

    # Collect actual font directories
    local font_dirs=()
    for dir in /usr/share/fonts/{TTF,OTF,Type1,truetype,opentype,cantarell,liberation,noto}; do
        [[ -d "$dir" ]] && font_dirs+=("$dir")
    done

    # Build font cache for real directories
    [[ ${#font_dirs[@]} -gt 0 ]] && "${FC_CACHE}" -fsv "${font_dirs[@]}" || true

    # Common font queries that represent real usage patterns
    local common_fonts=(
        "sans-serif" "serif" "monospace"
        "Arial" "Times New Roman" "Courier New"
        "DejaVu Sans" "Liberation Mono" "Noto Sans"
        "Cantarell" "FreeSans" "FreeMono"
    )

    for font in "${common_fonts[@]}"; do
        "${FC_MATCH}" "$font" >/dev/null 2>&1 || true
        "${FC_MATCH}" "$font:bold" >/dev/null 2>&1 || true
        "${FC_MATCH}" "$font:italic" >/dev/null 2>&1 || true
        "${FC_MATCH}" "$font:weight=200" >/dev/null 2>&1 || true
    done

    # List operations (common in font management tools)
    "${FC_LIST}" : family style | head -n 2000 >/dev/null 2>&1 || true
    "${FC_LIST}" : lang | sort -u >/dev/null 2>&1 || true

    # Pattern matching for different sizes (common use case)
    if [[ -n ${FC_PATTERN} ]]; then
        for size in 8 9 10 11 12 14 16 18 20 24 32 48; do
            "${FC_PATTERN}" "Sans-$size" >/dev/null 2>&1 || true
            "${FC_PATTERN}" "Serif-$size:weight=bold" >/dev/null 2>&1 || true
        done
    fi

    # Scan some actual font files if they exist
    if [[ -n ${FC_SCAN} ]] && [[ ${#font_dirs[@]} -gt 0 ]]; then
        find "${font_dirs[@]}" -name "*.ttf" -o -name "*.otf" 2>/dev/null | \
            head -20 | xargs -r "${FC_SCAN}" >/dev/null 2>&1 || true
    fi
  ) || true
  return 0
}

prepare() {
  cd fontconfig
}

pkgver() {
  cd fontconfig
  git describe --tags | sed 's/[^-]*-g/r&/;s/-/+/g'
}

build() {
  create_pytest_tap_stub

  local meson_opts=(
    -D default-hinting=slight
    -D default-sub-pixel-rendering=rgb
    -D doc-html=disabled
    -D doc-pdf=disabled
    -D doc-txt=disabled
    -D b_lto=true
  )

  local _vp_flag="-Xclang -mllvm -Xclang -vp-counters-per-site=150"

  ########## Stage-1: Profile Generation #######################################
  mkdir -p "$srcdir/profraw.stage1"

  local pgo_gen_flags=(
    "-fprofile-generate=$srcdir/profraw.stage1"
    "${_vp_flag}"
    "-g3"
    "-fno-omit-frame-pointer"
  )

  arch-meson fontconfig build-stage1 "${meson_opts[@]}" \
      --buildtype=debug \
      -D b_ndebug=false \
      -D b_pie=false \
      -D c_std=gnu2x \
      -D cpp_std=gnu++2a \
      -D c_args="$CFLAGS ${pgo_gen_flags[*]}" \
      -D cpp_args="$CXXFLAGS ${pgo_gen_flags[*]}" \
      -D c_link_args="$LDFLAGS -fprofile-generate=$srcdir/profraw.stage1" \
      -D cpp_link_args="$LDFLAGS -fprofile-generate=$srcdir/profraw.stage1"

  meson compile -C build-stage1
  meson test -C build-stage1 --print-errorlogs --num-processes $(nproc)
  _run_training_workload "$srcdir/build-stage1"

  llvm-profdata merge -compress-all-sections \
      -output="$srcdir/stage1.profdata" "$srcdir/profraw.stage1"

  ########## Stage-2: CSLLVM Profile Generation ################################
  mkdir -p "$srcdir/profraw.stage2"

  local pgo_cs_flags=(
    "-fprofile-use=$srcdir/stage1.profdata"
    "-fcs-profile-generate=$srcdir/profraw.stage2"
    "${_vp_flag}"
    "-g3"
    "-fno-omit-frame-pointer"
  )

  arch-meson fontconfig build-stage2 "${meson_opts[@]}" \
      --buildtype=release \
      -D b_ndebug=false \
      -D b_pie=false \
      -D c_std=gnu2x \
      -D cpp_std=gnu++2a \
      -D c_args="$CFLAGS ${pgo_cs_flags[*]}" \
      -D cpp_args="$CXXFLAGS ${pgo_cs_flags[*]}" \
      -D c_link_args="$LDFLAGS -fprofile-use=$srcdir/stage1.profdata -fcs-profile-generate=$srcdir/profraw.stage2" \
      -D cpp_link_args="$LDFLAGS -fprofile-use=$srcdir/stage1.profdata -fcs-profile-generate=$srcdir/profraw.stage2"

  meson compile -C build-stage2
  meson test -C build-stage2 --print-errorlogs --num-processes $(nproc)
  _run_training_workload "$srcdir/build-stage2"

  llvm-profdata merge -compress-all-sections \
      -output="$srcdir/stage2.profdata" "$srcdir/profraw.stage2"

  llvm-profdata merge -compress-all-sections \
      -output="$srcdir/final.profdata" \
      "$srcdir/stage1.profdata" "$srcdir/stage2.profdata"

  ########## Stage-3: Final Optimized Build ####################################
  local final_flags=(
    "-fprofile-use=$srcdir/final.profdata"
    "-ffunction-sections"
    "-fdata-sections"
    "-fno-semantic-interposition"
  )

  local final_ldflags=(
    "-fprofile-use=$srcdir/final.profdata"
    "-Wl,--gc-sections"
    "-Wl,--as-needed"
  )

  arch-meson fontconfig build "${meson_opts[@]}" \
      --buildtype=release \
      -D b_ndebug=true \
      -D b_pie=false \
      -D c_std=gnu2x \
      -D cpp_std=gnu++2a \
      -D c_args="$CFLAGS ${final_flags[*]}" \
      -D cpp_args="$CXXFLAGS ${final_flags[*]}" \
      -D c_link_args="$LDFLAGS ${final_ldflags[*]}" \
      -D cpp_link_args="$LDFLAGS ${final_ldflags[*]}"

  meson compile -C build
}

check() {
  create_pytest_tap_stub
  meson test -C build --print-errorlogs --num-processes $(nproc)
}

package() {
  depends+=(libexpat.so libfreetype.so)
  provides+=(libfontconfig.so)

  meson install -C build --destdir "$pkgdir"

  # (Re-)create /etc/fonts/conf.d as relative symlinks
  local confd="$pkgdir/etc/fonts/conf.d"
  local avail="$pkgdir/usr/share/fontconfig/conf.avail"

  install -d "$confd"

  # Symlink every file shipped in conf.default
  while IFS= read -r -d '' cfg; do
    ln -sf "../../usr/share/fontconfig/conf.avail/$(basename "$cfg")" \
           "$confd/$(basename "$cfg")"
  done < <(find "$pkgdir/usr/share/fontconfig/conf.default" -name '*.conf' -print0)

  # Ensure Microsoft metric aliases are enabled
  if [[ -e "$avail/30-metric-aliases.conf" ]]; then
    ln -sf ../../usr/share/fontconfig/conf.avail/30-metric-aliases.conf \
          "$confd/30-metric-aliases.conf"
  fi

  # Ship reference copy for pacman hook
  install -d "$pkgdir/usr/share/fontconfig/conf.default"
  cp -a "$confd"/. "$pkgdir/usr/share/fontconfig/conf.default/"

  # ALPM hooks, helper script, license
  install -Dm644 *.hook -t "$pkgdir/usr/share/libalpm/hooks"
  install -Dm755 40-fontconfig-config.script \
                 "$pkgdir/usr/share/libalpm/scripts/40-fontconfig-config"
  install -Dm644 fontconfig/COPYING \
                 "$pkgdir/usr/share/licenses/$pkgname"

  # Do not ship cache
  rm -rf "$pkgdir/var/cache"
}
