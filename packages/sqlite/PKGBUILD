pkgbase="sqlite"
pkgname=('sqlite' 'sqlite-tcl')
_srcver=3500000
_docver=${_srcver}
pkgver=3.50.0
pkgrel=3.1
pkgdesc="A C library that implements an SQL database engine"
arch=('x86_64')
license=('LicenseRef-Sqlite')
url="https://www.sqlite.org/"
makedepends=('tcl' 'readline' 'zlib' 'gcc')
options=('!emptydirs')
source=(https://www.sqlite.org/2025/sqlite-src-${_srcver}.zip
        sqlite-lemon-system-template.patch
        license.txt
        git+https://github.com/ClickHouse/ClickBench.git
        https://datasets.clickhouse.com/hits_compatible/hits.csv.gz)
sha256sums=('2d7b032b6fdfe8c442aa809f850687a81d06381deecd7be3312601d28612e640'
            '3dc137fcd7c6acb326af60a61b9844dd15d3773cb05e7a9ce276c41f713d765a'
            '55746d93b0df4b349c4aa4f09535746dac3530f9fd6de241c9f38e2c92e8ee97'
            '4e57d9ac979f1c9872e69799c2597eeef4c6ce7224f3ede0bf9dc8d217b1e65d'
            'SKIP'
            '189c37a5f2020d20ef9ebc0b9d4cf2204fe78658bbab235f0313d41447410ddd')
options=('!lto')

prepare() {
  cd sqlite-src-$_srcver

  # patch taken from Fedora
  patch -Np1 -i ../sqlite-lemon-system-template.patch
}

pgo_profiler() {
  # preparing PGO data
  # using ClickHouse ClickBench scripts

  cd $ROOT_DIR
  mv hits.csv ClickBench/sqlite/hits.csv

  cd ClickBench/sqlite
  rm -rf mydb
  sed -i '/REGEXP_REPLACE/d' queries.sql
  $SQLITE_DIR/sqlite3 mydb <create.sql
  head -n 5000000 hits.csv >sample.csv
  $SQLITE_DIR/sqlite3 mydb '.import --csv sample.csv hits'
  wc -c mydb

  TRIES=3

  cat queries.sql | while read query; do
      sync

      echo "$query"
      for i in $(seq 1 $TRIES); do
          $SQLITE_DIR/sqlite3 mydb <<<"${query}"
      done
  done
}

build() {
  # this uses malloc_usable_size, which is incompatible with fortification level 3
  export CFLAGS="${CFLAGS/_FORTIFY_SOURCE=3/_FORTIFY_SOURCE=0}"
  export CXXFLAGS="${CXXFLAGS/_FORTIFY_SOURCE=3/_FORTIFY_SOURCE=0}"

  export CPPFLAGS="$CPPFLAGS \
        -DSQLITE_ENABLE_COLUMN_METADATA=1 \
        -DSQLITE_ENABLE_UNLOCK_NOTIFY \
        -DSQLITE_ENABLE_DBSTAT_VTAB=1 \
        -DSQLITE_ENABLE_FTS3_TOKENIZER=1 \
        -DSQLITE_ENABLE_FTS3_PARENTHESIS \
        -DSQLITE_SECURE_DELETE \
        -DSQLITE_ENABLE_STMTVTAB \
        -DSQLITE_ENABLE_STAT4 \
        -DSQLITE_MAX_VARIABLE_NUMBER=250000 \
        -DSQLITE_MAX_EXPR_DEPTH=10000 \
        -DSQLITE_ENABLE_MATH_FUNCTIONS"

  # define PGO_PROFILE_DIR to use a custom directory for the profile data
  export PGO_PROFILE_DIR="$PWD/pgo-data"
  mkdir -p "${PGO_PROFILE_DIR}"

  export AR=gcc-ar
  export CC=gcc
  export CXX=g++
  export NM=gcc-nm
  export RANLIB=gcc-ranlib

  # Raptor Lake specific optimizations
  RAPTOR_LAKE_FLAGS="-march=native -mtune=native -mprefer-vector-width=256"

  export ORIG_CFLAGS="${CFLAGS}"
  export ORIG_CXXFLAGS="${CXXFLAGS}"
  export ORIG_LDFLAGS="${LDFLAGS}"

  # First pass: generate profile data with Raptor Lake optimizations
  export CFLAGS="${CFLAGS} ${RAPTOR_LAKE_FLAGS} -fprofile-generate=${PGO_PROFILE_DIR} -fprofile-partial-training -fprofile-update=atomic"
  export CXXFLAGS="${CXXFLAGS} ${RAPTOR_LAKE_FLAGS} -fprofile-generate=${PGO_PROFILE_DIR} -fprofile-partial-training -fprofile-update=atomic"
  export LDFLAGS="${LDFLAGS} -fprofile-generate=${PGO_PROFILE_DIR}"

  # build sqlite
  cd sqlite-src-$_srcver
  ./configure --prefix=/usr \
    --disable-static \
    --fts4 \
    --fts5 \
    --rtree \
    --soname=legacy
    TCLLIBDIR=/usr/lib/tcl8.6
  sed -i -e 's/$(LDFLAGS.libsqlite3)/ -Wl,-O1,--as-needed \0/g' main.mk
  make

  export SQLITE_DIR="$PWD"
  cd ..
  export ROOT_DIR="$PWD"

  # run the profiler
  pgo_profiler

  cd "$SQLITE_DIR"

  # Second pass: use profile data with advanced PGO and Raptor Lake optimizations
  export CFLAGS="${ORIG_CFLAGS} ${RAPTOR_LAKE_FLAGS} \
    -fprofile-use=${PGO_PROFILE_DIR} \
    -fprofile-partial-training \
    -fprofile-correction \
    -flto=auto \
    -ffat-lto-objects \
    -fipa-pta \
    -fdevirtualize-at-ltrans \
    -fuse-linker-plugin \
    -fgraphite-identity \
    -floop-nest-optimize \
    -ftree-loop-distribution \
    -ftree-vectorize \
    -funroll-loops \
    -fvect-cost-model=cheap \
    -fsimd-cost-model=cheap"

  export CXXFLAGS="${ORIG_CXXFLAGS} ${RAPTOR_LAKE_FLAGS} \
    -fprofile-use=${PGO_PROFILE_DIR} \
    -fprofile-partial-training \
    -fprofile-correction \
    -flto=auto \
    -ffat-lto-objects \
    -fipa-pta \
    -fdevirtualize-at-ltrans \
    -fuse-linker-plugin \
    -fgraphite-identity \
    -floop-nest-optimize \
    -ftree-loop-distribution \
    -ftree-vectorize \
    -funroll-loops \
    -fvect-cost-model=cheap \
    -fsimd-cost-model=cheap"

  export LDFLAGS="${ORIG_LDFLAGS} -fprofile-use=${PGO_PROFILE_DIR} -flto=auto -Wl,-O3 -Wl,--gc-sections"

  make clean
  ./configure --prefix=/usr \
    --disable-static \
    --fts4 \
    --fts5 \
    --rtree \
    --soname=legacy
    TCLLIBDIR=/usr/lib/tcl8.6
  sed -i -e 's/$(LDFLAGS.libsqlite3)/ -Wl,-O1,--as-needed \0/g' main.mk

  make

  # build only essential additional tools
  make sqltclsh
}

package_sqlite() {

 pkgdesc="A C library that implements an SQL database engine"
 depends=('readline' 'zlib' 'glibc')
 provides=("sqlite3=$pkgver" 'libsqlite3.so')
 replaces=("sqlite3")

  cd sqlite-src-$_srcver
  make DESTDIR="${pkgdir}" install

  # install manpage
  install -m755 -d "${pkgdir}"/usr/share/man/man1
  install -m644 sqlite3.1 "${pkgdir}"/usr/share/man/man1/

  # license
  install -D -m644 "${srcdir}"/license.txt "${pkgdir}"/usr/share/licenses/${pkgname}/license.txt

  # split out tcl extension
  mkdir "$srcdir"/tcl
  mv "$pkgdir"/usr/lib/tcl8.6/sqlite* "$srcdir"/tcl
}

package_sqlite-tcl() {

 pkgdesc="sqlite Tcl Extension Architecture (TEA)"
 depends=('sqlite' 'tcl' 'glibc')
 provides=("sqlite3-tcl=$pkgver")
 replaces=("sqlite3-tcl")

  cd sqlite-src-$_srcver
  install -m755 -d "${pkgdir}"/usr/lib
  mv "$srcdir"/tcl/* "${pkgdir}"/usr/lib

  install -m755 -d "${pkgdir}"/usr/bin
  install -m755 sqltclsh "${pkgdir}"/usr/bin/

  # license
  install -D -m644 "${srcdir}"/license.txt "${pkgdir}"/usr/share/licenses/${pkgname}/license.txt
}
