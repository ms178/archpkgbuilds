pkgbase="sqlite"
pkgname=('sqlite')
_srcver=3490000
pkgver=3.49.0
pkgrel=4.8
pkgdesc="A C library that implements an SQL database engine"
arch=('x86_64')
license=('LicenseRef-Sqlite')
url="https://www.sqlite.org/"
makedepends=('tcl' 'readline' 'zlib' 'clang' 'llvm' 'llvm-libs' 'lld' 'pigz' 'curl')
options=('!emptydirs' '!strip' '!lto')
source=(https://www.sqlite.org/2025/sqlite-src-${_srcver}.zip
        sqlite-lemon-system-template.patch
        license.txt
        git+https://github.com/ClickHouse/ClickBench.git)
sha256sums=('2d7b032b6fdfe8c442aa809f850687a81d06381deecd7be3312601d28612e640'
            '3dc137fcd7c6acb326af60a61b9844dd15d3773cb05e7a9ce276c41f713d765a'
            '4e57d9ac979f1c9872e69799c2597eeef4c6ce7224f3ede0bf9dc8d217b1e65d'
            'SKIP')

prepare() {
  local cache_dir="$HOME/Downloads/sqlite/sqlite-dataset"
  mkdir -p "$cache_dir"
  local cached_gz_file="$cache_dir/hits.csv.gz"

  if [[ ! -f "$cached_gz_file" ]]; then
    echo "Downloading hits.csv.gz..."
    curl -L -o "$cached_gz_file" "https://datasets.clickhouse.com/hits_compatible/hits.csv.gz" || return 1
  fi

  local dataset_dir="$srcdir/dataset"
  mkdir -p "$dataset_dir"

  if [[ ! -f "$dataset_dir/hits.csv" ]]; then
    echo "Decompressing hits.csv.gz with pigz..."
    pigz -d -k -f -p "$(nproc)" "$cached_gz_file" -c > "$dataset_dir/hits.csv" || return 1
  fi

  if [[ ! -f "$dataset_dir/hits.csv" ]]; then
    echo "Dataset file not found after preparation"
    return 1
  fi

  cd sqlite-src-$_srcver || return 1
  patch -Np1 -i ../sqlite-lemon-system-template.patch
}

pgo_profiler() {
  local dataset_dir="$srcdir/dataset"

  cd "$ROOT_DIR" || return 1
  cp "$dataset_dir/hits.csv" ClickBench/sqlite/hits.csv || {
    echo "Failed to copy hits.csv dataset"
    return 1
  }

  cd ClickBench/sqlite || {
    echo "Failed to change to ClickBench/sqlite directory"
    return 1
  }

  rm -rf mydb
  sed -i '/REGEXP_REPLACE/d' queries.sql
  LLVM_PROFILE_FILE="${PGO_PROFILE_DIR}/prof.sqlite3.%m_%p.profraw" "$SQLITE_DIR/sqlite3" mydb <create.sql
  head -n 5000000 hits.csv >sample.csv
  LLVM_PROFILE_FILE="${PGO_PROFILE_DIR}/prof.sqlite3.%m_%p.profraw" "$SQLITE_DIR/sqlite3" mydb '.import --csv sample.csv hits'
  wc -c mydb

  TRIES=3

  cat queries.sql | while read query; do
      sync
      echo "$query"
      for i in $(seq 1 $TRIES); do
          LLVM_PROFILE_FILE="${PGO_PROFILE_DIR}/prof.sqlite3.%m_%p.profraw" "$SQLITE_DIR/sqlite3" mydb <<<"${query}"
      done
  done

  rm -f hits.csv sample.csv
}

bolt_profiler() {
  local dataset_dir="$srcdir/dataset"

  cd "$ROOT_DIR" || return 1
  cp "$dataset_dir/hits.csv" ClickBench/sqlite/hits.csv || {
    echo "Failed to copy hits.csv dataset"
    return 1
  }

  cd ClickBench/sqlite || {
    echo "Failed to change to ClickBench/sqlite directory"
    return 1
  }

  rm -rf mydb
  sed -i '/REGEXP_REPLACE/d' queries.sql
  LLVM_PROFILE_FILE="${BOLT_INSTRUMENT_DIR}/bolt.sqlite3.%m_%p.fdata" "$SQLITE_DIR/sqlite3" mydb <create.sql
  head -n 5000000 hits.csv >sample.csv
  LLVM_PROFILE_FILE="${BOLT_INSTRUMENT_DIR}/bolt.sqlite3.%m_%p.fdata" "$SQLITE_DIR/sqlite3" mydb '.import --csv sample.csv hits'
  wc -c mydb

  TRIES=3

  cat queries.sql | while read query; do
      sync
      echo "$query"
      for i in $(seq 1 $TRIES); do
          LLVM_PROFILE_FILE="${BOLT_INSTRUMENT_DIR}/bolt.sqlite3.%m_%p.fdata" "$SQLITE_DIR/sqlite3" mydb <<<"${query}"
      done
  done

  rm -f hits.csv sample.csv
}

build() {
  export CFLAGS="${CFLAGS/_FORTIFY_SOURCE=3/_FORTIFY_SOURCE=0}"
  export CXXFLAGS="${CXXFLAGS/_FORTIFY_SOURCE=3/_FORTIFY_SOURCE=0}"

  export CPPFLAGS="$CPPFLAGS \
        -DSQLITE_ENABLE_COLUMN_METADATA=1 \
        -DSQLITE_ENABLE_UNLOCK_NOTIFY \
        -DSQLITE_ENABLE_DBSTAT_VTAB=1 \
        -DSQLITE_ENABLE_FTS3_TOKENIZER=1 \
        -DSQLITE_ENABLE_FTS3_PARENTHESIS \
        -DSQLITE_SECURE_DELETE \
        -DSQLITE_ENABLE_STMTVTAB \
        -DSQLITE_ENABLE_STAT4 \
        -DSQLITE_MAX_VARIABLE_NUMBER=250000 \
        -DSQLITE_MAX_EXPR_DEPTH=10000 \
        -DSQLITE_ENABLE_MATH_FUNCTIONS"

  export PGO_PROFILE_DIR="$srcdir/pgo-data"
  mkdir -p "${PGO_PROFILE_DIR}"

  export AR=llvm-ar
  export CC=clang
  export CXX=clang++
  export NM=llvm-nm
  export RANLIB=llvm-ranlib

  export ORIG_CFLAGS="${CFLAGS}"
  export ORIG_CXXFLAGS="${CXXFLAGS}"
  export ORIG_LDFLAGS="${LDFLAGS}"

    # 1. Initial build (for PGO generation)
  export CFLAGS+=" -fprofile-generate -g3 -fno-omit-frame-pointer"
  export CXXFLAGS+=" -fprofile-generate -g3 -fno-omit-frame-pointer"
  export LDFLAGS+=" -fprofile-generate -g3 -fno-omit-frame-pointer"

  cd sqlite-src-$_srcver
  ./configure --prefix=/usr \
    --disable-static \
    --fts4 \
    --fts5 \
    --rtree \
    --soname=legacy
  sed -i -e 's/$(LDFLAGS.libsqlite3)/ -Wl,-O1,--as-needed \0/g' main.mk
  make -j$(nproc)

  # 2. First PGO profiling run
  export SQLITE_DIR="$PWD"
  cd ..
  export ROOT_DIR="$PWD"
  pgo_profiler || return 1

  # 3. Rebuild with PGO profile data
  cd "$SQLITE_DIR"
  llvm-profdata merge -output="${PGO_PROFILE_DIR}/merged.profdata" "${PGO_PROFILE_DIR}"/*.profraw

  export CFLAGS="${ORIG_CFLAGS} -fprofile-use=${PGO_PROFILE_DIR}/merged.profdata"
  export CXXFLAGS="${ORIG_CXXFLAGS} -fprofile-use=${PGO_PROFILE_DIR}/merged.profdata"
  export LDFLAGS="${ORIG_LDFLAGS} -fprofile-use=${PGO_PROFILE_DIR}/merged.profdata -Wl,--emit-relocs"

  make clean
  ./configure --prefix=/usr \
    --disable-static \
    --fts4 \
    --fts5 \
    --rtree \
    --soname=legacy
  sed -i -e 's/$(LDFLAGS.libsqlite3)/ -Wl,-O1,--as-needed \0/g' main.mk
  make -j$(nproc)

  # build additional tools (omit problematic ones)
  make -j$(nproc) dbdump dbhash dbtotxt index_usage scrub showdb showjournal showshm \
       showstat4 showwal sqldiff sqlite3_analyzer sqlite3_checker
       # Removed: sqltclsh, sqlite3_expert, sqlite3_rsync

  # 4. BOLT instrumentation and profiling
  echo "BOLT instrumenting..."
  export BOLT_INSTRUMENT_DIR="$srcdir/bolt-instr"
  mkdir -p "${BOLT_INSTRUMENT_DIR}"

  cp sqlite3 sqlite3.orig
  cp libsqlite3.so libsqlite3.so.orig

  llvm-bolt sqlite3 -o sqlite3.instrumented \
    -instrument \
    -instrumentation-file="${BOLT_INSTRUMENT_DIR}/bolt.sqlite3.fdata" \
    -instrumentation-file-append-pid

  llvm-bolt libsqlite3.so -o libsqlite3.so.instrumented \
    -instrument \
    -instrumentation-file="${BOLT_INSTRUMENT_DIR}/bolt.libsqlite3.fdata" \
    -instrumentation-file-append-pid

  mv sqlite3.instrumented sqlite3
  mv libsqlite3.so.instrumented libsqlite3.so

  export LD_LIBRARY_PATH="$PWD:$LD_LIBRARY_PATH"

  cd ..
  export ROOT_DIR="$PWD"
  bolt_profiler || return 1

  cd "$SQLITE_DIR"
  mv sqlite3.orig sqlite3
  mv libsqlite3.so.orig libsqlite3.so

  # Merge ONLY the sqlite3 profiles (combined data)
  merge-fdata -o "${BOLT_INSTRUMENT_DIR}/bolt.sqlite3.fdata.merged" "${BOLT_INSTRUMENT_DIR}/bolt.sqlite3.fdata"*

  # 5. BOLT optimization (use the SAME merged profile for BOTH)
  echo "BOLT optimizing sqlite3..."
  llvm-bolt sqlite3 -o sqlite3.bolt \
    -data="${BOLT_INSTRUMENT_DIR}/bolt.sqlite3.fdata.merged" \
    --dyno-stats \
    --cu-processing-batch-size=64 \
    --eliminate-unreachable \
    --frame-opt=all \
    --icf=all \
    --jump-tables=aggressive \
    --min-branch-clusters \
    --stoke \
    --sctc-mode=always \
    --plt=all \
    --hot-data \
    --hot-text \
    --frame-opt-rm-stores \
    --peepholes=all \
    --infer-stale-profile=1 \
    --x86-strip-redundant-address-size \
    --indirect-call-promotion=all \
    --reg-reassign \
    --use-aggr-reg-reassign \
    --reorder-blocks=ext-tsp \
    --reorder-functions=cdsort \
    --split-all-cold \
    --split-eh \
    --split-functions \
    --split-strategy=cdsplit

  echo "BOLT optimizing libsqlite3.so..."
  # Use the SAME merged data for libsqlite3.so
  llvm-bolt libsqlite3.so -o libsqlite3.so.bolt \
    -data="${BOLT_INSTRUMENT_DIR}/bolt.sqlite3.fdata.merged" \
    --dyno-stats \
    --cu-processing-batch-size=64 \
    --eliminate-unreachable \
    --frame-opt=all \
    --icf=all \
    --jump-tables=aggressive \
    --min-branch-clusters \
    --stoke \
    --sctc-mode=always \
    --plt=all \
    --hot-data \
    --hot-text \
    --frame-opt-rm-stores \
    --peepholes=all \
    --infer-stale-profile=1 \
    --x86-strip-redundant-address-size \
    --indirect-call-promotion=all \
    --reg-reassign \
    --use-aggr-reg-reassign \
    --reorder-blocks=ext-tsp \
    --reorder-functions=cdsort \
    --split-all-cold \
    --split-eh \
    --split-functions \
    --split-strategy=cdsplit

if [ ! -f "sqlite3.bolt" ] || [ ! -f "libsqlite3.so.bolt" ]; then
    echo "BOLT optimization failed"
    return 1
  fi

  mv sqlite3.bolt sqlite3
  mv libsqlite3.so.bolt libsqlite3.so

  if [ ! -f "sqlite3" ]; then
    echo "Error: sqlite3 binary not found after BOLT optimization."
    return 1
  fi

  if [ ! -f "libsqlite3.so" ]; then
    echo "Error: libsqlite3.so library not found after BOLT optimization."
    return 1
  fi

  if ! file sqlite3 | grep -q "ELF 64-bit LSB executable"; then
      echo "Error: sqlite3 is not a 64-bit ELF executable"
      return 1
  fi

  if ! file libsqlite3.so | grep -q "ELF 64-bit LSB shared object"; then
      echo "Error: libsqlite3.so is not a 64-bit ELF shared object"
      return 1
  fi

  rm -rf "${PGO_PROFILE_DIR}"
  rm -rf "${BOLT_INSTRUMENT_DIR}"
}

package_sqlite() {
  pkgdesc="A C library that implements an SQL database engine"
  depends=('readline' 'zlib' 'glibc')
  provides=("sqlite3=$pkgver" 'sqlite3')
  replaces=("sqlite3")

  cd sqlite-src-$_srcver
  make DESTDIR="${pkgdir}" install

  install -m755 -d "${pkgdir}"/usr/share/man/man1
  install -m644 sqlite3.1 "${pkgdir}"/usr/share/man/man1/

  find "$pkgdir" -type f \( -name '*.so*' -o -name '*.a' -o -executable \) -print0 | while IFS= read -r -d '' file; do
    if llvm-strip --strip-unneeded "$file" 2>/dev/null || llvm-strip --strip-all "$file" 2>/dev/null; then
      echo "Stripped: $file"
    else
      echo "Skipping: $file (not a valid object file)" >&2
    fi
  done

  install -D -m644 "${srcdir}"/license.txt "${pkgdir}"/usr/share/licenses/${pkgname}/license.txt
}
