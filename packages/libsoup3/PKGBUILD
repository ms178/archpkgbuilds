pkgbase=libsoup3
pkgname=(
  libsoup3
)
pkgver=3.6.4
pkgrel=3.1
pkgdesc="HTTP client/server library for GNOME"
url="https://wiki.gnome.org/Projects/libsoup"
arch=(x86_64)
license=(LGPL-2.0-or-later)
depends=(
  brotli
  glib-networking
  glib2
  glibc
  krb5
  libnghttp2
  libpsl
  libsysprof-capture
  sqlite
  zlib
)
makedepends=(
  gi-docgen
  git
  glib2-devel
  gobject-introspection
  meson
  vala
  llvm
)
checkdepends=(
  apache
  php-apache
)
options=(!strip)
source=("git+https://gitlab.gnome.org/GNOME/libsoup.git#tag=$pkgver")
b2sums=('6ade187a1ad53c36fc2824d1775242c21b85a751c6bbdd19877db722d3a317e99f30f5498c53e476536f6a0945b531a34de7c87ffae12740d38d9935adf63cac')

prepare() {
  cd libsoup
}

start_http_server() {
  # Check if port 8000 is already in use and kill the process if necessary
  echo "Checking for processes using port 8000..."
  PORT_PID=$(lsof -ti :8000 || true)
  if [ -n "$PORT_PID" ]; then
    echo "Port 8000 is in use by PID $PORT_PID. Killing the process..."
    kill -9 "$PORT_PID" 2>/dev/null || true
    sleep 2  # Allow time for the process to terminate
  fi

  # Start a lightweight HTTP server for testing
  echo "Starting lightweight HTTP server..."
  python3 -m http.server 8000 --bind 127.0.0.1 &
  HTTP_SERVER_PID=$!

  # Ensure the server is stopped after the workload
  trap "kill $HTTP_SERVER_PID 2>/dev/null || true" EXIT
  sleep 2  # Give the server time to start

  # Verify the server is running
  curl -s http://127.0.0.1:8000/ >/dev/null
  if [ $? -ne 0 ]; then
    echo "Error: HTTP server failed to start!"
    exit 1
  fi
  echo "HTTP server is running on port 8000."
}

build() {
  local meson_options=(
    -D autobahn=disabled
    -D docs=disabled
    -D doc_tests=false
  )

  # CachyOS Clang optimization flags
  CFLAGS="${CFLAGS}"
  CXXFLAGS="${CXXFLAGS}"
  LDFLAGS="${LDFLAGS}"

  # Create directory for PGO profiles
  mkdir -p "$srcdir/pgo"

  # Save the original working directory
  ORIGINAL_DIR=$(pwd)

  # Create a temporary directory for test files
  TEST_DIR="$srcdir/test_files"
  mkdir -p "$TEST_DIR"

  # Create placeholder files
  echo "Creating placeholder files for testing..."
  echo "Hello, World!" > "$TEST_DIR/test1"
  echo "Hello, World!" > "$TEST_DIR/test2"
  echo "Hello, World!" > "$TEST_DIR/test3"

  # Start the HTTP server in the test directory
  cd "$TEST_DIR"
  start_http_server

  # Restore the original working directory
  cd "$ORIGINAL_DIR"

  # Stage 1: Build with profiling enabled
  CFLAGS+=" -fprofile-generate=$srcdir/pgo -mllvm -vp-counters-per-site=10 -g3 -fno-omit-frame-pointer"
  CXXFLAGS+=" -fprofile-generate=$srcdir/pgo -mllvm -vp-counters-per-site=10 -g3 -fno-omit-frame-pointer"
  LDFLAGS+=" -fprofile-generate=$srcdir/pgo -mllvm -vp-counters-per-site=10 -g3 -fno-omit-frame-pointer"

  arch-meson libsoup build-stage1 "${meson_options[@]}" \
    --wrap-mode=nodownload \
    -D b_ndebug=false \
    -D b_pie=false \
    -D c_std=gnu18 \
    -D cpp_std=gnu++2a \
    --buildtype=debug \
    -D b_lto=true

  meson compile -C build-stage1

  # Run tests to generate profile data
  export MESON_TEST_TIMEOUT=300
  PYTHONUNBUFFERED=1 meson test -C build-stage1 --print-errorlogs

  # Enhanced workload for PGO
  echo "Running enhanced PGO workload..."
  ab -t 10 -c 50 http://127.0.0.1:8000/test1 > /dev/null || true
  ab -t 10 -c 50 http://127.0.0.1:8000/test2 > /dev/null || true
  ab -t 10 -c 50 http://127.0.0.1:8000/test3 > /dev/null || true

  # Allow final writes to complete
  sleep 2

  # Merge PGO profiles
  echo "Merging PGO profiles..."
  llvm-profdata merge -output="$srcdir/pgo/default.profdata" "$srcdir"/pgo/default*.profraw

  if [ ! -s "$srcdir/pgo/default.profdata" ]; then
    echo "Error: Merged profile data file is empty!"
    exit 1
  fi

  # Stage 2: Build with PGO data
  CFLAGS="${CFLAGS%% -fprofile-generate*} -fprofile-use=$srcdir/pgo/default.profdata"
  CXXFLAGS="${CXXFLAGS%% -fprofile-generate*} -fprofile-use=$srcdir/pgo/default.profdata"
  LDFLAGS="${LDFLAGS%% -fprofile-generate*} -fprofile-use=$srcdir/pgo/default.profdata -Wl,--emit-relocs"

  arch-meson libsoup build "${meson_options[@]}" \
    --wrap-mode=nodownload \
    -D b_ndebug=true \
    -D b_pie=false \
    -D c_std=gnu18 \
    -D cpp_std=gnu++2a \
    --buildtype=release \
    -D b_lto=true

  meson compile -C build
}

check() {
  cd "$srcdir"

  # Create directory for BOLT profile data
  mkdir -p "$srcdir/bolt_profile"

  # Save the original working directory
  ORIGINAL_DIR=$(pwd)

  # Create a temporary directory for test files
  TEST_DIR="$srcdir/test_files"
  mkdir -p "$TEST_DIR"

  # Create placeholder files
  echo "Creating placeholder files for testing..."
  echo "Hello, World!" > "$TEST_DIR/test1"
  echo "Hello, World!" > "$TEST_DIR/test2"
  echo "Hello, World!" > "$TEST_DIR/test3"

  # Start the HTTP server in the test directory
  cd "$TEST_DIR"
  start_http_server

  # Restore the original working directory
  cd "$ORIGINAL_DIR"

  echo "Creating instrumented test binaries..."
  # Save copies of original test binaries and instrument them
  for test_bin in "$srcdir"/build/tests/*-test; do
    if [ -x "$test_bin" ]; then
      cp "$test_bin" "$test_bin.orig"
      llvm-bolt "$test_bin" \
        --instrument \
        --lite=false \
        --instrumentation-file-append-pid \
        --instrumentation-file="$srcdir/bolt_profile/prof.fdata." \
        -o "$test_bin.inst"
      mv "$test_bin.inst" "$test_bin"
    fi
  done

  # Save a copy of the original library
  cp "$srcdir/build/libsoup/libsoup-3.0.so" "$srcdir/build/libsoup/libsoup-3.0.so.orig"

  # Ensure no Apache processes are running
  sudo systemctl stop httpd.service || true
  killall -9 httpd apache2 2>/dev/null || true
  sleep 2

  echo "Running tests with instrumented binaries..."
  # Run tests with instrumented binaries
  export MESON_TEST_TIMEOUT=300
  export LD_LIBRARY_PATH="$srcdir/build/libsoup:$LD_LIBRARY_PATH"
  export BOLT_USE_INSTRUMENTATION=1
  export BOLT_INSTRUMENT_FILE="$srcdir/bolt_profile/prof.fdata"

  PYTHONUNBUFFERED=1 meson test -C build --print-errorlogs || true

  # Enhanced workload for BOLT
  echo "Running enhanced BOLT workload..."
  ab -t 10 -c 50 http://127.0.0.1:8000/test1 > /dev/null || true
  ab -t 10 -c 50 http://127.0.0.1:8000/test2 > /dev/null || true
  ab -t 10 -c 50 http://127.0.0.1:8000/test3 > /dev/null || true

  # Allow final writes to complete
  sleep 2

  # Debug output
  echo "Looking for profile data files..."
  ls -la "$srcdir/bolt_profile/"

  # Check if profile data files exist
  if ! ls "$srcdir/bolt_profile/prof.fdata."* >/dev/null 2>&1; then
    echo "No profile data files found!"
    return 1
  fi

  echo "Merging profile data files..."
  # Merge BOLT profile data
  merge-fdata "$srcdir/bolt_profile/prof.fdata."* > "$srcdir/bolt_profile/merged.fdata"

  # Verify merged file size
  if [ ! -s "$srcdir/bolt_profile/merged.fdata" ]; then
    echo "Error: Merged profile data file is empty!"
    return 1
  fi

  # Create optimized binary directory
  mkdir -p "$srcdir/build/bolt"

  echo "Optimizing with BOLT..."
  # Optimize using BOLT with collected profile data
  llvm-bolt "$srcdir/build/libsoup/libsoup-3.0.so.orig" \
    --data "$srcdir/bolt_profile/merged.fdata" \
    --dyno-stats \
    --lite=false \
    --eliminate-unreachable \
    --frame-opt=all \
    --icf=all \
    --jump-tables=aggressive \
    --min-branch-clusters \
    --stoke \
    --sctc-mode=always \
    --plt=all \
    --hot-data \
    --hugify \
    --frame-opt-rm-stores \
    --peepholes=all \
    --infer-stale-profile=1 \
    --x86-strip-redundant-address-size \
    --indirect-call-promotion=all \
    --reorder-blocks=ext-tsp \
    --reorder-functions=cdsort \
    --split-all-cold \
    --split-eh \
    --split-functions \
    --redirect-never-taken-jumps \
    -o "$srcdir/build/bolt/libsoup-3.0.so.bolt" || {
      echo "Warning: BOLT optimization failed"
      return 0
    }
}

package_libsoup3() {
  depends+=(
    libbrotlidec.so
    libgssapi_krb5.so
    libg{lib,object,io}-2.0.so
    libpsl.so
  )
  optdepends=('samba: Windows Domain SSO')
  provides+=(libsoup-3.0.so)

  # Install all files normally
  meson install -C build --destdir "$pkgdir"

  # Replace the library with BOLT-optimized version if it exists
  if [ -f "$srcdir/build/bolt/libsoup-3.0.so.bolt" ]; then
    install -Dm755 "$srcdir/build/bolt/libsoup-3.0.so.bolt" "$pkgdir"/usr/lib/libsoup-3.0.so
  fi

  # Use llvm-strip only on recognized file formats
  find "$pkgdir" -type f \( -name '*.so*' -o -name '*.a' -o -executable \) -print0 | while IFS= read -r -d '' file; do
    if llvm-strip --strip-unneeded "$file" 2>/dev/null || llvm-strip --strip-all "$file" 2>/dev/null; then
      echo "Stripped: $file"
    else
      echo "Skipping: $file (not a valid object file)" >&2
    fi
  done
}

# vim:set sw=2 sts=-1 et:
