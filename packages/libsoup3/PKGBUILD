# Maintainer: CachyOS <contact@cachyos.org>
# Contributor: [Your Name]
#
# PKGBUILD Features:
# - Respects and extends user CFLAGS/CXXFLAGS/LDFLAGS from makepkg.conf.
# - Two-stage PGO build for Profile-Guided Optimizations.
# - BOLT post-link optimization with aggressive, fine-tuned flags.
# - Uses the --instrumentation-file flag to guarantee BOLT profile data location.
# - Ultra-reliable workload using Python's built-in http.server for PGO stage.
# - Streamlined BOLT profiling stage using only the upstream test suite for maximum reliability.

pkgbase=libsoup3
pkgname=(
  libsoup3
)
pkgver=3.6.5
pkgrel=2.1
pkgdesc="HTTP client/server library for GNOME"
url="https://wiki.gnome.org/Projects/libsoup"
arch=(x86_64)
license=(LGPL-2.0-or-later)
depends=(
  brotli
  glib-networking
  glib2
  krb5
  libnghttp2
  libpsl
  libsysprof-capture
  sqlite
)
makedepends=(
  gi-docgen
  git
  glib2-devel
  gobject-introspection
  llvm
  meson
  vala
)
checkdepends=()
optdepends=('samba: Windows Domain SSO')
options=(!strip)
source=("git+https://gitlab.gnome.org/GNOME/libsoup.git#tag=$pkgver")
sha256sums=('SKIP')

# Centralized function to set up the PGO workload environment
_setup_pgo_workload() {
  if lsof -ti :8999 -sTCP:LISTEN >/dev/null; then
    msg "PGO Workload: Port 8999 is in use, killing process..."
    kill -9 "$(lsof -ti :8999 -sTCP:LISTEN)" 2>/dev/null || true
    sleep 1
  fi

  _workload_dir="$srcdir/workload_data"
  mkdir -p "$_workload_dir"

  msg "PGO Workload: Creating files..."
  echo "This is a small test file for libsoup." > "$_workload_dir/small.txt"
  dd if=/dev/urandom of="$_workload_dir/large.bin" bs=1M count=10 &>/dev/null

  msg "PGO Workload: Starting robust, dependency-free server..."
  (cd "$_workload_dir" && python -m http.server 8999 --bind 127.0.0.1) &>/dev/null &
  HTTP_SERVER_PID=$!

  trap 'kill ${HTTP_SERVER_PID} &>/dev/null || true' EXIT

  for i in {1..10}; do
    curl -s --head http://127.0.0.1:8999/ >/dev/null && break
    sleep 0.5
  done

  if ! curl -s --head http://127.0.0.1:8999/ >/dev/null; then
    error "PGO workload HTTP server failed to start! This is unexpected."
    return 1
  fi
  msg "PGO Workload: Server is running."
}

# Centralized function to run the PGO workload
_run_pgo_workload() {
  local base_url="http://127.0.0.1:8999"
  msg "PGO Workload: Running custom stress tests..."

  curl -s "${base_url}/small.txt" -o /dev/null
  curl -s "${base_url}/large.bin" -o /dev/null
  curl -s "${base_url}/nonexistent.file" -o /dev/null
  ab -t 15 -c 50 "${base_url}/large.bin" &>/dev/null || true

  sleep 2
  msg "PGO Workload: Finished."
}

prepare() {
  cd libsoup
}

build() {
  local meson_options=(
    -D autobahn=disabled -D docs=disabled -D doc_tests=false
    -D b_pie=true --wrap-mode=nodownload -D b_lto=true
  )

  ### STAGE 1: Build with instrumentation
  msg "PGO: Starting Stage 1 (instrumented build)"
  local pgo_gen_flags=(
    "-fprofile-generate=$srcdir/pgo" -g3 -fno-omit-frame-pointer
    "-Xclang" "-mllvm" "-Xclang" "-enable-value-profiling"
    "-Xclang" "-mllvm" "-Xclang" "-vp-counters-per-site=150"
    "-Xclang" "-mllvm" "-Xclang" "-runtime-counter-relocation"
  )
  arch-meson libsoup build-instrumented "${meson_options[@]}" \
    --buildtype=debug -D b_ndebug=false \
    -Dc_args="${CFLAGS} ${pgo_gen_flags[*]}" -Dcpp_args="${CXXFLAGS} ${pgo_gen_flags[*]}" \
    -Dc_link_args="${LDFLAGS} ${pgo_gen_flags[*]}" -Dcpp_link_args="${LDFLAGS} ${pgo_gen_flags[*]}"
  meson compile -C build-instrumented

  ### PGO TRAINING
  msg "PGO: Running training workload..."
  _setup_pgo_workload
  export MESON_TEST_TIMEOUT=300
  PYTHONUNBUFFERED=1 meson test -C build-instrumented --print-errorlogs
  _run_pgo_workload
  trap - EXIT; kill ${HTTP_SERVER_PID} &>/dev/null || true

  ### MERGE PROFILES
  msg "PGO: Merging profile data..."
  llvm-profdata merge -output="$srcdir/pgo.profdata" "$srcdir"/pgo/default_*.profraw
  if [ ! -s "$srcdir/pgo.profdata" ]; then
    error "PGO profile data file is empty or missing! Aborting."
    return 1
  fi

  ### STAGE 2: Final build with PGO data
  msg "PGO: Starting Stage 2 (optimized build)"
  local pgo_use_cflags=("-fprofile-use=$srcdir/pgo.profdata")
  local pgo_use_ldflags=("-fprofile-use=$srcdir/pgo.profdata" "-Wl,--emit-relocs")
  arch-meson libsoup build "${meson_options[@]}" \
    --buildtype=release -D b_ndebug=true \
    -Dc_args="${CFLAGS} ${pgo_use_cflags[*]}" -Dcpp_args="${CXXFLAGS} ${pgo_use_cflags[*]}" \
    -Dc_link_args="${LDFLAGS} ${pgo_use_ldflags[*]}" -Dcpp_link_args="${LDFLAGS} ${pgo_use_ldflags[*]}"
  meson compile -C build
}

check() {
  local lib_path="build/libsoup/libsoup-3.0.so"
  local bolt_profile_dir="$srcdir/bolt_profile"
  mkdir -p "$bolt_profile_dir"

  ### BOLT INSTRUMENTATION
  msg "BOLT: Instrumenting the shared library..."
  cp "$srcdir/$lib_path" "$srcdir/${lib_path}.orig"

  # Use --instrumentation-file to bake the output path into the instrumented binary.
  # This is the definitive fix to ensure profile data is not written to /tmp.
  llvm-bolt "$srcdir/${lib_path}.orig" \
    -instrument \
    --instrumentation-file="$bolt_profile_dir/prof.fdata" \
    --instrumentation-file-append-pid \
    -o "$srcdir/$lib_path"

  ### BOLT TRAINING
  msg "BOLT: Running upstream test suite to generate profile data..."

  # Use `env` to forcefully set the environment for the test command and its children.
  # This ensures the instrumented library can find its dependencies.
  env \
    "LD_LIBRARY_PATH=$srcdir/build/libsoup:$LD_LIBRARY_PATH" \
    "PYTHONUNBUFFERED=1" \
    meson test -C build --print-errorlogs --timeout-multiplier 3 --no-suite flaky || true

  ### MERGE BOLT PROFILES
  msg "BOLT: Merging profile data..."
  local fdata_files=("$bolt_profile_dir"/prof.fdata.*)
  if [ ! -e "${fdata_files[0]}" ]; then
    warning "BOLT profile data not found! This indicates a problem with the workload. Skipping optimization."
    mv "$srcdir/${lib_path}.orig" "$srcdir/$lib_path"
    return 0
  fi
  merge-fdata "${fdata_files[@]}" > "$srcdir/bolt_merged.fdata"
  if [ ! -s "$srcdir/bolt_merged.fdata" ]; then
    error "Merged BOLT profile is empty! Skipping optimization."
    mv "$srcdir/${lib_path}.orig" "$srcdir/$lib_path"
    return 1
  fi

  ### BOLT OPTIMIZATION
  msg "BOLT: Applying optimizations with user-specified aggressive flags..."
  llvm-bolt "$srcdir/${lib_path}.orig" \
    -data="$srcdir/bolt_merged.fdata" \
    -o "$srcdir/$lib_path" \
    -reorder-blocks=ext-tsp -reorder-functions=cdsort \
    -split-functions -split-all-cold -split-eh \
    -icf=all -jump-tables=aggressive \
    -frame-opt=all -frame-opt-rm-stores \
    -peepholes=all -indirect-call-promotion=all \
    -eliminate-unreachable -lite=false \
    -hot-data -hugify -min-branch-clusters \
    -plt=all -sctc-mode=always -stoke \
    -infer-stale-profile=1 -x86-strip-redundant-address-size \
    -dyno-stats -update-debug-sections -use-gnu-stack || {
      warning "BOLT optimization failed. Using the PGO-optimized binary instead."
      mv "$srcdir/${lib_path}.orig" "$srcdir/$lib_path"
    }
}

package_libsoup3() {
  provides+=('libsoup-3.0.so')

  meson install -C build --destdir "$pkgdir"

  find "$pkgdir" -type f -executable -print0 | while IFS= read -r -d '' file; do
    if file -b "$file" | grep -q 'ELF'; then
      llvm-strip --strip-unneeded "$file" 2>/dev/null || true
    fi
  done
}
