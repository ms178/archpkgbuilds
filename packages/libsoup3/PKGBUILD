pkgbase=libsoup3
pkgname=(
  libsoup3
)
pkgver=3.6.4
pkgrel=2.1
pkgdesc="HTTP client/server library for GNOME"
url="https://wiki.gnome.org/Projects/libsoup"
arch=(x86_64)
license=(LGPL-2.0-or-later)
depends=(
  brotli
  glib-networking
  glib2
  glibc
  krb5
  libnghttp2
  libpsl
  libsysprof-capture
  sqlite
  zlib
)
makedepends=(
  gi-docgen
  git
  glib2-devel
  gobject-introspection
  meson
  python-quart
  samba
  vala
  gcc
  llvm
  perf
)
checkdepends=(
  apache
  php-apache
)
options=(!strip)
source=("git+https://gitlab.gnome.org/GNOME/libsoup.git#tag=$pkgver")
b2sums=('6ade187a1ad53c36fc2824d1775242c21b85a751c6bbdd19877db722d3a317e99f30f5498c53e476536f6a0945b531a34de7c87ffae12740d38d9935adf63cac')

prepare() {
  cd libsoup
}

build() {
  local meson_options=(
    -D autobahn=disabled
    -D docs=disabled
    -D doc_tests=false
  )

  # CachyOS Clang optimization flags
  CFLAGS="${CFLAGS}"
  CXXFLAGS="${CXXFLAGS}"
  LDFLAGS="${LDFLAGS}"

  # Create directory for PGO profiles
  mkdir -p "$srcdir/pgo"

  # Ensure no Apache processes are running
  sudo systemctl stop httpd.service || true
  killall -9 httpd apache2 2>/dev/null || true
  sleep 2

  # Stage 1: Build with profiling enabled
  CFLAGS+=" -fprofile-generate=$srcdir/pgo -mllvm -vp-counters-per-site=10 -g3 -fno-omit-frame-pointer"
  CXXFLAGS+=" -fprofile-generate=$srcdir/pgo -mllvm -vp-counters-per-site=10 -g3 -fno-omit-frame-pointer"
  LDFLAGS+=" -fprofile-generate=$srcdir/pgo -mllvm -vp-counters-per-site=10 -g3 -fno-omit-frame-pointer"

  arch-meson libsoup build-stage1 "${meson_options[@]}" \
    --wrap-mode=nodownload \
    -D b_ndebug=false \
    -D b_pie=false \
    -D c_std=gnu18 \
    -D cpp_std=gnu++2a \
    --buildtype=debug \
    -D b_lto=true

  meson compile -C build-stage1

  # Run tests to generate profile data
  export MESON_TEST_TIMEOUT=300
  PYTHONUNBUFFERED=1 meson test -C build-stage1 --print-errorlogs

  # Kill any remaining Apache processes
  sudo systemctl stop httpd.service || true
  killall -9 httpd apache2 2>/dev/null || true

  # Wait a moment for profile data to be written
  sleep 5

  # Merge PGO profiles
  echo "Merging PGO profiles..."
  llvm-profdata merge -output="$srcdir/pgo/default.profdata" "$srcdir"/pgo/default*.profraw

  # Stage 2: Build with PGO data
  CFLAGS="${CFLAGS%% -fprofile-generate*} -fprofile-use=$srcdir/pgo/default.profdata"
  CXXFLAGS="${CXXFLAGS%% -fprofile-generate*} -fprofile-use=$srcdir/pgo/default.profdata"
  LDFLAGS="${LDFLAGS%% -fprofile-generate*} -fprofile-use=$srcdir/pgo/default.profdata -Wl,--emit-relocs"

  arch-meson libsoup build "${meson_options[@]}" \
    --wrap-mode=nodownload \
    -D b_ndebug=true \
    -D b_pie=false \
    -D c_std=gnu18 \
    -D cpp_std=gnu++2a \
    --buildtype=release \
    -D b_lto=true

  meson compile -C build
}


check() {
  cd "$srcdir"

  # Create directory for BOLT profile data
  mkdir -p "$srcdir/bolt_profile"

  echo "Creating instrumented test binaries..."
  # Save copies of original test binaries and instrument them
  for test_bin in "$srcdir"/build/tests/*-test; do
    if [ -x "$test_bin" ]; then
      cp "$test_bin" "$test_bin.orig"
      llvm-bolt "$test_bin" \
        --instrument \
        --instrumentation-file-append-pid \
        --instrumentation-file="$srcdir/bolt_profile/prof.fdata." \
        --instrument-hot-only=false \
        --instrument-calls \
        -o "$test_bin.inst"
      mv "$test_bin.inst" "$test_bin"
    fi
  done

  # Save a copy of the original library
  cp "$srcdir/build/libsoup/libsoup-3.0.so" "$srcdir/build/libsoup/libsoup-3.0.so.orig"

  # Ensure no Apache processes are running
  sudo systemctl stop httpd.service || true
  killall -9 httpd apache2 2>/dev/null || true
  sleep 2

  echo "Running tests with instrumented binaries..."
  # Run tests with instrumented binaries
  export MESON_TEST_TIMEOUT=300
  export LD_LIBRARY_PATH="$srcdir/build/libsoup:$LD_LIBRARY_PATH"
  export BOLT_USE_INSTRUMENTATION=1
  export BOLT_INSTRUMENT_FILE="$srcdir/bolt_profile/prof.fdata"

  PYTHONUNBUFFERED=1 meson test -C build --print-errorlogs || true

  # Kill any remaining Apache processes
  sudo systemctl stop httpd.service || true
  killall -9 httpd apache2 2>/dev/null || true

  # Wait a moment for profile data to be written
  sleep 5

  # Debug output
  echo "Looking for profile data files..."
  ls -la "$srcdir/bolt_profile/"

  # More verbose debugging
  echo "Checking for test binaries..."
  ls -l "$srcdir"/build/tests/*-test
  echo "Checking for BOLT environment variables..."
  env | grep BOLT
  echo "Checking for profile data files..."
  find "$srcdir/bolt_profile" -type f -name "prof.fdata.*"

  # Check if profile data files exist
  if ! ls "$srcdir/bolt_profile/prof.fdata."* >/dev/null 2>&1; then
    echo "No profile data files found!"
    return 1
  fi

  echo "Merging profile data files..."
  # Merge BOLT profile data
  merge-fdata "$srcdir/bolt_profile/prof.fdata."* > "$srcdir/bolt_profile/merged.fdata"

  # Verify merged file size
  if [ ! -s "$srcdir/bolt_profile/merged.fdata" ]; then
    echo "Error: Merged profile data file is empty!"
    return 1
  fi

  # Create optimized binary directory
  mkdir -p "$srcdir/build/bolt"

  echo "Optimizing with BOLT..."
  # Optimize using BOLT with collected profile data
  llvm-bolt "$srcdir/build/libsoup/libsoup-3.0.so.orig" \
    --data "$srcdir/bolt_profile/merged.fdata" \
    --dyno-stats \
    --eliminate-unreachable \
    --frame-opt=all \
    --icf=all \
    --jump-tables=aggressive \
    --plt=all \
    --hot-data \
    --hot-text \
    --peepholes=all \
    --indirect-call-promotion=all \
    --reg-reassign \
    --reorder-blocks=ext-tsp \
    --reorder-functions=cdsort \
    --split-functions \
    --split-eh \
    -o "$srcdir/build/bolt/libsoup-3.0.so.bolt" || {
      echo "Warning: BOLT optimization failed"
      return 0
    }
}

package_libsoup3() {
  depends+=(
    libbrotlidec.so
    libgssapi_krb5.so
    libg{lib,object,io}-2.0.so
    libpsl.so
  )
  optdepends=('samba: Windows Domain SSO')
  provides+=(libsoup-3.0.so)

  # Install all files normally
  meson install -C build --destdir "$pkgdir"

  # Replace the library with BOLT-optimized version if it exists
  if [ -f "$srcdir/build/bolt/libsoup-3.0.so.bolt" ]; then
    install -Dm755 "$srcdir/build/bolt/libsoup-3.0.so.bolt" "$pkgdir"/usr/lib/libsoup-3.0.so
  fi

  # Use llvm-strip only on recognized file formats
  find "$pkgdir" -type f \( -name '*.so*' -o -name '*.a' -o -executable \) -print0 | while IFS= read -r -d '' file; do
    if llvm-strip --strip-unneeded "$file" 2>/dev/null || llvm-strip --strip-all "$file" 2>/dev/null; then
      echo "Stripped: $file"
    else
      echo "Skipping: $file (not a valid object file)" >&2
    fi
  done
}

# vim:set sw=2 sts=-1 et:
