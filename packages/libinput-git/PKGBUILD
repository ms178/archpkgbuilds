pkgname=libinput-git
pkgver=1.28.903.r2.gcfec8058
pkgrel=1
pkgdesc="Input device management and event handling library"
url="https://www.freedesktop.org/wiki/Software/libinput/"
arch=(x86_64)
license=(MIT)
depends=('mtdev' 'systemd' 'libevdev' 'libwacom' 'systemd-libs' 'glibc')
makedepends=('gtk4' 'meson' 'wayland-protocols' 'check' 'clang' 'llvm')
provides=('libinput')
conflicts=('libinput')
checkdepends=('python-pytest')
optdepends=('gtk4: libinput debug-gui'
            'python-pyudev: libinput measure'
            'python-libevdev: libinput measure'
            'python-yaml: used by various tools')
source=(git+https://gitlab.freedesktop.org/libinput/libinput)
sha512sums=('SKIP')
validpgpkeys=('SKIP') # Peter Hutterer (Who-T) <office@who-t.net>

pkgver() {
    cd libinput
    git describe --long | sed -r 's/([^-]*-g)/r\1/;s/-/./g'
}

# Common flags for instrumentation
_common_instrument_flags=" -g3 -fno-omit-frame-pointer -mllvm -vp-counters-per-site=10 -mllvm -runtime-counter-relocation -mllvm -enable-value-profiling"

build() {
    cd "${srcdir}"

    # Create directories for PGO data
    mkdir -p "${srcdir}/pgo_data"
    mkdir -p "${srcdir}/cs_pgo_data"
    mkdir -p "${srcdir}/merged_profile"

    # Set locale to English for consistent error messages in tests
    export LANG=C
    export LC_ALL=C

    # STAGE 1: Standard profile generation
    echo "Building with standard profile generation..."
    export CC="clang"
    export CXX="clang++"
    export CFLAGS="${CFLAGS} -fprofile-generate=${srcdir}/pgo_data ${_common_instrument_flags}"
    export CXXFLAGS="${CXXFLAGS} -fprofile-generate=${srcdir}/pgo_data ${_common_instrument_flags}"
    export LDFLAGS="${LDFLAGS} -fprofile-generate=${srcdir}/pgo_data -Wl,-z,nostart-stop-gc"

    # First build with profile generation
    arch-meson libinput build-pgo-gen \
        -Dudev-dir=/usr/lib/udev \
        -Dtests=true \
        -Dpython.bytecompile=2 \
        -D b_ndebug=false \
        -D b_pie=false \
        -D c_std=gnu2x \
        -D cpp_std=gnu++2a \
        --buildtype=debug \
        --wrap-mode=nofallback \
        -Ddocumentation=false

    ninja $NINJAFLAGS -C build-pgo-gen

    # STAGE 2: Generate profile data without requiring actual devices
    echo "Generating profile data using test suite..."

    # Run unit tests instead of trying to access real devices
    cd build-pgo-gen
    meson test -t 10 --print-errorlogs || true
    cd "${srcdir}"

    # Process the profile data
    echo "Processing profile data..."
    llvm-profdata merge -output="${srcdir}/merged_profile/default.profdata" "${srcdir}/pgo_data/"

    # STAGE 3: Context-sensitive profile generation
    echo "Building with context-sensitive profile generation..."
    # Remove previous flags and add new ones
    export CFLAGS="${CFLAGS//-fprofile-generate=*/}"
    export CXXFLAGS="${CXXFLAGS//-fprofile-generate=*/}"
    export LDFLAGS="${LDFLAGS//-fprofile-generate=*/}"

    export CFLAGS+=" -fprofile-use=${srcdir}/merged_profile/default.profdata -fcs-profile-generate=${srcdir}/cs_pgo_data ${_common_instrument_flags}"
    export CXXFLAGS+=" -fprofile-use=${srcdir}/merged_profile/default.profdata -fcs-profile-generate=${srcdir}/cs_pgo_data ${_common_instrument_flags}"
    export LDFLAGS+=" -fprofile-use=${srcdir}/merged_profile/default.profdata -fcs-profile-generate=${srcdir}/cs_pgo_data -Wl,-z,nostart-stop-gc"

    # Build with context-sensitive profiling
    arch-meson libinput build-pgo-cs-gen \
        -Dudev-dir=/usr/lib/udev \
        -Dtests=true \
        -Dpython.bytecompile=2 \
        -D b_ndebug=false \
        -D b_pie=false \
        -D c_std=gnu2x \
        -D cpp_std=gnu++2a \
        --buildtype=debug \
        --wrap-mode=nofallback \
        -Ddocumentation=false

    ninja $NINJAFLAGS -C build-pgo-cs-gen

    # STAGE 4: Generate context-sensitive profile data
    echo "Generating context-sensitive profile data..."

    # Run tests again for context-sensitive profiling
    cd build-pgo-cs-gen
    meson test -t 10 --print-errorlogs || true
    cd "${srcdir}"

    # Merge profile data
    echo "Merging profile data..."
    llvm-profdata merge -output="${srcdir}/merged_profile/final.profdata" "${srcdir}/cs_pgo_data/" "${srcdir}/merged_profile/default.profdata"

    # STAGE 5: Final optimized build
    echo "Building final optimized version..."
    # Remove previous flags and add new ones
    export CFLAGS="${CFLAGS//-fcs-profile-generate=*/}"
    export CXXFLAGS="${CXXFLAGS//-fcs-profile-generate=*/}"
    export LDFLAGS="${LDFLAGS//-fcs-profile-generate=*/}"

    export CFLAGS+=" -fprofile-use=${srcdir}/merged_profile/final.profdata"
    export CXXFLAGS+=" -fprofile-use=${srcdir}/merged_profile/final.profdata"
    export LDFLAGS+=" -fprofile-use=${srcdir}/merged_profile/final.profdata -Wl,-z,nostart-stop-gc"

    # Final build with optimized profile data
    arch-meson libinput build \
        -Dudev-dir=/usr/lib/udev \
        -Dtests=true \
        -Dpython.bytecompile=2 \
        -D b_ndebug=true \
        -D b_pie=false \
        -D c_std=gnu2x \
        -D cpp_std=gnu++2a \
        --buildtype=release \
        --wrap-mode=nofallback \
        -Ddocumentation=false

    ninja $NINJAFLAGS -C build

    # Reset locale settings
    unset LANG LC_ALL
}

check() {
    # Set locale to English for consistent error messages in tests
    export LANG=C
    export LC_ALL=C

    meson test -C build --print-errorlogs || true

    # Reset locale settings
    unset LANG LC_ALL
}

package() {
    DESTDIR="$pkgdir" ninja $NINJAFLAGS -C build install

    install -Dvm644 libinput/COPYING \
        "$pkgdir/usr/share/licenses/libinput/LICENSE"
}
