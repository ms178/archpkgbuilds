pkgname=libinput-git
pkgver=1.28.903.r2.gcfec8058
pkgrel=1
pkgdesc="Input device management and event handling library"
url="https://www.freedesktop.org/wiki/Software/libinput/"
arch=(x86_64)
license=(MIT)
depends=('mtdev' 'systemd' 'libevdev' 'libwacom' 'systemd-libs' 'glibc')
makedepends=('gtk4' 'meson' 'wayland-protocols' 'check' 'clang' 'llvm')
provides=('libinput')
conflicts=('libinput')
checkdepends=('python-pytest')
optdepends=('gtk4: libinput debug-gui'
            'python-pyudev: libinput measure'
            'python-libevdev: libinput measure'
            'python-yaml: used by various tools')
source=(git+https://gitlab.freedesktop.org/libinput/libinput)
sha512sums=('SKIP')
validpgpkeys=('SKIP')

pkgver() {
    cd libinput
    git describe --long | sed -r 's/([^-]*-g)/r\1/;s/-/./g'
}

build() {
    # Common flags for instrumentation, optimized for maximum profile data.
    local _common_instrument_flags="-g3 -fno-omit-frame-pointer -mllvm -vp-counters-per-site=150 -mllvm -runtime-counter-relocation -mllvm -enable-value-profiling"

    # Define and create explicit directories for all profile data
    local std_pgo_dir="${srcdir}/pgo_data"
    local cs_pgo_dir="${srcdir}/cs_pgo_data"
    local merged_profile_dir="${srcdir}/merged_profile"
    mkdir -p "${std_pgo_dir}" "${cs_pgo_dir}" "${merged_profile_dir}"

    # Set locale to English for consistent error messages in tests
    export LANG=C
    export LC_ALL=C

    # Set compilers
    export CC="clang"
    export CXX="clang++"

    # STAGE 1: Standard profile generation with manual flags
    echo "Building with standard profile generation..."
    arch-meson libinput build-pgo-gen \
        --buildtype=debug \
        -D b_lto=true \
        -D b_pie=false \
        -D b_ndebug=false \
        -D c_args="${CFLAGS} -fprofile-generate=${std_pgo_dir} ${_common_instrument_flags}" \
        -D cpp_args="${CXXFLAGS} -fprofile-generate=${std_pgo_dir} ${_common_instrument_flags}" \
        -D c_link_args="${LDFLAGS} -fprofile-generate=${std_pgo_dir} -Wl,-z,nostart-stop-gc" \
        -D cpp_link_args="${LDFLAGS} -fprofile-generate=${std_pgo_dir} -Wl,-z,nostart-stop-gc" \
        -D udev-dir=/usr/lib/udev \
        -D tests=true \
        -D python.bytecompile=2 \
        -D c_std=gnu2x \
        -D cpp_std=gnu++2a \
        --wrap-mode=nofallback \
        -D documentation=false

    ninja $NINJAFLAGS -C build-pgo-gen

    # STAGE 2: Generate profile data using the test suite
    echo "Generating profile data using test suite..."
    meson test -C build-pgo-gen -t 10 --print-errorlogs || true

    # STAGE 3: Process the standard PGO profile data
    echo "Processing standard profile data..."
    llvm-profdata merge -output="${merged_profile_dir}/default.profdata" "${std_pgo_dir}"

    # STAGE 4: Build with context-sensitive profile generation
    echo "Building with context-sensitive profile generation..."
    arch-meson libinput build-pgo-cs-gen \
        --buildtype=debug \
        -D b_lto=true \
        -D b_pie=false \
        -D b_ndebug=false \
        -D c_args="${CFLAGS} -fprofile-use=${merged_profile_dir}/default.profdata -fcs-profile-generate=${cs_pgo_dir} ${_common_instrument_flags}" \
        -D cpp_args="${CXXFLAGS} -fprofile-use=${merged_profile_dir}/default.profdata -fcs-profile-generate=${cs_pgo_dir} ${_common_instrument_flags}" \
        -D c_link_args="${LDFLAGS} -fprofile-use=${merged_profile_dir}/default.profdata -fcs-profile-generate=${cs_pgo_dir} -Wl,-z,nostart-stop-gc" \
        -D cpp_link_args="${LDFLAGS} -fprofile-use=${merged_profile_dir}/default.profdata -fcs-profile-generate=${cs_pgo_dir} -Wl,-z,nostart-stop-gc" \
        -D udev-dir=/usr/lib/udev \
        -D tests=true \
        -D python.bytecompile=2 \
        -D c_std=gnu2x \
        -D cpp_std=gnu++2a \
        --wrap-mode=nofallback \
        -D documentation=false

    ninja $NINJAFLAGS -C build-pgo-cs-gen

    # STAGE 5: Generate context-sensitive profile data
    echo "Generating context-sensitive profile data..."
    meson test -C build-pgo-cs-gen -t 10 --print-errorlogs || true

    # STAGE 6: Merge all profile data for the final build
    echo "Merging all profile data..."
    llvm-profdata merge -output="${merged_profile_dir}/final.profdata" "${cs_pgo_dir}" "${merged_profile_dir}/default.profdata"

    # STAGE 7: Final optimized build using the complete PGO dataset
    echo "Building final optimized version..."
    arch-meson libinput build \
        --buildtype=release \
        -D b_lto=true \
        -D b_pie=false \
        -D b_ndebug=true \
        -D c_args="${CFLAGS} -fprofile-use=${merged_profile_dir}/final.profdata" \
        -D cpp_args="${CXXFLAGS} -fprofile-use=${merged_profile_dir}/final.profdata" \
        -D c_link_args="${LDFLAGS} -fprofile-use=${merged_profile_dir}/final.profdata -Wl,-z,nostart-stop-gc" \
        -D cpp_link_args="${LDFLAGS} -fprofile-use=${merged_profile_dir}/final.profdata -Wl,-z,nostart-stop-gc" \
        -D udev-dir=/usr/lib/udev \
        -D tests=false \
        -D python.bytecompile=2 \
        -D c_std=gnu2x \
        -D cpp_std=gnu++2a \
        --wrap-mode=nofallback \
        -D documentation=false

    ninja $NINJAFLAGS -C build

    # Reset locale settings
    unset LANG LC_ALL
}

check() {
    # Set locale to English for consistent error messages in tests
    export LANG=C
    export LC_ALL=C

    meson test -C build --print-errorlogs || true

    # Reset locale settings
    unset LANG LC_ALL
}

package() {
    DESTDIR="$pkgdir" ninja $NINJAFLAGS -C build install

    install -Dvm644 libinput/COPYING \
        "$pkgdir/usr/share/licenses/libinput/LICENSE"
}
