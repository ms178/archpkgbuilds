From 5f5a2dad33eeb1ab28bb7593c4f06949a63363f3 Mon Sep 17 00:00:00 2001
From: Kenneth Graunke <kenneth@whitecape.org>
Date: Mon, 2 May 2022 12:06:38 -0700
Subject: [PATCH 1/4] mesa: Split tx_compress_dxtn into per-format functions

This avoids an unnecessary switch statement in many cases.
---
 src/mesa/main/texcompress_s3tc.c     |  16 +--
 src/mesa/main/texcompress_s3tc_tmp.h | 186 +++++++++++++++++----------
 2 files changed, 119 insertions(+), 83 deletions(-)

diff --git a/src/mesa/main/texcompress_s3tc.c b/src/mesa/main/texcompress_s3tc.c
index 06546a2a5906..c16e6e93da77 100644
--- a/src/mesa/main/texcompress_s3tc.c
+++ b/src/mesa/main/texcompress_s3tc.c
@@ -84,9 +84,7 @@ _mesa_texstore_rgb_dxt1(TEXSTORE_PARAMS)
 
    dst = dstSlices[0];
 
-   tx_compress_dxtn(3, srcWidth, srcHeight, pixels,
-                    GL_COMPRESSED_RGB_S3TC_DXT1_EXT,
-                    dst, dstRowStride);
+   tx_compress_dxt1(3, srcWidth, srcHeight, pixels, dst, dstRowStride, 3);
 
    free((void *) tempImage);
 
@@ -140,9 +138,7 @@ _mesa_texstore_rgba_dxt1(TEXSTORE_PARAMS)
 
    dst = dstSlices[0];
 
-   tx_compress_dxtn(4, srcWidth, srcHeight, pixels,
-                    GL_COMPRESSED_RGBA_S3TC_DXT1_EXT,
-                    dst, dstRowStride);
+   tx_compress_dxt1(4, srcWidth, srcHeight, pixels, dst, dstRowStride, 4);
 
    free((void*) tempImage);
 
@@ -195,9 +191,7 @@ _mesa_texstore_rgba_dxt3(TEXSTORE_PARAMS)
 
    dst = dstSlices[0];
 
-   tx_compress_dxtn(4, srcWidth, srcHeight, pixels,
-                    GL_COMPRESSED_RGBA_S3TC_DXT3_EXT,
-                    dst, dstRowStride);
+   tx_compress_dxt3(4, srcWidth, srcHeight, pixels, dst, dstRowStride);
 
    free((void *) tempImage);
 
@@ -250,9 +244,7 @@ _mesa_texstore_rgba_dxt5(TEXSTORE_PARAMS)
 
    dst = dstSlices[0];
 
-   tx_compress_dxtn(4, srcWidth, srcHeight, pixels,
-                    GL_COMPRESSED_RGBA_S3TC_DXT5_EXT,
-                    dst, dstRowStride);
+   tx_compress_dxt5(4, srcWidth, srcHeight, pixels, dst, dstRowStride);
 
    free((void *) tempImage);
 
diff --git a/src/mesa/main/texcompress_s3tc_tmp.h b/src/mesa/main/texcompress_s3tc_tmp.h
index 5dd25222f15a..5c2c0ef7fc4f 100644
--- a/src/mesa/main/texcompress_s3tc_tmp.h
+++ b/src/mesa/main/texcompress_s3tc_tmp.h
@@ -906,88 +906,132 @@ static void extractsrccolors( GLubyte srcpixels[4][4][4], const GLchan *srcaddr,
 }
 
 
-static void tx_compress_dxtn(GLint srccomps, GLint width, GLint height, const GLubyte *srcPixData,
-                     GLenum destFormat, GLubyte *dest, GLint dstRowStride)
+static void
+tx_compress_dxt1(int srccomps, int width, int height,
+                 const GLubyte *srcPixData, GLubyte *dest, int dstRowStride,
+                 unsigned dstComps)
 {
-      GLubyte *blkaddr = dest;
-      GLubyte srcpixels[4][4][4];
-      const GLchan *srcaddr = srcPixData;
-      GLint numxpixels, numypixels;
-      GLint i, j;
-      GLint dstRowDiff;
+   GLenum destFormat = dstComps == 3 ? GL_COMPRESSED_RGB_S3TC_DXT1_EXT
+                                     : GL_COMPRESSED_RGBA_S3TC_DXT1_EXT;
+   GLubyte *blkaddr = dest;
+   GLubyte srcpixels[4][4][4];
+   const GLchan *srcaddr = srcPixData;
+   int numxpixels, numypixels;
+
+   /* hmm we used to get called without dstRowStride... */
+   int dstRowDiff = dstRowStride >= (width * 2) ?
+                    dstRowStride - (((width + 3) & ~3) * 2) : 0;
+   /* fprintf(stderr, "dxt1 tex width %d tex height %d dstRowStride %d\n",
+              width, height, dstRowStride); */
+   for (int j = 0; j < height; j += 4) {
+      if (height > j + 3) numypixels = 4;
+      else numypixels = height - j;
+      srcaddr = srcPixData + j * width * srccomps;
+      for (int i = 0; i < width; i += 4) {
+         if (width > i + 3) numxpixels = 4;
+         else numxpixels = width - i;
+         extractsrccolors(srcpixels, srcaddr, width, numxpixels, numypixels, srccomps);
+         encodedxtcolorblockfaster(blkaddr, srcpixels, numxpixels, numypixels, destFormat);
+         srcaddr += srccomps * numxpixels;
+         blkaddr += 8;
+      }
+      blkaddr += dstRowDiff;
+   }
+}
 
+static void
+tx_compress_dxt3(int srccomps, int width, int height,
+                 const GLubyte *srcPixData, GLubyte *dest, int dstRowStride)
+{
+   GLenum destFormat = GL_COMPRESSED_RGBA_S3TC_DXT3_EXT;
+   GLubyte *blkaddr = dest;
+   GLubyte srcpixels[4][4][4];
+   const GLchan *srcaddr = srcPixData;
+   int numxpixels, numypixels;
+
+   int dstRowDiff = dstRowStride >= (width * 4) ?
+                    dstRowStride - (((width + 3) & ~3) * 4) : 0;
+   /* fprintf(stderr, "dxt3 tex width %d tex height %d dstRowStride %d\n",
+              width, height, dstRowStride); */
+   for (int j = 0; j < height; j += 4) {
+      if (height > j + 3) numypixels = 4;
+      else numypixels = height - j;
+      srcaddr = srcPixData + j * width * srccomps;
+      for (int i = 0; i < width; i += 4) {
+         if (width > i + 3) numxpixels = 4;
+         else numxpixels = width - i;
+         extractsrccolors(srcpixels, srcaddr, width, numxpixels, numypixels, srccomps);
+         *blkaddr++ = (srcpixels[0][0][3] >> 4) | (srcpixels[0][1][3] & 0xf0);
+         *blkaddr++ = (srcpixels[0][2][3] >> 4) | (srcpixels[0][3][3] & 0xf0);
+         *blkaddr++ = (srcpixels[1][0][3] >> 4) | (srcpixels[1][1][3] & 0xf0);
+         *blkaddr++ = (srcpixels[1][2][3] >> 4) | (srcpixels[1][3][3] & 0xf0);
+         *blkaddr++ = (srcpixels[2][0][3] >> 4) | (srcpixels[2][1][3] & 0xf0);
+         *blkaddr++ = (srcpixels[2][2][3] >> 4) | (srcpixels[2][3][3] & 0xf0);
+         *blkaddr++ = (srcpixels[3][0][3] >> 4) | (srcpixels[3][1][3] & 0xf0);
+         *blkaddr++ = (srcpixels[3][2][3] >> 4) | (srcpixels[3][3][3] & 0xf0);
+         encodedxtcolorblockfaster(blkaddr, srcpixels, numxpixels, numypixels, destFormat);
+         srcaddr += srccomps * numxpixels;
+         blkaddr += 8;
+      }
+      blkaddr += dstRowDiff;
+   }
+}
+
+static void
+tx_compress_dxt5(int srccomps, int width, int height,
+                 const GLubyte *srcPixData, GLubyte *dest, int dstRowStride)
+{
+   GLenum destFormat = GL_COMPRESSED_RGBA_S3TC_DXT5_EXT;
+   GLubyte *blkaddr = dest;
+   GLubyte srcpixels[4][4][4];
+   const GLchan *srcaddr = srcPixData;
+   int numxpixels, numypixels;
+
+   int dstRowDiff = dstRowStride >= (width * 4) ?
+                    dstRowStride - (((width + 3) & ~3) * 4) : 0;
+   /* fprintf(stderr, "dxt5 tex width %d tex height %d dstRowStride %d\n",
+              width, height, dstRowStride); */
+   for (int j = 0; j < height; j += 4) {
+      if (height > j + 3) numypixels = 4;
+      else numypixels = height - j;
+      srcaddr = srcPixData + j * width * srccomps;
+      for (int i = 0; i < width; i += 4) {
+         if (width > i + 3) numxpixels = 4;
+         else numxpixels = width - i;
+         extractsrccolors(srcpixels, srcaddr, width, numxpixels, numypixels, srccomps);
+         encodedxt5alpha(blkaddr, srcpixels, numxpixels, numypixels);
+         encodedxtcolorblockfaster(blkaddr + 8, srcpixels, numxpixels, numypixels, destFormat);
+         srcaddr += srccomps * numxpixels;
+         blkaddr += 16;
+      }
+      blkaddr += dstRowDiff;
+   }
+}
+
+static void
+tx_compress_dxtn(GLint srccomps, GLint width, GLint height,
+                 const GLubyte *srcPixData, GLenum destFormat,
+                 GLubyte *dest, GLint dstRowStride)
+{
    switch (destFormat) {
    case GL_COMPRESSED_RGB_S3TC_DXT1_EXT:
+      tx_compress_dxt1(srccomps, width, height, srcPixData,
+                       dest, dstRowStride, 3);
+      break;
    case GL_COMPRESSED_RGBA_S3TC_DXT1_EXT:
-      /* hmm we used to get called without dstRowStride... */
-      dstRowDiff = dstRowStride >= (width * 2) ? dstRowStride - (((width + 3) & ~3) * 2) : 0;
-/*      fprintf(stderr, "dxt1 tex width %d tex height %d dstRowStride %d\n",
-              width, height, dstRowStride); */
-      for (j = 0; j < height; j += 4) {
-         if (height > j + 3) numypixels = 4;
-         else numypixels = height - j;
-         srcaddr = srcPixData + j * width * srccomps;
-         for (i = 0; i < width; i += 4) {
-            if (width > i + 3) numxpixels = 4;
-            else numxpixels = width - i;
-            extractsrccolors(srcpixels, srcaddr, width, numxpixels, numypixels, srccomps);
-            encodedxtcolorblockfaster(blkaddr, srcpixels, numxpixels, numypixels, destFormat);
-            srcaddr += srccomps * numxpixels;
-            blkaddr += 8;
-         }
-         blkaddr += dstRowDiff;
-      }
+      tx_compress_dxt1(srccomps, width, height, srcPixData,
+                       dest, dstRowStride, 4);
       break;
    case GL_COMPRESSED_RGBA_S3TC_DXT3_EXT:
-      dstRowDiff = dstRowStride >= (width * 4) ? dstRowStride - (((width + 3) & ~3) * 4) : 0;
-/*      fprintf(stderr, "dxt3 tex width %d tex height %d dstRowStride %d\n",
-              width, height, dstRowStride); */
-      for (j = 0; j < height; j += 4) {
-         if (height > j + 3) numypixels = 4;
-         else numypixels = height - j;
-         srcaddr = srcPixData + j * width * srccomps;
-         for (i = 0; i < width; i += 4) {
-            if (width > i + 3) numxpixels = 4;
-            else numxpixels = width - i;
-            extractsrccolors(srcpixels, srcaddr, width, numxpixels, numypixels, srccomps);
-            *blkaddr++ = (srcpixels[0][0][3] >> 4) | (srcpixels[0][1][3] & 0xf0);
-            *blkaddr++ = (srcpixels[0][2][3] >> 4) | (srcpixels[0][3][3] & 0xf0);
-            *blkaddr++ = (srcpixels[1][0][3] >> 4) | (srcpixels[1][1][3] & 0xf0);
-            *blkaddr++ = (srcpixels[1][2][3] >> 4) | (srcpixels[1][3][3] & 0xf0);
-            *blkaddr++ = (srcpixels[2][0][3] >> 4) | (srcpixels[2][1][3] & 0xf0);
-            *blkaddr++ = (srcpixels[2][2][3] >> 4) | (srcpixels[2][3][3] & 0xf0);
-            *blkaddr++ = (srcpixels[3][0][3] >> 4) | (srcpixels[3][1][3] & 0xf0);
-            *blkaddr++ = (srcpixels[3][2][3] >> 4) | (srcpixels[3][3][3] & 0xf0);
-            encodedxtcolorblockfaster(blkaddr, srcpixels, numxpixels, numypixels, destFormat);
-            srcaddr += srccomps * numxpixels;
-            blkaddr += 8;
-         }
-         blkaddr += dstRowDiff;
-      }
+      tx_compress_dxt3(srccomps, width, height, srcPixData,
+                       dest, dstRowStride);
       break;
    case GL_COMPRESSED_RGBA_S3TC_DXT5_EXT:
-      dstRowDiff = dstRowStride >= (width * 4) ? dstRowStride - (((width + 3) & ~3) * 4) : 0;
-/*      fprintf(stderr, "dxt5 tex width %d tex height %d dstRowStride %d\n",
-              width, height, dstRowStride); */
-      for (j = 0; j < height; j += 4) {
-         if (height > j + 3) numypixels = 4;
-         else numypixels = height - j;
-         srcaddr = srcPixData + j * width * srccomps;
-         for (i = 0; i < width; i += 4) {
-            if (width > i + 3) numxpixels = 4;
-            else numxpixels = width - i;
-            extractsrccolors(srcpixels, srcaddr, width, numxpixels, numypixels, srccomps);
-            encodedxt5alpha(blkaddr, srcpixels, numxpixels, numypixels);
-            encodedxtcolorblockfaster(blkaddr + 8, srcpixels, numxpixels, numypixels, destFormat);
-            srcaddr += srccomps * numxpixels;
-            blkaddr += 16;
-         }
-         blkaddr += dstRowDiff;
-      }
+      tx_compress_dxt5(srccomps, width, height, srcPixData,
+                       dest, dstRowStride);
       break;
    default:
-      assert(false);
-      return;
+      unreachable("unknown DXTn format");
    }
 }
 
-- 
GitLab


From e853122a394ad44dc42b334faa164ea0433d9ce0 Mon Sep 17 00:00:00 2001
From: Kenneth Graunke <kenneth@whitecape.org>
Date: Mon, 2 May 2022 12:59:12 -0700
Subject: [PATCH 2/4] mesa: Avoid temp images in _mesa_texstore_rgb_dxt1 for
 GL_RGBA source

The compressor can handle 3 or 4-component sources, so allow a GL_RGBA
source and just pass that along with the correct number of components.
---
 src/mesa/main/texcompress_s3tc.c | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/src/mesa/main/texcompress_s3tc.c b/src/mesa/main/texcompress_s3tc.c
index c16e6e93da77..3470a7dc561d 100644
--- a/src/mesa/main/texcompress_s3tc.c
+++ b/src/mesa/main/texcompress_s3tc.c
@@ -51,11 +51,12 @@ _mesa_texstore_rgb_dxt1(TEXSTORE_PARAMS)
    const GLubyte *pixels;
    GLubyte *dst;
    const GLubyte *tempImage = NULL;
+   int srccomps = srcFormat == GL_RGB ? 3 : 4;
 
    assert(dstFormat == MESA_FORMAT_RGB_DXT1 ||
           dstFormat == MESA_FORMAT_SRGB_DXT1);
 
-   if (srcFormat != GL_RGB ||
+   if (!(srcFormat == GL_RGB || srcFormat == GL_RGBA) ||
        srcType != GL_UNSIGNED_BYTE ||
        ctx->_ImageTransferState ||
        ALIGN(srcPacking->RowLength, srcPacking->Alignment) != srcWidth ||
@@ -76,6 +77,7 @@ _mesa_texstore_rgb_dxt1(TEXSTORE_PARAMS)
                      srcPacking);
       pixels = tempImage;
       srcFormat = GL_RGB;
+      srccomps = 3;
    }
    else {
       pixels = _mesa_image_address2d(srcPacking, srcAddr, srcWidth, srcHeight,
@@ -84,7 +86,8 @@ _mesa_texstore_rgb_dxt1(TEXSTORE_PARAMS)
 
    dst = dstSlices[0];
 
-   tx_compress_dxt1(3, srcWidth, srcHeight, pixels, dst, dstRowStride, 3);
+   tx_compress_dxt1(srccomps, srcWidth, srcHeight, pixels,
+                    dst, dstRowStride, 3);
 
    free((void *) tempImage);
 
-- 
GitLab


From a9acc7c61692026ef26b3bef4ad09f232df88091 Mon Sep 17 00:00:00 2001
From: Kenneth Graunke <kenneth@whitecape.org>
Date: Fri, 20 May 2022 02:36:34 -0700
Subject: [PATCH 3/4] mesa: Require temp images in _mesa_texstore_*_dxt* with
 SkipImages

The S3TC compressor code doesn't support this, but our lack of checking
was being papered over by the stride checks being overly picky.  This
is needed to prevent regressions in the next commit.
---
 src/mesa/main/texcompress_s3tc.c | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/src/mesa/main/texcompress_s3tc.c b/src/mesa/main/texcompress_s3tc.c
index 3470a7dc561d..b6695512dcbd 100644
--- a/src/mesa/main/texcompress_s3tc.c
+++ b/src/mesa/main/texcompress_s3tc.c
@@ -60,6 +60,7 @@ _mesa_texstore_rgb_dxt1(TEXSTORE_PARAMS)
        srcType != GL_UNSIGNED_BYTE ||
        ctx->_ImageTransferState ||
        ALIGN(srcPacking->RowLength, srcPacking->Alignment) != srcWidth ||
+       srcPacking->SkipImages ||
        srcPacking->SwapBytes) {
       /* convert image to RGB/GLubyte */
       GLubyte *tempImageSlices[1];
@@ -112,6 +113,7 @@ _mesa_texstore_rgba_dxt1(TEXSTORE_PARAMS)
        srcType != GL_UNSIGNED_BYTE ||
        ctx->_ImageTransferState ||
        ALIGN(srcPacking->RowLength, srcPacking->Alignment) != srcWidth ||
+       srcPacking->SkipImages ||
        srcPacking->SwapBytes) {
       /* convert image to RGBA/GLubyte */
       GLubyte *tempImageSlices[1];
@@ -166,6 +168,7 @@ _mesa_texstore_rgba_dxt3(TEXSTORE_PARAMS)
        srcType != GL_UNSIGNED_BYTE ||
        ctx->_ImageTransferState ||
        ALIGN(srcPacking->RowLength, srcPacking->Alignment) != srcWidth ||
+       srcPacking->SkipImages ||
        srcPacking->SwapBytes) {
       /* convert image to RGBA/GLubyte */
       GLubyte *tempImageSlices[1];
@@ -219,6 +222,7 @@ _mesa_texstore_rgba_dxt5(TEXSTORE_PARAMS)
        srcType != GL_UNSIGNED_BYTE ||
        ctx->_ImageTransferState ||
        ALIGN(srcPacking->RowLength, srcPacking->Alignment) != srcWidth ||
+       srcPacking->SkipImages ||
        srcPacking->SwapBytes) {
       /* convert image to RGBA/GLubyte */
       GLubyte *tempImageSlices[1];
-- 
GitLab


From b8e60e014352219d4ef0b47870b6322a2c69c814 Mon Sep 17 00:00:00 2001
From: Kenneth Graunke <kenneth@whitecape.org>
Date: Mon, 2 May 2022 13:10:07 -0700
Subject: [PATCH 4/4] mesa: Avoid temp images in _mesa_texstore_*_dxt* for
 stride = 0

We're getting a source stride of 0 here sometimes, which I believe means
to just use the natural stride, which is what we wanted anyway.  No need
to fall back to a temporary image in that case.
---
 src/mesa/main/texcompress_s3tc.c | 14 +++++++-------
 1 file changed, 7 insertions(+), 7 deletions(-)

diff --git a/src/mesa/main/texcompress_s3tc.c b/src/mesa/main/texcompress_s3tc.c
index b6695512dcbd..5f41320a67fc 100644
--- a/src/mesa/main/texcompress_s3tc.c
+++ b/src/mesa/main/texcompress_s3tc.c
@@ -59,7 +59,7 @@ _mesa_texstore_rgb_dxt1(TEXSTORE_PARAMS)
    if (!(srcFormat == GL_RGB || srcFormat == GL_RGBA) ||
        srcType != GL_UNSIGNED_BYTE ||
        ctx->_ImageTransferState ||
-       ALIGN(srcPacking->RowLength, srcPacking->Alignment) != srcWidth ||
+       _mesa_image_row_stride(srcPacking, srcWidth, srcFormat, srcType) != srccomps * srcWidth * sizeof(GLubyte) ||
        srcPacking->SkipImages ||
        srcPacking->SwapBytes) {
       /* convert image to RGB/GLubyte */
@@ -105,6 +105,7 @@ _mesa_texstore_rgba_dxt1(TEXSTORE_PARAMS)
    const GLubyte *pixels;
    GLubyte *dst;
    const GLubyte *tempImage = NULL;
+   int rgbaRowStride = 4 * srcWidth * sizeof(GLubyte);
 
    assert(dstFormat == MESA_FORMAT_RGBA_DXT1 ||
           dstFormat == MESA_FORMAT_SRGBA_DXT1);
@@ -112,12 +113,11 @@ _mesa_texstore_rgba_dxt1(TEXSTORE_PARAMS)
    if (srcFormat != GL_RGBA ||
        srcType != GL_UNSIGNED_BYTE ||
        ctx->_ImageTransferState ||
-       ALIGN(srcPacking->RowLength, srcPacking->Alignment) != srcWidth ||
+       _mesa_image_row_stride(srcPacking, srcWidth, srcFormat, srcType) != rgbaRowStride ||
        srcPacking->SkipImages ||
        srcPacking->SwapBytes) {
       /* convert image to RGBA/GLubyte */
       GLubyte *tempImageSlices[1];
-      int rgbaRowStride = 4 * srcWidth * sizeof(GLubyte);
       tempImage = malloc(srcWidth * srcHeight * 4 * sizeof(GLubyte));
       if (!tempImage)
          return GL_FALSE; /* out of memory */
@@ -160,6 +160,7 @@ _mesa_texstore_rgba_dxt3(TEXSTORE_PARAMS)
    const GLubyte *pixels;
    GLubyte *dst;
    const GLubyte *tempImage = NULL;
+   int rgbaRowStride = 4 * srcWidth * sizeof(GLubyte);
 
    assert(dstFormat == MESA_FORMAT_RGBA_DXT3 ||
           dstFormat == MESA_FORMAT_SRGBA_DXT3);
@@ -167,12 +168,11 @@ _mesa_texstore_rgba_dxt3(TEXSTORE_PARAMS)
    if (srcFormat != GL_RGBA ||
        srcType != GL_UNSIGNED_BYTE ||
        ctx->_ImageTransferState ||
-       ALIGN(srcPacking->RowLength, srcPacking->Alignment) != srcWidth ||
+       _mesa_image_row_stride(srcPacking, srcWidth, srcFormat, srcType) != rgbaRowStride ||
        srcPacking->SkipImages ||
        srcPacking->SwapBytes) {
       /* convert image to RGBA/GLubyte */
       GLubyte *tempImageSlices[1];
-      int rgbaRowStride = 4 * srcWidth * sizeof(GLubyte);
       tempImage = malloc(srcWidth * srcHeight * 4 * sizeof(GLubyte));
       if (!tempImage)
          return GL_FALSE; /* out of memory */
@@ -214,6 +214,7 @@ _mesa_texstore_rgba_dxt5(TEXSTORE_PARAMS)
    const GLubyte *pixels;
    GLubyte *dst;
    const GLubyte *tempImage = NULL;
+   int rgbaRowStride = 4 * srcWidth * sizeof(GLubyte);
 
    assert(dstFormat == MESA_FORMAT_RGBA_DXT5 ||
           dstFormat == MESA_FORMAT_SRGBA_DXT5);
@@ -221,12 +222,11 @@ _mesa_texstore_rgba_dxt5(TEXSTORE_PARAMS)
    if (srcFormat != GL_RGBA ||
        srcType != GL_UNSIGNED_BYTE ||
        ctx->_ImageTransferState ||
-       ALIGN(srcPacking->RowLength, srcPacking->Alignment) != srcWidth ||
+       _mesa_image_row_stride(srcPacking, srcWidth, srcFormat, srcType) != rgbaRowStride ||
        srcPacking->SkipImages ||
        srcPacking->SwapBytes) {
       /* convert image to RGBA/GLubyte */
       GLubyte *tempImageSlices[1];
-      int rgbaRowStride = 4 * srcWidth * sizeof(GLubyte);
       tempImage = malloc(srcWidth * srcHeight * 4 * sizeof(GLubyte));
       if (!tempImage)
          return GL_FALSE; /* out of memory */
-- 
GitLab

