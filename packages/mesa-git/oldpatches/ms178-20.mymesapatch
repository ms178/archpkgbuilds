--- a/src/amd/compiler/instruction_selection/aco_select_nir_alu.cpp	2025-08-01 12:17:31.531652664 +0200
+++ b/src/amd/compiler/instruction_selection/aco_select_nir_alu.cpp	2025-08-01 12:42:07.300288345 +0200
@@ -683,52 +683,47 @@ emit_log2(isel_context* ctx, Builder& bl
 Temp
 emit_trunc_f64(isel_context* ctx, Builder& bld, Definition dst, Temp val)
 {
-   if (ctx->options->gfx_level >= GFX7)
+   if (ctx->options->gfx_level >= GFX7) {
       return bld.vop1(aco_opcode::v_trunc_f64, Definition(dst), val);
+   }
 
-   /* GFX6 doesn't support V_TRUNC_F64, lower it. */
-   /* TODO: create more efficient code! */
-   if (val.type() == RegType::sgpr)
+   /* GFX6 doesn't support V_TRUNC_F64, lower it.
+    * This is more efficient and robust than the old bit-twiddling approach.
+    * The logic is to calculate floor(abs(val)) and then restore the original sign.
+    * A cndmask handles inputs that are already integers, NaN, or Inf.
+    */
+   if (val.type() == RegType::sgpr) {
       val = as_vgpr(ctx, val);
+   }
+
+   /* If val is already an integer (or NaN/Inf), fract is +/-0.0. */
+   Temp fract = bld.vop1(aco_opcode::v_fract_f64, bld.def(v2), val);
+   Temp is_int_or_special = bld.vopc(aco_opcode::v_cmp_eq_f64, bld.def(bld.lm), fract, Operand::zero());
+
+   /* Calculate floor(abs(val)) using an abs modifier on the source. */
+   Instruction* floor_abs_instr = bld.vop1(aco_opcode::v_floor_f64, bld.def(v2), val);
+   floor_abs_instr->valu().abs[0] = true;
+   Temp floor_abs = floor_abs_instr->definitions[0].getTemp();
 
-   /* Split the input value. */
+   /* Re-apply the original sign bit to the result of floor(abs(val)). */
    Temp val_lo = bld.tmp(v1), val_hi = bld.tmp(v1);
    bld.pseudo(aco_opcode::p_split_vector, Definition(val_lo), Definition(val_hi), val);
+   Temp sign_bit = bld.vop2(aco_opcode::v_and_b32, bld.def(v1), val_hi, Operand::c32(0x80000000u));
 
-   /* Extract the exponent and compute the unbiased value. */
-   Temp exponent =
-      bld.vop3(aco_opcode::v_bfe_u32, bld.def(v1), val_hi, Operand::c32(20u), Operand::c32(11u));
-   exponent = bld.vsub32(bld.def(v1), exponent, Operand::c32(1023u));
-
-   /* Extract the fractional part. */
-   Temp fract_mask = bld.pseudo(aco_opcode::p_create_vector, bld.def(v2), Operand::c32(-1u),
-                                Operand::c32(0x000fffffu));
-   fract_mask = bld.vop3(aco_opcode::v_lshr_b64, bld.def(v2), fract_mask, exponent);
-
-   Temp fract_mask_lo = bld.tmp(v1), fract_mask_hi = bld.tmp(v1);
-   bld.pseudo(aco_opcode::p_split_vector, Definition(fract_mask_lo), Definition(fract_mask_hi),
-              fract_mask);
-
-   Temp fract_lo = bld.tmp(v1), fract_hi = bld.tmp(v1);
-   Temp tmp = bld.vop1(aco_opcode::v_not_b32, bld.def(v1), fract_mask_lo);
-   fract_lo = bld.vop2(aco_opcode::v_and_b32, bld.def(v1), val_lo, tmp);
-   tmp = bld.vop1(aco_opcode::v_not_b32, bld.def(v1), fract_mask_hi);
-   fract_hi = bld.vop2(aco_opcode::v_and_b32, bld.def(v1), val_hi, tmp);
-
-   /* Get the sign bit. */
-   Temp sign = bld.vop2(aco_opcode::v_and_b32, bld.def(v1), Operand::c32(0x80000000u), val_hi);
-
-   /* Decide the operation to apply depending on the unbiased exponent. */
-   Temp exp_lt0 =
-      bld.vopc_e64(aco_opcode::v_cmp_lt_i32, bld.def(bld.lm), exponent, Operand::zero());
-   Temp dst_lo = bld.vop2(aco_opcode::v_cndmask_b32, bld.def(v1), fract_lo,
-                          bld.copy(bld.def(v1), Operand::zero()), exp_lt0);
-   Temp dst_hi = bld.vop2(aco_opcode::v_cndmask_b32, bld.def(v1), fract_hi, sign, exp_lt0);
-   Temp exp_gt51 = bld.vopc_e64(aco_opcode::v_cmp_gt_i32, bld.def(s2), exponent, Operand::c32(51u));
-   dst_lo = bld.vop2(aco_opcode::v_cndmask_b32, bld.def(v1), dst_lo, val_lo, exp_gt51);
-   dst_hi = bld.vop2(aco_opcode::v_cndmask_b32, bld.def(v1), dst_hi, val_hi, exp_gt51);
+   Temp floor_abs_lo = bld.tmp(v1), floor_abs_hi = bld.tmp(v1);
+   bld.pseudo(aco_opcode::p_split_vector, Definition(floor_abs_lo), Definition(floor_abs_hi), floor_abs);
+   Temp trunc_val_hi = bld.vop2(aco_opcode::v_or_b32, bld.def(v1), floor_abs_hi, sign_bit);
+   Temp trunc_val = bld.pseudo(aco_opcode::p_create_vector, bld.def(v2), floor_abs_lo, trunc_val_hi);
+
+   /* Create a vector of {dst_lo, dst_hi} for cndmask */
+   Temp dst_lo = bld.tmp(v1), dst_hi = bld.tmp(v1);
+   bld.pseudo(aco_opcode::p_split_vector, Definition(dst_lo), Definition(dst_hi), dst.getTemp());
+
+   /* Final result is either the original value (if integer/special) or the calculated truncated value */
+   Temp res_lo = bld.vop2(aco_opcode::v_cndmask_b32, bld.def(v1), val_lo, floor_abs_lo, is_int_or_special);
+   Temp res_hi = bld.vop2(aco_opcode::v_cndmask_b32, bld.def(v1), val_hi, trunc_val_hi, is_int_or_special);
 
-   return bld.pseudo(aco_opcode::p_create_vector, Definition(dst), dst_lo, dst_hi);
+   return bld.pseudo(aco_opcode::p_create_vector, Definition(dst), res_lo, res_hi);
 }
 
 Temp
@@ -768,9 +763,10 @@ Temp
 uadd32_sat(Builder& bld, Definition dst, Temp src0, Temp src1)
 {
    if (bld.program->gfx_level < GFX8) {
-      Builder::Result add = bld.vadd32(bld.def(v1), src0, src1, true);
-      return bld.vop2_e64(aco_opcode::v_cndmask_b32, dst, add.def(0).getTemp(), Operand::c32(-1),
-                          add.def(1).getTemp());
+      Temp res = bld.tmp(v1);
+      Temp carry = bld.vadd32(Definition(res), src0, src1, true).def(1).getTemp();
+      return bld.vop2_e64(aco_opcode::v_cndmask_b32, dst, Operand::c32(0xFFFFFFFFu), res,
+                          carry);
    }
 
    Builder::Result add(NULL);
@@ -787,9 +783,10 @@ Temp
 usub32_sat(Builder& bld, Definition dst, Temp src0, Temp src1)
 {
    if (bld.program->gfx_level < GFX8) {
-      Builder::Result sub = bld.vsub32(bld.def(v1), src0, src1, true);
-      return bld.vop2_e64(aco_opcode::v_cndmask_b32, dst, sub.def(0).getTemp(), Operand::c32(0u),
-                          sub.def(1).getTemp());
+      Temp res = bld.tmp(v1);
+      Temp borrow = bld.vsub32(Definition(res), src0, src1, true).def(1).getTemp();
+      return bld.vop2_e64(aco_opcode::v_cndmask_b32, dst, Operand::zero(), res,
+                          borrow);
    }
 
    Builder::Result sub(NULL);
@@ -952,33 +949,34 @@ visit_alu_instr(isel_context* ctx, nir_a
    }
    case nir_op_iabs: {
       if (dst.regClass() == v1 && instr->def.bit_size == 16) {
-         Temp src = get_alu_src_vop3p(ctx, instr->src[0]);
-
-         unsigned opsel_lo = (instr->src[0].swizzle[0] & 1) << 1;
-         unsigned opsel_hi = ((instr->src[0].swizzle[1] & 1) << 1) | 1;
-
-         Temp sub = bld.vop3p(aco_opcode::v_pk_sub_u16, Definition(bld.tmp(v1)), Operand::zero(),
-                              src, opsel_lo, opsel_hi);
-         bld.vop3p(aco_opcode::v_pk_max_i16, Definition(dst), sub, src, opsel_lo, opsel_hi);
-         emit_split_vector(ctx, dst, 2);
-         break;
+            Temp src = get_alu_src_vop3p(ctx, instr->src[0]);
+            unsigned opsel_lo = (instr->src[0].swizzle[0] & 1) << 1;
+            unsigned opsel_hi = ((instr->src[0].swizzle[1] & 1) << 1);
+
+            /* Perform abs(x) as max(x, -x) in a single instruction using the neg modifier. */
+            Instruction* pk_max =
+            bld.vop3p(aco_opcode::v_pk_max_i16, Definition(dst), src, src, opsel_lo, opsel_hi);
+            pk_max->valu().neg_lo[1] = true;
+            pk_max->valu().neg_hi[1] = true;
+            emit_split_vector(ctx, dst, 2);
+            break;
       }
       Temp src = get_alu_src(ctx, instr->src[0]);
       if (dst.regClass() == s1) {
-         bld.sop1(aco_opcode::s_abs_i32, Definition(dst), bld.def(s1, scc), src);
+            bld.sop1(aco_opcode::s_abs_i32, Definition(dst), bld.def(s1, scc), src);
       } else if (dst.regClass() == v1) {
-         bld.vop2(aco_opcode::v_max_i32, Definition(dst), src,
+            bld.vop2(aco_opcode::v_max_i32, Definition(dst), src,
                   bld.vsub32(bld.def(v1), Operand::zero(), src));
       } else if (dst.regClass() == v2b && ctx->program->gfx_level >= GFX10) {
-         bld.vop3(
+            bld.vop3(
             aco_opcode::v_max_i16_e64, Definition(dst), src,
             bld.vop3(aco_opcode::v_sub_u16_e64, Definition(bld.tmp(v2b)), Operand::zero(2), src));
       } else if (dst.regClass() == v2b) {
-         src = as_vgpr(ctx, src);
-         bld.vop2(aco_opcode::v_max_i16, Definition(dst), src,
+            src = as_vgpr(ctx, src);
+            bld.vop2(aco_opcode::v_max_i16, Definition(dst), src,
                   bld.vop2(aco_opcode::v_sub_u16, Definition(bld.tmp(v2b)), Operand::zero(2), src));
       } else {
-         isel_err(&instr->instr, "Unimplemented NIR instr bit size");
+            isel_err(&instr->instr, "Unimplemented NIR instr bit size");
       }
       break;
    }
@@ -1463,35 +1461,41 @@ visit_alu_instr(isel_context* ctx, nir_a
    }
    case nir_op_iadd_sat: {
       if (dst.regClass() == v1 && instr->def.bit_size == 16) {
-         Instruction* add_instr = emit_vop3p_instruction(ctx, instr, aco_opcode::v_pk_add_i16, dst);
-         add_instr->valu().clamp = 1;
-         break;
+            Instruction* add_instr = emit_vop3p_instruction(ctx, instr, aco_opcode::v_pk_add_i16, dst);
+            add_instr->valu().clamp = 1;
+            break;
       }
       Temp src0 = get_alu_src(ctx, instr->src[0]);
       Temp src1 = get_alu_src(ctx, instr->src[1]);
       if (dst.regClass() == s1) {
-         Temp cond = bld.sopc(aco_opcode::s_cmp_lt_i32, bld.def(s1, scc), src1, Operand::zero());
-         Temp bound = bld.sop2(aco_opcode::s_add_u32, bld.def(s1), bld.scc(bld.def(s1, scc)),
-                               Operand::c32(INT32_MAX), cond);
-         Temp overflow = bld.tmp(s1);
-         Temp add =
+            Temp cond = bld.sopc(aco_opcode::s_cmp_lt_i32, bld.def(s1, scc), src1, Operand::zero());
+            Temp bound = bld.sop2(aco_opcode::s_add_u32, bld.def(s1), bld.scc(bld.def(s1, scc)),
+                              Operand::c32(INT32_MAX), cond);
+            Temp overflow = bld.tmp(s1);
+            Temp add =
             bld.sop2(aco_opcode::s_add_i32, bld.def(s1), bld.scc(Definition(overflow)), src0, src1);
-         bld.sop2(aco_opcode::s_cselect_b32, Definition(dst), bound, add, bld.scc(overflow));
-         break;
+            bld.sop2(aco_opcode::s_cselect_b32, Definition(dst), bound, add, bld.scc(overflow));
+            break;
       }
 
+      src0 = as_vgpr(ctx, src0);
       src1 = as_vgpr(ctx, src1);
 
-      if (dst.regClass() == v2b) {
-         Instruction* add_instr =
-            bld.vop3(aco_opcode::v_add_i16, Definition(dst), src0, src1).instr;
-         add_instr->valu().clamp = 1;
-      } else if (dst.regClass() == v1) {
-         Instruction* add_instr =
-            bld.vop3(aco_opcode::v_add_i32, Definition(dst), src0, src1).instr;
-         add_instr->valu().clamp = 1;
+      if (ctx->program->gfx_level >= GFX10) {
+            aco_opcode opcode = dst.regClass() == v2b ? aco_opcode::v_add_i16 : aco_opcode::v_add_i32;
+            Instruction* add_instr = bld.vop3(opcode, Definition(dst), src0, src1).instr;
+            add_instr->valu().clamp = 1;
+      } else if (dst.regClass() == v1) {
+            /* GFX9 and older require manual saturation for 32-bit signed integers. */
+            Temp add = bld.vop2(aco_opcode::v_add_i32, bld.def(v1), src0, src1);
+            Temp xor01 = bld.vop2(aco_opcode::v_xor_b32, bld.def(v1), src0, src1);
+            Temp xor0r = bld.vop2(aco_opcode::v_xor_b32, bld.def(v1), src0, add);
+            Temp overflow = bld.vop2(aco_opcode::v_and_b32, bld.def(bld.lm), bld.vop1(aco_opcode::v_not_b32, bld.def(v1), xor01), xor0r);
+            Temp sign = bld.vop2(aco_opcode::v_ashrrev_i32, bld.def(v1), Operand::c32(31), src0);
+            Temp sat = bld.vop2(aco_opcode::v_xor_b32, bld.def(v1), sign, Operand::c32(0x7fffffffu));
+            bld.vop2(aco_opcode::v_cndmask_b32, Definition(dst), add, sat, overflow);
       } else {
-         isel_err(&instr->instr, "Unimplemented NIR instr bit size");
+            isel_err(&instr->instr, "Unimplemented NIR instr bit size");
       }
       break;
    }
@@ -1708,35 +1712,42 @@ visit_alu_instr(isel_context* ctx, nir_a
    }
    case nir_op_isub_sat: {
       if (dst.regClass() == v1 && instr->def.bit_size == 16) {
-         Instruction* sub_instr = emit_vop3p_instruction(ctx, instr, aco_opcode::v_pk_sub_i16, dst);
-         sub_instr->valu().clamp = 1;
-         break;
+            Instruction* sub_instr = emit_vop3p_instruction(ctx, instr, aco_opcode::v_pk_sub_i16, dst);
+            sub_instr->valu().clamp = 1;
+            break;
       }
       Temp src0 = get_alu_src(ctx, instr->src[0]);
       Temp src1 = get_alu_src(ctx, instr->src[1]);
       if (dst.regClass() == s1) {
-         Temp cond = bld.sopc(aco_opcode::s_cmp_gt_i32, bld.def(s1, scc), src1, Operand::zero());
-         Temp bound = bld.sop2(aco_opcode::s_add_u32, bld.def(s1), bld.scc(bld.def(s1, scc)),
-                               Operand::c32(INT32_MAX), cond);
-         Temp overflow = bld.tmp(s1);
-         Temp sub =
+            Temp cond = bld.sopc(aco_opcode::s_cmp_gt_i32, bld.def(s1, scc), src1, Operand::zero());
+            Temp bound = bld.sop2(aco_opcode::s_add_u32, bld.def(s1), bld.scc(bld.def(s1, scc)),
+                              Operand::c32(INT32_MAX), cond);
+            Temp overflow = bld.tmp(s1);
+            Temp sub =
             bld.sop2(aco_opcode::s_sub_i32, bld.def(s1), bld.scc(Definition(overflow)), src0, src1);
-         bld.sop2(aco_opcode::s_cselect_b32, Definition(dst), bound, sub, bld.scc(overflow));
-         break;
+            bld.sop2(aco_opcode::s_cselect_b32, Definition(dst), bound, sub, bld.scc(overflow));
+            break;
       }
 
+      src0 = as_vgpr(ctx, src0);
       src1 = as_vgpr(ctx, src1);
 
-      if (dst.regClass() == v2b) {
-         Instruction* sub_instr =
-            bld.vop3(aco_opcode::v_sub_i16, Definition(dst), src0, src1).instr;
-         sub_instr->valu().clamp = 1;
-      } else if (dst.regClass() == v1) {
-         Instruction* sub_instr =
-            bld.vop3(aco_opcode::v_sub_i32, Definition(dst), src0, src1).instr;
-         sub_instr->valu().clamp = 1;
+      if (ctx->program->gfx_level >= GFX10) {
+            aco_opcode opcode = dst.regClass() == v2b ? aco_opcode::v_sub_i16 : aco_opcode::v_sub_i32;
+            Instruction* sub_instr =
+            bld.vop3(opcode, Definition(dst), src0, src1).instr;
+            sub_instr->valu().clamp = 1;
+      } else if (dst.regClass() == v1) {
+            /* GFX9 and older require manual saturation for 32-bit signed integers. */
+            Temp sub = bld.vop2(aco_opcode::v_sub_i32, bld.def(v1), src0, src1);
+            Temp xor01 = bld.vop2(aco_opcode::v_xor_b32, bld.def(v1), src0, src1);
+            Temp xor0r = bld.vop2(aco_opcode::v_xor_b32, bld.def(v1), src0, sub);
+            Temp overflow = bld.vop2(aco_opcode::v_and_b32, bld.def(bld.lm), xor01, xor0r);
+            Temp sign = bld.vop2(aco_opcode::v_ashrrev_i32, bld.def(v1), Operand::c32(31), src0);
+            Temp sat = bld.vop2(aco_opcode::v_xor_b32, bld.def(v1), sign, Operand::c32(0x7fffffffu));
+            bld.vop2(aco_opcode::v_cndmask_b32, Definition(dst), sub, sat, overflow);
       } else {
-         isel_err(&instr->instr, "Unimplemented NIR instr bit size");
+            isel_err(&instr->instr, "Unimplemented NIR instr bit size");
       }
       break;
    }
@@ -1909,6 +1920,45 @@ visit_alu_instr(isel_context* ctx, nir_a
       }
       break;
    }
+   case nir_op_fdiv: {
+      Temp src0 = get_alu_src(ctx, instr->src[0]);
+      Temp src1 = get_alu_src(ctx, instr->src[1]);
+      if (dst.regClass() == v2) {
+         if (ctx->program->gfx_level >= GFX10) {
+            bld.vop3(aco_opcode::v_div_f64, Definition(dst), as_vgpr(ctx, src0),
+                     as_vgpr(ctx, src1));
+         } else {
+            Temp rcp = bld.vop1(aco_opcode::v_rcp_f64, bld.def(v2), as_vgpr(ctx, src1));
+            bld.vop3(aco_opcode::v_mul_f64_e64, Definition(dst), as_vgpr(ctx, src0), rcp);
+         }
+      } else if (dst.regClass() == s1 && instr->def.bit_size == 32) {
+         Temp rcp = bld.tmp(s1);
+         emit_rcp(ctx, bld, Definition(rcp), src1);
+         bld.sop2(aco_opcode::s_mul_f32, Definition(dst), src0, rcp);
+      } else if (dst.regClass() == v1) { // f32
+         Temp rcp = bld.tmp(v1);
+         emit_rcp(ctx, bld, Definition(rcp), src1);
+         bld.vop2(aco_opcode::v_mul_f32, Definition(dst), as_vgpr(ctx, src0), as_vgpr(ctx, rcp));
+      } else if (dst.regClass() == v2b || (dst.regClass() == s1 && instr->def.bit_size == 16)) { // f16
+         Temp rcp = bld.tmp(dst.regClass());
+         if (dst.regClass() == s1) {
+            if (ctx->program->gfx_level >= GFX12) {
+               bld.vop3(aco_opcode::v_s_rcp_f16, Definition(rcp), as_vgpr(ctx, src1));
+            } else {
+               rcp = bld.as_uniform(
+                  bld.vop1(aco_opcode::v_rcp_f16, bld.def(v2b), as_vgpr(ctx, src1)));
+            }
+            bld.sop2(aco_opcode::s_mul_f16, Definition(dst), src0, rcp);
+         } else {
+            bld.vop1(aco_opcode::v_rcp_f16, Definition(rcp), as_vgpr(ctx, src1));
+            bld.vop2(aco_opcode::v_mul_f16, Definition(dst), as_vgpr(ctx, src0),
+                     as_vgpr(ctx, rcp));
+         }
+      } else {
+         isel_err(&instr->instr, "Unimplemented NIR fdiv bit size");
+      }
+      break;
+   }
    case nir_op_ffma: {
       if (dst.regClass() == v2b) {
          emit_vop3a_instruction(ctx, instr, aco_opcode::v_fma_f16, dst, false, 3);
@@ -2042,6 +2092,58 @@ visit_alu_instr(isel_context* ctx, nir_a
       emit_idot_instruction(ctx, instr, aco_opcode::v_dot2_u32_u16, dst, true);
       break;
    }
+   case nir_op_fdot2: {
+      /* fdot2(a, b) = a.x * b.x + a.y * b.y */
+      const unsigned bit_size = instr->src[0].src.ssa->bit_size;
+      assert(bit_size == instr->src[1].src.ssa->bit_size);
+      assert(instr->def.bit_size == 32);
+
+      if (dst.type() == RegType::vgpr && ctx->program->gfx_level >= GFX11 &&
+          (bit_size == 16 || bit_size == 32)) {
+         aco_opcode opcode =
+            bit_size == 16 ? aco_opcode::v_dot2_f32_f16 : aco_opcode::v_dot2_f32_f32;
+         Temp src0 = as_vgpr(ctx, get_alu_src(ctx, instr->src[0], 2));
+         Temp src1 = as_vgpr(ctx, get_alu_src(ctx, instr->src[1], 2));
+         Instruction* dot = bld.vop3(opcode, Definition(dst), src0, src1);
+         break;
+      }
+
+      /* Fallback for SGPR or older hardware. */
+      Temp src0 = get_alu_src(ctx, instr->src[0], 2);
+      Temp src1 = get_alu_src(ctx, instr->src[1], 2);
+      RegClass vec_rc = RegClass::get(src0.type(), bit_size / 8u);
+
+      Temp src0_x = emit_extract_vector(ctx, src0, 0, vec_rc);
+      Temp src0_y = emit_extract_vector(ctx, src0, 1, vec_rc);
+      Temp src1_x = emit_extract_vector(ctx, src1, 0, vec_rc);
+      Temp src1_y = emit_extract_vector(ctx, src1, 1, vec_rc);
+
+      Temp res;
+      if (dst.type() == RegType::sgpr) {
+         assert(bit_size == 32 && "16-bit fdot2 should not produce SGPR result on this path");
+         Temp mul = bld.sop2(aco_opcode::s_mul_f32, bld.def(s1), src0_x, src1_x);
+         res = bld.sop2(aco_opcode::s_fmac_f32, bld.def(s1), src0_y, src1_y, mul);
+      } else {
+         Temp x_prod = bld.tmp(v1), y_prod = bld.tmp(v1);
+         if (bit_size == 16) {
+            Temp mul_x = bld.vop2(aco_opcode::v_mul_f16, bld.def(v2b), as_vgpr(ctx, src0_x),
+                                  as_vgpr(ctx, src1_x));
+            Temp mul_y = bld.vop2(aco_opcode::v_mul_f16, bld.def(v2b), as_vgpr(ctx, src0_y),
+                                  as_vgpr(ctx, src1_y));
+            bld.vop1(aco_opcode::v_cvt_f32_f16, Definition(x_prod), mul_x);
+            bld.vop1(aco_opcode::v_cvt_f32_f16, Definition(y_prod), mul_y);
+         } else { /* 32-bit */
+            bld.vop2(aco_opcode::v_mul_f32, Definition(x_prod), as_vgpr(ctx, src0_x),
+                     as_vgpr(ctx, src1_x));
+            bld.vop2(aco_opcode::v_mul_f32, Definition(y_prod), as_vgpr(ctx, src0_y),
+                     as_vgpr(ctx, src1_y));
+         }
+         res = bld.vop2(aco_opcode::v_add_f32, bld.def(v1), x_prod, y_prod);
+      }
+
+      bld.copy(Definition(dst), res);
+      break;
+   }
    case nir_op_bfdot2_bfadd: {
       Temp src0 = as_vgpr(ctx, get_alu_src(ctx, instr->src[0], 2));
       Temp src1 = as_vgpr(ctx, get_alu_src(ctx, instr->src[1], 2));
@@ -2085,87 +2187,68 @@ visit_alu_instr(isel_context* ctx, nir_a
    }
    case nir_op_fneg: {
       if (dst.regClass() == v1 && instr->def.bit_size == 16) {
-         Temp src = get_alu_src_vop3p(ctx, instr->src[0]);
-         Instruction* vop3p =
+            Temp src = get_alu_src_vop3p(ctx, instr->src[0]);
+            Instruction* vop3p =
             bld.vop3p(aco_opcode::v_pk_mul_f16, Definition(dst), src, Operand::c16(0x3C00),
-                      instr->src[0].swizzle[0] & 1, instr->src[0].swizzle[1] & 1);
-         vop3p->valu().neg_lo[0] = true;
-         vop3p->valu().neg_hi[0] = true;
-         emit_split_vector(ctx, dst, 2);
-         break;
+                        instr->src[0].swizzle[0] & 1, instr->src[0].swizzle[1] & 1);
+            vop3p->valu().neg_lo[0] = true;
+            vop3p->valu().neg_hi[0] = true;
+            emit_split_vector(ctx, dst, 2);
+            break;
       }
       Temp src = get_alu_src(ctx, instr->src[0]);
       if (dst.regClass() == v2b) {
-         bld.vop2(aco_opcode::v_mul_f16, Definition(dst), Operand::c16(0xbc00u), as_vgpr(ctx, src));
+            bld.vop2(aco_opcode::v_xor_b32, Definition(dst), Operand::c32(0x80008000u), as_vgpr(ctx, src));
       } else if (dst.regClass() == v1) {
-         bld.vop2(aco_opcode::v_mul_f32, Definition(dst), Operand::c32(0xbf800000u),
-                  as_vgpr(ctx, src));
+            bld.vop2(aco_opcode::v_xor_b32, Definition(dst), Operand::c32(0x80000000u), as_vgpr(ctx, src));
       } else if (dst.regClass() == v2) {
-         if (ctx->block->fp_mode.must_flush_denorms16_64)
+            if (ctx->block->fp_mode.must_flush_denorms16_64)
             src = bld.vop3(aco_opcode::v_mul_f64_e64, bld.def(v2), Operand::c64(0x3FF0000000000000),
-                           as_vgpr(ctx, src));
-         Temp upper = bld.tmp(v1), lower = bld.tmp(v1);
-         bld.pseudo(aco_opcode::p_split_vector, Definition(lower), Definition(upper), src);
-         upper = bld.vop2(aco_opcode::v_xor_b32, bld.def(v1), Operand::c32(0x80000000u), upper);
-         bld.pseudo(aco_opcode::p_create_vector, Definition(dst), lower, upper);
+                              as_vgpr(ctx, src));
+            Temp upper = bld.tmp(v1), lower = bld.tmp(v1);
+            bld.pseudo(aco_opcode::p_split_vector, Definition(lower), Definition(upper), src);
+            upper = bld.vop2(aco_opcode::v_xor_b32, bld.def(v1), Operand::c32(0x80000000u), upper);
+            bld.pseudo(aco_opcode::p_create_vector, Definition(dst), lower, upper);
       } else if (dst.regClass() == s1 && instr->def.bit_size == 16) {
-         bld.sop2(aco_opcode::s_mul_f16, Definition(dst), Operand::c16(0xbc00u), src);
+            bld.sop2(aco_opcode::s_xor_b32, Definition(dst), bld.def(s1, scc), Operand::c32(0x8000u), src);
       } else if (dst.regClass() == s1 && instr->def.bit_size == 32) {
-         bld.sop2(aco_opcode::s_mul_f32, Definition(dst), Operand::c32(0xbf800000u), src);
+            bld.sop2(aco_opcode::s_xor_b32, Definition(dst), bld.def(s1, scc), Operand::c32(0x80000000u), src);
       } else {
-         isel_err(&instr->instr, "Unimplemented NIR instr bit size");
+            isel_err(&instr->instr, "Unimplemented NIR instr bit size");
       }
       break;
    }
    case nir_op_fabs: {
       if (dst.regClass() == v1 && instr->def.bit_size == 16) {
-         Temp src = get_alu_src_vop3p(ctx, instr->src[0]);
-         Instruction* vop3p =
+            Temp src = get_alu_src_vop3p(ctx, instr->src[0]);
+            Instruction* vop3p =
             bld.vop3p(aco_opcode::v_pk_max_f16, Definition(dst), src, src,
-                      instr->src[0].swizzle[0] & 1 ? 3 : 0, instr->src[0].swizzle[1] & 1 ? 3 : 0)
-               .instr;
-         vop3p->valu().neg_lo[1] = true;
-         vop3p->valu().neg_hi[1] = true;
-         emit_split_vector(ctx, dst, 2);
-         break;
+                        instr->src[0].swizzle[0] & 1 ? 3 : 0, instr->src[0].swizzle[1] & 1 ? 3 : 0)
+                  .instr;
+            vop3p->valu().neg_lo[1] = true;
+            vop3p->valu().neg_hi[1] = true;
+            emit_split_vector(ctx, dst, 2);
+            break;
       }
       Temp src = get_alu_src(ctx, instr->src[0]);
       if (dst.regClass() == v2b) {
-         Instruction* mul = bld.vop2_e64(aco_opcode::v_mul_f16, Definition(dst),
-                                         Operand::c16(0x3c00), as_vgpr(ctx, src))
-                               .instr;
-         mul->valu().abs[1] = true;
-      } else if (dst.regClass() == v1) {
-         Instruction* mul = bld.vop2_e64(aco_opcode::v_mul_f32, Definition(dst),
-                                         Operand::c32(0x3f800000u), as_vgpr(ctx, src))
-                               .instr;
-         mul->valu().abs[1] = true;
+            bld.vop2(aco_opcode::v_and_b32, Definition(dst), Operand::c32(0x7fff7fffu), as_vgpr(ctx, src));
+      } else if (dst.regClass() == v1) {
+            bld.vop2(aco_opcode::v_and_b32, Definition(dst), Operand::c32(0x7fffffffu), as_vgpr(ctx, src));
       } else if (dst.regClass() == v2) {
-         if (ctx->block->fp_mode.must_flush_denorms16_64)
+            if (ctx->block->fp_mode.must_flush_denorms16_64)
             src = bld.vop3(aco_opcode::v_mul_f64_e64, bld.def(v2), Operand::c64(0x3FF0000000000000),
-                           as_vgpr(ctx, src));
-         Temp upper = bld.tmp(v1), lower = bld.tmp(v1);
-         bld.pseudo(aco_opcode::p_split_vector, Definition(lower), Definition(upper), src);
-         upper = bld.vop2(aco_opcode::v_and_b32, bld.def(v1), Operand::c32(0x7FFFFFFFu), upper);
-         bld.pseudo(aco_opcode::p_create_vector, Definition(dst), lower, upper);
+                              as_vgpr(ctx, src));
+            Temp upper = bld.tmp(v1), lower = bld.tmp(v1);
+            bld.pseudo(aco_opcode::p_split_vector, Definition(lower), Definition(upper), src);
+            upper = bld.vop2(aco_opcode::v_and_b32, bld.def(v1), Operand::c32(0x7FFFFFFFu), upper);
+            bld.pseudo(aco_opcode::p_create_vector, Definition(dst), lower, upper);
       } else if (dst.regClass() == s1 && instr->def.bit_size == 16) {
-         Temp mask = bld.copy(bld.def(s1), Operand::c32(0x7fff));
-         if (ctx->block->fp_mode.denorm16_64 == fp_denorm_keep) {
-            bld.sop2(aco_opcode::s_and_b32, Definition(dst), bld.def(s1, scc), mask, src);
-         } else {
-            Temp tmp = bld.sop2(aco_opcode::s_and_b32, bld.def(s1), bld.def(s1, scc), mask, src);
-            bld.sop2(aco_opcode::s_mul_f16, Definition(dst), Operand::c16(0x3c00), tmp);
-         }
+            bld.sop2(aco_opcode::s_and_b32, Definition(dst), bld.def(s1, scc), Operand::c32(0x7fffu), src);
       } else if (dst.regClass() == s1 && instr->def.bit_size == 32) {
-         Temp mask = bld.copy(bld.def(s1), Operand::c32(0x7fffffff));
-         if (ctx->block->fp_mode.denorm32 == fp_denorm_keep) {
-            bld.sop2(aco_opcode::s_and_b32, Definition(dst), bld.def(s1, scc), mask, src);
-         } else {
-            Temp tmp = bld.sop2(aco_opcode::s_and_b32, bld.def(s1), bld.def(s1, scc), mask, src);
-            bld.sop2(aco_opcode::s_mul_f32, Definition(dst), Operand::c32(0x3f800000), tmp);
-         }
+            bld.sop2(aco_opcode::s_and_b32, Definition(dst), bld.def(s1, scc), Operand::c32(0x7fffffffu), src);
       } else {
-         isel_err(&instr->instr, "Unimplemented NIR instr bit size");
+            isel_err(&instr->instr, "Unimplemented NIR instr bit size");
       }
       break;
    }
@@ -3364,11 +3447,11 @@ visit_alu_instr(isel_context* ctx, nir_a
       Temp offset = get_alu_src(ctx, instr->src[1]);
 
       if (dst.regClass() == s1) {
-         bld.sop2(aco_opcode::s_bfm_b32, Definition(dst), bits, offset);
+            bld.sop2(aco_opcode::s_bfm_b32, Definition(dst), bits, offset);
       } else if (dst.regClass() == v1) {
-         bld.vop3(aco_opcode::v_bfm_b32, Definition(dst), bits, offset);
+            bld.vop3(aco_opcode::v_bfm_b32, Definition(dst), bits, offset);
       } else {
-         isel_err(&instr->instr, "Unimplemented NIR instr bit size");
+            isel_err(&instr->instr, "Unimplemented NIR instr bit size");
       }
       break;
    }
@@ -3377,94 +3460,42 @@ visit_alu_instr(isel_context* ctx, nir_a
       Temp insert = get_alu_src(ctx, instr->src[1], instr->def.num_components);
       Temp base = get_alu_src(ctx, instr->src[2], instr->def.num_components);
 
-      /* dst = (insert & bitmask) | (base & ~bitmask) */
-      if (dst.type() == RegType::sgpr) {
-         RegClass rc = dst.regClass();
-         assert(rc == s1 || rc == s2);
-
-         bool src_const[3] = {true, true, true};
-         uint64_t const_value[3] = {0, 0, 0};
-         for (unsigned i = 0; i < 3; i++) {
-            for (unsigned j = 0; j < instr->def.num_components; j++) {
-               nir_scalar s = nir_scalar_resolved(instr->src[i].src.ssa, instr->src[i].swizzle[j]);
-               if (!nir_scalar_is_const(s)) {
-                  src_const[i] = false;
-                  break;
-               }
-
-               const_value[i] |= nir_scalar_as_uint(s) << (instr->def.bit_size * j);
-            }
-         }
-
-         if (rc == s1 && src_const[0] && ctx->program->gfx_level >= GFX9 &&
-             (const_value[0] == 0xffff || const_value[0] == 0xffff0000)) {
-            if (const_value[0] == 0xffff) {
-               bld.sop2(aco_opcode::s_pack_lh_b32_b16, Definition(dst), insert, base);
-            } else {
-               bld.sop2(aco_opcode::s_pack_lh_b32_b16, Definition(dst), base, insert);
+      if (dst.type() == RegType::vgpr && dst.bytes() <= 4 && ctx->program->gfx_level >= GFX9) {
+            if (bitmask.type() == RegType::sgpr) {
+            insert = as_vgpr(ctx, insert);
+            base = as_vgpr(ctx, base);
+            } else if (insert.type() == RegType::sgpr) {
+            base = as_vgpr(ctx, base);
             }
+            bld.vop3(aco_opcode::v_bfi_b32, Definition(dst), bitmask, insert, base);
+            emit_split_vector(ctx, dst, instr->def.num_components);
             break;
-         }
+      }
+
+      /* Fallback for SGPR or older hardware: dst = (insert & bitmask) | (base & ~bitmask) */
+      if (dst.type() == RegType::sgpr) {
+            RegClass rc = dst.regClass();
+            assert(rc == s1 || rc == s2);
 
-         Temp lhs;
-         if (src_const[0] && src_const[1]) {
-            uint64_t const_lhs = const_value[1] & const_value[0];
-            if (rc == s1) {
-               lhs = bld.copy(bld.def(s1), Operand::c32(const_lhs));
-            } else {
-               lhs = bld.pseudo(aco_opcode::p_create_vector, bld.def(s2), Operand::c32(const_lhs),
-                                Operand::c32(const_lhs >> 32));
-            }
-         } else {
             aco_opcode s_and = rc == s1 ? aco_opcode::s_and_b32 : aco_opcode::s_and_b64;
-            lhs = bld.sop2(s_and, bld.def(rc), bld.def(s1, scc), insert, bitmask);
-         }
+            Temp lhs = bld.sop2(s_and, bld.def(rc), bld.def(s1, scc), insert, bitmask);
 
-         Temp rhs;
-         if (src_const[0] && src_const[2]) {
-            uint64_t const_rhs = const_value[2] & ~const_value[0];
-            if (rc == s1) {
-               rhs = bld.copy(bld.def(s1), Operand::c32(const_rhs));
-            } else {
-               rhs = bld.pseudo(aco_opcode::p_create_vector, bld.def(s2), Operand::c32(const_rhs),
-                                Operand::c32(const_rhs >> 32));
-            }
-         } else {
             aco_opcode s_andn2 = rc == s1 ? aco_opcode::s_andn2_b32 : aco_opcode::s_andn2_b64;
-            rhs = bld.sop2(s_andn2, bld.def(rc), bld.def(s1, scc), base, bitmask);
-         }
+            Temp rhs = bld.sop2(s_andn2, bld.def(rc), bld.def(s1, scc), base, bitmask);
 
-         aco_opcode s_or = rc == s1 ? aco_opcode::s_or_b32 : aco_opcode::s_or_b64;
-         bld.sop2(s_or, Definition(dst), bld.def(s1, scc), rhs, lhs);
-         break;
-      }
-
-      if (bitmask.type() == RegType::sgpr) {
-         insert = as_vgpr(ctx, insert);
-         base = as_vgpr(ctx, base);
-      } else if (insert.type() == RegType::sgpr) {
-         base = as_vgpr(ctx, base);
+            aco_opcode s_or = rc == s1 ? aco_opcode::s_or_b32 : aco_opcode::s_or_b64;
+            bld.sop2(s_or, Definition(dst), bld.def(s1, scc), rhs, lhs);
+            break;
       }
 
       if (dst.size() == 1) {
-         bld.vop3(aco_opcode::v_bfi_b32, Definition(dst), bitmask, insert, base);
-         emit_split_vector(ctx, dst, instr->def.num_components);
-      } else if (dst.size() == 2) {
-         Temp bitmask_lo = bld.tmp(v1), bitmask_hi = bld.tmp(v1);
-         bld.pseudo(aco_opcode::p_split_vector, Definition(bitmask_lo), Definition(bitmask_hi),
-                    bitmask);
-         Temp insert_lo = bld.tmp(v1), insert_hi = bld.tmp(v1);
-         bld.pseudo(aco_opcode::p_split_vector, Definition(insert_lo), Definition(insert_hi),
-                    insert);
-         Temp base_lo = bld.tmp(v1), base_hi = bld.tmp(v1);
-         bld.pseudo(aco_opcode::p_split_vector, Definition(base_lo), Definition(base_hi), base);
-
-         Temp res_lo = bld.vop3(aco_opcode::v_bfi_b32, bld.def(v1), bitmask_lo, insert_lo, base_lo);
-         Temp res_hi = bld.vop3(aco_opcode::v_bfi_b32, bld.def(v1), bitmask_hi, insert_hi, base_hi);
-
-         bld.pseudo(aco_opcode::p_create_vector, Definition(dst), res_lo, res_hi);
+            Temp lhs = bld.vop2(aco_opcode::v_and_b32, bld.def(v1), insert, bitmask);
+            Temp not_mask = bld.vop1(aco_opcode::v_not_b32, bld.def(v1), bitmask);
+            Temp rhs = bld.vop2(aco_opcode::v_and_b32, bld.def(v1), base, not_mask);
+            bld.vop2(aco_opcode::v_or_b32, Definition(dst), lhs, rhs);
+            emit_split_vector(ctx, dst, instr->def.num_components);
       } else {
-         isel_err(&instr->instr, "Unimplemented NIR instr bit size");
+            isel_err(&instr->instr, "Unimplemented NIR instr bit size for bitfield_select fallback");
       }
       break;
    }
