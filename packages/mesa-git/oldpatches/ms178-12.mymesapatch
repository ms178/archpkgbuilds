--- a/src/amd/compiler/aco_insert_NOPs.cpp	2025-06-27 20:25:53.353185796 +0200
+++ b/src/amd/compiler/aco_insert_NOPs.cpp	2025-06-27 20:35:41.054060312 +0200
@@ -25,99 +25,79 @@ struct State {
 };
 
 struct NOP_ctx_gfx6 {
-   void join(const NOP_ctx_gfx6& other)
-   {
-      set_vskip_mode_then_vector =
-         MAX2(set_vskip_mode_then_vector, other.set_vskip_mode_then_vector);
-      valu_wr_vcc_then_div_fmas = MAX2(valu_wr_vcc_then_div_fmas, other.valu_wr_vcc_then_div_fmas);
-      salu_wr_m0_then_gds_msg_ttrace =
-         MAX2(salu_wr_m0_then_gds_msg_ttrace, other.salu_wr_m0_then_gds_msg_ttrace);
-      valu_wr_exec_then_dpp = MAX2(valu_wr_exec_then_dpp, other.valu_wr_exec_then_dpp);
-      salu_wr_m0_then_lds = MAX2(salu_wr_m0_then_lds, other.salu_wr_m0_then_lds);
-      salu_wr_m0_then_moverel = MAX2(salu_wr_m0_then_moverel, other.salu_wr_m0_then_moverel);
-      setreg_then_getsetreg = MAX2(setreg_then_getsetreg, other.setreg_then_getsetreg);
-      vmem_store_then_wr_data |= other.vmem_store_then_wr_data;
-      smem_clause |= other.smem_clause;
-      smem_write |= other.smem_write;
-      for (unsigned i = 0; i < BITSET_WORDS(128); i++) {
-         smem_clause_read_write[i] |= other.smem_clause_read_write[i];
-         smem_clause_write[i] |= other.smem_clause_write[i];
+      void join(const NOP_ctx_gfx6& o)
+      {
+            set_vskip_mode_then_vector      = MAX2(set_vskip_mode_then_vector,      o.set_vskip_mode_then_vector);
+            valu_wr_vcc_then_div_fmas       = MAX2(valu_wr_vcc_then_div_fmas,       o.valu_wr_vcc_then_div_fmas);
+            salu_wr_m0_then_gds_msg_ttrace  = MAX2(salu_wr_m0_then_gds_msg_ttrace,  o.salu_wr_m0_then_gds_msg_ttrace);
+            valu_wr_exec_then_dpp           = MAX2(valu_wr_exec_then_dpp,           o.valu_wr_exec_then_dpp);
+            salu_wr_m0_then_lds             = MAX2(salu_wr_m0_then_lds,             o.salu_wr_m0_then_lds);
+            salu_wr_m0_then_moverel         = MAX2(salu_wr_m0_then_moverel,         o.salu_wr_m0_then_moverel);
+            setreg_then_getsetreg           = MAX2(setreg_then_getsetreg,           o.setreg_then_getsetreg);
+            vcc_wr_then_branch              = MAX2(vcc_wr_then_branch,              o.vcc_wr_then_branch);
+
+            vmem_store_then_wr_data        |= o.vmem_store_then_wr_data;
+
+            smem_clause |= o.smem_clause;
+            smem_write  |= o.smem_write;
+
+            for (unsigned i = 0; i < BITSET_WORDS(128); ++i) {
+                  smem_clause_read_write[i] |= o.smem_clause_read_write[i];
+                  smem_clause_write     [i] |= o.smem_clause_write[i];
+            }
       }
-   }
-
-   bool operator==(const NOP_ctx_gfx6& other)
-   {
-      return set_vskip_mode_then_vector == other.set_vskip_mode_then_vector &&
-             valu_wr_vcc_then_div_fmas == other.valu_wr_vcc_then_div_fmas &&
-             vmem_store_then_wr_data == other.vmem_store_then_wr_data &&
-             salu_wr_m0_then_gds_msg_ttrace == other.salu_wr_m0_then_gds_msg_ttrace &&
-             valu_wr_exec_then_dpp == other.valu_wr_exec_then_dpp &&
-             salu_wr_m0_then_lds == other.salu_wr_m0_then_lds &&
-             salu_wr_m0_then_moverel == other.salu_wr_m0_then_moverel &&
-             setreg_then_getsetreg == other.setreg_then_getsetreg &&
-             smem_clause == other.smem_clause && smem_write == other.smem_write &&
-             BITSET_EQUAL(smem_clause_read_write, other.smem_clause_read_write) &&
-             BITSET_EQUAL(smem_clause_write, other.smem_clause_write);
-   }
-
-   void add_wait_states(unsigned amount)
-   {
-      if ((set_vskip_mode_then_vector -= amount) < 0)
-         set_vskip_mode_then_vector = 0;
-
-      if ((valu_wr_vcc_then_div_fmas -= amount) < 0)
-         valu_wr_vcc_then_div_fmas = 0;
-
-      if ((salu_wr_m0_then_gds_msg_ttrace -= amount) < 0)
-         salu_wr_m0_then_gds_msg_ttrace = 0;
-
-      if ((valu_wr_exec_then_dpp -= amount) < 0)
-         valu_wr_exec_then_dpp = 0;
-
-      if ((salu_wr_m0_then_lds -= amount) < 0)
-         salu_wr_m0_then_lds = 0;
-
-      if ((salu_wr_m0_then_moverel -= amount) < 0)
-         salu_wr_m0_then_moverel = 0;
-
-      if ((setreg_then_getsetreg -= amount) < 0)
-         setreg_then_getsetreg = 0;
-
-      vmem_store_then_wr_data.reset();
-   }
-
-   /* setting MODE.vskip and then any vector op requires 2 wait states */
-   int8_t set_vskip_mode_then_vector = 0;
-
-   /* VALU writing VCC followed by v_div_fmas require 4 wait states */
-   int8_t valu_wr_vcc_then_div_fmas = 0;
-
-   /* SALU writing M0 followed by GDS, s_sendmsg or s_ttrace_data requires 1 wait state */
-   int8_t salu_wr_m0_then_gds_msg_ttrace = 0;
 
-   /* VALU writing EXEC followed by DPP requires 5 wait states */
-   int8_t valu_wr_exec_then_dpp = 0;
-
-   /* SALU writing M0 followed by some LDS instructions requires 1 wait state on GFX10 */
-   int8_t salu_wr_m0_then_lds = 0;
-
-   /* SALU writing M0 followed by s_moverel requires 1 wait state on GFX9 */
-   int8_t salu_wr_m0_then_moverel = 0;
-
-   /* s_setreg followed by a s_getreg/s_setreg of the same register needs 2 wait states
-    * currently we don't look at the actual register */
-   int8_t setreg_then_getsetreg = 0;
-
-   /* some memory instructions writing >64bit followed by a instructions
-    * writing the VGPRs holding the writedata requires 1 wait state */
-   std::bitset<256> vmem_store_then_wr_data;
-
-   /* we break up SMEM clauses that contain stores or overwrite an
-    * operand/definition of another instruction in the clause */
-   bool smem_clause = false;
-   bool smem_write = false;
-   BITSET_DECLARE(smem_clause_read_write, 128) = {0};
-   BITSET_DECLARE(smem_clause_write, 128) = {0};
+      bool operator==(const NOP_ctx_gfx6& o) const
+      {
+            return set_vskip_mode_then_vector      == o.set_vskip_mode_then_vector &&
+            valu_wr_vcc_then_div_fmas       == o.valu_wr_vcc_then_div_fmas &&
+            salu_wr_m0_then_gds_msg_ttrace  == o.salu_wr_m0_then_gds_msg_ttrace &&
+            valu_wr_exec_then_dpp           == o.valu_wr_exec_then_dpp &&
+            salu_wr_m0_then_lds             == o.salu_wr_m0_then_lds &&
+            salu_wr_m0_then_moverel         == o.salu_wr_m0_then_moverel &&
+            setreg_then_getsetreg           == o.setreg_then_getsetreg &&
+            vcc_wr_then_branch              == o.vcc_wr_then_branch &&
+            vmem_store_then_wr_data         == o.vmem_store_then_wr_data &&
+            smem_clause                     == o.smem_clause &&
+            smem_write                      == o.smem_write &&
+            BITSET_EQUAL(smem_clause_read_write, o.smem_clause_read_write) &&
+            BITSET_EQUAL(smem_clause_write,      o.smem_clause_write);
+      }
+
+      void add_wait_states(unsigned amount)
+      {
+            auto dec = [amount](int8_t& ctr)
+            {
+                  ctr = (ctr > amount) ? ctr - static_cast<int8_t>(amount) : 0;
+            };
+
+            dec(set_vskip_mode_then_vector);
+            dec(valu_wr_vcc_then_div_fmas);
+            dec(salu_wr_m0_then_gds_msg_ttrace);
+            dec(valu_wr_exec_then_dpp);
+            dec(salu_wr_m0_then_lds);
+            dec(salu_wr_m0_then_moverel);
+            dec(setreg_then_getsetreg);
+            dec(vcc_wr_then_branch);
+
+            vmem_store_then_wr_data.reset();
+      }
+
+      int8_t set_vskip_mode_then_vector      = 0; /* MODE.vskip → vector op  (2) */
+      int8_t valu_wr_vcc_then_div_fmas       = 0; /* VALU→VCC  → v_div_fmas  (4) */
+      int8_t salu_wr_m0_then_gds_msg_ttrace  = 0; /* M0 write  → GDS/sendmsg (1) */
+      int8_t valu_wr_exec_then_dpp           = 0; /* VALU→EXEC → DPP         (5) */
+      int8_t salu_wr_m0_then_lds             = 0; /* GFX9+ M0 write → LDS    (1) */
+      int8_t salu_wr_m0_then_moverel         = 0; /* GFX9   M0 write → moverel(1)*/
+      int8_t setreg_then_getsetreg           = 0; /* s_setreg → s_get/setreg (2) */
+      int8_t vcc_wr_then_branch              = 0; /* NEW: SALU→VCC → branch  (2) */
+
+      std::bitset<256> vmem_store_then_wr_data;
+
+      bool smem_clause = false;
+      bool smem_write  = false;
+      BITSET_DECLARE(smem_clause_read_write, 128) = {0};
+      BITSET_DECLARE(smem_clause_write,      128) = {0};
 };
 
 struct NOP_ctx_gfx10 {
@@ -322,9 +302,25 @@ get_wait_states(aco_ptr<Instruction>& in
 }
 
 bool
-regs_intersect(PhysReg a_reg, unsigned a_size, PhysReg b_reg, unsigned b_size)
+regs_intersect(PhysReg a_reg, unsigned a_size,
+               PhysReg b_reg, unsigned b_size)
 {
-   return a_reg > b_reg ? (a_reg - b_reg < b_size) : (b_reg - a_reg < a_size);
+      if (a_reg > b_reg) [[likely]]
+            return a_reg - b_reg < b_size;
+      else
+            return b_reg - a_reg < a_size;
+}
+
+static inline bool
+is_vcc_branch(const aco_ptr<Instruction>& instr)
+{
+      switch (instr->opcode) {
+            case aco_opcode::s_cbranch_vccz:
+            case aco_opcode::s_cbranch_vccnz:
+                  return true;
+            default:
+                  return false;
+      }
 }
 
 template <typename GlobalState, typename BlockState,
@@ -505,197 +501,225 @@ handle_smem_clause_hazards(Program* prog
 
 /* TODO: we don't handle accessing VCC using the actual SGPR instead of using the alias */
 void
-handle_instruction_gfx6(State& state, NOP_ctx_gfx6& ctx, aco_ptr<Instruction>& instr,
+handle_instruction_gfx6(State&                         state,
+                        NOP_ctx_gfx6&                  ctx,
+                        aco_ptr<Instruction>&          instr,
                         std::vector<aco_ptr<Instruction>>& new_instructions)
 {
-   /* check hazards */
-   int NOPs = 0;
-
-   if (instr->isSMEM()) {
-      if (state.program->gfx_level == GFX6) {
-         /* A read of an SGPR by SMRD instruction requires 4 wait states
-          * when the SGPR was written by a VALU instruction. According to LLVM,
-          * there is also an undocumented hardware behavior when the buffer
-          * descriptor is written by a SALU instruction */
-         for (unsigned i = 0; i < instr->operands.size(); i++) {
-            Operand op = instr->operands[i];
-            if (op.isConstant())
-               continue;
-
-            bool is_buffer_desc = i == 0 && op.size() > 2;
-            if (is_buffer_desc)
-               handle_valu_salu_then_read_hazard(state, &NOPs, 4, op);
-            else
-               handle_valu_then_read_hazard(state, &NOPs, 4, op);
-         }
-      }
-
-      handle_smem_clause_hazards(state.program, ctx, instr, &NOPs);
-   } else if (instr->isSALU()) {
-      if (instr->opcode == aco_opcode::s_setreg_b32 ||
-          instr->opcode == aco_opcode::s_setreg_imm32_b32 ||
-          instr->opcode == aco_opcode::s_getreg_b32) {
-         NOPs = MAX2(NOPs, ctx.setreg_then_getsetreg);
-      }
-
-      if (state.program->gfx_level == GFX9) {
-         if (instr->opcode == aco_opcode::s_movrels_b32 ||
-             instr->opcode == aco_opcode::s_movrels_b64 ||
-             instr->opcode == aco_opcode::s_movreld_b32 ||
-             instr->opcode == aco_opcode::s_movreld_b64) {
-            NOPs = MAX2(NOPs, ctx.salu_wr_m0_then_moverel);
-         }
-      }
+      /* ------------------------------------------------------ hazard checks */
+      int NOPs = 0;
 
-      if (instr->opcode == aco_opcode::s_sendmsg || instr->opcode == aco_opcode::s_ttracedata)
-         NOPs = MAX2(NOPs, ctx.salu_wr_m0_then_gds_msg_ttrace);
-   } else if (instr->isDS() && instr->ds().gds) {
-      NOPs = MAX2(NOPs, ctx.salu_wr_m0_then_gds_msg_ttrace);
-   } else if (instr->isVALU() || instr->isVINTRP()) {
-      if (instr->isDPP()) {
-         NOPs = MAX2(NOPs, ctx.valu_wr_exec_then_dpp);
-         handle_valu_then_read_hazard(state, &NOPs, 2, instr->operands[0]);
-      }
-
-      for (Definition def : instr->definitions) {
-         if (def.regClass().type() != RegType::sgpr) {
-            for (unsigned i = 0; i < def.size(); i++)
-               NOPs = MAX2(NOPs, ctx.vmem_store_then_wr_data[(def.physReg() & 0xff) + i]);
-         }
-      }
-
-      if ((instr->opcode == aco_opcode::v_readlane_b32 ||
-           instr->opcode == aco_opcode::v_readlane_b32_e64 ||
-           instr->opcode == aco_opcode::v_writelane_b32 ||
-           instr->opcode == aco_opcode::v_writelane_b32_e64) &&
-          !instr->operands[1].isConstant()) {
-         handle_valu_then_read_hazard(state, &NOPs, 4, instr->operands[1]);
+      /* NEW:  SALU writes VCC → next VCC branch needs 2 cycles (GFX9) */
+      if (is_vcc_branch(instr))
+            NOPs = MAX2(NOPs, ctx.vcc_wr_then_branch);
+
+      /* ------------------------- SMEM hazards ----------------------------- */
+      if (instr->isSMEM()) {
+            if (state.program->gfx_level == GFX6) {
+                  /* SGPR written by VALU → SMRD read  (4 wait states)               */
+                  for (unsigned i = 0; i < instr->operands.size(); ++i) {
+                        Operand op = instr->operands[i];
+                        if (op.isConstant())
+                              continue;
+
+                        bool is_buffer_desc = i == 0 && op.size() > 2;
+                        if (is_buffer_desc)
+                              handle_valu_salu_then_read_hazard(state, &NOPs, 4, op);
+                        else
+                              handle_valu_then_read_hazard(state, &NOPs, 4, op);
+                  }
+            }
+            handle_smem_clause_hazards(state.program, ctx, instr, &NOPs);
       }
+      /* ------------------------- SALU hazards ----------------------------- */
+      else if (instr->isSALU()) {
+            if (instr->opcode == aco_opcode::s_setreg_b32 ||
+                  instr->opcode == aco_opcode::s_setreg_imm32_b32 ||
+                  instr->opcode == aco_opcode::s_getreg_b32) {
+                  NOPs = MAX2(NOPs, ctx.setreg_then_getsetreg);
+                  }
+
+                  if (state.program->gfx_level == GFX9) {
+                        if (instr->opcode == aco_opcode::s_movrels_b32 ||
+                              instr->opcode == aco_opcode::s_movrels_b64 ||
+                              instr->opcode == aco_opcode::s_movreld_b32 ||
+                              instr->opcode == aco_opcode::s_movreld_b64)
+                              NOPs = MAX2(NOPs, ctx.salu_wr_m0_then_moverel);
+                  }
+
+                  if (instr->opcode == aco_opcode::s_sendmsg ||
+                        instr->opcode == aco_opcode::s_ttracedata)
+                        NOPs = MAX2(NOPs, ctx.salu_wr_m0_then_gds_msg_ttrace);
+      }
+      /* ------------------------- DS / GDS hazards ------------------------- */
+      else if (instr->isDS() && instr->ds().gds) {
+            NOPs = MAX2(NOPs, ctx.salu_wr_m0_then_gds_msg_ttrace);
+      }
+      /* ------------------------- VALU / VINTRP hazards -------------------- */
+      else if (instr->isVALU() || instr->isVINTRP()) {
+            if (instr->isDPP()) {
+                  NOPs = MAX2(NOPs, ctx.valu_wr_exec_then_dpp);
+                  handle_valu_then_read_hazard(state, &NOPs, 2, instr->operands[0]);
+            }
 
-      /* It's required to insert 1 wait state if the dst VGPR of any v_interp_*
-       * is followed by a read with v_readfirstlane or v_readlane to fix GPU
-       * hangs on GFX6. Note that v_writelane_* is apparently not affected.
-       * This hazard isn't documented anywhere but AMD confirmed that hazard.
-       */
-      if (state.program->gfx_level == GFX6 &&
-          (instr->opcode == aco_opcode::v_readlane_b32 || /* GFX6 doesn't have v_readlane_b32_e64 */
-           instr->opcode == aco_opcode::v_readfirstlane_b32)) {
-         handle_vintrp_then_read_hazard(state, &NOPs, 1, instr->operands[0]);
-      }
+            /* VMEM-store → later write of WRDATA                               */
+            for (Definition def : instr->definitions) {
+                  if (def.regClass().type() != RegType::sgpr) {
+                        for (unsigned i = 0; i < def.size(); ++i)
+                              NOPs = MAX2(NOPs, ctx.vmem_store_then_wr_data[(def.physReg() & 0xff) + i]);
+                  }
+            }
 
-      if (instr->opcode == aco_opcode::v_div_fmas_f32 ||
-          instr->opcode == aco_opcode::v_div_fmas_f64)
-         NOPs = MAX2(NOPs, ctx.valu_wr_vcc_then_div_fmas);
-   } else if (instr->isVMEM() || instr->isFlatLike()) {
-      /* If the VALU writes the SGPR that is used by a VMEM, the user must add five wait states. */
-      for (Operand op : instr->operands) {
-         if (!op.isConstant() && !op.isUndefined() && op.regClass().type() == RegType::sgpr)
-            handle_valu_then_read_hazard(state, &NOPs, 5, op);
+            if ((instr->opcode == aco_opcode::v_readlane_b32 ||
+                  instr->opcode == aco_opcode::v_readlane_b32_e64 ||
+                  instr->opcode == aco_opcode::v_writelane_b32 ||
+                  instr->opcode == aco_opcode::v_writelane_b32_e64) &&
+                  !instr->operands[1].isConstant())
+                  handle_valu_then_read_hazard(state, &NOPs, 4, instr->operands[1]);
+
+            /* undocumented GFX6 VINTRP → readlane hazard                        */
+            if (state.program->gfx_level == GFX6 &&
+                  (instr->opcode == aco_opcode::v_readlane_b32 ||
+                  instr->opcode == aco_opcode::v_readfirstlane_b32))
+                  handle_vintrp_then_read_hazard(state, &NOPs, 1, instr->operands[0]);
+
+            if (instr->opcode == aco_opcode::v_div_fmas_f32 ||
+                  instr->opcode == aco_opcode::v_div_fmas_f64)
+                  NOPs = MAX2(NOPs, ctx.valu_wr_vcc_then_div_fmas);
       }
-   }
-
-   if (!instr->isSALU() && instr->format != Format::SMEM)
-      NOPs = MAX2(NOPs, ctx.set_vskip_mode_then_vector);
-
-   if (state.program->gfx_level == GFX9) {
-      bool lds_scratch_global = (instr->isScratch() || instr->isGlobal()) && instr->flatlike().lds;
-      if (instr->isVINTRP() || lds_scratch_global ||
-          instr->opcode == aco_opcode::ds_read_addtid_b32 ||
-          instr->opcode == aco_opcode::ds_write_addtid_b32 ||
-          instr->opcode == aco_opcode::buffer_store_lds_dword) {
-         NOPs = MAX2(NOPs, ctx.salu_wr_m0_then_lds);
+      /* ------------------------- VMEM / FLAT hazards ---------------------- */
+      else if (instr->isVMEM() || instr->isFlatLike()) {
+            for (Operand op : instr->operands) {
+                  if (!op.isConstant() && !op.isUndefined() &&
+                        op.regClass().type() == RegType::sgpr)
+                        handle_valu_then_read_hazard(state, &NOPs, 5, op);
+            }
       }
-   }
-
-   ctx.add_wait_states(NOPs + get_wait_states(instr));
-
-   // TODO: try to schedule the NOP-causing instruction up to reduce the number of stall cycles
-   if (NOPs) {
-      /* create NOP */
-      aco_ptr<Instruction> nop{create_instruction(aco_opcode::s_nop, Format::SOPP, 0, 0)};
-      nop->salu().imm = NOPs - 1;
-      new_instructions.emplace_back(std::move(nop));
-   }
 
-   /* update information to check for later hazards */
-   if ((ctx.smem_clause || ctx.smem_write) && (NOPs || instr->format != Format::SMEM)) {
-      ctx.smem_clause = false;
-      ctx.smem_write = false;
+      /* v_skip wait-state (non-SALU/non-SMEM)                                */
+      if (!instr->isSALU() && instr->format != Format::SMEM)
+            NOPs = MAX2(NOPs, ctx.set_vskip_mode_then_vector);
 
+      /* Additional GFX9 LDS scratch/global hazard                            */
+      if (state.program->gfx_level == GFX9) {
+            bool lds_scratch_global = (instr->isScratch() || instr->isGlobal()) &&
+            instr->flatlike().lds;
+            if (instr->isVINTRP() || lds_scratch_global ||
+                  instr->opcode == aco_opcode::ds_read_addtid_b32 ||
+                  instr->opcode == aco_opcode::ds_write_addtid_b32 ||
+                  instr->opcode == aco_opcode::buffer_store_lds_dword)
+                  NOPs = MAX2(NOPs, ctx.salu_wr_m0_then_lds);
+      }
+
+      /* --------------------------------------------------------------------
+       *  Emit the computed NOP(s)  &  age the hazard counters
+       * ------------------------------------------------------------------ */
+      ctx.add_wait_states(NOPs + get_wait_states(instr));
+
+      if (NOPs) {
+            aco_ptr<Instruction> nop{
+                  create_instruction(aco_opcode::s_nop, Format::SOPP, 0, 0)};
+                  nop->salu().imm = NOPs - 1;
+                  new_instructions.emplace_back(std::move(nop));
+      }
+
+      /* --------------------------------------------------------------------
+       *  Update context for hazards that start with THIS instruction
+       * ------------------------------------------------------------------ */
+
+      /* SMEM clause tracking reset                                           */
+      if ((ctx.smem_clause || ctx.smem_write) &&
+            (NOPs || instr->format != Format::SMEM)) {
+            ctx.smem_clause = ctx.smem_write = false;
       if (state.program->dev.xnack_enabled) {
-         BITSET_ZERO(ctx.smem_clause_read_write);
-         BITSET_ZERO(ctx.smem_clause_write);
+            BITSET_ZERO(ctx.smem_clause_read_write);
+            BITSET_ZERO(ctx.smem_clause_write);
       }
-   }
-
-   if (instr->isSMEM()) {
-      if (instr->definitions.empty() || instr_info.is_atomic[(unsigned)instr->opcode]) {
-         ctx.smem_write = true;
-      } else {
-         ctx.smem_clause = true;
-
-         if (state.program->dev.xnack_enabled) {
-            for (Operand op : instr->operands) {
-               if (!op.isConstant()) {
-                  set_bitset_range(ctx.smem_clause_read_write, op.physReg(), op.size());
-               }
             }
 
-            Definition def = instr->definitions[0];
-            set_bitset_range(ctx.smem_clause_read_write, def.physReg(), def.size());
-            set_bitset_range(ctx.smem_clause_write, def.physReg(), def.size());
-         }
-      }
-   } else if (instr->isVALU()) {
-      for (Definition def : instr->definitions) {
-         if (def.regClass().type() == RegType::sgpr) {
-            if (def.physReg() == vcc || def.physReg() == vcc_hi) {
-               ctx.valu_wr_vcc_then_div_fmas = 4;
+            /* --- SMEM starts/continues a clause --------------------------------- */
+            if (instr->isSMEM()) {
+                  if (instr->definitions.empty() ||
+                        instr_info.is_atomic[(unsigned)instr->opcode])
+                        ctx.smem_write = true;
+                  else {
+                        ctx.smem_clause = true;
+                        if (state.program->dev.xnack_enabled) {
+                              for (Operand op : instr->operands)
+                                    if (!op.isConstant())
+                                          set_bitset_range(ctx.smem_clause_read_write,
+                                                           op.physReg(), op.size());
+
+                                          Definition def = instr->definitions[0];
+                                    set_bitset_range(ctx.smem_clause_read_write,
+                                                     def.physReg(), def.size());
+                                    set_bitset_range(ctx.smem_clause_write,
+                                                     def.physReg(), def.size());
+                        }
+                  }
             }
-            if (def.physReg() == exec || def.physReg() == exec_hi) {
-               ctx.valu_wr_exec_then_dpp = 5;
+            /* --- VALU post-processing ------------------------------------------- */
+            else if (instr->isVALU()) {
+                  for (Definition def : instr->definitions) {
+                        if (def.regClass().type() == RegType::sgpr) {
+                              if (def.physReg() == vcc || def.physReg() == vcc_hi)
+                                    ctx.valu_wr_vcc_then_div_fmas = 4;
+                              if (def.physReg() == exec || def.physReg() == exec_hi)
+                                    ctx.valu_wr_exec_then_dpp = 5;
+                        }
+                  }
+            }
+            /* --- SALU post-processing ------------------------------------------- */
+            else if (instr->isSALU()) {
+                  if (!instr->definitions.empty()) {
+                        Definition def = instr->definitions[0];
+                        if (def.physReg() == m0) {
+                              ctx.salu_wr_m0_then_gds_msg_ttrace = 1;
+                              ctx.salu_wr_m0_then_lds            = 1;
+                              ctx.salu_wr_m0_then_moverel        = 1;
+                        }
+                  } else if (instr->opcode == aco_opcode::s_setreg_b32 ||
+                        instr->opcode == aco_opcode::s_setreg_imm32_b32) {
+                        SALU_instruction& sopk = instr->salu();
+                  unsigned offset = (sopk.imm >> 6) & 0x1f;
+                  unsigned size   = ((sopk.imm >> 11) & 0x1f) + 1;
+                  unsigned reg    = sopk.imm & 0x3f;
+                  ctx.setreg_then_getsetreg = 2;
+
+                  if (reg == 1 && offset >= 28 && size > (28 - offset))
+                        ctx.set_vskip_mode_then_vector = 2;
+                        }
+            }
+            /* --- VMEM store WRDATA tracker -------------------------------------- */
+            else if (instr->isVMEM() || instr->isFlatLike()) {
+                  bool consider_buf  = (instr->isMUBUF() || instr->isMTBUF()) &&
+                  instr->operands.size() == 4 &&
+                  instr->operands[3].size() > 2 &&
+                  instr->operands[2].physReg() >= 128;
+                  bool consider_mimg = instr->isMIMG() &&
+                  instr->operands[1].regClass().type() == RegType::vgpr &&
+                  instr->operands[1].size() > 2 &&
+                  instr->operands[0].size() == 4;
+                  bool consider_flat = instr->isFlatLike() && instr->operands.size() == 3 &&
+                  instr->operands[2].size() > 2;
+
+                  if (consider_buf || consider_mimg || consider_flat) {
+                        PhysReg wrdata = instr->operands[consider_flat ? 2 : 3].physReg();
+                        unsigned size  = instr->operands[consider_flat ? 2 : 3].size();
+                        for (unsigned i = 0; i < size; ++i)
+                              ctx.vmem_store_then_wr_data[(wrdata & 0xff) + i] = 1;
+                  }
+            }
+
+            /* ------- NEW: track SALU writes to VCC for next branch --------------- */
+            if (instr->isSALU()) {
+                  for (Definition def : instr->definitions) {
+                        if (def.physReg() == vcc || def.physReg() == vcc_hi) {
+                              ctx.vcc_wr_then_branch = 2;   /* Vega needs 2-cycle delay */
+                              break;
+                        }
+                  }
             }
-         }
-      }
-   } else if (instr->isSALU()) {
-      if (!instr->definitions.empty()) {
-         /* all other definitions should be SCC */
-         Definition def = instr->definitions[0];
-         if (def.physReg() == m0) {
-            ctx.salu_wr_m0_then_gds_msg_ttrace = 1;
-            ctx.salu_wr_m0_then_lds = 1;
-            ctx.salu_wr_m0_then_moverel = 1;
-         }
-      } else if (instr->opcode == aco_opcode::s_setreg_b32 ||
-                 instr->opcode == aco_opcode::s_setreg_imm32_b32) {
-         SALU_instruction& sopk = instr->salu();
-         unsigned offset = (sopk.imm >> 6) & 0x1f;
-         unsigned size = ((sopk.imm >> 11) & 0x1f) + 1;
-         unsigned reg = sopk.imm & 0x3f;
-         ctx.setreg_then_getsetreg = 2;
-
-         if (reg == 1 && offset >= 28 && size > (28 - offset))
-            ctx.set_vskip_mode_then_vector = 2;
-      }
-   } else if (instr->isVMEM() || instr->isFlatLike()) {
-      /* >64-bit MUBUF/MTBUF store with a constant in SOFFSET */
-      bool consider_buf = (instr->isMUBUF() || instr->isMTBUF()) && instr->operands.size() == 4 &&
-                          instr->operands[3].size() > 2 && instr->operands[2].physReg() >= 128;
-      /* MIMG store with a 128-bit T# with more than two bits set in dmask (making it a >64-bit
-       * store) */
-      bool consider_mimg = instr->isMIMG() &&
-                           instr->operands[1].regClass().type() == RegType::vgpr &&
-                           instr->operands[1].size() > 2 && instr->operands[0].size() == 4;
-      /* FLAT/GLOBAL/SCRATCH store with >64-bit data */
-      bool consider_flat =
-         instr->isFlatLike() && instr->operands.size() == 3 && instr->operands[2].size() > 2;
-      if (consider_buf || consider_mimg || consider_flat) {
-         PhysReg wrdata = instr->operands[consider_flat ? 2 : 3].physReg();
-         unsigned size = instr->operands[consider_flat ? 2 : 3].size();
-         for (unsigned i = 0; i < size; i++)
-            ctx.vmem_store_then_wr_data[(wrdata & 0xff) + i] = 1;
-      }
-   }
 }
 
 bool
