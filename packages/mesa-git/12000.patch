From 0aa39a45cb85bc666705da76ae4e8f92a7669799 Mon Sep 17 00:00:00 2001
From: Tony Wasserka <tony.wasserka@gmx.de>
Date: Tue, 20 Jul 2021 17:05:43 +0200
Subject: [PATCH 1/3] aco/spill: Use arena allocator for next use distances

---
 src/amd/compiler/aco_spill.cpp | 14 +++++++++++---
 src/amd/compiler/meson.build   |  2 +-
 2 files changed, 12 insertions(+), 4 deletions(-)

diff --git a/src/amd/compiler/aco_spill.cpp b/src/amd/compiler/aco_spill.cpp
index 96f3bb85061e..16c97bf77463 100644
--- a/src/amd/compiler/aco_spill.cpp
+++ b/src/amd/compiler/aco_spill.cpp
@@ -31,12 +31,14 @@
 #include <algorithm>
 #include <cstring>
 #include <map>
+#include <memory_resource>
 #include <set>
 #include <stack>
 #include <unordered_map>
 #include <unordered_set>
 #include <vector>
 
+
 namespace std {
 template <> struct hash<aco::Temp> {
    size_t operator()(aco::Temp temp) const noexcept
@@ -70,10 +72,13 @@ struct spill_ctx {
    std::vector<std::unordered_map<Temp, uint32_t>> spills_entry;
    std::vector<std::unordered_map<Temp, uint32_t>> spills_exit;
 
+   std::pmr::monotonic_buffer_resource memory;
+
    std::vector<bool> processed;
    std::stack<Block*, std::vector<Block*>> loop_header;
-   std::vector<std::unordered_map<Temp, std::pair<uint32_t, uint32_t>>> next_use_distances_start;
-   std::vector<std::unordered_map<Temp, std::pair<uint32_t, uint32_t>>> next_use_distances_end;
+   using next_use_distance_startend_type = std::pmr::unordered_map<Temp, std::pair<uint32_t, uint32_t>>;
+   std::pmr::vector<next_use_distance_startend_type> next_use_distances_start;
+   std::pmr::vector<next_use_distance_startend_type> next_use_distances_end;
    std::vector<std::vector<std::pair<Temp, uint32_t>>> local_next_use_distance; /* Working buffer */
    std::vector<std::pair<RegClass, std::unordered_set<uint32_t>>> interferences;
    std::vector<std::vector<uint32_t>> affinities;
@@ -87,7 +92,10 @@ struct spill_ctx {
        : target_pressure(target_pressure_), program(program_),
          register_demand(std::move(register_demand_)), renames(program->blocks.size()),
          spills_entry(program->blocks.size()), spills_exit(program->blocks.size()),
-         processed(program->blocks.size(), false), wave_size(program->wave_size)
+         processed(program->blocks.size(), false),
+         next_use_distances_start(&memory),
+         next_use_distances_end(&memory),
+         wave_size(program->wave_size)
    {}
 
    void add_affinity(uint32_t first, uint32_t second)
diff --git a/src/amd/compiler/meson.build b/src/amd/compiler/meson.build
index 9e47b69f4dbf..4608b142a0ac 100644
--- a/src/amd/compiler/meson.build
+++ b/src/amd/compiler/meson.build
@@ -82,7 +82,7 @@ libaco_files = files(
   'aco_validate.cpp',
 )
 
-cpp_args_aco = cpp.get_supported_arguments(['-fno-exceptions', '-fno-rtti', '-Wimplicit-fallthrough', '-Wshadow', '-DNOMINMAX'])
+cpp_args_aco = cpp.get_supported_arguments(['-fno-exceptions', '-fno-rtti', '-Wimplicit-fallthrough', '-Wshadow', '-DNOMINMAX', '-std=c++17'])
 
 _libaco = static_library(
   'aco',
-- 
GitLab


From c7d596dc1abf6a1563d61e924be93a4a596a81b3 Mon Sep 17 00:00:00 2001
From: Tony Wasserka <tony.wasserka@gmx.de>
Date: Wed, 21 Jul 2021 11:44:45 +0200
Subject: [PATCH 2/3] aco/spill: Destroy next use distance maps through the
 allocator

---
 src/amd/compiler/aco_spill.cpp | 17 +++++++++++++----
 1 file changed, 13 insertions(+), 4 deletions(-)

diff --git a/src/amd/compiler/aco_spill.cpp b/src/amd/compiler/aco_spill.cpp
index 16c97bf77463..e3bdcf85d2a3 100644
--- a/src/amd/compiler/aco_spill.cpp
+++ b/src/amd/compiler/aco_spill.cpp
@@ -64,6 +64,13 @@ struct remat_info {
    Instruction* instr;
 };
 
+/* Drop-in replacement for C++20's std::pmr::polymorphic_allocator<T>::new_object */
+template<typename T, typename Alloc, typename... Args>
+[[nodiscard]] T* new_object(Alloc& alloc, Args&&... args) {
+   void* ptr = alloc.allocate(sizeof(T), alignof(T));
+   return new (ptr) T(std::forward<Args>(args)...);
+}
+
 struct spill_ctx {
    RegisterDemand target_pressure;
    Program* program;
@@ -77,8 +84,10 @@ struct spill_ctx {
    std::vector<bool> processed;
    std::stack<Block*, std::vector<Block*>> loop_header;
    using next_use_distance_startend_type = std::pmr::unordered_map<Temp, std::pair<uint32_t, uint32_t>>;
-   std::pmr::vector<next_use_distance_startend_type> next_use_distances_start;
-   std::pmr::vector<next_use_distance_startend_type> next_use_distances_end;
+   std::pmr::vector<next_use_distance_startend_type>* next_use_distances_start_ptr;
+   std::pmr::vector<next_use_distance_startend_type>* next_use_distances_end_ptr;
+   std::pmr::vector<next_use_distance_startend_type>& next_use_distances_start = *next_use_distances_start_ptr;
+   std::pmr::vector<next_use_distance_startend_type>& next_use_distances_end = *next_use_distances_end_ptr;
    std::vector<std::vector<std::pair<Temp, uint32_t>>> local_next_use_distance; /* Working buffer */
    std::vector<std::pair<RegClass, std::unordered_set<uint32_t>>> interferences;
    std::vector<std::vector<uint32_t>> affinities;
@@ -93,8 +102,8 @@ struct spill_ctx {
          register_demand(std::move(register_demand_)), renames(program->blocks.size()),
          spills_entry(program->blocks.size()), spills_exit(program->blocks.size()),
          processed(program->blocks.size(), false),
-         next_use_distances_start(&memory),
-         next_use_distances_end(&memory),
+         next_use_distances_start_ptr(new_object<std::pmr::vector<next_use_distance_startend_type>>(memory, &memory)),
+         next_use_distances_end_ptr(new_object<std::pmr::vector<next_use_distance_startend_type>>(memory, &memory)),
          wave_size(program->wave_size)
    {}
 
-- 
GitLab


From 11a499aa303b18842b21277a048e38a8f271aa12 Mon Sep 17 00:00:00 2001
From: Tony Wasserka <tony.wasserka@gmx.de>
Date: Wed, 21 Jul 2021 17:19:13 +0200
Subject: [PATCH 3/3] aco/spill: Use arena allocator for spills

---
 src/amd/compiler/aco_spill.cpp | 11 ++++++-----
 1 file changed, 6 insertions(+), 5 deletions(-)

diff --git a/src/amd/compiler/aco_spill.cpp b/src/amd/compiler/aco_spill.cpp
index e3bdcf85d2a3..7123206cc394 100644
--- a/src/amd/compiler/aco_spill.cpp
+++ b/src/amd/compiler/aco_spill.cpp
@@ -74,13 +74,14 @@ template<typename T, typename Alloc, typename... Args>
 struct spill_ctx {
    RegisterDemand target_pressure;
    Program* program;
-   std::vector<std::vector<RegisterDemand>> register_demand;
-   std::vector<std::map<Temp, Temp>> renames;
-   std::vector<std::unordered_map<Temp, uint32_t>> spills_entry;
-   std::vector<std::unordered_map<Temp, uint32_t>> spills_exit;
 
    std::pmr::monotonic_buffer_resource memory;
 
+   std::vector<std::vector<RegisterDemand>> register_demand;
+   std::vector<std::map<Temp, Temp>> renames;
+   std::pmr::vector<std::pmr::unordered_map<Temp, uint32_t>> spills_entry;
+   std::pmr::vector<std::pmr::unordered_map<Temp, uint32_t>> spills_exit;
+
    std::vector<bool> processed;
    std::stack<Block*, std::vector<Block*>> loop_header;
    using next_use_distance_startend_type = std::pmr::unordered_map<Temp, std::pair<uint32_t, uint32_t>>;
@@ -100,7 +101,7 @@ struct spill_ctx {
              std::vector<std::vector<RegisterDemand>> register_demand_)
        : target_pressure(target_pressure_), program(program_),
          register_demand(std::move(register_demand_)), renames(program->blocks.size()),
-         spills_entry(program->blocks.size()), spills_exit(program->blocks.size()),
+         spills_entry(program->blocks.size(), &memory), spills_exit(program->blocks.size(), &memory),
          processed(program->blocks.size(), false),
          next_use_distances_start_ptr(new_object<std::pmr::vector<next_use_distance_startend_type>>(memory, &memory)),
          next_use_distances_end_ptr(new_object<std::pmr::vector<next_use_distance_startend_type>>(memory, &memory)),
-- 
GitLab

