From 922cbeab1df293bb22e06e04f32776134301edaa Mon Sep 17 00:00:00 2001
From: Yonggang Luo <luoyonggang@gmail.com>
Date: Sun, 27 Mar 2022 07:43:49 +0800
Subject: [PATCH 01/10] meson: Fixes timespec_get detect code

Add functions_to_detect dictionary to records the paths to include

Signed-off-by: Yonggang Luo <luoyonggang@gmail.com>
Reviewed-by: Jason Ekstrand <jason.ekstrand@collabora.com>
---
 meson.build | 18 +++++++++++++++---
 1 file changed, 15 insertions(+), 3 deletions(-)

diff --git a/meson.build b/meson.build
index 189a5c51ec4f..c83e41c248c6 100644
--- a/meson.build
+++ b/meson.build
@@ -1410,9 +1410,21 @@ foreach h : ['xlocale.h', 'linux/futex.h', 'endian.h', 'dlfcn.h', 'sys/shm.h', '
   endif
 endforeach
 
-foreach f : ['strtof', 'mkostemp', 'timespec_get', 'memfd_create', 'random_r',
-             'flock', 'strtok_r', 'getrandom', 'qsort_r', 'qsort_s']
-  if cc.has_function(f)
+functions_to_detect = {
+  'strtof': '',
+  'mkostemp': '',
+  'timespec_get': '#include <time.h>',
+  'memfd_create': '',
+  'random_r': '',
+  'flock': '',
+  'strtok_r': '',
+  'getrandom': '',
+  'qsort_r': '',
+  'qsort_s': '',
+}
+
+foreach f, prefix: functions_to_detect
+  if cc.has_function(f, prefix: prefix)
     pre_args += '-DHAVE_@0@'.format(f.to_upper())
   endif
 endforeach
-- 
GitLab


From e9a571c9e02c8812b83a1a55a530e0a7e70fd3f5 Mon Sep 17 00:00:00 2001
From: Yonggang Luo <luoyonggang@gmail.com>
Date: Fri, 25 Mar 2022 03:46:29 +0800
Subject: [PATCH 02/10] c11/threads: Remove the detecting code for
 `HAVE_TIMESPEC_GET` in threads_win32.h

The meson already detecting it properly now, so remove the duplicated detecting code

Signed-off-by: Yonggang Luo <luoyonggang@gmail.com>
Reviewed-by: Jason Ekstrand <jason.ekstrand@collabora.com>
---
 include/c11/threads_win32.h | 5 -----
 1 file changed, 5 deletions(-)

diff --git a/include/c11/threads_win32.h b/include/c11/threads_win32.h
index 27637d089b03..13feb820d079 100644
--- a/include/c11/threads_win32.h
+++ b/include/c11/threads_win32.h
@@ -64,11 +64,6 @@ Configuration macro:
 #error EMULATED_THREADS_USE_NATIVE_CALL_ONCE requires _WIN32_WINNT>=0x0600
 #endif
 
-/* Visual Studio 2015 and later */
-#ifdef _MSC_VER
-#define HAVE_TIMESPEC_GET
-#endif
-
 /*---------------------------- macros ----------------------------*/
 #ifdef EMULATED_THREADS_USE_NATIVE_CALL_ONCE
 #define ONCE_FLAG_INIT INIT_ONCE_STATIC_INIT
-- 
GitLab


From 32efec5adb2b9ac0ad2906cb6f7bf960d1cbb989 Mon Sep 17 00:00:00 2001
From: Yonggang Luo <luoyonggang@gmail.com>
Date: Sat, 19 Feb 2022 13:19:08 +0800
Subject: [PATCH 03/10] c11: Create c11/time.h

Detecting if `struct timespec` present with meson
Define TIME_UTC in `c11/time.h` instead `c11/threads.h`
Define `struct timespec` in `c11/time.h` when not present.

Signed-off-by: Yonggang Luo <luoyonggang@gmail.com>
---
 include/c11/threads.h |  7 +-----
 include/c11/time.h    | 51 +++++++++++++++++++++++++++++++++++++++++++
 meson.build           |  4 ++++
 3 files changed, 56 insertions(+), 6 deletions(-)
 create mode 100644 include/c11/time.h

diff --git a/include/c11/threads.h b/include/c11/threads.h
index 790f52cb49f5..be68e161bb25 100644
--- a/include/c11/threads.h
+++ b/include/c11/threads.h
@@ -29,13 +29,8 @@
 #ifndef EMULATED_THREADS_H_INCLUDED_
 #define EMULATED_THREADS_H_INCLUDED_
 
-#include <time.h>
-
-#ifndef TIME_UTC
-#define TIME_UTC 1
-#endif
-
 #include "c99_compat.h" /* for `inline` */
+#include "c11/time.h"
 
 /*---------------------------- types ----------------------------*/
 typedef void (*tss_dtor_t)(void*);
diff --git a/include/c11/time.h b/include/c11/time.h
new file mode 100644
index 000000000000..1d9b964c95cd
--- /dev/null
+++ b/include/c11/time.h
@@ -0,0 +1,51 @@
+/*
+ * Copyright 2022 Yonggang Luo
+ * SPDX-License-Identifier: MIT
+ *
+ * C11 <time.h> emulation library
+ */
+
+#ifndef C11_TIME_H_INCLUDED_
+#define C11_TIME_H_INCLUDED_
+
+#include <time.h>
+
+/*---------------------------- macros ---------------------------*/
+
+#ifndef TIME_UTC
+#define TIME_UTC 1
+#endif
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/*---------------------------- types ----------------------------*/
+
+/*
+ * On MINGW `struct timespec` present but `timespec_get` may not present;
+ * On MSVC `struct timespec` and `timespec_get` present at the same time;
+ * So detecting `HAVE_STRUCT_TIMESPEC` in meson script dynamically.
+ */
+#ifndef HAVE_STRUCT_TIMESPEC
+struct timespec
+{
+    time_t tv_sec;  // Seconds - >= 0
+    long   tv_nsec; // Nanoseconds - [0, 999999999]
+};
+#endif
+
+/*-------------------------- functions --------------------------*/
+
+#ifndef HAVE_TIMESPEC_GET
+/*-------------------- 7.25.7 Time functions --------------------*/
+// 7.25.6.1
+static inline int
+timespec_get(struct timespec *ts, int base);
+#endif
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* C11_TIME_H_INCLUDED_ */
diff --git a/meson.build b/meson.build
index c83e41c248c6..9bf7fcb991bb 100644
--- a/meson.build
+++ b/meson.build
@@ -1429,6 +1429,10 @@ foreach f, prefix: functions_to_detect
   endif
 endforeach
 
+if cc.has_header_symbol('time.h', 'struct timespec')
+   pre_args += '-DHAVE_STRUCT_TIMESPEC'
+endif
+
 if cc.has_header_symbol('errno.h', 'program_invocation_name',
                         args : '-D_GNU_SOURCE')
    pre_args += '-DHAVE_PROGRAM_INVOCATION_NAME'
-- 
GitLab


From 002cdca139d0cac1bb25dc5370e08838eea38ef4 Mon Sep 17 00:00:00 2001
From: Yonggang Luo <luoyonggang@gmail.com>
Date: Sat, 9 Apr 2022 18:59:34 +0800
Subject: [PATCH 04/10] c11: Move the implementation of timespec_get into
 time.c

Signed-off-by: Yonggang Luo <luoyonggang@gmail.com>
---
 include/c11/threads_posix.h       | 16 ------------
 include/c11/threads_win32.h       | 27 -------------------
 include/c11/time.h                |  2 +-
 src/mapi/es1api/meson.build       |  2 +-
 src/mapi/es2api/meson.build       |  2 +-
 src/mapi/glapi/meson.build        |  2 +-
 src/mapi/shared-glapi/meson.build |  4 +--
 src/util/c11/meson.build          | 38 +++++++++++++++++++++++++++
 src/util/c11/time.c               | 43 +++++++++++++++++++++++++++++++
 src/util/meson.build              |  2 ++
 10 files changed, 89 insertions(+), 49 deletions(-)
 create mode 100644 src/util/c11/meson.build
 create mode 100644 src/util/c11/time.c

diff --git a/include/c11/threads_posix.h b/include/c11/threads_posix.h
index 802526a77c84..8e17686d51a4 100644
--- a/include/c11/threads_posix.h
+++ b/include/c11/threads_posix.h
@@ -378,19 +378,3 @@ tss_set(tss_t key, void *val)
 {
     return (pthread_setspecific(key, val) == 0) ? thrd_success : thrd_error;
 }
-
-
-/*-------------------- 7.25.7 Time functions --------------------*/
-// 7.25.6.1
-#ifndef HAVE_TIMESPEC_GET
-static inline int
-timespec_get(struct timespec *ts, int base)
-{
-    if (!ts) return 0;
-    if (base == TIME_UTC) {
-        clock_gettime(CLOCK_REALTIME, ts);
-        return base;
-    }
-    return 0;
-}
-#endif
diff --git a/include/c11/threads_win32.h b/include/c11/threads_win32.h
index 13feb820d079..dbda982f7d5b 100644
--- a/include/c11/threads_win32.h
+++ b/include/c11/threads_win32.h
@@ -128,7 +128,6 @@ static time_t impl_timespec2msec(const struct timespec *ts)
     return (ts->tv_sec * 1000U) + (ts->tv_nsec / 1000000L);
 }
 
-#ifdef HAVE_TIMESPEC_GET
 static DWORD impl_abs2relmsec(const struct timespec *abs_time)
 {
     const time_t abs_ms = impl_timespec2msec(abs_time);
@@ -138,7 +137,6 @@ static DWORD impl_abs2relmsec(const struct timespec *abs_time)
     const DWORD rel_ms = (abs_ms > now_ms) ? (DWORD)(abs_ms - now_ms) : 0;
     return rel_ms;
 }
-#endif
 
 #ifdef EMULATED_THREADS_USE_NATIVE_CALL_ONCE
 struct impl_call_once_param { void (*func)(void); };
@@ -253,14 +251,10 @@ cnd_timedwait(cnd_t *cond, mtx_t *mtx, const struct timespec *abs_time)
     assert(cond != NULL);
     assert(mtx != NULL);
     assert(abs_time != NULL);
-#ifdef HAVE_TIMESPEC_GET
     const DWORD timeout = impl_abs2relmsec(abs_time);
     if (SleepConditionVariableCS(cond, mtx, timeout))
         return thrd_success;
     return (GetLastError() == ERROR_TIMEOUT) ? thrd_timedout : thrd_error;
-#else
-    return thrd_error;
-#endif
 }
 
 // 7.25.3.6
@@ -312,7 +306,6 @@ mtx_timedlock(mtx_t *mtx, const struct timespec *ts)
 {
     assert(mtx != NULL);
     assert(ts != NULL);
-#ifdef HAVE_TIMESPEC_GET
     while (mtx_trylock(mtx) != thrd_success) {
         if (impl_abs2relmsec(ts) == 0)
             return thrd_timedout;
@@ -320,9 +313,6 @@ mtx_timedlock(mtx_t *mtx, const struct timespec *ts)
         thrd_yield();
     }
     return thrd_success;
-#else
-    return thrd_error;
-#endif
 }
 
 // 7.25.4.5
@@ -502,20 +492,3 @@ tss_set(tss_t key, void *val)
 {
     return TlsSetValue(key, val) ? thrd_success : thrd_error;
 }
-
-
-/*-------------------- 7.25.7 Time functions --------------------*/
-// 7.25.6.1
-#ifndef HAVE_TIMESPEC_GET
-static inline int
-timespec_get(struct timespec *ts, int base)
-{
-    assert(ts != NULL);
-    if (base == TIME_UTC) {
-        ts->tv_sec = time(NULL);
-        ts->tv_nsec = 0;
-        return base;
-    }
-    return 0;
-}
-#endif
diff --git a/include/c11/time.h b/include/c11/time.h
index 1d9b964c95cd..53d587c3eb6f 100644
--- a/include/c11/time.h
+++ b/include/c11/time.h
@@ -40,7 +40,7 @@ struct timespec
 #ifndef HAVE_TIMESPEC_GET
 /*-------------------- 7.25.7 Time functions --------------------*/
 // 7.25.6.1
-static inline int
+int
 timespec_get(struct timespec *ts, int base);
 #endif
 
diff --git a/src/mapi/es1api/meson.build b/src/mapi/es1api/meson.build
index 8b749b1a3324..289c691e250e 100644
--- a/src/mapi/es1api/meson.build
+++ b/src/mapi/es1api/meson.build
@@ -46,7 +46,7 @@ libglesv1_cm = shared_library(
   link_args : [ld_args_gc_sections],
   include_directories : [inc_src, inc_include, inc_mapi],
   link_with : libglapi,
-  dependencies : [dep_thread, dep_libdrm, dep_m, dep_dl],
+  dependencies : [dep_thread, dep_libdrm, dep_m, dep_dl, idep_mesautilc11],
   soversion : host_machine.system() == 'windows' ? '' : '1',
   version : '1.1.0',
   darwin_versions  : '3.0.0',
diff --git a/src/mapi/es2api/meson.build b/src/mapi/es2api/meson.build
index 356c5760c495..f1cd339a2dca 100644
--- a/src/mapi/es2api/meson.build
+++ b/src/mapi/es2api/meson.build
@@ -46,7 +46,7 @@ libgles2 = shared_library(
   link_args : [ld_args_gc_sections],
   include_directories : [inc_src, inc_include, inc_mapi],
   link_with : libglapi,
-  dependencies : [dep_thread, dep_libdrm, dep_m, dep_dl],
+  dependencies : [dep_thread, dep_libdrm, dep_m, dep_dl, idep_mesautilc11],
   soversion : host_machine.system() == 'windows' ? '' : '2',
   version : '2.0.0',
   darwin_versions : '3.0.0',
diff --git a/src/mapi/glapi/meson.build b/src/mapi/glapi/meson.build
index 270b9870b400..781a5f789821 100644
--- a/src/mapi/glapi/meson.build
+++ b/src/mapi/glapi/meson.build
@@ -81,7 +81,7 @@ libglapi_static = static_library(
   static_glapi_files,
   include_directories : [inc_mesa, inc_include, inc_src, inc_mapi],
   c_args : [c_msvc_compat_args, static_glapi_args],
-  dependencies : [dep_thread, dep_selinux],
+  dependencies : [dep_thread, dep_selinux, idep_mesautilc11],
   build_by_default : false,
 )
 
diff --git a/src/mapi/shared-glapi/meson.build b/src/mapi/shared-glapi/meson.build
index 4a13bace6bcc..26166d7ddbc9 100644
--- a/src/mapi/shared-glapi/meson.build
+++ b/src/mapi/shared-glapi/meson.build
@@ -54,7 +54,7 @@ libglapi = shared_library(
   gnu_symbol_visibility : 'hidden',
   link_args : [ld_args_gc_sections],
   include_directories : [inc_src, inc_include, inc_mapi],
-  dependencies : [dep_thread, dep_selinux],
+  dependencies : [dep_thread, dep_selinux, idep_mesautilc11],
   soversion : host_machine.system() == 'windows' ? '' : '0',
   version : '0.0.0',
   name_prefix : 'lib',
@@ -71,7 +71,7 @@ if with_any_opengl and with_tests
       cpp_args : [cpp_msvc_compat_args],
       include_directories : [inc_src, inc_include, inc_mapi],
       link_with : [libglapi],
-      dependencies : [dep_thread, idep_gtest],
+      dependencies : [dep_thread, idep_gtest, idep_mesautilc11],
     ),
     suite : ['mapi'],
     protocol : gtest_test_protocol,
diff --git a/src/util/c11/meson.build b/src/util/c11/meson.build
new file mode 100644
index 000000000000..f2ed8c42b3c8
--- /dev/null
+++ b/src/util/c11/meson.build
@@ -0,0 +1,38 @@
+# Copyright © 2022 Yonggang Luo
+
+# Permission is hereby granted, free of charge, to any person obtaining a copy
+# of this software and associated documentation files (the "Software"), to deal
+# in the Software without restriction, including without limitation the rights
+# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+# copies of the Software, and to permit persons to whom the Software is
+# furnished to do so, subject to the following conditions:
+
+# The above copyright notice and this permission notice shall be included in
+# all copies or substantial portions of the Software.
+
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+# SOFTWARE.
+
+files_mesa_util_c11 = files(
+  'time.c',
+)
+
+_libmesa_util_c11 = static_library(
+  'mesa_util_c11',
+  [files_mesa_util_c11],
+  include_directories : [inc_include],
+  c_args : [c_msvc_compat_args],
+  gnu_symbol_visibility : 'hidden',
+  build_by_default : false
+)
+
+idep_mesautilc11 = declare_dependency(
+  link_with : _libmesa_util_c11,
+  include_directories : [inc_include],
+  dependencies : [dep_clock, dep_thread, dep_atomic, dep_m, dep_valgrind],
+)
diff --git a/src/util/c11/time.c b/src/util/c11/time.c
new file mode 100644
index 000000000000..7c9cf6eead83
--- /dev/null
+++ b/src/util/c11/time.c
@@ -0,0 +1,43 @@
+/*
+ * Copyright 2022 Yonggang Luo
+ * SPDX-License-Identifier: MIT
+ *
+ * C11 <time.h> implementation
+ */
+
+#include "c11/time.h"
+
+#ifndef HAVE_TIMESPEC_GET
+
+#if defined(_WIN32) && !defined(__CYGWIN__)
+
+#include <assert.h>
+
+int
+timespec_get(struct timespec *ts, int base)
+{
+    assert(ts != NULL);
+    if (base == TIME_UTC) {
+        ts->tv_sec = time(NULL);
+        ts->tv_nsec = 0;
+        return base;
+    }
+    return 0;
+}
+
+#else
+
+int
+timespec_get(struct timespec *ts, int base)
+{
+    if (!ts)
+        return 0;
+    if (base == TIME_UTC) {
+        clock_gettime(CLOCK_REALTIME, ts);
+        return base;
+    }
+    return 0;
+}
+#endif
+
+#endif /* !HAVE_TIMESPEC_GET */
diff --git a/src/util/meson.build b/src/util/meson.build
index 2a1028f0d3ac..70e3b890b30f 100644
--- a/src/util/meson.build
+++ b/src/util/meson.build
@@ -20,6 +20,7 @@
 
 inc_util = include_directories('.')
 
+subdir('c11')
 subdir('format')
 
 files_mesa_util = files(
@@ -205,6 +206,7 @@ deps_for_libmesa_util = [
   dep_zstd,
   dep_dl,
   dep_unwind,
+  idep_mesautilc11
 ]
 
 if with_platform_android
-- 
GitLab


From 0c0bc706adb0d0e44730a2417454f1a397a43d07 Mon Sep 17 00:00:00 2001
From: Yonggang Luo <luoyonggang@gmail.com>
Date: Wed, 20 Apr 2022 00:22:24 +0800
Subject: [PATCH 05/10] c11: Implement timespec_get on win32 properly when not
 available

Signed-off-by: Yonggang Luo <luoyonggang@gmail.com>
---
 src/util/c11/time.c | 26 ++++++++++++++++++++++----
 1 file changed, 22 insertions(+), 4 deletions(-)

diff --git a/src/util/c11/time.c b/src/util/c11/time.c
index 7c9cf6eead83..8a44412b963c 100644
--- a/src/util/c11/time.c
+++ b/src/util/c11/time.c
@@ -11,18 +11,36 @@
 
 #if defined(_WIN32) && !defined(__CYGWIN__)
 
-#include <assert.h>
+#ifndef WIN32_LEAN_AND_MEAN
+#define WIN32_LEAN_AND_MEAN 1
+#endif
+#include <windows.h>
 
 int
 timespec_get(struct timespec *ts, int base)
 {
-    assert(ts != NULL);
+/* difference between 1970 and 1601 */
+#define _TIMESPEC_IMPL_UNIX_EPOCH_IN_TICKS 116444736000000000ull
+/* 1 tick is 100 nanoseconds */
+#define _TIMESPEC_IMPL_TICKS_PER_SECONDS 10000000ull
+    if (!ts)
+        return 0;
     if (base == TIME_UTC) {
-        ts->tv_sec = time(NULL);
-        ts->tv_nsec = 0;
+        FILETIME ft;
+        ULARGE_INTEGER date;
+        LONGLONG ticks;
+
+        GetSystemTimeAsFileTime(&ft);
+        date.HighPart = ft.dwHighDateTime;
+        date.LowPart = ft.dwLowDateTime;
+        ticks = (LONGLONG)(date.QuadPart - _TIMESPEC_IMPL_UNIX_EPOCH_IN_TICKS);
+        ts->tv_sec = ticks / _TIMESPEC_IMPL_TICKS_PER_SECONDS;
+        ts->tv_nsec = (ticks % _TIMESPEC_IMPL_TICKS_PER_SECONDS) * 100;
         return base;
     }
     return 0;
+#undef _TIMESPEC_IMPL_UNIX_EPOCH_IN_TICKS
+#undef _TIMESPEC_IMPL_TICKS_PER_SECONDS
 }
 
 #else
-- 
GitLab


From c12ba43327775fffdd70db8762428386786afb25 Mon Sep 17 00:00:00 2001
From: Yonggang Luo <luoyonggang@gmail.com>
Date: Fri, 25 Mar 2022 03:44:30 +0800
Subject: [PATCH 06/10] util: Use timespec_get directly, it's always present

Signed-off-by: Yonggang Luo <luoyonggang@gmail.com>
Reviewed-by: Jason Ekstrand <jason.ekstrand@collabora.com>
---
 src/util/u_queue.c | 4 ----
 1 file changed, 4 deletions(-)

diff --git a/src/util/u_queue.c b/src/util/u_queue.c
index d35b8f2f29b5..66f885ade301 100644
--- a/src/util/u_queue.c
+++ b/src/util/u_queue.c
@@ -183,11 +183,7 @@ _util_queue_fence_wait_timeout(struct util_queue_fence *fence,
    if (rel > 0) {
       struct timespec ts;
 
-#if defined(HAVE_TIMESPEC_GET) || defined(_WIN32)
       timespec_get(&ts, TIME_UTC);
-#else
-      clock_gettime(CLOCK_REALTIME, &ts);
-#endif
 
       ts.tv_sec += abs_timeout / (1000*1000*1000);
       ts.tv_nsec += abs_timeout % (1000*1000*1000);
-- 
GitLab


From 3b321b1d2dfa63b6ee233e72f142b3da76104f68 Mon Sep 17 00:00:00 2001
From: Yonggang Luo <luoyonggang@gmail.com>
Date: Sat, 9 Apr 2022 21:32:18 +0800
Subject: [PATCH 07/10] util: Remove usage of designated initializers in
 timespec_test.cpp

As the default option for msvc 2019 does support designated initializers
```
../src/util/tests/timespec_test.cpp(302): error C7555: use of designated initializers requires at least '/std:c++20'
../src/util/tests/timespec_test.cpp(303): error C7555: use of designated initializers requires at least '/std:c++20'
../src/util/tests/timespec_test.cpp(312): error C7555: use of designated initializers requires at least '/std:c++20'
../src/util/tests/timespec_test.cpp(313): error C7555: use of designated initializers requires at least '/std:c++20'
```

Signed-off-by: Yonggang Luo <luoyonggang@gmail.com>
---
 src/util/tests/timespec_test.cpp | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/src/util/tests/timespec_test.cpp b/src/util/tests/timespec_test.cpp
index 4fad1884b30d..d8bf60215ebf 100644
--- a/src/util/tests/timespec_test.cpp
+++ b/src/util/tests/timespec_test.cpp
@@ -298,8 +298,8 @@ TEST(timespec_test, timespec_from_proto)
 TEST(timespec_test, timespec_is_zero)
 {
    struct timespec zero = { 0 };
-   struct timespec non_zero_sec = { .tv_sec = 1, .tv_nsec = 0 };
-   struct timespec non_zero_nsec = { .tv_sec = 0, .tv_nsec = 1 };
+   struct timespec non_zero_sec = { 1, 0 };
+   struct timespec non_zero_nsec = { 0, 1 };
 
    EXPECT_TRUE(timespec_is_zero(&zero));
    EXPECT_FALSE(timespec_is_zero(&non_zero_nsec));
@@ -308,8 +308,8 @@ TEST(timespec_test, timespec_is_zero)
 
 TEST(timespec_test, timespec_eq)
 {
-   struct timespec a = { .tv_sec = 2, .tv_nsec = 1 };
-   struct timespec b = { .tv_sec = -1, .tv_nsec = 2 };
+   struct timespec a = { 2, 1 };
+   struct timespec b = { -1, 2 };
 
    EXPECT_TRUE(timespec_eq(&a, &a));
    EXPECT_TRUE(timespec_eq(&b, &b));
-- 
GitLab


From ffb9c1436d1b46b810ff9e0d748e4324401b1338 Mon Sep 17 00:00:00 2001
From: Yonggang Luo <luoyonggang@gmail.com>
Date: Thu, 31 Mar 2022 01:49:12 +0800
Subject: [PATCH 08/10] util: always enable timespec_test.cpp

c11/time.h always contains `struct timespec` now

Signed-off-by: Yonggang Luo <luoyonggang@gmail.com>
Reviewed-by: Jason Ekstrand <jason.ekstrand@collabora.com>
---
 src/util/meson.build | 7 +------
 src/util/timespec.h  | 2 +-
 2 files changed, 2 insertions(+), 7 deletions(-)

diff --git a/src/util/meson.build b/src/util/meson.build
index 70e3b890b30f..e7b19bd4503c 100644
--- a/src/util/meson.build
+++ b/src/util/meson.build
@@ -331,6 +331,7 @@ if with_tests
     'tests/roundeven_test.cpp',
     'tests/set_test.cpp',
     'tests/sparse_array_test.cpp',
+    'tests/timespec_test.cpp',
     'tests/u_atomic_test.cpp',
     'tests/u_debug_stack_test.cpp',
     'tests/u_printf_test.cpp',
@@ -345,12 +346,6 @@ if with_tests
     )
   endif
 
-  if cc.has_header('sys/time.h')  # MinGW has this, but Vanilla windows doesn't
-    files_util_tests += files(
-      'tests/timespec_test.cpp'
-    )
-  endif
-
   # FIXME: this test crashes on windows
   if host_machine.system() != 'windows'
     files_util_tests += files(
diff --git a/src/util/timespec.h b/src/util/timespec.h
index 83411090ffa8..8590f657e3fb 100644
--- a/src/util/timespec.h
+++ b/src/util/timespec.h
@@ -34,9 +34,9 @@
 
 #include <stdint.h>
 #include <assert.h>
-#include <time.h>
 #include <stdbool.h>
 
+#include "c11/time.h"
 #include "macros.h"
 
 #define NSEC_PER_SEC 1000000000
-- 
GitLab


From 8f09f0de28e6b39f11c3ec212222a71c26fb34f4 Mon Sep 17 00:00:00 2001
From: Yonggang Luo <luoyonggang@gmail.com>
Date: Thu, 31 Mar 2022 01:54:17 +0800
Subject: [PATCH 09/10] util: Remove unused function timespec_passed

Signed-off-by: Yonggang Luo <luoyonggang@gmail.com>
Reviewed-by: Jason Ekstrand <jason.ekstrand@collabora.com>
---
 src/util/timespec.h | 17 -----------------
 1 file changed, 17 deletions(-)

diff --git a/src/util/timespec.h b/src/util/timespec.h
index 8590f657e3fb..378ebbba9e54 100644
--- a/src/util/timespec.h
+++ b/src/util/timespec.h
@@ -330,21 +330,4 @@ timespec_after(const struct timespec *a, const struct timespec *b)
       (a->tv_sec > b->tv_sec);
 }
 
-#ifndef _MSC_VER
-/**
- * Checks whether a timespec value is after the current time
- *
- * \param clock_domain[in] clock in which to do the comparison
- * \param deadline[in] timespec to compare
- * \return whether deadline is after the current time
- */
-static inline bool
-timespec_passed(clockid_t clock_domain, const struct timespec *deadline)
-{
-   struct timespec current_time;
-   clock_gettime(clock_domain, &current_time);
-   return timespec_after(&current_time, deadline);
-}
-#endif
-
 #endif /* TIMESPEC_H */
-- 
GitLab


From 7443fd775c5c6fbb65c6d192b9722eacab0c8ffe Mon Sep 17 00:00:00 2001
From: Yonggang Luo <luoyonggang@gmail.com>
Date: Thu, 31 Mar 2022 02:00:04 +0800
Subject: [PATCH 10/10] util: Add unittest for timespec_get

Signed-off-by: Yonggang Luo <luoyonggang@gmail.com>
Reviewed-by: Jason Ekstrand <jason.ekstrand@collabora.com>
---
 src/util/tests/timespec_test.cpp | 14 ++++++++++++++
 1 file changed, 14 insertions(+)

diff --git a/src/util/tests/timespec_test.cpp b/src/util/tests/timespec_test.cpp
index d8bf60215ebf..9edfa3b237c6 100644
--- a/src/util/tests/timespec_test.cpp
+++ b/src/util/tests/timespec_test.cpp
@@ -25,6 +25,7 @@
 
 #include <gtest/gtest.h>
 
+#include "c11/time.h"
 #include "util/timespec.h"
 
 #include <limits>
@@ -317,3 +318,16 @@ TEST(timespec_test, timespec_eq)
    EXPECT_FALSE(timespec_eq(&a, &b));
    EXPECT_FALSE(timespec_eq(&b, &a));
 }
+
+TEST(timespec_test, timespec_get)
+{
+   struct timespec a;
+   struct timespec b;
+   time_t t;
+   timespec_get(&a, TIME_UTC);
+   time(&t);
+   timespec_get(&b, TIME_UTC);
+   /* `t + 1` and `t - 1` are used intentionally for avoid flakes */
+   EXPECT_LE(a.tv_sec, t + 1);
+   EXPECT_LE(t - 1, b.tv_sec);
+}
-- 
GitLab

