_where="$PWD" # track basedir as different Arch based distros are moving srcdir around
source "$_where"/customization.cfg

# Load external configuration file if present. Available variable values will overwrite customization.cfg ones.
if [ -e "$_where/mesa-userpatches/user.cfg" ]; then
  source "$_where/mesa-userpatches/user.cfg" && msg2 "User.cfg config loaded"
elif [ -e "$_EXT_CONFIG_PATH" ]; then
  source "$_EXT_CONFIG_PATH" && msg2 "External configuration file $_EXT_CONFIG_PATH will be used to override customization.cfg values.\n"
fi

# dri drivers moved to the amber branch
if [ "$_mesa_branch" = "main" ]; then
  _dri_drivers=""
fi

pkgname=('mesa-tkg-git')
if [ "$_lib32" == "true" ]; then
  pkgname+=('lib32-mesa-tkg-git')
fi

# custom mesa commit to pass to git
if [ -n "$_mesa_commit" ]; then
  _mesa_version="#commit=${_mesa_commit}"
else
  _mesa_version="#branch=${_mesa_branch}"
fi

pkgdesc="an open-source implementation of the OpenGL specification, git version"
pkgver=0
pkgrel=1
arch=('x86_64')
options=(!strip)
makedepends=('git' 'python-mako' 'python-ply' 'xorgproto' 'libxml2' 'libx11' 'libvdpau' 'libva'
             'elfutils' 'libxrandr' 'ocl-icd' 'libgcrypt'  'wayland'
             'wayland-protocols' 'meson' 'ninja' 'libdrm' 'xorgproto' 'libdrm' 'libxshmfence'
             'libxxf86vm' 'libxdamage' 'libclc' 'libglvnd' 'libunwind' 'lm_sensors' 'libxrandr'
             'valgrind' 'glslang' 'byacc' 'wget' 'flex' 'bison' 'rust' 'rust-bindgen' 'spirv-llvm-translator'
             'cbindgen' 'python-packaging' 'python-yaml')

if [ "$_lib32" == "true" ]; then
  makedepends+=('lib32-libxml2' 'lib32-libx11' 'lib32-libdrm' 'lib32-libxshmfence' 'lib32-libxxf86vm'
                'lib32-gcc-libs' 'lib32-libvdpau' 'lib32-libelf' 'lib32-libgcrypt'
                'lib32-lm_sensors' 'lib32-libxdamage' 'gcc-multilib' 'lib32-libunwind' 'lib32-libglvnd'
                'lib32-libva' 'lib32-wayland' 'lib32-libvdpau' 'lib32-libxrandr' 'lib32-expat'
                'lib32-spirv-llvm-translator' 'lib32-rust-libs')
fi

depends=('libdrm' 'libxxf86vm' 'libxdamage' 'libxshmfence' 'libelf' 'libunwind'
         'libglvnd' 'wayland' 'lm_sensors' 'libclc' 'glslang' 'zstd' 'vulkan-icd-loader')
if [ "$_lib32" == "true" ]; then
  depends+=('lib32-zstd' 'lib32-vulkan-icd-loader')
fi
optdepends=('opengl-man-pages: for the OpenGL API man pages')

# Use ccache if available
if pacman -Qq ccache &> /dev/null; then
  msg2 "ccache was found and will be used\n"
  _makepkg_options+=('ccache')
else
  msg2 "ccache was not found and will not be used\n"
fi

if [ "$_no_lto" = "true" ]; then
  _makepkg_options+=('!lto')
fi

if [[ "$_additional_meson_flags" =~ "--buildtype debug" ]]; then
  _makepkg_options+=('debug !strip')
fi

options=(${_makepkg_options[@]})

url="https://www.mesa3d.org"
license=('custom')

_sourceurl="mesa::git+${_mesa_source}${_mesa_version}"
_mesa_srcdir="mesa"

source=("$_sourceurl"
        'LICENSE'
        'llvm32.native'
)
md5sums=('SKIP')
sha512sums=('SKIP')

function exit_cleanup {
  if [ "$pkgver" != "0" ]; then
    sed -i "s/pkgver=$pkgver.*/pkgver=0/g" "${_where}"/PKGBUILD
  fi

  # Remove temporarily copied patches
  sleep 1 # Workaround a race condition with ninja
  rm -rf "$_where"/*.mymesa*
  rm -f "$_where"/frogminer

  remove_deps

  msg2 "Cleanup done"
}

user_patcher() {
        # To patch the user because all your base are belong to us
        local _patches=("$_where"/*."${_userpatch_ext}revert")
        if [ ${#_patches[@]} -ge 2 ] || [ -e "${_patches}" ]; then
          if [[ "$_user_patches_no_confirm" != "true" ]]; then
            msg2 "Found ${#_patches[@]} 'to revert' userpatches for ${_userpatch_target}:"
            printf '%s\n' "${_patches[@]##*/}"
            read -rp "Do you want to install it/them? - Be careful with that ;)"$'\n> N/y : ' _CONDITION;
          fi
          if [ "$_CONDITION" == "y" ] || [ "$_user_patches_no_confirm" == "true" ]; then
            for _f in "${_patches[@]}"; do
              if [ -e "${_f}" ]; then
                msg2 "######################################################"
                msg2 ""
                msg2 "Reverting your own ${_userpatch_target} patch ${_f}"
                msg2 ""
                msg2 "######################################################"
                patch -Np1 -R < "${_f}"
                echo "Reverted your own patch ${_f}" >> "$_where"/last_build_config.log
              fi
            done
          fi
        fi

        _patches=("$_where"/*."${_userpatch_ext}patch")
        if [ ${#_patches[@]} -ge 2 ] || [ -e "${_patches}" ]; then
          if [[ "$_user_patches_no_confirm" != "true" ]]; then
            msg2 "Found ${#_patches[@]} userpatches for ${_userpatch_target}:"
            printf '%s\n' "${_patches[@]##*/}"
            read -rp "Do you want to install it/them? - Be careful with that ;)"$'\n> N/y : ' _CONDITION;
          fi
          if [ "$_CONDITION" == "y" ] || [ "$_user_patches_no_confirm" == "true" ]; then
            for _f in "${_patches[@]}"; do
              if [ -e "${_f}" ]; then
                msg2 "######################################################"
                msg2 ""
                msg2 "Applying your own ${_userpatch_target} patch ${_f}"
                msg2 ""
                msg2 "######################################################"
                patch -Np1 < "${_f}"
                echo "Applied your own patch ${_f}" >> "$_where"/last_build_config.log
              fi
            done
          fi
        fi
}

# NINJAFLAGS is an env var used to pass commandline options to ninja
# NOTE: It's your responbility to validate the value of $NINJAFLAGS. If unsure, don't set it.

# MESA_WHICH_LLVM is an environment variable that determines which llvm package tree is used to built mesa-git against.
# Adding a line to ~/.bashrc  that sets this value is the simplest way to ensure a specific choice.
#
# 1: llvm-minimal-git (aur) preferred value
# 2: AUR llvm-git
# 3: llvm-git from LordHeavy unofficial repo
# 4  llvm (stable from extra) Default value
#

if [[ ! $MESA_WHICH_LLVM ]] && [ ! -e "$_where"/frogminer ]; then
  plain "Which llvm package tree do you want to use to build mesa-tkg-git against ?"
  read -rp "`echo $'     1.llvm-minimal-git (AUR)\n     2.llvm-git (AUR)\n     3.llvm-git from LordHeavy unofficial repo\n   > 4.llvm (default)\n    choice[1-4?]: '`" MESA_WHICH_LLVM;
  touch "$_where"/frogminer
fi
# double dip
if [ -z "$MESA_WHICH_LLVM" ] || [[ $MESA_WHICH_LLVM -le 0 ]] || [[ $MESA_WHICH_LLVM -ge 5 ]]; then
  MESA_WHICH_LLVM=4
fi

case $MESA_WHICH_LLVM in
    1)
        # aur llvm-minimal-git
        makedepends+=('llvm-minimal-git')
        _llvm='llvm-libs-minimal-git'
        if [ "$_lib32" == "true" ]; then
          makedepends+=('lib32-llvm-minimal-git')
          _lib32_llvm='lib32-llvm-libs-minimal-git'
        fi
        msg2 "Using llvm-minimal-git (AUR)"
        echo "Using llvm-minimal-git (AUR)" >> "$_where"/last_build_config.log
        ;;
    2)
        # aur llvm-git
        # depending on aur-llvm-* to avoid mixup with LH llvm-git
        makedepends+=('aur-llvm-git')
        _llvm='aur-llvm-libs-git'
        if [ "$_lib32" == "true" ]; then
          makedepends+=('aur-lib32-llvm-git')
          _lib32_llvm='aur-lib32-llvm-libs-git'
        fi
        msg2 "Using llvm-git (AUR)"
        echo "Using llvm-git (AUR)" >> "$_where"/last_build_config.log
        ;;
    3)
        # mesa-git/llvm-git (lordheavy unofficial repo)
        makedepends+=('llvm-git' 'clang-git')
        _llvm='llvm-libs-git'
        if [ "$_lib32" == "true" ]; then
          makedepends+=('lib32-llvm-git')
          _lib32_llvm='lib32-llvm-libs-git'
        fi
        msg2 "Using llvm-git from LordHeavy unofficial repo"
        echo "Using llvm-git from LordHeavy unofficial repo" >> "$_where"/last_build_config.log
        ;;
    4)
        # extra/llvm
        makedepends+=('llvm>=18.0.0' 'clang>=18.0.0')
        _llvm='llvm-libs>=18.0.0'
        if [ "$_lib32" == "true" ]; then
          makedepends+=('lib32-llvm>=18.0.0')
          _lib32_llvm='lib32-llvm-libs>=18.0.0'
        fi
        msg2 "Using llvm (default)"
        echo "Using llvm (default)" >> "$_where"/last_build_config.log
        ;;
    *)
esac

pkgver() {
    cd "$_mesa_srcdir"
    _ver=$( cat VERSION )
    echo ${_ver/-/_}.$(git rev-list --count HEAD).$(git rev-parse --short HEAD)
}

prepare() {
    # cleanups
    cd "$srcdir/$_mesa_srcdir"
    git reset --hard HEAD
    git clean -xdf
    if [ -n "$_mesa_commit" ]; then
      git checkout "${_mesa_commit}"
    fi
    msg2 "Tree cleaned"

    rm -f "$_where"/*.mymesa* && cp "$_where"/mesa-userpatches/*.mymesa* "$_where" || true # copy userpatches inside the PKGBUILD's dir

    if [ -n "$_mesa_prs" ]; then
      for _pr in ${_mesa_prs[@]}; do
        wget -O "$_where"/"$_pr".mymesapatch https://gitlab.freedesktop.org/mesa/mesa/merge_requests/"$_pr".diff
      done
    fi

    # Community patches
    if [ -n "$_community_patches" ]; then
      if [ ! -d "$_where/../community-patches" ]; then
        cd "$_where/.." && git clone https://github.com/Frogging-Family/community-patches.git && cd "$srcdir"/$_mesa_srcdir
      fi
      _community_patches=($_community_patches)
      for _p in ${_community_patches[@]}; do
        ln -s "$_where"/../community-patches/mesa-git/$_p "$_where"/
      done
    fi

    # mesa user patches
    if [ "$_user_patches" == "true" ]; then
      _userpatch_target="mesa"
      _userpatch_ext="mymesa"
      echo -e "# Last ${pkgname} ${pkgver} configuration - $(date) :\n" > "$_where"/last_build_config.log
      echo -e "DRI drivers: ${_dri_drivers}" >> "$_where"/last_build_config.log
      echo -e "Gallium drivers: ${_gallium_drivers}" >> "$_where"/last_build_config.log
      echo -e "Vulkan drivers: ${_vulkan_drivers}\n" >> "$_where"/last_build_config.log
      user_patcher
    fi

    # Community/prs patches removal
    for _p in ${_community_patches[@]}; do
      rm -f "$_where"/$_p
    done
    for _pr in ${_mesa_prs[@]}; do
      rm -f "$_where"/$_pr.mymesapatch
    done

    cd "$srcdir"

    # although removing _build folder in build() function feels more natural,
    # that interferes with the spirit of makepkg --noextract
    if [  -d _build64 ] && [ "$_NUKR" != "false" ]; then
      if [[ "$_additional_meson_flags" = *-Db_pgo=use* ]]; then
        find ./_build64 -type f ! -name '*.gcda' -delete
      else
        rm -rf _build64
      fi
    fi
    if [  -d _build32 ] && [ "$_NUKR" != "false" ]; then
      if [[ "$_additional_meson_flags" = *-Db_pgo=use* ]]; then
        find ./_build32 -type f ! -name '*.gcda' -delete
      else
        rm -rf _build32
      fi
    fi
    cd "$_where"
}

function exit_cleanup {
  if [ "$pkgver" != "0" ]; then
    sed -i "s/pkgver=$pkgver.*/pkgver=0/g" "$_where"/PKGBUILD
  fi

  # Remove temporarily copied patches
  sleep 1 # Workarounds a race condition with ninja
  rm -rf "$_where"/*.mymesa*
  rm -f "$_where"/frogminer

  remove_deps

  msg2 "Cleanup done"
}

build() {

    # Check for gallium drivers
    check_gallium_drivers() {
        local check_for="$1"
        echo "$_gallium_drivers" | grep -q "$check_for"
        return $?
    }

    # Common Meson options
    declare -A MESON_COMMON_OPTIONS=(
        ["b_ndebug"]="true"
        ["b_lundef"]="false"
        ["python.bytecompile"]="2"
        ["enable-glcpp-tests"]="false"
        ["egl"]="enabled"
        ["android-libbacktrace"]="disabled"
        ["gallium-extra-hud"]="false"
        ["gbm"]="enabled"
        ["glvnd"]="enabled"
        ["glx"]="dri"
        ["intel-rt"]="disabled"
        ["zstd"]="enabled"
        ["shader-cache"]="enabled"
        ["llvm"]="enabled"
        ["platforms"]="x11,wayland"
    )

    # Configure build function
    configure_build() {
        local build_dir="$1"
        local lib_dir="$2"
        local extra_options="$3"

        local meson_args=(
            --wrap-mode=nofallback
            ${lib_dir:+--libdir=$lib_dir}
            --unity=subprojects
        )

        # Add common options
        for key in "${!MESON_COMMON_OPTIONS[@]}"; do
            meson_args+=(-D "$key=${MESON_COMMON_OPTIONS[$key]}")
        done

        # Add dynamic options

        meson_args+=(
            -D gallium-drivers="${_gallium_drivers}"
            -D vulkan-drivers="${_vulkan_drivers}"
            -D video-codecs="${_codecs}"
            -D gallium-mediafoundation=disabled
            -D gallium-d3d12-graphics=disabled
            -D gallium-d3d12-video=disabled
            -D gallium-va="${_gallium_va}"
            -D gallium-vdpau=disabled
            -D gles1="${_disabled_}"
            -D gles2="${_enabled_}"
            -D lmsensors="${_enabled_}"
            -D microsoft-clc=disabled
            -D shared-llvm="${_enabled_}"
            -D glvnd=enabled
            -D opengl=true
            -D vulkan-layers=device-select,overlay
            -D valgrind="${_disabled_}"
        )

        # Platform specific options
        meson_args+=(
            -D amd-use-llvm=false
            -D platforms="x11,wayland"
            -D egl-native-platform="auto"
            -D glx="dri"
            -D gbm=enabled
        )

        # Add conditional options
        [[ -n "$_legacy_switches" ]] && meson_args+=($_legacy_switches)
        [[ -n "$_microsoft_clc" ]] && meson_args+=($_microsoft_clc)
        [[ -n "$_xvmc" ]] && meson_args+=($_xvmc)
        [[ -n "$_layers" ]] && meson_args+=($_layers)
        [[ -n "$_no_lto" ]] && meson_args+=($_no_lto)
        [[ -n "$extra_options" ]] && meson_args+=($extra_options)

        arch-meson "$_mesa_srcdir" "$build_dir" "${meson_args[@]}"
    }

    # Setup compiler function
    setup_compiler() {
        local is_32bit="$1"

        if [ "$_compiler" = "clang" ]; then
            export CC="clang${is_32bit:+ -m32}"
            export CXX="clang++${is_32bit:+ -m32}"
        else
            export CC="gcc${is_32bit:+ -m32}"
            export CXX="g++${is_32bit:+ -m32}"
        fi
    }

    # Main build logic starts here
    if [ -n "$_custom_opt_flags" ]; then
        export CFLAGS="${_custom_opt_flags}"
        export CPPFLAGS="${_custom_opt_flags}"
        export CXXFLAGS="${_custom_opt_flags}"
    fi

    [ "$_no_lto" = "true" ] && _no_lto="-D b_lto=false" || _no_lto=""

    # Selector fixes
    if ( cd "$srcdir/$_mesa_srcdir" && git merge-base --is-ancestor 138c003d22739b0d1e6860ed398dd511a44cde04 HEAD ); then
        _enabled_="enabled"
        _disabled_="disabled"
    else
        _enabled_="true"
        _disabled_="false"
    fi

    # Set up gallium features based on available drivers
    if ! check_gallium_drivers "r300\|r600\|radeonsi\|nouveau"; then
        warning "Gallium VDPAU disabled (gallium driver r300, r600, radeonsi or nouveau required)"
        _gallium_vdpau="${_disabled_}"
    else
        _gallium_vdpau="${_enabled_}"
    fi

    if ! check_gallium_drivers "r600\|radeonsi\|nouveau"; then
        warning "Gallium VA disabled (gallium driver r600, radeonsi or nouveau required)"
        _gallium_va="${_disabled_}"
    else
        _gallium_va="${_enabled_}"
    fi

    # Rest of your existing selector fixes...

    # Custom GCC path handling
    if [ -n "${CUSTOM_GCC_PATH}" ] && [ "$_compiler" != "clang" ]; then
        export PATH=$( find "$CUSTOM_GCC_PATH/" -maxdepth 1 -printf "%p:" || ( warning "Custom compiler path seems wrong.." && exit 1 ) )${PATH}
        msg2 "CUSTOM_GCC_PATH = ${CUSTOM_GCC_PATH}"
    fi

    # Build 64-bit
    setup_compiler
    configure_build "_build64" "" "$_additional_meson_flags $_additional_meson_flags_64"
    meson configure _build64 --no-pager

    if ( cd "$srcdir/$_mesa_srcdir" && ! git merge-base --is-ancestor 2ef983dca61b549a9242afd9008200b231a26e90 HEAD ); then
        ninja $NINJAFLAGS -C _build64 xmlpool-pot xmlpool-update-po xmlpool-gmo
    fi
    ninja $NINJAFLAGS -C _build64

    # Generate PC files if needed
    if [ "$_localglesv2pc" == "true" ]; then
        echo -e "prefix=/usr\nlibdir=\${prefix}/lib\nincludedir=\${prefix}/include\n\nName: glesv2\nDescription: Mesa OpenGL ES 2.0 library\nVersion: ${pkgver}\nLibs: -L\${libdir} -lGLESv2\nLibs.private: -lpthread -pthread -lm -ldl\nCflags: -I\${includedir}" > "$srcdir"/_build64/glesv2.pc
    fi
    if [ "$_localeglpc" == "true" ]; then
        echo -e "prefix=/usr\nlibdir=\${prefix}/lib\nincludedir=\${prefix}/include\n\nName: egl\nDescription: Mesa EGL Library\nVersion: ${pkgver}\nRequires.private: x11, xext, xdamage >=  1.1, xfixes, x11-xcb, xcb, xcb-glx >=  1.8.1, xcb-dri2 >=  1.8, xxf86vm, libdrm >=  2.4.75\nLibs: -L\${libdir} -lEGL\nLibs.private: -lpthread -pthread -lm -ldl\nCflags: -I\${includedir}" > "$srcdir"/_build64/egl.pc
    fi

    # Build 32-bit if enabled
    if [ "$_lib32" == "true" ]; then
        setup_compiler "-m32"
        export PKG_CONFIG=/usr/bin/i686-pc-linux-gnu-pkg-config

        configure_build "_build32" "/usr/lib32" "$_additional_meson_flags $_additional_meson_flags_32"
        meson configure _build32 --no-pager

        if ( cd "$srcdir/$_mesa_srcdir" && ! git merge-base --is-ancestor 2ef983dca61b549a9242afd9008200b231a26e90 HEAD ); then
            ninja $NINJAFLAGS -C _build32 xmlpool-pot xmlpool-update-po xmlpool-gmo
        fi
        ninja $NINJAFLAGS -C _build32

        # Generate 32-bit PC files if needed
        if [ "$_localglesv2pc" == "true" ]; then
            echo -e "prefix=/usr\nlibdir=\${prefix}/lib32\nincludedir=\${prefix}/include\n\nName: glesv2\nDescription: Mesa OpenGL ES 2.0 library\nVersion: ${pkgver}\nLibs: -L\${libdir} -lGLESv2\nLibs.private: -lpthread -pthread -lm -ldl\nCflags: -I\${includedir}" > "$srcdir"/_build32/glesv2.pc
        fi
        if [ "$_localeglpc" == "true" ]; then
            echo -e "prefix=/usr\nlibdir=\${prefix}/lib32\nincludedir=\${prefix}/include\n\nName: egl\nDescription: Mesa EGL Library\nVersion: ${pkgver}\nRequires.private: x11, xext, xdamage >=  1.1, xfixes, x11-xcb, xcb, xcb-glx >=  1.8.1, xcb-dri2 >=  1.8, xxf86vm, libdrm >=  2.4.75\nLibs: -L\${libdir} -lEGL\nLibs.private: -lpthread -pthread -lm -ldl\nCflags: -I\${includedir}" > "$srcdir"/_build32/egl.pc
        fi
    fi
}

package_mesa-tkg-git() {
  depends=('libdrm' 'wayland' 'libxxf86vm' 'libxdamage' 'libxshmfence' 'libelf'
           'libomxil-bellagio' 'libunwind' 'lm_sensors' 'libglvnd'
           'expat' 'libclc' 'libx11' "$_llvm")
  provides=(mesa=$pkgver-$pkgrel vulkan-intel=$pkgver-$pkgrel vulkan-radeon=$pkgver-$pkgrel vulkan-mesa-layers=$pkgver-$pkgrel mesa-vulkan-layers=$pkgver-$pkgrel libva-mesa-driver=$pkgver-$pkgrel mesa-vdpau=$pkgver-$pkgrel vulkan-driver opencl-mesa=$pkgver-$pkgrel opengl-driver opencl-driver ati-dri intel-dri nouveau-dri svga-dri mesa-dri mesa-libgl vulkan-swrast)
  conflicts=('mesa' 'opencl-mesa' 'vulkan-intel' 'vulkan-radeon' 'vulkan-mesa-layers' 'mesa-vulkan-layers' 'libva-mesa-driver' 'mesa-vdpau' 'vulkan-swrast')

  DESTDIR="$pkgdir" ninja $NINJAFLAGS -C _build64 install

# remove script file from /usr/bin
  # https://gitlab.freedesktop.org/mesa/mesa/issues/2230
  rm -f "${pkgdir}/usr/bin/mesa-overlay-control.py"

  # indirect rendering
  ln -s /usr/lib/libGLX_mesa.so.0 "${pkgdir}/usr/lib/libGLX_indirect.so.0"

  if [ "$_localglesv2pc" == "true" ]; then
    # bring back glesv2.pc
    install -m644 -Dt "$pkgdir"/usr/lib/pkgconfig "$srcdir"/_build64/glesv2.pc
  fi
  if [ "$_localeglpc" == "true" ]; then
    # bring back egl.pc
    install -m644 -Dt "$pkgdir"/usr/lib/pkgconfig "$srcdir"/_build64/egl.pc
  fi

  install -Dt "$pkgdir"/usr/share/licenses/"$pkgname" "$srcdir"/LICENSE
}

package_lib32-mesa-tkg-git() {
  depends=('lib32-libdrm' 'lib32-libxxf86vm' 'lib32-libxdamage' 'lib32-libxshmfence'
           'lib32-lm_sensors' 'lib32-libelf' 'lib32-wayland'
           'lib32-libglvnd' 'lib32-libx11' 'mesa' "$_lib32_llvm")
  provides=(lib32-mesa=$pkgver-$pkgrel lib32-vulkan-intel=$pkgver-$pkgrel lib32-vulkan-radeon=$pkgver-$pkgrel lib32-vulkan-mesa-layers=$pkgver-$pkgrel lib32-mesa-vulkan-layers=$pkgver-$pkgrel lib32-libva-mesa-driver=$pkgver-$pkgrel lib32-mesa-vdpau=$pkgver-$pkgrel lib32-opengl-driver lib32-vulkan-driver lib32-ati-dri lib32-intel-dri lib32-nouveau-dri lib32-mesa-dri lib32-mesa-libgl lib32-vulkan-swrast)
  conflicts=('lib32-mesa' 'lib32-vulkan-intel' 'lib32-vulkan-radeon' 'lib32-vulkan-mesa-layers' 'lib32-mesa-vulkan-layers' 'lib32-libva-mesa-driver' 'lib32-mesa-vdpau' 'lib32-vulkan-swrast')

  DESTDIR="$pkgdir" ninja $NINJAFLAGS -C _build32 install

  # Remove conflicting files from here
  rm -f "${pkgdir}/usr/include/EGL/eglext_angle.h"
  rm -f "${pkgdir}/usr/include/EGL/eglmesaext.h"
  rm -f "${pkgdir}/usr/include/GL/internal/dri_interface.h"
  rm -f "${pkgdir}/usr/include/gbm.h"
  rm -f "${pkgdir}/usr/include/gbm_backend_abi.h"
  rm -f "${pkgdir}/usr/include/xa_composite.h"
  rm -f "${pkgdir}/usr/include/xa_context.h"
  rm -f "${pkgdir}/usr/include/xa_tracker.h"
  rm -f "${pkgdir}/usr/share/drirc.d/00-mesa-defaults.conf"
  rm -f "${pkgdir}/usr/share/drirc.d/00-radv-defaults.conf"
  rm -f "${pkgdir}/usr/share/glvnd/egl_vendor.d/50_mesa.json"
  rm -f "${pkgdir}/usr/share/vulkan/explicit_layer.d/VkLayer_MESA_overlay.json"
  rm -f "${pkgdir}/usr/share/vulkan/implicit_layer.d/VkLayer_MESA_device_select.json"

  # remove script file from /usr/bin
  # https://gitlab.freedesktop.org/mesa/mesa/issues/2230
  rm -f "${pkgdir}/usr/bin/mesa-overlay-control.py"

  # indirect rendering
  ln -s /usr/lib32/libGLX_mesa.so.0 "${pkgdir}/usr/lib32/libGLX_indirect.so.0"

  if [ "$_localglesv2pc" == "true" ]; then
    # bring back glesv2.pc
    install -m644 -Dt "$pkgdir"/usr/lib32/pkgconfig "$srcdir"/_build32/glesv2.pc
  fi
  if [ "$_localeglpc" == "true" ]; then
    # bring back egl.pc
    install -m644 -Dt "$pkgdir"/usr/lib32/pkgconfig "$srcdir"/_build32/egl.pc
  fi
}

trap exit_cleanup EXIT
