From a014ac666f767ea2ecedeffd8e7ec8e118de3b3f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Timur=20Krist=C3=B3f?= <timur.kristof@gmail.com>
Date: Thu, 20 Apr 2023 12:35:01 +0200
Subject: [PATCH 1/3] nir/opt_dead_cf: Remove if branches with undef condition.

Treat them as if the undef were false.
---
 src/compiler/nir/nir_opt_dead_cf.c | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/src/compiler/nir/nir_opt_dead_cf.c b/src/compiler/nir/nir_opt_dead_cf.c
index fbb935842fef..eb7bb9a37b06 100644
--- a/src/compiler/nir/nir_opt_dead_cf.c
+++ b/src/compiler/nir/nir_opt_dead_cf.c
@@ -286,6 +286,9 @@ dead_cf_block(nir_block *block)
       if (nir_src_is_const(following_if->condition)) {
          opt_constant_if(following_if, nir_src_as_bool(following_if->condition));
          return true;
+      } else if (nir_src_is_undef(following_if->condition)) {
+         opt_constant_if(following_if, false);
+         return true;
       }
 
       if (node_is_dead(&following_if->cf_node)) {
-- 
GitLab


From 77aaaf549a5412a21be8ddf2126c5a110bf42214 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Thu, 13 Apr 2023 17:05:57 -0400
Subject: [PATCH 2/3] nir: handle undef in scalar ALU opcode srcs

- Floating-point ALU opcodes are replaced with 0 or the whole opcode is
  replaced with undef based on the new NIR option.
- Integer comparison opcodes are always replaced with undef.
- Other ALU opcodes are replaced with 0.

radeonsi replacing undef with 0:

|     AFFECTED APPS      | Shaders |  SGPRs  |  VGPRs  |SpillSGPR|SpillVGPR|PrivVGPR | Scratch |CodeSize |MaxWaves | Outputs |PatchOuts|
|------------------------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|
| divinity               |     1052|   0.02 %|    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |
| gimark-0.7.0           |       10|    .    |    .    |    .    |    .    |    .    |    .    |  -0.39 %|    .    |    .    |    .    |
| gtk4                   |       98|    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |
| hitman                 |     1413|    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |
| metro_2033_redux       |     2670|    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |
| ue4_effects_cave       |      290|  -0.48 %|  -0.09 %|    .    |    .    |    .    |    .    |  -0.18 %|   0.10 %|    .    |    .    |
| vp13-catia             |      109|  -2.44 %|    .    |    .    |    .    |    .    |    .    |  -0.14 %|    .    |    .    |    .    |
| vp13-creo              |       26|  -1.35 %|    .    |    .    |    .    |    .    |    .    |  -2.58 %|    .    |    .    |    .    |
| vp20-creo              |       22|  -1.64 %|   0.46 %|    .    |    .    |    .    |    .    |  -2.30 %|  -0.37 %|    .    |    .    |
| vp20-sw                |      296|    .    |    .    |    .    |    .    |    .    |    .    |  -0.21 %|    .    |    .    |    .    |
| wasteland2             |       76|    .    |    .    |    .    |    .    |    .    |    .    |  -0.66 %|    .    |    .    |    .    |
|------------------------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|
| All affected shaders   |       93|  -4.86 %|  -0.10 %|    .    |    .    |    .    |    .    |  -1.92 %|   0.30 %|    .    |    .    |

radeonsi replacing undef with 0 except FP opcodes are replaced with undef:

|     AFFECTED APPS      | Shaders |  SGPRs  |  VGPRs  |SpillSGPR|SpillVGPR|PrivVGPR | Scratch |CodeSize |MaxWaves | Outputs |PatchOuts|
|------------------------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|
| divinity               |     1052|  -0.05 %|  -0.08 %|    .    |    .    |    .    |    .    |  -0.12 %|    .    |    .    |    .    |
| gimark-0.7.0           |       10|  -9.68 %| -13.16 %|    .    |    .    |    .    |    .    | -30.84 %|    .    | -27.27 %|    .    |
| hitman                 |     1413|    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |
| metro_2033_redux       |     2670|    .    |  -0.04 %|    .    |    .    |    .    |    .    |  -0.03 %|    .    |    .    |    .    |
| ue4_effects_cave       |      290|  -0.48 %|  -0.09 %|    .    |    .    |    .    |    .    |  -0.20 %|   0.10 %|    .    |    .    |
| vp13-catia             |      109|  -4.89 %|  -8.65 %|    .    |    .    |    .    |    .    |  -2.39 %|   6.56 %| -13.82 %|    .    |
| vp13-creo              |       26|  -1.35 %|    .    |    .    |    .    |    .    |    .    |  -2.58 %|    .    |    .    |    .    |
| vp20-creo              |       22|  -1.64 %|   0.46 %|    .    |    .    |    .    |    .    |  -2.30 %|  -0.37 %|    .    |    .    |
| vp20-sw                |      296|    .    |    .    |    .    |    .    |    .    |    .    |  -0.21 %|    .    |    .    |    .    |
| wasteland2             |       76|    .    |    .    |    .    |    .    |    .    |    .    |  -0.66 %|    .    |    .    |    .    |
|------------------------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|
| All affected shaders   |       92|  -9.11 %|  -8.51 %|    .    |    .    |    .    |    .    |  -3.21 %|  10.37 %| -12.46 %|    .    |

The viewperf benefit is not realized because of non-conformant viewperf
behavior (the workaround is added too).
---
 src/compiler/nir/nir.h           | 30 ++++++++++++
 src/compiler/nir/nir_opt_undef.c | 78 +++++++++++++++++++++++++++++++-
 2 files changed, 107 insertions(+), 1 deletion(-)

diff --git a/src/compiler/nir/nir.h b/src/compiler/nir/nir.h
index fcbdedc811af..069a2c746670 100644
--- a/src/compiler/nir/nir.h
+++ b/src/compiler/nir/nir.h
@@ -3392,6 +3392,30 @@ typedef enum {
    nir_pack_varying_interp_loc_center         = (1 << 18),
 } nir_pack_varying_options;
 
+typedef enum {
+   /* Use the default behavior. */
+   nir_undef_float_default,
+
+   /* Replace undef float with 0 in ALU opcode sources.
+    * This is for app workarounds when freezing to a nondeterministic value
+    * would break apps. (for example, API traces with hardcoded uniform
+    * locations can't eliminate any uniform due to undef)
+    */
+   nir_undef_float_zero,
+
+   /* Replace ALU opcodes sourcing undef with undef. This can be used by app
+    * profiles to eliminate more code and when drivers perform fast math
+    * optimizations.
+    */
+   nir_undef_float_undef,
+
+   /* Don't touch undef float. This is for app workarounds that are broken
+    * by any behavior of undef. (for example, API traces with hardcoded
+    * uniform locations can't eliminate any uniform due to undef)
+    */
+   nir_undef_float_keep,
+} nir_undef_float_behavior;
+
 /** An instruction filtering callback
  *
  * Returns true if the instruction should be processed and false otherwise.
@@ -3852,6 +3876,12 @@ typedef struct nir_shader_compiler_options {
     *  of adding it to the atomic source
     */
    bool lower_atomic_offset_to_range_base;
+
+   /**
+    * Replace floating-point ALU opcodes consuming undef with zero or undef.
+    * See nir_undef_float_behavior.
+    */
+   nir_undef_float_behavior undef_float_behavior;
 } nir_shader_compiler_options;
 
 typedef struct nir_shader {
diff --git a/src/compiler/nir/nir_opt_undef.c b/src/compiler/nir/nir_opt_undef.c
index effd9d0057a4..0b1248c7b61c 100644
--- a/src/compiler/nir/nir_opt_undef.c
+++ b/src/compiler/nir/nir_opt_undef.c
@@ -189,12 +189,88 @@ opt_undef_pack(nir_builder *b, nir_alu_instr *alu)
    return true;
 }
 
+static bool
+opt_undef_scalar_math_alu(nir_builder *b, nir_alu_instr *alu)
+{
+   if (nir_dest_num_components(alu->dest.dest) != 1)
+      return false;
+
+   unsigned num_srcs = nir_op_infos[alu->op].num_inputs;
+   bool has_undef = false;
+   unsigned bit_sizes = 0;
+
+   for (unsigned i = 0; i < num_srcs; i++) {
+      if (nir_src_is_undef(alu->src[i].src)) {
+         has_undef = true;
+         bit_sizes |= alu->src[i].src.ssa->bit_size;
+      }
+   }
+
+   if (!has_undef)
+      return false;
+
+   bool replace_with_undef = false;
+
+   switch (alu->op) {
+   case nir_op_ieq:
+   case nir_op_ige:
+   case nir_op_ilt:
+   case nir_op_ine:
+   case nir_op_uge:
+   case nir_op_ult:
+      replace_with_undef = true;
+      break;
+
+   default:
+      if (nir_op_infos[alu->op].output_type & nir_type_float ||
+          nir_op_infos[alu->op].input_types[0] & nir_type_float) {
+         switch (b->shader->options->undef_float_behavior) {
+         case nir_undef_float_default:
+         case nir_undef_float_zero:
+            break;
+
+         case nir_undef_float_undef:
+            replace_with_undef = true;
+            break;
+
+         case nir_undef_float_keep:
+            return false;
+         }
+      }
+      break;
+   }
+
+   b->cursor = nir_before_instr(&alu->instr);
+
+   if (replace_with_undef) {
+      /* Remove the instruction and replace it with undef. */
+      nir_ssa_def *def = nir_ssa_undef(b, 1, nir_dest_bit_size(alu->dest.dest));
+      nir_ssa_def_rewrite_uses_after(&alu->dest.dest.ssa, def, &alu->instr);
+      nir_instr_remove(&alu->instr);
+   } else {
+      /* Replace undef source operands with 0. */
+      unsigned num_srcs = nir_op_infos[alu->op].num_inputs;
+
+      for (unsigned i = 0; i < num_srcs; i++) {
+         if (nir_src_is_undef(alu->src[i].src)) {
+            nir_ssa_def *zero =
+               nir_imm_zero(b, alu->src[i].src.ssa->num_components,
+                            alu->src[i].src.ssa->bit_size);
+            nir_src_rewrite_ssa(&alu->src[i].src, zero);
+         }
+      }
+   }
+
+   return true;
+}
+
 static bool
 nir_opt_undef_instr(nir_builder *b, nir_instr *instr, void *data)
 {
    if (instr->type == nir_instr_type_alu) {
       nir_alu_instr *alu = nir_instr_as_alu(instr);
-      return opt_undef_csel(alu) || opt_undef_vecN(b, alu) || opt_undef_pack(b, alu);
+      return opt_undef_csel(alu) || opt_undef_vecN(b, alu) ||
+             opt_undef_pack(b, alu) || opt_undef_scalar_math_alu(b, alu);
    } else if (instr->type == nir_instr_type_intrinsic) {
       nir_intrinsic_instr *intrin = nir_instr_as_intrinsic(instr);
       return opt_undef_store(intrin);
-- 
GitLab


From 947e0995181efb63c3a1e7dfe61c2de2f47bfc11 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Thu, 13 Apr 2023 17:12:21 -0400
Subject: [PATCH 3/3] radeonsi: set NIR option undef_float_behavior

We just need a workaround for viewperf.
---
 src/gallium/drivers/radeonsi/si_debug_options.h | 1 +
 src/gallium/drivers/radeonsi/si_get.c           | 1 +
 src/util/00-mesa-defaults.conf                  | 6 ++++++
 3 files changed, 8 insertions(+)

diff --git a/src/gallium/drivers/radeonsi/si_debug_options.h b/src/gallium/drivers/radeonsi/si_debug_options.h
index c90ef1d39aab..88fcd9daa93d 100644
--- a/src/gallium/drivers/radeonsi/si_debug_options.h
+++ b/src/gallium/drivers/radeonsi/si_debug_options.h
@@ -21,6 +21,7 @@ OPT_BOOL(force_use_fma32, false, "Force use fma32 instruction for GPU family new
 OPT_BOOL(dcc_msaa, false, "Enable DCC for MSAA")
 OPT_BOOL(mall_noalloc, false, "Don't use MALL (infinity cache)")
 OPT_BOOL(zerovram, false, "Zero all VRAM allocations")
+OPT_INT(undef_float_behavior, 2 /* nir_undef_float_undef */, "Select the behavior of undef floats in NIR.")
 
 #undef OPT_BOOL
 #undef OPT_INT
diff --git a/src/gallium/drivers/radeonsi/si_get.c b/src/gallium/drivers/radeonsi/si_get.c
index 77799f5b390d..87d53a45d0da 100644
--- a/src/gallium/drivers/radeonsi/si_get.c
+++ b/src/gallium/drivers/radeonsi/si_get.c
@@ -1281,6 +1281,7 @@ void si_init_screen_get_functions(struct si_screen *sscreen)
       .support_indirect_inputs = BITFIELD_BIT(MESA_SHADER_TESS_CTRL) |
                                  BITFIELD_BIT(MESA_SHADER_TESS_EVAL),
       .support_indirect_outputs = BITFIELD_BIT(MESA_SHADER_TESS_CTRL),
+      .undef_float_behavior = sscreen->options.undef_float_behavior,
    };
    sscreen->nir_options = nir_options;
 }
diff --git a/src/util/00-mesa-defaults.conf b/src/util/00-mesa-defaults.conf
index 71baff048b33..e9109028d63d 100644
--- a/src/util/00-mesa-defaults.conf
+++ b/src/util/00-mesa-defaults.conf
@@ -938,6 +938,12 @@ TODO: document the other workarounds.
         <application name="SPECviewperf13" executable="viewperf">
             <option name="glthread_nop_check_framebuffer_status" value="true" />
             <option name="radeonsi_sync_compile" value="true" />
+            <!-- Viewperf13/CATIA_car_01 uses uninitialized floats, which
+                 causes GLSL uniforms to be eliminated, which renumbers uniform
+                 locations, but viewperf hardcodes uniform locations
+                 in the source code instead of querying them, so we have to
+                 suppress dead code elimination due to uninitialized floats. -->
+            <option name="radeonsi_undef_float_behavior" value="1"/> <!-- nir_undef_float_zero -->
         </application>
         <application name="Road Redemption" executable="RoadRedemption.x86_64">
             <option name="radeonsi_clamp_div_by_zero" value="true" />
-- 
GitLab

