From 88bd3a6c42381062a24a0b145e41a1d012b979f5 Mon Sep 17 00:00:00 2001
From: Qiang Yu <yuq825@gmail.com>
Date: Tue, 15 Oct 2024 10:48:16 +0800
Subject: [PATCH 1/5] egl: decouple dmabuf import/export cap from xserver
 support

multibuffers_available denotes xserver side support for
DRI3 and Present protocols which should not affect client
side support for dmabuf import/export.

This is for xserver with amdgpu DDX in which case
multibuffers_available will be false, but dmabuf import/export
should be enabled to support applications like mpv which use
dmabuf import for vaapi decoded buffer.
---
 src/egl/drivers/dri2/egl_dri2.c | 7 ++-----
 1 file changed, 2 insertions(+), 5 deletions(-)

diff --git a/src/egl/drivers/dri2/egl_dri2.c b/src/egl/drivers/dri2/egl_dri2.c
index a31d7c58080e5..df8f06f968fca 100644
--- a/src/egl/drivers/dri2/egl_dri2.c
+++ b/src/egl/drivers/dri2/egl_dri2.c
@@ -629,11 +629,8 @@ dri2_setup_screen(_EGLDisplay *disp)
 
 #ifdef HAVE_LIBDRM
    int caps = dri_get_screen_param(dri2_dpy->dri_screen_render_gpu, PIPE_CAP_DMABUF);
-   /* set if both import and export are suported */
-   if (dri2_dpy->multibuffers_available) {
-      dri2_dpy->has_dmabuf_import = (caps & DRM_PRIME_CAP_IMPORT) > 0;
-      dri2_dpy->has_dmabuf_export = (caps & DRM_PRIME_CAP_EXPORT) > 0;
-   }
+   dri2_dpy->has_dmabuf_import = (caps & DRM_PRIME_CAP_IMPORT) > 0;
+   dri2_dpy->has_dmabuf_export = (caps & DRM_PRIME_CAP_EXPORT) > 0;
 #endif
 #ifdef HAVE_ANDROID_PLATFORM
    dri2_dpy->has_native_fence_fd = dri_get_screen_param(dri2_dpy->dri_screen_render_gpu, PIPE_CAP_NATIVE_FENCE_FD);
-- 
GitLab


From 8e96bd468f8cb7a97135d1d101f0272ec0eeb23c Mon Sep 17 00:00:00 2001
From: Qiang Yu <yuq825@gmail.com>
Date: Mon, 30 Dec 2024 21:10:18 +0800
Subject: [PATCH 2/5] dri: dmabuf cap does not rely on winsys multibuffer
 support

dmabuf cap is client side cap, should not rely on whether window
system support multibuffer (i.e. DRI2 multi plane with modifier).
---
 src/gallium/frontends/dri/dri_screen.c | 14 ++++++--------
 src/gallium/frontends/dri/dri_screen.h |  1 +
 src/gallium/frontends/dri/kopper.c     |  2 +-
 3 files changed, 8 insertions(+), 9 deletions(-)

diff --git a/src/gallium/frontends/dri/dri_screen.c b/src/gallium/frontends/dri/dri_screen.c
index 327e83996fbed..2be771399bc71 100644
--- a/src/gallium/frontends/dri/dri_screen.c
+++ b/src/gallium/frontends/dri/dri_screen.c
@@ -646,16 +646,14 @@ dri_init_screen(struct dri_screen *screen,
    if (pscreen->get_param(pscreen, PIPE_CAP_DEVICE_PROTECTED_CONTEXT))
       screen->has_protected_context = true;
    screen->has_reset_status_query = pscreen->get_param(pscreen, PIPE_CAP_DEVICE_RESET_STATUS_QUERY);
-
+   screen->has_multibuffer = has_multibuffer;
 
 #ifdef HAVE_LIBDRM
-   if (has_multibuffer) {
-      int dmabuf_caps = pscreen->get_param(pscreen, PIPE_CAP_DMABUF);
-      if (dmabuf_caps & DRM_PRIME_CAP_IMPORT)
-         screen->dmabuf_import = true;
-      if (screen->dmabuf_import && dmabuf_caps & DRM_PRIME_CAP_EXPORT)
-         screen->has_dmabuf = true;
-   }
+   int dmabuf_caps = pscreen->get_param(pscreen, PIPE_CAP_DMABUF);
+   if (dmabuf_caps & DRM_PRIME_CAP_IMPORT)
+      screen->dmabuf_import = true;
+   if (screen->dmabuf_import && dmabuf_caps & DRM_PRIME_CAP_EXPORT)
+      screen->has_dmabuf = true;
 #endif
 
    return dri_fill_in_modes(screen);
diff --git a/src/gallium/frontends/dri/dri_screen.h b/src/gallium/frontends/dri/dri_screen.h
index bdb64ddf9ddc2..dc62e12cddbf7 100644
--- a/src/gallium/frontends/dri/dri_screen.h
+++ b/src/gallium/frontends/dri/dri_screen.h
@@ -129,6 +129,7 @@ struct dri_screen
    /* kopper */
    bool has_dmabuf;
    bool is_sw;
+   bool has_multibuffer;
 };
 
 static inline const __DRIkopperLoaderExtension *
diff --git a/src/gallium/frontends/dri/kopper.c b/src/gallium/frontends/dri/kopper.c
index c2c476687bc4c..a2ce86ff69535 100644
--- a/src/gallium/frontends/dri/kopper.c
+++ b/src/gallium/frontends/dri/kopper.c
@@ -158,7 +158,7 @@ kopper_get_pixmap_buffer(struct dri_drawable *drawable,
 
 #ifndef GLX_USE_APPLE
    drawable->image = loader_dri3_get_pixmap_buffer(conn, pixmap, screen,
-                                                   fourcc, drawable->screen->dmabuf_import, &width, &height, drawable);
+                                                   fourcc, drawable->screen->has_multibuffer, &width, &height, drawable);
 #else
    drawable->image = NULL;
 #endif
-- 
GitLab


From eb82c9291503953654a1025643f3f383d61c7db5 Mon Sep 17 00:00:00 2001
From: Qiang Yu <yuq825@gmail.com>
Date: Tue, 15 Oct 2024 11:24:13 +0800
Subject: [PATCH 3/5] glx/egl/x11: fix x11_dri3_check_multibuffer

glx/egl "multibuffers" denotes if server side support DRI3
multi plane and modifiers which is version >= 1.2. But now
it returns true just when DRI3 version >= 1.

This causes problem when xserver with amdgpu DDX which only
support DRI3 1.0, so "multibuffers" gets set unexpectedly,
and client send DRI3 >= 1.2 request to server which gets
unimplemented error.

Fixes: 694478025d3 ("egl/glx: make detecting explicit modifier support more explicit")
---
 src/egl/drivers/dri2/platform_x11.c         |  3 +--
 src/gallium/auxiliary/vl/vl_winsys_kopper.c |  6 ++----
 src/glx/glxclient.h                         |  1 -
 src/glx/glxext.c                            |  4 ++--
 src/x11/loader_x11.c                        | 23 +++++++--------------
 src/x11/loader_x11.h                        |  2 +-
 6 files changed, 13 insertions(+), 26 deletions(-)

diff --git a/src/egl/drivers/dri2/platform_x11.c b/src/egl/drivers/dri2/platform_x11.c
index 4895e6d24fddf..639c83641580a 100644
--- a/src/egl/drivers/dri2/platform_x11.c
+++ b/src/egl/drivers/dri2/platform_x11.c
@@ -1789,8 +1789,7 @@ dri2_x11_check_multibuffers(_EGLDisplay *disp)
    struct dri2_egl_display *dri2_dpy = dri2_egl_display(disp);
 
 #ifdef HAVE_X11_DRM
-   bool err;
-   dri2_dpy->multibuffers_available = x11_dri3_check_multibuffer(dri2_dpy->conn, &err, &dri2_dpy->explicit_modifiers);
+   dri2_dpy->multibuffers_available = x11_dri3_has_multibuffer(dri2_dpy->conn);
 
    if (disp->Options.Zink && !disp->Options.ForceSoftware &&
        !dri2_dpy->multibuffers_available &&
diff --git a/src/gallium/auxiliary/vl/vl_winsys_kopper.c b/src/gallium/auxiliary/vl/vl_winsys_kopper.c
index f8565b0a4b5d3..ca2edb28673d3 100644
--- a/src/gallium/auxiliary/vl/vl_winsys_kopper.c
+++ b/src/gallium/auxiliary/vl/vl_winsys_kopper.c
@@ -168,7 +168,6 @@ vl_kopper_screen_create_x11(Display *display, int screen)
    xcb_get_geometry_cookie_t geom_cookie;
    xcb_get_geometry_reply_t *geom_reply;
    struct vl_kopper_screen *scrn = CALLOC_STRUCT(vl_kopper_screen);
-   bool err = false;
    if (!scrn)
       goto error;
 
@@ -177,9 +176,8 @@ vl_kopper_screen_create_x11(Display *display, int screen)
       goto error;
 
    int fd = x11_dri3_open(scrn->conn, RootWindow(display, screen), 0);
-   bool explicit_modifiers = false;
-   x11_dri3_check_multibuffer(scrn->conn, &err, &explicit_modifiers);
-   if (fd < 0 || !explicit_modifiers) {
+   bool has_multibuffer = x11_dri3_has_multibuffer(scrn->conn);
+   if (fd < 0 || !has_multibuffer) {
       goto error;
    }
 
diff --git a/src/glx/glxclient.h b/src/glx/glxclient.h
index 97c5bc093f9bd..121f09707ea11 100644
--- a/src/glx/glxclient.h
+++ b/src/glx/glxclient.h
@@ -600,7 +600,6 @@ struct glx_display
 
    __glxHashTable *dri2Hash;
    bool has_multibuffer;
-   bool has_explicit_modifiers;
 #endif
 #ifdef GLX_USE_WINDOWSGL
    __GLXDRIdisplay *windowsdriDisplay;
diff --git a/src/glx/glxext.c b/src/glx/glxext.c
index 8d7518e1f4786..7c72595c9177a 100644
--- a/src/glx/glxext.c
+++ b/src/glx/glxext.c
@@ -1013,7 +1013,7 @@ __glXInitialize(Display * dpy)
 #if defined(GLX_USE_DRM)
    bool dri3_err = false;
    if (glx_direct && glx_accel && dri3)
-      dpyPriv->has_multibuffer = x11_dri3_check_multibuffer(XGetXCBConnection(dpy), &dri3_err, &dpyPriv->has_explicit_modifiers);
+      dpyPriv->has_multibuffer = x11_dri3_has_multibuffer(XGetXCBConnection(dpy));
    if (glx_direct && glx_accel &&
        (!(glx_driver & GLX_DRIVER_ZINK_YES) || !kopper)) {
       if (dri3) {
@@ -1040,7 +1040,7 @@ __glXInitialize(Display * dpy)
       glx_driver |= GLX_DRIVER_SW;
 
 #if !defined(GLX_USE_APPLE)
-   if (!dpyPriv->has_explicit_modifiers && glx_accel && !debug_get_bool_option("LIBGL_KOPPER_DRI2", false)) {
+   if (!dpyPriv->has_multibuffer && glx_accel && !debug_get_bool_option("LIBGL_KOPPER_DRI2", false)) {
       if (glx_driver & GLX_DRIVER_ZINK_YES) {
          /* only print error if zink was explicitly requested */
          CriticalErrorMessageF("DRI3 not available\n");
diff --git a/src/x11/loader_x11.c b/src/x11/loader_x11.c
index 75eb560595fdd..9477ec9a4046e 100644
--- a/src/x11/loader_x11.c
+++ b/src/x11/loader_x11.c
@@ -93,7 +93,7 @@ x11_dri3_open(xcb_connection_t *conn,
 #endif
 
 bool
-x11_dri3_check_multibuffer(xcb_connection_t *c, bool *err, bool *explicit_modifiers)
+x11_dri3_has_multibuffer(xcb_connection_t *c)
 {
    xcb_dri3_query_version_cookie_t      dri3_cookie;
    xcb_dri3_query_version_reply_t       *dri3_reply;
@@ -107,11 +107,11 @@ x11_dri3_check_multibuffer(xcb_connection_t *c, bool *err, bool *explicit_modifi
 
    extension = xcb_get_extension_data(c, &xcb_dri3_id);
    if (!(extension && extension->present))
-      goto error;
+      return false;
 
    extension = xcb_get_extension_data(c, &xcb_present_id);
    if (!(extension && extension->present))
-      goto error;
+      return false;
 
    dri3_cookie = xcb_dri3_query_version(c,
                                         DRI3_SUPPORTED_MAJOR,
@@ -123,7 +123,7 @@ x11_dri3_check_multibuffer(xcb_connection_t *c, bool *err, bool *explicit_modifi
    dri3_reply = xcb_dri3_query_version_reply(c, dri3_cookie, &error);
    if (!dri3_reply) {
       free(error);
-      goto error;
+      return false;
    }
 
    int dri3Major = dri3_reply->major_version;
@@ -133,21 +133,12 @@ x11_dri3_check_multibuffer(xcb_connection_t *c, bool *err, bool *explicit_modifi
    present_reply = xcb_present_query_version_reply(c, present_cookie, &error);
    if (!present_reply) {
       free(error);
-      goto error;
+      return false;
    }
    int presentMajor = present_reply->major_version;
    int presentMinor = present_reply->minor_version;
    free(present_reply);
 
-#ifdef HAVE_X11_DRM
-   if (presentMajor > 1 || (presentMajor == 1 && presentMinor >= 2)) {
-      *explicit_modifiers = dri3Major > 1 || (dri3Major == 1 && dri3Minor >= 2);
-      if (dri3Major >= 1)
-         return true;
-   }
-#endif
-   return false;
-error:
-   *err = true;
-   return false;
+   return (presentMajor > 1 || (presentMajor == 1 && presentMinor >= 2)) &&
+      (dri3Major > 1 || (dri3Major == 1 && dri3Minor >= 2));
 }
diff --git a/src/x11/loader_x11.h b/src/x11/loader_x11.h
index 5aa6262aa1dc7..c1cfa7e2ea65e 100644
--- a/src/x11/loader_x11.h
+++ b/src/x11/loader_x11.h
@@ -27,6 +27,6 @@
 #include <xcb/xcb.h>
 #include <inttypes.h>
 int x11_dri3_open(xcb_connection_t *conn, xcb_window_t root, uint32_t provider);
-bool x11_dri3_check_multibuffer(xcb_connection_t *c, bool *err, bool *explicit_modifiers);
+bool x11_dri3_has_multibuffer(xcb_connection_t *c);
 
 #endif
-- 
GitLab


From f79991be7c0d169b6a9a110841e6f9488a9c6dac Mon Sep 17 00:00:00 2001
From: Qiang Yu <yuq825@gmail.com>
Date: Mon, 30 Dec 2024 21:16:11 +0800
Subject: [PATCH 4/5] kopper: remove unused function definition

---
 src/gallium/frontends/dri/kopper.c | 4 ----
 1 file changed, 4 deletions(-)

diff --git a/src/gallium/frontends/dri/kopper.c b/src/gallium/frontends/dri/kopper.c
index a2ce86ff69535..bcdf201fb65b2 100644
--- a/src/gallium/frontends/dri/kopper.c
+++ b/src/gallium/frontends/dri/kopper.c
@@ -52,10 +52,6 @@
 #include "loader_dri3_helper.h"
 #endif
 
-static struct dri_drawable *
-kopper_create_drawable(struct dri_screen *screen, const struct gl_config *visual,
-                       bool isPixmap, void *loaderPrivate);
-
 struct pipe_screen *
 kopper_init_screen(struct dri_screen *screen, bool driver_name_is_inferred)
 {
-- 
GitLab


From 37fdf0560113b9869c2e35bffb979e9de362486c Mon Sep 17 00:00:00 2001
From: Qiang Yu <yuq825@gmail.com>
Date: Mon, 30 Dec 2024 21:34:52 +0800
Subject: [PATCH 5/5] dri,egl,glx: remove redundant usage of HAVE_X11_DRM

These files are build or used only when drm platform is
available, no need to check this macro inside them.
---
 src/egl/drivers/dri2/platform_x11_dri3.c      |  6 -----
 .../frontends/dri/loader_dri3_helper.c        | 23 ++++---------------
 .../frontends/dri/loader_dri3_helper.h        |  3 +--
 src/glx/dri3_glx.c                            |  2 --
 4 files changed, 6 insertions(+), 28 deletions(-)

diff --git a/src/egl/drivers/dri2/platform_x11_dri3.c b/src/egl/drivers/dri2/platform_x11_dri3.c
index d9b518f2a8e65..db5e64c667896 100644
--- a/src/egl/drivers/dri2/platform_x11_dri3.c
+++ b/src/egl/drivers/dri2/platform_x11_dri3.c
@@ -331,7 +331,6 @@ dri3_create_image_khr_pixmap(_EGLDisplay *disp, _EGLContext *ctx,
    return &dri2_img->base;
 }
 
-#ifdef HAVE_X11_DRM
 static _EGLImage *
 dri3_create_image_khr_pixmap_from_buffers(_EGLDisplay *disp, _EGLContext *ctx,
                                           EGLClientBuffer buffer,
@@ -384,23 +383,18 @@ dri3_create_image_khr_pixmap_from_buffers(_EGLDisplay *disp, _EGLContext *ctx,
 
    return &dri2_img->base;
 }
-#endif
 
 static _EGLImage *
 dri3_create_image_khr(_EGLDisplay *disp, _EGLContext *ctx, EGLenum target,
                       EGLClientBuffer buffer, const EGLint *attr_list)
 {
-#ifdef HAVE_X11_DRM
    struct dri2_egl_display *dri2_dpy = dri2_egl_display(disp);
-#endif
 
    switch (target) {
    case EGL_NATIVE_PIXMAP_KHR:
-#ifdef HAVE_X11_DRM
       if (dri2_dpy->multibuffers_available)
          return dri3_create_image_khr_pixmap_from_buffers(disp, ctx, buffer,
                                                           attr_list);
-#endif
       return dri3_create_image_khr_pixmap(disp, ctx, buffer, attr_list);
    default:
       return dri2_create_image_khr(disp, ctx, target, buffer, attr_list);
diff --git a/src/gallium/frontends/dri/loader_dri3_helper.c b/src/gallium/frontends/dri/loader_dri3_helper.c
index e1f51619c5fa3..e30fb064baa62 100644
--- a/src/gallium/frontends/dri/loader_dri3_helper.c
+++ b/src/gallium/frontends/dri/loader_dri3_helper.c
@@ -514,7 +514,6 @@ dri3_handle_present_event(struct loader_dri3_drawable *draw,
          /* If the server tells us that our allocation is suboptimal, we
           * reallocate once.
           */
-#ifdef HAVE_X11_DRM
          if (ce->mode == XCB_PRESENT_COMPLETE_MODE_SUBOPTIMAL_COPY &&
              draw->last_present_mode != ce->mode) {
             for (int b = 0; b < ARRAY_SIZE(draw->buffers); b++) {
@@ -522,7 +521,6 @@ dri3_handle_present_event(struct loader_dri3_drawable *draw,
                   draw->buffers[b]->reallocate = true;
             }
          }
-#endif
          draw->last_present_mode = ce->mode;
 
          draw->ust = ce->ust;
@@ -1115,10 +1113,10 @@ loader_dri3_swap_buffers_msc(struct loader_dri3_drawable *draw,
        */
       if (draw->cur_blit_source != -1)
          options |= XCB_PRESENT_OPTION_COPY;
-#ifdef HAVE_X11_DRM
+
       if (draw->multiplanes_available)
          options |= XCB_PRESENT_OPTION_SUBOPTIMAL;
-#endif
+
       back->busy = 1;
       back->last_swap = draw->send_sbc;
 
@@ -1318,7 +1316,6 @@ dri3_linear_format_for_format(struct loader_dri3_drawable *draw, uint32_t format
    }
 }
 
-#ifdef HAVE_X11_DRM
 static bool
 has_supported_modifier(struct loader_dri3_drawable *draw, unsigned int format,
                        uint64_t *modifiers, uint32_t count)
@@ -1353,7 +1350,6 @@ has_supported_modifier(struct loader_dri3_drawable *draw, unsigned int format,
    free(supported_modifiers);
    return found;
 }
-#endif
 
 /** loader_dri3_alloc_render_buffer
  *
@@ -1402,7 +1398,6 @@ dri3_alloc_render_buffer(struct loader_dri3_drawable *draw, unsigned int fourcc,
       goto no_image;
 
    if (draw->dri_screen_render_gpu == draw->dri_screen_display_gpu) {
-#ifdef HAVE_X11_DRM
       if (draw->multiplanes_available && draw->dri_screen_render_gpu->base.screen->resource_create_with_modifiers) {
          xcb_dri3_get_supported_modifiers_cookie_t mod_cookie;
          xcb_dri3_get_supported_modifiers_reply_t *mod_reply;
@@ -1451,7 +1446,6 @@ dri3_alloc_render_buffer(struct loader_dri3_drawable *draw, unsigned int fourcc,
 
          free(mod_reply);
       }
-#endif
       buffer->image = dri_create_image_with_modifiers(draw->dri_screen_render_gpu,
                                               width, height, format,
                                               __DRI_IMAGE_USE_SHARE |
@@ -1575,7 +1569,7 @@ dri3_alloc_render_buffer(struct loader_dri3_drawable *draw, unsigned int fourcc,
    }
 
    pixmap = xcb_generate_id(draw->conn);
-#ifdef HAVE_X11_DRM
+
    if (draw->multiplanes_available &&
        buffer->modifier != DRM_FORMAT_MOD_INVALID) {
       xcb_dri3_pixmap_from_buffers(draw->conn,
@@ -1590,9 +1584,7 @@ dri3_alloc_render_buffer(struct loader_dri3_drawable *draw, unsigned int fourcc,
                                    depth, buffer->cpp * 8,
                                    buffer->modifier,
                                    buffer_fds);
-   } else
-#endif
-   {
+   } else {
       xcb_dri3_pixmap_from_buffer(draw->conn,
                                   pixmap,
                                   draw->drawable,
@@ -1807,7 +1799,6 @@ loader_dri3_create_image(xcb_connection_t *c,
    return ret;
 }
 
-#ifdef HAVE_X11_DRM
 struct dri_image *
 loader_dri3_create_image_from_buffers(xcb_connection_t *c,
                                       xcb_dri3_buffers_from_pixmap_reply_t *bp_reply,
@@ -1848,7 +1839,6 @@ loader_dri3_create_image_from_buffers(xcb_connection_t *c,
 
    return ret;
 }
-#endif
 
 struct dri_image *
 loader_dri3_get_pixmap_buffer(xcb_connection_t *conn, xcb_drawable_t pixmap, struct dri_screen *screen,
@@ -1856,7 +1846,6 @@ loader_dri3_get_pixmap_buffer(xcb_connection_t *conn, xcb_drawable_t pixmap, str
                               int *width, int *height, void *loader_data)
 {
    struct dri_image *image;
-#ifdef HAVE_X11_DRM
    if (multiplanes_available) {
       xcb_dri3_buffers_from_pixmap_cookie_t bps_cookie;
       xcb_dri3_buffers_from_pixmap_reply_t *bps_reply;
@@ -1871,9 +1860,7 @@ loader_dri3_get_pixmap_buffer(xcb_connection_t *conn, xcb_drawable_t pixmap, str
       *width = bps_reply->width;
       *height = bps_reply->height;
       free(bps_reply);
-   } else
-#endif
-   {
+   } else {
       xcb_dri3_buffer_from_pixmap_cookie_t bp_cookie;
       xcb_dri3_buffer_from_pixmap_reply_t *bp_reply;
 
diff --git a/src/gallium/frontends/dri/loader_dri3_helper.h b/src/gallium/frontends/dri/loader_dri3_helper.h
index 9061e9755e2be..4da19d7309031 100644
--- a/src/gallium/frontends/dri/loader_dri3_helper.h
+++ b/src/gallium/frontends/dri/loader_dri3_helper.h
@@ -256,14 +256,13 @@ loader_dri3_create_image(xcb_connection_t *c,
                          struct dri_screen *dri_screen,
                          void *loaderPrivate);
 
-#ifdef HAVE_X11_DRM
 PUBLIC struct dri_image *
 loader_dri3_create_image_from_buffers(xcb_connection_t *c,
                                       xcb_dri3_buffers_from_pixmap_reply_t *bp_reply,
                                       unsigned int fourcc,
                                       struct dri_screen *dri_screen,
                                       void *loaderPrivate);
-#endif
+
 PUBLIC int
 loader_dri3_get_buffers(struct dri_drawable *driDrawable,
                         unsigned int format,
diff --git a/src/glx/dri3_glx.c b/src/glx/dri3_glx.c
index dc4eb843526d1..e3ad92bc450cb 100644
--- a/src/glx/dri3_glx.c
+++ b/src/glx/dri3_glx.c
@@ -189,9 +189,7 @@ dri3_create_drawable(struct glx_screen *base, XID xDrawable,
    pdraw->base.drawable = drawable;
    pdraw->base.psc = &psc->base;
 
-#ifdef HAVE_X11_DRM
    has_multibuffer = base->display->has_multibuffer;
-#endif
 
    (void) __glXInitialize(psc->base.dpy);
 
-- 
GitLab

