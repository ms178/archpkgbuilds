From d7bc5a6721440c9d7d3d411594234871b0a70dc7 Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Thu, 1 Jun 2023 16:18:27 +0100
Subject: [PATCH 1/2] aco: fix has_color_exports=true for mrtz exports

V_008DFC_SQ_EXP_NULL is after V_008DFC_SQ_EXP_MRTZ.

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
Reviewed-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Reviewed-by: Qiang Yu <yuq825@gmail.com>
Tested-by: Mikhail Gavrilov mikhail.v.gavrilov@gmail.com
Fixes: d3611af3896 ("aco: support nir_export_amd with ps targets")
Closes: https://gitlab.freedesktop.org/mesa/mesa/-/issues/9135
---
 src/amd/compiler/aco_instruction_selection.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/amd/compiler/aco_instruction_selection.cpp b/src/amd/compiler/aco_instruction_selection.cpp
index 1f55f9887c06..661142d8bc90 100644
--- a/src/amd/compiler/aco_instruction_selection.cpp
+++ b/src/amd/compiler/aco_instruction_selection.cpp
@@ -8989,7 +8989,7 @@ visit_intrinsic(isel_context* ctx, nir_intrinsic_instr* instr)
       if (target == V_008DFC_SQ_EXP_POS || target <= V_008DFC_SQ_EXP_NULL)
          ctx->block->kind |= block_kind_export_end;
 
-      if (target <= V_008DFC_SQ_EXP_NULL)
+      if (target < V_008DFC_SQ_EXP_MRTZ)
          ctx->program->has_color_exports = true;
 
       aco_ptr<Export_instruction> exp{
-- 
GitLab


From a21656f54a4e1609dd137a99ecc7447eb84fcbf6 Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Fri, 2 Jun 2023 13:36:55 +0100
Subject: [PATCH 2/2] aco/tests: add discard export target tests

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
---
 src/amd/compiler/tests/test_isel.cpp | 49 ++++++++++++++++++++++++++++
 1 file changed, 49 insertions(+)

diff --git a/src/amd/compiler/tests/test_isel.cpp b/src/amd/compiler/tests/test_isel.cpp
index 970076b3093c..887f827b9ca7 100644
--- a/src/amd/compiler/tests/test_isel.cpp
+++ b/src/amd/compiler/tests/test_isel.cpp
@@ -185,3 +185,52 @@ BEGIN_TEST(isel.sparse.clause)
       pbld.print_ir(VK_SHADER_STAGE_COMPUTE_BIT, "Assembly", true);
    }
 END_TEST
+
+BEGIN_TEST(isel.discard_early_exit.mrtz)
+   QoShaderModuleCreateInfo vs = qoShaderModuleCreateInfoGLSL(VERTEX,
+      void main() {}
+   );
+   QoShaderModuleCreateInfo fs = qoShaderModuleCreateInfoGLSL(FRAGMENT,
+      void main() {
+         if (gl_FragCoord.w > 0.5)
+            discard;
+         gl_FragDepth = 1.0 / gl_FragCoord.z;
+      }
+   );
+
+   /* On GFX11, the discard early exit must use mrtz if the shader exports only depth. */
+   //>> exp mrtz v0, off, off, off done ; $_ $_
+   //! s_endpgm                         ; $_
+   //! BB1:
+   //! exp mrtz off, off, off, off done ; $_ $_
+   //! s_endpgm                         ; $_
+
+   PipelineBuilder pbld(get_vk_device(GFX11));
+   pbld.add_vsfs(vs, fs);
+   pbld.print_ir(VK_SHADER_STAGE_FRAGMENT_BIT, "Assembly");
+END_TEST
+
+BEGIN_TEST(isel.discard_early_exit.mrt0)
+   QoShaderModuleCreateInfo vs = qoShaderModuleCreateInfoGLSL(VERTEX,
+      void main() {}
+   );
+   QoShaderModuleCreateInfo fs = qoShaderModuleCreateInfoGLSL(FRAGMENT,
+      layout(location = 0) out vec4 out_color;
+      void main() {
+         if (gl_FragCoord.w > 0.5)
+            discard;
+         out_color = vec4(1.0 / gl_FragCoord.z);
+      }
+   );
+
+   /* On GFX11, the discard early exit must use mrt0 if the shader exports color. */
+   //>> exp mrt0 v0, v0, v0, v0 done    ; $_ $_
+   //! s_endpgm                         ; $_
+   //! BB1:
+   //! exp mrt0 off, off, off, off done ; $_ $_
+   //! s_endpgm                         ; $_
+
+   PipelineBuilder pbld(get_vk_device(GFX11));
+   pbld.add_vsfs(vs, fs);
+   pbld.print_ir(VK_SHADER_STAGE_FRAGMENT_BIT, "Assembly");
+END_TEST
-- 
GitLab

