From c5030497a3561092e2f401a8096449cf03fe28e9 Mon Sep 17 00:00:00 2001
From: Pierre-Eric Pelloux-Prayer <pierre-eric.pelloux-prayer@amd.com>
Date: Fri, 17 Mar 2023 13:57:00 +0100
Subject: [PATCH 1/2] mesa: fix CopyImageSubDataOES with
 GL_TEXTURE_EXTERNAL_OES

GL_TEXTURE_EXTERNAL_OES is allowed on ES(2) and glCopyImageSubDataOES
is implemented as an alias of CopyImageSubData.
---
 src/mesa/main/copyimage.c | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/src/mesa/main/copyimage.c b/src/mesa/main/copyimage.c
index 91746dddec9b..a043ddcffd3b 100644
--- a/src/mesa/main/copyimage.c
+++ b/src/mesa/main/copyimage.c
@@ -103,6 +103,9 @@ prepare_target_err(struct gl_context *ctx, GLuint name, GLenum target,
       break;
    case GL_TEXTURE_EXTERNAL_OES:
       /* Only exists in ES */
+      if (ctx->API == API_OPENGLES || ctx->API == API_OPENGLES2)
+         break;
+      /* fallthrough */
    case GL_TEXTURE_BUFFER:
    default:
       _mesa_error(ctx, GL_INVALID_ENUM,
-- 
GitLab


From a4d610aed43e36285fe4febcf3decde8749a7ec5 Mon Sep 17 00:00:00 2001
From: Pierre-Eric Pelloux-Prayer <pierre-eric.pelloux-prayer@amd.com>
Date: Fri, 17 Mar 2023 14:03:05 +0100
Subject: [PATCH 2/2] ac: add bo pitch to umd metadata

The first dw was only used to stored the version.

Use the first 16 bits to store "pitch >> 2".

Increment version to 2; this won't break anything because the only
check was that version wasn't 0.

This would be useful when importing handle from app
that can't know the stride (in my case: umr).
---
 src/amd/common/ac_surface.c | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

diff --git a/src/amd/common/ac_surface.c b/src/amd/common/ac_surface.c
index a918586aca86..31c0216499d6 100644
--- a/src/amd/common/ac_surface.c
+++ b/src/amd/common/ac_surface.c
@@ -2849,7 +2849,7 @@ void ac_surface_get_umd_metadata(const struct radeon_info *info, struct radeon_s
    }
 
    /* Metadata image format format version 1:
-    * [0] = 1 (metadata format identifier)
+    * [0] = ((stride >> 2) << 16) | metadata_format_identifier
     * [1] = (VENDOR_ID << 16) | PCI_ID
     * [2:9] = image descriptor for the whole resource
     *         [2] is always 0, because the base address is cleared
@@ -2858,7 +2858,9 @@ void ac_surface_get_umd_metadata(const struct radeon_info *info, struct radeon_s
     * [10:10+LAST_LEVEL] = mipmap level offset bits [39:8] for each level
     */
 
-   metadata[0] = 1; /* metadata image format version 1 */
+   uint32_t pitch = info->gfx_level >= GFX9 ? surf->u.gfx9.surf_pitch :
+                                              surf->u.legacy.level[0].nblk_x;
+   metadata[0] = ((pitch * surf->bpe) >> 2) << 16 | 2; /* metadata image format version 2 */
 
    /* Tiling modes are ambiguous without a PCI ID. */
    metadata[1] = ac_get_umd_metadata_word1(info);
-- 
GitLab

