From 4e189a2383e00a3263e9c29fb9856e27163e71dd Mon Sep 17 00:00:00 2001
From: Tatsuyuki Ishi <ishitatsuyuki@gmail.com>
Date: Tue, 9 Jan 2024 12:41:14 +0900
Subject: [PATCH 1/3] radv: Remove defunct radv_device_memory->map field

---
 src/amd/vulkan/radv_private.h | 1 -
 1 file changed, 1 deletion(-)

diff --git a/src/amd/vulkan/radv_private.h b/src/amd/vulkan/radv_private.h
index 6a7babef6014..ccb4a42ee2fd 100644
--- a/src/amd/vulkan/radv_private.h
+++ b/src/amd/vulkan/radv_private.h
@@ -1069,7 +1069,6 @@ struct radv_device_memory {
    struct radv_buffer *buffer;
    uint32_t heap_index;
    uint64_t alloc_size;
-   void *map;
    void *user_ptr;
 
 #if RADV_SUPPORT_ANDROID_HARDWARE_BUFFER
-- 
GitLab


From 387fecc671409db42ca36efa51e08f2ed23953f8 Mon Sep 17 00:00:00 2001
From: Tatsuyuki Ishi <ishitatsuyuki@gmail.com>
Date: Tue, 9 Jan 2024 12:46:50 +0900
Subject: [PATCH 2/3] radv: Add a workaround to skip vkUnmapMemory calls

---
 src/amd/vulkan/radv_device_memory.c | 11 ++++++++---
 src/amd/vulkan/radv_instance.c      |  3 +++
 src/amd/vulkan/radv_private.h       |  2 ++
 src/util/driconf.h                  |  4 ++++
 4 files changed, 17 insertions(+), 3 deletions(-)

diff --git a/src/amd/vulkan/radv_device_memory.c b/src/amd/vulkan/radv_device_memory.c
index c6f5bf0b6707..26e8e956234f 100644
--- a/src/amd/vulkan/radv_device_memory.c
+++ b/src/amd/vulkan/radv_device_memory.c
@@ -297,10 +297,15 @@ radv_MapMemory2KHR(VkDevice _device, const VkMemoryMapInfoKHR *pMemoryMapInfo, v
    RADV_FROM_HANDLE(radv_device, device, _device);
    RADV_FROM_HANDLE(radv_device_memory, mem, pMemoryMapInfo->memory);
 
-   if (mem->user_ptr)
+   if (mem->user_ptr) {
       *ppData = mem->user_ptr;
-   else
+   } else if (mem->retained_map) {
+      *ppData = mem->retained_map;
+   } else {
       *ppData = device->ws->buffer_map(mem->bo);
+      if (device->instance->skip_unmap)
+         mem->retained_map = *ppData;
+   }
 
    if (*ppData) {
       vk_rmv_log_cpu_map(&device->vk, mem->bo->va, false);
@@ -318,7 +323,7 @@ radv_UnmapMemory2KHR(VkDevice _device, const VkMemoryUnmapInfoKHR *pMemoryUnmapI
    RADV_FROM_HANDLE(radv_device_memory, mem, pMemoryUnmapInfo->memory);
 
    vk_rmv_log_cpu_map(&device->vk, mem->bo->va, true);
-   if (mem->user_ptr == NULL)
+   if (mem->user_ptr == NULL && mem->retained_map == NULL)
       device->ws->buffer_unmap(mem->bo);
 
    return VK_SUCCESS;
diff --git a/src/amd/vulkan/radv_instance.c b/src/amd/vulkan/radv_instance.c
index 762b4b3383d7..9c7b23c70b6f 100644
--- a/src/amd/vulkan/radv_instance.c
+++ b/src/amd/vulkan/radv_instance.c
@@ -154,6 +154,7 @@ static const driOptionDescription radv_dri_options[] = {
       DRI_CONF_RADV_FLUSH_BEFORE_TIMESTAMP_WRITE(false)
       DRI_CONF_RADV_RT_WAVE64(false)
       DRI_CONF_RADV_LEGACY_SPARSE_BINDING(false)
+      DRI_CONF_RADV_SKIP_UNMAP(false)
       DRI_CONF_DUAL_COLOR_BLEND_BY_LOCATION(false)
       DRI_CONF_RADV_OVERRIDE_GRAPHICS_SHADER_VERSION(0)
       DRI_CONF_RADV_OVERRIDE_COMPUTE_SHADER_VERSION(0)
@@ -224,6 +225,8 @@ radv_init_dri_options(struct radv_instance *instance)
 
    instance->legacy_sparse_binding = driQueryOptionb(&instance->dri_options, "radv_legacy_sparse_binding");
 
+   instance->skip_unmap = driQueryOptionb(&instance->dri_options, "radv_skip_unmap");
+
    instance->override_graphics_shader_version =
       driQueryOptioni(&instance->dri_options, "radv_override_graphics_shader_version");
    instance->override_compute_shader_version =
diff --git a/src/amd/vulkan/radv_private.h b/src/amd/vulkan/radv_private.h
index ccb4a42ee2fd..6a14c1b8a071 100644
--- a/src/amd/vulkan/radv_private.h
+++ b/src/amd/vulkan/radv_private.h
@@ -382,6 +382,7 @@ struct radv_instance {
    bool force_rt_wave64;
    bool dual_color_blend_by_location;
    bool legacy_sparse_binding;
+   bool skip_unmap;
    bool clear_lds;
    char *app_layer;
    uint8_t override_graphics_shader_version;
@@ -1070,6 +1071,7 @@ struct radv_device_memory {
    uint32_t heap_index;
    uint64_t alloc_size;
    void *user_ptr;
+   void *retained_map;
 
 #if RADV_SUPPORT_ANDROID_HARDWARE_BUFFER
    struct AHardwareBuffer *android_hardware_buffer;
diff --git a/src/util/driconf.h b/src/util/driconf.h
index e91bf81a381d..b32cce7a3415 100644
--- a/src/util/driconf.h
+++ b/src/util/driconf.h
@@ -694,6 +694,10 @@
    DRI_CONF_OPT_B(radv_legacy_sparse_binding, def, \
                   "Enable legacy sparse binding (with implicit synchronization) on the graphics and compute queue")
 
+#define DRI_CONF_RADV_SKIP_UNMAP(def) \
+   DRI_CONF_OPT_B(radv_skip_unmap, def, \
+                  "Ignore vkUnmapMemory calls and return previously mapped address on further vkMapMemory calls")
+
 /**
  * Overrides for forcing re-compilation of pipelines when RADV_BUILD_ID_OVERRIDE is enabled.
  * These need to be bumped every time a compiler bugfix is backported (up to 8 shader
-- 
GitLab


From 10129a374182d3216546edabeca04c0a5f20d13f Mon Sep 17 00:00:00 2001
From: Tatsuyuki Ishi <ishitatsuyuki@gmail.com>
Date: Tue, 9 Jan 2024 12:49:46 +0900
Subject: [PATCH 3/3] radv: Enable skip_unmap for Quantic Dream Engine

Detroit: Become Human has an optimization issue where the same BO is
mapped and unmapped on a per-frame basis, which leads to massive
overhead in the kernel, both creating the mapping and taking page
faults.
---
 src/util/00-radv-defaults.conf | 1 +
 1 file changed, 1 insertion(+)

diff --git a/src/util/00-radv-defaults.conf b/src/util/00-radv-defaults.conf
index f71cfb887e87..ef9f60425c21 100644
--- a/src/util/00-radv-defaults.conf
+++ b/src/util/00-radv-defaults.conf
@@ -56,6 +56,7 @@ Application bugs worked around in this file:
             <option name="radv_zero_vram" value="true" />
             <option name="radv_lower_discard_to_demote" value="true" />
             <option name="radv_disable_tc_compat_htile_general" value="true" />
+            <option name="radv_skip_unmap" value="true" />
         </engine>
 
         <engine engine_name_match="^UnrealEngine"> <!-- UE4/5 Vulkan RHI -->
-- 
GitLab

