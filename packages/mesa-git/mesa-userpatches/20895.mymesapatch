From 077e6b48b398774016ef49c71ced8a239c908fb1 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Tue, 24 Jan 2023 22:26:38 -0500
Subject: [PATCH] ac/llvm: fix LLVM 16 crashes in SelectionDAG.cpp

Cc: stable
---
 src/amd/llvm/ac_llvm_helper.cpp | 35 +++++++++++++++++++++++++++++++++
 src/amd/llvm/ac_llvm_util.c     |  2 ++
 src/amd/llvm/ac_llvm_util.h     |  1 +
 3 files changed, 38 insertions(+)

diff --git a/src/amd/llvm/ac_llvm_helper.cpp b/src/amd/llvm/ac_llvm_helper.cpp
index 71ed11a283b9..4e5470137e9a 100644
--- a/src/amd/llvm/ac_llvm_helper.cpp
+++ b/src/amd/llvm/ac_llvm_helper.cpp
@@ -32,6 +32,10 @@
 #include <llvm/Support/CommandLine.h>
 #include <llvm/Transforms/IPO.h>
 
+#if LLVM_VERSION_MAJOR >= 16
+#include "llvm/CodeGen/SelectionDAGNodes.h"
+#endif
+
 #include <cstring>
 
 /* DO NOT REORDER THE HEADERS
@@ -45,6 +49,37 @@
 #include "ac_llvm_build.h"
 #include "util/macros.h"
 
+#if LLVM_VERSION_MAJOR >= 16
+class RunAtExitForStaticDestructors : public llvm::SDNode
+{
+public:
+   /* getSDVTList (protected) calls getValueTypeList (private), which contains static variables. */
+   RunAtExitForStaticDestructors(): SDNode(0, 0, llvm::DebugLoc(), getSDVTList(llvm::MVT::Other))
+   {
+   }
+};
+#endif
+
+void ac_llvm_run_atexit_for_destructors(void)
+{
+#if LLVM_VERSION_MAJOR >= 16
+   /* LLVM >= 16 registers static variable destructors on the first compile, which gcc
+    * implements by calling atexit there. Before that, u_queue registers its atexit
+    * handler to kill all threads. Since exit() runs atexit handlers in the reverse order,
+    * the LLVM destructors are called first while shader compiler threads may still be
+    * running, which crashes in LLVM in SelectionDAG.cpp.
+    *
+    * The solution is to run the code that declares the LLVM static variables first,
+    * so that atexit for LLVM is registered first and u_queue is registered after that,
+    * which ensures that all u_queue threads are terminated before LLVM destructors are
+    * called.
+    *
+    * This just executes the code that declares static variables.
+    */
+   RunAtExitForStaticDestructors();
+#endif
+}
+
 bool ac_is_llvm_processor_supported(LLVMTargetMachineRef tm, const char *processor)
 {
    llvm::TargetMachine *TM = reinterpret_cast<llvm::TargetMachine *>(tm);
diff --git a/src/amd/llvm/ac_llvm_util.c b/src/amd/llvm/ac_llvm_util.c
index ff936af3195a..31b44166d9af 100644
--- a/src/amd/llvm/ac_llvm_util.c
+++ b/src/amd/llvm/ac_llvm_util.c
@@ -64,6 +64,8 @@ static void ac_init_llvm_target(void)
 
    ac_reset_llvm_all_options_occurences();
    LLVMParseCommandLineOptions(ARRAY_SIZE(argv), argv, NULL);
+
+   ac_llvm_run_atexit_for_destructors();
 }
 
 PUBLIC void ac_init_shared_llvm_once(void)
diff --git a/src/amd/llvm/ac_llvm_util.h b/src/amd/llvm/ac_llvm_util.h
index 5006950255a0..a22c3fabca62 100644
--- a/src/amd/llvm/ac_llvm_util.h
+++ b/src/amd/llvm/ac_llvm_util.h
@@ -78,6 +78,7 @@ struct ac_llvm_compiler {
 
 LLVMTargetRef ac_get_llvm_target(const char *triple);
 const char *ac_get_llvm_processor_name(enum radeon_family family);
+void ac_llvm_run_atexit_for_destructors(void);
 bool ac_is_llvm_processor_supported(LLVMTargetMachineRef tm, const char *processor);
 void ac_reset_llvm_all_options_occurences();
 void ac_add_attr_dereferenceable(LLVMValueRef val, uint64_t bytes);
-- 
GitLab

