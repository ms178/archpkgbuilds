From 6221b4e9e30c0c1d298bd9eb688f2f914719255c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Daniel=20Sch=C3=BCrmann?= <daniel@schuermann.dev>
Date: Thu, 24 Jul 2025 11:56:17 +0200
Subject: [PATCH 1/2] aco/ra: generalize register affinities

---
 src/amd/compiler/aco_register_allocation.cpp | 41 +++++++++++---------
 1 file changed, 23 insertions(+), 18 deletions(-)

diff --git a/src/amd/compiler/aco_register_allocation.cpp b/src/amd/compiler/aco_register_allocation.cpp
index 7c6d88358039d..320687f8365b6 100644
--- a/src/amd/compiler/aco_register_allocation.cpp
+++ b/src/amd/compiler/aco_register_allocation.cpp
@@ -56,8 +56,7 @@ struct assignment {
    union {
       struct {
          bool assigned : 1;
-         bool vcc : 1;
-         bool m0 : 1;
+         bool precolor_affinity : 1;
          bool renamed : 1;
       };
       uint8_t _ = 0;
@@ -1878,13 +1877,10 @@ get_reg(ra_ctx& ctx, const RegisterFile& reg_file, Temp temp,
             return affinity.reg;
       }
    }
-   if (ctx.assignments[temp.id()].vcc) {
-      if (get_reg_specified(ctx, reg_file, temp.regClass(), instr, vcc, operand_index))
-         return vcc;
-   }
-   if (ctx.assignments[temp.id()].m0) {
-      if (get_reg_specified(ctx, reg_file, temp.regClass(), instr, m0, operand_index))
-         return m0;
+   if (ctx.assignments[temp.id()].precolor_affinity) {
+      if (get_reg_specified(ctx, reg_file, temp.regClass(), instr, ctx.assignments[temp.id()].reg,
+                            operand_index))
+         return ctx.assignments[temp.id()].reg;
    }
 
    std::optional<PhysReg> res;
@@ -3018,24 +3014,33 @@ get_affinities(ra_ctx& ctx)
                     instr->operands[0].isFirstKillBeforeDef()) {
             ctx.split_vectors[instr->operands[0].tempId()] = instr.get();
          } else if (instr->isVOPC() && !instr->isVOP3()) {
-            if (!instr->isSDWA() || ctx.program->gfx_level == GFX8)
-               ctx.assignments[instr->definitions[0].tempId()].vcc = true;
+            if (!instr->isSDWA() || ctx.program->gfx_level == GFX8) {
+               ctx.assignments[instr->definitions[0].tempId()].precolor_affinity = true;
+               ctx.assignments[instr->definitions[0].tempId()].reg = vcc;
+            }
          } else if (instr->isVOP2() && !instr->isVOP3()) {
             if (instr->operands.size() == 3 && instr->operands[2].isTemp() &&
-                instr->operands[2].regClass().type() == RegType::sgpr)
-               ctx.assignments[instr->operands[2].tempId()].vcc = true;
-            if (instr->definitions.size() == 2)
-               ctx.assignments[instr->definitions[1].tempId()].vcc = true;
+                instr->operands[2].regClass().type() == RegType::sgpr) {
+               ctx.assignments[instr->operands[2].tempId()].precolor_affinity = true;
+               ctx.assignments[instr->operands[2].tempId()].reg = vcc;
+            }
+            if (instr->definitions.size() == 2) {
+               ctx.assignments[instr->definitions[1].tempId()].precolor_affinity = true;
+               ctx.assignments[instr->definitions[1].tempId()].reg = vcc;
+            }
          } else if (instr->opcode == aco_opcode::s_and_b32 ||
                     instr->opcode == aco_opcode::s_and_b64) {
             /* If SCC is used by a branch, we might be able to use
              * s_cbranch_vccz/s_cbranch_vccnz if the operand is VCC.
              */
             if (!instr->definitions[1].isKill() && instr->operands[0].isTemp() &&
-                instr->operands[1].isFixed() && instr->operands[1].physReg() == exec)
-               ctx.assignments[instr->operands[0].tempId()].vcc = true;
+                instr->operands[1].isFixed() && instr->operands[1].physReg() == exec) {
+               ctx.assignments[instr->operands[0].tempId()].precolor_affinity = true;
+               ctx.assignments[instr->operands[0].tempId()].reg = vcc;
+            }
          } else if (instr->opcode == aco_opcode::s_sendmsg) {
-            ctx.assignments[instr->operands[0].tempId()].m0 = true;
+            ctx.assignments[instr->operands[0].tempId()].precolor_affinity = true;
+            ctx.assignments[instr->operands[0].tempId()].reg = m0;
          } else if (instr->format == Format::DS) {
             bool is_vector = false;
             for (unsigned i = 0, vector_begin = 0; i < instr->operands.size(); i++) {
-- 
GitLab


From ec62ed82addbd8dd881ffd57ce9b199666fc6168 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Daniel=20Sch=C3=BCrmann?= <daniel@schuermann.dev>
Date: Thu, 24 Jul 2025 11:59:32 +0200
Subject: [PATCH 2/2] aco/ra: collect register affinities for all precolored
 operands.

Totals from 1282 (1.61% of 79825) affected shaders:
Instrs: 794280 -> 789245 (-0.63%); split: -0.64%, +0.00%
CodeSize: 4109264 -> 4088960 (-0.49%); split: -0.50%, +0.00%
VGPRs: 62580 -> 62568 (-0.02%)
Latency: 4421733 -> 4414933 (-0.15%); split: -0.16%, +0.00%
InvThroughput: 786227 -> 781638 (-0.58%); split: -0.58%, +0.00%
VClause: 14707 -> 14698 (-0.06%); split: -0.16%, +0.10%
Copies: 51150 -> 46540 (-9.01%); split: -9.02%, +0.01%
VALU: 449770 -> 445131 (-1.03%); split: -1.03%, +0.00%
---
 src/amd/compiler/aco_register_allocation.cpp | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/src/amd/compiler/aco_register_allocation.cpp b/src/amd/compiler/aco_register_allocation.cpp
index 320687f8365b6..a0fd31556a2e9 100644
--- a/src/amd/compiler/aco_register_allocation.cpp
+++ b/src/amd/compiler/aco_register_allocation.cpp
@@ -3051,6 +3051,14 @@ get_affinities(ra_ctx& ctx)
             }
          }
 
+         /* Collect register-affinities for precolored operands. */
+         for (Operand op : instr->operands) {
+            if (op.isTemp() && op.isPrecolored()) {
+               ctx.assignments[op.tempId()].precolor_affinity = true;
+               ctx.assignments[op.tempId()].reg = op.physReg();
+            }
+         }
+
          auto tied_defs = get_tied_defs(instr.get());
          for (unsigned i = 0; i < instr->definitions.size(); i++) {
             const Definition& def = instr->definitions[i];
-- 
GitLab

