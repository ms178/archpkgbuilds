From b400125aaba4081c8c8ce7d35929f69e290db59b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Timur=20Krist=C3=B3f?= <timur.kristof@gmail.com>
Date: Tue, 21 Feb 2023 00:30:21 +0100
Subject: [PATCH 2/2] radv: Emulate VGT_ESGS_ITEMSIZE in shaders.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Also rename gfx10_ngg_info::vgt_esgs_itemsize to make it shorter.

Signed-off-by: Timur Krist√≥f <timur.kristof@gmail.com>
---
 src/amd/vulkan/radv_nir_lower_abi.c |  4 ++--
 src/amd/vulkan/radv_pipeline.c      | 10 ++--------
 src/amd/vulkan/radv_shader.h        |  4 ++--
 src/amd/vulkan/radv_shader_info.c   |  8 ++++----
 src/amd/vulkan/si_cmd_buffer.c      |  1 +
 5 files changed, 11 insertions(+), 16 deletions(-)

diff --git a/src/amd/vulkan/radv_nir_lower_abi.c b/src/amd/vulkan/radv_nir_lower_abi.c
index f3aa5c5354e8..b809c9b44a52 100644
--- a/src/amd/vulkan/radv_nir_lower_abi.c
+++ b/src/amd/vulkan/radv_nir_lower_abi.c
@@ -282,8 +282,8 @@ lower_abi_instr(nir_builder *b, nir_instr *instr, void *state)
       break;
    }
    case nir_intrinsic_load_esgs_vertex_stride_amd:
-      /* TODO: pass the value of VGT_ESGS_RING_ITEMSIZE here and set the register to 1. */
-      replacement = nir_imm_int(b, 1);
+      /* Use this to emulate VGT_ESGS_RING_ITEMSIZE in order to reduce context rolls. */
+      replacement = nir_imm_int(b, s->info->ngg_info.esgs_ring_itemsize);
       break;
    case nir_intrinsic_load_hs_out_patch_data_offset_amd: {
       unsigned out_vertices_per_patch = b->shader->info.tess.tcs_vertices_out;
diff --git a/src/amd/vulkan/radv_pipeline.c b/src/amd/vulkan/radv_pipeline.c
index 759b60498537..0beaa7fc562f 100644
--- a/src/amd/vulkan/radv_pipeline.c
+++ b/src/amd/vulkan/radv_pipeline.c
@@ -1422,10 +1422,10 @@ radv_pipeline_init_gs_ring_state(struct radv_graphics_pipeline *pipeline, const
 
    /* Calculate the minimum size. */
    unsigned min_esgs_ring_size =
-      align(gs->vgt_esgs_ring_itemsize * 4 * gs_vertex_reuse * wave_size, alignment);
+      align(gs->esgs_ring_itemsize * 4 * gs_vertex_reuse * wave_size, alignment);
    /* These are recommended sizes, not minimum sizes. */
    unsigned esgs_ring_size =
-      max_gs_waves * 2 * wave_size * gs->vgt_esgs_ring_itemsize * 4 * gs_info->gs.vertices_in;
+      max_gs_waves * 2 * wave_size * gs->esgs_ring_itemsize * 4 * gs_info->gs.vertices_in;
    unsigned gsvs_ring_size = max_gs_waves * 2 * wave_size * gs_info->gs.max_gsvs_emit_size;
 
    min_esgs_ring_size = align(min_esgs_ring_size, alignment);
@@ -3970,9 +3970,6 @@ radv_pipeline_emit_hw_ngg(struct radeon_cmdbuf *ctx_cs, struct radeon_cmdbuf *cs
                           S_028A84_PRIMITIVEID_EN(es_enable_prim_id) |
                              S_028A84_NGG_DISABLE_PROVOK_REUSE(outinfo->export_prim_id));
 
-   radeon_set_context_reg(ctx_cs, R_028AAC_VGT_ESGS_RING_ITEMSIZE,
-                          ngg_state->vgt_esgs_ring_itemsize);
-
    /* NGG specific registers. */
    struct radv_shader *gs = pipeline->base.shaders[MESA_SHADER_GEOMETRY];
    uint32_t gs_num_invocations = gs ? gs->info.gs.invocations : 1;
@@ -4180,9 +4177,6 @@ radv_pipeline_emit_hw_gs(struct radeon_cmdbuf *ctx_cs, struct radeon_cmdbuf *cs,
       ctx_cs, R_028B90_VGT_GS_INSTANCE_CNT,
       S_028B90_CNT(MIN2(gs_num_invocations, 127)) | S_028B90_ENABLE(gs_num_invocations > 0));
 
-   radeon_set_context_reg(ctx_cs, R_028AAC_VGT_ESGS_RING_ITEMSIZE,
-                          gs_state->vgt_esgs_ring_itemsize);
-
    va = radv_shader_get_va(gs);
 
    if (pdevice->rad_info.gfx_level >= GFX9) {
diff --git a/src/amd/vulkan/radv_shader.h b/src/amd/vulkan/radv_shader.h
index f928e3d3a75b..a39a41dddd44 100644
--- a/src/amd/vulkan/radv_shader.h
+++ b/src/amd/vulkan/radv_shader.h
@@ -219,7 +219,7 @@ struct radv_vs_output_info {
 struct gfx9_gs_info {
    uint32_t vgt_gs_onchip_cntl;
    uint32_t vgt_gs_max_prims_per_subgroup;
-   uint32_t vgt_esgs_ring_itemsize;
+   uint32_t esgs_ring_itemsize;
    uint32_t lds_size;
 };
 
@@ -229,7 +229,7 @@ struct gfx10_ngg_info {
    uint32_t max_gsprims;
    uint32_t max_out_verts;
    uint32_t prim_amp_factor;
-   uint32_t vgt_esgs_ring_itemsize;
+   uint32_t esgs_ring_itemsize;
    uint32_t esgs_ring_size;
    uint32_t scratch_lds_base;
    bool max_vert_out_per_gs_instance;
diff --git a/src/amd/vulkan/radv_shader_info.c b/src/amd/vulkan/radv_shader_info.c
index d34eb9a5fe53..31570f19bdd2 100644
--- a/src/amd/vulkan/radv_shader_info.c
+++ b/src/amd/vulkan/radv_shader_info.c
@@ -519,7 +519,7 @@ gather_shader_info_mesh(const nir_shader *nir, struct radv_shader_info *info)
    ngg_info->max_vert_out_per_gs_instance = false;
    ngg_info->ngg_emit_size = 0;
    ngg_info->prim_amp_factor = nir->info.mesh.max_primitives_out;
-   ngg_info->vgt_esgs_ring_itemsize = 1;
+   ngg_info->esgs_ring_itemsize = 1;
 
    unsigned min_ngg_workgroup_size =
       ac_compute_ngg_workgroup_size(ngg_info->hw_max_esverts, ngg_info->max_gsprims,
@@ -962,7 +962,7 @@ gfx9_get_gs_info(const struct radv_device *device, struct radv_pipeline_stage *e
                              S_028A44_GS_PRIMS_PER_SUBGRP(gs_prims_per_subgroup) |
                              S_028A44_GS_INST_PRIMS_IN_SUBGRP(gs_inst_prims_in_subgroup);
    out->vgt_gs_max_prims_per_subgroup = S_028A94_MAX_PRIMS_PER_SUBGROUP(max_prims_per_subgroup);
-   out->vgt_esgs_ring_itemsize = esgs_itemsize;
+   out->esgs_ring_itemsize = esgs_itemsize;
    assert(max_prims_per_subgroup <= max_out_prims);
 
    unsigned workgroup_size = ac_compute_esgs_workgroup_size(gfx_level, es_info->wave_size,
@@ -1228,9 +1228,9 @@ gfx10_get_ngg_info(const struct radv_device *device, struct radv_pipeline_stage
    out->esgs_ring_size = MIN2(max_esverts, max_gsprims * max_verts_per_prim) * esvert_lds_size * 4;
 
    if (gs_stage) {
-      out->vgt_esgs_ring_itemsize = es_info->esgs_itemsize / 4;
+      out->esgs_ring_itemsize = es_info->esgs_itemsize / 4;
    } else {
-      out->vgt_esgs_ring_itemsize = 1;
+      out->esgs_ring_itemsize = 1;
    }
 
    assert(out->hw_max_esverts >= min_esverts); /* HW limitation */
diff --git a/src/amd/vulkan/si_cmd_buffer.c b/src/amd/vulkan/si_cmd_buffer.c
index 5e540764a05a..1925f386bc67 100644
--- a/src/amd/vulkan/si_cmd_buffer.c
+++ b/src/amd/vulkan/si_cmd_buffer.c
@@ -214,6 +214,7 @@ si_emit_graphics(struct radv_device *device, struct radeon_cmdbuf *cs)
    if (physical_device->rad_info.gfx_level <= GFX8)
       si_set_raster_config(physical_device, cs);
 
+   radeon_set_context_reg(cs, R_028AAC_VGT_ESGS_RING_ITEMSIZE, 1);
    radeon_set_context_reg(cs, R_028A18_VGT_HOS_MAX_TESS_LEVEL, fui(64));
    if (!has_clear_state)
       radeon_set_context_reg(cs, R_028A1C_VGT_HOS_MIN_TESS_LEVEL, fui(0));
-- 
GitLab

