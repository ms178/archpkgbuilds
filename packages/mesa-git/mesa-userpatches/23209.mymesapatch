From 25dfa637a0b95d2b25d08c66d1c0f64cb2f3ecb5 Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Thu, 25 May 2023 08:53:26 +0200
Subject: [PATCH 1/5] radv: add a helper for emitting a null depth/stencil
 target

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/amd/vulkan/radv_cmd_buffer.c | 40 +++++++++++++++++++-------------
 1 file changed, 24 insertions(+), 16 deletions(-)

diff --git a/src/amd/vulkan/radv_cmd_buffer.c b/src/amd/vulkan/radv_cmd_buffer.c
index e74f10e4a5c0d..a88daa5056c0f 100644
--- a/src/amd/vulkan/radv_cmd_buffer.c
+++ b/src/amd/vulkan/radv_cmd_buffer.c
@@ -3021,6 +3021,29 @@ radv_emit_fb_ds_state(struct radv_cmd_buffer *cmd_buffer, struct radv_ds_buffer_
                           ds->pa_su_poly_offset_db_fmt_cntl);
 }
 
+static void
+radv_emit_null_ds_state(struct radv_cmd_buffer *cmd_buffer)
+{
+   const enum amd_gfx_level gfx_level = cmd_buffer->device->physical_device->rad_info.gfx_level;
+   unsigned num_samples = 0;
+
+   /* On GFX11, DB_Z_INFO.NUM_SAMPLES should always match MSAA_EXPOSED_SAMPLES. It affects VRS,
+    * occlusion queries and Primitive Ordered Pixel Shading if depth and stencil are not bound.
+    */
+   if (gfx_level == GFX11) {
+      num_samples = util_logbase2(radv_get_rasterization_samples(cmd_buffer));
+   }
+
+   if (gfx_level == GFX9) {
+      radeon_set_context_reg_seq(cmd_buffer->cs, R_028038_DB_Z_INFO, 2);
+   } else {
+      radeon_set_context_reg_seq(cmd_buffer->cs, R_028040_DB_Z_INFO, 2);
+   }
+
+   radeon_emit(cmd_buffer->cs,
+               S_028040_FORMAT(V_028040_Z_INVALID) | S_028040_NUM_SAMPLES(num_samples));
+   radeon_emit(cmd_buffer->cs, S_028044_FORMAT(V_028044_STENCIL_INVALID));
+}
 /**
  * Update the fast clear depth/stencil values if the image is bound as a
  * depth/stencil buffer.
@@ -3620,22 +3643,7 @@ radv_emit_framebuffer_state(struct radv_cmd_buffer *cmd_buffer)
 
       radv_image_view_finish(&iview);
    } else {
-      unsigned num_samples = 0;
-
-      /* On GFX11, DB_Z_INFO.NUM_SAMPLES should always match MSAA_EXPOSED_SAMPLES. It affects VRS,
-       * occlusion queries and Primitive Ordered Pixel Shading if depth and stencil are not bound.
-       */
-      if (cmd_buffer->device->physical_device->rad_info.gfx_level == GFX11)
-         num_samples = util_logbase2(radv_get_rasterization_samples(cmd_buffer));
-
-      if (cmd_buffer->device->physical_device->rad_info.gfx_level == GFX9)
-         radeon_set_context_reg_seq(cmd_buffer->cs, R_028038_DB_Z_INFO, 2);
-      else
-         radeon_set_context_reg_seq(cmd_buffer->cs, R_028040_DB_Z_INFO, 2);
-
-      radeon_emit(cmd_buffer->cs, S_028040_FORMAT(V_028040_Z_INVALID) |       /* DB_Z_INFO */
-                                  S_028040_NUM_SAMPLES(num_samples));
-      radeon_emit(cmd_buffer->cs, S_028044_FORMAT(V_028044_STENCIL_INVALID)); /* DB_STENCIL_INFO */
+      radv_emit_null_ds_state(cmd_buffer);
    }
 
    if (cmd_buffer->device->physical_device->rad_info.gfx_level >= GFX11) {
-- 
GitLab


From ace0c925eb5bcaf3ec4481500983815526356b37 Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Thu, 25 May 2023 09:15:16 +0200
Subject: [PATCH 2/5] radv: reset more DB registers when emitting a null ds
 target

PAL does that.

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/amd/vulkan/radv_cmd_buffer.c | 31 ++++++++-----------------------
 src/amd/vulkan/radv_device.c     | 29 +++++++++++++++++++++++++++++
 src/amd/vulkan/radv_private.h    |  2 ++
 3 files changed, 39 insertions(+), 23 deletions(-)

diff --git a/src/amd/vulkan/radv_cmd_buffer.c b/src/amd/vulkan/radv_cmd_buffer.c
index a88daa5056c0f..6931c302275fd 100644
--- a/src/amd/vulkan/radv_cmd_buffer.c
+++ b/src/amd/vulkan/radv_cmd_buffer.c
@@ -2699,29 +2699,7 @@ radv_emit_rasterization_samples(struct radv_cmd_buffer *cmd_buffer)
    }
 
    if (pdevice->rad_info.gfx_level >= GFX11) {
-      unsigned num_samples = render->max_samples;
-      unsigned max_allowed_tiles_in_wave = 0;
-
-      if (pdevice->rad_info.has_dedicated_vram) {
-         if (num_samples == 8)
-            max_allowed_tiles_in_wave = 7;
-         else if (num_samples == 4)
-            max_allowed_tiles_in_wave = 14;
-      } else {
-         if (num_samples == 8)
-            max_allowed_tiles_in_wave = 8;
-      }
-
-      /* TODO: We may want to disable this workaround for future chips. */
-      if (num_samples >= 4) {
-         if (max_allowed_tiles_in_wave)
-            max_allowed_tiles_in_wave--;
-         else
-            max_allowed_tiles_in_wave = 15;
-      }
-
-      db_render_control |= S_028000_OREO_MODE(V_028000_OMODE_O_THEN_B) |
-                           S_028000_MAX_ALLOWED_TILES_IN_WAVE(max_allowed_tiles_in_wave);
+      radv_gfx11_set_db_render_control(cmd_buffer->device, render->max_samples, &db_render_control);
    }
 
    radeon_set_context_reg(cmd_buffer->cs, R_028000_DB_RENDER_CONTROL, db_render_control);
@@ -3025,6 +3003,7 @@ static void
 radv_emit_null_ds_state(struct radv_cmd_buffer *cmd_buffer)
 {
    const enum amd_gfx_level gfx_level = cmd_buffer->device->physical_device->rad_info.gfx_level;
+   unsigned db_render_control = 0;
    unsigned num_samples = 0;
 
    /* On GFX11, DB_Z_INFO.NUM_SAMPLES should always match MSAA_EXPOSED_SAMPLES. It affects VRS,
@@ -3032,6 +3011,7 @@ radv_emit_null_ds_state(struct radv_cmd_buffer *cmd_buffer)
     */
    if (gfx_level == GFX11) {
       num_samples = util_logbase2(radv_get_rasterization_samples(cmd_buffer));
+      radv_gfx11_set_db_render_control(cmd_buffer->device, 1, &db_render_control);
    }
 
    if (gfx_level == GFX9) {
@@ -3043,6 +3023,11 @@ radv_emit_null_ds_state(struct radv_cmd_buffer *cmd_buffer)
    radeon_emit(cmd_buffer->cs,
                S_028040_FORMAT(V_028040_Z_INVALID) | S_028040_NUM_SAMPLES(num_samples));
    radeon_emit(cmd_buffer->cs, S_028044_FORMAT(V_028044_STENCIL_INVALID));
+
+   radeon_set_context_reg(cmd_buffer->cs, R_028000_DB_RENDER_CONTROL, db_render_control);
+   radeon_set_context_reg(cmd_buffer->cs, R_028010_DB_RENDER_OVERRIDE2,
+                          S_028010_CENTROID_COMPUTATION_MODE(gfx_level >= GFX10_3));
+
 }
 /**
  * Update the fast clear depth/stencil values if the image is bound as a
diff --git a/src/amd/vulkan/radv_device.c b/src/amd/vulkan/radv_device.c
index a2b26ceaaa703..abb42631bab54 100644
--- a/src/amd/vulkan/radv_device.c
+++ b/src/amd/vulkan/radv_device.c
@@ -1940,6 +1940,35 @@ radv_initialise_ds_surface(const struct radv_device *device, struct radv_ds_buff
    ds->db_stencil_read_base = ds->db_stencil_write_base = s_offs >> 8;
 }
 
+void
+radv_gfx11_set_db_render_control(const struct radv_device *device, unsigned num_samples,
+                                 unsigned *db_render_control)
+{
+   const struct radv_physical_device *pdevice = device->physical_device;
+   unsigned max_allowed_tiles_in_wave = 0;
+
+   if (pdevice->rad_info.has_dedicated_vram) {
+      if (num_samples == 8)
+         max_allowed_tiles_in_wave = 7;
+      else if (num_samples == 4)
+         max_allowed_tiles_in_wave = 14;
+   } else {
+      if (num_samples == 8)
+         max_allowed_tiles_in_wave = 8;
+   }
+
+   /* TODO: We may want to disable this workaround for future chips. */
+   if (num_samples >= 4) {
+      if (max_allowed_tiles_in_wave)
+         max_allowed_tiles_in_wave--;
+      else
+         max_allowed_tiles_in_wave = 15;
+   }
+
+   *db_render_control |= S_028000_OREO_MODE(V_028000_OMODE_O_THEN_B) |
+                         S_028000_MAX_ALLOWED_TILES_IN_WAVE(max_allowed_tiles_in_wave);
+}
+
 VKAPI_ATTR VkResult VKAPI_CALL
 radv_GetMemoryFdKHR(VkDevice _device, const VkMemoryGetFdInfoKHR *pGetFdInfo, int *pFD)
 {
diff --git a/src/amd/vulkan/radv_private.h b/src/amd/vulkan/radv_private.h
index 17232f3a40105..89df80ad61cf4 100644
--- a/src/amd/vulkan/radv_private.h
+++ b/src/amd/vulkan/radv_private.h
@@ -1510,6 +1510,8 @@ void radv_initialise_ds_surface(const struct radv_device *device, struct radv_ds
 void radv_initialise_vrs_surface(struct radv_image *image, struct radv_buffer *htile_buffer,
                                  struct radv_ds_buffer_info *ds);
 
+void radv_gfx11_set_db_render_control(const struct radv_device *device, unsigned num_samples,
+                                      unsigned *db_render_control);
 /**
  * Attachment state when recording a renderpass instance.
  *
-- 
GitLab


From b4c03bef3091c5cd9413a8242ca3cbdf07610aad Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Wed, 24 May 2023 15:56:08 +0200
Subject: [PATCH 3/5] radv: emit DB_RENDER_CONTROL as part of the framebuffer

DB_RENDER_CONTROL controls whether depth/stencil rendering should be
compressed. Emitting this register as part of the framebuffer will
allow us to keep HTILE enabled for VRS rates, instead of disabling it
completely.

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/amd/vulkan/radv_cmd_buffer.c | 13 +++++--------
 src/amd/vulkan/radv_device.c     |  4 ++++
 src/amd/vulkan/radv_private.h    |  1 +
 3 files changed, 10 insertions(+), 8 deletions(-)

diff --git a/src/amd/vulkan/radv_cmd_buffer.c b/src/amd/vulkan/radv_cmd_buffer.c
index 6931c302275fd..601599edc9f69 100644
--- a/src/amd/vulkan/radv_cmd_buffer.c
+++ b/src/amd/vulkan/radv_cmd_buffer.c
@@ -1905,7 +1905,6 @@ radv_emit_graphics_pipeline(struct radv_cmd_buffer *cmd_buffer)
       if (cmd_buffer->state.emitted_graphics_pipeline->ms.min_sample_shading != pipeline->ms.min_sample_shading ||
           cmd_buffer->state.emitted_graphics_pipeline->uses_out_of_order_rast != pipeline->uses_out_of_order_rast ||
           cmd_buffer->state.emitted_graphics_pipeline->uses_vrs_attachment != pipeline->uses_vrs_attachment ||
-          cmd_buffer->state.emitted_graphics_pipeline->db_render_control != pipeline->db_render_control ||
           cmd_buffer->state.emitted_graphics_pipeline->rast_prim != pipeline->rast_prim)
 
          cmd_buffer->state.dirty |= RADV_CMD_DIRTY_DYNAMIC_RASTERIZATION_SAMPLES;
@@ -1919,6 +1918,9 @@ radv_emit_graphics_pipeline(struct radv_cmd_buffer *cmd_buffer)
       if (cmd_buffer->state.emitted_graphics_pipeline->db_shader_control !=
           pipeline->db_shader_control)
          cmd_buffer->state.dirty |= RADV_CMD_DIRTY_DYNAMIC_ATTACHMENT_FEEDBACK_LOOP_ENABLE;
+
+      if (cmd_buffer->state.emitted_graphics_pipeline->db_render_control != pipeline->db_render_control)
+         cmd_buffer->state.dirty |= RADV_CMD_DIRTY_FRAMEBUFFER;
    }
 
    radeon_emit_array(cmd_buffer->cs, pipeline->base.cs.buf, pipeline->base.cs.cdw);
@@ -2659,10 +2661,8 @@ radv_emit_rasterization_samples(struct radv_cmd_buffer *cmd_buffer)
    const struct radv_shader *ps = cmd_buffer->state.shaders[MESA_SHADER_FRAGMENT];
    unsigned rasterization_samples = radv_get_rasterization_samples(cmd_buffer);
    unsigned ps_iter_samples = radv_get_ps_iter_samples(cmd_buffer);
-   const struct radv_rendering_state *render = &cmd_buffer->state.render;
    const struct radv_dynamic_state *d = &cmd_buffer->state.dynamic;
    unsigned spi_baryc_cntl = S_0286E0_FRONT_FACE_ALL_BITS(1);
-   unsigned db_render_control = cmd_buffer->state.db_render_control;
    unsigned pa_sc_mode_cntl_1;
 
    pa_sc_mode_cntl_1 =
@@ -2698,11 +2698,6 @@ radv_emit_rasterization_samples(struct radv_cmd_buffer *cmd_buffer)
          pa_sc_mode_cntl_1 |= S_028A4C_PS_ITER_SAMPLE(1);
    }
 
-   if (pdevice->rad_info.gfx_level >= GFX11) {
-      radv_gfx11_set_db_render_control(cmd_buffer->device, render->max_samples, &db_render_control);
-   }
-
-   radeon_set_context_reg(cmd_buffer->cs, R_028000_DB_RENDER_CONTROL, db_render_control);
    radeon_set_context_reg(cmd_buffer->cs, R_0286E0_SPI_BARYC_CNTL, spi_baryc_cntl);
    radeon_set_context_reg(cmd_buffer->cs, R_028A4C_PA_SC_MODE_CNTL_1, pa_sc_mode_cntl_1);
 
@@ -2911,6 +2906,7 @@ radv_emit_fb_ds_state(struct radv_cmd_buffer *cmd_buffer, struct radv_ds_buffer_
    uint32_t db_z_info = ds->db_z_info;
    uint32_t db_stencil_info = ds->db_stencil_info;
    uint32_t db_htile_surface = ds->db_htile_surface;
+   uint32_t db_render_control = ds->db_render_control | cmd_buffer->state.db_render_control;
 
    if (!radv_layout_is_htile_compressed(
           cmd_buffer->device, image, layout,
@@ -2925,6 +2921,7 @@ radv_emit_fb_ds_state(struct radv_cmd_buffer *cmd_buffer, struct radv_ds_buffer_
       db_htile_surface &= C_028ABC_VRS_HTILE_ENCODING;
    }
 
+   radeon_set_context_reg(cmd_buffer->cs, R_028000_DB_RENDER_CONTROL, db_render_control);
    radeon_set_context_reg(cmd_buffer->cs, R_028008_DB_DEPTH_VIEW, ds->db_depth_view);
    radeon_set_context_reg(cmd_buffer->cs, R_028010_DB_RENDER_OVERRIDE2, ds->db_render_override2);
    radeon_set_context_reg(cmd_buffer->cs, R_028ABC_DB_HTILE_SURFACE, db_htile_surface);
diff --git a/src/amd/vulkan/radv_device.c b/src/amd/vulkan/radv_device.c
index abb42631bab54..35562e3172d7e 100644
--- a/src/amd/vulkan/radv_device.c
+++ b/src/amd/vulkan/radv_device.c
@@ -1865,6 +1865,10 @@ radv_initialise_ds_surface(const struct radv_device *device, struct radv_ds_buff
             ds->db_htile_surface |= S_028ABC_VRS_HTILE_ENCODING(V_028ABC_VRS_HTILE_4BIT_ENCODING);
          }
       }
+
+      if (device->physical_device->rad_info.gfx_level >= GFX11) {
+         radv_gfx11_set_db_render_control(device, iview->image->vk.samples, &ds->db_render_control);
+      }
    } else {
       const struct legacy_surf_level *level_info = &surf->u.legacy.level[level];
 
diff --git a/src/amd/vulkan/radv_private.h b/src/amd/vulkan/radv_private.h
index 89df80ad61cf4..ea74edc1fc3dd 100644
--- a/src/amd/vulkan/radv_private.h
+++ b/src/amd/vulkan/radv_private.h
@@ -1501,6 +1501,7 @@ struct radv_ds_buffer_info {
    uint32_t db_z_info2;       /* GFX9 only */
    uint32_t db_stencil_info2; /* GFX9 only */
    uint32_t db_render_override2;
+   uint32_t db_render_control;
 };
 
 void radv_initialise_color_surface(struct radv_device *device, struct radv_color_buffer_info *cb,
-- 
GitLab


From af4df05373fdf62cf7aff47c78f04119b21ca92e Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Wed, 24 May 2023 16:10:43 +0200
Subject: [PATCH 4/5] radv: disable HTILE compression only when layouts are
 compressed

On RDNA2, VRS rates are part of the HTILE buffer but if we disable
HTILE completely for eg. GENERAL, VRS rates aren't read by the hw.

Fix this by disabling HTILE compression which should have the same
effect without VRS.

Fixes recent
dEQP-VK.fragment_shading_rate.renderpass2.monolithic.attachment_rate.misc.*

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/amd/vulkan/radv_cmd_buffer.c | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/src/amd/vulkan/radv_cmd_buffer.c b/src/amd/vulkan/radv_cmd_buffer.c
index 601599edc9f69..f93a54dd0639d 100644
--- a/src/amd/vulkan/radv_cmd_buffer.c
+++ b/src/amd/vulkan/radv_cmd_buffer.c
@@ -2912,8 +2912,7 @@ radv_emit_fb_ds_state(struct radv_cmd_buffer *cmd_buffer, struct radv_ds_buffer_
           cmd_buffer->device, image, layout,
           radv_image_queue_family_mask(image, cmd_buffer->qf,
                                        cmd_buffer->qf))) {
-      db_z_info &= C_028040_TILE_SURFACE_ENABLE;
-      db_stencil_info |= S_028044_TILE_STENCIL_DISABLE(1);
+      db_render_control |= S_028000_DEPTH_COMPRESS_DISABLE(1) | S_028000_STENCIL_COMPRESS_DISABLE(1);
    }
 
    if (cmd_buffer->device->physical_device->rad_info.gfx_level == GFX10_3 &&
-- 
GitLab


From 80a7503a48a37c81e10bec5c41c919444ea766f7 Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Thu, 25 May 2023 11:58:37 +0200
Subject: [PATCH 5/5] radv/ci: update the list of expected failures on STONEY

Spurious changes but the failures are weird anyways.

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/amd/ci/radv-stoney-aco-fails.txt | 8 +-------
 1 file changed, 1 insertion(+), 7 deletions(-)

diff --git a/src/amd/ci/radv-stoney-aco-fails.txt b/src/amd/ci/radv-stoney-aco-fails.txt
index 0ccff2aac8388..0cc679bd1afde 100644
--- a/src/amd/ci/radv-stoney-aco-fails.txt
+++ b/src/amd/ci/radv-stoney-aco-fails.txt
@@ -44,17 +44,13 @@ dEQP-VK.binding_model.descriptor_buffer.multiple.graphics_vert_buffers1_sets3_im
 
 
 # depth/stencil clear
-dEQP-VK.dynamic_rendering.complete_secondary_cmd_buff.suballocation.unused_clear_attachments.colorunused_colorunused_colorused_colorunused_stencilonly_d32s8_used,Fail
 dEQP-VK.dynamic_rendering.complete_secondary_cmd_buff.suballocation.unused_clear_attachments.colorunused_colorunused_colorused_colorused_stencilonly_d32s8_used,Fail
 dEQP-VK.dynamic_rendering.complete_secondary_cmd_buff.suballocation.unused_clear_attachments.colorused_colorunused_colorused_colorused_stencilonly_d32s8_used,Fail
-dEQP-VK.dynamic_rendering.complete_secondary_cmd_buff.suballocation.unused_clear_attachments.colorused_colorused_colorunused_colorused_stencilonly_d32s8_used,Fail
-dEQP-VK.dynamic_rendering.partial_secondary_cmd_buff.suballocation.unused_clear_attachments.colorunused_colorunused_colorunused_colorunused_stencilonly_d32s8_used,Fail
+dEQP-VK.dynamic_rendering.complete_secondary_cmd_buff.suballocation.load_store_op_none.stencil_d32_sfloat_s8_uint_load_op_none_store_op_none_write_off,Fail
 dEQP-VK.dynamic_rendering.partial_secondary_cmd_buff.suballocation.unused_clear_attachments.colorunused_colorused_colorused_colorused_stencilonly_d32s8_used,Fail
-dEQP-VK.dynamic_rendering.partial_secondary_cmd_buff.suballocation.unused_clear_attachments.colorused_colorunused_colorused_colorused_stencilonly_d32s8_used,Fail
 dEQP-VK.dynamic_rendering.partial_secondary_cmd_buff.suballocation.unused_clear_attachments.colorused_colorused_colorused_colorused_stencilonly_d32s8_used,Fail
 dEQP-VK.dynamic_rendering.partial_secondary_cmd_buff.suballocation.unused_clear_attachments.colorused_stencilonly_d32s8_used,Fail
 dEQP-VK.dynamic_rendering.primary_cmd_buff.suballocation.unused_clear_attachments.colorunused_colorused_colorunused_colorused_stencilonly_d32s8_used,Fail
-dEQP-VK.dynamic_rendering.primary_cmd_buff.suballocation.unused_clear_attachments.colorunused_colorused_colorused_colorused_stencilonly_d32s8_used,Fail
 dEQP-VK.dynamic_rendering.primary_cmd_buff.suballocation.unused_clear_attachments.colorused_colorused_colorunused_colorused_stencilonly_d32s8_used,Fail
 dEQP-VK.dynamic_rendering.primary_cmd_buff.suballocation.unused_clear_attachments.stencilonly_d32s8_used,Fail
 dEQP-VK.dynamic_rendering.suballocation.load_store_op_none.stencil_d32_sfloat_s8_uint_load_op_none_store_op_store,Fail
@@ -91,6 +87,4 @@ dEQP-VK.renderpass2.depth_stencil_resolve.image_2d_16_64_6.samples_8.d32_sfloat.
 dEQP-VK.renderpass2.depth_stencil_resolve.image_2d_32_32.samples_2.d32_sfloat_s8_uint.depth_none_stencil_max_testing_stencil,Fail
 dEQP-VK.renderpass2.depth_stencil_resolve.image_2d_32_32.samples_2.d32_sfloat_s8_uint.depth_none_stencil_min_testing_stencil,Fail
 dEQP-VK.renderpass2.depth_stencil_resolve.image_2d_32_32.samples_2.d32_sfloat_s8_uint.depth_none_stencil_zero_testing_stencil,Fail
-dEQP-VK.renderpass2.depth_stencil_resolve.image_2d_32_32.samples_4.d32_sfloat_s8_uint.depth_none_stencil_max_testing_stencil,Fail
-dEQP-VK.renderpass2.depth_stencil_resolve.image_2d_49_13.samples_2.d32_sfloat_s8_uint.depth_none_stencil_max_testing_stencil,Fail
 dEQP-VK.renderpass2.depth_stencil_resolve.image_2d_49_13.samples_8.d32_sfloat_s8_uint.depth_none_stencil_max_testing_stencil,Fail
-- 
GitLab

