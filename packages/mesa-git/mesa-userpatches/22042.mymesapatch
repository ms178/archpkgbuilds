From f771b309073cf5a46ea26306bd41dd30e7788fe4 Mon Sep 17 00:00:00 2001
From: volodymyr <volodymyr.obozhyn@globallogic.com>
Date: Tue, 21 Mar 2023 21:23:18 +0200
Subject: [PATCH 1/6] ctx->API != API_OPENGL_COMPAT -->
 \!_mesa_is_desktop_gl_compat(ctx)

replaces direct API checks with _mesa_is_...() checks

Closes: https://gitlab.freedesktop.org/mesa/mesa/-/issues/8340

Signed-off-by: Volodymyr Obohzyn volodymyr.obozhyn@globallogic.com
---
 src/compiler/glsl/linker.cpp              |   2 +-
 src/mesa/main/draw.c                      |   2 +-
 src/mesa/main/enable.c                    | 168 +++++++++++-----------
 src/mesa/main/fbobject.c                  |   4 +-
 src/mesa/main/fog.c                       |   6 +-
 src/mesa/main/getstring.c                 |  20 +--
 src/mesa/main/glthread_draw.c             |   2 +-
 src/mesa/main/hint.c                      |   6 +-
 src/mesa/main/light.c                     |   6 +-
 src/mesa/main/queryobj.c                  |   2 +-
 src/mesa/main/texenv.c                    |   4 +-
 src/mesa/main/texgen.c                    |  14 +-
 src/mesa/main/teximage.c                  |   4 +-
 src/mesa/main/texparam.c                  |  26 ++--
 src/mesa/main/varray.c                    |   4 +-
 src/mesa/state_tracker/st_glsl_to_nir.cpp |   2 +-
 src/mesa/vbo/vbo_exec_api.c               |   2 +-
 17 files changed, 137 insertions(+), 137 deletions(-)

diff --git a/src/compiler/glsl/linker.cpp b/src/compiler/glsl/linker.cpp
index 148aab0be40f3..cb425c3557f64 100644
--- a/src/compiler/glsl/linker.cpp
+++ b/src/compiler/glsl/linker.cpp
@@ -2900,7 +2900,7 @@ link_shaders(struct gl_context *ctx, struct gl_shader_program *prog)
     * missing.
     */
    if (prog->NumShaders == 0) {
-      if (ctx->API != API_OPENGL_COMPAT)
+      if (!_mesa_is_desktop_gl_compat(ctx))
          linker_error(prog, "no shaders attached to the program\n");
       return;
    }
diff --git a/src/mesa/main/draw.c b/src/mesa/main/draw.c
index 8519bd55244cc..0f96d52430114 100644
--- a/src/mesa/main/draw.c
+++ b/src/mesa/main/draw.c
@@ -641,7 +641,7 @@ valid_draw_indirect(struct gl_context *ctx,
     *      structure,  be in buffer objects,  and may not be called when
     *      the default vertex array object is bound."
     */
-   if (ctx->API != API_OPENGL_COMPAT &&
+   if (!_mesa_is_desktop_gl_compat(ctx) &&
        ctx->Array.VAO == ctx->Array.DefaultVAO)
       return GL_INVALID_OPERATION;
 
diff --git a/src/mesa/main/enable.c b/src/mesa/main/enable.c
index c864b9f689e91..36ed059a1c0b0 100644
--- a/src/mesa/main/enable.c
+++ b/src/mesa/main/enable.c
@@ -403,7 +403,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
 
    switch (cap) {
       case GL_ALPHA_TEST:
-         if (ctx->API != API_OPENGL_COMPAT && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
             goto invalid_enum_error;
          if (ctx->Color.AlphaEnabled == state)
             return;
@@ -414,7 +414,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          ctx->Color.AlphaEnabled = state;
          break;
       case GL_AUTO_NORMAL:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          if (ctx->Eval.AutoNormal == state)
             return;
@@ -481,7 +481,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          }
          break;
       case GL_COLOR_MATERIAL:
-         if (ctx->API != API_OPENGL_COMPAT && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
             goto invalid_enum_error;
          if (ctx->Light.ColorMaterialEnabled == state)
             return;
@@ -525,7 +525,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          ctx->Color.DitherFlag = state;
          break;
       case GL_FOG:
-         if (ctx->API != API_OPENGL_COMPAT && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
             goto invalid_enum_error;
          if (ctx->Fog.Enabled == state)
             return;
@@ -542,7 +542,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
       case GL_LIGHT5:
       case GL_LIGHT6:
       case GL_LIGHT7:
-         if (ctx->API != API_OPENGL_COMPAT && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
             goto invalid_enum_error;
          if (ctx->Light.Light[cap-GL_LIGHT0].Enabled == state)
             return;
@@ -557,7 +557,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          }
          break;
       case GL_LIGHTING:
-         if (ctx->API != API_OPENGL_COMPAT && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
             goto invalid_enum_error;
          if (ctx->Light.Enabled == state)
             return;
@@ -577,7 +577,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          ctx->Line.SmoothFlag = state;
          break;
       case GL_LINE_STIPPLE:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          if (ctx->Line.StippleFlag == state)
             return;
@@ -587,7 +587,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          ctx->Line.StippleFlag = state;
          break;
       case GL_INDEX_LOGIC_OP:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          if (ctx->Color.IndexLogicOpEnabled == state)
             return;
@@ -627,7 +627,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          _mesa_update_allow_draw_out_of_order(ctx);
          break;
       case GL_MAP1_COLOR_4:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          if (ctx->Eval.Map1Color4 == state)
             return;
@@ -636,7 +636,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          ctx->Eval.Map1Color4 = state;
          break;
       case GL_MAP1_INDEX:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          if (ctx->Eval.Map1Index == state)
             return;
@@ -645,7 +645,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          ctx->Eval.Map1Index = state;
          break;
       case GL_MAP1_NORMAL:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          if (ctx->Eval.Map1Normal == state)
             return;
@@ -654,7 +654,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          ctx->Eval.Map1Normal = state;
          break;
       case GL_MAP1_TEXTURE_COORD_1:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          if (ctx->Eval.Map1TextureCoord1 == state)
             return;
@@ -663,7 +663,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          ctx->Eval.Map1TextureCoord1 = state;
          break;
       case GL_MAP1_TEXTURE_COORD_2:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          if (ctx->Eval.Map1TextureCoord2 == state)
             return;
@@ -672,7 +672,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          ctx->Eval.Map1TextureCoord2 = state;
          break;
       case GL_MAP1_TEXTURE_COORD_3:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          if (ctx->Eval.Map1TextureCoord3 == state)
             return;
@@ -681,7 +681,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          ctx->Eval.Map1TextureCoord3 = state;
          break;
       case GL_MAP1_TEXTURE_COORD_4:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          if (ctx->Eval.Map1TextureCoord4 == state)
             return;
@@ -690,7 +690,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          ctx->Eval.Map1TextureCoord4 = state;
          break;
       case GL_MAP1_VERTEX_3:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          if (ctx->Eval.Map1Vertex3 == state)
             return;
@@ -699,7 +699,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          ctx->Eval.Map1Vertex3 = state;
          break;
       case GL_MAP1_VERTEX_4:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          if (ctx->Eval.Map1Vertex4 == state)
             return;
@@ -708,7 +708,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          ctx->Eval.Map1Vertex4 = state;
          break;
       case GL_MAP2_COLOR_4:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          if (ctx->Eval.Map2Color4 == state)
             return;
@@ -717,7 +717,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          ctx->Eval.Map2Color4 = state;
          break;
       case GL_MAP2_INDEX:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          if (ctx->Eval.Map2Index == state)
             return;
@@ -726,7 +726,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          ctx->Eval.Map2Index = state;
          break;
       case GL_MAP2_NORMAL:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          if (ctx->Eval.Map2Normal == state)
             return;
@@ -735,7 +735,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          ctx->Eval.Map2Normal = state;
          break;
       case GL_MAP2_TEXTURE_COORD_1:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          if (ctx->Eval.Map2TextureCoord1 == state)
             return;
@@ -744,7 +744,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          ctx->Eval.Map2TextureCoord1 = state;
          break;
       case GL_MAP2_TEXTURE_COORD_2:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          if (ctx->Eval.Map2TextureCoord2 == state)
             return;
@@ -753,7 +753,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          ctx->Eval.Map2TextureCoord2 = state;
          break;
       case GL_MAP2_TEXTURE_COORD_3:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          if (ctx->Eval.Map2TextureCoord3 == state)
             return;
@@ -762,7 +762,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          ctx->Eval.Map2TextureCoord3 = state;
          break;
       case GL_MAP2_TEXTURE_COORD_4:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          if (ctx->Eval.Map2TextureCoord4 == state)
             return;
@@ -771,7 +771,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          ctx->Eval.Map2TextureCoord4 = state;
          break;
       case GL_MAP2_VERTEX_3:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          if (ctx->Eval.Map2Vertex3 == state)
             return;
@@ -780,7 +780,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          ctx->Eval.Map2Vertex3 = state;
          break;
       case GL_MAP2_VERTEX_4:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          if (ctx->Eval.Map2Vertex4 == state)
             return;
@@ -789,7 +789,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          ctx->Eval.Map2Vertex4 = state;
          break;
       case GL_NORMALIZE:
-         if (ctx->API != API_OPENGL_COMPAT && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
             goto invalid_enum_error;
          if (ctx->Transform.Normalize == state)
             return;
@@ -798,7 +798,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          ctx->Transform.Normalize = state;
          break;
       case GL_POINT_SMOOTH:
-         if (ctx->API != API_OPENGL_COMPAT && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
             goto invalid_enum_error;
          if (ctx->Point.SmoothFlag == state)
             return;
@@ -816,7 +816,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          ctx->Polygon.SmoothFlag = state;
          break;
       case GL_POLYGON_STIPPLE:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          if (ctx->Polygon.StippleFlag == state)
             return;
@@ -854,7 +854,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          ctx->Polygon.OffsetFill = state;
          break;
       case GL_RESCALE_NORMAL_EXT:
-         if (ctx->API != API_OPENGL_COMPAT && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
             goto invalid_enum_error;
          if (ctx->Transform.RescaleNormals == state)
             return;
@@ -885,21 +885,21 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          _mesa_update_allow_draw_out_of_order(ctx);
          break;
       case GL_TEXTURE_1D:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          if (!enable_texture(ctx, state, TEXTURE_1D_BIT)) {
             return;
          }
          break;
       case GL_TEXTURE_2D:
-         if (ctx->API != API_OPENGL_COMPAT && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
             goto invalid_enum_error;
          if (!enable_texture(ctx, state, TEXTURE_2D_BIT)) {
             return;
          }
          break;
       case GL_TEXTURE_3D:
-         if (ctx->API != API_OPENGL_COMPAT && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
             goto invalid_enum_error;
          if (!enable_texture(ctx, state, TEXTURE_3D_BIT)) {
             return;
@@ -912,7 +912,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          {
             struct gl_fixedfunc_texture_unit *texUnit = get_texcoord_unit(ctx);
 
-            if (ctx->API != API_OPENGL_COMPAT)
+            if (!_mesa_is_desktop_gl_compat(ctx))
                goto invalid_enum_error;
 
             if (texUnit) {
@@ -957,7 +957,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
       case GL_NORMAL_ARRAY:
       case GL_COLOR_ARRAY:
       case GL_TEXTURE_COORD_ARRAY:
-         if (ctx->API != API_OPENGL_COMPAT && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
             goto invalid_enum_error;
          client_state( ctx, ctx->Array.VAO, cap, state );
          return;
@@ -965,7 +965,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
       case GL_EDGE_FLAG_ARRAY:
       case GL_FOG_COORDINATE_ARRAY_EXT:
       case GL_SECONDARY_COLOR_ARRAY_EXT:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          client_state( ctx, ctx->Array.VAO, cap, state );
          return;
@@ -977,7 +977,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
 
       /* GL_ARB_texture_cube_map */
       case GL_TEXTURE_CUBE_MAP:
-         if (ctx->API != API_OPENGL_COMPAT && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
             goto invalid_enum_error;
          if (!enable_texture(ctx, state, TEXTURE_CUBE_BIT)) {
             return;
@@ -986,7 +986,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
 
       /* GL_EXT_secondary_color */
       case GL_COLOR_SUM_EXT:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          if (ctx->Fog.ColorSumEnabled == state)
             return;
@@ -1051,7 +1051,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
 
       /* GL_IBM_rasterpos_clip */
       case GL_RASTER_POSITION_UNCLIPPED_IBM:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          if (ctx->Transform.RasterPositionUnclipped == state)
             return;
@@ -1546,11 +1546,11 @@ _mesa_IsEnabled( GLenum cap )
 
    switch (cap) {
       case GL_ALPHA_TEST:
-         if (ctx->API != API_OPENGL_COMPAT && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
             goto invalid_enum_error;
          return ctx->Color.AlphaEnabled;
       case GL_AUTO_NORMAL:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          return ctx->Eval.AutoNormal;
       case GL_BLEND:
@@ -1571,7 +1571,7 @@ _mesa_IsEnabled( GLenum cap )
          return (ctx->Transform.ClipPlanesEnabled >> p) & 1;
       }
       case GL_COLOR_MATERIAL:
-         if (ctx->API != API_OPENGL_COMPAT && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
             goto invalid_enum_error;
          return ctx->Light.ColorMaterialEnabled;
       case GL_CULL_FACE:
@@ -1584,11 +1584,11 @@ _mesa_IsEnabled( GLenum cap )
       case GL_DITHER:
          return ctx->Color.DitherFlag;
       case GL_FOG:
-         if (ctx->API != API_OPENGL_COMPAT && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
             goto invalid_enum_error;
          return ctx->Fog.Enabled;
       case GL_LIGHTING:
-         if (ctx->API != API_OPENGL_COMPAT && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
             goto invalid_enum_error;
          return ctx->Light.Enabled;
       case GL_LIGHT0:
@@ -1599,7 +1599,7 @@ _mesa_IsEnabled( GLenum cap )
       case GL_LIGHT5:
       case GL_LIGHT6:
       case GL_LIGHT7:
-         if (ctx->API != API_OPENGL_COMPAT && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
             goto invalid_enum_error;
          return ctx->Light.Light[cap-GL_LIGHT0].Enabled;
       case GL_LINE_SMOOTH:
@@ -1607,11 +1607,11 @@ _mesa_IsEnabled( GLenum cap )
             goto invalid_enum_error;
          return ctx->Line.SmoothFlag;
       case GL_LINE_STIPPLE:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          return ctx->Line.StippleFlag;
       case GL_INDEX_LOGIC_OP:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          return ctx->Color.IndexLogicOpEnabled;
       case GL_COLOR_LOGIC_OP:
@@ -1619,83 +1619,83 @@ _mesa_IsEnabled( GLenum cap )
             goto invalid_enum_error;
          return ctx->Color.ColorLogicOpEnabled;
       case GL_MAP1_COLOR_4:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          return ctx->Eval.Map1Color4;
       case GL_MAP1_INDEX:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          return ctx->Eval.Map1Index;
       case GL_MAP1_NORMAL:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          return ctx->Eval.Map1Normal;
       case GL_MAP1_TEXTURE_COORD_1:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          return ctx->Eval.Map1TextureCoord1;
       case GL_MAP1_TEXTURE_COORD_2:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          return ctx->Eval.Map1TextureCoord2;
       case GL_MAP1_TEXTURE_COORD_3:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          return ctx->Eval.Map1TextureCoord3;
       case GL_MAP1_TEXTURE_COORD_4:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          return ctx->Eval.Map1TextureCoord4;
       case GL_MAP1_VERTEX_3:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          return ctx->Eval.Map1Vertex3;
       case GL_MAP1_VERTEX_4:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          return ctx->Eval.Map1Vertex4;
       case GL_MAP2_COLOR_4:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          return ctx->Eval.Map2Color4;
       case GL_MAP2_INDEX:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          return ctx->Eval.Map2Index;
       case GL_MAP2_NORMAL:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          return ctx->Eval.Map2Normal;
       case GL_MAP2_TEXTURE_COORD_1:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          return ctx->Eval.Map2TextureCoord1;
       case GL_MAP2_TEXTURE_COORD_2:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          return ctx->Eval.Map2TextureCoord2;
       case GL_MAP2_TEXTURE_COORD_3:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          return ctx->Eval.Map2TextureCoord3;
       case GL_MAP2_TEXTURE_COORD_4:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          return ctx->Eval.Map2TextureCoord4;
       case GL_MAP2_VERTEX_3:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          return ctx->Eval.Map2Vertex3;
       case GL_MAP2_VERTEX_4:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          return ctx->Eval.Map2Vertex4;
       case GL_NORMALIZE:
-         if (ctx->API != API_OPENGL_COMPAT && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
             goto invalid_enum_error;
          return ctx->Transform.Normalize;
       case GL_POINT_SMOOTH:
-         if (ctx->API != API_OPENGL_COMPAT && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
             goto invalid_enum_error;
          return ctx->Point.SmoothFlag;
       case GL_POLYGON_SMOOTH:
@@ -1703,7 +1703,7 @@ _mesa_IsEnabled( GLenum cap )
             goto invalid_enum_error;
          return ctx->Polygon.SmoothFlag;
       case GL_POLYGON_STIPPLE:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          return ctx->Polygon.StippleFlag;
       case GL_POLYGON_OFFSET_POINT:
@@ -1717,7 +1717,7 @@ _mesa_IsEnabled( GLenum cap )
       case GL_POLYGON_OFFSET_FILL:
          return ctx->Polygon.OffsetFill;
       case GL_RESCALE_NORMAL_EXT:
-         if (ctx->API != API_OPENGL_COMPAT && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
             goto invalid_enum_error;
          return ctx->Transform.RescaleNormals;
       case GL_SCISSOR_TEST:
@@ -1725,15 +1725,15 @@ _mesa_IsEnabled( GLenum cap )
       case GL_STENCIL_TEST:
          return ctx->Stencil.Enabled;
       case GL_TEXTURE_1D:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          return is_texture_enabled(ctx, TEXTURE_1D_BIT);
       case GL_TEXTURE_2D:
-         if (ctx->API != API_OPENGL_COMPAT && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
             goto invalid_enum_error;
          return is_texture_enabled(ctx, TEXTURE_2D_BIT);
       case GL_TEXTURE_3D:
-         if (ctx->API != API_OPENGL_COMPAT && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
             goto invalid_enum_error;
          return is_texture_enabled(ctx, TEXTURE_3D_BIT);
       case GL_TEXTURE_GEN_S:
@@ -1744,7 +1744,7 @@ _mesa_IsEnabled( GLenum cap )
             const struct gl_fixedfunc_texture_unit *texUnit =
                get_texcoord_unit(ctx);
 
-            if (ctx->API != API_OPENGL_COMPAT)
+            if (!_mesa_is_desktop_gl_compat(ctx))
                goto invalid_enum_error;
 
             if (texUnit) {
@@ -1771,36 +1771,36 @@ _mesa_IsEnabled( GLenum cap )
 
       /* client-side state */
       case GL_VERTEX_ARRAY:
-         if (ctx->API != API_OPENGL_COMPAT && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
             goto invalid_enum_error;
          return !!(ctx->Array.VAO->Enabled & VERT_BIT_POS);
       case GL_NORMAL_ARRAY:
-         if (ctx->API != API_OPENGL_COMPAT && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
             goto invalid_enum_error;
          return !!(ctx->Array.VAO->Enabled & VERT_BIT_NORMAL);
       case GL_COLOR_ARRAY:
-         if (ctx->API != API_OPENGL_COMPAT && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
             goto invalid_enum_error;
          return !!(ctx->Array.VAO->Enabled & VERT_BIT_COLOR0);
       case GL_INDEX_ARRAY:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          return !!(ctx->Array.VAO->Enabled & VERT_BIT_COLOR_INDEX);
       case GL_TEXTURE_COORD_ARRAY:
-         if (ctx->API != API_OPENGL_COMPAT && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
             goto invalid_enum_error;
          return !!(ctx->Array.VAO->Enabled &
                    VERT_BIT_TEX(ctx->Array.ActiveTexture));
       case GL_EDGE_FLAG_ARRAY:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          return !!(ctx->Array.VAO->Enabled & VERT_BIT_EDGEFLAG);
       case GL_FOG_COORDINATE_ARRAY_EXT:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          return !!(ctx->Array.VAO->Enabled & VERT_BIT_FOG);
       case GL_SECONDARY_COLOR_ARRAY_EXT:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          return !!(ctx->Array.VAO->Enabled & VERT_BIT_COLOR1);
       case GL_POINT_SIZE_ARRAY_OES:
@@ -1810,13 +1810,13 @@ _mesa_IsEnabled( GLenum cap )
 
       /* GL_ARB_texture_cube_map */
       case GL_TEXTURE_CUBE_MAP:
-         if (ctx->API != API_OPENGL_COMPAT && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
             goto invalid_enum_error;
          return is_texture_enabled(ctx, TEXTURE_CUBE_BIT);
 
       /* GL_EXT_secondary_color */
       case GL_COLOR_SUM_EXT:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          return ctx->Fog.ColorSumEnabled;
 
@@ -1840,7 +1840,7 @@ _mesa_IsEnabled( GLenum cap )
 
       /* GL_IBM_rasterpos_clip */
       case GL_RASTER_POSITION_UNCLIPPED_IBM:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_enum_error;
          return ctx->Transform.RasterPositionUnclipped;
 
diff --git a/src/mesa/main/fbobject.c b/src/mesa/main/fbobject.c
index 61787de934be8..889e3265bceb8 100644
--- a/src/mesa/main/fbobject.c
+++ b/src/mesa/main/fbobject.c
@@ -4792,7 +4792,7 @@ get_framebuffer_attachment_parameter(struct gl_context *ctx,
       }
       return;
    case GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE:
-      if ((ctx->API != API_OPENGL_COMPAT ||
+      if ((!_mesa_is_desktop_gl_compat(ctx) ||
            !ctx->Extensions.ARB_framebuffer_object)
           && ctx->API != API_OPENGL_CORE
           && !_mesa_is_gles3(ctx)) {
@@ -5221,7 +5221,7 @@ invalidate_framebuffer_storage(struct gl_context *ctx,
             /* Accumulation buffers and auxilary buffers were removed in
              * OpenGL 3.1, and they never existed in OpenGL ES.
              */
-            if (ctx->API != API_OPENGL_COMPAT)
+            if (!_mesa_is_desktop_gl_compat(ctx))
                goto invalid_enum;
             break;
          case GL_COLOR:
diff --git a/src/mesa/main/fog.c b/src/mesa/main/fog.c
index 5eb136fc8809b..867d6e8d8390f 100644
--- a/src/mesa/main/fog.c
+++ b/src/mesa/main/fog.c
@@ -134,7 +134,7 @@ _mesa_Fogfv( GLenum pname, const GLfloat *params )
          ctx->Fog.End = *params;
          break;
       case GL_FOG_INDEX:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_pname;
  	 if (ctx->Fog.Index == *params)
 	    return;
@@ -156,7 +156,7 @@ _mesa_Fogfv( GLenum pname, const GLfloat *params )
          break;
       case GL_FOG_COORDINATE_SOURCE_EXT: {
 	 GLenum p = (GLenum) (GLint) *params;
-         if (ctx->API != API_OPENGL_COMPAT ||
+         if (!_mesa_is_desktop_gl_compat(ctx) ||
              (p != GL_FOG_COORDINATE_EXT && p != GL_FRAGMENT_DEPTH_EXT)) {
 	    _mesa_error(ctx, GL_INVALID_ENUM, "glFog");
 	    return;
@@ -169,7 +169,7 @@ _mesa_Fogfv( GLenum pname, const GLfloat *params )
       }
       case GL_FOG_DISTANCE_MODE_NV: {
 	 GLenum p = (GLenum) (GLint) *params;
-         if (ctx->API != API_OPENGL_COMPAT || !ctx->Extensions.NV_fog_distance ||
+         if (!_mesa_is_desktop_gl_compat(ctx) || !ctx->Extensions.NV_fog_distance ||
              (p != GL_EYE_RADIAL_NV && p != GL_EYE_PLANE && p != GL_EYE_PLANE_ABSOLUTE_NV)) {
 	    _mesa_error(ctx, GL_INVALID_ENUM, "glFog");
 	    return;
diff --git a/src/mesa/main/getstring.c b/src/mesa/main/getstring.c
index 45987488b84bf..c85d2bf2e8da9 100644
--- a/src/mesa/main/getstring.c
+++ b/src/mesa/main/getstring.c
@@ -254,52 +254,52 @@ _get_vao_pointerv(GLenum pname, struct gl_vertex_array_object* vao,
 
    switch (pname) {
       case GL_VERTEX_ARRAY_POINTER:
-         if (ctx->API != API_OPENGL_COMPAT && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
             goto invalid_pname;
          *params = (GLvoid *) vao->VertexAttrib[VERT_ATTRIB_POS].Ptr;
          break;
       case GL_NORMAL_ARRAY_POINTER:
-         if (ctx->API != API_OPENGL_COMPAT && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
             goto invalid_pname;
          *params = (GLvoid *) vao->VertexAttrib[VERT_ATTRIB_NORMAL].Ptr;
          break;
       case GL_COLOR_ARRAY_POINTER:
-         if (ctx->API != API_OPENGL_COMPAT && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
             goto invalid_pname;
          *params = (GLvoid *) vao->VertexAttrib[VERT_ATTRIB_COLOR0].Ptr;
          break;
       case GL_SECONDARY_COLOR_ARRAY_POINTER_EXT:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_pname;
          *params = (GLvoid *) vao->VertexAttrib[VERT_ATTRIB_COLOR1].Ptr;
          break;
       case GL_FOG_COORDINATE_ARRAY_POINTER_EXT:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_pname;
          *params = (GLvoid *) vao->VertexAttrib[VERT_ATTRIB_FOG].Ptr;
          break;
       case GL_INDEX_ARRAY_POINTER:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_pname;
          *params = (GLvoid *) vao->VertexAttrib[VERT_ATTRIB_COLOR_INDEX].Ptr;
          break;
       case GL_TEXTURE_COORD_ARRAY_POINTER:
-         if (ctx->API != API_OPENGL_COMPAT && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
             goto invalid_pname;
          *params = (GLvoid *) vao->VertexAttrib[VERT_ATTRIB_TEX(clientUnit)].Ptr;
          break;
       case GL_EDGE_FLAG_ARRAY_POINTER:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_pname;
          *params = (GLvoid *) vao->VertexAttrib[VERT_ATTRIB_EDGEFLAG].Ptr;
          break;
       case GL_FEEDBACK_BUFFER_POINTER:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_pname;
          *params = ctx->Feedback.Buffer;
          break;
       case GL_SELECTION_BUFFER_POINTER:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_pname;
          *params = ctx->Select.Buffer;
          break;
diff --git a/src/mesa/main/glthread_draw.c b/src/mesa/main/glthread_draw.c
index b747493aba76b..dd62170c233b8 100644
--- a/src/mesa/main/glthread_draw.c
+++ b/src/mesa/main/glthread_draw.c
@@ -1373,7 +1373,7 @@ lower_draw_elements_indirect(struct gl_context *ctx, GLenum mode, GLenum type,
 static inline bool
 draw_indirect_async_allowed(struct gl_context *ctx, unsigned user_buffer_mask)
 {
-   return ctx->API != API_OPENGL_COMPAT ||
+   return !_mesa_is_desktop_gl_compat(ctx) ||
           /* This will just generate GL_INVALID_OPERATION, as it should. */
           ctx->GLThread.inside_begin_end ||
           ctx->GLThread.ListMode ||
diff --git a/src/mesa/main/hint.c b/src/mesa/main/hint.c
index 60be5358b2272..6f3fe94b0bef5 100644
--- a/src/mesa/main/hint.c
+++ b/src/mesa/main/hint.c
@@ -51,7 +51,7 @@ _mesa_Hint( GLenum target, GLenum mode )
 
    switch (target) {
       case GL_FOG_HINT:
-         if (ctx->API != API_OPENGL_COMPAT && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
             goto invalid_target;
          if (ctx->Hint.Fog == mode)
 	    return;
@@ -67,7 +67,7 @@ _mesa_Hint( GLenum target, GLenum mode )
          ctx->Hint.LineSmooth = mode;
          break;
       case GL_PERSPECTIVE_CORRECTION_HINT:
-         if (ctx->API != API_OPENGL_COMPAT && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
             goto invalid_target;
          if (ctx->Hint.PerspectiveCorrection == mode)
 	    return;
@@ -75,7 +75,7 @@ _mesa_Hint( GLenum target, GLenum mode )
          ctx->Hint.PerspectiveCorrection = mode;
          break;
       case GL_POINT_SMOOTH_HINT:
-         if (ctx->API != API_OPENGL_COMPAT && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
             goto invalid_target;
          if (ctx->Hint.PointSmooth == mode)
 	    return;
diff --git a/src/mesa/main/light.c b/src/mesa/main/light.c
index b1543f58f1552..10b7f67598263 100644
--- a/src/mesa/main/light.c
+++ b/src/mesa/main/light.c
@@ -506,7 +506,7 @@ _mesa_LightModelfv( GLenum pname, const GLfloat *params )
          COPY_4V( ctx->Light.Model.Ambient, params );
          break;
       case GL_LIGHT_MODEL_LOCAL_VIEWER:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_pname;
          newbool = (params[0] != 0.0F);
 	 if (ctx->Light.Model.LocalViewer == newbool)
@@ -524,7 +524,7 @@ _mesa_LightModelfv( GLenum pname, const GLfloat *params )
 	 ctx->Light.Model.TwoSide = newbool;
          break;
       case GL_LIGHT_MODEL_COLOR_CONTROL:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_pname;
          if (params[0] == (GLfloat) GL_SINGLE_COLOR)
 	    newenum = GL_SINGLE_COLOR;
@@ -856,7 +856,7 @@ _mesa_GetMaterialfv( GLenum face, GLenum pname, GLfloat *params )
 	 *params = mat[MAT_ATTRIB_SHININESS(f)][0];
 	 break;
       case GL_COLOR_INDEXES:
-         if (ctx->API != API_OPENGL_COMPAT) {
+         if (!_mesa_is_desktop_gl_compat(ctx)) {
             _mesa_error( ctx, GL_INVALID_ENUM, "glGetMaterialfv(pname)" );
             return;
          }
diff --git a/src/mesa/main/queryobj.c b/src/mesa/main/queryobj.c
index be01dcb42bd57..afd4b16544225 100644
--- a/src/mesa/main/queryobj.c
+++ b/src/mesa/main/queryobj.c
@@ -757,7 +757,7 @@ _mesa_BeginQueryIndexed(GLenum target, GLuint index, GLuint id)
 
    q = _mesa_lookup_query_object(ctx, id);
    if (!q) {
-      if (ctx->API != API_OPENGL_COMPAT) {
+      if (!_mesa_is_desktop_gl_compat(ctx)) {
          _mesa_error(ctx, GL_INVALID_OPERATION,
                      "glBeginQuery{Indexed}(non-gen name)");
          return;
diff --git a/src/mesa/main/texenv.c b/src/mesa/main/texenv.c
index bd643bac5da8c..a42619af1f4de 100644
--- a/src/mesa/main/texenv.c
+++ b/src/mesa/main/texenv.c
@@ -202,7 +202,7 @@ set_combiner_source(struct gl_context *ctx,
       return false;
    }
 
-   if ((term == 3) && (ctx->API != API_OPENGL_COMPAT
+   if ((term == 3) && (!_mesa_is_desktop_gl_compat(ctx)
                        || !ctx->Extensions.NV_texture_env_combine4)) {
       TE_ERROR(GL_INVALID_ENUM, "glTexEnv(pname=%s)", pname);
       return false;
@@ -290,7 +290,7 @@ set_combiner_operand(struct gl_context *ctx,
       return false;
    }
 
-   if ((term == 3) && (ctx->API != API_OPENGL_COMPAT
+   if ((term == 3) && (!_mesa_is_desktop_gl_compat(ctx)
                        || !ctx->Extensions.NV_texture_env_combine4)) {
       TE_ERROR(GL_INVALID_ENUM, "glTexEnv(pname=%s)", pname);
       return false;
diff --git a/src/mesa/main/texgen.c b/src/mesa/main/texgen.c
index f52b67ce1cd68..3fbbcce11305f 100644
--- a/src/mesa/main/texgen.c
+++ b/src/mesa/main/texgen.c
@@ -125,7 +125,7 @@ texgenfv( GLuint texunitIndex, GLenum coord, GLenum pname,
             _mesa_error( ctx, GL_INVALID_ENUM, "glTexGenfv(param)" );
             return;
          }
-         if (ctx->API != API_OPENGL_COMPAT
+         if (!_mesa_is_desktop_gl_compat(ctx)
              && (bit & (TEXGEN_REFLECTION_MAP_NV | TEXGEN_NORMAL_MAP_NV)) == 0) {
             _mesa_error( ctx, GL_INVALID_ENUM, "glTexGenfv(param)" );
             return;
@@ -140,7 +140,7 @@ texgenfv( GLuint texunitIndex, GLenum coord, GLenum pname,
 
    case GL_OBJECT_PLANE:
       {
-         if (ctx->API != API_OPENGL_COMPAT) {
+         if (!_mesa_is_desktop_gl_compat(ctx)) {
             _mesa_error( ctx, GL_INVALID_ENUM, "glTexGenfv(param)" );
             return;
          }
@@ -155,7 +155,7 @@ texgenfv( GLuint texunitIndex, GLenum coord, GLenum pname,
       {
          GLfloat tmp[4];
 
-         if (ctx->API != API_OPENGL_COMPAT) {
+         if (!_mesa_is_desktop_gl_compat(ctx)) {
             _mesa_error( ctx, GL_INVALID_ENUM, "glTexGenfv(param)" );
             return;
          }
@@ -235,14 +235,14 @@ gettexgenfv( GLenum texunitIndex, GLenum coord, GLenum pname,
       params[0] = ENUM_TO_FLOAT(texgen->Mode);
       break;
    case GL_OBJECT_PLANE:
-      if (ctx->API != API_OPENGL_COMPAT) {
+      if (!_mesa_is_desktop_gl_compat(ctx)) {
          _mesa_error( ctx, GL_INVALID_ENUM, "%s(param)", caller );
          return;
       }
       COPY_4V(params, unit->ObjectPlane[index]);
       break;
    case GL_EYE_PLANE:
-      if (ctx->API != API_OPENGL_COMPAT) {
+      if (!_mesa_is_desktop_gl_compat(ctx)) {
          _mesa_error( ctx, GL_INVALID_ENUM, "%s(param)", caller );
          return;
       }
@@ -276,7 +276,7 @@ gettexgeniv( GLenum texunitIndex, GLenum coord, GLenum pname,
       params[0] = texgen->Mode;
       break;
    case GL_OBJECT_PLANE:
-      if (ctx->API != API_OPENGL_COMPAT) {
+      if (!_mesa_is_desktop_gl_compat(ctx)) {
          _mesa_error( ctx, GL_INVALID_ENUM, "%s(param)" , caller);
          return;
       }
@@ -286,7 +286,7 @@ gettexgeniv( GLenum texunitIndex, GLenum coord, GLenum pname,
       params[3] = (GLint) unit->ObjectPlane[index][3];
       break;
    case GL_EYE_PLANE:
-      if (ctx->API != API_OPENGL_COMPAT) {
+      if (!_mesa_is_desktop_gl_compat(ctx)) {
          _mesa_error( ctx, GL_INVALID_ENUM, "%s(param)" , caller);
          return;
       }
diff --git a/src/mesa/main/teximage.c b/src/mesa/main/teximage.c
index 412fce4d8c74f..ffec45582ecd1 100644
--- a/src/mesa/main/teximage.c
+++ b/src/mesa/main/teximage.c
@@ -1959,7 +1959,7 @@ texture_error_check( struct gl_context *ctx,
 
    /* Check border */
    if (border < 0 || border > 1 ||
-       ((ctx->API != API_OPENGL_COMPAT ||
+       ((!_mesa_is_desktop_gl_compat(ctx) ||
          target == GL_TEXTURE_RECTANGLE_NV ||
          target == GL_PROXY_TEXTURE_RECTANGLE_NV) && border != 0)) {
       _mesa_error(ctx, GL_INVALID_VALUE,
@@ -2434,7 +2434,7 @@ copytexture_error_check( struct gl_context *ctx, GLuint dimensions,
 
    /* Check border */
    if (border < 0 || border > 1 ||
-       ((ctx->API != API_OPENGL_COMPAT ||
+       ((!_mesa_is_desktop_gl_compat(ctx) ||
          target == GL_TEXTURE_RECTANGLE_NV ||
          target == GL_PROXY_TEXTURE_RECTANGLE_NV) && border != 0)) {
       _mesa_error(ctx, GL_INVALID_VALUE,
diff --git a/src/mesa/main/texparam.c b/src/mesa/main/texparam.c
index 303e28d7eb01b..7af31a0cea697 100644
--- a/src/mesa/main/texparam.c
+++ b/src/mesa/main/texparam.c
@@ -450,7 +450,7 @@ set_tex_parameteri(struct gl_context *ctx,
       return GL_TRUE;
 
    case GL_GENERATE_MIPMAP_SGIS:
-      if (ctx->API != API_OPENGL_COMPAT && ctx->API != API_OPENGLES)
+      if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
          goto invalid_pname;
 
       if (params[0] && texObj->Target == GL_TEXTURE_EXTERNAL_OES)
@@ -786,7 +786,7 @@ set_tex_parameterf(struct gl_context *ctx,
       return GL_TRUE;
 
    case GL_TEXTURE_PRIORITY:
-      if (ctx->API != API_OPENGL_COMPAT)
+      if (!_mesa_is_desktop_gl_compat(ctx))
          goto invalid_pname;
 
       flush(ctx);
@@ -1770,7 +1770,7 @@ get_tex_level_parameter_image(struct gl_context *ctx,
 	 }
          break;
       case GL_TEXTURE_BORDER:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_pname;
          *params = img->Border;
          break;
@@ -1785,7 +1785,7 @@ get_tex_level_parameter_image(struct gl_context *ctx,
          break;
       case GL_TEXTURE_INTENSITY_SIZE:
       case GL_TEXTURE_LUMINANCE_SIZE:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_pname;
          if (_mesa_base_format_has_channel(img->_BaseFormat, pname)) {
             *params = _mesa_get_format_bits(texFormat, pname);
@@ -1838,7 +1838,7 @@ get_tex_level_parameter_image(struct gl_context *ctx,
       /* GL_ARB_texture_float */
       case GL_TEXTURE_LUMINANCE_TYPE_ARB:
       case GL_TEXTURE_INTENSITY_TYPE_ARB:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_pname;
          FALLTHROUGH;
       case GL_TEXTURE_RED_TYPE_ARB:
@@ -2314,13 +2314,13 @@ get_tex_parameterfv(struct gl_context *ctx,
          }
          break;
       case GL_TEXTURE_RESIDENT:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_pname;
 
          *params = 1.0F;
          break;
       case GL_TEXTURE_PRIORITY:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_pname;
 
          *params = obj->Attrib.Priority;
@@ -2352,7 +2352,7 @@ get_tex_parameterfv(struct gl_context *ctx,
          *params = obj->Sampler.Attrib.MaxAnisotropy;
          break;
       case GL_GENERATE_MIPMAP_SGIS:
-         if (ctx->API != API_OPENGL_COMPAT && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
             goto invalid_pname;
 
 	 *params = (GLfloat) obj->Attrib.GenerateMipmap;
@@ -2373,7 +2373,7 @@ get_tex_parameterfv(struct gl_context *ctx,
          /* GL_DEPTH_TEXTURE_MODE_ARB is removed in core-profile and it has
           * never existed in OpenGL ES.
           */
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_pname;
          *params = (GLfloat) obj->Attrib.DepthMode;
          break;
@@ -2566,13 +2566,13 @@ get_tex_parameteriv(struct gl_context *ctx,
          }
          break;
       case GL_TEXTURE_RESIDENT:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_pname;
 
          *params = 1;
          break;
       case GL_TEXTURE_PRIORITY:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_pname;
 
          *params = FLOAT_TO_INT(obj->Attrib.Priority);
@@ -2632,7 +2632,7 @@ get_tex_parameteriv(struct gl_context *ctx,
          *params = LCLAMPF(obj->Sampler.Attrib.MaxAnisotropy, INT32_MIN, INT32_MAX);
          break;
       case GL_GENERATE_MIPMAP_SGIS:
-         if (ctx->API != API_OPENGL_COMPAT && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
             goto invalid_pname;
 
 	 *params = (GLint) obj->Attrib.GenerateMipmap;
@@ -2650,7 +2650,7 @@ get_tex_parameteriv(struct gl_context *ctx,
          *params = (GLint) obj->Sampler.Attrib.CompareFunc;
          break;
       case GL_DEPTH_TEXTURE_MODE_ARB:
-         if (ctx->API != API_OPENGL_COMPAT)
+         if (!_mesa_is_desktop_gl_compat(ctx))
             goto invalid_pname;
          *params = (GLint) obj->Attrib.DepthMode;
          break;
diff --git a/src/mesa/main/varray.c b/src/mesa/main/varray.c
index bfd4e8fccf4c7..22aeaa1c6bbd9 100644
--- a/src/mesa/main/varray.c
+++ b/src/mesa/main/varray.c
@@ -191,7 +191,7 @@ update_attribute_map_mode(const struct gl_context *ctx,
     * There is no need to change the mapping away from the
     * identity mapping if we are not in compat mode.
     */
-   if (ctx->API != API_OPENGL_COMPAT)
+   if (!_mesa_is_desktop_gl_compat(ctx))
       return;
    /* The generic0 attribute superseeds the position attribute */
    const GLbitfield enabled = vao->Enabled;
@@ -2091,7 +2091,7 @@ void
 _mesa_update_edgeflag_state_explicit(struct gl_context *ctx,
                                      bool per_vertex_enable)
 {
-   if (ctx->API != API_OPENGL_COMPAT)
+   if (!_mesa_is_desktop_gl_compat(ctx))
       return;
 
    /* Edge flags take effect only if the polygon mode is not FILL, and they
diff --git a/src/mesa/state_tracker/st_glsl_to_nir.cpp b/src/mesa/state_tracker/st_glsl_to_nir.cpp
index a83a0f747935e..aa4d803c59ceb 100644
--- a/src/mesa/state_tracker/st_glsl_to_nir.cpp
+++ b/src/mesa/state_tracker/st_glsl_to_nir.cpp
@@ -666,7 +666,7 @@ st_link_glsl_to_nir(struct gl_context *ctx,
          if (!(prev_shader->sh.LinkedTransformFeedback &&
                prev_shader->sh.LinkedTransformFeedback->NumVarying > 0))
             nir_compact_varyings(prev_shader->nir,
-                                 nir, ctx->API != API_OPENGL_COMPAT);
+                                 nir, !_mesa_is_desktop_gl_compat(ctx));
 
          if (ctx->Const.ShaderCompilerOptions[shader->Stage].NirOptions->vectorize_io)
             st_nir_vectorize_io(prev_shader->nir, nir);
diff --git a/src/mesa/vbo/vbo_exec_api.c b/src/mesa/vbo/vbo_exec_api.c
index be79ce9ef61d9..bbc82c9a45b82 100644
--- a/src/mesa/vbo/vbo_exec_api.c
+++ b/src/mesa/vbo/vbo_exec_api.c
@@ -652,7 +652,7 @@ _mesa_Materialfv(GLenum face, GLenum pname, const GLfloat *params)
          MAT_ATTR(VBO_ATTRIB_MAT_BACK_SHININESS, 1, params);
       break;
    case GL_COLOR_INDEXES:
-      if (ctx->API != API_OPENGL_COMPAT) {
+      if (!_mesa_is_desktop_gl_compat(ctx)) {
          _mesa_error(ctx, GL_INVALID_ENUM, "glMaterialfv(pname)");
          return;
       }
-- 
GitLab


From 8d6cfc5a98747453759294ae8057f25e71a6d536 Mon Sep 17 00:00:00 2001
From: volodymyr <volodymyr.obozhyn@globallogic.com>
Date: Tue, 21 Mar 2023 21:31:23 +0200
Subject: [PATCH 2/6] ctx->API != API_OPENGLES --> \!_mesa_is_gles1(ctx)

replaces direct API checks with _mesa_is_...() checks

Closes: https://gitlab.freedesktop.org/mesa/mesa/-/issues/8340

Signed-off-by: Volodymyr Obohzyn volodymyr.obozhyn@globallogic.com
---
 src/mesa/main/blend.c     |  6 +--
 src/mesa/main/bufferobj.c |  2 +-
 src/mesa/main/enable.c    | 78 +++++++++++++++++++--------------------
 src/mesa/main/fbobject.c  |  4 +-
 src/mesa/main/get.c       |  2 +-
 src/mesa/main/getstring.c | 10 ++---
 src/mesa/main/glformats.c |  2 +-
 src/mesa/main/hint.c      |  8 ++--
 src/mesa/main/state.c     |  2 +-
 src/mesa/main/texobj.c    |  2 +-
 src/mesa/main/texparam.c  | 14 +++----
 src/mesa/main/varray.c    |  2 +-
 12 files changed, 66 insertions(+), 66 deletions(-)

diff --git a/src/mesa/main/blend.c b/src/mesa/main/blend.c
index e8c211ede616d..3f3d9bbbb1183 100644
--- a/src/mesa/main/blend.c
+++ b/src/mesa/main/blend.c
@@ -70,7 +70,7 @@ legal_src_factor(const struct gl_context *ctx, GLenum factor)
    case GL_SRC1_ALPHA:
    case GL_ONE_MINUS_SRC1_COLOR:
    case GL_ONE_MINUS_SRC1_ALPHA:
-      return ctx->API != API_OPENGLES
+      return !_mesa_is_gles1(ctx)
          && ctx->Extensions.ARB_blend_func_extended;
    default:
       return GL_FALSE;
@@ -103,14 +103,14 @@ legal_dst_factor(const struct gl_context *ctx, GLenum factor)
    case GL_ONE_MINUS_CONSTANT_ALPHA:
       return _mesa_is_desktop_gl(ctx) || _mesa_is_gles2(ctx);
    case GL_SRC_ALPHA_SATURATE:
-      return (ctx->API != API_OPENGLES
+      return (!_mesa_is_gles1(ctx)
               && ctx->Extensions.ARB_blend_func_extended)
          || _mesa_is_gles3(ctx);
    case GL_SRC1_COLOR:
    case GL_SRC1_ALPHA:
    case GL_ONE_MINUS_SRC1_COLOR:
    case GL_ONE_MINUS_SRC1_ALPHA:
-      return ctx->API != API_OPENGLES
+      return !_mesa_is_gles1(ctx)
          && ctx->Extensions.ARB_blend_func_extended;
    default:
       return GL_FALSE;
diff --git a/src/mesa/main/bufferobj.c b/src/mesa/main/bufferobj.c
index 64ed8024554f8..6bd09618d08bb 100644
--- a/src/mesa/main/bufferobj.c
+++ b/src/mesa/main/bufferobj.c
@@ -2365,7 +2365,7 @@ buffer_data(struct gl_context *ctx, struct gl_buffer_object *bufObj,
 
       switch (usage) {
       case GL_STREAM_DRAW_ARB:
-         valid_usage = (ctx->API != API_OPENGLES);
+         valid_usage = (!_mesa_is_gles1(ctx));
          break;
       case GL_STATIC_DRAW_ARB:
       case GL_DYNAMIC_DRAW_ARB:
diff --git a/src/mesa/main/enable.c b/src/mesa/main/enable.c
index 36ed059a1c0b0..ff9300ac3e82b 100644
--- a/src/mesa/main/enable.c
+++ b/src/mesa/main/enable.c
@@ -403,7 +403,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
 
    switch (cap) {
       case GL_ALPHA_TEST:
-         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_enum_error;
          if (ctx->Color.AlphaEnabled == state)
             return;
@@ -481,7 +481,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          }
          break;
       case GL_COLOR_MATERIAL:
-         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_enum_error;
          if (ctx->Light.ColorMaterialEnabled == state)
             return;
@@ -525,7 +525,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          ctx->Color.DitherFlag = state;
          break;
       case GL_FOG:
-         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_enum_error;
          if (ctx->Fog.Enabled == state)
             return;
@@ -542,7 +542,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
       case GL_LIGHT5:
       case GL_LIGHT6:
       case GL_LIGHT7:
-         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_enum_error;
          if (ctx->Light.Light[cap-GL_LIGHT0].Enabled == state)
             return;
@@ -557,7 +557,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          }
          break;
       case GL_LIGHTING:
-         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_enum_error;
          if (ctx->Light.Enabled == state)
             return;
@@ -567,7 +567,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          ctx->Light.Enabled = state;
          break;
       case GL_LINE_SMOOTH:
-         if (!_mesa_is_desktop_gl(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_enum_error;
          if (ctx->Line.SmoothFlag == state)
             return;
@@ -616,7 +616,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          ctx->ConservativeRasterization = state;
          break;
       case GL_COLOR_LOGIC_OP:
-         if (!_mesa_is_desktop_gl(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_enum_error;
          if (ctx->Color.ColorLogicOpEnabled == state)
             return;
@@ -789,7 +789,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          ctx->Eval.Map2Vertex4 = state;
          break;
       case GL_NORMALIZE:
-         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_enum_error;
          if (ctx->Transform.Normalize == state)
             return;
@@ -798,7 +798,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          ctx->Transform.Normalize = state;
          break;
       case GL_POINT_SMOOTH:
-         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_enum_error;
          if (ctx->Point.SmoothFlag == state)
             return;
@@ -854,7 +854,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          ctx->Polygon.OffsetFill = state;
          break;
       case GL_RESCALE_NORMAL_EXT:
-         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_enum_error;
          if (ctx->Transform.RescaleNormals == state)
             return;
@@ -892,14 +892,14 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          }
          break;
       case GL_TEXTURE_2D:
-         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_enum_error;
          if (!enable_texture(ctx, state, TEXTURE_2D_BIT)) {
             return;
          }
          break;
       case GL_TEXTURE_3D:
-         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_enum_error;
          if (!enable_texture(ctx, state, TEXTURE_3D_BIT)) {
             return;
@@ -935,7 +935,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          {
             struct gl_fixedfunc_texture_unit *texUnit = get_texcoord_unit(ctx);
 
-            if (ctx->API != API_OPENGLES)
+            if (!_mesa_is_gles1(ctx))
                goto invalid_enum_error;
 
             if (texUnit) {
@@ -957,7 +957,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
       case GL_NORMAL_ARRAY:
       case GL_COLOR_ARRAY:
       case GL_TEXTURE_COORD_ARRAY:
-         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_enum_error;
          client_state( ctx, ctx->Array.VAO, cap, state );
          return;
@@ -970,14 +970,14 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          client_state( ctx, ctx->Array.VAO, cap, state );
          return;
       case GL_POINT_SIZE_ARRAY_OES:
-         if (ctx->API != API_OPENGLES)
+         if (!_mesa_is_gles1(ctx))
             goto invalid_enum_error;
          client_state( ctx, ctx->Array.VAO, cap, state );
          return;
 
       /* GL_ARB_texture_cube_map */
       case GL_TEXTURE_CUBE_MAP:
-         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_enum_error;
          if (!enable_texture(ctx, state, TEXTURE_CUBE_BIT)) {
             return;
@@ -997,7 +997,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
 
       /* GL_ARB_multisample */
       case GL_MULTISAMPLE_ARB:
-         if (!_mesa_is_desktop_gl(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_enum_error;
          _mesa_set_multisample(ctx, state);
          return;
@@ -1010,7 +1010,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
          ctx->Multisample.SampleAlphaToCoverage = state;
          break;
       case GL_SAMPLE_ALPHA_TO_ONE_ARB:
-         if (!_mesa_is_desktop_gl(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_enum_error;
          if (ctx->Multisample.SampleAlphaToOne == state)
             return;
@@ -1546,7 +1546,7 @@ _mesa_IsEnabled( GLenum cap )
 
    switch (cap) {
       case GL_ALPHA_TEST:
-         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_enum_error;
          return ctx->Color.AlphaEnabled;
       case GL_AUTO_NORMAL:
@@ -1571,7 +1571,7 @@ _mesa_IsEnabled( GLenum cap )
          return (ctx->Transform.ClipPlanesEnabled >> p) & 1;
       }
       case GL_COLOR_MATERIAL:
-         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_enum_error;
          return ctx->Light.ColorMaterialEnabled;
       case GL_CULL_FACE:
@@ -1584,11 +1584,11 @@ _mesa_IsEnabled( GLenum cap )
       case GL_DITHER:
          return ctx->Color.DitherFlag;
       case GL_FOG:
-         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_enum_error;
          return ctx->Fog.Enabled;
       case GL_LIGHTING:
-         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_enum_error;
          return ctx->Light.Enabled;
       case GL_LIGHT0:
@@ -1599,11 +1599,11 @@ _mesa_IsEnabled( GLenum cap )
       case GL_LIGHT5:
       case GL_LIGHT6:
       case GL_LIGHT7:
-         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_enum_error;
          return ctx->Light.Light[cap-GL_LIGHT0].Enabled;
       case GL_LINE_SMOOTH:
-         if (!_mesa_is_desktop_gl(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_enum_error;
          return ctx->Line.SmoothFlag;
       case GL_LINE_STIPPLE:
@@ -1615,7 +1615,7 @@ _mesa_IsEnabled( GLenum cap )
             goto invalid_enum_error;
          return ctx->Color.IndexLogicOpEnabled;
       case GL_COLOR_LOGIC_OP:
-         if (!_mesa_is_desktop_gl(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_enum_error;
          return ctx->Color.ColorLogicOpEnabled;
       case GL_MAP1_COLOR_4:
@@ -1691,11 +1691,11 @@ _mesa_IsEnabled( GLenum cap )
             goto invalid_enum_error;
          return ctx->Eval.Map2Vertex4;
       case GL_NORMALIZE:
-         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_enum_error;
          return ctx->Transform.Normalize;
       case GL_POINT_SMOOTH:
-         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_enum_error;
          return ctx->Point.SmoothFlag;
       case GL_POLYGON_SMOOTH:
@@ -1717,7 +1717,7 @@ _mesa_IsEnabled( GLenum cap )
       case GL_POLYGON_OFFSET_FILL:
          return ctx->Polygon.OffsetFill;
       case GL_RESCALE_NORMAL_EXT:
-         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_enum_error;
          return ctx->Transform.RescaleNormals;
       case GL_SCISSOR_TEST:
@@ -1729,11 +1729,11 @@ _mesa_IsEnabled( GLenum cap )
             goto invalid_enum_error;
          return is_texture_enabled(ctx, TEXTURE_1D_BIT);
       case GL_TEXTURE_2D:
-         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_enum_error;
          return is_texture_enabled(ctx, TEXTURE_2D_BIT);
       case GL_TEXTURE_3D:
-         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_enum_error;
          return is_texture_enabled(ctx, TEXTURE_3D_BIT);
       case GL_TEXTURE_GEN_S:
@@ -1758,7 +1758,7 @@ _mesa_IsEnabled( GLenum cap )
             const struct gl_fixedfunc_texture_unit *texUnit =
                get_texcoord_unit(ctx);
 
-            if (ctx->API != API_OPENGLES)
+            if (!_mesa_is_gles1(ctx))
                goto invalid_enum_error;
 
             if (texUnit) {
@@ -1771,15 +1771,15 @@ _mesa_IsEnabled( GLenum cap )
 
       /* client-side state */
       case GL_VERTEX_ARRAY:
-         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_enum_error;
          return !!(ctx->Array.VAO->Enabled & VERT_BIT_POS);
       case GL_NORMAL_ARRAY:
-         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_enum_error;
          return !!(ctx->Array.VAO->Enabled & VERT_BIT_NORMAL);
       case GL_COLOR_ARRAY:
-         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_enum_error;
          return !!(ctx->Array.VAO->Enabled & VERT_BIT_COLOR0);
       case GL_INDEX_ARRAY:
@@ -1787,7 +1787,7 @@ _mesa_IsEnabled( GLenum cap )
             goto invalid_enum_error;
          return !!(ctx->Array.VAO->Enabled & VERT_BIT_COLOR_INDEX);
       case GL_TEXTURE_COORD_ARRAY:
-         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_enum_error;
          return !!(ctx->Array.VAO->Enabled &
                    VERT_BIT_TEX(ctx->Array.ActiveTexture));
@@ -1804,13 +1804,13 @@ _mesa_IsEnabled( GLenum cap )
             goto invalid_enum_error;
          return !!(ctx->Array.VAO->Enabled & VERT_BIT_COLOR1);
       case GL_POINT_SIZE_ARRAY_OES:
-         if (ctx->API != API_OPENGLES)
+         if (!_mesa_is_gles1(ctx))
             goto invalid_enum_error;
          return !!(ctx->Array.VAO->Enabled & VERT_BIT_POINT_SIZE);
 
       /* GL_ARB_texture_cube_map */
       case GL_TEXTURE_CUBE_MAP:
-         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_enum_error;
          return is_texture_enabled(ctx, TEXTURE_CUBE_BIT);
 
@@ -1822,13 +1822,13 @@ _mesa_IsEnabled( GLenum cap )
 
       /* GL_ARB_multisample */
       case GL_MULTISAMPLE_ARB:
-         if (!_mesa_is_desktop_gl(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_enum_error;
          return ctx->Multisample.Enabled;
       case GL_SAMPLE_ALPHA_TO_COVERAGE_ARB:
          return ctx->Multisample.SampleAlphaToCoverage;
       case GL_SAMPLE_ALPHA_TO_ONE_ARB:
-         if (!_mesa_is_desktop_gl(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_enum_error;
          return ctx->Multisample.SampleAlphaToOne;
       case GL_SAMPLE_COVERAGE_ARB:
diff --git a/src/mesa/main/fbobject.c b/src/mesa/main/fbobject.c
index 889e3265bceb8..325ee366871c4 100644
--- a/src/mesa/main/fbobject.c
+++ b/src/mesa/main/fbobject.c
@@ -2430,7 +2430,7 @@ _mesa_base_fbo_format(const struct gl_context *ctx, GLenum internalFormat)
       return _mesa_has_ARB_texture_rg(ctx) || _mesa_has_EXT_texture_norm16(ctx)
          ? GL_RED : 0;
    case GL_R8:
-      return ctx->API != API_OPENGLES && ctx->Extensions.ARB_texture_rg
+      return !_mesa_is_gles1(ctx) && ctx->Extensions.ARB_texture_rg
          ? GL_RED : 0;
    case GL_RG:
       return _mesa_has_ARB_texture_rg(ctx) ? GL_RG : 0;
@@ -2438,7 +2438,7 @@ _mesa_base_fbo_format(const struct gl_context *ctx, GLenum internalFormat)
       return _mesa_has_ARB_texture_rg(ctx) || _mesa_has_EXT_texture_norm16(ctx)
          ? GL_RG : 0;
    case GL_RG8:
-      return ctx->API != API_OPENGLES && ctx->Extensions.ARB_texture_rg
+      return !_mesa_is_gles1(ctx) && ctx->Extensions.ARB_texture_rg
          ? GL_RG : 0;
    /* signed normalized texture formats */
    case GL_R8_SNORM:
diff --git a/src/mesa/main/get.c b/src/mesa/main/get.c
index 67d9b855c0f7a..8315ae2e0068b 100644
--- a/src/mesa/main/get.c
+++ b/src/mesa/main/get.c
@@ -2492,7 +2492,7 @@ tex_binding_to_index(const struct gl_context *ctx, GLenum binding)
    case GL_TEXTURE_BINDING_2D:
       return TEXTURE_2D_INDEX;
    case GL_TEXTURE_BINDING_3D:
-      return (ctx->API != API_OPENGLES &&
+      return (!_mesa_is_gles1(ctx) &&
               !(_mesa_is_gles2(ctx) && !ctx->Extensions.OES_texture_3D))
          ? TEXTURE_3D_INDEX : -1;
    case GL_TEXTURE_BINDING_CUBE_MAP:
diff --git a/src/mesa/main/getstring.c b/src/mesa/main/getstring.c
index c85d2bf2e8da9..f9b0d88ed6ed7 100644
--- a/src/mesa/main/getstring.c
+++ b/src/mesa/main/getstring.c
@@ -254,17 +254,17 @@ _get_vao_pointerv(GLenum pname, struct gl_vertex_array_object* vao,
 
    switch (pname) {
       case GL_VERTEX_ARRAY_POINTER:
-         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_pname;
          *params = (GLvoid *) vao->VertexAttrib[VERT_ATTRIB_POS].Ptr;
          break;
       case GL_NORMAL_ARRAY_POINTER:
-         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_pname;
          *params = (GLvoid *) vao->VertexAttrib[VERT_ATTRIB_NORMAL].Ptr;
          break;
       case GL_COLOR_ARRAY_POINTER:
-         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_pname;
          *params = (GLvoid *) vao->VertexAttrib[VERT_ATTRIB_COLOR0].Ptr;
          break;
@@ -284,7 +284,7 @@ _get_vao_pointerv(GLenum pname, struct gl_vertex_array_object* vao,
          *params = (GLvoid *) vao->VertexAttrib[VERT_ATTRIB_COLOR_INDEX].Ptr;
          break;
       case GL_TEXTURE_COORD_ARRAY_POINTER:
-         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_pname;
          *params = (GLvoid *) vao->VertexAttrib[VERT_ATTRIB_TEX(clientUnit)].Ptr;
          break;
@@ -304,7 +304,7 @@ _get_vao_pointerv(GLenum pname, struct gl_vertex_array_object* vao,
          *params = ctx->Select.Buffer;
          break;
       case GL_POINT_SIZE_ARRAY_POINTER_OES:
-         if (ctx->API != API_OPENGLES)
+         if (!_mesa_is_gles1(ctx))
             goto invalid_pname;
          *params = (GLvoid *) vao->VertexAttrib[VERT_ATTRIB_POINT_SIZE].Ptr;
          break;
diff --git a/src/mesa/main/glformats.c b/src/mesa/main/glformats.c
index 61ddef43f76d6..3a6f2474e0213 100644
--- a/src/mesa/main/glformats.c
+++ b/src/mesa/main/glformats.c
@@ -2296,7 +2296,7 @@ _mesa_base_tex_format(const struct gl_context *ctx, GLint internalFormat)
       }
    }
 
-   if (ctx->API != API_OPENGLES) {
+   if (!_mesa_is_gles1(ctx)) {
       switch (internalFormat) {
       case GL_DEPTH_COMPONENT:
       case GL_DEPTH_COMPONENT16:
diff --git a/src/mesa/main/hint.c b/src/mesa/main/hint.c
index 6f3fe94b0bef5..b57742ea9a710 100644
--- a/src/mesa/main/hint.c
+++ b/src/mesa/main/hint.c
@@ -51,7 +51,7 @@ _mesa_Hint( GLenum target, GLenum mode )
 
    switch (target) {
       case GL_FOG_HINT:
-         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_target;
          if (ctx->Hint.Fog == mode)
 	    return;
@@ -59,7 +59,7 @@ _mesa_Hint( GLenum target, GLenum mode )
          ctx->Hint.Fog = mode;
          break;
       case GL_LINE_SMOOTH_HINT:
-         if (!_mesa_is_desktop_gl(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_target;
          if (ctx->Hint.LineSmooth == mode)
 	    return;
@@ -67,7 +67,7 @@ _mesa_Hint( GLenum target, GLenum mode )
          ctx->Hint.LineSmooth = mode;
          break;
       case GL_PERSPECTIVE_CORRECTION_HINT:
-         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_target;
          if (ctx->Hint.PerspectiveCorrection == mode)
 	    return;
@@ -75,7 +75,7 @@ _mesa_Hint( GLenum target, GLenum mode )
          ctx->Hint.PerspectiveCorrection = mode;
          break;
       case GL_POINT_SMOOTH_HINT:
-         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_target;
          if (ctx->Hint.PointSmooth == mode)
 	    return;
diff --git a/src/mesa/main/state.c b/src/mesa/main/state.c
index 736b2ae6c2ba4..7edda878af32f 100644
--- a/src/mesa/main/state.c
+++ b/src/mesa/main/state.c
@@ -671,7 +671,7 @@ set_vertex_processing_mode(struct gl_context *ctx, gl_vertex_processing_mode m)
        * impossible to reach.  The meta code is careful to not use shaders in
        * ES1.
        */
-      assert(ctx->API != API_OPENGLES);
+      assert(!_mesa_is_gles1(ctx));
 
       /* Other parts of the code assume that inputs[VERT_ATTRIB_POS] through
        * inputs[VERT_ATTRIB_GENERIC0-1] will be non-NULL.  However, in OpenGL
diff --git a/src/mesa/main/texobj.c b/src/mesa/main/texobj.c
index 20e14ee21eeea..693cddefc1340 100644
--- a/src/mesa/main/texobj.c
+++ b/src/mesa/main/texobj.c
@@ -1617,7 +1617,7 @@ _mesa_tex_target_to_index(const struct gl_context *ctx, GLenum target)
    case GL_TEXTURE_2D:
       return TEXTURE_2D_INDEX;
    case GL_TEXTURE_3D:
-      return (ctx->API != API_OPENGLES &&
+      return (!_mesa_is_gles1(ctx) &&
               !(_mesa_is_gles2(ctx) && !ctx->Extensions.OES_texture_3D))
          ? TEXTURE_3D_INDEX : -1;
    case GL_TEXTURE_CUBE_MAP:
diff --git a/src/mesa/main/texparam.c b/src/mesa/main/texparam.c
index 7af31a0cea697..1d7a89269c682 100644
--- a/src/mesa/main/texparam.c
+++ b/src/mesa/main/texparam.c
@@ -81,7 +81,7 @@ validate_texture_wrap_mode(struct gl_context * ctx, GLenum target, GLenum wrap)
       break;
 
    case GL_CLAMP_TO_BORDER:
-      supported = ctx->API != API_OPENGLES
+      supported = !_mesa_is_gles1(ctx)
          && (target != GL_TEXTURE_EXTERNAL_OES);
       break;
 
@@ -450,7 +450,7 @@ set_tex_parameteri(struct gl_context *ctx,
       return GL_TRUE;
 
    case GL_GENERATE_MIPMAP_SGIS:
-      if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
+      if (!_mesa_is_desktop_gl_compat(ctx) && !_mesa_is_gles1(ctx))
          goto invalid_pname;
 
       if (params[0] && texObj->Target == GL_TEXTURE_EXTERNAL_OES)
@@ -547,7 +547,7 @@ set_tex_parameteri(struct gl_context *ctx,
       goto invalid_pname;
 
    case GL_TEXTURE_CROP_RECT_OES:
-      if (ctx->API != API_OPENGLES || !ctx->Extensions.OES_draw_texture)
+      if (!_mesa_is_gles1(ctx) || !ctx->Extensions.OES_draw_texture)
          goto invalid_pname;
 
       texObj->CropRect[0] = params[0];
@@ -2352,7 +2352,7 @@ get_tex_parameterfv(struct gl_context *ctx,
          *params = obj->Sampler.Attrib.MaxAnisotropy;
          break;
       case GL_GENERATE_MIPMAP_SGIS:
-         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_pname;
 
 	 *params = (GLfloat) obj->Attrib.GenerateMipmap;
@@ -2390,7 +2390,7 @@ get_tex_parameterfv(struct gl_context *ctx,
          *params = obj->Sampler.Attrib.LodBias;
          break;
       case GL_TEXTURE_CROP_RECT_OES:
-         if (ctx->API != API_OPENGLES || !ctx->Extensions.OES_draw_texture)
+         if (!_mesa_is_gles1(ctx) || !ctx->Extensions.OES_draw_texture)
             goto invalid_pname;
 
          params[0] = (GLfloat) obj->CropRect[0];
@@ -2632,7 +2632,7 @@ get_tex_parameteriv(struct gl_context *ctx,
          *params = LCLAMPF(obj->Sampler.Attrib.MaxAnisotropy, INT32_MIN, INT32_MAX);
          break;
       case GL_GENERATE_MIPMAP_SGIS:
-         if (!_mesa_is_desktop_gl_compat(ctx) && ctx->API != API_OPENGLES)
+         if (!_mesa_is_desktop_gl_compat(ctx) && !_mesa_is_gles1(ctx))
             goto invalid_pname;
 
 	 *params = (GLint) obj->Attrib.GenerateMipmap;
@@ -2677,7 +2677,7 @@ get_tex_parameteriv(struct gl_context *ctx,
          *params = LCLAMPF(obj->Sampler.Attrib.LodBias, INT32_MIN, INT32_MAX);
          break;
       case GL_TEXTURE_CROP_RECT_OES:
-         if (ctx->API != API_OPENGLES || !ctx->Extensions.OES_draw_texture)
+         if (!_mesa_is_gles1(ctx) || !ctx->Extensions.OES_draw_texture)
             goto invalid_pname;
 
          params[0] = obj->CropRect[0];
diff --git a/src/mesa/main/varray.c b/src/mesa/main/varray.c
index 22aeaa1c6bbd9..0e44b62f5ebd7 100644
--- a/src/mesa/main/varray.c
+++ b/src/mesa/main/varray.c
@@ -1801,7 +1801,7 @@ _mesa_PointSizePointerOES(GLenum type, GLsizei stride, const GLvoid *ptr)
    GET_CURRENT_CONTEXT(ctx);
 
    GLenum format = GL_RGBA;
-   if (ctx->API != API_OPENGLES) {
+   if (!_mesa_is_gles1(ctx)) {
       _mesa_error(ctx, GL_INVALID_OPERATION,
                   "glPointSizePointer(ES 1.x only)");
       return;
-- 
GitLab


From e068b7be22195e4db706f4433752c8562bb4cb0b Mon Sep 17 00:00:00 2001
From: volodymyr <volodymyr.obozhyn@globallogic.com>
Date: Tue, 21 Mar 2023 21:29:11 +0200
Subject: [PATCH 3/6] ctx->API != API_OPENGLES2 --> \!_mesa_is_gles2(ctx)

replaces direct API checks with _mesa_is_...() checks

Closes: https://gitlab.freedesktop.org/mesa/mesa/-/issues/8340

Signed-off-by: Volodymyr Obohzyn volodymyr.obozhyn@globallogic.com
---
 src/mesa/main/fbobject.c         | 2 +-
 src/mesa/state_tracker/st_util.h | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/mesa/main/fbobject.c b/src/mesa/main/fbobject.c
index 325ee366871c4..06c99f37cb7ce 100644
--- a/src/mesa/main/fbobject.c
+++ b/src/mesa/main/fbobject.c
@@ -1491,7 +1491,7 @@ _mesa_test_framebuffer_completeness(struct gl_context *ctx,
                return;
             }
             /* check that all color buffers are the same format */
-            if (ctx->API != API_OPENGLES2 && intFormat != GL_NONE && f != intFormat) {
+            if (!_mesa_is_gles2(ctx) && intFormat != GL_NONE && f != intFormat) {
                fb->_Status = GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT;
                fbo_incomplete(ctx, "format mismatch", -1);
                return;
diff --git a/src/mesa/state_tracker/st_util.h b/src/mesa/state_tracker/st_util.h
index 48d2d92f69597..b57275a5672d1 100644
--- a/src/mesa/state_tracker/st_util.h
+++ b/src/mesa/state_tracker/st_util.h
@@ -85,7 +85,7 @@ st_point_size_per_vertex(struct gl_context *ctx)
             return true;
          }
       }
-      else if (ctx->API != API_OPENGLES2) {
+      else if (!_mesa_is_gles2(ctx)) {
          /* PointSizeEnabled is always set in ES2 contexts */
          return ctx->VertexProgram.PointSizeEnabled;
       }
-- 
GitLab


From 9f5161ad24e48f1f346e85302136257570008fea Mon Sep 17 00:00:00 2001
From: volodymyr <volodymyr.obozhyn@globallogic.com>
Date: Tue, 21 Mar 2023 21:39:02 +0200
Subject: [PATCH 4/6] ctx->API != API_OPENGL_CORE -->
 \!_mesa_is_desktop_gl_core(ctx)

replaces direct API checks with _mesa_is_...() checks

Closes: https://gitlab.freedesktop.org/mesa/mesa/-/issues/8340

Signed-off-by: Volodymyr Obohzyn volodymyr.obozhyn@globallogic.com
---
 src/mapi/glapi/gen/gl_marshal.py |  2 +-
 src/mesa/main/enable.c           |  4 +--
 src/mesa/main/fbobject.c         |  2 +-
 src/mesa/main/glformats.c        | 56 ++++++++++++++++----------------
 src/mesa/main/glthread.c         |  2 +-
 src/mesa/main/glthread_varray.c  |  5 +--
 src/mesa/main/texparam.c         |  4 +--
 7 files changed, 38 insertions(+), 37 deletions(-)

diff --git a/src/mapi/glapi/gen/gl_marshal.py b/src/mapi/glapi/gen/gl_marshal.py
index 5f59f634a9cb2..a9fd907871d8c 100644
--- a/src/mapi/glapi/gen/gl_marshal.py
+++ b/src/mapi/glapi/gen/gl_marshal.py
@@ -34,7 +34,7 @@ header = """
 #include "bufferobj.h"
 #include "dispatch.h"
 
-#define COMPAT (ctx->API != API_OPENGL_CORE)
+#define COMPAT (!_mesa_is_desktop_gl_core(ctx))
 
 UNUSED static inline int safe_mul(int a, int b)
 {
diff --git a/src/mesa/main/enable.c b/src/mesa/main/enable.c
index ff9300ac3e82b..b37d43f4b2303 100644
--- a/src/mesa/main/enable.c
+++ b/src/mesa/main/enable.c
@@ -1087,7 +1087,7 @@ _mesa_set_enable(struct gl_context *ctx, GLenum cap, GLboolean state)
           * GLSL vertex shaders on desktop.
           */
          if (!_mesa_has_ARB_vertex_program(ctx) &&
-             ctx->API != API_OPENGL_CORE)
+             !_mesa_is_desktop_gl_core(ctx))
             goto invalid_enum_error;
          if (ctx->VertexProgram.PointSizeEnabled == state)
             return;
@@ -1861,7 +1861,7 @@ _mesa_IsEnabled( GLenum cap )
           * GLSL vertex shaders on desktop.
           */
          if (!_mesa_has_ARB_vertex_program(ctx) &&
-             ctx->API != API_OPENGL_CORE)
+             !_mesa_is_desktop_gl_core(ctx))
             goto invalid_enum_error;
          return ctx->VertexProgram.PointSizeEnabled;
       case GL_VERTEX_PROGRAM_TWO_SIDE_ARB:
diff --git a/src/mesa/main/fbobject.c b/src/mesa/main/fbobject.c
index 06c99f37cb7ce..3479ed6268156 100644
--- a/src/mesa/main/fbobject.c
+++ b/src/mesa/main/fbobject.c
@@ -4794,7 +4794,7 @@ get_framebuffer_attachment_parameter(struct gl_context *ctx,
    case GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE:
       if ((!_mesa_is_desktop_gl_compat(ctx) ||
            !ctx->Extensions.ARB_framebuffer_object)
-          && ctx->API != API_OPENGL_CORE
+          && !_mesa_is_desktop_gl_core(ctx)
           && !_mesa_is_gles3(ctx)) {
          goto invalid_pname_enum;
       }
diff --git a/src/mesa/main/glformats.c b/src/mesa/main/glformats.c
index 3a6f2474e0213..fffbeb2ea2a97 100644
--- a/src/mesa/main/glformats.c
+++ b/src/mesa/main/glformats.c
@@ -2225,14 +2225,14 @@ _mesa_base_tex_format(const struct gl_context *ctx, GLint internalFormat)
    case GL_ALPHA8:
    case GL_ALPHA12:
    case GL_ALPHA16:
-      return (ctx->API != API_OPENGL_CORE) ? GL_ALPHA : -1;
+      return (!_mesa_is_desktop_gl_core(ctx)) ? GL_ALPHA : -1;
    case 1:
    case GL_LUMINANCE:
    case GL_LUMINANCE4:
    case GL_LUMINANCE8:
    case GL_LUMINANCE12:
    case GL_LUMINANCE16:
-      return (ctx->API != API_OPENGL_CORE) ? GL_LUMINANCE : -1;
+      return (!_mesa_is_desktop_gl_core(ctx)) ? GL_LUMINANCE : -1;
    case 2:
    case GL_LUMINANCE_ALPHA:
    case GL_LUMINANCE4_ALPHA4:
@@ -2241,15 +2241,15 @@ _mesa_base_tex_format(const struct gl_context *ctx, GLint internalFormat)
    case GL_LUMINANCE12_ALPHA4:
    case GL_LUMINANCE12_ALPHA12:
    case GL_LUMINANCE16_ALPHA16:
-      return (ctx->API != API_OPENGL_CORE) ? GL_LUMINANCE_ALPHA : -1;
+      return (!_mesa_is_desktop_gl_core(ctx)) ? GL_LUMINANCE_ALPHA : -1;
    case GL_INTENSITY:
    case GL_INTENSITY4:
    case GL_INTENSITY8:
    case GL_INTENSITY12:
    case GL_INTENSITY16:
-      return (ctx->API != API_OPENGL_CORE) ? GL_INTENSITY : -1;
+      return (!_mesa_is_desktop_gl_core(ctx)) ? GL_INTENSITY : -1;
    case 3:
-      return (ctx->API != API_OPENGL_CORE) ? GL_RGB : -1;
+      return (!_mesa_is_desktop_gl_core(ctx)) ? GL_RGB : -1;
    case GL_RGB:
    case GL_R3_G3_B2:
    case GL_RGB4:
@@ -2260,7 +2260,7 @@ _mesa_base_tex_format(const struct gl_context *ctx, GLint internalFormat)
    case GL_RGB16:
       return GL_RGB;
    case 4:
-      return (ctx->API != API_OPENGL_CORE) ? GL_RGBA : -1;
+      return (!_mesa_is_desktop_gl_core(ctx)) ? GL_RGBA : -1;
    case GL_RGBA:
    case GL_RGBA2:
    case GL_RGBA4:
@@ -2327,13 +2327,13 @@ _mesa_base_tex_format(const struct gl_context *ctx, GLint internalFormat)
 
    switch (internalFormat) {
    case GL_COMPRESSED_ALPHA:
-      return (ctx->API != API_OPENGL_CORE) ? GL_ALPHA : -1;
+      return (!_mesa_is_desktop_gl_core(ctx)) ? GL_ALPHA : -1;
    case GL_COMPRESSED_LUMINANCE:
-      return (ctx->API != API_OPENGL_CORE) ? GL_LUMINANCE : -1;
+      return (!_mesa_is_desktop_gl_core(ctx)) ? GL_LUMINANCE : -1;
    case GL_COMPRESSED_LUMINANCE_ALPHA:
-      return (ctx->API != API_OPENGL_CORE) ? GL_LUMINANCE_ALPHA : -1;
+      return (!_mesa_is_desktop_gl_core(ctx)) ? GL_LUMINANCE_ALPHA : -1;
    case GL_COMPRESSED_INTENSITY:
-      return (ctx->API != API_OPENGL_CORE) ? GL_INTENSITY : -1;
+      return (!_mesa_is_desktop_gl_core(ctx)) ? GL_INTENSITY : -1;
    case GL_COMPRESSED_RGB:
       return GL_RGB;
    case GL_COMPRESSED_RGBA:
@@ -2363,34 +2363,34 @@ _mesa_base_tex_format(const struct gl_context *ctx, GLint internalFormat)
    if (_mesa_has_half_float_textures(ctx)) {
       switch (internalFormat) {
       case GL_ALPHA16F_ARB:
-         return (ctx->API != API_OPENGL_CORE) ? GL_ALPHA : -1;
+         return (!_mesa_is_desktop_gl_core(ctx)) ? GL_ALPHA : -1;
       case GL_RGBA16F_ARB:
          return GL_RGBA;
       case GL_RGB16F_ARB:
          return GL_RGB;
       case GL_INTENSITY16F_ARB:
-         return (ctx->API != API_OPENGL_CORE) ? GL_INTENSITY : -1;
+         return (!_mesa_is_desktop_gl_core(ctx)) ? GL_INTENSITY : -1;
       case GL_LUMINANCE16F_ARB:
-         return (ctx->API != API_OPENGL_CORE) ? GL_LUMINANCE : -1;
+         return (!_mesa_is_desktop_gl_core(ctx)) ? GL_LUMINANCE : -1;
       case GL_LUMINANCE_ALPHA16F_ARB:
-         return (ctx->API != API_OPENGL_CORE) ? GL_LUMINANCE_ALPHA : -1;
+         return (!_mesa_is_desktop_gl_core(ctx)) ? GL_LUMINANCE_ALPHA : -1;
       }
    }
 
    if (_mesa_has_float_textures(ctx)) {
       switch (internalFormat) {
       case GL_ALPHA32F_ARB:
-         return (ctx->API != API_OPENGL_CORE) ? GL_ALPHA : -1;
+         return (!_mesa_is_desktop_gl_core(ctx)) ? GL_ALPHA : -1;
       case GL_RGBA32F_ARB:
          return GL_RGBA;
       case GL_RGB32F_ARB:
          return GL_RGB;
       case GL_INTENSITY32F_ARB:
-         return (ctx->API != API_OPENGL_CORE) ? GL_INTENSITY : -1;
+         return (!_mesa_is_desktop_gl_core(ctx)) ? GL_INTENSITY : -1;
       case GL_LUMINANCE32F_ARB:
-         return (ctx->API != API_OPENGL_CORE) ? GL_LUMINANCE : -1;
+         return (!_mesa_is_desktop_gl_core(ctx)) ? GL_LUMINANCE : -1;
       case GL_LUMINANCE_ALPHA32F_ARB:
-         return (ctx->API != API_OPENGL_CORE) ? GL_LUMINANCE_ALPHA : -1;
+         return (!_mesa_is_desktop_gl_core(ctx)) ? GL_LUMINANCE_ALPHA : -1;
       }
    }
 
@@ -2415,19 +2415,19 @@ _mesa_base_tex_format(const struct gl_context *ctx, GLint internalFormat)
       case GL_ALPHA_SNORM:
       case GL_ALPHA8_SNORM:
       case GL_ALPHA16_SNORM:
-         return (ctx->API != API_OPENGL_CORE) ? GL_ALPHA : -1;
+         return (!_mesa_is_desktop_gl_core(ctx)) ? GL_ALPHA : -1;
       case GL_LUMINANCE_SNORM:
       case GL_LUMINANCE8_SNORM:
       case GL_LUMINANCE16_SNORM:
-         return (ctx->API != API_OPENGL_CORE) ? GL_LUMINANCE : -1;
+         return (!_mesa_is_desktop_gl_core(ctx)) ? GL_LUMINANCE : -1;
       case GL_LUMINANCE_ALPHA_SNORM:
       case GL_LUMINANCE8_ALPHA8_SNORM:
       case GL_LUMINANCE16_ALPHA16_SNORM:
-         return (ctx->API != API_OPENGL_CORE) ? GL_LUMINANCE_ALPHA : -1;
+         return (!_mesa_is_desktop_gl_core(ctx)) ? GL_LUMINANCE_ALPHA : -1;
       case GL_INTENSITY_SNORM:
       case GL_INTENSITY8_SNORM:
       case GL_INTENSITY16_SNORM:
-         return (ctx->API != API_OPENGL_CORE) ? GL_INTENSITY : -1;
+         return (!_mesa_is_desktop_gl_core(ctx)) ? GL_INTENSITY : -1;
       default:
          ; /* fallthrough */
       }
@@ -2446,11 +2446,11 @@ _mesa_base_tex_format(const struct gl_context *ctx, GLint internalFormat)
       case GL_SLUMINANCE_ALPHA_EXT:
       case GL_SLUMINANCE8_ALPHA8_EXT:
       case GL_COMPRESSED_SLUMINANCE_ALPHA_EXT:
-         return (ctx->API != API_OPENGL_CORE) ? GL_LUMINANCE_ALPHA : -1;
+         return (!_mesa_is_desktop_gl_core(ctx)) ? GL_LUMINANCE_ALPHA : -1;
       case GL_SLUMINANCE_EXT:
       case GL_SLUMINANCE8_EXT:
       case GL_COMPRESSED_SLUMINANCE_EXT:
-         return (ctx->API != API_OPENGL_CORE) ? GL_LUMINANCE : -1;
+         return (!_mesa_is_desktop_gl_core(ctx)) ? GL_LUMINANCE : -1;
       default:
          ; /* fallthrough */
       }
@@ -2508,28 +2508,28 @@ _mesa_base_tex_format(const struct gl_context *ctx, GLint internalFormat)
       case GL_ALPHA8I_EXT:
       case GL_ALPHA16I_EXT:
       case GL_ALPHA32I_EXT:
-         return (ctx->API != API_OPENGL_CORE) ? GL_ALPHA : -1;
+         return (!_mesa_is_desktop_gl_core(ctx)) ? GL_ALPHA : -1;
       case GL_INTENSITY8UI_EXT:
       case GL_INTENSITY16UI_EXT:
       case GL_INTENSITY32UI_EXT:
       case GL_INTENSITY8I_EXT:
       case GL_INTENSITY16I_EXT:
       case GL_INTENSITY32I_EXT:
-         return (ctx->API != API_OPENGL_CORE) ? GL_INTENSITY : -1;
+         return (!_mesa_is_desktop_gl_core(ctx)) ? GL_INTENSITY : -1;
       case GL_LUMINANCE8UI_EXT:
       case GL_LUMINANCE16UI_EXT:
       case GL_LUMINANCE32UI_EXT:
       case GL_LUMINANCE8I_EXT:
       case GL_LUMINANCE16I_EXT:
       case GL_LUMINANCE32I_EXT:
-         return (ctx->API != API_OPENGL_CORE) ? GL_LUMINANCE : -1;
+         return (!_mesa_is_desktop_gl_core(ctx)) ? GL_LUMINANCE : -1;
       case GL_LUMINANCE_ALPHA8UI_EXT:
       case GL_LUMINANCE_ALPHA16UI_EXT:
       case GL_LUMINANCE_ALPHA32UI_EXT:
       case GL_LUMINANCE_ALPHA8I_EXT:
       case GL_LUMINANCE_ALPHA16I_EXT:
       case GL_LUMINANCE_ALPHA32I_EXT:
-         return (ctx->API != API_OPENGL_CORE) ? GL_LUMINANCE_ALPHA : -1;
+         return (!_mesa_is_desktop_gl_core(ctx)) ? GL_LUMINANCE_ALPHA : -1;
       default:
          ; /* fallthrough */
       }
diff --git a/src/mesa/main/glthread.c b/src/mesa/main/glthread.c
index fb153af5ee94d..68b6597c8caa8 100644
--- a/src/mesa/main/glthread.c
+++ b/src/mesa/main/glthread.c
@@ -297,7 +297,7 @@ void _mesa_glthread_disable(struct gl_context *ctx)
    /* Unbind VBOs in all VAOs that glthread bound for non-VBO vertex uploads
     * to restore original states.
     */
-   if (ctx->API != API_OPENGL_CORE)
+   if (!_mesa_is_desktop_gl_core(ctx))
       _mesa_glthread_unbind_uploaded_vbos(ctx);
 }
 
diff --git a/src/mesa/main/glthread_varray.c b/src/mesa/main/glthread_varray.c
index 98b3027869eb2..b577c0a2c0898 100644
--- a/src/mesa/main/glthread_varray.c
+++ b/src/mesa/main/glthread_varray.c
@@ -32,6 +32,7 @@
 #include "main/hash.h"
 #include "main/dispatch.h"
 #include "main/varray.h"
+#include "main/context.h"
 
 static unsigned
 element_size(union gl_vertex_format_user format)
@@ -746,7 +747,7 @@ unbind_uploaded_vbos(void *_vao, void *_ctx)
    struct gl_context *ctx = _ctx;
    struct gl_vertex_array_object *vao = _vao;
 
-   assert(ctx->API != API_OPENGL_CORE);
+   assert(!_mesa_is_desktop_gl_core(ctx));
 
    for (unsigned i = 0; i < ARRAY_SIZE(vao->BufferBinding); i++) {
       if (vao->BufferBinding[i].BufferObj &&
@@ -767,7 +768,7 @@ unbind_uploaded_vbos(void *_vao, void *_ctx)
 void
 _mesa_glthread_unbind_uploaded_vbos(struct gl_context *ctx)
 {
-   assert(ctx->API != API_OPENGL_CORE);
+   assert(!_mesa_is_desktop_gl_core(ctx));
 
    /* Iterate over all VAOs. */
    _mesa_HashWalk(ctx->Array.Objects, unbind_uploaded_vbos, ctx);
diff --git a/src/mesa/main/texparam.c b/src/mesa/main/texparam.c
index 1d7a89269c682..4480cf6bd3bfb 100644
--- a/src/mesa/main/texparam.c
+++ b/src/mesa/main/texparam.c
@@ -2483,7 +2483,7 @@ get_tex_parameterfv(struct gl_context *ctx,
          break;
 
       case GL_TEXTURE_TARGET:
-         if (ctx->API != API_OPENGL_CORE)
+         if (!_mesa_is_desktop_gl_core(ctx))
             goto invalid_pname;
          *params = ENUM_TO_FLOAT(obj->Target);
          break;
@@ -2768,7 +2768,7 @@ get_tex_parameteriv(struct gl_context *ctx,
          break;
 
       case GL_TEXTURE_TARGET:
-         if (ctx->API != API_OPENGL_CORE)
+         if (!_mesa_is_desktop_gl_core(ctx))
             goto invalid_pname;
          *params = (GLint) obj->Target;
          break;
-- 
GitLab


From 5259e5bb94b557d8424cd16beddab20cfabba522 Mon Sep 17 00:00:00 2001
From: volodymyr <volodymyr.obozhyn@globallogic.com>
Date: Tue, 21 Mar 2023 22:08:36 +0200
Subject: [PATCH 5/6] redefine COMPAT macro with expected function

changes _mesa_is_desktop_gl_core(ctx) to _mesa_is_desktop_gl_compat(ctx) (ctx->API != API_OPENGL_CORE to ctx->API == API_OPENGL_COMPAT)

https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/22042#note_1832136

Signed-off-by: Volodymyr Obohzyn volodymyr.obozhyn@globallogic.com
---
 src/mapi/glapi/gen/gl_marshal.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/mapi/glapi/gen/gl_marshal.py b/src/mapi/glapi/gen/gl_marshal.py
index a9fd907871d8c..7c83bdb0e1033 100644
--- a/src/mapi/glapi/gen/gl_marshal.py
+++ b/src/mapi/glapi/gen/gl_marshal.py
@@ -34,7 +34,7 @@ header = """
 #include "bufferobj.h"
 #include "dispatch.h"
 
-#define COMPAT (!_mesa_is_desktop_gl_core(ctx))
+#define COMPAT (_mesa_is_desktop_gl_compat(ctx))
 
 UNUSED static inline int safe_mul(int a, int b)
 {
-- 
GitLab

