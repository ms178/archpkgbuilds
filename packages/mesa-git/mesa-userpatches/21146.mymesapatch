From a66238718e2432c17e5ed29ad1438d2ababe46d6 Mon Sep 17 00:00:00 2001
From: Illia Abernikhin <illia.abernikhin@globallogic.com>
Date: Mon, 6 Feb 2023 18:36:19 +0200
Subject: [PATCH] util: Extend vk_enum_to_str with bitmasks vk_enum_to_str only
 generates literals for enums with type: @type="enum", but many enums have
 type: @type="bitmask" and were not taken into account here.

Main changes:
Empty enums are now always skipped
For bitmasks skipped *MAX_ENUM value

Signed-off-by: Illia Abernikhin <illia.abernikhin@globallogic.com>

Closes: https://gitlab.freedesktop.org/mesa/mesa/-/issues/8173
---
 src/vulkan/util/gen_enum_to_str.py | 56 +++++++++++++++++++++++++++---
 1 file changed, 52 insertions(+), 4 deletions(-)

diff --git a/src/vulkan/util/gen_enum_to_str.py b/src/vulkan/util/gen_enum_to_str.py
index 8257f106ffca..da88da23781a 100644
--- a/src/vulkan/util/gen_enum_to_str.py
+++ b/src/vulkan/util/gen_enum_to_str.py
@@ -88,6 +88,29 @@ C_TEMPLATE = Template(textwrap.dedent(u"""\
       % endif
     %endfor
 
+    % for enum in bitmasks:
+
+      % if enum.guard:
+#ifdef ${enum.guard}
+      % endif
+    const char *
+    vk_${enum.name[2:]}_to_str(${enum.name} input)
+    {
+        switch((int64_t)input) {
+    % for v in sorted(enum.values.keys()):
+        case ${v}:
+            return "${enum.values[v]}";
+    % endfor
+        default:
+            return "Unknown ${enum.name} value.";
+        }
+    }
+
+      % if enum.guard:
+#endif
+      % endif
+    %endfor
+
     size_t vk_structure_type_size(const struct VkBaseInStructure *item)
     {
         switch((int)item->sType) {
@@ -148,6 +171,16 @@ H_TEMPLATE = Template(textwrap.dedent(u"""\
       % endif
     % endfor
 
+    % for enum in bitmasks:
+      % if enum.guard:
+#ifdef ${enum.guard}
+      % endif
+    const char * vk_${enum.name[2:]}_to_str(${enum.name} input);
+      % if enum.guard:
+#endif
+      % endif
+    % endfor
+
     size_t vk_structure_type_size(const struct VkBaseInStructure *item);
 
     const char * vk_ObjectType_to_ObjectName(VkObjectType type);
@@ -247,6 +280,8 @@ def CamelCase_to_SHOUT_CASE(s):
    return (s[:1] + re.sub(r'(?<![A-Z])([A-Z])', r'_\1', s[1:])).upper()
 
 def compute_max_enum_name(s):
+    if s == "VkSwapchainImageUsageFlagBitsANDROID":
+        return "VK_SWAPCHAIN_IMAGE_USAGE_FLAG_BITS_MAX_ENUM"
     max_enum_name = CamelCase_to_SHOUT_CASE(s)
     last_prefix = max_enum_name.rsplit('_', 1)[-1]
     # Those special prefixes need to be always at the end
@@ -373,15 +408,25 @@ def parse_xml(enum_factory, ext_factory, struct_factory, bitmask_factory,
 
     for enum_type in xml.findall('./enums[@type="enum"]'):
         enum = enum_factory(enum_type.attrib['name'])
-        for value in enum_type.findall('./enum'):
-            enum.add_value_from_xml(value)
+        values = enum_type.findall('./enum')
+        # remove empty enums
+        if not values:
+            enum_factory.registry.pop(enum_type.attrib['name'])
+        else:
+            for value in values:
+                enum.add_value_from_xml(value)
 
     # For bitmask we only add the Enum selected for convenience.
     for enum_type in xml.findall('./enums[@type="bitmask"]'):
         bitwidth = int(enum_type.attrib.get('bitwidth', 32))
         enum = bitmask_factory(enum_type.attrib['name'], bitwidth=bitwidth)
-        for value in enum_type.findall('./enum'):
-            enum.add_value_from_xml(value)
+        values = enum_type.findall('./enum')
+        # remove empty bitmask
+        if not values:
+            bitmask_factory.registry.pop(enum_type.attrib['name'])
+        else:
+            for value in values:
+                enum.add_value_from_xml(value)
 
     for value in xml.findall('./feature/require/enum[@extends]'):
         extends = value.attrib['extends']
@@ -430,6 +475,9 @@ def parse_xml(enum_factory, ext_factory, struct_factory, bitmask_factory,
                 enum = enum_factory.get(value.attrib['name'])
                 if enum is not None:
                     enum.set_guard(define)
+                enum = bitmask_factory.get(value.attrib['name'])
+                if enum is not None:
+                    enum.set_guard(define)
 
     obj_types = obj_type_factory("VkObjectType")
     for object_type in xml.findall('./types/type[@category="handle"]'):
-- 
GitLab

