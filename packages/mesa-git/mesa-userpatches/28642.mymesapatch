From 0641d088715f7949cc06c28cea6708aadf4a5595 Mon Sep 17 00:00:00 2001
From: Paulo Zanoni <paulo.r.zanoni@intel.com>
Date: Thu, 28 Mar 2024 17:08:02 -0700
Subject: [PATCH 1/2] vulkan: change STACK_ARRAY to use alloca()

This should save us significant stack space.

Without this patch, no matter what size is passed to STACK_ARRAY,
we'll always define _stack_##name[8]. If size is less than 8, then
we'll waste some space with unused elements. If size is more than 8,
then we'll waste all 8 elements with a completely unused array,
because we'll declare the array anyway but use malloc().

In practice I see the vast vast majority of STACK_ARRAY() used for
games in Anv is of size 1, so most of the times we're wasting 7
elements of space. The main culprit I see for Anv is
vk_drm_syncobj_wait_many(), which always defines 2 STACK_ARRAYs,
leading to 84 extra bytes per call.

So this commit replaces the fixed-size array - that may or may not be
used - with an array (from either alloca() or malloc()) that always
has the correct size. No wasted space, with the only overhead being a
new boolean that's used to check if we need to free() the array.

Signed-off-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
---
 src/vulkan/util/vk_util.h | 10 ++++++----
 1 file changed, 6 insertions(+), 4 deletions(-)

diff --git a/src/vulkan/util/vk_util.h b/src/vulkan/util/vk_util.h
index d29db67a4d008..cf5a26bc7827f 100644
--- a/src/vulkan/util/vk_util.h
+++ b/src/vulkan/util/vk_util.h
@@ -26,6 +26,7 @@
 #include "util/bitscan.h"
 #include "util/macros.h"
 #include "compiler/shader_enums.h"
+#include "c99_alloca.h"
 #include <stdlib.h>
 #include <string.h>
 
@@ -359,12 +360,13 @@ vk_spec_info_to_nir_spirv(const VkSpecializationInfo *spec_info,
  * may work for you.
  */
 #define STACK_ARRAY(type, name, size) \
-   type _stack_##name[STACK_ARRAY_SIZE]; \
-   type *const name = \
-     ((size) <= STACK_ARRAY_SIZE ? _stack_##name : (type *)malloc((size) * sizeof(type)))
+   const bool _##name##_stack_array_on_stack = (size) <= STACK_ARRAY_SIZE; \
+   type *const name = _##name##_stack_array_on_stack ? \
+                        (type *)alloca((size) * sizeof(type)) : \
+                        (type *)malloc((size) * sizeof(type))
 
 #define STACK_ARRAY_FINISH(name) \
-   if (name != _stack_##name) free(name)
+   if (!_##name##_stack_array_on_stack) free(name)
 
 static inline uint8_t
 vk_index_type_to_bytes(enum VkIndexType type)
-- 
GitLab


From 74302d08a0175b624da2710c26c274185dd6c550 Mon Sep 17 00:00:00 2001
From: Paulo Zanoni <paulo.r.zanoni@intel.com>
Date: Tue, 2 Apr 2024 16:51:40 -0700
Subject: [PATCH 2/2] vulkan: change STACK_ARRAY's threshold to 1024 bytes
 instead of 8 elements

The threshold is what helps us decide between using the stack or the
heap.  It doesn't really make a lot of sense for us to make our
decision of stack vs heap based on the number of elements because that
doesn't take into consideration sizeof(type). What we really want here
is to avoid a stack overflow, so use the actual size of the array in
bytes to make the decision. That means, of course, the number of
elements will be different based on sizeof(type) and not fixed to 8.

The Anv TR-TT code path uses a bunch of STACK_ARRAYs with really small
sizeof(type), so this commit allows us to choose the stack more often.

On Linux the stack is generally 8MB in size, so 1k sounds like a
reasonable threshold, and it's also used by other projects that have
the same kind of data structure as STACK_ARRAY.

Signed-off-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
---
 src/vulkan/util/vk_util.h | 10 ++++++----
 1 file changed, 6 insertions(+), 4 deletions(-)

diff --git a/src/vulkan/util/vk_util.h b/src/vulkan/util/vk_util.h
index cf5a26bc7827f..26978dbe1e8d9 100644
--- a/src/vulkan/util/vk_util.h
+++ b/src/vulkan/util/vk_util.h
@@ -351,7 +351,7 @@ struct nir_spirv_specialization*
 vk_spec_info_to_nir_spirv(const VkSpecializationInfo *spec_info,
                           uint32_t *out_num_spec_entries);
 
-#define STACK_ARRAY_SIZE 8
+#define STACK_ARRAY_SIZE_B 1024
 
 /* Sometimes gcc may claim -Wmaybe-uninitialized for the stack array in some
  * places it can't verify that when size is 0 nobody down the call chain reads
@@ -360,10 +360,12 @@ vk_spec_info_to_nir_spirv(const VkSpecializationInfo *spec_info,
  * may work for you.
  */
 #define STACK_ARRAY(type, name, size) \
-   const bool _##name##_stack_array_on_stack = (size) <= STACK_ARRAY_SIZE; \
+   const size_t _##name##_alloc_size = (size) * sizeof(type); \
+   const bool _##name##_stack_array_on_stack = \
+      _##name##_alloc_size <= STACK_ARRAY_SIZE_B; \
    type *const name = _##name##_stack_array_on_stack ? \
-                        (type *)alloca((size) * sizeof(type)) : \
-                        (type *)malloc((size) * sizeof(type))
+                        (type *)alloca(_##name##_alloc_size) : \
+                        (type *)malloc(_##name##_alloc_size)
 
 #define STACK_ARRAY_FINISH(name) \
    if (!_##name##_stack_array_on_stack) free(name)
-- 
GitLab

