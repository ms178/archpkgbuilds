From 8215818f7adf28380fea8b1db155f64059f6e8c3 Mon Sep 17 00:00:00 2001
From: Georg Lehmann <dadschoorse@gmail.com>
Date: Wed, 2 Feb 2022 21:26:16 +0100
Subject: [PATCH 1/5] nir: Add nir_op_fdot_2x16_fadd.

Signed-off-by: Georg Lehmann <dadschoorse@gmail.com>
---
 src/compiler/nir/nir.h          |  2 +-
 src/compiler/nir/nir_opcodes.py | 15 +++++++++++++++
 2 files changed, 16 insertions(+), 1 deletion(-)

diff --git a/src/compiler/nir/nir.h b/src/compiler/nir/nir.h
index 9cc5efb3317d..e697ec69d572 100644
--- a/src/compiler/nir/nir.h
+++ b/src/compiler/nir/nir.h
@@ -3575,7 +3575,7 @@ typedef struct nir_shader_compiler_options {
    /** Backend supports sudot_4x8 opcodes. */
    bool has_sudot_4x8;
 
-   /** Backend supports sdot_2x16 and udot_2x16 opcodes. */
+   /** Backend supports sdot_2x16, udot_2x16 and fdot_2x16_fadd opcodes. */
    bool has_dot_2x16;
 
    /* Whether to generate only scoped_barrier intrinsics instead of the set of
diff --git a/src/compiler/nir/nir_opcodes.py b/src/compiler/nir/nir_opcodes.py
index dded4a6a6355..6a4a093e4dd9 100644
--- a/src/compiler/nir/nir_opcodes.py
+++ b/src/compiler/nir/nir_opcodes.py
@@ -1518,3 +1518,18 @@ opcode("udot_2x16_uadd_sat", 0, tint32, [0, 0, 0], [tuint32, tuint32, tint32],
 
    dst = tmp >= UINT32_MAX ? UINT32_MAX : tmp;
 """)
+
+# src0 and src1 are f16vec2 packed in an int32, and src2 is a float32_t.
+# float16_t values are extracted and converted to float32_t, and a
+# dot-product is performed on the resulting vectors. src2 is added to
+# the result of the dot-product. 16bit denorms are not flushed and
+# the instruction always uses round-to-nearest-even.
+opcode("fdot_2x16_fadd", 0, tfloat32, [0, 0, 0], [tuint32, tuint32, tfloat32],
+       False, _2src_commutative, """
+   const float v0x = _mesa_half_to_float(src0      );
+   const float v0y = _mesa_half_to_float(src0 >> 16);
+   const float v1x = _mesa_half_to_float(src1      );
+   const float v1y = _mesa_half_to_float(src1 >> 16);
+
+   dst = (v0x * v1x) + (v0y * v1y) + src2;
+""")
-- 
GitLab


From 405fc857b1e3f89904ce508b4396d1bca563500f Mon Sep 17 00:00:00 2001
From: Georg Lehmann <dadschoorse@gmail.com>
Date: Wed, 2 Feb 2022 21:26:36 +0100
Subject: [PATCH 2/5] aco: Implement nir_op_fdot_2x16_fadd.

Signed-off-by: Georg Lehmann <dadschoorse@gmail.com>
---
 .../compiler/aco_instruction_selection.cpp    | 22 +++++++++++--------
 .../aco_instruction_selection_setup.cpp       |  1 +
 src/amd/compiler/aco_opcodes.py               |  1 +
 3 files changed, 15 insertions(+), 9 deletions(-)

diff --git a/src/amd/compiler/aco_instruction_selection.cpp b/src/amd/compiler/aco_instruction_selection.cpp
index 22536dc267f0..a80c77c43b7f 100644
--- a/src/amd/compiler/aco_instruction_selection.cpp
+++ b/src/amd/compiler/aco_instruction_selection.cpp
@@ -983,7 +983,7 @@ emit_vop3p_instruction(isel_context* ctx, nir_alu_instr* instr, aco_opcode op, T
 }
 
 void
-emit_idot_instruction(isel_context* ctx, nir_alu_instr* instr, aco_opcode op, Temp dst, bool clamp)
+emit_dot_instruction(isel_context* ctx, nir_alu_instr* instr, aco_opcode op, Temp dst, bool clamp)
 {
    Temp src[3] = {Temp(0, v1), Temp(0, v1), Temp(0, v1)};
    bool has_sgpr = false;
@@ -2421,35 +2421,39 @@ visit_alu_instr(isel_context* ctx, nir_alu_instr* instr)
       break;
    }
    case nir_op_sdot_4x8_iadd: {
-      emit_idot_instruction(ctx, instr, aco_opcode::v_dot4_i32_i8, dst, false);
+      emit_dot_instruction(ctx, instr, aco_opcode::v_dot4_i32_i8, dst, false);
       break;
    }
    case nir_op_sdot_4x8_iadd_sat: {
-      emit_idot_instruction(ctx, instr, aco_opcode::v_dot4_i32_i8, dst, true);
+      emit_dot_instruction(ctx, instr, aco_opcode::v_dot4_i32_i8, dst, true);
       break;
    }
    case nir_op_udot_4x8_uadd: {
-      emit_idot_instruction(ctx, instr, aco_opcode::v_dot4_u32_u8, dst, false);
+      emit_dot_instruction(ctx, instr, aco_opcode::v_dot4_u32_u8, dst, false);
       break;
    }
    case nir_op_udot_4x8_uadd_sat: {
-      emit_idot_instruction(ctx, instr, aco_opcode::v_dot4_u32_u8, dst, true);
+      emit_dot_instruction(ctx, instr, aco_opcode::v_dot4_u32_u8, dst, true);
       break;
    }
    case nir_op_sdot_2x16_iadd: {
-      emit_idot_instruction(ctx, instr, aco_opcode::v_dot2_i32_i16, dst, false);
+      emit_dot_instruction(ctx, instr, aco_opcode::v_dot2_i32_i16, dst, false);
       break;
    }
    case nir_op_sdot_2x16_iadd_sat: {
-      emit_idot_instruction(ctx, instr, aco_opcode::v_dot2_i32_i16, dst, true);
+      emit_dot_instruction(ctx, instr, aco_opcode::v_dot2_i32_i16, dst, true);
       break;
    }
    case nir_op_udot_2x16_uadd: {
-      emit_idot_instruction(ctx, instr, aco_opcode::v_dot2_u32_u16, dst, false);
+      emit_dot_instruction(ctx, instr, aco_opcode::v_dot2_u32_u16, dst, false);
       break;
    }
    case nir_op_udot_2x16_uadd_sat: {
-      emit_idot_instruction(ctx, instr, aco_opcode::v_dot2_u32_u16, dst, true);
+      emit_dot_instruction(ctx, instr, aco_opcode::v_dot2_u32_u16, dst, true);
+      break;
+   }
+   case nir_op_fdot_2x16_fadd: {
+      emit_dot_instruction(ctx, instr, aco_opcode::v_dot2_f32_f16, dst, false);
       break;
    }
    case nir_op_cube_face_coord_amd: {
diff --git a/src/amd/compiler/aco_instruction_selection_setup.cpp b/src/amd/compiler/aco_instruction_selection_setup.cpp
index 719c5b8b9785..a8dbb9b8db53 100644
--- a/src/amd/compiler/aco_instruction_selection_setup.cpp
+++ b/src/amd/compiler/aco_instruction_selection_setup.cpp
@@ -534,6 +534,7 @@ init_context(isel_context* ctx, nir_shader* shader)
                case nir_op_cube_face_index_amd:
                case nir_op_cube_face_coord_amd:
                case nir_op_sad_u8x4:
+               case nir_op_fdot_2x16_fadd:
                case nir_op_udot_4x8_uadd:
                case nir_op_sdot_4x8_iadd:
                case nir_op_udot_4x8_uadd_sat:
diff --git a/src/amd/compiler/aco_opcodes.py b/src/amd/compiler/aco_opcodes.py
index 820e09b1989e..a6dbb064f8ca 100644
--- a/src/amd/compiler/aco_opcodes.py
+++ b/src/amd/compiler/aco_opcodes.py
@@ -969,6 +969,7 @@ VOPP = {
 # (gfx6, gfx7, gfx8, gfx9, gfx10, name) = (-1, -1, -1, code, code, name)
 for (code, name, modifiers) in VOPP:
    opcode(name, -1, code, code, Format.VOP3P, InstrClass.Valu32, modifiers, modifiers)
+opcode("v_dot2_f32_f16", -1, 0x23, 0x13, Format.VOP3P, InstrClass.Valu32)
 opcode("v_dot2_i32_i16", -1, 0x26, 0x14, Format.VOP3P, InstrClass.Valu32)
 opcode("v_dot2_u32_u16", -1, 0x27, 0x15, Format.VOP3P, InstrClass.Valu32)
 opcode("v_dot4_i32_i8", -1, 0x28, 0x16, Format.VOP3P, InstrClass.Valu32)
-- 
GitLab


From ee2cea39913299463bb5a3546f71954818c05230 Mon Sep 17 00:00:00 2001
From: Georg Lehmann <dadschoorse@gmail.com>
Date: Wed, 2 Feb 2022 22:32:02 +0100
Subject: [PATCH 3/5] aco: Optimize v_dot2_f32_f16 to v_dot2c_f32_f16.

Signed-off-by: Georg Lehmann <dadschoorse@gmail.com>
---
 src/amd/compiler/aco_opcodes.py              | 1 +
 src/amd/compiler/aco_register_allocation.cpp | 5 ++++-
 2 files changed, 5 insertions(+), 1 deletion(-)

diff --git a/src/amd/compiler/aco_opcodes.py b/src/amd/compiler/aco_opcodes.py
index a6dbb064f8ca..04ce81f04e19 100644
--- a/src/amd/compiler/aco_opcodes.py
+++ b/src/amd/compiler/aco_opcodes.py
@@ -674,6 +674,7 @@ VOP2 = {
   # GFX6, GFX7, GFX8, GFX9, GFX10, name, input/output modifiers
    (0x01, 0x01,   -1,   -1,   -1, "v_readlane_b32", False),
    (0x02, 0x02,   -1,   -1,   -1, "v_writelane_b32", False),
+   (  -1,   -1,   -1, 0x37, 0x02, "v_dot2c_f32_f16", False),
    (0x03, 0x03, 0x01, 0x01, 0x03, "v_add_f32", True),
    (0x04, 0x04, 0x02, 0x02, 0x04, "v_sub_f32", True),
    (0x05, 0x05, 0x03, 0x03, 0x05, "v_subrev_f32", True),
diff --git a/src/amd/compiler/aco_register_allocation.cpp b/src/amd/compiler/aco_register_allocation.cpp
index c1cc2d917c58..8c2bba745d19 100644
--- a/src/amd/compiler/aco_register_allocation.cpp
+++ b/src/amd/compiler/aco_register_allocation.cpp
@@ -2553,6 +2553,7 @@ optimize_encoding_vop2(Program* program, ra_ctx& ctx, RegisterFile& register_fil
         (instr->opcode != aco_opcode::v_pk_fma_f16 || program->gfx_level < GFX10) &&
         (instr->opcode != aco_opcode::v_mad_legacy_f32 || !program->dev.has_mac_legacy32) &&
         (instr->opcode != aco_opcode::v_fma_legacy_f32 || !program->dev.has_mac_legacy32) &&
+        (instr->opcode != aco_opcode::v_dot2_f32_f16 || program->family == CHIP_VEGA20) &&
         (instr->opcode != aco_opcode::v_dot4_i32_i8 || program->family == CHIP_VEGA20)) ||
        !instr->operands[2].isTemp() || !instr->operands[2].isKillBeforeDef() ||
        instr->operands[2].getTemp().type() != RegType::vgpr ||
@@ -2585,6 +2586,7 @@ optimize_encoding_vop2(Program* program, ra_ctx& ctx, RegisterFile& register_fil
    case aco_opcode::v_mad_legacy_f16: instr->opcode = aco_opcode::v_mac_f16; break;
    case aco_opcode::v_fma_f16: instr->opcode = aco_opcode::v_fmac_f16; break;
    case aco_opcode::v_pk_fma_f16: instr->opcode = aco_opcode::v_pk_fmac_f16; break;
+   case aco_opcode::v_dot2_f32_f16: instr->opcode = aco_opcode::v_dot2c_f32_f16; break;
    case aco_opcode::v_dot4_i32_i8: instr->opcode = aco_opcode::v_dot4c_i32_i8; break;
    case aco_opcode::v_mad_legacy_f32: instr->opcode = aco_opcode::v_mac_legacy_f32; break;
    case aco_opcode::v_fma_legacy_f32: instr->opcode = aco_opcode::v_fmac_legacy_f32; break;
@@ -2797,7 +2799,8 @@ register_allocation(Program* program, std::vector<IDSet>& live_out_per_block, ra
              instr->opcode == aco_opcode::v_pk_fmac_f16 ||
              instr->opcode == aco_opcode::v_writelane_b32 ||
              instr->opcode == aco_opcode::v_writelane_b32_e64 ||
-             instr->opcode == aco_opcode::v_dot4c_i32_i8) {
+             instr->opcode == aco_opcode::v_dot4c_i32_i8 ||
+             instr->opcode == aco_opcode::v_dot2c_f32_f16) {
             assert(instr->definitions[0].bytes() == instr->operands[2].bytes() ||
                    instr->operands[2].regClass() == v1);
             instr->definitions[0].setFixed(instr->operands[2].physReg());
-- 
GitLab


From db8ca48fd83d42efb4ce23f788172d16f973a59b Mon Sep 17 00:00:00 2001
From: Georg Lehmann <dadschoorse@gmail.com>
Date: Wed, 2 Feb 2022 23:34:40 +0100
Subject: [PATCH 4/5] ac/llvm: Implement nir_op_fdot_2x16_fadd.

Signed-off-by: Georg Lehmann <dadschoorse@gmail.com>
---
 src/amd/llvm/ac_nir_to_llvm.c | 10 ++++++++++
 1 file changed, 10 insertions(+)

diff --git a/src/amd/llvm/ac_nir_to_llvm.c b/src/amd/llvm/ac_nir_to_llvm.c
index 5fb48ca33248..352299837698 100644
--- a/src/amd/llvm/ac_nir_to_llvm.c
+++ b/src/amd/llvm/ac_nir_to_llvm.c
@@ -1351,6 +1351,16 @@ static void visit_alu(struct ac_nir_context *ctx, const nir_alu_instr *instr)
       break;
    }
 
+   case nir_op_fdot_2x16_fadd: {
+      const char *name = "llvm.amdgcn.fdot2";
+      src[0] = LLVMBuildBitCast(ctx->ac.builder, src[0], ctx->ac.v2f16, "");
+      src[1] = LLVMBuildBitCast(ctx->ac.builder, src[1], ctx->ac.v2f16, "");
+      src[2] = LLVMBuildBitCast(ctx->ac.builder, src[2], ctx->ac.f32, "");
+      src[3] = ctx->ac.i1false;
+      result = ac_build_intrinsic(&ctx->ac, name, ctx->ac.f32, src, 4, AC_FUNC_ATTR_READNONE);
+      break;
+   }
+
    case nir_op_sad_u8x4:
       result = ac_build_intrinsic(&ctx->ac, "llvm.amdgcn.sad.u8", ctx->ac.i32,
                                   (LLVMValueRef[]){src[0], src[1], src[2]}, 3,
-- 
GitLab


From e50fca18f422f802c79d13296a78c667c8d7a5ed Mon Sep 17 00:00:00 2001
From: Georg Lehmann <dadschoorse@gmail.com>
Date: Wed, 2 Feb 2022 23:48:01 +0100
Subject: [PATCH 5/5] nir/opt_algebraic: Optimize open-coded fdot_2x16_fadd.

Signed-off-by: Georg Lehmann <dadschoorse@gmail.com>
---
 src/compiler/nir/nir_opt_algebraic.py | 29 +++++++++++++++++++++++++++
 1 file changed, 29 insertions(+)

diff --git a/src/compiler/nir/nir_opt_algebraic.py b/src/compiler/nir/nir_opt_algebraic.py
index f7f1da5aac57..7d1709f21ba4 100644
--- a/src/compiler/nir/nir_opt_algebraic.py
+++ b/src/compiler/nir/nir_opt_algebraic.py
@@ -41,6 +41,8 @@ e = 'e'
 
 signed_zero_inf_nan_preserve_16 = 'nir_is_float_control_signed_zero_inf_nan_preserve(info->float_controls_execution_mode, 16)'
 signed_zero_inf_nan_preserve_32 = 'nir_is_float_control_signed_zero_inf_nan_preserve(info->float_controls_execution_mode, 32)'
+can_use_rtne32 = '!nir_is_rounding_mode_rtz(info->float_controls_execution_mode, 32)'
+can_preserve_denormal16 = '!nir_is_denorm_flush_to_zero(info->float_controls_execution_mode, 16)'
 
 ignore_exact = nir_algebraic.ignore_exact
 
@@ -276,6 +278,33 @@ optimizations = [
     ('ffmaz', a, b, c), 'options->has_fmulz && !'+signed_zero_inf_nan_preserve_32),
 ]
 
+# vkd3d-proton's open-coded fdot_2x16_fadd
+# and other inexact fdot_2x16_fadd patterns
+fdot_2x16_fadd_cond = 'options->has_dot_2x16 && {} && {}'.format(can_use_rtne32, can_preserve_denormal16)
+optimizations.extend([
+   # 32bit multiply and add
+   (('fadd', ('fmul(is_used_once)', ('f2f32', 'a@16'), ('f2f32', 'b@16')), ('fmul(is_used_once)', ('f2f32', 'c@16'), ('f2f32', 'd@16'))),
+    ('fdot_2x16_fadd', ('pack_32_2x16_split', a, c), ('pack_32_2x16_split', b, d), -0.0),
+    fdot_2x16_fadd_cond),
+   (('~fadd', ('fmul(is_used_once)', ('f2f32', 'c@16'), ('f2f32', 'd@16')), ('fadd(is_used_once)', ('fmul(is_used_once)', ('f2f32', 'a@16'), ('f2f32', 'b@16')), e)),
+    ('fdot_2x16_fadd', ('pack_32_2x16_split', a, c), ('pack_32_2x16_split', b, d), e),
+    fdot_2x16_fadd_cond),
+    # 16bit multiply and 32bit add
+   (('~fadd(is_used_once)', ('f2f32', ('fmul(is_used_once)', 'a@16', 'b@16')), ('f2f32(is_used_once)', ('fmul(is_used_once)', 'c@16', 'd@16'))),
+    ('fdot_2x16_fadd', ('pack_32_2x16_split', a, c), ('pack_32_2x16_split', b, d), -0.0),
+    fdot_2x16_fadd_cond),
+   (('~fadd', ('fadd(is_used_once)', ('f2f32(is_used_once)', ('fmul(is_used_once)', 'a@16', 'b@16')), e), ('f2f32(is_used_once)', ('fmul(is_used_once)', 'c@16', 'd@16'))),
+    ('fdot_2x16_fadd', ('pack_32_2x16_split', a, c), ('pack_32_2x16_split', b, d), e),
+    fdot_2x16_fadd_cond),
+    # 16bit multiply and 16bit add, conversion to 32bit
+   (('~f2f32', ('fadd(is_used_once)', ('fmul(is_used_once)', 'a@16', 'b@16'), ('fmul(is_used_once)', 'c@16', 'd@16'))),
+    ('fdot_2x16_fadd', ('pack_32_2x16_split', a, c), ('pack_32_2x16_split', b, d), -0.0),
+    fdot_2x16_fadd_cond),
+
+    (('fadd', ('fdot_2x16_fadd', 'a(is_not_const)', b, -0.0), c), ('fdot_2x16_fadd', a, b, c)),
+    (('~fadd', ('fdot_2x16_fadd(is_used_once)', a, b, '#c'), '#d'), ('fdot_2x16_fadd', a, b, ('fadd', '#c', '#d'))),
+])
+
 # Shorthand for the expansion of just the dot product part of the [iu]dp4a
 # instructions.
 sdot_4x8_a_b = ('iadd', ('iadd', ('imul', ('extract_i8', a, 0), ('extract_i8', b, 0)),
-- 
GitLab

