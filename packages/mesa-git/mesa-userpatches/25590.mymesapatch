From cf07f11e35963c7a59b020ec75379e0492ef5ca4 Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Thu, 19 Oct 2023 14:58:00 +0100
Subject: [PATCH 1/6] glsl: always lower non-TCS outputs to temporaries

It seems only radeonsi and v3d sets
CAN_READ_OUTPUTS/SupportsReadingOutputs, and v3d has
lower_all_io_to_temps=true. It looks like radeonsi basically lowers the
outputs to temporaries in the backend.

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
Reviewed-by: Timothy Arceri <tarceri@itsqueeze.com>
---
 src/compiler/glsl/gl_nir_linker.c                           | 3 ++-
 src/gallium/drivers/freedreno/ir3/ir3_cmdline.c             | 3 ++-
 src/gallium/drivers/lima/standalone/lima_compiler_cmdline.c | 3 ++-
 3 files changed, 6 insertions(+), 3 deletions(-)

diff --git a/src/compiler/glsl/gl_nir_linker.c b/src/compiler/glsl/gl_nir_linker.c
index e12296c67c955..2b96905ca7b9d 100644
--- a/src/compiler/glsl/gl_nir_linker.c
+++ b/src/compiler/glsl/gl_nir_linker.c
@@ -1251,7 +1251,8 @@ preprocess_shader(const struct gl_constants *consts,
       NIR_PASS(_, nir, nir_lower_io_to_temporaries,
                  nir_shader_get_entrypoint(nir),
                  true, true);
-   } else if (nir->info.stage == MESA_SHADER_FRAGMENT ||
+   } else if (nir->info.stage == MESA_SHADER_TESS_EVAL ||
+              nir->info.stage == MESA_SHADER_FRAGMENT ||
               !consts->SupportsReadingOutputs) {
       NIR_PASS(_, nir, nir_lower_io_to_temporaries,
                  nir_shader_get_entrypoint(nir),
diff --git a/src/gallium/drivers/freedreno/ir3/ir3_cmdline.c b/src/gallium/drivers/freedreno/ir3/ir3_cmdline.c
index e3ff71a17e726..9f6e9a087348d 100644
--- a/src/gallium/drivers/freedreno/ir3/ir3_cmdline.c
+++ b/src/gallium/drivers/freedreno/ir3/ir3_cmdline.c
@@ -130,7 +130,8 @@ load_glsl(unsigned num_files, char *const *files, gl_shader_stage stage)
        nir->info.stage == MESA_SHADER_GEOMETRY) {
       NIR_PASS_V(nir, nir_lower_io_to_temporaries,
                  nir_shader_get_entrypoint(nir), true, true);
-   } else if (nir->info.stage == MESA_SHADER_FRAGMENT) {
+   } else if (nir->info.stage == MESA_SHADER_TESS_EVAL ||
+              nir->info.stage == MESA_SHADER_FRAGMENT) {
       NIR_PASS_V(nir, nir_lower_io_to_temporaries,
                  nir_shader_get_entrypoint(nir), true, false);
    }
diff --git a/src/gallium/drivers/lima/standalone/lima_compiler_cmdline.c b/src/gallium/drivers/lima/standalone/lima_compiler_cmdline.c
index 3e5971fe4ce80..526c52857340a 100644
--- a/src/gallium/drivers/lima/standalone/lima_compiler_cmdline.c
+++ b/src/gallium/drivers/lima/standalone/lima_compiler_cmdline.c
@@ -123,7 +123,8 @@ load_glsl(unsigned num_files, char* const* files, gl_shader_stage stage)
       NIR_PASS_V(nir, nir_lower_io_to_temporaries,
                  nir_shader_get_entrypoint(nir),
                  true, true);
-   } else if (nir->info.stage == MESA_SHADER_FRAGMENT) {
+   } else if (nir->info.stage == MESA_SHADER_TESS_EVAL ||
+              nir->info.stage == MESA_SHADER_FRAGMENT) {
       NIR_PASS_V(nir, nir_lower_io_to_temporaries,
                  nir_shader_get_entrypoint(nir),
                  true, false);
-- 
GitLab


From e050dce666d55a33a9492d8f96de55c52c1a441e Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Thu, 19 Oct 2023 15:00:38 +0100
Subject: [PATCH 2/6] gallium: remove PIPE_CAP_SHADER_CAN_READ_OUTPUTS

nir_lower_io_to_temporaries is now done for all stages except TCS, and
nir_lower_io_to_temporaries with a TCS is a no-op.

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
Reviewed-by: Timothy Arceri <tarceri@itsqueeze.com>
---
 docs/gallium/screen.rst                        | 2 --
 src/compiler/glsl/gl_nir_linker.c              | 3 +--
 src/gallium/auxiliary/util/u_screen.c          | 1 -
 src/gallium/drivers/nouveau/nv30/nv30_screen.c | 1 -
 src/gallium/drivers/radeonsi/si_get.c          | 1 -
 src/gallium/drivers/v3d/v3d_screen.c           | 1 -
 src/gallium/include/pipe/p_defines.h           | 1 -
 src/mesa/main/consts_exts.h                    | 3 ---
 src/mesa/state_tracker/st_extensions.c         | 2 --
 9 files changed, 1 insertion(+), 14 deletions(-)

diff --git a/docs/gallium/screen.rst b/docs/gallium/screen.rst
index 54fc0778f4bf4..e57278bd13aeb 100644
--- a/docs/gallium/screen.rst
+++ b/docs/gallium/screen.rst
@@ -413,8 +413,6 @@ The integer capabilities:
 * ``PIPE_CAP_STREAM_OUTPUT_INTERLEAVE_BUFFERS``: Whether interleaved stream
   output mode is able to interleave across buffers. This is required for
   :ext:`GL_ARB_transform_feedback3`.
-* ``PIPE_CAP_SHADER_CAN_READ_OUTPUTS``: Whether every TGSI shader stage can read
-  from the output file.
 * ``PIPE_CAP_FBFETCH``: The number of render targets whose value in the
   current framebuffer can be read in the shader.  0 means framebuffer fetch
   is not supported.  1 means that only the first render target can be read,
diff --git a/src/compiler/glsl/gl_nir_linker.c b/src/compiler/glsl/gl_nir_linker.c
index 2b96905ca7b9d..4469f23af5088 100644
--- a/src/compiler/glsl/gl_nir_linker.c
+++ b/src/compiler/glsl/gl_nir_linker.c
@@ -1252,8 +1252,7 @@ preprocess_shader(const struct gl_constants *consts,
                  nir_shader_get_entrypoint(nir),
                  true, true);
    } else if (nir->info.stage == MESA_SHADER_TESS_EVAL ||
-              nir->info.stage == MESA_SHADER_FRAGMENT ||
-              !consts->SupportsReadingOutputs) {
+              nir->info.stage == MESA_SHADER_FRAGMENT) {
       NIR_PASS(_, nir, nir_lower_io_to_temporaries,
                  nir_shader_get_entrypoint(nir),
                  true, false);
diff --git a/src/gallium/auxiliary/util/u_screen.c b/src/gallium/auxiliary/util/u_screen.c
index 0abe02eebbd7a..23ea6d485f11d 100644
--- a/src/gallium/auxiliary/util/u_screen.c
+++ b/src/gallium/auxiliary/util/u_screen.c
@@ -314,7 +314,6 @@ u_pipe_screen_get_param_defaults(struct pipe_screen *pscreen,
    case PIPE_CAP_MIXED_COLOR_DEPTH_BITS:
    case PIPE_CAP_SHADER_ARRAY_COMPONENTS:
    case PIPE_CAP_STREAM_OUTPUT_INTERLEAVE_BUFFERS:
-   case PIPE_CAP_SHADER_CAN_READ_OUTPUTS:
    case PIPE_CAP_NATIVE_FENCE_FD:
       return 0;
 
diff --git a/src/gallium/drivers/nouveau/nv30/nv30_screen.c b/src/gallium/drivers/nouveau/nv30/nv30_screen.c
index 0dddc5184c160..3f3d697207a13 100644
--- a/src/gallium/drivers/nouveau/nv30/nv30_screen.c
+++ b/src/gallium/drivers/nouveau/nv30/nv30_screen.c
@@ -214,7 +214,6 @@ nv30_screen_get_param(struct pipe_screen *pscreen, enum pipe_cap param)
    case PIPE_CAP_VIEWPORT_SUBPIXEL_BITS:
    case PIPE_CAP_MIXED_COLOR_DEPTH_BITS:
    case PIPE_CAP_SHADER_ARRAY_COMPONENTS:
-   case PIPE_CAP_SHADER_CAN_READ_OUTPUTS:
    case PIPE_CAP_NATIVE_FENCE_FD:
    case PIPE_CAP_FBFETCH:
    case PIPE_CAP_LEGACY_MATH_RULES:
diff --git a/src/gallium/drivers/radeonsi/si_get.c b/src/gallium/drivers/radeonsi/si_get.c
index 62305c22b394f..8adb634e6835f 100644
--- a/src/gallium/drivers/radeonsi/si_get.c
+++ b/src/gallium/drivers/radeonsi/si_get.c
@@ -118,7 +118,6 @@ static int si_get_param(struct pipe_screen *pscreen, enum pipe_cap param)
    case PIPE_CAP_STRING_MARKER:
    case PIPE_CAP_CULL_DISTANCE:
    case PIPE_CAP_SHADER_ARRAY_COMPONENTS:
-   case PIPE_CAP_SHADER_CAN_READ_OUTPUTS:
    case PIPE_CAP_STREAM_OUTPUT_PAUSE_RESUME:
    case PIPE_CAP_STREAM_OUTPUT_INTERLEAVE_BUFFERS:
    case PIPE_CAP_DOUBLES:
diff --git a/src/gallium/drivers/v3d/v3d_screen.c b/src/gallium/drivers/v3d/v3d_screen.c
index e479aaa15462e..272bbf9e48aac 100644
--- a/src/gallium/drivers/v3d/v3d_screen.c
+++ b/src/gallium/drivers/v3d/v3d_screen.c
@@ -136,7 +136,6 @@ v3d_screen_get_param(struct pipe_screen *pscreen, enum pipe_cap param)
         case PIPE_CAP_MULTI_DRAW_INDIRECT:
         case PIPE_CAP_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION:
         case PIPE_CAP_SIGNED_VERTEX_BUFFER_OFFSET:
-        case PIPE_CAP_SHADER_CAN_READ_OUTPUTS:
         case PIPE_CAP_SHADER_PACK_HALF_FLOAT:
         case PIPE_CAP_TEXTURE_HALF_FLOAT_LINEAR:
         case PIPE_CAP_FRAMEBUFFER_NO_ATTACHMENT:
diff --git a/src/gallium/include/pipe/p_defines.h b/src/gallium/include/pipe/p_defines.h
index f94c7c6c2620c..158143866299e 100644
--- a/src/gallium/include/pipe/p_defines.h
+++ b/src/gallium/include/pipe/p_defines.h
@@ -813,7 +813,6 @@ enum pipe_cap
    PIPE_CAP_MIXED_COLOR_DEPTH_BITS,
    PIPE_CAP_SHADER_ARRAY_COMPONENTS,
    PIPE_CAP_STREAM_OUTPUT_INTERLEAVE_BUFFERS,
-   PIPE_CAP_SHADER_CAN_READ_OUTPUTS,
    PIPE_CAP_NATIVE_FENCE_FD,
    PIPE_CAP_GLSL_TESS_LEVELS_AS_INPUTS,
    PIPE_CAP_FBFETCH,
diff --git a/src/mesa/main/consts_exts.h b/src/mesa/main/consts_exts.h
index e9f8ea82a0d9c..c4a511108a39d 100644
--- a/src/mesa/main/consts_exts.h
+++ b/src/mesa/main/consts_exts.h
@@ -953,9 +953,6 @@ struct gl_constants
 
    bool HasFBFetch;
 
-   /** Whether the backend supports reading from outputs */
-   bool SupportsReadingOutputs;
-
    bool CombinedClipCullDistanceArrays;
 
    bool PointSizeFixed;
diff --git a/src/mesa/state_tracker/st_extensions.c b/src/mesa/state_tracker/st_extensions.c
index 8cc088a81f1ac..811c593009f48 100644
--- a/src/mesa/state_tracker/st_extensions.c
+++ b/src/mesa/state_tracker/st_extensions.c
@@ -170,8 +170,6 @@ void st_init_limits(struct pipe_screen *screen,
 
    c->HasFBFetch = screen->get_param(screen, PIPE_CAP_FBFETCH);
 
-   c->SupportsReadingOutputs = screen->get_param(screen, PIPE_CAP_SHADER_CAN_READ_OUTPUTS);
-
    c->CombinedClipCullDistanceArrays = !screen->get_param(screen, PIPE_CAP_CULL_DISTANCE_NOCOMBINE);
 
    c->PointSizeFixed = screen->get_param(screen, PIPE_CAP_POINT_SIZE_FIXED) != PIPE_POINT_SIZE_LOWER_ALWAYS;
-- 
GitLab


From 04f15742add2df55c8fb1d50396696ea291736b0 Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Thu, 5 Oct 2023 16:45:59 +0100
Subject: [PATCH 3/6] nir/linking_helpers: remove special case for read mesh
 outputs

Only VK_NV_mesh_shader allows this kind of access, and no driver
advertises that extension anymore.

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
Reviewed-by: Timothy Arceri <tarceri@itsqueeze.com>
---
 src/compiler/nir/nir_linking_helpers.c | 6 +-----
 1 file changed, 1 insertion(+), 5 deletions(-)

diff --git a/src/compiler/nir/nir_linking_helpers.c b/src/compiler/nir/nir_linking_helpers.c
index d5f335b6a0e8b..310780d012368 100644
--- a/src/compiler/nir/nir_linking_helpers.c
+++ b/src/compiler/nir/nir_linking_helpers.c
@@ -154,11 +154,7 @@ nir_remove_unused_io_vars(nir_shader *shader,
 
       if (!(other_stage & get_variable_io_mask(var, shader->info.stage))) {
          /* This one is invalid, make it a global variable instead */
-         if (shader->info.stage == MESA_SHADER_MESH &&
-             (shader->info.outputs_read & BITFIELD64_BIT(var->data.location)))
-            var->data.mode = nir_var_mem_shared;
-         else
-            var->data.mode = nir_var_shader_temp;
+         var->data.mode = nir_var_shader_temp;
          var->data.location = 0;
 
          progress = true;
-- 
GitLab


From eae9ef486112607ac442fef86c0cb009bd2b3381 Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Thu, 5 Oct 2023 17:09:18 +0100
Subject: [PATCH 4/6] nir/linking_helpers: remove varying accesses in
 nir_remove_unused_io_vars

interp_deref_at_sample of a nir_var_shader_temp is nonsensical and might
be ignored by later passes, instead of removed.

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
Closes: https://gitlab.freedesktop.org/mesa/mesa/-/issues/7818
Closes: https://gitlab.freedesktop.org/mesa/mesa/-/issues/10588
---
 src/compiler/nir/nir_linking_helpers.c | 78 ++++++++++++++++++++------
 1 file changed, 61 insertions(+), 17 deletions(-)

diff --git a/src/compiler/nir/nir_linking_helpers.c b/src/compiler/nir/nir_linking_helpers.c
index 310780d012368..22c3fc1cd1ac2 100644
--- a/src/compiler/nir/nir_linking_helpers.c
+++ b/src/compiler/nir/nir_linking_helpers.c
@@ -77,7 +77,7 @@ get_num_components(nir_variable *var)
 }
 
 static void
-tcs_add_output_reads(nir_shader *shader, uint64_t *read, uint64_t *patches_read)
+add_output_reads(nir_shader *shader, uint64_t *read, uint64_t *patches_read)
 {
    nir_foreach_function_impl(impl, shader) {
       nir_foreach_block(block, impl) {
@@ -111,6 +111,50 @@ tcs_add_output_reads(nir_shader *shader, uint64_t *read, uint64_t *patches_read)
    }
 }
 
+static void
+remove_unused_io_access(nir_function_impl *impl, nir_variable_mode mode)
+{
+   nir_builder b = nir_builder_create(impl);
+
+   nir_foreach_block(block, impl) {
+      nir_foreach_instr_safe(instr, block) {
+         if (instr->type != nir_instr_type_intrinsic)
+            continue;
+
+         nir_intrinsic_instr *intrin = nir_instr_as_intrinsic(instr);
+         unsigned srcn = 0;
+         switch (intrin->intrinsic) {
+         case nir_intrinsic_load_deref:
+         case nir_intrinsic_store_deref:
+         case nir_intrinsic_interp_deref_at_centroid:
+         case nir_intrinsic_interp_deref_at_sample:
+         case nir_intrinsic_interp_deref_at_offset:
+         case nir_intrinsic_interp_deref_at_vertex:
+            break;
+         case nir_intrinsic_copy_deref:
+            srcn = mode == nir_var_shader_in ? 1 : 0;
+            break;
+         default:
+            continue;
+         }
+
+         nir_variable *var = nir_intrinsic_get_var(intrin, srcn);
+         if (!var || var->data.mode != mode || var->data.location != NUM_TOTAL_VARYING_SLOTS)
+            continue;
+
+         if (intrin->intrinsic != nir_intrinsic_store_deref &&
+             intrin->intrinsic != nir_intrinsic_copy_deref) {
+            b.cursor = nir_before_instr(instr);
+            nir_def *undef = nir_undef(&b, intrin->num_components, intrin->def.bit_size);
+            nir_def_rewrite_uses(&intrin->def, undef);
+         }
+
+         nir_instr_remove(instr);
+         nir_deref_instr_remove_if_unused(nir_src_as_deref(intrin->src[srcn]));
+      }
+   }
+}
+
 /**
  * Helper for removing unused shader I/O variables, by demoting them to global
  * variables (which may then by dead code eliminated).
@@ -132,6 +176,11 @@ nir_remove_unused_io_vars(nir_shader *shader,
 
    assert(mode == nir_var_shader_in || mode == nir_var_shader_out);
 
+   uint64_t read[4] = { 0 };
+   uint64_t patches_read[4] = { 0 };
+   if (mode == nir_var_shader_out)
+      add_output_reads(shader, read, patches_read);
+
    nir_foreach_variable_with_modes_safe(var, shader, mode) {
       if (var->data.patch)
          used = used_by_other_stage_patches;
@@ -149,23 +198,25 @@ nir_remove_unused_io_vars(nir_shader *shader,
          continue;
 
       uint64_t other_stage = 0;
-      for (unsigned i = 0; i < get_num_components(var); i++)
+      uint64_t this_stage = 0;
+      for (unsigned i = 0; i < get_num_components(var); i++) {
          other_stage |= used[var->data.location_frac + i];
+         this_stage |= (var->data.patch ? patches_read : read)[var->data.location_frac + i];
+      }
 
-      if (!(other_stage & get_variable_io_mask(var, shader->info.stage))) {
-         /* This one is invalid, make it a global variable instead */
-         var->data.mode = nir_var_shader_temp;
-         var->data.location = 0;
-
+      uint64_t var_mask = get_variable_io_mask(var, shader->info.stage);
+      if (!((other_stage | this_stage) & var_mask)) {
+         /* Mark the variable as removed by setting the location to an invalid value. */
+         var->data.location = NUM_TOTAL_VARYING_SLOTS;
+         exec_node_remove(&var->node);
          progress = true;
       }
    }
 
    nir_function_impl *impl = nir_shader_get_entrypoint(shader);
    if (progress) {
-      nir_metadata_preserve(impl, nir_metadata_dominance |
-                                     nir_metadata_block_index);
-      nir_fixup_deref_modes(shader);
+      remove_unused_io_access(impl, mode);
+      nir_metadata_preserve(impl, nir_metadata_dominance | nir_metadata_block_index);
    } else {
       nir_metadata_preserve(impl, nir_metadata_all);
    }
@@ -212,13 +263,6 @@ nir_remove_unused_varyings(nir_shader *producer, nir_shader *consumer)
       }
    }
 
-   /* Each TCS invocation can read data written by other TCS invocations,
-    * so even if the outputs are not used by the TES we must also make
-    * sure they are not read by the TCS before demoting them to globals.
-    */
-   if (producer->info.stage == MESA_SHADER_TESS_CTRL)
-      tcs_add_output_reads(producer, read, patches_read);
-
    bool progress = false;
    progress = nir_remove_unused_io_vars(producer, nir_var_shader_out, read,
                                         patches_read);
-- 
GitLab


From 51d7bb6e05ea9a96dbce97a7772c6fc6d1897f3d Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Thu, 5 Oct 2023 16:45:59 +0100
Subject: [PATCH 5/6] nir/linking_helpers: remove nested IF

Just add a && to the condition. This is more readable to me.

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
Reviewed-by: Timothy Arceri <tarceri@itsqueeze.com>
---
 src/compiler/nir/nir_linking_helpers.c | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/src/compiler/nir/nir_linking_helpers.c b/src/compiler/nir/nir_linking_helpers.c
index 22c3fc1cd1ac2..1d7ff4956856f 100644
--- a/src/compiler/nir/nir_linking_helpers.c
+++ b/src/compiler/nir/nir_linking_helpers.c
@@ -187,9 +187,9 @@ nir_remove_unused_io_vars(nir_shader *shader,
       else
          used = used_by_other_stage;
 
-      if (var->data.location < VARYING_SLOT_VAR0 && var->data.location >= 0)
-         if (shader->info.stage != MESA_SHADER_MESH || var->data.location != VARYING_SLOT_PRIMITIVE_ID)
-            continue;
+      if (var->data.location < VARYING_SLOT_VAR0 && var->data.location >= 0 &&
+          !(shader->info.stage == MESA_SHADER_MESH && var->data.location == VARYING_SLOT_PRIMITIVE_ID))
+         continue;
 
       if (var->data.always_active_io)
          continue;
-- 
GitLab


From 1f3d3342b7d559940e725b6012b7aab099719488 Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Thu, 5 Oct 2023 17:24:29 +0100
Subject: [PATCH 6/6] radv: remove unecessary nir_remove_unused_varyings
 cleanup passes

I think the comment meant to refer to nir_remove_unused_varyings.

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
Reviewed-by: Timothy Arceri <tarceri@itsqueeze.com>
---
 src/amd/vulkan/radv_pipeline_graphics.c | 31 +++----------------------
 1 file changed, 3 insertions(+), 28 deletions(-)

diff --git a/src/amd/vulkan/radv_pipeline_graphics.c b/src/amd/vulkan/radv_pipeline_graphics.c
index 7e65f9b58776d..69d10c69477f4 100644
--- a/src/amd/vulkan/radv_pipeline_graphics.c
+++ b/src/amd/vulkan/radv_pipeline_graphics.c
@@ -1255,7 +1255,6 @@ radv_link_shaders(const struct radv_device *device, struct radv_shader_stage *pr
    const enum amd_gfx_level gfx_level = pdev->info.gfx_level;
    nir_shader *producer = producer_stage->nir;
    nir_shader *consumer = consumer_stage->nir;
-   bool progress;
 
    if (consumer->info.stage == MESA_SHADER_FRAGMENT) {
       /* Lower the viewport index to zero when the last vertex stage doesn't export it. */
@@ -1279,8 +1278,8 @@ radv_link_shaders(const struct radv_device *device, struct radv_shader_stage *pr
       nir_lower_direct_array_deref_of_vec_load | nir_lower_indirect_array_deref_of_vec_load |
       nir_lower_direct_array_deref_of_vec_store | nir_lower_indirect_array_deref_of_vec_store;
 
-   NIR_PASS(progress, producer, nir_lower_array_deref_of_vec, nir_var_shader_out, array_deref_of_vec_options);
-   NIR_PASS(progress, consumer, nir_lower_array_deref_of_vec, nir_var_shader_in, array_deref_of_vec_options);
+   NIR_PASS(_, producer, nir_lower_array_deref_of_vec, nir_var_shader_out, array_deref_of_vec_options);
+   NIR_PASS(_, consumer, nir_lower_array_deref_of_vec, nir_var_shader_in, array_deref_of_vec_options);
 
    nir_lower_io_arrays_to_elements(producer, consumer);
    nir_validate_shader(producer, "after nir_lower_io_arrays_to_elements");
@@ -1307,17 +1306,10 @@ radv_link_shaders(const struct radv_device *device, struct radv_shader_stage *pr
    NIR_PASS(_, producer, nir_remove_dead_variables, nir_var_shader_out, NULL);
    NIR_PASS(_, consumer, nir_remove_dead_variables, nir_var_shader_in, NULL);
 
-   progress = nir_remove_unused_varyings(producer, consumer);
+   nir_remove_unused_varyings(producer, consumer);
 
    nir_compact_varyings(producer, consumer, true);
 
-   /* nir_compact_varyings changes deleted varyings into shader_temp.
-    * We need to remove these otherwise we risk them being lowered to scratch.
-    * This can especially happen to arrayed outputs.
-    */
-   NIR_PASS(_, producer, nir_remove_dead_variables, nir_var_shader_temp, NULL);
-   NIR_PASS(_, consumer, nir_remove_dead_variables, nir_var_shader_temp, NULL);
-
    nir_validate_shader(producer, "after nir_compact_varyings");
    nir_validate_shader(consumer, "after nir_compact_varyings");
 
@@ -1345,23 +1337,6 @@ radv_link_shaders(const struct radv_device *device, struct radv_shader_stage *pr
        consumer->info.stage == MESA_SHADER_TESS_EVAL) {
       NIR_PASS(_, consumer, nir_lower_io_to_vector, nir_var_shader_in);
    }
-
-   if (progress) {
-      progress = false;
-      NIR_PASS(progress, producer, nir_lower_global_vars_to_local);
-      if (progress) {
-         ac_nir_lower_indirect_derefs(producer, gfx_level);
-         /* remove dead writes, which can remove input loads */
-         NIR_PASS(_, producer, nir_lower_vars_to_ssa);
-         NIR_PASS(_, producer, nir_opt_dce);
-      }
-
-      progress = false;
-      NIR_PASS(progress, consumer, nir_lower_global_vars_to_local);
-      if (progress) {
-         ac_nir_lower_indirect_derefs(consumer, gfx_level);
-      }
-   }
 }
 
 static const gl_shader_stage graphics_shader_order[] = {
-- 
GitLab

