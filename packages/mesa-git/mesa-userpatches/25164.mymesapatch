From 6c98b92743e2e7e7fc09a1264e9172037ac6b44d Mon Sep 17 00:00:00 2001
From: Paulo Zanoni <paulo.r.zanoni@intel.com>
Date: Fri, 8 Sep 2023 15:10:33 -0700
Subject: [PATCH 1/6] vulkan: fix potential memory leak in
 create_rect_list_pipeline()

I was playing around with possible improvements to STACK_ARRAY(), and
one of my experiments made gcc point us that we were not freeing
'stages'.

Reviewed-by: Karmjit Mahil <Karmjit.Mahil@imgtec.com>
Signed-off-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
---
 src/vulkan/runtime/vk_meta.c | 1 +
 1 file changed, 1 insertion(+)

diff --git a/src/vulkan/runtime/vk_meta.c b/src/vulkan/runtime/vk_meta.c
index 1ea4dc77b0e75..f1570908fb9e4 100644
--- a/src/vulkan/runtime/vk_meta.c
+++ b/src/vulkan/runtime/vk_meta.c
@@ -398,6 +398,7 @@ create_rect_list_pipeline(struct vk_device *device,
                                                    pipeline_out);
 
    STACK_ARRAY_FINISH(dyn_state);
+   STACK_ARRAY_FINISH(stages);
 
    return result;
 }
-- 
GitLab


From 94a9c4d86906d14f884e727babbd7f8f3297967e Mon Sep 17 00:00:00 2001
From: Paulo Zanoni <paulo.r.zanoni@intel.com>
Date: Fri, 8 Sep 2023 16:30:09 -0700
Subject: [PATCH 2/6] vulkan: don't make STACK_ARRAY zero-initialize everybody

Dear git-bisect user,

First of all, on behalf of the Mesa community I'd like to thank you
for taking your time to bisect the Mesa source code. Your efforts are
truly appreciated.

That said, I regret to inform you that the princess is in another
cast^W^W^W^W^W^W^W that this patch is only exposing a bug that was
already present in the source code, but hidden. You see, due to the
fact that it may use plain malloc(), STACK_ARRAY users were always
supposed to initialize the contents of the array themselves. It just
happened that, when we actually used the stack, we were
zero-initializing the array because we wanted to get rid of compiler
warnings.

To continue your quest, you must figure our which STACK_ARRAY user is
causing the regression and make sure it properly initializes the array
before passing it around.

Commit d7957df31848 ("vulkan: fix uninitialized variables") fixed
errors caused by -Wmaybe-uninitialized by forcing STACK_ARRAY to
zero-initialize the array everywhere. There are dozens of STACK_ARRAY
users, but only 3 of them have this issue.

Since this is a whole array that's being zero-initialized it's better
to add STACK_ARRAY_MARK_INITIALIZED() and only call it when needed.
Also, make it zero-initialize just the first byte: callers always had
to assume the memory was not zero-initialized anyway because of the
malloc() case.

I'm currently not aware of any current users of STACK_ARRAY that are
dependent of the values being zero-initialized.

Sincerely,
Paulo

Signed-off-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
---
 src/vulkan/runtime/vk_queue.c            |  1 +
 src/vulkan/runtime/vk_sync_binary.c      |  1 +
 src/vulkan/runtime/vk_synchronization2.c |  1 +
 src/vulkan/util/vk_util.h                | 11 ++++-------
 4 files changed, 7 insertions(+), 7 deletions(-)

diff --git a/src/vulkan/runtime/vk_queue.c b/src/vulkan/runtime/vk_queue.c
index a315c6f5431a8..466d49a50effc 100644
--- a/src/vulkan/runtime/vk_queue.c
+++ b/src/vulkan/runtime/vk_queue.c
@@ -1038,6 +1038,7 @@ vk_queue_wait_before_present(struct vk_queue *queue,
 
    const uint32_t wait_count = pPresentInfo->waitSemaphoreCount;
    STACK_ARRAY(struct vk_sync_wait, waits, wait_count);
+   STACK_ARRAY_MARK_INITIALIZED(waits);
 
    for (uint32_t i = 0; i < wait_count; i++) {
       VK_FROM_HANDLE(vk_semaphore, semaphore,
diff --git a/src/vulkan/runtime/vk_sync_binary.c b/src/vulkan/runtime/vk_sync_binary.c
index 3d2720f934821..25f1e407f988d 100644
--- a/src/vulkan/runtime/vk_sync_binary.c
+++ b/src/vulkan/runtime/vk_sync_binary.c
@@ -92,6 +92,7 @@ vk_sync_binary_wait_many(struct vk_device *device,
                          uint64_t abs_timeout_ns)
 {
    STACK_ARRAY(struct vk_sync_wait, timeline_waits, wait_count);
+   STACK_ARRAY_MARK_INITIALIZED(timeline_waits);
 
    for (uint32_t i = 0; i < wait_count; i++) {
       struct vk_sync_binary *binary = to_vk_sync_binary(waits[i].sync);
diff --git a/src/vulkan/runtime/vk_synchronization2.c b/src/vulkan/runtime/vk_synchronization2.c
index 8fb1d102141ad..f0440cdcf901b 100644
--- a/src/vulkan/runtime/vk_synchronization2.c
+++ b/src/vulkan/runtime/vk_synchronization2.c
@@ -212,6 +212,7 @@ vk_common_CmdWaitEvents(
    struct vk_device *device = cmd_buffer->base.device;
 
    STACK_ARRAY(VkDependencyInfo, deps, eventCount);
+   STACK_ARRAY_MARK_INITIALIZED(deps);
 
    /* Note that dstStageMask and srcStageMask in the CmdWaitEvent2() call
     * are the same.  This is to match the CmdSetEvent2() call from
diff --git a/src/vulkan/util/vk_util.h b/src/vulkan/util/vk_util.h
index d30e8ad007d98..d2428dbc12b7c 100644
--- a/src/vulkan/util/vk_util.h
+++ b/src/vulkan/util/vk_util.h
@@ -352,17 +352,14 @@ vk_spec_info_to_nir_spirv(const VkSpecializationInfo *spec_info,
 
 #define STACK_ARRAY_SIZE 8
 
-#ifdef __cplusplus
-#define STACK_ARRAY_ZERO_INIT {}
-#else
-#define STACK_ARRAY_ZERO_INIT {0}
-#endif
-
 #define STACK_ARRAY(type, name, size) \
-   type _stack_##name[STACK_ARRAY_SIZE] = STACK_ARRAY_ZERO_INIT; \
+   type _stack_##name[STACK_ARRAY_SIZE]; \
    type *const name = \
      ((size) <= STACK_ARRAY_SIZE ? _stack_##name : (type *)malloc((size) * sizeof(type)))
 
+#define STACK_ARRAY_MARK_INITIALIZED(name) \
+   ((char *)name)[0] = 0
+
 #define STACK_ARRAY_FINISH(name) \
    if (name != _stack_##name) free(name)
 
-- 
GitLab


From 8580a25abaf679a371201769675aaee2e89b7a51 Mon Sep 17 00:00:00 2001
From: Paulo Zanoni <paulo.r.zanoni@intel.com>
Date: Fri, 8 Sep 2023 16:56:40 -0700
Subject: [PATCH 3/6] vulkan: change STACK_ARRAY to use alloca()

This way, when size > STACK_ARRAY_SIZE, we won't have to reserve space
for a completely unused array. The only overhead now is a bool used to
track the need for free().

v2: Use "c99_alloca.h" instead of <alloca.h> so it compiles on
Windows.

Signed-off-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
---
 src/vulkan/util/vk_util.h | 10 ++++++----
 1 file changed, 6 insertions(+), 4 deletions(-)

diff --git a/src/vulkan/util/vk_util.h b/src/vulkan/util/vk_util.h
index d2428dbc12b7c..521c9aae884a7 100644
--- a/src/vulkan/util/vk_util.h
+++ b/src/vulkan/util/vk_util.h
@@ -26,6 +26,7 @@
 #include "util/bitscan.h"
 #include "util/macros.h"
 #include "compiler/shader_enums.h"
+#include "c99_alloca.h"
 #include <stdlib.h>
 #include <string.h>
 
@@ -353,15 +354,16 @@ vk_spec_info_to_nir_spirv(const VkSpecializationInfo *spec_info,
 #define STACK_ARRAY_SIZE 8
 
 #define STACK_ARRAY(type, name, size) \
-   type _stack_##name[STACK_ARRAY_SIZE]; \
-   type *const name = \
-     ((size) <= STACK_ARRAY_SIZE ? _stack_##name : (type *)malloc((size) * sizeof(type)))
+   const bool _##name##_stack_array_on_stack = (size) <= STACK_ARRAY_SIZE; \
+   type *const name = (_##name##_stack_array_on_stack ? \
+                        (type *)alloca((size) * sizeof(type)) : \
+                        (type *)malloc((size) * sizeof(type)))
 
 #define STACK_ARRAY_MARK_INITIALIZED(name) \
    ((char *)name)[0] = 0
 
 #define STACK_ARRAY_FINISH(name) \
-   if (name != _stack_##name) free(name)
+   if (!_##name##_stack_array_on_stack) free(name)
 
 static inline uint8_t
 vk_index_type_to_bytes(enum VkIndexType type)
-- 
GitLab


From 0df1105d5f2cc545029de0eae1372b707d7eb992 Mon Sep 17 00:00:00 2001
From: Paulo Zanoni <paulo.r.zanoni@intel.com>
Date: Mon, 11 Sep 2023 11:40:05 -0700
Subject: [PATCH 4/6] vulkan: change STACK_ARRAY_SIZE to bytes instead of
 elements

It doesn't really make a lot of sense for us to make our decision of
stack vs heap based on the number of elements because that doesn't
take into consideration sizeof(type). What we really want here is to
avoid a stack overflow, so use the actual size of the array in bytes
to make the decision. That means, of course, the number of elements
will be different based on sizeof(type) and not fixed to 8.

The value of 512 was picked after analyzing the current users. We have
some pretty big structures using STACK_ARRAY, so 512 should maintain
"fits 8 elements" for the majority of the callers, while allowing even
more elements for the smaller ones.

Signed-off-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
---
 src/vulkan/util/vk_util.h | 13 +++++++++----
 1 file changed, 9 insertions(+), 4 deletions(-)

diff --git a/src/vulkan/util/vk_util.h b/src/vulkan/util/vk_util.h
index 521c9aae884a7..dfb35e33b8c5a 100644
--- a/src/vulkan/util/vk_util.h
+++ b/src/vulkan/util/vk_util.h
@@ -351,13 +351,18 @@ struct nir_spirv_specialization*
 vk_spec_info_to_nir_spirv(const VkSpecializationInfo *spec_info,
                           uint32_t *out_num_spec_entries);
 
-#define STACK_ARRAY_SIZE 8
+/* If the total array size in bytes is bigger than this, we don't use the
+ * stack.
+ */
+#define STACK_ARRAY_SIZE_B 512
 
 #define STACK_ARRAY(type, name, size) \
-   const bool _##name##_stack_array_on_stack = (size) <= STACK_ARRAY_SIZE; \
+   const size_t _##name##_alloc_size = (size) * sizeof(type); \
+   const bool _##name##_stack_array_on_stack = \
+      _##name##_alloc_size <= STACK_ARRAY_SIZE_B; \
    type *const name = (_##name##_stack_array_on_stack ? \
-                        (type *)alloca((size) * sizeof(type)) : \
-                        (type *)malloc((size) * sizeof(type)))
+                        (type *)alloca(_##name##_alloc_size) : \
+                        (type *)malloc(_##name##_alloc_size))
 
 #define STACK_ARRAY_MARK_INITIALIZED(name) \
    ((char *)name)[0] = 0
-- 
GitLab


From 4fcc7e990a57167868f0f800c3dfff232e68d568 Mon Sep 17 00:00:00 2001
From: Paulo Zanoni <paulo.r.zanoni@intel.com>
Date: Mon, 11 Sep 2023 13:12:01 -0700
Subject: [PATCH 5/6] vulkan: make gcc warn us when we forget
 STACK_ARRAY_FINISH()
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

After this patch, _##name##_stack_array_on_stack is set but unused if
we don't call STACK_ARRAY_FINISH(). That's how I discovered the
missing call in create_rect_list_pipeline() fixed in a previous patch
of this series:

[2/9] Compiling C object src/vulkan/runtime/libvulkan_runtime.a.p/vk_meta.c.o
In file included from ../../src/vulkan/runtime/vk_meta.c:29:
../../src/vulkan/runtime/vk_meta.c: In function ‘create_rect_list_pipeline’:
../../src/vulkan/util/vk_util.h:360:15: warning: unused variable ‘_stages_stack_array_on_stack’ [-Wunused-variable]
  360 |    const bool _##name##_stack_array_on_stack = \
      |               ^
../../src/vulkan/runtime/vk_meta.c:337:4: note: in expansion of macro ‘STACK_ARRAY’
  337 |    STACK_ARRAY(VkPipelineShaderStageCreateInfo, stages,
      |    ^~~~~~~~~~~

The very small disadvantage of this patch is that the threshold check
is now duplicated. To counter that, I aligned both checks so that
they're exactly one above the other and very easy to spot in case in
the future they end up differing. Also, there's no double-evaluation
of macro arguments even with this duplicate check, so we should be
mostly fine.

Signed-off-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
---
 src/vulkan/util/vk_util.h | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/vulkan/util/vk_util.h b/src/vulkan/util/vk_util.h
index dfb35e33b8c5a..e89aeb9b268a9 100644
--- a/src/vulkan/util/vk_util.h
+++ b/src/vulkan/util/vk_util.h
@@ -359,8 +359,8 @@ vk_spec_info_to_nir_spirv(const VkSpecializationInfo *spec_info,
 #define STACK_ARRAY(type, name, size) \
    const size_t _##name##_alloc_size = (size) * sizeof(type); \
    const bool _##name##_stack_array_on_stack = \
-      _##name##_alloc_size <= STACK_ARRAY_SIZE_B; \
-   type *const name = (_##name##_stack_array_on_stack ? \
+                       _##name##_alloc_size <= STACK_ARRAY_SIZE_B; \
+   type *const name = (_##name##_alloc_size <= STACK_ARRAY_SIZE_B ? \
                         (type *)alloca(_##name##_alloc_size) : \
                         (type *)malloc(_##name##_alloc_size))
 
-- 
GitLab


From e1bc2674a451e0a5612e40871649498bc4ee0cff Mon Sep 17 00:00:00 2001
From: Paulo Zanoni <paulo.r.zanoni@intel.com>
Date: Mon, 11 Sep 2023 13:38:14 -0700
Subject: [PATCH 6/6] util: move STACK_ARRAY from vk_util.h to
 src/util/stack_array.h

There's nothing Vulkan-specific here, and I wanted to used this in
Iris (the patch that wants to use it is currently on a separate MR).

Signed-off-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
---
 src/util/meson.build      |  1 +
 src/util/stack_array.h    | 57 +++++++++++++++++++++++++++++++++++++++
 src/vulkan/util/vk_util.h | 21 +--------------
 3 files changed, 59 insertions(+), 20 deletions(-)
 create mode 100644 src/util/stack_array.h

diff --git a/src/util/meson.build b/src/util/meson.build
index ccb7c0fb02bdf..c647db3914c72 100644
--- a/src/util/meson.build
+++ b/src/util/meson.build
@@ -122,6 +122,7 @@ files_mesa_util = files(
   'softfloat.h',
   'sparse_array.c',
   'sparse_array.h',
+  'stack_array.h',
   'string_buffer.c',
   'string_buffer.h',
   'strndup.h',
diff --git a/src/util/stack_array.h b/src/util/stack_array.h
new file mode 100644
index 0000000000000..bef51d07a5f5c
--- /dev/null
+++ b/src/util/stack_array.h
@@ -0,0 +1,57 @@
+/*
+ * Copyright © 2017 Intel Corporation
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
+ * IN THE SOFTWARE.
+ */
+#ifndef STACK_ARRAY_H
+#define STACK_ARRAY_H
+
+#include <stdbool.h>
+#include <stdlib.h>
+#include "c99_alloca.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/* If the total array size in bytes is bigger than this, we don't use the
+ * stack.
+ */
+#define STACK_ARRAY_SIZE_B 512
+
+#define STACK_ARRAY(type, name, size) \
+   const size_t _##name##_alloc_size = (size) * sizeof(type); \
+   const bool _##name##_stack_array_on_stack = \
+                       _##name##_alloc_size <= STACK_ARRAY_SIZE_B; \
+   type *const name = (_##name##_alloc_size <= STACK_ARRAY_SIZE_B ? \
+                        (type *)alloca(_##name##_alloc_size) : \
+                        (type *)malloc(_##name##_alloc_size))
+
+#define STACK_ARRAY_MARK_INITIALIZED(name) \
+   ((char *)name)[0] = 0
+
+#define STACK_ARRAY_FINISH(name) \
+   if (!_##name##_stack_array_on_stack) free(name)
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* STACK_ARRAY_H */
diff --git a/src/vulkan/util/vk_util.h b/src/vulkan/util/vk_util.h
index e89aeb9b268a9..b635d0164f4de 100644
--- a/src/vulkan/util/vk_util.h
+++ b/src/vulkan/util/vk_util.h
@@ -25,8 +25,8 @@
 
 #include "util/bitscan.h"
 #include "util/macros.h"
+#include "util/stack_array.h"
 #include "compiler/shader_enums.h"
-#include "c99_alloca.h"
 #include <stdlib.h>
 #include <string.h>
 
@@ -351,25 +351,6 @@ struct nir_spirv_specialization*
 vk_spec_info_to_nir_spirv(const VkSpecializationInfo *spec_info,
                           uint32_t *out_num_spec_entries);
 
-/* If the total array size in bytes is bigger than this, we don't use the
- * stack.
- */
-#define STACK_ARRAY_SIZE_B 512
-
-#define STACK_ARRAY(type, name, size) \
-   const size_t _##name##_alloc_size = (size) * sizeof(type); \
-   const bool _##name##_stack_array_on_stack = \
-                       _##name##_alloc_size <= STACK_ARRAY_SIZE_B; \
-   type *const name = (_##name##_alloc_size <= STACK_ARRAY_SIZE_B ? \
-                        (type *)alloca(_##name##_alloc_size) : \
-                        (type *)malloc(_##name##_alloc_size))
-
-#define STACK_ARRAY_MARK_INITIALIZED(name) \
-   ((char *)name)[0] = 0
-
-#define STACK_ARRAY_FINISH(name) \
-   if (!_##name##_stack_array_on_stack) free(name)
-
 static inline uint8_t
 vk_index_type_to_bytes(enum VkIndexType type)
 {
-- 
GitLab

