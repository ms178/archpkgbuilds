From fb363903072870eeb8a7477447ccbab81728d539 Mon Sep 17 00:00:00 2001
From: Dylan Baker <dylan.c.baker@intel.com>
Date: Mon, 25 Mar 2024 12:46:19 -0700
Subject: [PATCH 1/3] meson/clover: Remove checks required for LLVM < 10

Since Clover requires LLVM >= 11, none of these checks make sense to
keep.
---
 src/gallium/targets/opencl/meson.build | 37 +++-----------------------
 1 file changed, 3 insertions(+), 34 deletions(-)

diff --git a/src/gallium/targets/opencl/meson.build b/src/gallium/targets/opencl/meson.build
index 7c14135898e61..8c7c6f14457b9 100644
--- a/src/gallium/targets/opencl/meson.build
+++ b/src/gallium/targets/opencl/meson.build
@@ -32,33 +32,11 @@ endif
 llvm_libdir = dep_llvm.get_variable(cmake : 'LLVM_LIBRARY_DIR', configtool: 'libdir')
 opencl_libname = with_opencl_icd ? 'MesaOpenCL' : 'OpenCL'
 
-polly_dep = null_dep
-polly_isl_dep = null_dep
-if dep_llvm.version().version_compare('>=10.0.0')
-  polly_dep = cpp.find_library('Polly', dirs : llvm_libdir, required : false)
-  polly_isl_dep = cpp.find_library('PollyISL', dirs : llvm_libdir, required : false)
-endif
+polly_dep = cpp.find_library('Polly', dirs : llvm_libdir, required : false)
+polly_isl_dep = cpp.find_library('PollyISL', dirs : llvm_libdir, required : false)
 
 dep_clang = cpp.find_library('clang-cpp', dirs : llvm_libdir, required : false)
-
-# meson will return clang-cpp from system dirs if it's not found in llvm_libdir
-linker_rpath_arg = '-Wl,--rpath=@0@'.format(llvm_libdir)
-clang_test_code = '''
-  #include <clang/Basic/Version.h>
-  int main (void) {
-    size_t found_pos = clang::getClangFullVersion().find(CLANG_VERSION_STRING);
-    return found_pos == ::std::string::npos ? 1 : 0;
-  }
-'''
-can_check_clang = (not meson.is_cross_build() or meson.can_run_host_binaries()) and cpp.has_link_argument(linker_rpath_arg)
-if can_check_clang
-  test_run = cpp.run(clang_test_code, name : 'dep-clang-usable',
-                     dependencies : [dep_llvm, dep_clang], args : linker_rpath_arg)
-  dep_clang_usable = test_run.compiled() and test_run.returncode() == 0
-else
-  dep_clang_usable = true
-endif
-if not _shared_llvm or not (dep_clang.found() and dep_clang_usable)
+if not dep_clang.found() or not _shared_llvm
   dep_clang = [
     cpp.find_library('clangCodeGen', dirs : llvm_libdir),
     cpp.find_library('clangFrontendTool', dirs : llvm_libdir),
@@ -78,15 +56,6 @@ if not _shared_llvm or not (dep_clang.found() and dep_clang_usable)
   if dep_llvm.version().version_compare('>= 15.0')
     dep_clang += cpp.find_library('clangSupport', dirs : llvm_libdir)
   endif
-
-  # check clang once more
-  if can_check_clang
-    test_run = cpp.run(clang_test_code, name : 'dep-clang-usable',
-                       dependencies : [dep_llvm, dep_clang], args : linker_rpath_arg)
-    if not test_run.compiled() or test_run.returncode() != 0
-      error('No usable clang found!')
-    endif
-  endif
 endif
 
 ocldef_in = files(opencl_libname + '.def.in')[0]
-- 
GitLab


From c3ef342195099ca49d7beabefce5c682b5df19c2 Mon Sep 17 00:00:00 2001
From: Dylan Baker <dylan.c.baker@intel.com>
Date: Mon, 25 Mar 2024 12:29:57 -0700
Subject: [PATCH 2/3] meson/clover: use the same clang dependency as clc

With the special tests for old LLVM dropped by the pervious patch,
they're the same. So let's save some LOC and drop them.
---
 meson.build                            |  2 +-
 src/gallium/targets/opencl/meson.build | 26 ++------------------------
 2 files changed, 3 insertions(+), 25 deletions(-)

diff --git a/meson.build b/meson.build
index d74ad39b18a30..59ce78d60c5e8 100644
--- a/meson.build
+++ b/meson.build
@@ -1848,7 +1848,7 @@ else
 endif
 
 dep_clang = null_dep
-if with_clc
+if with_clc or with_gallium_opencl
   llvm_libdir = dep_llvm.get_variable(cmake : 'LLVM_LIBRARY_DIR', configtool: 'libdir')
 
   dep_clang = cpp.find_library('clang-cpp', dirs : llvm_libdir, required : false)
diff --git a/src/gallium/targets/opencl/meson.build b/src/gallium/targets/opencl/meson.build
index 8c7c6f14457b9..1f261131feccc 100644
--- a/src/gallium/targets/opencl/meson.build
+++ b/src/gallium/targets/opencl/meson.build
@@ -35,29 +35,6 @@ opencl_libname = with_opencl_icd ? 'MesaOpenCL' : 'OpenCL'
 polly_dep = cpp.find_library('Polly', dirs : llvm_libdir, required : false)
 polly_isl_dep = cpp.find_library('PollyISL', dirs : llvm_libdir, required : false)
 
-dep_clang = cpp.find_library('clang-cpp', dirs : llvm_libdir, required : false)
-if not dep_clang.found() or not _shared_llvm
-  dep_clang = [
-    cpp.find_library('clangCodeGen', dirs : llvm_libdir),
-    cpp.find_library('clangFrontendTool', dirs : llvm_libdir),
-    cpp.find_library('clangFrontend', dirs : llvm_libdir),
-    cpp.find_library('clangDriver', dirs : llvm_libdir),
-    cpp.find_library('clangSerialization', dirs : llvm_libdir),
-    cpp.find_library('clangParse', dirs : llvm_libdir),
-    cpp.find_library('clangSema', dirs : llvm_libdir),
-    cpp.find_library('clangAnalysis', dirs : llvm_libdir),
-    cpp.find_library('clangAST', dirs : llvm_libdir),
-    cpp.find_library('clangASTMatchers', dirs : llvm_libdir),
-    cpp.find_library('clangEdit', dirs : llvm_libdir),
-    cpp.find_library('clangLex', dirs : llvm_libdir),
-    cpp.find_library('clangBasic', dirs : llvm_libdir),
-    polly_dep, polly_isl_dep,
-  ]
-  if dep_llvm.version().version_compare('>= 15.0')
-    dep_clang += cpp.find_library('clangSupport', dirs : llvm_libdir)
-  endif
-endif
-
 ocldef_in = files(opencl_libname + '.def.in')[0]
 ocldef = custom_target(
   'ocldef.def',
@@ -76,7 +53,8 @@ libopencl = shared_library(
   link_with : [libpipe_loader_dynamic, libgallium],
   dependencies : [
     idep_mesautil,
-    dep_clock, dep_dl, dep_unwind, dep_elf, dep_clang, dep_version
+    dep_clock, dep_dl, dep_unwind, dep_elf, dep_clang, dep_version, polly_dep,
+    polly_isl_dep,
   ],
   name_prefix : host_machine.system() == 'windows' ? '' : [],  # otherwise mingw will create libOpenCL-1.dll or libMesaOpenCL-1.dll
   version : '@0@.0.0'.format(opencl_version),
-- 
GitLab


From 4723c2d8e274d9e8fd38c1c1b03647351ae33a70 Mon Sep 17 00:00:00 2001
From: Dylan Baker <dylan.c.baker@intel.com>
Date: Mon, 25 Mar 2024 12:39:25 -0700
Subject: [PATCH 3/3] meson: Allow finding clang in the llvm_dir or outside of
 it

If LLVM and Clang are installed in separate prefixes (like on NixOS),
then searching in the llvm_dir will fail. This patch attempts to fix
that by searching twice, once in the llvm dir, and once with directories
unset.
---
 meson.build | 53 ++++++++++++++++++++++++++++++++++-------------------
 1 file changed, 34 insertions(+), 19 deletions(-)

diff --git a/meson.build b/meson.build
index 59ce78d60c5e8..2771eafabca80 100644
--- a/meson.build
+++ b/meson.build
@@ -1851,27 +1851,42 @@ dep_clang = null_dep
 if with_clc or with_gallium_opencl
   llvm_libdir = dep_llvm.get_variable(cmake : 'LLVM_LIBRARY_DIR', configtool: 'libdir')
 
-  dep_clang = cpp.find_library('clang-cpp', dirs : llvm_libdir, required : false)
-
-  if not dep_clang.found() or not _shared_llvm
-    clang_modules = [
-      'clangBasic', 'clangAST', 'clangCodeGen', 'clangLex',
-      'clangDriver', 'clangFrontend', 'clangFrontendTool',
-      'clangHandleCXX', 'clangHandleLLVM', 'clangSerialization',
-      'clangSema', 'clangParse', 'clangEdit', 'clangAnalysis'
-    ]
-    if dep_llvm.version().version_compare('>= 15.0')
-      clang_modules += 'clangSupport'
-    endif
-    if dep_llvm.version().version_compare('>= 16.0')
-      clang_modules += 'clangASTMatchers'
+  foreach trial : [{'dirs' : llvm_libdir}, {}]
+    dep_clang = cpp.find_library('clang-cpp', required : false, kwargs : trial)
+
+    if dep_clang.found()
+      break
     endif
 
-    dep_clang = []
-    foreach m : clang_modules
-      dep_clang += cpp.find_library(m, dirs : llvm_libdir, required : true)
-    endforeach
-  endif
+    if not _shared_llvm
+      clang_modules = [
+        'clangBasic', 'clangAST', 'clangCodeGen', 'clangLex',
+        'clangDriver', 'clangFrontend', 'clangFrontendTool',
+        'clangHandleCXX', 'clangHandleLLVM', 'clangSerialization',
+        'clangSema', 'clangParse', 'clangEdit', 'clangAnalysis'
+      ]
+      if dep_llvm.version().version_compare('>= 15.0')
+        clang_modules += 'clangSupport'
+      endif
+      if dep_llvm.version().version_compare('>= 16.0')
+        clang_modules += 'clangASTMatchers'
+      endif
+
+      dep_clang = []
+      found = true
+      foreach m : clang_modules
+        _lib = cpp.find_library(m, required : not trial.has_key('dirs'), kwargs : trial)
+        if not _lib.found()
+          found = false
+          break
+        endif
+        dep_clang += _lib
+      endforeach
+      if found
+        break
+      endif
+    endif
+  endforeach
 endif
 
 # Be explicit about only using this lib on Windows, to avoid picking
-- 
GitLab

