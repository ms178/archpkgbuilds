From e98953e68b1cf335555186c5ba093e3c65bdef98 Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Thu, 22 May 2025 16:30:46 +0100
Subject: [PATCH 1/4] aco/lower_branches: keep blocks with multiple logical
 successors

It might be the case that both the branch and exec mask write in a
divergent branch block are removed. try_remove_simple_block() might then
try to remove it, but fail because it has multiple logical successors.
Instead, just skip these blocks.

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
Backport-to: 25.1
---
 src/amd/compiler/aco_lower_branches.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/amd/compiler/aco_lower_branches.cpp b/src/amd/compiler/aco_lower_branches.cpp
index 2209b8f6f44c7..c78f17d564c86 100644
--- a/src/amd/compiler/aco_lower_branches.cpp
+++ b/src/amd/compiler/aco_lower_branches.cpp
@@ -553,7 +553,7 @@ lower_branches(Program* program)
       if (block.kind & block_kind_break)
          try_merge_break_with_continue(ctx, block);
 
-      if (block.linear_succs.size() == 1)
+      if (block.linear_succs.size() == 1 && block.logical_succs.size() <= 1)
          try_remove_simple_block(ctx, block);
    }
 
-- 
GitLab


From 837f1e851d5a4b8b78b53b2fe965069aaafe6e9f Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Tue, 27 May 2025 16:40:07 +0100
Subject: [PATCH 2/4] aco: continue when try_remove_simple_block can't remove a
 predecessor

We should update linear_preds so that the predecessors we can remove are
actually removed.

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
---
 src/amd/compiler/aco_lower_branches.cpp | 21 ++++++++++++++-------
 1 file changed, 14 insertions(+), 7 deletions(-)

diff --git a/src/amd/compiler/aco_lower_branches.cpp b/src/amd/compiler/aco_lower_branches.cpp
index c78f17d564c86..ebd74f0437397 100644
--- a/src/amd/compiler/aco_lower_branches.cpp
+++ b/src/amd/compiler/aco_lower_branches.cpp
@@ -52,6 +52,7 @@ try_remove_simple_block(branch_ctx& ctx, Block& block)
 
    unsigned succ_idx = block.linear_succs[0];
    Block& succ = ctx.program->blocks[succ_idx];
+   Block::edge_vec new_preds;
    for (unsigned pred_idx : block.linear_preds) {
       Block& pred = ctx.program->blocks[pred_idx];
       assert(pred.index < block.index);
@@ -82,12 +83,16 @@ try_remove_simple_block(branch_ctx& ctx, Block& block)
          }
 
          /* Otherwise, check if there is a fall-through path for the jump target. */
-         if (block.index >= pred.linear_succs[1])
-            return;
-         for (unsigned j = block.index + 1; j < pred.linear_succs[1]; j++) {
+         bool can_fallthrough = block.index < pred.linear_succs[1];
+         for (unsigned j = block.index + 1; can_fallthrough && j < pred.linear_succs[1]; j++) {
             if (!ctx.program->blocks[j].instructions.empty())
-               return;
+               can_fallthrough = false;
          }
+         if (!can_fallthrough) {
+            new_preds.push_back(pred_idx);
+            continue;
+         }
+
          pred.linear_succs[0] = pred.linear_succs[1];
          pred.linear_succs[1] = succ_idx;
          succ.linear_preds.push_back(pred_idx);
@@ -130,9 +135,11 @@ try_remove_simple_block(branch_ctx& ctx, Block& block)
       block.logical_preds.clear();
    }
 
-   remove_linear_successor(ctx, block, succ_idx);
-   block.linear_preds.clear();
-   block.instructions.clear();
+   block.linear_preds = new_preds;
+   if (block.linear_preds.empty()) {
+      remove_linear_successor(ctx, block, succ_idx);
+      block.instructions.clear();
+   }
 }
 
 bool
-- 
GitLab


From 834c8cc8ab1f8f4d508a3f5a4efe49c3f3aff443 Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Tue, 27 May 2025 16:39:48 +0100
Subject: [PATCH 3/4] aco: validate that preds/succs match

This isn't done in validate_cfg() because that's called less frequently.

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
---
 src/amd/compiler/aco_validate.cpp | 33 +++++++++++++++++++++++++++++++
 1 file changed, 33 insertions(+)

diff --git a/src/amd/compiler/aco_validate.cpp b/src/amd/compiler/aco_validate.cpp
index 1d246e2f8debb..34772293659f1 100644
--- a/src/amd/compiler/aco_validate.cpp
+++ b/src/amd/compiler/aco_validate.cpp
@@ -964,6 +964,39 @@ validate_ir(Program* program)
       }
    }
 
+   auto check_edge = [&program, &is_valid](const char* msg, const Block::edge_vec& vec,
+                                           Block* block, Block* other, bool other_is_pred) -> void
+   {
+      if (std::find(vec.begin(), vec.end(), block->index) == vec.end()) {
+         Block* pred = other_is_pred ? other : block;
+         Block* succ = other_is_pred ? block : other;
+         aco_err(program, "%s: BB%u->BB%u", msg, pred->index, succ->index);
+         is_valid = false;
+      }
+   };
+
+   for (Block& block : program->blocks) {
+      for (unsigned pred_idx : block.linear_preds) {
+         Block* pred = &program->blocks[pred_idx];
+         check_edge("Block is missing in linear_succs", pred->linear_succs, &block, pred, true);
+      }
+
+      for (unsigned pred_idx : block.logical_preds) {
+         Block* pred = &program->blocks[pred_idx];
+         check_edge("Block is missing in logical_succs", pred->logical_succs, &block, pred, true);
+      }
+
+      for (unsigned succ_idx : block.linear_succs) {
+         Block* succ = &program->blocks[succ_idx];
+         check_edge("Block is missing in linear_preds", succ->linear_preds, &block, succ, false);
+      }
+
+      for (unsigned succ_idx : block.logical_succs) {
+         Block* succ = &program->blocks[succ_idx];
+         check_edge("Block is missing in logical_preds", succ->logical_preds, &block, succ, false);
+      }
+   }
+
    return is_valid;
 }
 
-- 
GitLab


From 72e1d493d33011a13c2f33d74d3c7f8321b912b3 Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Tue, 27 May 2025 16:40:12 +0100
Subject: [PATCH 4/4] aco/tests: add lower_branches tests

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
---
 src/amd/compiler/tests/helpers.cpp            |  20 +++
 src/amd/compiler/tests/helpers.h              |   1 +
 src/amd/compiler/tests/meson.build            |   1 +
 .../compiler/tests/test_lower_branches.cpp    | 137 ++++++++++++++++++
 4 files changed, 159 insertions(+)
 create mode 100644 src/amd/compiler/tests/test_lower_branches.cpp

diff --git a/src/amd/compiler/tests/helpers.cpp b/src/amd/compiler/tests/helpers.cpp
index af70c208e56c0..3be302aec7754 100644
--- a/src/amd/compiler/tests/helpers.cpp
+++ b/src/amd/compiler/tests/helpers.cpp
@@ -301,6 +301,26 @@ finish_to_hw_instr_test()
    aco_print_program(program.get(), output);
 }
 
+void
+finish_lower_branches_test()
+{
+   finish_program(program.get(), true, true);
+
+   if (!aco::validate_ir(program.get())) {
+      fail_test("Validation before lower_branches failed");
+      return;
+   }
+
+   aco::lower_branches(program.get());
+
+   if (!aco::validate_ir(program.get())) {
+      fail_test("Validation after lower_branches failed");
+      return;
+   }
+
+   aco_print_program(program.get(), output);
+}
+
 void
 finish_schedule_vopd_test()
 {
diff --git a/src/amd/compiler/tests/helpers.h b/src/amd/compiler/tests/helpers.h
index a955764ce6f02..006645a4389a5 100644
--- a/src/amd/compiler/tests/helpers.h
+++ b/src/amd/compiler/tests/helpers.h
@@ -74,6 +74,7 @@ void finish_lower_subdword_test();
 void finish_ra_test(aco::ra_test_policy);
 void finish_optimizer_postRA_test();
 void finish_to_hw_instr_test();
+void finish_lower_branches_test();
 void finish_schedule_vopd_test();
 void finish_waitcnt_test();
 void finish_insert_nops_test(bool endpgm = true);
diff --git a/src/amd/compiler/tests/meson.build b/src/amd/compiler/tests/meson.build
index ba9d8a9af857f..2e5c0b3a00405 100644
--- a/src/amd/compiler/tests/meson.build
+++ b/src/amd/compiler/tests/meson.build
@@ -13,6 +13,7 @@ aco_tests_files = files(
   'test_insert_nops.cpp',
   'test_insert_waitcnt.cpp',
   'test_isel.cpp',
+  'test_lower_branches.cpp',
   'test_lower_subdword.cpp',
   'test_optimizer.cpp',
   'test_reduce_assign.cpp',
diff --git a/src/amd/compiler/tests/test_lower_branches.cpp b/src/amd/compiler/tests/test_lower_branches.cpp
new file mode 100644
index 0000000000000..e39daafcc1fe0
--- /dev/null
+++ b/src/amd/compiler/tests/test_lower_branches.cpp
@@ -0,0 +1,137 @@
+/*
+ * Copyright Â© 2025 Valve Corporation
+ *
+ * SPDX-License-Identifier: MIT
+ */
+#include "helpers.h"
+
+using namespace aco;
+
+BEGIN_TEST(lower_branches.remove_block.single_linear_succ_multiple_logical_succs)
+   if (!setup_cs(NULL, GFX12))
+      return;
+
+   while (program->blocks.size() < 7)
+      program->create_and_insert_block();
+
+   Block* if_block = &program->blocks[0];
+   Block* then_logical = &program->blocks[1];
+   Block* then_linear = &program->blocks[2];
+   Block* invert = &program->blocks[3];
+   Block* else_logical = &program->blocks[4];
+   Block* else_linear = &program->blocks[5];
+   Block* endif_block = &program->blocks[6];
+
+   if_block->kind |= block_kind_branch;
+   then_logical->kind |= block_kind_uniform;
+   then_linear->kind |= block_kind_uniform;
+   invert->kind |= block_kind_invert;
+   else_logical->kind |= block_kind_uniform;
+   else_linear->kind |= block_kind_uniform;
+   endif_block->kind |= block_kind_uniform | block_kind_merge | block_kind_top_level;
+
+   /* Set up logical CF */
+   then_logical->logical_preds.push_back(if_block->index);
+   else_logical->logical_preds.push_back(if_block->index);
+   endif_block->logical_preds.push_back(then_logical->index);
+   endif_block->logical_preds.push_back(else_logical->index);
+
+   /* Set up linear CF */
+   then_logical->linear_preds.push_back(if_block->index);
+   then_linear->linear_preds.push_back(if_block->index);
+   invert->linear_preds.push_back(then_logical->index);
+   invert->linear_preds.push_back(then_linear->index);
+   else_logical->linear_preds.push_back(invert->index);
+   else_linear->linear_preds.push_back(invert->index);
+   endif_block->linear_preds.push_back(else_logical->index);
+   endif_block->linear_preds.push_back(else_linear->index);
+
+   /* BB0 has a single linear successor but multiple logical successors. try_remove_simple_block()
+    * should skip this.
+    */
+   //>> ACO shader stage: SW (CS), HW (COMPUTE_SHADER)
+   //! BB1
+   //! /* logical preds: BB0, / linear preds: BB0, / kind: uniform, */
+   //!    s1: %0:s[0] = s_mov_b32 0
+   //! BB6
+   //! /* logical preds: BB1, BB0, / linear preds: BB1, / kind: uniform, top-level, merge, */
+   //!    s_endpgm
+   bld.reset(if_block);
+   bld.sop1(aco_opcode::s_mov_b64, Definition(exec, s2), Operand::c64(1));
+   bld.branch(aco_opcode::p_cbranch_z, Operand(exec, s2), then_linear->index, then_logical->index)
+      .instr->branch()
+      .never_taken = true;
+
+   bld.reset(then_logical);
+   bld.sop1(aco_opcode::s_mov_b32, Definition(PhysReg(0), s1), Operand::c32(0));
+   bld.branch(aco_opcode::p_branch, invert->index);
+
+   bld.reset(then_linear);
+   bld.branch(aco_opcode::p_branch, invert->index);
+
+   bld.reset(invert);
+   bld.sop2(aco_opcode::s_andn2_b64, Definition(exec, s2), Definition(scc, s1), Operand::c64(-1),
+            Operand(exec, s2));
+   bld.branch(aco_opcode::p_cbranch_z, Operand(exec, s2), else_linear->index, else_logical->index);
+
+   bld.reset(else_logical);
+   bld.branch(aco_opcode::p_branch, endif_block->index);
+
+   bld.reset(else_linear);
+   bld.branch(aco_opcode::p_branch, endif_block->index);
+
+   bld.reset(endif_block);
+   bld.sop1(aco_opcode::s_mov_b64, Definition(exec, s2), Operand::c64(-1));
+
+   finish_lower_branches_test();
+END_TEST
+
+BEGIN_TEST(lower_branches.remove_block.update_preds_on_partial_fail)
+   if (!setup_cs(NULL, GFX12))
+      return;
+
+   while (program->blocks.size() < 7)
+      program->create_and_insert_block();
+
+   //>> BB0
+   //! /* logical preds: / linear preds: / kind: top-level, */
+   //!    s_cbranch_scc0 block:BB5
+   bld.reset(&program->blocks[0]);
+   bld.branch(aco_opcode::p_cbranch_nz, Operand(scc, s1), 2, 1);
+   program->blocks[1].linear_preds.push_back(0);
+   program->blocks[2].linear_preds.push_back(0);
+
+   bld.reset(&program->blocks[1]);
+   bld.branch(aco_opcode::p_branch, 3);
+   program->blocks[3].linear_preds.push_back(1);
+
+   //! BB2
+   //! /* logical preds: / linear preds: BB0, / kind: */
+   //!    s_cbranch_scc1 block:BB6
+   bld.reset(&program->blocks[2]);
+   bld.branch(aco_opcode::p_cbranch_nz, Operand(scc, s1), 6, 3);
+   program->blocks[3].linear_preds.push_back(2);
+   program->blocks[6].linear_preds.push_back(2);
+
+   /* BB3 has BB1 and BB2 as predecessors. We can replace BB1's jump with one to BB5, but not BB2's
+    * because we can't fallthrough from BB2 to BB5. If we skip removing a predecessor from BB3, we
+    * should still update BB3's linear predecessor vector. */
+   //! BB3
+   //! /* logical preds: / linear preds: BB2, / kind: */
+   //!    s_branch block:BB5
+   bld.reset(&program->blocks[3]);
+   bld.branch(aco_opcode::p_branch, 5);
+   program->blocks[5].linear_preds.push_back(3);
+
+   //! BB4
+   //! /* logical preds: / linear preds: / kind: uniform, */
+   //!    s_endpgm
+   //! BB5
+   //! /* logical preds: / linear preds: BB3, BB0, / kind: uniform, */
+   //!    s_endpgm
+   //! BB6
+   //! /* logical preds: / linear preds: BB2, / kind: uniform, */
+   //!    s_endpgm
+
+   finish_lower_branches_test();
+END_TEST
-- 
GitLab

