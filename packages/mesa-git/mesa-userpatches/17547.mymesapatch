From 3fe699e150754d4d15ec5442e753cdb571e6d3d9 Mon Sep 17 00:00:00 2001
From: Georg Lehmann <dadschoorse@gmail.com>
Date: Thu, 14 Jul 2022 21:16:44 +0200
Subject: [PATCH] aco: Copy propagate p_create_vector of sub-dwords extracts.

This pattern is common for pack_32_2x16_split with the result of packed
instructions.

Signed-off-by: Georg Lehmann <dadschoorse@gmail.com>
---
 src/amd/compiler/aco_optimizer.cpp | 25 +++++++++++++++++++++++++
 1 file changed, 25 insertions(+)

diff --git a/src/amd/compiler/aco_optimizer.cpp b/src/amd/compiler/aco_optimizer.cpp
index d8337418e22e..7a90a6cf4542 100644
--- a/src/amd/compiler/aco_optimizer.cpp
+++ b/src/amd/compiler/aco_optimizer.cpp
@@ -1610,6 +1610,31 @@ label_instruction(opt_ctx& ctx, aco_ptr<Instruction>& instr)
                ctx.info[instr->definitions[0].tempId()].set_temp(split->operands[0].getTemp());
          }
       }
+
+      /* copy propagate subdword p_extract_vector */
+      if (instr->operands.size() > 1 && instr->operands[0].isTemp() &&
+          ctx.info[instr->operands[0].tempId()].is_temp()) {
+         Temp candidate = ctx.info[instr->operands[0].tempId()].temp;
+         bool recombine = true;
+         for (unsigned i = 1; i < instr->operands.size(); i++) {
+            if (!instr->operands[i].isTemp() ||
+                !ctx.info[instr->operands[i].tempId()].is_extract()) {
+               recombine = false;
+               break;
+            }
+            Instruction* extract = ctx.info[instr->operands[i].tempId()].instr;
+            if (extract->opcode != aco_opcode::p_extract_vector || !extract->operands[0].isTemp() ||
+                extract->operands[0].getTemp() != candidate ||
+                extract->operands[1].constantValue() != i) {
+               recombine = false;
+               break;
+            }
+         }
+
+         if (recombine)
+            ctx.info[instr->definitions[0].tempId()].set_temp(candidate);
+      }
+
       break;
    }
    case aco_opcode::p_split_vector: {
-- 
GitLab

