From 8bace30c4caec2a675ae66fd6f6a0f02e4cde4d8 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Daniel=20Sch=C3=BCrmann?= <daniel@schuermann.dev>
Date: Wed, 9 Oct 2024 10:37:10 +0200
Subject: [PATCH 1/6] aco/scheduler: always respect min_waves on GFX10+

It could theoretically happen that for large workgroups,
the scheduler used more registers than allowed.

No fossil changes.

Cc: mesa-stable
---
 src/amd/compiler/aco_scheduler.cpp | 8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

diff --git a/src/amd/compiler/aco_scheduler.cpp b/src/amd/compiler/aco_scheduler.cpp
index c3ec3c9409738..0d613078c2e57 100644
--- a/src/amd/compiler/aco_scheduler.cpp
+++ b/src/amd/compiler/aco_scheduler.cpp
@@ -1264,8 +1264,12 @@ schedule_program(Program* program)
    ctx.num_waves = std::max<uint16_t>(ctx.num_waves / wave_fac, 1);
 
    assert(ctx.num_waves > 0);
-   ctx.mv.max_registers = {int16_t(get_addr_vgpr_from_waves(program, ctx.num_waves * wave_fac) - 2),
-                           int16_t(get_addr_sgpr_from_waves(program, ctx.num_waves * wave_fac))};
+   ctx.mv.max_registers = {
+      int16_t(get_addr_vgpr_from_waves(
+                 program, std::max<uint16_t>(ctx.num_waves * wave_fac, program->min_waves)) -
+              2),
+      int16_t(get_addr_sgpr_from_waves(
+         program, std::max<uint16_t>(ctx.num_waves * wave_fac, program->min_waves)))};
 
    /* NGG culling shaders are very sensitive to position export scheduling.
     * Schedule less aggressively when early primitive export is used, and
-- 
GitLab


From 765defd5b8faebd037b3b82e86922ff136d3c8e5 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Daniel=20Sch=C3=BCrmann?= <daniel@schuermann.dev>
Date: Wed, 24 Jul 2024 11:48:47 +0200
Subject: [PATCH 2/6] aco/scheduler: stop rounding down the target number of
 waves on GFX10+

This way, it can make use of uneven wave numbers.

Totals from 4078 (5.14% of 79395) affected shaders: (Navi21)
MaxWaves: 58715 -> 65460 (+11.49%); split: +11.49%, -0.01%
Instrs: 5033684 -> 5048244 (+0.29%); split: -0.09%, +0.38%
CodeSize: 26833884 -> 26898780 (+0.24%); split: -0.07%, +0.32%
VGPRs: 302360 -> 265312 (-12.25%); split: -12.26%, +0.01%
Latency: 34636448 -> 36044242 (+4.06%); split: -0.08%, +4.14%
InvThroughput: 7999403 -> 7662697 (-4.21%); split: -4.55%, +0.34%
VClause: 105403 -> 111996 (+6.26%); split: -0.40%, +6.66%
SClause: 132996 -> 133460 (+0.35%); split: -0.81%, +1.16%
Copies: 297036 -> 308122 (+3.73%); split: -0.64%, +4.37%
Branches: 89376 -> 89390 (+0.02%); split: -0.00%, +0.02%
VALU: 3477621 -> 3488510 (+0.31%); split: -0.05%, +0.36%
SALU: 484211 -> 484191 (-0.00%); split: -0.08%, +0.08%

Totals from 1840 (2.32% of 79395) affected shaders: (Navi31)
MaxWaves: 30714 -> 34182 (+11.29%)
Instrs: 3102955 -> 3131001 (+0.90%); split: -0.05%, +0.95%
CodeSize: 16160564 -> 16273100 (+0.70%); split: -0.04%, +0.74%
VGPRs: 174540 -> 150600 (-13.72%)
Latency: 23521914 -> 24515055 (+4.22%); split: -0.07%, +4.29%
InvThroughput: 4373397 -> 4202912 (-3.90%); split: -4.40%, +0.50%
VClause: 59087 -> 64091 (+8.47%); split: -0.24%, +8.71%
SClause: 74844 -> 75366 (+0.70%); split: -0.53%, +1.22%
Copies: 184396 -> 197747 (+7.24%); split: -0.25%, +7.49%
Branches: 46015 -> 46028 (+0.03%); split: -0.00%, +0.03%
VALU: 1929286 -> 1942709 (+0.70%); split: -0.02%, +0.71%
SALU: 216126 -> 215983 (-0.07%); split: -0.18%, +0.12%
VOPD: 1216 -> 1217 (+0.08%); split: +1.40%, -1.32%
---
 src/amd/compiler/aco_scheduler.cpp | 13 ++++---------
 1 file changed, 4 insertions(+), 9 deletions(-)

diff --git a/src/amd/compiler/aco_scheduler.cpp b/src/amd/compiler/aco_scheduler.cpp
index 0d613078c2e57..b654b975323e5 100644
--- a/src/amd/compiler/aco_scheduler.cpp
+++ b/src/amd/compiler/aco_scheduler.cpp
@@ -1246,7 +1246,6 @@ schedule_program(Program* program)
    /* Allowing the scheduler to reduce the number of waves to as low as 5
     * improves performance of Thrones of Britannia significantly and doesn't
     * seem to hurt anything else. */
-   // TODO: account for possible uneven num_waves on GFX10+
    unsigned wave_fac = program->dev.physical_vgprs / 256;
    if (program->num_waves <= 5 * wave_fac)
       ctx.num_waves = program->num_waves;
@@ -1260,17 +1259,13 @@ schedule_program(Program* program)
    ctx.num_waves = std::min<uint16_t>(ctx.num_waves, program->num_waves);
    ctx.num_waves = max_suitable_waves(program, ctx.num_waves);
 
+   assert(ctx.num_waves >= program->min_waves);
+   ctx.mv.max_registers = {int16_t(get_addr_vgpr_from_waves(program, ctx.num_waves) - 2),
+                           int16_t(get_addr_sgpr_from_waves(program, ctx.num_waves))};
+
    /* VMEM_MAX_MOVES and such assume pre-GFX10 wave count */
    ctx.num_waves = std::max<uint16_t>(ctx.num_waves / wave_fac, 1);
 
-   assert(ctx.num_waves > 0);
-   ctx.mv.max_registers = {
-      int16_t(get_addr_vgpr_from_waves(
-                 program, std::max<uint16_t>(ctx.num_waves * wave_fac, program->min_waves)) -
-              2),
-      int16_t(get_addr_sgpr_from_waves(
-         program, std::max<uint16_t>(ctx.num_waves * wave_fac, program->min_waves)))};
-
    /* NGG culling shaders are very sensitive to position export scheduling.
     * Schedule less aggressively when early primitive export is used, and
     * keep the position export at the very bottom when late primitive export is used.
-- 
GitLab


From 4ab90e5748afdfd951fc0149f59d0a4512dabc1c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Daniel=20Sch=C3=BCrmann?= <daniel@schuermann.dev>
Date: Wed, 24 Jul 2024 13:12:28 +0200
Subject: [PATCH 3/6] aco: unify get_addr_sgpr_from_waves() and
 get_addr_vgpr_from_waves() into one function

which returns the limit as RegisterDemand.

Also remove the unused get_extra_sgprs() from aco_ir.h.
---
 .../compiler/aco_instruction_selection.cpp    |  2 +-
 src/amd/compiler/aco_ir.h                     |  6 +----
 src/amd/compiler/aco_live_var_analysis.cpp    | 24 +++++++------------
 src/amd/compiler/aco_register_allocation.cpp  | 12 ++++------
 src/amd/compiler/aco_scheduler.cpp            |  4 ++--
 src/amd/compiler/aco_spill.cpp                | 15 ++++++------
 src/amd/compiler/aco_validate.cpp             |  2 +-
 7 files changed, 26 insertions(+), 39 deletions(-)

diff --git a/src/amd/compiler/aco_instruction_selection.cpp b/src/amd/compiler/aco_instruction_selection.cpp
index 90f6bac6742c7..6b05e1e36ce79 100644
--- a/src/amd/compiler/aco_instruction_selection.cpp
+++ b/src/amd/compiler/aco_instruction_selection.cpp
@@ -12703,7 +12703,7 @@ get_arg_fixed(const struct ac_shader_args* args, struct ac_arg arg)
 unsigned
 load_vb_descs(Builder& bld, PhysReg dest, Operand base, unsigned start, unsigned max)
 {
-   unsigned sgpr_limit = get_addr_sgpr_from_waves(bld.program, bld.program->min_waves);
+   unsigned sgpr_limit = get_addr_regs_from_waves(bld.program, bld.program->min_waves).sgpr;
    unsigned count = MIN2((sgpr_limit - dest.reg()) / 4u, max);
    for (unsigned i = 0; i < count;) {
       unsigned size = 1u << util_logbase2(MIN2(count - i, 4));
diff --git a/src/amd/compiler/aco_ir.h b/src/amd/compiler/aco_ir.h
index 4b5a30893c5f1..5673b63899efa 100644
--- a/src/amd/compiler/aco_ir.h
+++ b/src/amd/compiler/aco_ir.h
@@ -2320,9 +2320,6 @@ int get_op_fixed_to_def(Instruction* instr);
 RegisterDemand get_live_changes(Instruction* instr);
 RegisterDemand get_temp_registers(Instruction* instr);
 
-/* number of sgprs that need to be allocated but might notbe addressable as s0-s105 */
-uint16_t get_extra_sgprs(Program* program);
-
 /* adjust num_waves for workgroup size and LDS limits */
 uint16_t max_suitable_waves(Program* program, uint16_t waves);
 
@@ -2331,8 +2328,7 @@ uint16_t get_sgpr_alloc(Program* program, uint16_t addressable_sgprs);
 uint16_t get_vgpr_alloc(Program* program, uint16_t addressable_vgprs);
 
 /* return number of addressable sgprs/vgprs for max_waves */
-uint16_t get_addr_sgpr_from_waves(Program* program, uint16_t max_waves);
-uint16_t get_addr_vgpr_from_waves(Program* program, uint16_t max_waves);
+RegisterDemand get_addr_regs_from_waves(Program* program, uint16_t waves);
 
 bool uses_scratch(Program* program);
 
diff --git a/src/amd/compiler/aco_live_var_analysis.cpp b/src/amd/compiler/aco_live_var_analysis.cpp
index 20bfaf51b6f1c..4e7163ca14184 100644
--- a/src/amd/compiler/aco_live_var_analysis.cpp
+++ b/src/amd/compiler/aco_live_var_analysis.cpp
@@ -428,23 +428,19 @@ round_down(unsigned a, unsigned b)
    return a - (a % b);
 }
 
-uint16_t
-get_addr_sgpr_from_waves(Program* program, uint16_t waves)
+RegisterDemand
+get_addr_regs_from_waves(Program* program, uint16_t waves)
 {
    /* it's not possible to allocate more than 128 SGPRs */
    uint16_t sgprs = std::min(program->dev.physical_sgprs / waves, 128);
-   sgprs = round_down(sgprs, program->dev.sgpr_alloc_granule);
-   sgprs -= get_extra_sgprs(program);
-   return std::min(sgprs, program->dev.sgpr_limit);
-}
+   sgprs = round_down(sgprs, program->dev.sgpr_alloc_granule) - get_extra_sgprs(program);
+   sgprs = std::min(sgprs, program->dev.sgpr_limit);
 
-uint16_t
-get_addr_vgpr_from_waves(Program* program, uint16_t waves)
-{
    uint16_t vgprs = program->dev.physical_vgprs / waves;
    vgprs = vgprs / program->dev.vgpr_alloc_granule * program->dev.vgpr_alloc_granule;
    vgprs -= program->config->num_shared_vgprs / 2;
-   return std::min(vgprs, program->dev.vgpr_limit);
+   vgprs = std::min(vgprs, program->dev.vgpr_limit);
+   return RegisterDemand(vgprs, sgprs);
 }
 
 void
@@ -496,11 +492,10 @@ void
 update_vgpr_sgpr_demand(Program* program, const RegisterDemand new_demand)
 {
    assert(program->min_waves >= 1);
-   uint16_t sgpr_limit = get_addr_sgpr_from_waves(program, program->min_waves);
-   uint16_t vgpr_limit = get_addr_vgpr_from_waves(program, program->min_waves);
+   RegisterDemand limit = get_addr_regs_from_waves(program, program->min_waves);
 
    /* this won't compile, register pressure reduction necessary */
-   if (new_demand.vgpr > vgpr_limit || new_demand.sgpr > sgpr_limit) {
+   if (new_demand.exceeds(limit)) {
       program->num_waves = 0;
       program->max_reg_demand = new_demand;
    } else {
@@ -513,8 +508,7 @@ update_vgpr_sgpr_demand(Program* program, const RegisterDemand new_demand)
 
       /* Adjust for LDS and workgroup multiples and calculate max_reg_demand */
       program->num_waves = max_suitable_waves(program, program->num_waves);
-      program->max_reg_demand.vgpr = get_addr_vgpr_from_waves(program, program->num_waves);
-      program->max_reg_demand.sgpr = get_addr_sgpr_from_waves(program, program->num_waves);
+      program->max_reg_demand = get_addr_regs_from_waves(program, program->num_waves);
    }
 }
 
diff --git a/src/amd/compiler/aco_register_allocation.cpp b/src/amd/compiler/aco_register_allocation.cpp
index efbd4e7d2b895..46e2e3188cce0 100644
--- a/src/amd/compiler/aco_register_allocation.cpp
+++ b/src/amd/compiler/aco_register_allocation.cpp
@@ -112,8 +112,7 @@ struct ra_ctx {
    aco_ptr<Instruction> phi_dummy;
    uint16_t max_used_sgpr = 0;
    uint16_t max_used_vgpr = 0;
-   uint16_t sgpr_limit;
-   uint16_t vgpr_limit;
+   RegisterDemand limit;
    std::bitset<512> war_hint;
    PhysRegIterator rr_sgpr_it;
    PhysRegIterator rr_vgpr_it;
@@ -131,8 +130,7 @@ struct ra_ctx {
    {
       pseudo_dummy.reset(create_instruction(aco_opcode::p_parallelcopy, Format::PSEUDO, 0, 0));
       phi_dummy.reset(create_instruction(aco_opcode::p_linear_phi, Format::PSEUDO, 0, 0));
-      sgpr_limit = get_addr_sgpr_from_waves(program, program->min_waves);
-      vgpr_limit = get_addr_vgpr_from_waves(program, program->min_waves);
+      limit = get_addr_regs_from_waves(program, program->min_waves);
 
       sgpr_bounds = program->max_reg_demand.sgpr;
       vgpr_bounds = program->max_reg_demand.vgpr;
@@ -797,7 +795,7 @@ add_subdword_definition(Program* program, aco_ptr<Instruction>& instr, PhysReg r
 void
 adjust_max_used_regs(ra_ctx& ctx, RegClass rc, unsigned reg)
 {
-   uint16_t max_addressible_sgpr = ctx.sgpr_limit;
+   uint16_t max_addressible_sgpr = ctx.limit.sgpr;
    unsigned size = rc.size();
    if (rc.type() == RegType::vgpr) {
       assert(reg >= 256);
@@ -1438,13 +1436,13 @@ bool
 increase_register_file(ra_ctx& ctx, RegClass rc)
 {
    if (rc.type() == RegType::vgpr && ctx.num_linear_vgprs == 0 &&
-       ctx.vgpr_bounds < ctx.vgpr_limit) {
+       ctx.vgpr_bounds < ctx.limit.vgpr) {
       /* If vgpr_bounds is less than max_reg_demand.vgpr, this should be a no-op. */
       update_vgpr_sgpr_demand(
          ctx.program, RegisterDemand(ctx.vgpr_bounds + 1, ctx.program->max_reg_demand.sgpr));
 
       ctx.vgpr_bounds = ctx.program->max_reg_demand.vgpr;
-   } else if (rc.type() == RegType::sgpr && ctx.program->max_reg_demand.sgpr < ctx.sgpr_limit) {
+   } else if (rc.type() == RegType::sgpr && ctx.program->max_reg_demand.sgpr < ctx.limit.sgpr) {
       update_vgpr_sgpr_demand(
          ctx.program, RegisterDemand(ctx.program->max_reg_demand.vgpr, ctx.sgpr_bounds + 1));
 
diff --git a/src/amd/compiler/aco_scheduler.cpp b/src/amd/compiler/aco_scheduler.cpp
index b654b975323e5..5ff955567db1d 100644
--- a/src/amd/compiler/aco_scheduler.cpp
+++ b/src/amd/compiler/aco_scheduler.cpp
@@ -1260,8 +1260,8 @@ schedule_program(Program* program)
    ctx.num_waves = max_suitable_waves(program, ctx.num_waves);
 
    assert(ctx.num_waves >= program->min_waves);
-   ctx.mv.max_registers = {int16_t(get_addr_vgpr_from_waves(program, ctx.num_waves) - 2),
-                           int16_t(get_addr_sgpr_from_waves(program, ctx.num_waves))};
+   ctx.mv.max_registers = get_addr_regs_from_waves(program, ctx.num_waves);
+   ctx.mv.max_registers.vgpr -= 2;
 
    /* VMEM_MAX_MOVES and such assume pre-GFX10 wave count */
    ctx.num_waves = std::max<uint16_t>(ctx.num_waves / wave_fac, 1);
diff --git a/src/amd/compiler/aco_spill.cpp b/src/amd/compiler/aco_spill.cpp
index ae7ae16e3298b..49304c5006022 100644
--- a/src/amd/compiler/aco_spill.cpp
+++ b/src/amd/compiler/aco_spill.cpp
@@ -1618,30 +1618,29 @@ spill(Program* program)
 
    /* calculate target register demand */
    const RegisterDemand demand = program->max_reg_demand; /* current max */
-   const uint16_t sgpr_limit = get_addr_sgpr_from_waves(program, program->min_waves);
-   const uint16_t vgpr_limit = get_addr_vgpr_from_waves(program, program->min_waves);
+   const RegisterDemand limit = get_addr_regs_from_waves(program, program->min_waves);
    uint16_t extra_vgprs = 0;
    uint16_t extra_sgprs = 0;
 
    /* calculate extra VGPRs required for spilling SGPRs */
-   if (demand.sgpr > sgpr_limit) {
-      unsigned sgpr_spills = demand.sgpr - sgpr_limit;
+   if (demand.sgpr > limit.sgpr) {
+      unsigned sgpr_spills = demand.sgpr - limit.sgpr;
       extra_vgprs = DIV_ROUND_UP(sgpr_spills * 2, program->wave_size) + 1;
    }
    /* add extra SGPRs required for spilling VGPRs */
-   if (demand.vgpr + extra_vgprs > vgpr_limit) {
+   if (demand.vgpr + extra_vgprs > limit.vgpr) {
       if (program->gfx_level >= GFX9)
          extra_sgprs = 1; /* SADDR */
       else
          extra_sgprs = 5; /* scratch_resource (s4) + scratch_offset (s1) */
-      if (demand.sgpr + extra_sgprs > sgpr_limit) {
+      if (demand.sgpr + extra_sgprs > limit.sgpr) {
          /* re-calculate in case something has changed */
-         unsigned sgpr_spills = demand.sgpr + extra_sgprs - sgpr_limit;
+         unsigned sgpr_spills = demand.sgpr + extra_sgprs - limit.sgpr;
          extra_vgprs = DIV_ROUND_UP(sgpr_spills * 2, program->wave_size) + 1;
       }
    }
    /* the spiller has to target the following register demand */
-   const RegisterDemand target(vgpr_limit - extra_vgprs, sgpr_limit - extra_sgprs);
+   const RegisterDemand target(limit.vgpr - extra_vgprs, limit.sgpr - extra_sgprs);
 
    /* initialize ctx */
    spill_ctx ctx(target, program);
diff --git a/src/amd/compiler/aco_validate.cpp b/src/amd/compiler/aco_validate.cpp
index 293d973699803..19e3e5099b03d 100644
--- a/src/amd/compiler/aco_validate.cpp
+++ b/src/amd/compiler/aco_validate.cpp
@@ -1391,7 +1391,7 @@ validate_ra(Program* program)
    bool err = false;
    aco::live_var_analysis(program);
    std::vector<std::vector<Temp>> phi_sgpr_ops(program->blocks.size());
-   uint16_t sgpr_limit = get_addr_sgpr_from_waves(program, program->num_waves);
+   uint16_t sgpr_limit = get_addr_regs_from_waves(program, program->num_waves).sgpr;
 
    std::vector<Assignment> assignments(program->peekAllocationId());
    for (Block& block : program->blocks) {
-- 
GitLab


From 0ef837bf6213469b2389798a05601a811d2503ff Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Daniel=20Sch=C3=BCrmann?= <daniel@schuermann.dev>
Date: Thu, 18 Apr 2024 16:58:11 +0200
Subject: [PATCH 4/6] aco/scheduler: keep track of RegisterDemand at
 UpwardsCursor::insert_idx

---
 src/amd/compiler/aco_scheduler.cpp | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)

diff --git a/src/amd/compiler/aco_scheduler.cpp b/src/amd/compiler/aco_scheduler.cpp
index 5ff955567db1d..7a5e96b415505 100644
--- a/src/amd/compiler/aco_scheduler.cpp
+++ b/src/amd/compiler/aco_scheduler.cpp
@@ -71,6 +71,8 @@ struct UpwardsCursor {
 
    /* Maximum demand of instructions from insert_idx (inclusive) to source_idx (exclusive) */
    RegisterDemand total_demand;
+   /* Register demand immediately before the first use instruction. */
+   RegisterDemand insert_demand;
 
    UpwardsCursor(int source_idx_) : source_idx(source_idx_)
    {
@@ -335,6 +337,8 @@ MoveState::upwards_update_insert_idx(UpwardsCursor& cursor)
 {
    cursor.insert_idx = cursor.source_idx;
    cursor.total_demand = block->instructions[cursor.insert_idx]->register_demand;
+   const RegisterDemand temp = get_temp_registers(block->instructions[cursor.insert_idx - 1].get());
+   cursor.insert_demand = block->instructions[cursor.insert_idx - 1]->register_demand - temp;
 }
 
 MoveResult
@@ -360,10 +364,7 @@ MoveState::upwards_move(UpwardsCursor& cursor)
    const RegisterDemand temp = get_temp_registers(instr.get());
    if (RegisterDemand(cursor.total_demand + candidate_diff).exceeds(max_registers))
       return move_fail_pressure;
-   const RegisterDemand temp2 =
-      get_temp_registers(block->instructions[cursor.insert_idx - 1].get());
-   const RegisterDemand new_demand =
-      block->instructions[cursor.insert_idx - 1]->register_demand - temp2 + candidate_diff + temp;
+   const RegisterDemand new_demand = cursor.insert_demand + candidate_diff + temp;
    if (new_demand.exceeds(max_registers))
       return move_fail_pressure;
 
@@ -375,8 +376,7 @@ MoveState::upwards_move(UpwardsCursor& cursor)
    for (int i = cursor.insert_idx + 1; i <= cursor.source_idx; i++)
       block->instructions[i]->register_demand += candidate_diff;
    cursor.total_demand += candidate_diff;
-
-   cursor.total_demand.update(block->instructions[cursor.source_idx]->register_demand);
+   cursor.insert_demand += candidate_diff;
 
    cursor.insert_idx++;
    cursor.source_idx++;
-- 
GitLab


From 498da3525df07e03cf5d72c0b8cc42e71e1be125 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Daniel=20Sch=C3=BCrmann?= <daniel@schuermann.dev>
Date: Fri, 19 Apr 2024 11:43:00 +0200
Subject: [PATCH 5/6] aco/scheduler: keep track of RegisterDemand at
 DownwardsCursor::insert_idx{_clause}

---
 src/amd/compiler/aco_scheduler.cpp | 18 +++++++++++++++---
 1 file changed, 15 insertions(+), 3 deletions(-)

diff --git a/src/amd/compiler/aco_scheduler.cpp b/src/amd/compiler/aco_scheduler.cpp
index 7a5e96b415505..f467e4d5cada7 100644
--- a/src/amd/compiler/aco_scheduler.cpp
+++ b/src/amd/compiler/aco_scheduler.cpp
@@ -52,6 +52,10 @@ struct DownwardsCursor {
    RegisterDemand clause_demand;
    /* Maximum demand of instructions from source_idx to insert_idx_clause (both exclusive) */
    RegisterDemand total_demand;
+   /* Register demand immediately before the insert_idx_clause. */
+   RegisterDemand insert_demand_clause;
+   /* Register demand immediately before the insert_idx. */
+   RegisterDemand insert_demand;
 
    DownwardsCursor(int current_idx, RegisterDemand initial_clause_demand)
        : source_idx(current_idx - 1), insert_idx_clause(current_idx), insert_idx(current_idx + 1),
@@ -187,6 +191,12 @@ MoveState::downwards_init(int current_idx, bool improved_rar_, bool may_form_cla
    }
 
    DownwardsCursor cursor(current_idx, block->instructions[current_idx]->register_demand);
+   RegisterDemand temp = get_temp_registers(block->instructions[cursor.insert_idx - 1].get());
+   cursor.insert_demand = block->instructions[cursor.insert_idx - 1]->register_demand - temp;
+   temp = get_temp_registers(block->instructions[cursor.insert_idx_clause - 1].get());
+   cursor.insert_demand_clause =
+      block->instructions[cursor.insert_idx_clause - 1]->register_demand - temp;
+
    cursor.verify_invariants(block);
    return cursor;
 }
@@ -236,9 +246,9 @@ MoveState::downwards_move(DownwardsCursor& cursor, bool add_to_clause)
 
    /* New demand for the moved instruction */
    const RegisterDemand temp = get_temp_registers(instr.get());
-   const RegisterDemand temp2 = get_temp_registers(block->instructions[dest_insert_idx - 1].get());
-   const RegisterDemand new_demand =
-      block->instructions[dest_insert_idx - 1]->register_demand - temp2 + temp;
+   const RegisterDemand insert_demand =
+      add_to_clause ? cursor.insert_demand_clause : cursor.insert_demand;
+   const RegisterDemand new_demand = insert_demand + temp;
    if (new_demand.exceeds(max_registers))
       return move_fail_pressure;
 
@@ -260,8 +270,10 @@ MoveState::downwards_move(DownwardsCursor& cursor, bool add_to_clause)
       cursor.clause_demand.update(new_demand);
    } else {
       cursor.clause_demand -= candidate_diff;
+      cursor.insert_demand -= candidate_diff;
       cursor.insert_idx--;
    }
+   cursor.insert_demand_clause -= candidate_diff;
 
    cursor.source_idx--;
    cursor.verify_invariants(block);
-- 
GitLab


From 345146f839a2af08c950afeaad86ab1a4533f423 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Daniel=20Sch=C3=BCrmann?= <daniel@schuermann.dev>
Date: Wed, 24 Jul 2024 11:51:31 +0200
Subject: [PATCH 6/6] aco/scheduler: improve scheduling heuristic

The heuristic we are currently using still stems from the GCN era
with the only adjustments being made for RDNA was to double (or triple)
the wave count.

This rewrite aims to detangle some concepts and provide more consistent results.

 - wave_factor: The purpose of this value is to reflect that RDNA SIMDs can
                accomodate twice as many waves as GCN SIMDs.
 - reg_file_multiple: This value accounts for the larger register file of wave32
                      and some RDNA3 families.
 - wave_minimum: Below this value, we don't sacrifice any waves. It corresponds
                 to a register demand of 64 VGPRs in wave64.
 - occupancy_factor: Depending on target_waves and wave_factor, this controls
                     the scheduling window sizes and number of moves.

The main differences from the previous heuristic is a lower wave minimum and
a slightly less aggressive reduction of waves.
It also increases SMEM_MAX_MOVES in order to mitigate some of the changes
from targeting less waves.

Totals from 44431 (71.79% of 61893) affected shaders: (Bonaire)
MaxWaves: 299687 -> 296182 (-1.17%); split: +0.86%, -2.03%
Instrs: 23410339 -> 23368977 (-0.18%); split: -0.30%, +0.12%
CodeSize: 115049968 -> 114880136 (-0.15%); split: -0.26%, +0.11%
SGPRs: 2700164 -> 2806962 (+3.96%); split: -0.73%, +4.69%
VGPRs: 1865124 -> 1905684 (+2.17%); split: -0.89%, +3.06%
Latency: 240133437 -> 238304789 (-0.76%); split: -1.24%, +0.48%
InvThroughput: 119764699 -> 119737568 (-0.02%); split: -0.17%, +0.15%
VClause: 499780 -> 491675 (-1.62%); split: -2.95%, +1.33%
SClause: 825657 -> 760647 (-7.87%); split: -8.64%, +0.76%
Copies: 2246063 -> 2242450 (-0.16%); split: -1.50%, +1.34%
Branches: 404473 -> 404420 (-0.01%); split: -0.02%, +0.01%
VALU: 16604748 -> 16591001 (-0.08%); split: -0.17%, +0.09%
SALU: 2457813 -> 2468097 (+0.42%); split: -0.37%, +0.79%

Totals from 44780 (71.02% of 63053) affected shaders: (Vega10)
MaxWaves: 313712 -> 312190 (-0.49%); split: +0.80%, -1.29%
Instrs: 23273350 -> 23230586 (-0.18%); split: -0.26%, +0.07%
CodeSize: 121245220 -> 121070144 (-0.14%); split: -0.21%, +0.07%
SGPRs: 2959216 -> 3082704 (+4.17%); split: -0.49%, +4.66%
VGPRs: 1841648 -> 1874076 (+1.76%); split: -0.87%, +2.63%
Latency: 240051899 -> 238177669 (-0.78%); split: -1.24%, +0.46%
InvThroughput: 119588600 -> 119564015 (-0.02%); split: -0.17%, +0.15%
VClause: 502636 -> 494056 (-1.71%); split: -2.91%, +1.21%
SClause: 820644 -> 751743 (-8.40%); split: -9.05%, +0.65%
Copies: 2162195 -> 2157140 (-0.23%); split: -1.18%, +0.94%
Branches: 415160 -> 415204 (+0.01%); split: -0.01%, +0.02%
VALU: 16774463 -> 16763882 (-0.06%); split: -0.14%, +0.07%
SALU: 2178564 -> 2183698 (+0.24%); split: -0.26%, +0.50%

Totals from 57582 (72.53% of 79395) affected shaders: (Navi21)
MaxWaves: 1443566 -> 1456212 (+0.88%); split: +1.80%, -0.93%
Instrs: 41917962 -> 41877492 (-0.10%); split: -0.18%, +0.09%
CodeSize: 225082248 -> 224919760 (-0.07%); split: -0.16%, +0.09%
VGPRs: 2499408 -> 2507712 (+0.33%); split: -1.67%, +2.00%
Latency: 302996694 -> 302368297 (-0.21%); split: -1.18%, +0.98%
InvThroughput: 69006703 -> 68992092 (-0.02%); split: -0.16%, +0.14%
VClause: 875091 -> 874829 (-0.03%); split: -1.53%, +1.50%
SClause: 1280029 -> 1204760 (-5.88%); split: -6.32%, +0.44%
Copies: 3054533 -> 3059980 (+0.18%); split: -0.83%, +1.01%
Branches: 1062242 -> 1062266 (+0.00%); split: -0.01%, +0.01%
VALU: 26823737 -> 26822770 (-0.00%); split: -0.08%, +0.08%
SALU: 5597050 -> 5603988 (+0.12%); split: -0.11%, +0.23%

Totals from 61849 (77.90% of 79395) affected shaders: (Navi31)
MaxWaves: 1859477 -> 1836577 (-1.23%); split: +0.01%, -1.24%
Instrs: 42398309 -> 42314711 (-0.20%); split: -0.33%, +0.13%
CodeSize: 221689252 -> 221357656 (-0.15%); split: -0.27%, +0.12%
VGPRs: 3011296 -> 3043264 (+1.06%); split: -0.17%, +1.23%
Latency: 291512507 -> 289861706 (-0.57%); split: -0.93%, +0.36%
InvThroughput: 45439059 -> 45436322 (-0.01%); split: -0.17%, +0.17%
VClause: 815792 -> 802713 (-1.60%); split: -2.42%, +0.81%
SClause: 1264060 -> 1197622 (-5.26%); split: -5.68%, +0.42%
Copies: 2745760 -> 2737480 (-0.30%); split: -1.19%, +0.89%
Branches: 836523 -> 836584 (+0.01%); split: -0.00%, +0.01%
VALU: 24242929 -> 24230364 (-0.05%); split: -0.12%, +0.07%
SALU: 4044994 -> 4049032 (+0.10%); split: -0.17%, +0.27%
VOPD: 8107 -> 8112 (+0.06%); split: +1.04%, -0.97%
---
 src/amd/compiler/aco_scheduler.cpp | 53 ++++++++++++++----------------
 1 file changed, 24 insertions(+), 29 deletions(-)

diff --git a/src/amd/compiler/aco_scheduler.cpp b/src/amd/compiler/aco_scheduler.cpp
index f467e4d5cada7..57d084981e907 100644
--- a/src/amd/compiler/aco_scheduler.cpp
+++ b/src/amd/compiler/aco_scheduler.cpp
@@ -13,17 +13,17 @@
 #include <unordered_set>
 #include <vector>
 
-#define SMEM_WINDOW_SIZE    (350 - ctx.num_waves * 35)
-#define VMEM_WINDOW_SIZE    (1024 - ctx.num_waves * 64)
+#define SMEM_WINDOW_SIZE    (256 - ctx.occupancy_factor * 16)
+#define VMEM_WINDOW_SIZE    (1024 - ctx.occupancy_factor * 64)
 #define LDS_WINDOW_SIZE     64
 #define POS_EXP_WINDOW_SIZE 512
-#define SMEM_MAX_MOVES      (64 - ctx.num_waves * 4)
-#define VMEM_MAX_MOVES      (256 - ctx.num_waves * 16)
+#define SMEM_MAX_MOVES      (128 - ctx.occupancy_factor * 8)
+#define VMEM_MAX_MOVES      (256 - ctx.occupancy_factor * 16)
 #define LDSDIR_MAX_MOVES    10
 #define LDS_MAX_MOVES       32
 /* creating clauses decreases def-use distances, so make it less aggressive the lower num_waves is */
-#define VMEM_CLAUSE_MAX_GRAB_DIST (ctx.num_waves * 2)
-#define VMEM_STORE_CLAUSE_MAX_GRAB_DIST (ctx.num_waves * 4)
+#define VMEM_CLAUSE_MAX_GRAB_DIST       (ctx.occupancy_factor * 2)
+#define VMEM_STORE_CLAUSE_MAX_GRAB_DIST (ctx.occupancy_factor * 4)
 #define POS_EXP_MAX_MOVES         512
 
 namespace aco {
@@ -116,7 +116,7 @@ struct MoveState {
 
 struct sched_ctx {
    amd_gfx_level gfx_level;
-   int16_t num_waves;
+   int16_t occupancy_factor;
    int16_t last_SMEM_stall;
    int last_SMEM_dep_idx;
    MoveState mv;
@@ -746,7 +746,7 @@ schedule_SMEM(sched_ctx& ctx, Block* block, Instruction* current, int idx)
       /* only move VMEM instructions below descriptor loads. be more aggressive at higher num_waves
        * to help create more vmem clauses */
       if ((candidate->isVMEM() || candidate->isFlatLike()) &&
-          (cursor.insert_idx - cursor.source_idx > (ctx.num_waves * 4) ||
+          (cursor.insert_idx - cursor.source_idx > (ctx.occupancy_factor * 4) ||
            current->operands[0].size() == 4))
          break;
       /* don't move descriptor loads below buffer loads */
@@ -848,7 +848,7 @@ schedule_SMEM(sched_ctx& ctx, Block* block, Instruction* current, int idx)
    }
 
    ctx.last_SMEM_dep_idx = found_dependency ? up_cursor.insert_idx : 0;
-   ctx.last_SMEM_stall = 10 - ctx.num_waves - k;
+   ctx.last_SMEM_stall = 10 - ctx.occupancy_factor - k;
 }
 
 void
@@ -1248,35 +1248,30 @@ schedule_program(Program* program)
    RegisterDemand demand;
    for (Block& block : program->blocks)
       demand.update(block.register_demand);
-   demand.vgpr += program->config->num_shared_vgprs / 2;
 
    sched_ctx ctx;
    ctx.gfx_level = program->gfx_level;
    ctx.mv.depends_on.resize(program->peekAllocationId());
    ctx.mv.RAR_dependencies.resize(program->peekAllocationId());
    ctx.mv.RAR_dependencies_clause.resize(program->peekAllocationId());
-   /* Allowing the scheduler to reduce the number of waves to as low as 5
-    * improves performance of Thrones of Britannia significantly and doesn't
-    * seem to hurt anything else. */
-   unsigned wave_fac = program->dev.physical_vgprs / 256;
-   if (program->num_waves <= 5 * wave_fac)
-      ctx.num_waves = program->num_waves;
-   else if (demand.vgpr >= 29)
-      ctx.num_waves = 5 * wave_fac;
-   else if (demand.vgpr >= 25)
-      ctx.num_waves = 6 * wave_fac;
-   else
-      ctx.num_waves = 7 * wave_fac;
-   ctx.num_waves = std::max<uint16_t>(ctx.num_waves, program->min_waves);
-   ctx.num_waves = std::min<uint16_t>(ctx.num_waves, program->num_waves);
-   ctx.num_waves = max_suitable_waves(program, ctx.num_waves);
-
-   assert(ctx.num_waves >= program->min_waves);
-   ctx.mv.max_registers = get_addr_regs_from_waves(program, ctx.num_waves);
+
+   const int wave_factor = program->gfx_level >= GFX10 ? 2 : 1;
+   const float reg_file_multiple = program->dev.physical_vgprs / (256.0 * wave_factor);
+   const int wave_minimum = std::max<int>(program->min_waves, 4 * wave_factor * reg_file_multiple);
+
+   /* If we already have less waves than the minimum, don't reduce them further.
+    * Otherwise, sacrifice some waves and use more VGPRs, in order to improve scheduling.
+    */
+   int vpgr_demand = std::max<int>(24, demand.vgpr) + 12 * reg_file_multiple;
+   int target_waves = std::max(wave_minimum, program->dev.physical_vgprs / vpgr_demand);
+   target_waves = max_suitable_waves(program, std::min<int>(program->num_waves, target_waves));
+   assert(target_waves >= program->min_waves);
+
+   ctx.mv.max_registers = get_addr_regs_from_waves(program, target_waves);
    ctx.mv.max_registers.vgpr -= 2;
 
    /* VMEM_MAX_MOVES and such assume pre-GFX10 wave count */
-   ctx.num_waves = std::max<uint16_t>(ctx.num_waves / wave_fac, 1);
+   ctx.occupancy_factor = target_waves / wave_factor;
 
    /* NGG culling shaders are very sensitive to position export scheduling.
     * Schedule less aggressively when early primitive export is used, and
-- 
GitLab

