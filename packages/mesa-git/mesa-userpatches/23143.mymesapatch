From 35ef1212e7d3c6097f78937c978ecfe2cf731697 Mon Sep 17 00:00:00 2001
From: Chia-I Wu <olvaffe@gmail.com>
Date: Fri, 19 May 2023 15:29:19 -0700
Subject: [PATCH 1/3] amd/drm-shim: add raven2

It differs from raven in interesting ways (e.g., GB_ADDR_CONFIG).
---
 src/amd/drm-shim/amdgpu_devices.c | 129 ++++++++++++++++++++++++++++++
 1 file changed, 129 insertions(+)

diff --git a/src/amd/drm-shim/amdgpu_devices.c b/src/amd/drm-shim/amdgpu_devices.c
index 315015fabac6..c99bddfb89d3 100644
--- a/src/amd/drm-shim/amdgpu_devices.c
+++ b/src/amd/drm-shim/amdgpu_devices.c
@@ -170,6 +170,135 @@ const struct amdgpu_device amdgpu_devices[] = {
          },
       },
    },
+   {
+      .name = "raven2",
+      .radeon_family = CHIP_RAVEN2,
+      .hw_ip_gfx = {
+         .hw_ip_version_major = 9,
+         .hw_ip_version_minor = 0,
+         .capabilities_flags = 0llu,
+         .ib_start_alignment = 32,
+         .ib_size_alignment = 32,
+         .available_rings = 0x1,
+         .ip_discovery_version = 0x0000,
+      },
+      .hw_ip_compute = {
+         .hw_ip_version_major = 9,
+         .hw_ip_version_minor = 0,
+         .capabilities_flags = 0llu,
+         .ib_start_alignment = 32,
+         .ib_size_alignment = 32,
+         .available_rings = 0xf,
+         .ip_discovery_version = 0x0000,
+      },
+      .fw_gfx_me = {
+         .ver = 166,
+         .feature = 53,
+      },
+      .fw_gfx_pfp = {
+         .ver = 194,
+         .feature = 53,
+      },
+      .fw_gfx_mec = {
+         .ver = 464,
+         .feature = 53,
+      },
+      .mmr_regs = {
+         0x263e, 0xffffffff, 0x26013041,
+      },
+      .mmr_reg_count = 1,
+      .dev = {
+         .device_id = 0x15d8,
+         .chip_rev = 0x09,
+         .external_rev = 0x82,
+         .pci_rev = 0xea,
+         .family = AMDGPU_FAMILY_RV,
+         .num_shader_engines = 1,
+         .num_shader_arrays_per_engine = 1,
+         .gpu_counter_freq = 100000,
+         .max_engine_clock = 600000llu,
+         .max_memory_clock = 800000llu,
+         .cu_active_number = 3,
+         .cu_ao_mask = 0x7,
+         .cu_bitmap = {
+            { 0x7, 0x0, 0x0, 0x0, },
+            { 0x0, 0x0, 0x0, 0x0, },
+            { 0x0, 0x0, 0x0, 0x0, },
+            { 0x0, 0x0, 0x0, 0x0, },
+         },
+         .enabled_rb_pipes_mask = 0x1,
+         .num_rb_pipes = 1,
+         .num_hw_gfx_contexts = 8,
+         .pcie_gen = 0,
+         .ids_flags = 0x1llu,
+         .virtual_address_offset = 0x200000llu,
+         .virtual_address_max = 0x800000000000llu,
+         .virtual_address_alignment = 4096,
+         .pte_fragment_size = 2097152,
+         .gart_page_size = 4096,
+         .ce_ram_size = 32768,
+         .vram_type = 8,
+         .vram_bit_width = 64,
+         .vce_harvest_config = 0,
+         .gc_double_offchip_lds_buf = 1,
+         .prim_buf_gpu_addr = 0llu,
+         .pos_buf_gpu_addr = 0llu,
+         .cntl_sb_buf_gpu_addr = 0llu,
+         .param_buf_gpu_addr = 0llu,
+         .prim_buf_size = 0,
+         .pos_buf_size = 0,
+         .cntl_sb_buf_size = 0,
+         .param_buf_size = 0,
+         .wave_front_size = 64,
+         .num_shader_visible_vgprs = 256,
+         .num_cu_per_sh = 3,
+         .num_tcc_blocks = 2,
+         .gs_vgt_table_depth = 32,
+         .gs_prim_buffer_depth = 1792,
+         .max_gs_waves_per_vgt = 32,
+         .pcie_num_lanes = 0,
+         .cu_ao_bitmap = {
+            { 0x7, 0x0, 0x0, 0x0, },
+            { 0x0, 0x0, 0x0, 0x0, },
+            { 0x0, 0x0, 0x0, 0x0, },
+            { 0x0, 0x0, 0x0, 0x0, },
+         },
+         .high_va_offset = 0xffff800000000000llu,
+         .high_va_max = 0xffffffffffe00000llu,
+         .pa_sc_tile_steering_override = 0,
+         .tcc_disabled_mask = 0llu,
+         .min_engine_clock = 0llu,
+         .min_memory_clock = 0llu,
+         .tcp_cache_size = 0,
+         .num_sqc_per_wgp = 0,
+         .sqc_data_cache_size = 0,
+         .sqc_inst_cache_size = 0,
+         .gl1c_cache_size = 0,
+         .gl2c_cache_size = 0,
+         .mall_size = 0llu,
+         .enabled_rb_pipes_mask_hi = 0,
+      },
+      .mem = {
+         .vram = {
+            .total_heap_size = 67108864,
+            .usable_heap_size = 50491392,
+            .heap_usage = 51437568,
+            .max_allocation = 37868544,
+         },
+         .cpu_accessible_vram = {
+            .total_heap_size = 67108864,
+            .usable_heap_size = 50491392,
+            .heap_usage = 51437568,
+            .max_allocation = 37868544,
+         },
+         .gtt = {
+            .total_heap_size = 3057070080,
+            .usable_heap_size = 3052445696,
+            .heap_usage = 62390272,
+            .max_allocation = 2289334272,
+         },
+      },
+   },
    {
       .name = "stoney",
       .radeon_family = CHIP_STONEY,
-- 
GitLab


From cc4c6c577fd82870b9cfeae1b754706cbfcbec91 Mon Sep 17 00:00:00 2001
From: Chia-I Wu <olvaffe@gmail.com>
Date: Fri, 19 May 2023 15:30:33 -0700
Subject: [PATCH 2/3] ac/surface: print tile_swizzle as well

swizzle modes that are *_X or *_T depend on tile_swizzle.
---
 src/amd/common/ac_surface.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/amd/common/ac_surface.c b/src/amd/common/ac_surface.c
index b6b195fb81d8..e167e6a07d04 100644
--- a/src/amd/common/ac_surface.c
+++ b/src/amd/common/ac_surface.c
@@ -3244,10 +3244,10 @@ void ac_surface_print_info(FILE *out, const struct radeon_info *info,
    if (info->gfx_level >= GFX9) {
       fprintf(out,
               "    Surf: size=%" PRIu64 ", slice_size=%" PRIu64 ", "
-              "alignment=%u, swmode=%u, epitch=%u, pitch=%u, blk_w=%u, "
+              "alignment=%u, swmode=%u, tile_swizzle=%u, epitch=%u, pitch=%u, blk_w=%u, "
               "blk_h=%u, bpe=%u, flags=0x%"PRIx64"\n",
               surf->surf_size, surf->u.gfx9.surf_slice_size,
-              1 << surf->surf_alignment_log2, surf->u.gfx9.swizzle_mode,
+              1 << surf->surf_alignment_log2, surf->u.gfx9.swizzle_mode, surf->tile_swizzle,
               surf->u.gfx9.epitch, surf->u.gfx9.surf_pitch,
               surf->blk_w, surf->blk_h, surf->bpe, surf->flags);
 
-- 
GitLab


From 5e5461d17525b8b89b1e5aa8e23c5086a0d836fc Mon Sep 17 00:00:00 2001
From: Chia-I Wu <olvaffe@gmail.com>
Date: Fri, 19 May 2023 15:59:53 -0700
Subject: [PATCH 3/3] radv: do not use a pipe offset for aliased images

Fixes dEQP-VK.ycbcr.plane_view.memory_alias.* on raven2.

Fixes: 1c065650260 ("radv: expose disjoint image support")
---
 src/amd/vulkan/radv_image.c | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/src/amd/vulkan/radv_image.c b/src/amd/vulkan/radv_image.c
index bfe215dacfc6..d3bedf8fc58d 100644
--- a/src/amd/vulkan/radv_image.c
+++ b/src/amd/vulkan/radv_image.c
@@ -1738,7 +1738,8 @@ radv_get_ac_surf_info(struct radv_device *device, const struct radv_image *image
    info.num_channels = vk_format_get_nr_components(image->vk.format);
 
    if (!vk_format_is_depth_or_stencil(image->vk.format) && !image->shareable &&
-       !(image->vk.create_flags & VK_IMAGE_CREATE_SPARSE_ALIASED_BIT) &&
+       !(image->vk.create_flags & (VK_IMAGE_CREATE_SPARSE_ALIASED_BIT |
+                                   VK_IMAGE_CREATE_ALIAS_BIT)) &&
        image->vk.tiling != VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT) {
       info.surf_index = &device->image_mrt_offset_counter;
    }
-- 
GitLab

