From 807ad78a1f5ce73d5f76c45a829b2ef0dc07f495 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Sat, 22 Jun 2024 04:34:12 -0400
Subject: [PATCH 1/3] ac/nir/cdna: allow 16-bit coordinates

This can occur with the new compute blit shader.

Fixes: 30af861bff71c7ec - radeonsi: restructure (rewrite) the compute blit shader
---
 src/amd/common/ac_nir_lower_image_opcodes_cdna.c | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/src/amd/common/ac_nir_lower_image_opcodes_cdna.c b/src/amd/common/ac_nir_lower_image_opcodes_cdna.c
index a1586224df32a..91c78c6560f8a 100644
--- a/src/amd/common/ac_nir_lower_image_opcodes_cdna.c
+++ b/src/amd/common/ac_nir_lower_image_opcodes_cdna.c
@@ -53,6 +53,9 @@ static nir_def *lower_image_coords(nir_builder *b, nir_def *desc, nir_def *coord
    unsigned num_coord_components = get_coord_components(dim, is_array);
    nir_def *zero = nir_imm_int(b, 0);
 
+   if (coord->bit_size == 16)
+      coord = nir_u2u32(b, coord);
+
    /* Get coordinates. */
    nir_def *x = nir_channel(b, coord, 0);
    nir_def *y = num_coord_components >= 2 ? nir_channel(b, coord, 1) : NULL;
@@ -157,6 +160,9 @@ static nir_def *emulated_tex_level_zero(nir_builder *b, unsigned num_components,
    nir_def *fp_one = nir_imm_floatN_t(b, 1, bit_size);
    nir_def *coord[3] = {0};
 
+   if (coord_vec->bit_size == 16)
+      coord_vec = nir_f2f32(b, coord_vec);
+
    assert(num_coord_components <= 3);
    for (unsigned i = 0; i < num_coord_components; i++)
       coord[i] = nir_channel(b, coord_vec, i);
-- 
GitLab


From d018bcc7761208cbf9f7ab0ff4a4d08d851c32fe Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Sat, 22 Jun 2024 04:39:37 -0400
Subject: [PATCH 2/3] ac/nir/cdna: ignore image_descriptor intrinsics

Fixes: 30af861bff71c7ec - radeonsi: restructure (rewrite) the compute blit shader
---
 src/amd/common/ac_nir_lower_image_opcodes_cdna.c | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/src/amd/common/ac_nir_lower_image_opcodes_cdna.c b/src/amd/common/ac_nir_lower_image_opcodes_cdna.c
index 91c78c6560f8a..2f046d0f92747 100644
--- a/src/amd/common/ac_nir_lower_image_opcodes_cdna.c
+++ b/src/amd/common/ac_nir_lower_image_opcodes_cdna.c
@@ -343,6 +343,12 @@ static bool lower_image_opcodes(nir_builder *b, nir_instr *instr, void *data)
                                                   32, intr->src[0].ssa);
          break;
 
+      /* These don't need any lowering. */
+      case nir_intrinsic_image_descriptor_amd:
+      case nir_intrinsic_image_deref_descriptor_amd:
+      case nir_intrinsic_bindless_image_descriptor_amd:
+         return false;
+
       default:
          intr_name = nir_intrinsic_infos[intr->intrinsic].name;
 
-- 
GitLab


From 31b2107a450aeb8a57cc175d7c3075af1314161d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Sat, 22 Jun 2024 04:40:20 -0400
Subject: [PATCH 3/3] ac/nir/cdna: don't use image_descriptor intrinsics if the
 src is a descriptor

Fixes: 30af861bff71c7ec - radeonsi: restructure (rewrite) the compute blit shader
---
 .../common/ac_nir_lower_image_opcodes_cdna.c  | 31 +++++++++++++++----
 1 file changed, 25 insertions(+), 6 deletions(-)

diff --git a/src/amd/common/ac_nir_lower_image_opcodes_cdna.c b/src/amd/common/ac_nir_lower_image_opcodes_cdna.c
index 2f046d0f92747..c770cb713bd19 100644
--- a/src/amd/common/ac_nir_lower_image_opcodes_cdna.c
+++ b/src/amd/common/ac_nir_lower_image_opcodes_cdna.c
@@ -302,6 +302,7 @@ static bool lower_image_opcodes(nir_builder *b, nir_instr *instr, void *data)
       enum gl_access_qualifier access;
       enum glsl_sampler_dim dim;
       bool is_array;
+      unsigned num_desc_components;
       nir_def *desc = NULL, *result = NULL;
       ASSERTED const char *intr_name;
 
@@ -316,8 +317,14 @@ static bool lower_image_opcodes(nir_builder *b, nir_instr *instr, void *data)
          if (dim == GLSL_SAMPLER_DIM_BUF)
             return false;
          is_array = nir_intrinsic_image_array(intr);
-         desc = nir_image_descriptor_amd(b, dim == GLSL_SAMPLER_DIM_BUF ? 4 : 8,
-                                         32, intr->src[0].ssa);
+         num_desc_components = dim == GLSL_SAMPLER_DIM_BUF ? 4 : 8;
+
+         if (intr->src[0].ssa->bit_size == 32 &&
+             intr->src[0].ssa->num_components == num_desc_components)
+            desc = intr->src[0].ssa;
+         else
+            desc = nir_image_descriptor_amd(b, num_desc_components,
+                                            32, intr->src[0].ssa);
          break;
 
       case nir_intrinsic_image_deref_load:
@@ -328,8 +335,14 @@ static bool lower_image_opcodes(nir_builder *b, nir_instr *instr, void *data)
          if (dim == GLSL_SAMPLER_DIM_BUF)
             return false;
          is_array = glsl_sampler_type_is_array(deref->type);
-         desc = nir_image_deref_descriptor_amd(b, dim == GLSL_SAMPLER_DIM_BUF ? 4 : 8,
-                                               32, intr->src[0].ssa);
+         num_desc_components = dim == GLSL_SAMPLER_DIM_BUF ? 4 : 8;
+
+         if (intr->src[0].ssa->bit_size == 32 &&
+             intr->src[0].ssa->num_components == num_desc_components)
+            desc = intr->src[0].ssa;
+         else
+            desc = nir_image_deref_descriptor_amd(b, num_desc_components,
+                                                  32, intr->src[0].ssa);
          break;
 
       case nir_intrinsic_bindless_image_load:
@@ -339,8 +352,14 @@ static bool lower_image_opcodes(nir_builder *b, nir_instr *instr, void *data)
          if (dim == GLSL_SAMPLER_DIM_BUF)
             return false;
          is_array = nir_intrinsic_image_array(intr);
-         desc = nir_bindless_image_descriptor_amd(b, dim == GLSL_SAMPLER_DIM_BUF ? 4 : 8,
-                                                  32, intr->src[0].ssa);
+         num_desc_components = dim == GLSL_SAMPLER_DIM_BUF ? 4 : 8;
+
+         if (intr->src[0].ssa->bit_size == 32 &&
+             intr->src[0].ssa->num_components == num_desc_components)
+            desc = intr->src[0].ssa;
+         else
+            desc = nir_bindless_image_descriptor_amd(b, num_desc_components,
+                                                     32, intr->src[0].ssa);
          break;
 
       /* These don't need any lowering. */
-- 
GitLab

