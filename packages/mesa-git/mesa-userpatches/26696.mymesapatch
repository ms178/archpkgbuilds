From 942ec9af0c560baac31cb9cf7197e3f1f57f3b02 Mon Sep 17 00:00:00 2001
From: Tatsuyuki Ishi <ishitatsuyuki@gmail.com>
Date: Sun, 21 Jan 2024 17:48:44 +0900
Subject: [PATCH 1/4] radv: Add radv_spirv_to_nir_options that summarize early
 gfx states.

radv_shader_spirv_to_nir now takes a more minimal struct instead of gfx
states. This struct will be used for NIR cache hashing in the future.
---
 src/amd/vulkan/nir/radv_nir.h                        | 2 +-
 src/amd/vulkan/nir/radv_nir_lower_intrinsics_early.c | 4 ++--
 src/amd/vulkan/radv_pipeline_graphics.c              | 7 ++++++-
 src/amd/vulkan/radv_shader.c                         | 7 +++----
 src/amd/vulkan/radv_shader.h                         | 7 ++++++-
 5 files changed, 18 insertions(+), 9 deletions(-)

diff --git a/src/amd/vulkan/nir/radv_nir.h b/src/amd/vulkan/nir/radv_nir.h
index 796a71040f727..06850cabbaf86 100644
--- a/src/amd/vulkan/nir/radv_nir.h
+++ b/src/amd/vulkan/nir/radv_nir.h
@@ -64,7 +64,7 @@ bool radv_nir_lower_fs_intrinsics(nir_shader *nir, const struct radv_shader_stag
 bool radv_nir_lower_fs_barycentric(nir_shader *shader, const struct radv_graphics_state_key *gfx_state,
                                    unsigned rast_prim);
 
-bool radv_nir_lower_intrinsics_early(nir_shader *nir, const struct radv_graphics_state_key *gfx_state);
+bool radv_nir_lower_intrinsics_early(nir_shader *nir, bool lower_view_index_to_zero);
 
 bool radv_nir_lower_view_index(nir_shader *nir, bool per_primitive);
 
diff --git a/src/amd/vulkan/nir/radv_nir_lower_intrinsics_early.c b/src/amd/vulkan/nir/radv_nir_lower_intrinsics_early.c
index b7868bd2b9e89..0a32c684d80fc 100644
--- a/src/amd/vulkan/nir/radv_nir_lower_intrinsics_early.c
+++ b/src/amd/vulkan/nir/radv_nir_lower_intrinsics_early.c
@@ -29,7 +29,7 @@
 #include "radv_private.h"
 
 bool
-radv_nir_lower_intrinsics_early(nir_shader *nir, const struct radv_graphics_state_key *gfx_state)
+radv_nir_lower_intrinsics_early(nir_shader *nir, bool lower_view_index_to_zero)
 {
    nir_function_impl *entry = nir_shader_get_entrypoint(nir);
    bool progress = false;
@@ -52,7 +52,7 @@ radv_nir_lower_intrinsics_early(nir_shader *nir, const struct radv_graphics_stat
             def = nir_ior(&b, intrin->src[0].ssa, intrin->src[1].ssa);
             break;
          case nir_intrinsic_load_view_index:
-            if (gfx_state->has_multiview_view_index)
+            if (!lower_view_index_to_zero)
                continue;
             def = nir_imm_zero(&b, 1, 32);
             break;
diff --git a/src/amd/vulkan/radv_pipeline_graphics.c b/src/amd/vulkan/radv_pipeline_graphics.c
index dd2558d508926..7dea2b04596b0 100644
--- a/src/amd/vulkan/radv_pipeline_graphics.c
+++ b/src/amd/vulkan/radv_pipeline_graphics.c
@@ -2465,7 +2465,12 @@ radv_graphics_shaders_compile(struct radv_device *device, struct vk_pipeline_cac
 
       /* NIR might already have been imported from a library. */
       if (!stages[s].nir) {
-         stages[s].nir = radv_shader_spirv_to_nir(device, &stages[s], gfx_state, is_internal);
+         struct radv_spirv_to_nir_options options = {
+            .lower_view_index_to_zero = !gfx_state->has_multiview_view_index,
+            .fix_dual_src_mrt1_export =
+               gfx_state->ps.epilog.mrt0_is_dual_src && device->instance->drirc.dual_color_blend_by_location,
+         };
+         stages[s].nir = radv_shader_spirv_to_nir(device, &stages[s], &options, is_internal);
       }
 
       stages[s].feedback.duration += os_time_get_nano() - stage_start;
diff --git a/src/amd/vulkan/radv_shader.c b/src/amd/vulkan/radv_shader.c
index 821dde34bfa37..8faa8a3b996ce 100644
--- a/src/amd/vulkan/radv_shader.c
+++ b/src/amd/vulkan/radv_shader.c
@@ -301,7 +301,7 @@ fix_dual_src_mrt1_export(nir_shader *nir)
 
 nir_shader *
 radv_shader_spirv_to_nir(struct radv_device *device, const struct radv_shader_stage *stage,
-                         const struct radv_graphics_state_key *gfx_state, bool is_internal)
+                         const struct radv_spirv_to_nir_options *options, bool is_internal)
 {
    unsigned subgroup_size = 64, ballot_bit_size = 64;
    const unsigned required_subgroup_size = stage->key.subgroup_required_size * 32;
@@ -492,8 +492,7 @@ radv_shader_spirv_to_nir(struct radv_device *device, const struct radv_shader_st
       NIR_PASS(_, nir, nir_remove_dead_variables,
                nir_var_shader_in | nir_var_shader_out | nir_var_system_value | nir_var_mem_shared, &dead_vars_opts);
 
-      if (nir->info.stage == MESA_SHADER_FRAGMENT && gfx_state->ps.epilog.mrt0_is_dual_src &&
-          device->instance->drirc.dual_color_blend_by_location)
+      if (nir->info.stage == MESA_SHADER_FRAGMENT && options->fix_dual_src_mrt1_export)
          fix_dual_src_mrt1_export(nir);
 
       /* Variables can make nir_propagate_invariant more conservative
@@ -648,7 +647,7 @@ radv_shader_spirv_to_nir(struct radv_device *device, const struct radv_shader_st
    NIR_PASS(_, nir, nir_lower_explicit_io, nir_var_mem_ubo | nir_var_mem_ssbo,
             nir_address_format_vec2_index_32bit_offset);
 
-   NIR_PASS(_, nir, radv_nir_lower_intrinsics_early, gfx_state);
+   NIR_PASS(_, nir, radv_nir_lower_intrinsics_early, options && options->lower_view_index_to_zero);
 
    /* Lower deref operations for compute shared memory. */
    if (nir->info.stage == MESA_SHADER_COMPUTE || nir->info.stage == MESA_SHADER_TASK ||
diff --git a/src/amd/vulkan/radv_shader.h b/src/amd/vulkan/radv_shader.h
index aa6f30395cd6a..873ea3898a7a7 100644
--- a/src/amd/vulkan/radv_shader.h
+++ b/src/amd/vulkan/radv_shader.h
@@ -117,6 +117,11 @@ struct radv_ps_epilog_key {
    bool alpha_to_coverage_via_mrtz;
 };
 
+struct radv_spirv_to_nir_options {
+   uint32_t lower_view_index_to_zero : 1;
+   uint32_t fix_dual_src_mrt1_export : 1;
+};
+
 struct radv_graphics_state_key {
    uint32_t lib_flags : 4; /* VkGraphicsPipelineLibraryFlagBitsEXT */
 
@@ -733,7 +738,7 @@ void radv_nir_lower_rt_abi(nir_shader *shader, const VkRayTracingPipelineCreateI
 struct radv_shader_stage;
 
 nir_shader *radv_shader_spirv_to_nir(struct radv_device *device, const struct radv_shader_stage *stage,
-                                     const struct radv_graphics_state_key *gfx_state, bool is_internal);
+                                     const struct radv_spirv_to_nir_options *options, bool is_internal);
 
 void radv_init_shader_arenas(struct radv_device *device);
 void radv_destroy_shader_arenas(struct radv_device *device);
-- 
GitLab


From 37e51f890d9b64a8eac25bd50c31a20699ff2ace Mon Sep 17 00:00:00 2001
From: Tatsuyuki Ishi <ishitatsuyuki@gmail.com>
Date: Fri, 15 Dec 2023 02:09:50 +0900
Subject: [PATCH 2/4] radv: Rename cache_search_nir to cache_lookup_nir_handle.

A future commit will introduce cache_lookup_nir (which does not create
an intermediate vk_pipeline_cache_object), so rename it for consistency.
---
 src/amd/vulkan/radv_pipeline_cache.c | 4 ++--
 src/amd/vulkan/radv_private.h        | 5 +++--
 2 files changed, 5 insertions(+), 4 deletions(-)

diff --git a/src/amd/vulkan/radv_pipeline_cache.c b/src/amd/vulkan/radv_pipeline_cache.c
index 75aa3a4ec14a7..28da5b23a726a 100644
--- a/src/amd/vulkan/radv_pipeline_cache.c
+++ b/src/amd/vulkan/radv_pipeline_cache.c
@@ -444,7 +444,7 @@ radv_ray_tracing_pipeline_cache_search(struct radv_device *device, struct vk_pip
          pipeline->stages[i].shader = radv_shader_ref(pipeline_obj->shaders[idx++]);
 
       if (is_library) {
-         pipeline->stages[i].nir = radv_pipeline_cache_search_nir(device, cache, pipeline->stages[i].sha1);
+         pipeline->stages[i].nir = radv_pipeline_cache_lookup_nir_handle(device, cache, pipeline->stages[i].sha1);
          complete &= pipeline->stages[i].nir != NULL;
       }
    }
@@ -513,7 +513,7 @@ radv_ray_tracing_pipeline_cache_insert(struct radv_device *device, struct vk_pip
 }
 
 struct vk_pipeline_cache_object *
-radv_pipeline_cache_search_nir(struct radv_device *device, struct vk_pipeline_cache *cache, const uint8_t *sha1)
+radv_pipeline_cache_lookup_nir_handle(struct radv_device *device, struct vk_pipeline_cache *cache, const uint8_t *sha1)
 {
    if (radv_is_cache_disabled(device))
       return NULL;
diff --git a/src/amd/vulkan/radv_private.h b/src/amd/vulkan/radv_private.h
index 82614a6aa6dbd..762bd72c308b0 100644
--- a/src/amd/vulkan/radv_private.h
+++ b/src/amd/vulkan/radv_private.h
@@ -417,8 +417,9 @@ void radv_ray_tracing_pipeline_cache_insert(struct radv_device *device, struct v
                                             struct radv_ray_tracing_pipeline *pipeline, unsigned num_stages,
                                             const unsigned char *sha1);
 
-struct vk_pipeline_cache_object *
-radv_pipeline_cache_search_nir(struct radv_device *device, struct vk_pipeline_cache *cache, const unsigned char *sha1);
+struct vk_pipeline_cache_object *radv_pipeline_cache_lookup_nir_handle(struct radv_device *device,
+                                                                       struct vk_pipeline_cache *cache,
+                                                                       const unsigned char *sha1);
 
 struct vk_pipeline_cache_object *radv_pipeline_cache_nir_to_handle(struct radv_device *device,
                                                                    struct vk_pipeline_cache *cache,
-- 
GitLab


From 5efca5b9c31f3ae919ebf7ebd8085ba10f277b31 Mon Sep 17 00:00:00 2001
From: Tatsuyuki Ishi <ishitatsuyuki@gmail.com>
Date: Wed, 24 Jan 2024 14:42:51 +0900
Subject: [PATCH 3/4] radv: Re-sort RADV_PERFTEST env vars in docs

---
 docs/envvars.rst | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)

diff --git a/docs/envvars.rst b/docs/envvars.rst
index 300f2cd40e1a4..a2e7b2d6229fd 100644
--- a/docs/envvars.rst
+++ b/docs/envvars.rst
@@ -1340,24 +1340,24 @@ RADV driver environment variables
       rt extensions with older hardware.
    ``gewave32``
       enable wave32 for vertex/tess/geometry shaders (GFX10+)
+   ``gsfastlaunch2``
+      use GS_FAST_LAUNCH=2 for Mesh shaders (GFX11+)
    ``localbos``
       enable local BOs
+   ``nggc``
+      enable NGG culling on GPUs where it's not enabled by default (GFX10.1 only).
    ``nosam``
       disable optimizations that get enabled when all VRAM is CPU visible.
    ``pswave32``
       enable wave32 for pixel shaders (GFX10+)
-   ``nggc``
-      enable NGG culling on GPUs where it's not enabled by default (GFX10.1 only).
-   ``sam``
-      enable optimizations to move more driver internal objects to VRAM.
    ``rtwave64``
       enable wave64 for ray tracing shaders (GFX10+)
+   ``sam``
+      enable optimizations to move more driver internal objects to VRAM.
    ``transfer_queue``
       enable experimental transfer queue support (GFX9+, not yet spec compliant)
    ``video_decode``
       enable experimental video decoding support
-   ``gsfastlaunch2``
-      use GS_FAST_LAUNCH=2 for Mesh shaders (GFX11+)
 
 .. envvar:: RADV_TEX_ANISO
 
-- 
GitLab


From e691790debbf9c6fa21150dbb2bfcce1803d9a8b Mon Sep 17 00:00:00 2001
From: Tatsuyuki Ishi <ishitatsuyuki@gmail.com>
Date: Fri, 15 Dec 2023 01:26:46 +0900
Subject: [PATCH 4/4] radv: Implement NIR caching behind
 RADV_PERFTEST=nircache.

NIR caching is useful for two use cases:
- Shader permutations involving reused VS or FS.
- GPL-like engine that compiles a separate (library) variant and an
  optimized (monolithic) variant, e.g. DXVK.

By caching the result of radv_shader_spirv_to_nir, permutations hitting
the cache can have their compilation time reduced by 50% or more.

There are still open questions about the memory and storage footprint of
NIR caches, which is why this is gated behind a perftest flag. In
particular, Steam doesn't want to ship NIR cache since they are
unnecessary in presence of a full precompiled shader cache. In this
commit, the cache entries do not reside in memory and are immediately
written to the disk. Further design around how the caches are stored and
how to coordinate cache type with Steam etc. is left as future work.
---
 docs/envvars.rst                        |  2 ++
 src/amd/vulkan/radv_debug.h             |  1 +
 src/amd/vulkan/radv_instance.c          |  1 +
 src/amd/vulkan/radv_pipeline_cache.c    | 39 +++++++++++++++++++++++++
 src/amd/vulkan/radv_pipeline_graphics.c | 13 ++++++++-
 src/amd/vulkan/radv_private.h           |  9 ++++++
 6 files changed, 64 insertions(+), 1 deletion(-)

diff --git a/docs/envvars.rst b/docs/envvars.rst
index a2e7b2d6229fd..78d98a090e4fc 100644
--- a/docs/envvars.rst
+++ b/docs/envvars.rst
@@ -1346,6 +1346,8 @@ RADV driver environment variables
       enable local BOs
    ``nggc``
       enable NGG culling on GPUs where it's not enabled by default (GFX10.1 only).
+   ``nircache``
+      cache per-stage NIR for graphics pipelines
    ``nosam``
       disable optimizations that get enabled when all VRAM is CPU visible.
    ``pswave32``
diff --git a/src/amd/vulkan/radv_debug.h b/src/amd/vulkan/radv_debug.h
index 73ccead2a679f..788d8bcb7f3ba 100644
--- a/src/amd/vulkan/radv_debug.h
+++ b/src/amd/vulkan/radv_debug.h
@@ -90,6 +90,7 @@ enum {
    RADV_PERFTEST_DMA_SHADERS = 1u << 12,
    RADV_PERFTEST_GS_FAST_LAUNCH_2 = 1u << 13,
    RADV_PERFTEST_TRANSFER_QUEUE = 1u << 14,
+   RADV_PERFTEST_NIR_CACHE = 1u << 15,
 };
 
 bool radv_init_trace(struct radv_device *device);
diff --git a/src/amd/vulkan/radv_instance.c b/src/amd/vulkan/radv_instance.c
index 4279bc4af3d2b..52323b5123880 100644
--- a/src/amd/vulkan/radv_instance.c
+++ b/src/amd/vulkan/radv_instance.c
@@ -101,6 +101,7 @@ static const struct debug_control radv_perftest_options[] = {{"localbos", RADV_P
                                                              {"dmashaders", RADV_PERFTEST_DMA_SHADERS},
                                                              {"gsfastlaunch2", RADV_PERFTEST_GS_FAST_LAUNCH_2},
                                                              {"transfer_queue", RADV_PERFTEST_TRANSFER_QUEUE},
+                                                             {"nircache", RADV_PERFTEST_NIR_CACHE},
                                                              {NULL, 0}};
 
 const char *
diff --git a/src/amd/vulkan/radv_pipeline_cache.c b/src/amd/vulkan/radv_pipeline_cache.c
index 28da5b23a726a..65b27d9e9cedd 100644
--- a/src/amd/vulkan/radv_pipeline_cache.c
+++ b/src/amd/vulkan/radv_pipeline_cache.c
@@ -69,6 +69,18 @@ radv_hash_shaders(const struct radv_device *device, unsigned char *hash, const s
    _mesa_sha1_final(&ctx, hash);
 }
 
+void
+radv_hash_graphics_spirv_to_nir(blake3_hash hash, const struct radv_shader_stage *stage,
+                                const struct radv_spirv_to_nir_options *options)
+{
+   struct mesa_blake3 ctx;
+   _mesa_blake3_init(&ctx);
+   _mesa_blake3_update(&ctx, &stage->key, sizeof(stage->key));
+   _mesa_blake3_update(&ctx, options, sizeof(*options));
+   _mesa_blake3_update(&ctx, stage->shader_sha1, sizeof(stage->shader_sha1));
+   _mesa_blake3_final(&ctx, hash);
+}
+
 void
 radv_hash_rt_shaders(const struct radv_device *device, unsigned char *hash, const struct radv_ray_tracing_stage *stages,
                      const VkRayTracingPipelineCreateInfoKHR *pCreateInfo, const struct radv_ray_tracing_group *groups)
@@ -512,6 +524,33 @@ radv_ray_tracing_pipeline_cache_insert(struct radv_device *device, struct vk_pip
    pipeline->base.base.cache_object = vk_pipeline_cache_add_object(cache, &pipeline_obj->base);
 }
 
+nir_shader *
+radv_pipeline_cache_lookup_nir(struct radv_device *device, struct vk_pipeline_cache *cache, gl_shader_stage stage,
+                               const blake3_hash key)
+{
+   if (radv_is_cache_disabled(device))
+      return NULL;
+
+   if (!cache)
+      cache = device->mem_cache;
+
+   return vk_pipeline_cache_lookup_nir(cache, key, sizeof(blake3_hash), &device->physical_device->nir_options[stage],
+                                       NULL, NULL);
+}
+
+void
+radv_pipeline_cache_insert_nir(struct radv_device *device, struct vk_pipeline_cache *cache, const blake3_hash key,
+                               const nir_shader *nir)
+{
+   if (radv_is_cache_disabled(device))
+      return;
+
+   if (!cache)
+      cache = device->mem_cache;
+
+   vk_pipeline_cache_add_nir(cache, key, sizeof(blake3_hash), nir);
+}
+
 struct vk_pipeline_cache_object *
 radv_pipeline_cache_lookup_nir_handle(struct radv_device *device, struct vk_pipeline_cache *cache, const uint8_t *sha1)
 {
diff --git a/src/amd/vulkan/radv_pipeline_graphics.c b/src/amd/vulkan/radv_pipeline_graphics.c
index 7dea2b04596b0..30bb656418c1f 100644
--- a/src/amd/vulkan/radv_pipeline_graphics.c
+++ b/src/amd/vulkan/radv_pipeline_graphics.c
@@ -2457,6 +2457,7 @@ radv_graphics_shaders_compile(struct radv_device *device, struct vk_pipeline_cac
                               struct radv_shader **shaders, struct radv_shader_binary **binaries,
                               struct radv_shader **gs_copy_shader, struct radv_shader_binary **gs_copy_binary)
 {
+   const bool nir_cache = device->instance->perftest_flags & RADV_PERFTEST_NIR_CACHE;
    for (unsigned s = 0; s < MESA_VULKAN_SHADER_STAGES; s++) {
       if (!stages[s].entrypoint)
          continue;
@@ -2470,7 +2471,17 @@ radv_graphics_shaders_compile(struct radv_device *device, struct vk_pipeline_cac
             .fix_dual_src_mrt1_export =
                gfx_state->ps.epilog.mrt0_is_dual_src && device->instance->drirc.dual_color_blend_by_location,
          };
-         stages[s].nir = radv_shader_spirv_to_nir(device, &stages[s], &options, is_internal);
+         blake3_hash key;
+
+         if (nir_cache) {
+            radv_hash_graphics_spirv_to_nir(key, &stages[s], &options);
+            stages[s].nir = radv_pipeline_cache_lookup_nir(device, cache, s, key);
+         }
+         if (!stages[s].nir) {
+            stages[s].nir = radv_shader_spirv_to_nir(device, &stages[s], &options, is_internal);
+            if (nir_cache)
+               radv_pipeline_cache_insert_nir(device, cache, key, stages[s].nir);
+         }
       }
 
       stages[s].feedback.duration += os_time_get_nano() - stage_start;
diff --git a/src/amd/vulkan/radv_private.h b/src/amd/vulkan/radv_private.h
index 762bd72c308b0..7cde44a642b74 100644
--- a/src/amd/vulkan/radv_private.h
+++ b/src/amd/vulkan/radv_private.h
@@ -417,6 +417,12 @@ void radv_ray_tracing_pipeline_cache_insert(struct radv_device *device, struct v
                                             struct radv_ray_tracing_pipeline *pipeline, unsigned num_stages,
                                             const unsigned char *sha1);
 
+nir_shader *radv_pipeline_cache_lookup_nir(struct radv_device *device, struct vk_pipeline_cache *cache,
+                                           gl_shader_stage stage, const blake3_hash key);
+
+void radv_pipeline_cache_insert_nir(struct radv_device *device, struct vk_pipeline_cache *cache, const blake3_hash key,
+                                    const nir_shader *nir);
+
 struct vk_pipeline_cache_object *radv_pipeline_cache_lookup_nir_handle(struct radv_device *device,
                                                                        struct vk_pipeline_cache *cache,
                                                                        const unsigned char *sha1);
@@ -2012,6 +2018,9 @@ struct radv_ray_tracing_group;
 void radv_pipeline_stage_init(const VkPipelineShaderStageCreateInfo *sinfo, const struct radv_pipeline_layout *layout,
                               const struct radv_shader_stage_key *stage_key, struct radv_shader_stage *out_stage);
 
+void radv_hash_graphics_spirv_to_nir(blake3_hash hash, const struct radv_shader_stage *stage,
+                                     const struct radv_spirv_to_nir_options *options);
+
 void radv_hash_shaders(const struct radv_device *device, unsigned char *hash, const struct radv_shader_stage *stages,
                        uint32_t stage_count, const struct radv_pipeline_layout *layout,
                        const struct radv_graphics_state_key *gfx_state);
-- 
GitLab

