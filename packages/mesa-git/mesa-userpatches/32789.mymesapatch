From eeb0ec2394af335b65ae16e4f9856752d501cff5 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Thu, 26 Dec 2024 14:35:44 -0500
Subject: [PATCH 1/4] dri: put shared-glapi into libgallium.*.so

so that we don't have to maintain a stable ABI for it.

This will allow removal of the remapping table to reduce CALL_* overhead
for GL dispatch tables.

Also we can now clean it up.

Reviewed-by: Adam Jackson <ajax@redhat.com>
---
 src/egl/meson.build                           |  2 +-
 src/gallium/targets/dri/dri.sym.in            | 11 +++++++
 src/gallium/targets/dri/meson.build           |  2 ++
 src/gallium/targets/libgl-xlib/libgl-xlib.sym |  4 +++
 src/gallium/targets/libgl-xlib/meson.build    |  2 ++
 src/gallium/targets/wgl/meson.build           |  2 ++
 src/glx/meson.build                           |  2 +-
 src/mapi/es1api/meson.build                   |  2 +-
 src/mapi/es2api/meson.build                   |  2 +-
 src/mapi/meson.build                          |  8 -----
 src/mapi/shared-glapi/glapi-symbols.txt       | 20 ------------
 src/mapi/shared-glapi/meson.build             | 32 +------------------
 src/mapi/shared-glapi/tests/meson.build       | 18 +++++++++++
 src/mesa/meson.build                          |  5 +--
 src/mesa/state_tracker/tests/meson.build      |  2 +-
 src/meson.build                               | 16 +++++++---
 16 files changed, 57 insertions(+), 73 deletions(-)
 delete mode 100644 src/mapi/shared-glapi/glapi-symbols.txt
 create mode 100644 src/mapi/shared-glapi/tests/meson.build

diff --git a/src/egl/meson.build b/src/egl/meson.build
index 8c3dfd7cce1cd..ca1c697fcb1e6 100644
--- a/src/egl/meson.build
+++ b/src/egl/meson.build
@@ -189,7 +189,7 @@ libegl = shared_library(
   cpp_args : [cpp_args_for_egl],
   gnu_symbol_visibility : 'hidden',
   include_directories : incs_for_egl,
-  link_with : [link_for_egl, libglapi],
+  link_with : [link_for_egl],
   link_args : [ld_args_bsymbolic, ld_args_gc_sections],
   dependencies : [deps_for_egl, dep_dl, dep_libdrm, dep_clock, dep_thread, idep_mesautil],
   install : true,
diff --git a/src/gallium/targets/dri/dri.sym.in b/src/gallium/targets/dri/dri.sym.in
index 0add030eccc0a..89f564e033f04 100644
--- a/src/gallium/targets/dri/dri.sym.in
+++ b/src/gallium/targets/dri/dri.sym.in
@@ -1,5 +1,16 @@
 {
 	global:
+                # shared-glapi exported from libgallium:
+                _glapi_get_context;
+                _glapi_get_dispatch;
+                _glapi_get_dispatch_table_size;
+                _glapi_get_proc_address;
+                _glapi_get_proc_offset;
+                _glapi_set_context;
+                _glapi_set_dispatch;
+                _glapi_tls_Context;
+                _glapi_tls_Dispatch;
+
 		ddebug_screen_create;
 		noop_screen_create;
 		util_run_tests;
diff --git a/src/gallium/targets/dri/meson.build b/src/gallium/targets/dri/meson.build
index b6b0421fee046..5ecdc7be6e7d2 100644
--- a/src/gallium/targets/dri/meson.build
+++ b/src/gallium/targets/dri/meson.build
@@ -68,6 +68,8 @@ libgallium_dri = shared_library(
   name_suffix : libname_suffix,
 )
 
+shared_glapi_lib = libgallium_dri
+
 if with_gallium_va or with_gallium_vdpau
   va_drivers = []
   vdpau_drivers = []
diff --git a/src/gallium/targets/libgl-xlib/libgl-xlib.sym b/src/gallium/targets/libgl-xlib/libgl-xlib.sym
index d6cd23dbffe04..046eeb4d1c453 100644
--- a/src/gallium/targets/libgl-xlib/libgl-xlib.sym
+++ b/src/gallium/targets/libgl-xlib/libgl-xlib.sym
@@ -1,5 +1,9 @@
 {
 	global:
+                _glapi_Dispatch;
+                _glapi_tls_Dispatch;
+                _glapi_get_dispatch_table_size; # only for tests
+                _glapi_get_proc_offset; # only for tests
 		gl*;
 	local:
 		*;
diff --git a/src/gallium/targets/libgl-xlib/meson.build b/src/gallium/targets/libgl-xlib/meson.build
index 9dcb0f1eb30a1..a8fbae7bf1c5e 100644
--- a/src/gallium/targets/libgl-xlib/meson.build
+++ b/src/gallium/targets/libgl-xlib/meson.build
@@ -37,3 +37,5 @@ libgl = shared_library(
   version : '1.5.0',
   darwin_versions: '4.0.0',
 )
+
+shared_glapi_lib = libgl
diff --git a/src/gallium/targets/wgl/meson.build b/src/gallium/targets/wgl/meson.build
index 15092916769fb..ec0d7bbcd8232 100644
--- a/src/gallium/targets/wgl/meson.build
+++ b/src/gallium/targets/wgl/meson.build
@@ -31,3 +31,5 @@ libgallium_wgl = shared_library(
   install : true,
 )
 libgallium_wgl_build_dir = meson.current_build_dir()
+
+shared_glapi_lib = libgallium_wgl
diff --git a/src/glx/meson.build b/src/glx/meson.build
index 6057aefaf962d..b52b91c526959 100644
--- a/src/glx/meson.build
+++ b/src/glx/meson.build
@@ -133,7 +133,7 @@ libglx = static_library(
 libgl = shared_library(
   gl_lib_name,
   [],
-  link_with : [libglapi_static, libglapi],
+  link_with : [libglapi_static],
   link_whole : libglx,
   link_args : [ld_args_bsymbolic, ld_args_gc_sections, extra_ld_args_libgl],
   dependencies : [
diff --git a/src/mapi/es1api/meson.build b/src/mapi/es1api/meson.build
index 2d7e26fdafeeb..8a7c57e03d9fd 100644
--- a/src/mapi/es1api/meson.build
+++ b/src/mapi/es1api/meson.build
@@ -36,7 +36,7 @@ libglesv1_cm = shared_library(
   gnu_symbol_visibility : 'hidden',
   link_args : [ld_args_gc_sections],
   include_directories : [inc_src, inc_include, inc_mapi],
-  link_with : libglapi,
+  link_with : shared_glapi_lib,
   dependencies : [dep_thread, dep_libdrm, dep_m, dep_dl, idep_mesautilc11],
   soversion : host_machine.system() == 'windows' ? '' : '1',
   version : '1.1.0',
diff --git a/src/mapi/es2api/meson.build b/src/mapi/es2api/meson.build
index a29d1a12014e6..afc5b95c85625 100644
--- a/src/mapi/es2api/meson.build
+++ b/src/mapi/es2api/meson.build
@@ -36,7 +36,7 @@ libgles2 = shared_library(
   gnu_symbol_visibility : 'hidden',
   link_args : [ld_args_gc_sections],
   include_directories : [inc_src, inc_include, inc_mapi],
-  link_with : libglapi,
+  link_with : shared_glapi_lib,
   dependencies : [dep_thread, dep_libdrm, dep_m, dep_dl, idep_mesautilc11],
   soversion : host_machine.system() == 'windows' ? '' : '2',
   version : '2.0.0',
diff --git a/src/mapi/meson.build b/src/mapi/meson.build
index 4aefd36e4cfcc..d9d4674d1c111 100644
--- a/src/mapi/meson.build
+++ b/src/mapi/meson.build
@@ -11,11 +11,3 @@ if with_shared_glapi
 else
   libglapi = []
 endif
-if not with_glvnd
-  if with_gles1
-    subdir('es1api')
-  endif
-  if with_gles2
-    subdir('es2api')
-  endif
-endif
diff --git a/src/mapi/shared-glapi/glapi-symbols.txt b/src/mapi/shared-glapi/glapi-symbols.txt
deleted file mode 100644
index 43d87af2b1edd..0000000000000
--- a/src/mapi/shared-glapi/glapi-symbols.txt
+++ /dev/null
@@ -1,20 +0,0 @@
-_glapi_Context
-_glapi_Dispatch
-_glapi_add_dispatch
-_glapi_check_multithread
-_glapi_destroy_multithread
-_glapi_get_context
-_glapi_get_dispatch
-_glapi_get_dispatch_table_size
-_glapi_get_proc_address
-_glapi_get_proc_name
-_glapi_get_proc_offset
-_glapi_new_nop_table
-_glapi_noop_enable_warnings
-_glapi_set_context
-_glapi_set_dispatch
-_glapi_set_nop_handler
-_glapi_set_warning_func
-(optional) _glapi_tls_Context
-(optional) _glapi_tls_Dispatch
-_glthread_GetID
diff --git a/src/mapi/shared-glapi/meson.build b/src/mapi/shared-glapi/meson.build
index e9e7366568a5b..55e2a5ff7f463 100644
--- a/src/mapi/shared-glapi/meson.build
+++ b/src/mapi/shared-glapi/meson.build
@@ -26,7 +26,7 @@ if with_platform_windows
   _glapi_c_args += ['-D_GLAPI_DLL_EXPORTS']
 endif
 
-libglapi = shared_library(
+libglapi = static_library(
   'glapi',
   [files_shared_glapi, shared_glapi_mapi_tmp_h],
   c_args : [
@@ -40,37 +40,7 @@ libglapi = shared_library(
   link_args : [ld_args_gc_sections],
   include_directories : [inc_src, inc_include, inc_mapi],
   dependencies : [dep_thread, idep_mesautil],
-  soversion : host_machine.system() == 'windows' ? '' : '0',
-  version : '0.0.0',
   name_prefix : host_machine.system() == 'windows' ? 'lib' : [],  # always use lib, but avoid warnings on !windows
   install : true,
 )
 libglapi_build_dir = meson.current_build_dir()
-
-if with_any_opengl and with_tests
-  test(
-    'shared-glapi-test',
-    executable(
-      ['shared-glapi-test', glapitable_h],
-      'tests/check_table.cpp',
-      cpp_args : [cpp_msvc_compat_args],
-      include_directories : [inc_src, inc_include, inc_mapi],
-      link_with : [libglapi],
-      dependencies : [dep_thread, idep_gtest, idep_mesautilc11],
-    ),
-    suite : ['mapi'],
-    protocol : 'gtest',
-  )
-  if with_symbols_check
-    test(
-      'shared-glapi symbols check',
-      symbols_check,
-      args : [
-        '--lib', libglapi,
-        '--symbols-file', files('glapi-symbols.txt'),
-        symbols_check_args,
-      ],
-      suite : ['mapi'],
-    )
-  endif
-endif
diff --git a/src/mapi/shared-glapi/tests/meson.build b/src/mapi/shared-glapi/tests/meson.build
new file mode 100644
index 0000000000000..e454035b44dee
--- /dev/null
+++ b/src/mapi/shared-glapi/tests/meson.build
@@ -0,0 +1,18 @@
+# Copyright Â© 2017 Intel Corporation
+# SPDX-License-Identifier: MIT
+
+if with_any_opengl and with_tests
+  test(
+    'shared-glapi-test',
+    executable(
+      ['shared-glapi-test', glapitable_h],
+      'check_table.cpp',
+      cpp_args : [cpp_msvc_compat_args],
+      include_directories : [inc_src, inc_include, inc_mapi],
+      link_with : [shared_glapi_lib],
+      dependencies : [dep_thread, idep_gtest, idep_mesautilc11],
+    ),
+    suite : ['mapi'],
+    protocol : 'gtest',
+  )
+endif
diff --git a/src/mesa/meson.build b/src/mesa/meson.build
index ac6f214fa1982..fed6557c8105e 100644
--- a/src/mesa/meson.build
+++ b/src/mesa/meson.build
@@ -446,12 +446,9 @@ endif
 _mesa_windows_args = []
 if with_platform_windows
   _mesa_windows_args += [
+    '-D_GLAPI_NO_EXPORTS',
     '-D_GDI32_',    # prevent gl* being declared __declspec(dllimport) in MS headers
   ]
-  if not with_shared_glapi
-    # prevent _glapi_* from being declared __declspec(dllimport)
-    _mesa_windows_args += '-D_GLAPI_NO_EXPORTS'
-  endif
 endif
 
 libmesa = static_library(
diff --git a/src/mesa/state_tracker/tests/meson.build b/src/mesa/state_tracker/tests/meson.build
index 4225bc11884cc..34fa40df0c4a0 100644
--- a/src/mesa/state_tracker/tests/meson.build
+++ b/src/mesa/state_tracker/tests/meson.build
@@ -8,7 +8,7 @@ test(
     ['st_format.c'],
     include_directories : [inc_include, inc_src, inc_mapi, inc_mesa, inc_gallium, inc_gallium_aux],
     link_with : [
-      libmesa, libglapi, libgallium,
+      libmesa, shared_glapi_lib, libgallium,
     ],
     dependencies : [idep_gtest, idep_mesautil],
   ),
diff --git a/src/meson.build b/src/meson.build
index 0e80016dc8128..46c97e5839c23 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -111,11 +111,17 @@ endif
 if with_gallium_or_lvp
   subdir('gallium')
 endif
-if with_gallium and with_tests
-  # This has to be here since it requires libgallium, and subdir cannot
-  # contain ..
-  subdir('mesa/main/tests')
-  if with_shared_glapi
+# These require libgallium (shared_glapi_lib)
+if with_gallium and (with_glx != 'disabled' or with_egl)
+  if with_gles1 and not with_glvnd
+    subdir('mapi/es1api')
+  endif
+  if with_gles2 and not with_glvnd
+    subdir('mapi/es2api')
+  endif
+  if with_tests and with_shared_glapi
+    subdir('mapi/shared-glapi/tests')
+    subdir('mesa/main/tests')
     subdir('mesa/state_tracker/tests')
   endif
 endif
-- 
GitLab


From 3a8622701d13c014f175f9dd3f08a0b2c25c6bca Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Thu, 26 Dec 2024 14:39:51 -0500
Subject: [PATCH 2/4] glapi: stop using the remap table

The remap table adds an array lookup into 75% of CALL_* macros, which are
used to call GL functions through the dispatch table. Removing the array
lookup reduces overhead of dispatch table calls.

Since libglapi is now required to be from the same build as libgallium,
the remap table is no longer needed.

This change doesn't remove the remapping table. It only disables it.
Compare asm:

Before:
0000000000000000 <_mesa_unmarshal_Uniform1f>:
   0:   f3 0f 1e fa             endbr64
   4:   48 83 ec 08             sub    $0x8,%rsp
   8:   48 8b 05 00 00 00 00    mov    0x0(%rip),%rax        # f <_mesa_unmarshal_Uniform1f+0xf>
   f:   8b 4e 04                mov    0x4(%rsi),%ecx
  12:   31 d2                   xor    %edx,%edx
  14:   f3 0f 10 46 08          movss  0x8(%rsi),%xmm0
  19:   48 63 80 a8 01 00 00    movslq 0x1a8(%rax),%rax
  20:   85 c0                   test   %eax,%eax
  22:   78 08                   js     2c <_mesa_unmarshal_Uniform1f+0x2c>
  24:   48 8b 57 40             mov    0x40(%rdi),%rdx
  28:   48 8b 14 c2             mov    (%rdx,%rax,8),%rdx
  2c:   89 cf                   mov    %ecx,%edi
  2e:   ff d2                   call   *%rdx
  30:   b8 02 00 00 00          mov    $0x2,%eax
  35:   48 83 c4 08             add    $0x8,%rsp
  39:   c3                      ret

After:
0000000000000000 <_mesa_unmarshal_Uniform1f>:
   0:   f3 0f 1e fa             endbr64
   4:   48 89 f8                mov    %rdi,%rax
   7:   48 83 ec 08             sub    $0x8,%rsp
   b:   f3 0f 10 46 08          movss  0x8(%rsi),%xmm0
  10:   8b 7e 04                mov    0x4(%rsi),%edi
  13:   48 8b 40 40             mov    0x40(%rax),%rax
  17:   ff 90 10 10 00 00       call   *0x1010(%rax)
  1d:   b8 02 00 00 00          mov    $0x2,%eax
  22:   48 83 c4 08             add    $0x8,%rsp
  26:   c3                      ret

Reviewed-by: Adam Jackson <ajax@redhat.com>
---
 src/mapi/glapi/gen/static_data.py | 12 ++++--------
 1 file changed, 4 insertions(+), 8 deletions(-)

diff --git a/src/mapi/glapi/gen/static_data.py b/src/mapi/glapi/gen/static_data.py
index 6bebde0869884..e533ed667e4a6 100644
--- a/src/mapi/glapi/gen/static_data.py
+++ b/src/mapi/glapi/gen/static_data.py
@@ -20,18 +20,14 @@
 # FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 # IN THE SOFTWARE.
 
-
-"""The maximum entries of actual static data required by indirect GLX."""
-
-
-MAX_OFFSETS = 407
+MAX_OFFSETS = 2 ** 31 # TODO: remove this
 
 """Table of functions that have ABI-mandated offsets in the dispatch table.
 
-The first MAX_OFFSETS entries are required by indirect GLX. The rest are
-required to preserve the glapi <> GL/GLES ABI. This is to be addressed shortly.
+The first 407 entries are required by indirect GLX. The rest can use any
+numbers and don't need this table at all, but that removal is TODO.
 
-This list will never change."""
+The first 407 entries will never change."""
 offsets = {
     "NewList": 0,
     "EndList": 1,
-- 
GitLab


From 7c8f4e503fbb498ea0b51e3b06e0c852004415a1 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Thu, 26 Dec 2024 15:23:36 -0500
Subject: [PATCH 3/4] glapi: remove the remap table

it's unused now

Reviewed-by: Adam Jackson <ajax@redhat.com>
---
 src/mapi/glapi/gen/glX_proto_recv.py          |   6 +-
 src/mapi/glapi/gen/glX_proto_send.py          |   9 +-
 src/mapi/glapi/gen/gl_XML.py                  |  23 +---
 src/mapi/glapi/gen/gl_table.py                |  36 ++----
 src/mapi/glapi/gen/remap_helper.py            | 118 ------------------
 src/mapi/glapi/gen/static_data.py             |   2 -
 src/mesa/main/context.c                       |   3 -
 src/mesa/main/meson.build                     |  11 +-
 src/mesa/main/remap.c                         |  84 -------------
 src/mesa/main/remap.h                         |  42 -------
 src/mesa/main/tests/disable_windows_include.c |   1 -
 src/mesa/meson.build                          |   3 -
 12 files changed, 11 insertions(+), 327 deletions(-)
 delete mode 100644 src/mapi/glapi/gen/remap_helper.py
 delete mode 100644 src/mesa/main/remap.c
 delete mode 100644 src/mesa/main/remap.h

diff --git a/src/mapi/glapi/gen/glX_proto_recv.py b/src/mapi/glapi/gen/glX_proto_recv.py
index 946f011818b01..e33dd6d268ed7 100644
--- a/src/mapi/glapi/gen/glX_proto_recv.py
+++ b/src/mapi/glapi/gen/glX_proto_recv.py
@@ -134,9 +134,6 @@ class PrintGlxDispatchFunctions(glX_proto_common.glx_print_proto):
 
         print '{'
 
-        if not f.is_abi():
-            print '    %s %s = __glGetProcAddress("gl%s");' % (self.fptrType(name), name, name)
-
         if f.glx_rop or f.vectorequiv:
             self.printRenderFunction(f)
         elif f.glx_sop or f.glx_vendorpriv:
@@ -221,7 +218,6 @@ class PrintGlxDispatchFunctions(glX_proto_common.glx_print_proto):
 
     def emit_function_call(self, f, retval_assign, indent):
         list = []
-        prefix = "gl" if f.is_abi() else ""
 
         for param in f.parameterIterator():
             if param.is_padding:
@@ -234,7 +230,7 @@ class PrintGlxDispatchFunctions(glX_proto_common.glx_print_proto):
 
             list.append( '%s        %s' % (indent, location) )
 
-        print '%s    %s%s%s(%s);' % (indent, retval_assign, prefix, f.name, string.join(list, ',\n'))
+        print '%s    %sgl%s(%s);' % (indent, retval_assign, f.name, string.join(list, ',\n'))
 
 
     def common_func_print_just_start(self, f, indent):
diff --git a/src/mapi/glapi/gen/glX_proto_send.py b/src/mapi/glapi/gen/glX_proto_send.py
index f1cabdfabf041..c84af469a5996 100644
--- a/src/mapi/glapi/gen/glX_proto_send.py
+++ b/src/mapi/glapi/gen/glX_proto_send.py
@@ -948,7 +948,6 @@ struct _glapi_table * __glXNewIndirectAPI( void )
     _glapi_proc *table;
     unsigned entries;
     unsigned i;
-    int o;
 
     entries = _glapi_get_dispatch_table_size();
     table = malloc(entries * sizeof(_glapi_proc));
@@ -985,13 +984,7 @@ struct _glapi_table * __glXNewIndirectAPI( void )
                         print(preamble)
                         preamble = None
 
-                    if func.is_abi():
-                        print('    table[{offset}] = (_glapi_proc) __indirect_gl{name};'.format(name = func.name, offset = func.offset))
-                    else:
-                        print('    o = _glapi_get_proc_offset("gl{0}");'.format(func.name))
-                        print('    assert(o > 0);')
-                        print('    table[o] = (_glapi_proc) __indirect_gl{0};'.format(func.name))
-
+                    print('    table[{offset}] = (_glapi_proc) __indirect_gl{name};'.format(name = func.name, offset = func.offset))
         return
 
 
diff --git a/src/mapi/glapi/gen/gl_XML.py b/src/mapi/glapi/gen/gl_XML.py
index 4dcaaeb463e2f..81422da502ff7 100644
--- a/src/mapi/glapi/gen/gl_XML.py
+++ b/src/mapi/glapi/gen/gl_XML.py
@@ -40,17 +40,6 @@ def parse_GL_API(file_name, factory=None, pointer_size=0):
 
     api = factory.create_api(pointer_size)
     api.parse_file(file_name)
-
-    # After the XML has been processed, we need to go back and assign
-    # dispatch offsets to the functions that request that their offsets
-    # be assigned by the scripts.  Typically this means all functions
-    # that are not part of the ABI.
-
-    for func in api.functionIterateByCategory():
-        if func.assign_offset and func.offset < 0:
-            func.offset = api.next_offset;
-            api.next_offset += 1
-
     return api
 
 
@@ -638,8 +627,6 @@ class gl_function( gl_item ):
         # Decimal('1.1') }.
         self.api_map = {}
 
-        self.assign_offset = False
-
         self.static_entry_points = []
 
         # Track the parameter string (for the function prototype)
@@ -711,15 +698,11 @@ class gl_function( gl_item ):
             # Only try to set the offset when a non-alias entry-point
             # is being processed.
 
-            if name in static_data.offsets and static_data.offsets[name] <= static_data.MAX_OFFSETS:
+            if name in static_data.offsets:
                 self.offset = static_data.offsets[name]
-            elif name in static_data.offsets and static_data.offsets[name] > static_data.MAX_OFFSETS:
-                self.offset = static_data.offsets[name]
-                self.assign_offset = True
             else:
                 if self.exec_flavor != "skip":
                     raise RuntimeError("Entry-point %s is missing offset in static_data.py. Add one at the bottom of the list." % (name))
-                self.assign_offset = False
 
         if not self.name:
             self.name = true_name
@@ -829,10 +812,6 @@ class gl_function( gl_item ):
 
         return p_string
 
-
-    def is_abi(self):
-        return (self.offset >= 0 and not self.assign_offset)
-
     def is_static_entry_point(self, name):
         return name in self.static_entry_points
 
diff --git a/src/mapi/glapi/gen/gl_table.py b/src/mapi/glapi/gen/gl_table.py
index ae1300cdb89c3..38cae5794ce68 100644
--- a/src/mapi/glapi/gen/gl_table.py
+++ b/src/mapi/glapi/gen/gl_table.py
@@ -119,40 +119,18 @@ class PrintRemapTable(gl_XML.gl_print_base):
         print('    } while(0)')
         print('')
 
-        functions = []
-        abi_functions = []
-        count = 0
-        for f in api.functionIterateByOffset():
-            if not f.is_abi():
-                functions.append([f, count])
-                count += 1
-            else:
-                abi_functions.append([f, -1])
+        abi_functions = [f for f in api.functionIterateByOffset()]
 
         print('/* total number of offsets below */')
-        print('#define _gloffset_COUNT %d' % (len(abi_functions + functions)))
+        print('#define _gloffset_COUNT %d' % (len(abi_functions)))
         print('')
 
-        for f, index in abi_functions:
+        for f in abi_functions:
             print('#define _gloffset_%s %d' % (f.name, f.offset))
 
-        remap_table = "driDispatchRemapTable"
-
-        print('#define %s_size %u' % (remap_table, count))
-        print('extern int %s[ %s_size ];' % (remap_table, remap_table))
-        print('')
-
-        for f, index in functions:
-            print('#define %s_remap_index %u' % (f.name, index))
-
-        print('')
-
-        for f, index in functions:
-            print('#define _gloffset_%s %s[%s_remap_index]' % (f.name, remap_table, f.name))
-
         print('')
 
-        for f, index in abi_functions + functions:
+        for f in abi_functions:
             arg_string = gl_XML.create_parameter_string(f.parameters, 0)
 
             print('typedef %s (GLAPIENTRYP _glptr_%s)(%s);' % (f.return_type, f.name, arg_string))
@@ -176,10 +154,10 @@ def _parser():
                         dest='file_name',
                         help="Path to an XML description of OpenGL API.")
     parser.add_argument('-m', '--mode',
-                        choices=['table', 'remap_table'],
+                        choices=['table', 'dispatch'],
                         default='table',
                         metavar="mode",
-                        help="Generate either a table or a remap_table")
+                        help="Generate either a table or a dispatch")
     return parser.parse_args()
 
 
@@ -191,7 +169,7 @@ def main():
 
     if args.mode == "table":
         printer = PrintGlTable()
-    elif args.mode == "remap_table":
+    elif args.mode == "dispatch":
         printer = PrintRemapTable()
 
     printer.Print(api)
diff --git a/src/mapi/glapi/gen/remap_helper.py b/src/mapi/glapi/gen/remap_helper.py
deleted file mode 100644
index f5d58675dcd33..0000000000000
--- a/src/mapi/glapi/gen/remap_helper.py
+++ /dev/null
@@ -1,118 +0,0 @@
-
-# Copyright (C) 2009 Chia-I Wu <olv@0xlab.org>
-# All Rights Reserved.
-#
-# This is based on extension_helper.py by Ian Romanick.
-#
-# Permission is hereby granted, free of charge, to any person obtaining a
-# copy of this software and associated documentation files (the "Software"),
-# to deal in the Software without restriction, including without limitation
-# on the rights to use, copy, modify, merge, publish, distribute, sub
-# license, and/or sell copies of the Software, and to permit persons to whom
-# the Software is furnished to do so, subject to the following conditions:
-#
-# The above copyright notice and this permission notice (including the next
-# paragraph) shall be included in all copies or substantial portions of the
-# Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.  IN NO EVENT SHALL
-# IBM AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
-# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
-# IN THE SOFTWARE.
-
-import argparse
-
-import license
-import gl_XML
-
-
-class PrintGlRemap(gl_XML.gl_print_base):
-    def __init__(self):
-        gl_XML.gl_print_base.__init__(self)
-
-        self.name = "remap_helper.py (from Mesa)"
-        self.license = license.bsd_license_template % ("Copyright (C) 2009 Chia-I Wu <olv@0xlab.org>", "Chia-I Wu")
-        return
-
-
-    def printRealHeader(self):
-        print('#include "main/dispatch.h"')
-        print('#include "main/remap.h"')
-        print('')
-        return
-
-
-    def printBody(self, api):
-        pool_indices = {}
-
-        print('/* this is internal to remap.c */')
-        print('#ifndef need_MESA_remap_table')
-        print('#error Only remap.c should include this file!')
-        print('#endif /* need_MESA_remap_table */')
-        print('')
-
-        print('')
-        print('static const char _mesa_function_pool[] =')
-
-        # output string pool
-        index = 0;
-        for f in api.functionIterateAll():
-            pool_indices[f] = index
-
-            # a function has either assigned offset, fixed offset,
-            # or no offset
-            if f.assign_offset:
-                comments = "will be remapped"
-            elif f.offset > 0:
-                comments = "offset %d" % f.offset
-            else:
-                comments = "dynamic"
-
-            print('   /* _mesa_function_pool[%d]: %s (%s) */' \
-                            % (index, f.name, comments))
-            print('   "gl%s\\0"' % f.entry_points[0])
-            index += len(f.entry_points[0]) + 3
-        print('   ;')
-        print('')
-
-        print('/* these functions need to be remapped */')
-        print('static const struct gl_function_pool_remap MESA_remap_table_functions[] = {')
-        # output all functions that need to be remapped
-        # iterate by offsets so that they are sorted by remap indices
-        for f in api.functionIterateByOffset():
-            if not f.assign_offset:
-                continue
-            print('   { %5d, %s_remap_index },' \
-                            % (pool_indices[f], f.name))
-        print('   {    -1, -1 }')
-        print('};')
-        print('')
-        return
-
-
-def _parser():
-    """Parse input options and return a namsepace."""
-    parser = argparse.ArgumentParser()
-    parser.add_argument('-f', '--filename',
-                        default="gl_API.xml",
-                        metavar="input_file_name",
-                        dest='file_name',
-                        help="An xml description file.")
-    return parser.parse_args()
-
-
-def main():
-    """Main function."""
-    args = _parser()
-
-    api = gl_XML.parse_GL_API(args.file_name)
-
-    printer = PrintGlRemap()
-    printer.Print(api)
-
-
-if __name__ == '__main__':
-    main()
diff --git a/src/mapi/glapi/gen/static_data.py b/src/mapi/glapi/gen/static_data.py
index e533ed667e4a6..60a8a648fb8bd 100644
--- a/src/mapi/glapi/gen/static_data.py
+++ b/src/mapi/glapi/gen/static_data.py
@@ -20,8 +20,6 @@
 # FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 # IN THE SOFTWARE.
 
-MAX_OFFSETS = 2 ** 31 # TODO: remove this
-
 """Table of functions that have ABI-mandated offsets in the dispatch table.
 
 The first 407 entries are required by indirect GLX. The rest can use any
diff --git a/src/mesa/main/context.c b/src/mesa/main/context.c
index e95e371ccffdd..369f2882de244 100644
--- a/src/mesa/main/context.c
+++ b/src/mesa/main/context.c
@@ -117,7 +117,6 @@
 #include "queryobj.h"
 #include "syncobj.h"
 #include "rastpos.h"
-#include "remap.h"
 #include "scissor.h"
 #include "shared.h"
 #include "shaderobj.h"
@@ -230,8 +229,6 @@ one_time_init(const char *extensions_override)
     * unecessary creation/destruction of glsl types.
     */
    glsl_type_singleton_init_or_ref();
-
-   _mesa_init_remap_table();
 }
 
 /**
diff --git a/src/mesa/main/meson.build b/src/mesa/main/meson.build
index 71d97a02b5b44..9070bc9bedcd0 100644
--- a/src/mesa/main/meson.build
+++ b/src/mesa/main/meson.build
@@ -5,7 +5,7 @@ main_dispatch_h = custom_target(
   'dispatch.h',
   input : [files('../../mapi/glapi/gen/gl_table.py'), gl_and_es_api_files],
   output : 'dispatch.h',
-  command : [prog_python, '@INPUT0@', '-f', '@INPUT1@', '-m', 'remap_table'],
+  command : [prog_python, '@INPUT0@', '-f', '@INPUT1@', '-m', 'dispatch'],
   depend_files : glapi_gen_depends,
   capture : true,
 )
@@ -19,15 +19,6 @@ main_marshal_generated_h = custom_target(
   capture : true,
 )
 
-main_remap_helper_h = custom_target(
-  'remap_helper.h',
-  input : [files('../../mapi/glapi/gen/remap_helper.py'), gl_and_es_api_files],
-  output : 'remap_helper.h',
-  command : [prog_python, '@INPUT0@', '-f', '@INPUT1@'],
-  depend_files : glapi_gen_depends,
-  capture : true,
-)
-
 if _shader_replacement != ''
   # shader replacement
   shader_replacement_h = custom_target(
diff --git a/src/mesa/main/remap.c b/src/mesa/main/remap.c
deleted file mode 100644
index 415f18e529518..0000000000000
--- a/src/mesa/main/remap.c
+++ /dev/null
@@ -1,84 +0,0 @@
-/*
- * Mesa 3-D graphics library
- *
- * Copyright (C) 2009 Chia-I Wu <olv@0xlab.org>
- *
- * Permission is hereby granted, free of charge, to any person obtaining a
- * copy of this software and associated documentation files (the "Software"),
- * to deal in the Software without restriction, including without limitation
- * the rights to use, copy, modify, merge, publish, distribute, sublicense,
- * and/or sell copies of the Software, and to permit persons to whom the
- * Software is furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included
- * in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
- * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
- * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
- * DEALINGS IN THE SOFTWARE.
- */
-
-
-/**
- * \file remap.c
- * Remap table management.
- *
- * Entries in the dispatch table are either static or dynamic.  The
- * dispatch table is shared by mesa core and glapi.  When they are
- * built separately, it is possible that a static entry in mesa core
- * is dynamic, or assigned a different static offset, in glapi.  The
- * remap table is in charge of mapping a static entry in mesa core to
- * a dynamic entry, or the corresponding static entry, in glapi.
- */
-
-#include <stdbool.h>
-#include <string.h>
-#include "remap.h"
-
-#include "glapi/glapi.h"
-
-#define MAX_ENTRY_POINTS 16
-
-#define need_MESA_remap_table
-#include "main/remap_helper.h"
-#include "errors.h"
-
-
-/* this is global for quick access */
-int driDispatchRemapTable[driDispatchRemapTable_size];
-
-
-
-/**
- * Initialize the remap table.  This is called in one_time_init().
- * The remap table needs to be initialized before calling the
- * CALL/GET/SET macros defined in main/dispatch.h.
- */
-void
-_mesa_init_remap_table(void)
-{
-   static bool initialized = false;
-   GLint i;
-
-   if (initialized)
-      return;
-   initialized = true;
-
-   for (i = 0; i < driDispatchRemapTable_size; i++) {
-      /* sanity check */
-      assert(i == MESA_remap_table_functions[i].remap_index);
-      const char *name = _mesa_function_pool + MESA_remap_table_functions[i].pool_index;
-
-      /* store the dispatch offset in driDispatchRemapTable, for use by
-       * _gloffset_* macros.
-       */
-      driDispatchRemapTable[i] = _glapi_add_dispatch(name);
-      if (driDispatchRemapTable[i] < 0) {
-         _mesa_warning(NULL, "failed to remap %s", name);
-      }
-   }
-}
diff --git a/src/mesa/main/remap.h b/src/mesa/main/remap.h
deleted file mode 100644
index 19d2f0daa5a58..0000000000000
--- a/src/mesa/main/remap.h
+++ /dev/null
@@ -1,42 +0,0 @@
-/*
- * Mesa 3-D graphics library
- *
- * Copyright (C) 2009 Chia-I Wu <olv@0xlab.org>
- *
- * Permission is hereby granted, free of charge, to any person obtaining a
- * copy of this software and associated documentation files (the "Software"),
- * to deal in the Software without restriction, including without limitation
- * the rights to use, copy, modify, merge, publish, distribute, sublicense,
- * and/or sell copies of the Software, and to permit persons to whom the
- * Software is furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included
- * in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
- * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
- * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
- * DEALINGS IN THE SOFTWARE.
- */
-
-
-#ifndef REMAP_H
-#define REMAP_H
-
-
-struct gl_function_pool_remap {
-   int pool_index;
-   int remap_index;
-};
-
-extern int
-driDispatchRemapTable[];
-
-extern void
-_mesa_init_remap_table(void);
-
-
-#endif /* REMAP_H */
diff --git a/src/mesa/main/tests/disable_windows_include.c b/src/mesa/main/tests/disable_windows_include.c
index 5ff65d7dc68f8..3e67bd77b11dd 100644
--- a/src/mesa/main/tests/disable_windows_include.c
+++ b/src/mesa/main/tests/disable_windows_include.c
@@ -98,7 +98,6 @@
 #include <mesa/main/queryobj.h>
 #include <mesa/main/rastpos.h>
 #include <mesa/main/readpix.h>
-#include <mesa/main/remap.h>
 #include <mesa/main/renderbuffer.h>
 #include <mesa/main/samplerobj.h>
 #include <mesa/main/scissor.h>
diff --git a/src/mesa/meson.build b/src/mesa/meson.build
index fed6557c8105e..46e4ac9fabffd 100644
--- a/src/mesa/meson.build
+++ b/src/mesa/meson.build
@@ -160,8 +160,6 @@ files_libmesa = files(
   'main/rastpos.h',
   'main/readpix.c',
   'main/readpix.h',
-  'main/remap.c',
-  'main/remap.h',
   'main/renderbuffer.c',
   'main/renderbuffer.h',
   'main/robustness.c',
@@ -426,7 +424,6 @@ files_libmesa += [
   main_marshal_generated_h,
   main_dispatch_h,
   ir_expression_operation_h,
-  main_remap_helper_h,
   sha1_h,
   main_unmarshal_table_c,
 ] + main_marshal_generated_c
-- 
GitLab


From 02733215517b6063bb0d51552e5e119bcfa7ea9d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Thu, 26 Dec 2024 14:36:56 -0500
Subject: [PATCH 4/4] loader: improve the existing loader-libgallium
 non-matching version error

Reviewed-by: Adam Jackson <ajax@redhat.com>
---
 src/loader/loader.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/loader/loader.c b/src/loader/loader.c
index e9eb4d8b796e0..e8a9b76913a67 100644
--- a/src/loader/loader.c
+++ b/src/loader/loader.c
@@ -764,7 +764,7 @@ loader_bind_extensions(void *data,
       if (strcmp(match->name, __DRI_MESA) == 0) {
          const __DRImesaCoreExtension *mesa = (const __DRImesaCoreExtension *)*field;
          if (strcmp(mesa->version_string, MESA_INTERFACE_VERSION_STRING) != 0) {
-            log_(_LOADER_FATAL, "DRI driver not from this Mesa build ('%s' vs '%s')\n",
+            log_(_LOADER_FATAL, "libgallium not from this Mesa build (libgallium: '%s', loader: '%s')\n",
                  mesa->version_string, MESA_INTERFACE_VERSION_STRING);
             ret = false;
          }
-- 
GitLab

