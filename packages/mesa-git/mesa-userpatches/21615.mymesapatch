From dce16c48d66c8cfc00d95fc1910962347d1be990 Mon Sep 17 00:00:00 2001
From: Chia-I Wu <olvaffe@gmail.com>
Date: Tue, 7 Mar 2023 13:01:37 -0800
Subject: [PATCH 1/3] radv: rework radv_layout_fmask_compressed

Rename radv_layout_fmask_compressed and make it return an enum.  We will
add partial compression (fmask decompressed and not expanded) in a
following commit.

Drop the check for VK_IMAGE_USAGE_STORAGE_BIT and
VK_IMAGE_USAGE_TRANSFER_DST_BIT.  When transitioning to
VK_IMAGE_LAYOUT_GENERAL, we should decompress and expand FMASK even when
those usage bits are not set.
---
 src/amd/vulkan/radv_cmd_buffer.c | 22 ++++++++++++++--------
 src/amd/vulkan/radv_image.c      | 20 +++++++++++---------
 src/amd/vulkan/radv_private.h    | 10 ++++++++--
 3 files changed, 33 insertions(+), 19 deletions(-)

diff --git a/src/amd/vulkan/radv_cmd_buffer.c b/src/amd/vulkan/radv_cmd_buffer.c
index acd1d3931f76..173e199daaa2 100644
--- a/src/amd/vulkan/radv_cmd_buffer.c
+++ b/src/amd/vulkan/radv_cmd_buffer.c
@@ -2578,10 +2578,10 @@ radv_emit_fb_color_state(struct radv_cmd_buffer *cmd_buffer, int index,
       }
    }
 
-   if (!radv_layout_fmask_compressed(
-          cmd_buffer->device, image, layout,
-          radv_image_queue_family_mask(image, cmd_buffer->qf,
-                                       cmd_buffer->qf))) {
+   const enum radv_fmask_compression fmask_comp =
+      radv_layout_fmask_compression(cmd_buffer->device, image, layout,
+            radv_image_queue_family_mask(image, cmd_buffer->qf, cmd_buffer->qf));
+   if (fmask_comp == RADV_FMASK_COMPRESSION_NONE) {
       cb_color_info &= C_028C70_COMPRESSION;
    }
 
@@ -10246,10 +10246,14 @@ radv_handle_color_image_transition(struct radv_cmd_buffer *cmd_buffer, struct ra
    }
 
    /* MSAA color decompress. */
-   if (radv_image_has_fmask(image) &&
-       (image->vk.usage & (VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT)) &&
-       radv_layout_fmask_compressed(cmd_buffer->device, image, src_layout, src_queue_mask) &&
-       !radv_layout_fmask_compressed(cmd_buffer->device, image, dst_layout, dst_queue_mask)) {
+   const enum radv_fmask_compression src_fmask_comp = radv_layout_fmask_compression(cmd_buffer->device,
+         image, src_layout, src_queue_mask);
+   const enum radv_fmask_compression dst_fmask_comp = radv_layout_fmask_compression(cmd_buffer->device,
+         image, dst_layout, dst_queue_mask);
+   if (src_fmask_comp <= dst_fmask_comp)
+      return;
+
+   if (src_fmask_comp == RADV_FMASK_COMPRESSION_FULL) {
       if (radv_dcc_enabled(image, range->baseMipLevel) &&
           !radv_image_use_dcc_image_stores(cmd_buffer->device, image) && !dcc_decompressed) {
          /* A DCC decompress is required before expanding FMASK
@@ -10264,7 +10268,9 @@ radv_handle_color_image_transition(struct radv_cmd_buffer *cmd_buffer, struct ra
           */
          radv_fast_clear_flush_image_inplace(cmd_buffer, image, range);
       }
+   }
 
+   if (dst_fmask_comp == RADV_FMASK_COMPRESSION_NONE) {
       struct radv_barrier_data barrier = {0};
       barrier.layout_transitions.fmask_color_expand = 1;
       radv_describe_layout_transition(cmd_buffer, &barrier);
diff --git a/src/amd/vulkan/radv_image.c b/src/amd/vulkan/radv_image.c
index 73576b400e50..ebf74edad08e 100644
--- a/src/amd/vulkan/radv_image.c
+++ b/src/amd/vulkan/radv_image.c
@@ -2420,23 +2420,25 @@ radv_layout_dcc_compressed(const struct radv_device *device, const struct radv_i
    return device->physical_device->rad_info.gfx_level >= GFX10 || layout != VK_IMAGE_LAYOUT_GENERAL;
 }
 
-bool
-radv_layout_fmask_compressed(const struct radv_device *device, const struct radv_image *image,
-                             VkImageLayout layout, unsigned queue_mask)
+enum radv_fmask_compression
+radv_layout_fmask_compression(const struct radv_device *device, const struct radv_image *image,
+                               VkImageLayout layout, unsigned queue_mask)
 {
    if (!radv_image_has_fmask(image))
-      return false;
+      return RADV_FMASK_COMPRESSION_NONE;
+
+   if (layout == VK_IMAGE_LAYOUT_GENERAL)
+      return RADV_FMASK_COMPRESSION_NONE;
 
    /* Don't compress compute transfer dst because image stores ignore FMASK and it needs to be
     * expanded before.
     */
-   if ((layout == VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL || layout == VK_IMAGE_LAYOUT_GENERAL) &&
-       (queue_mask & (1u << RADV_QUEUE_COMPUTE)))
-      return false;
+   if (layout == VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL && (queue_mask & (1u << RADV_QUEUE_COMPUTE)))
+      return RADV_FMASK_COMPRESSION_NONE;
 
    /* Only compress concurrent images if TC-compat CMASK is enabled (no FMASK decompression). */
-   return layout != VK_IMAGE_LAYOUT_GENERAL &&
-          (queue_mask == (1u << RADV_QUEUE_GENERAL) || radv_image_is_tc_compat_cmask(image));
+   return (queue_mask == (1u << RADV_QUEUE_GENERAL) || radv_image_is_tc_compat_cmask(image)) ?
+      RADV_FMASK_COMPRESSION_FULL : RADV_FMASK_COMPRESSION_NONE;
 }
 
 unsigned
diff --git a/src/amd/vulkan/radv_private.h b/src/amd/vulkan/radv_private.h
index 99d398d93177..e95640a88b80 100644
--- a/src/amd/vulkan/radv_private.h
+++ b/src/amd/vulkan/radv_private.h
@@ -2435,8 +2435,14 @@ bool radv_layout_can_fast_clear(const struct radv_device *device, const struct r
 bool radv_layout_dcc_compressed(const struct radv_device *device, const struct radv_image *image,
                                 unsigned level, VkImageLayout layout, unsigned queue_mask);
 
-bool radv_layout_fmask_compressed(const struct radv_device *device, const struct radv_image *image,
-                                  VkImageLayout layout, unsigned queue_mask);
+enum radv_fmask_compression {
+   RADV_FMASK_COMPRESSION_NONE,
+   RADV_FMASK_COMPRESSION_FULL,
+};
+
+enum radv_fmask_compression radv_layout_fmask_compression(
+      const struct radv_device *device, const struct radv_image *image, VkImageLayout layout,
+      unsigned queue_mask);
 
 /**
  * Return whether the image has CMASK metadata for color surfaces.
-- 
GitLab


From 5294c451c8f2a330135cd97ca63f2b1dfeb1c1f1 Mon Sep 17 00:00:00 2001
From: Chia-I Wu <olvaffe@gmail.com>
Date: Tue, 7 Mar 2023 14:07:35 -0800
Subject: [PATCH 2/3] radv: add RADV_FMASK_COMPRESSION_PARTIAL

RADV_FMASK_COMPRESSION_PARTIAL means the fmask is decompressed but not
expanded.  It is desired for sampling when the cmask is not
TC-compatible.
---
 src/amd/vulkan/radv_image.c   | 6 ++++++
 src/amd/vulkan/radv_private.h | 1 +
 2 files changed, 7 insertions(+)

diff --git a/src/amd/vulkan/radv_image.c b/src/amd/vulkan/radv_image.c
index ebf74edad08e..ec3b9252b05b 100644
--- a/src/amd/vulkan/radv_image.c
+++ b/src/amd/vulkan/radv_image.c
@@ -2436,6 +2436,12 @@ radv_layout_fmask_compression(const struct radv_device *device, const struct rad
    if (layout == VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL && (queue_mask & (1u << RADV_QUEUE_COMPUTE)))
       return RADV_FMASK_COMPRESSION_NONE;
 
+   if (layout == VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL ||
+       layout == VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL) {
+      return radv_image_is_tc_compat_cmask(image) ? RADV_FMASK_COMPRESSION_FULL :
+         RADV_FMASK_COMPRESSION_PARTIAL;
+   }
+
    /* Only compress concurrent images if TC-compat CMASK is enabled (no FMASK decompression). */
    return (queue_mask == (1u << RADV_QUEUE_GENERAL) || radv_image_is_tc_compat_cmask(image)) ?
       RADV_FMASK_COMPRESSION_FULL : RADV_FMASK_COMPRESSION_NONE;
diff --git a/src/amd/vulkan/radv_private.h b/src/amd/vulkan/radv_private.h
index e95640a88b80..257a02393123 100644
--- a/src/amd/vulkan/radv_private.h
+++ b/src/amd/vulkan/radv_private.h
@@ -2437,6 +2437,7 @@ bool radv_layout_dcc_compressed(const struct radv_device *device, const struct r
 
 enum radv_fmask_compression {
    RADV_FMASK_COMPRESSION_NONE,
+   RADV_FMASK_COMPRESSION_PARTIAL,
    RADV_FMASK_COMPRESSION_FULL,
 };
 
-- 
GitLab


From c2a20224d53e6507bb004e19d8443cc39642ec8a Mon Sep 17 00:00:00 2001
From: Chia-I Wu <olvaffe@gmail.com>
Date: Tue, 28 Feb 2023 17:37:57 -0800
Subject: [PATCH 3/3] radv: disable tc_compatible_cmask on GFX9 in some cases

There seems to be issues when sample count > 2 on GFX9.  More precisely,
CTS has issues when sample count > 2.
---
 src/amd/ci/radv-renoir-aco-fails.txt | 33 ----------------------------
 src/amd/ci/radv-vega10-aco-fails.txt | 33 ----------------------------
 src/amd/vulkan/radv_image.c          |  5 +++++
 3 files changed, 5 insertions(+), 66 deletions(-)

diff --git a/src/amd/ci/radv-renoir-aco-fails.txt b/src/amd/ci/radv-renoir-aco-fails.txt
index a56b79fc6970..b373c1d801c0 100644
--- a/src/amd/ci/radv-renoir-aco-fails.txt
+++ b/src/amd/ci/radv-renoir-aco-fails.txt
@@ -1,36 +1,3 @@
-dEQP-VK.api.copy_and_blit.copy_commands2.resolve_image.diff_layout_copy_before_resolving.4_bit_general_general,Fail
-dEQP-VK.api.copy_and_blit.copy_commands2.resolve_image.diff_layout_copy_before_resolving.4_bit_transfer_src_optimal_general,Fail
-dEQP-VK.api.copy_and_blit.copy_commands2.resolve_image.diff_layout_copy_before_resolving.8_bit_general_general,Fail
-dEQP-VK.api.copy_and_blit.copy_commands2.resolve_image.diff_layout_copy_before_resolving.8_bit_transfer_src_optimal_general,Fail
-dEQP-VK.api.copy_and_blit.copy_commands2.resolve_image.whole_copy_before_resolving_compute.4_bit,Fail
-dEQP-VK.api.copy_and_blit.copy_commands2.resolve_image.whole_copy_before_resolving_compute.8_bit,Fail
-dEQP-VK.api.copy_and_blit.core.resolve_image.diff_layout_copy_before_resolving.4_bit_general_general,Fail
-dEQP-VK.api.copy_and_blit.core.resolve_image.diff_layout_copy_before_resolving.4_bit_transfer_src_optimal_general,Fail
-dEQP-VK.api.copy_and_blit.core.resolve_image.diff_layout_copy_before_resolving.8_bit_general_general,Fail
-dEQP-VK.api.copy_and_blit.core.resolve_image.diff_layout_copy_before_resolving.8_bit_transfer_src_optimal_general,Fail
-dEQP-VK.api.copy_and_blit.core.resolve_image.whole_copy_before_resolving_compute.4_bit,Fail
-dEQP-VK.api.copy_and_blit.core.resolve_image.whole_copy_before_resolving_compute.8_bit,Fail
-dEQP-VK.api.copy_and_blit.dedicated_allocation.resolve_image.diff_layout_copy_before_resolving.4_bit_general_general,Fail
-dEQP-VK.api.copy_and_blit.dedicated_allocation.resolve_image.diff_layout_copy_before_resolving.4_bit_transfer_src_optimal_general,Fail
-dEQP-VK.api.copy_and_blit.dedicated_allocation.resolve_image.diff_layout_copy_before_resolving.8_bit_general_general,Fail
-dEQP-VK.api.copy_and_blit.dedicated_allocation.resolve_image.diff_layout_copy_before_resolving.8_bit_transfer_src_optimal_general,Fail
-dEQP-VK.api.copy_and_blit.dedicated_allocation.resolve_image.whole_copy_before_resolving_compute.4_bit,Fail
-dEQP-VK.api.copy_and_blit.dedicated_allocation.resolve_image.whole_copy_before_resolving_compute.8_bit,Fail
-
-# New fails in CTS 1.3.3.0
-dEQP-VK.api.copy_and_blit.copy_commands2.resolve_image.diff_layout_copy_before_resolving.4_bit_general_general_bind_offset,Fail
-dEQP-VK.api.copy_and_blit.copy_commands2.resolve_image.diff_layout_copy_before_resolving.4_bit_transfer_src_optimal_general_bind_offset,Fail
-dEQP-VK.api.copy_and_blit.copy_commands2.resolve_image.diff_layout_copy_before_resolving.8_bit_general_general_bind_offset,Fail
-dEQP-VK.api.copy_and_blit.copy_commands2.resolve_image.diff_layout_copy_before_resolving.8_bit_transfer_src_optimal_general_bind_offset,Fail
-dEQP-VK.api.copy_and_blit.core.resolve_image.diff_layout_copy_before_resolving.4_bit_general_general_bind_offset,Fail
-dEQP-VK.api.copy_and_blit.core.resolve_image.diff_layout_copy_before_resolving.4_bit_transfer_src_optimal_general_bind_offset,Fail
-dEQP-VK.api.copy_and_blit.core.resolve_image.diff_layout_copy_before_resolving.8_bit_general_general_bind_offset,Fail
-dEQP-VK.api.copy_and_blit.core.resolve_image.diff_layout_copy_before_resolving.8_bit_transfer_src_optimal_general_bind_offset,Fail
-dEQP-VK.api.copy_and_blit.dedicated_allocation.resolve_image.diff_layout_copy_before_resolving.4_bit_general_general_bind_offset,Fail
-dEQP-VK.api.copy_and_blit.dedicated_allocation.resolve_image.diff_layout_copy_before_resolving.4_bit_transfer_src_optimal_general_bind_offset,Fail
-dEQP-VK.api.copy_and_blit.dedicated_allocation.resolve_image.diff_layout_copy_before_resolving.8_bit_general_general_bind_offset,Fail
-dEQP-VK.api.copy_and_blit.dedicated_allocation.resolve_image.diff_layout_copy_before_resolving.8_bit_transfer_src_optimal_general_bind_offset,Fail
-
 # Test bugs with GPL (all of them should be fixed with recent CTS).
 dEQP-VK.fragment_shading_rate.dynamic_rendering.primary_cmd_buff.fast_linked_library.misc_tests.sample_mask_test,Fail
 dEQP-VK.fragment_shading_rate.dynamic_rendering.primary_cmd_buff.pipeline_library.misc_tests.sample_mask_test,Fail
diff --git a/src/amd/ci/radv-vega10-aco-fails.txt b/src/amd/ci/radv-vega10-aco-fails.txt
index a56b79fc6970..b373c1d801c0 100644
--- a/src/amd/ci/radv-vega10-aco-fails.txt
+++ b/src/amd/ci/radv-vega10-aco-fails.txt
@@ -1,36 +1,3 @@
-dEQP-VK.api.copy_and_blit.copy_commands2.resolve_image.diff_layout_copy_before_resolving.4_bit_general_general,Fail
-dEQP-VK.api.copy_and_blit.copy_commands2.resolve_image.diff_layout_copy_before_resolving.4_bit_transfer_src_optimal_general,Fail
-dEQP-VK.api.copy_and_blit.copy_commands2.resolve_image.diff_layout_copy_before_resolving.8_bit_general_general,Fail
-dEQP-VK.api.copy_and_blit.copy_commands2.resolve_image.diff_layout_copy_before_resolving.8_bit_transfer_src_optimal_general,Fail
-dEQP-VK.api.copy_and_blit.copy_commands2.resolve_image.whole_copy_before_resolving_compute.4_bit,Fail
-dEQP-VK.api.copy_and_blit.copy_commands2.resolve_image.whole_copy_before_resolving_compute.8_bit,Fail
-dEQP-VK.api.copy_and_blit.core.resolve_image.diff_layout_copy_before_resolving.4_bit_general_general,Fail
-dEQP-VK.api.copy_and_blit.core.resolve_image.diff_layout_copy_before_resolving.4_bit_transfer_src_optimal_general,Fail
-dEQP-VK.api.copy_and_blit.core.resolve_image.diff_layout_copy_before_resolving.8_bit_general_general,Fail
-dEQP-VK.api.copy_and_blit.core.resolve_image.diff_layout_copy_before_resolving.8_bit_transfer_src_optimal_general,Fail
-dEQP-VK.api.copy_and_blit.core.resolve_image.whole_copy_before_resolving_compute.4_bit,Fail
-dEQP-VK.api.copy_and_blit.core.resolve_image.whole_copy_before_resolving_compute.8_bit,Fail
-dEQP-VK.api.copy_and_blit.dedicated_allocation.resolve_image.diff_layout_copy_before_resolving.4_bit_general_general,Fail
-dEQP-VK.api.copy_and_blit.dedicated_allocation.resolve_image.diff_layout_copy_before_resolving.4_bit_transfer_src_optimal_general,Fail
-dEQP-VK.api.copy_and_blit.dedicated_allocation.resolve_image.diff_layout_copy_before_resolving.8_bit_general_general,Fail
-dEQP-VK.api.copy_and_blit.dedicated_allocation.resolve_image.diff_layout_copy_before_resolving.8_bit_transfer_src_optimal_general,Fail
-dEQP-VK.api.copy_and_blit.dedicated_allocation.resolve_image.whole_copy_before_resolving_compute.4_bit,Fail
-dEQP-VK.api.copy_and_blit.dedicated_allocation.resolve_image.whole_copy_before_resolving_compute.8_bit,Fail
-
-# New fails in CTS 1.3.3.0
-dEQP-VK.api.copy_and_blit.copy_commands2.resolve_image.diff_layout_copy_before_resolving.4_bit_general_general_bind_offset,Fail
-dEQP-VK.api.copy_and_blit.copy_commands2.resolve_image.diff_layout_copy_before_resolving.4_bit_transfer_src_optimal_general_bind_offset,Fail
-dEQP-VK.api.copy_and_blit.copy_commands2.resolve_image.diff_layout_copy_before_resolving.8_bit_general_general_bind_offset,Fail
-dEQP-VK.api.copy_and_blit.copy_commands2.resolve_image.diff_layout_copy_before_resolving.8_bit_transfer_src_optimal_general_bind_offset,Fail
-dEQP-VK.api.copy_and_blit.core.resolve_image.diff_layout_copy_before_resolving.4_bit_general_general_bind_offset,Fail
-dEQP-VK.api.copy_and_blit.core.resolve_image.diff_layout_copy_before_resolving.4_bit_transfer_src_optimal_general_bind_offset,Fail
-dEQP-VK.api.copy_and_blit.core.resolve_image.diff_layout_copy_before_resolving.8_bit_general_general_bind_offset,Fail
-dEQP-VK.api.copy_and_blit.core.resolve_image.diff_layout_copy_before_resolving.8_bit_transfer_src_optimal_general_bind_offset,Fail
-dEQP-VK.api.copy_and_blit.dedicated_allocation.resolve_image.diff_layout_copy_before_resolving.4_bit_general_general_bind_offset,Fail
-dEQP-VK.api.copy_and_blit.dedicated_allocation.resolve_image.diff_layout_copy_before_resolving.4_bit_transfer_src_optimal_general_bind_offset,Fail
-dEQP-VK.api.copy_and_blit.dedicated_allocation.resolve_image.diff_layout_copy_before_resolving.8_bit_general_general_bind_offset,Fail
-dEQP-VK.api.copy_and_blit.dedicated_allocation.resolve_image.diff_layout_copy_before_resolving.8_bit_transfer_src_optimal_general_bind_offset,Fail
-
 # Test bugs with GPL (all of them should be fixed with recent CTS).
 dEQP-VK.fragment_shading_rate.dynamic_rendering.primary_cmd_buff.fast_linked_library.misc_tests.sample_mask_test,Fail
 dEQP-VK.fragment_shading_rate.dynamic_rendering.primary_cmd_buff.pipeline_library.misc_tests.sample_mask_test,Fail
diff --git a/src/amd/vulkan/radv_image.c b/src/amd/vulkan/radv_image.c
index ec3b9252b05b..aa057638e4a1 100644
--- a/src/amd/vulkan/radv_image.c
+++ b/src/amd/vulkan/radv_image.c
@@ -387,6 +387,11 @@ radv_use_tc_compat_cmask_for_image(struct radv_device *device, struct radv_image
    if (device->physical_device->rad_info.gfx_level < GFX8)
       return false;
 
+   /* GFX9 has issues when sample count is greater than 2 */
+   if (device->physical_device->rad_info.gfx_level == GFX9 &&
+       image->info.samples > 2)
+      return false;
+
    if (device->instance->debug_flags & RADV_DEBUG_NO_TC_COMPAT_CMASK)
       return false;
 
-- 
GitLab

