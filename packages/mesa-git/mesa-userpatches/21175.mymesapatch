From 2f777228e5c72a12517ecabdbae68aab45328888 Mon Sep 17 00:00:00 2001
From: Patrick Lerda <patrick9876@free.fr>
Date: Tue, 7 Feb 2023 03:07:59 +0100
Subject: [PATCH] mesa/st: fix possible crash related to arb invalid memory
 access

This invalid memory access is a consequence of wrong assumptions,
for instance:
"prog->sh.data is NULL if it's ARB_fragment_program"

This issue is triggered with piglit/fp-formats -auto -fbo:
==9747==ERROR: AddressSanitizer: heap-use-after-free on address 0x007f7c812d90 at pc 0x007f833c09f8 bp 0x007fd7eca750 sp 0x007fd7eca768
READ of size 4 at 0x007f7c812d90 thread T0
    #0 0x7f833c09f4 in st_get_sampler_views ../src/mesa/state_tracker/st_atom_texture.c:109
    #1 0x7f833c0b48 in update_textures ../src/mesa/state_tracker/st_atom_texture.c:266
    #2 0x7f82b2d120 in st_validate_state ../src/mesa/state_tracker/st_util.h:128
    #3 0x7f82b2d120 in prepare_draw ../src/mesa/state_tracker/st_draw.c:88
    #4 0x7f82b2de64 in st_draw_gallium ../src/mesa/state_tracker/st_draw.c:141
    #5 0x7f83105940 in _mesa_draw_arrays ../src/mesa/main/draw.c:1202
    #6 0x7f8d5fa5cc in piglit_draw_rect_from_arrays piglit/tests/util/piglit-util-gl.c:711
    #7 0x7f8d5fac34 in piglit_draw_rect_custom piglit/tests/util/piglit-util-gl.c:833
    #8 0x4019e0 in piglit_display piglit/tests/shaders/fp-formats.c:67
    #9 0x7f8d643fc4 in run_test piglit/tests/util/piglit-framework-gl/piglit_fbo_framework.c:52
    #10 0x401624 in main piglit/tests/shaders/fp-formats.c:39

Signed-off-by: Patrick Lerda <patrick9876@free.fr>
---
 src/mesa/state_tracker/st_atom_sampler.c |  3 ++-
 src/mesa/state_tracker/st_atom_texture.c |  4 ++--
 src/mesa/state_tracker/st_glsl_version.h | 18 ++++++++++++++++++
 src/mesa/state_tracker/st_texture.c      |  8 ++++----
 4 files changed, 26 insertions(+), 7 deletions(-)
 create mode 100644 src/mesa/state_tracker/st_glsl_version.h

diff --git a/src/mesa/state_tracker/st_atom_sampler.c b/src/mesa/state_tracker/st_atom_sampler.c
index 1383e1d8c134..c6c3e0e241d7 100644
--- a/src/mesa/state_tracker/st_atom_sampler.c
+++ b/src/mesa/state_tracker/st_atom_sampler.c
@@ -44,6 +44,7 @@
 #include "st_atom.h"
 #include "st_sampler_view.h"
 #include "st_texture.h"
+#include "st_glsl_version.h"
 #include "pipe/p_context.h"
 #include "pipe/p_defines.h"
 
@@ -226,7 +227,7 @@ update_shader_samplers(struct st_context *st,
           (ctx->Texture.Unit[tex_unit]._Current->Target != GL_TEXTURE_BUFFER ||
            st->texture_buffer_sampler)) {
          st_convert_sampler_from_unit(st, sampler, tex_unit,
-                                      prog->sh.data && prog->sh.data->Version >= 130);
+                                      get_glsl_version(prog) >= 130);
          states[unit] = sampler;
       } else {
          states[unit] = NULL;
diff --git a/src/mesa/state_tracker/st_atom_texture.c b/src/mesa/state_tracker/st_atom_texture.c
index 0ebc5b88bdac..cbff54d435f5 100644
--- a/src/mesa/state_tracker/st_atom_texture.c
+++ b/src/mesa/state_tracker/st_atom_texture.c
@@ -46,6 +46,7 @@
 #include "st_texture.h"
 #include "st_format.h"
 #include "st_cb_texture.h"
+#include "st_glsl_version.h"
 #include "pipe/p_context.h"
 #include "util/format/u_format.h"
 #include "util/u_inlines.h"
@@ -105,8 +106,7 @@ st_get_sampler_views(struct st_context *st,
 
    unsigned num_textures = util_last_bit(samplers_used);
 
-   /* prog->sh.data is NULL if it's ARB_fragment_program */
-   bool glsl130 = (prog->sh.data ? prog->sh.data->Version : 0) >= 130;
+   const bool glsl130 = get_glsl_version(prog) >= 130;
 
    /* loop over sampler units (aka tex image units) */
    for (unit = 0; unit < num_textures; unit++) {
diff --git a/src/mesa/state_tracker/st_glsl_version.h b/src/mesa/state_tracker/st_glsl_version.h
new file mode 100644
index 000000000000..f4aadf2d5b85
--- /dev/null
+++ b/src/mesa/state_tracker/st_glsl_version.h
@@ -0,0 +1,18 @@
+#ifndef ST_GLSL_VERSION_H
+#define ST_GLSL_VERSION_H
+
+static inline unsigned
+get_glsl_version(const struct gl_program *prog)
+{
+   if (prog->sh.data == NULL)
+      return 0;
+
+   if ((prog->Target == GL_VERTEX_PROGRAM_ARB ||
+        prog->Target == GL_FRAGMENT_PROGRAM_ARB) &&
+       prog->arb.NumInstructions > 0)
+      return 0;
+
+   return prog->sh.data->Version;
+}
+
+#endif
diff --git a/src/mesa/state_tracker/st_texture.c b/src/mesa/state_tracker/st_texture.c
index 3f295bfadfeb..a3a25e1b0d69 100644
--- a/src/mesa/state_tracker/st_texture.c
+++ b/src/mesa/state_tracker/st_texture.c
@@ -30,6 +30,7 @@
 #include "st_context.h"
 #include "st_format.h"
 #include "st_texture.h"
+#include "st_glsl_version.h"
 #include "main/enums.h"
 
 #include "pipe/p_state.h"
@@ -523,16 +524,15 @@ st_create_texture_handle_from_unit(struct st_context *st,
    struct pipe_context *pipe = st->pipe;
    struct pipe_sampler_view *view;
    struct pipe_sampler_state sampler = {0};
+   const bool glsl130 = get_glsl_version(prog) >= 130;
 
    /* TODO: Clarify the interaction of ARB_bindless_texture and EXT_texture_sRGB_decode */
-   view = st_update_single_texture(st, texUnit, prog->sh.data->Version >= 130,
-                                   true, false);
+   view = st_update_single_texture(st, texUnit, glsl130, true, false);
    if (!view)
       return 0;
 
    if (view->target != PIPE_BUFFER)
-      st_convert_sampler_from_unit(st, &sampler, texUnit,
-                                   prog->sh.data && prog->sh.data->Version >= 130);
+      st_convert_sampler_from_unit(st, &sampler, texUnit, glsl130);
 
    assert(st->ctx->Texture.Unit[texUnit]._Current);
 
-- 
GitLab

