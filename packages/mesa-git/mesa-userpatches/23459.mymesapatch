From b6cb5426ea071e8bdd5a576f877eb27d4ecb02da Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Timur=20Krist=C3=B3f?= <timur.kristof@gmail.com>
Date: Tue, 6 Jun 2023 10:17:16 +0200
Subject: [PATCH] radv: Leave primitive reset index at max on GFX8+
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

GFX8+ only compares the bits according to the index type by default
(GFX9 can be changed by VGT_MULTI_PRIM_IB_RESET_EN.MATCH_ALL_BITS),
so we can always leave the programmed value at the maximum.

Advantages of this change:

* Reduces context rolls on GFX8+ when primitive restart is used
* Slightly reduces the overhead of the late scissor workaround

Signed-off-by: Timur Krist√≥f <timur.kristof@gmail.com>
---
 src/amd/vulkan/radv_cmd_buffer.c | 24 +++++++++---------------
 src/amd/vulkan/radv_private.h    |  2 +-
 src/amd/vulkan/si_cmd_buffer.c   |  7 +++++++
 3 files changed, 17 insertions(+), 16 deletions(-)

diff --git a/src/amd/vulkan/radv_cmd_buffer.c b/src/amd/vulkan/radv_cmd_buffer.c
index 0e51ef69f925d..899f847bbeffb 100644
--- a/src/amd/vulkan/radv_cmd_buffer.c
+++ b/src/amd/vulkan/radv_cmd_buffer.c
@@ -2407,19 +2407,24 @@ radv_get_primitive_reset_index(const struct radv_cmd_buffer *cmd_buffer)
 static void
 radv_emit_primitive_restart_enable(struct radv_cmd_buffer *cmd_buffer)
 {
+   const enum amd_gfx_level gfx_level = cmd_buffer->device->physical_device->rad_info.gfx_level;
    const struct radv_dynamic_state *d = &cmd_buffer->state.dynamic;
    struct radeon_cmdbuf *cs = cmd_buffer->cs;
    const bool en = d->vk.ia.primitive_restart_enable;
 
-   if (cmd_buffer->device->physical_device->rad_info.gfx_level >= GFX11) {
+   if (gfx_level >= GFX11) {
       radeon_set_uconfig_reg(cs, R_03092C_GE_MULTI_PRIM_IB_RESET_EN, en);
-   } else if (cmd_buffer->device->physical_device->rad_info.gfx_level >= GFX9) {
+   } else if (gfx_level >= GFX9) {
       radeon_set_uconfig_reg(cs, R_03092C_VGT_MULTI_PRIM_IB_RESET_EN, en);
    } else {
       radeon_set_context_reg(cs, R_028A94_VGT_MULTI_PRIM_IB_RESET_EN, en);
    }
 
-   if (en) {
+   /* GFX6-7: All 32 bits are compared.
+    * GFX8: Only index type bits are compared.
+    * GFX9+: Default is same as GFX8, MATCH_ALL_BITS=1 selects GFX6-7 behavior
+    */
+   if (en && gfx_level >= GFX8) {
       const uint32_t primitive_reset_index = radv_get_primitive_reset_index(cmd_buffer);
 
       if (primitive_reset_index != cmd_buffer->state.last_primitive_reset_index) {
@@ -8937,8 +8942,6 @@ static bool
 radv_need_late_scissor_emission(struct radv_cmd_buffer *cmd_buffer,
                                 const struct radv_draw_info *info)
 {
-   struct radv_cmd_state *state = &cmd_buffer->state;
-
    if (cmd_buffer->state.context_roll_without_scissor_emitted || info->strmout_buffer)
       return true;
 
@@ -8951,16 +8954,7 @@ radv_need_late_scissor_emission(struct radv_cmd_buffer *cmd_buffer,
    used_states &= ~(RADV_CMD_DIRTY_INDEX_BUFFER | RADV_CMD_DIRTY_VERTEX_BUFFER |
                     RADV_CMD_DIRTY_DYNAMIC_VERTEX_INPUT | RADV_CMD_DIRTY_STREAMOUT_BUFFER);
 
-   if (cmd_buffer->state.dirty & used_states)
-      return true;
-
-   uint32_t primitive_reset_index = radv_get_primitive_reset_index(cmd_buffer);
-
-   if (info->indexed && state->dynamic.vk.ia.primitive_restart_enable &&
-       primitive_reset_index != state->last_primitive_reset_index)
-      return true;
-
-   return false;
+   return cmd_buffer->state.dirty & used_states;
 }
 
 ALWAYS_INLINE static uint32_t
diff --git a/src/amd/vulkan/radv_private.h b/src/amd/vulkan/radv_private.h
index 7bd6a78cb5c12..2f3ae9a63840f 100644
--- a/src/amd/vulkan/radv_private.h
+++ b/src/amd/vulkan/radv_private.h
@@ -1629,7 +1629,7 @@ struct radv_cmd_state {
    uint64_t index_va;
    int32_t last_index_type;
 
-   uint32_t last_primitive_reset_index;
+   uint32_t last_primitive_reset_index; /* only relevant on GFX6-8 */
    enum radv_cmd_flush_bits flush_bits;
    unsigned active_occlusion_queries;
    bool perfect_occlusion_queries_enabled;
diff --git a/src/amd/vulkan/si_cmd_buffer.c b/src/amd/vulkan/si_cmd_buffer.c
index 9e1687cd0f7e2..8db543deb12ff 100644
--- a/src/amd/vulkan/si_cmd_buffer.c
+++ b/src/amd/vulkan/si_cmd_buffer.c
@@ -545,6 +545,13 @@ si_emit_graphics(struct radv_device *device, struct radeon_cmdbuf *cs)
       }
    }
 
+   if (physical_device->rad_info.gfx_level >= GFX8) {
+      /* GFX8+ only compares the bits according to the index type by default,
+       * so we can always leave the programmed value at the maximum.
+       */
+      radeon_set_context_reg(cs, R_02840C_VGT_MULTI_PRIM_IB_RESET_INDX, 0xffffffff);
+   }
+
    if (physical_device->rad_info.gfx_level >= GFX9) {
       radeon_set_context_reg(
          cs, R_028C48_PA_SC_BINNER_CNTL_1,
-- 
GitLab

