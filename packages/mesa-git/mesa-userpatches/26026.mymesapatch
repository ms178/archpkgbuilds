From 2fd21c882351bfe6e72b2fc49cdd40c37483beb2 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Daniel=20Sch=C3=BCrmann?= <daniel@schuermann.dev>
Date: Thu, 2 Nov 2023 15:38:46 +0100
Subject: [PATCH 1/4] nir: remove info.fs.needs_all_helper_invocations

Use info.uses_wide_subgroup_intrinsics instead.
---
 src/asahi/compiler/agx_compile.c               | 2 +-
 src/compiler/nir/nir_gather_info.c             | 4 ----
 src/compiler/nir/nir_lower_discard_or_demote.c | 2 +-
 src/compiler/nir/nir_print.c                   | 1 -
 src/compiler/shader_info.h                     | 6 ------
 src/intel/compiler/brw_fs.cpp                  | 2 +-
 6 files changed, 3 insertions(+), 14 deletions(-)

diff --git a/src/asahi/compiler/agx_compile.c b/src/asahi/compiler/agx_compile.c
index a6b19dbf4aaae..5b4c6a8aba9cc 100644
--- a/src/asahi/compiler/agx_compile.c
+++ b/src/asahi/compiler/agx_compile.c
@@ -2969,7 +2969,7 @@ agx_compile_shader_nir(nir_shader *nir, struct agx_shader_key *key,
          nir->info.outputs_written & (VARYING_BIT_LAYER | VARYING_BIT_VIEWPORT);
 
    } else if (nir->info.stage == MESA_SHADER_FRAGMENT) {
-      out->disable_tri_merging = nir->info.fs.needs_all_helper_invocations ||
+      out->disable_tri_merging = nir->info.uses_wide_subgroup_intrinsics ||
                                  nir->info.fs.needs_quad_helper_invocations ||
                                  nir->info.writes_memory;
 
diff --git a/src/compiler/nir/nir_gather_info.c b/src/compiler/nir/nir_gather_info.c
index 040949fe1b4ac..eb83131997fe5 100644
--- a/src/compiler/nir/nir_gather_info.c
+++ b/src/compiler/nir/nir_gather_info.c
@@ -756,9 +756,6 @@ gather_intrinsic_info(nir_intrinsic_instr *instr, nir_shader *shader,
    case nir_intrinsic_shuffle_up:
    case nir_intrinsic_shuffle_down:
    case nir_intrinsic_write_invocation_amd:
-      if (shader->info.stage == MESA_SHADER_FRAGMENT)
-         shader->info.fs.needs_all_helper_invocations = true;
-
       shader->info.uses_wide_subgroup_intrinsics = true;
       break;
 
@@ -972,7 +969,6 @@ nir_shader_gather_info(nir_shader *shader, nir_function_impl *entrypoint)
       shader->info.fs.color_is_dual_source = false;
       shader->info.fs.uses_fbfetch_output = false;
       shader->info.fs.needs_quad_helper_invocations = false;
-      shader->info.fs.needs_all_helper_invocations = false;
    }
    if (shader->info.stage == MESA_SHADER_TESS_CTRL) {
       shader->info.tess.tcs_cross_invocation_inputs_read = 0;
diff --git a/src/compiler/nir/nir_lower_discard_or_demote.c b/src/compiler/nir/nir_lower_discard_or_demote.c
index b01a20ecdf978..06f672844e31e 100644
--- a/src/compiler/nir/nir_lower_discard_or_demote.c
+++ b/src/compiler/nir/nir_lower_discard_or_demote.c
@@ -158,7 +158,7 @@ nir_lower_discard_or_demote(nir_shader *shader,
                                             NULL);
       shader->info.fs.uses_demote = true;
    } else if (!shader->info.fs.needs_quad_helper_invocations &&
-              !shader->info.fs.needs_all_helper_invocations &&
+              !shader->info.uses_wide_subgroup_intrinsics &&
               shader->info.fs.uses_demote) {
       /* If we don't need any helper invocations, convert demote to discard. */
       progress = nir_shader_intrinsics_pass(shader, lower_demote_to_discard,
diff --git a/src/compiler/nir/nir_print.c b/src/compiler/nir/nir_print.c
index 49ea8e7ccdd03..cbf46a01e4c65 100644
--- a/src/compiler/nir/nir_print.c
+++ b/src/compiler/nir/nir_print.c
@@ -2534,7 +2534,6 @@ print_shader_info(const struct shader_info *info, FILE *fp)
       print_nz_bool(fp, "color_is_dual_source", info->fs.color_is_dual_source);
 
       print_nz_bool(fp, "needs_quad_helper_invocations", info->fs.needs_quad_helper_invocations);
-      print_nz_bool(fp, "needs_all_helper_invocations", info->fs.needs_all_helper_invocations);
       print_nz_bool(fp, "uses_sample_qualifier", info->fs.uses_sample_qualifier);
       print_nz_bool(fp, "uses_sample_shading", info->fs.uses_sample_shading);
       print_nz_bool(fp, "early_fragment_tests", info->fs.early_fragment_tests);
diff --git a/src/compiler/shader_info.h b/src/compiler/shader_info.h
index 40e50e5e8184e..8f519418d6b70 100644
--- a/src/compiler/shader_info.h
+++ b/src/compiler/shader_info.h
@@ -422,12 +422,6 @@ typedef struct shader_info {
           */
          bool needs_quad_helper_invocations:1;
 
-         /**
-          * True if this fragment shader requires helper invocations for
-          * all subgroup operations, not just quad ops and derivatives.
-          */
-         bool needs_all_helper_invocations:1;
-
          /**
           * Whether any inputs are declared with the "sample" qualifier.
           */
diff --git a/src/intel/compiler/brw_fs.cpp b/src/intel/compiler/brw_fs.cpp
index 74840c931076b..5f987b4f4a02f 100644
--- a/src/intel/compiler/brw_fs.cpp
+++ b/src/intel/compiler/brw_fs.cpp
@@ -7793,7 +7793,7 @@ brw_nir_populate_wm_prog_data(nir_shader *shader,
     */
    prog_data->uses_vmask = devinfo->verx10 < 125 ||
                            shader->info.fs.needs_quad_helper_invocations ||
-                           shader->info.fs.needs_all_helper_invocations ||
+                           shader->info.uses_wide_subgroup_intrinsics ||
                            prog_data->coarse_pixel_dispatch != BRW_NEVER;
 
    prog_data->uses_src_w =
-- 
GitLab


From 24786a0f4f42feca89bdc5dcbae8a51f9a86e3e6 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Daniel=20Sch=C3=BCrmann?= <daniel@schuermann.dev>
Date: Fri, 3 Nov 2023 12:18:18 +0100
Subject: [PATCH 2/4] nir/gather_info: add missing wide subgroup operations

---
 src/compiler/nir/nir_gather_info.c | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/src/compiler/nir/nir_gather_info.c b/src/compiler/nir/nir_gather_info.c
index eb83131997fe5..86e5600443389 100644
--- a/src/compiler/nir/nir_gather_info.c
+++ b/src/compiler/nir/nir_gather_info.c
@@ -745,6 +745,7 @@ gather_intrinsic_info(nir_intrinsic_instr *instr, nir_shader *shader,
    case nir_intrinsic_ballot_find_lsb:
    case nir_intrinsic_ballot_find_msb:
    case nir_intrinsic_first_invocation:
+   case nir_intrinsic_last_invocation:
    case nir_intrinsic_read_invocation:
    case nir_intrinsic_read_first_invocation:
    case nir_intrinsic_elect:
@@ -755,6 +756,8 @@ gather_intrinsic_info(nir_intrinsic_instr *instr, nir_shader *shader,
    case nir_intrinsic_shuffle_xor:
    case nir_intrinsic_shuffle_up:
    case nir_intrinsic_shuffle_down:
+   case nir_intrinsic_masked_swizzle_amd:
+   case nir_intrinsic_mbcnt_amd:
    case nir_intrinsic_write_invocation_amd:
       shader->info.uses_wide_subgroup_intrinsics = true;
       break;
-- 
GitLab


From 0e1b8e2d93f1af6e666e1a97c1e27afbafb47b5a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Daniel=20Sch=C3=BCrmann?= <daniel@schuermann.dev>
Date: Thu, 2 Nov 2023 15:44:40 +0100
Subject: [PATCH 3/4] nir: add info.fs.require_full_quads

This flag indicates the requirement of helper invocations
in fragment shaders, independent from any present instructions.
This fixes the lowering of OpGroupNonUniformQuad* instructions.
---
 src/compiler/nir/nir_gather_info.c | 4 ++++
 src/compiler/nir/nir_print.c       | 1 +
 src/compiler/shader_info.h         | 9 +++++++--
 src/compiler/spirv/vtn_subgroup.c  | 2 ++
 4 files changed, 14 insertions(+), 2 deletions(-)

diff --git a/src/compiler/nir/nir_gather_info.c b/src/compiler/nir/nir_gather_info.c
index 86e5600443389..232d3f61dc3b8 100644
--- a/src/compiler/nir/nir_gather_info.c
+++ b/src/compiler/nir/nir_gather_info.c
@@ -760,6 +760,10 @@ gather_intrinsic_info(nir_intrinsic_instr *instr, nir_shader *shader,
    case nir_intrinsic_mbcnt_amd:
    case nir_intrinsic_write_invocation_amd:
       shader->info.uses_wide_subgroup_intrinsics = true;
+
+      if (shader->info.stage == MESA_SHADER_FRAGMENT &&
+          shader->info.fs.require_full_quads)
+         shader->info.fs.needs_quad_helper_invocations = true;
       break;
 
    case nir_intrinsic_end_primitive:
diff --git a/src/compiler/nir/nir_print.c b/src/compiler/nir/nir_print.c
index cbf46a01e4c65..215c2a15977b4 100644
--- a/src/compiler/nir/nir_print.c
+++ b/src/compiler/nir/nir_print.c
@@ -2533,6 +2533,7 @@ print_shader_info(const struct shader_info *info, FILE *fp)
       print_nz_bool(fp, "uses_fbfetch_output", info->fs.uses_fbfetch_output);
       print_nz_bool(fp, "color_is_dual_source", info->fs.color_is_dual_source);
 
+      print_nz_bool(fp, "require_full_quads", info->fs.require_full_quads);
       print_nz_bool(fp, "needs_quad_helper_invocations", info->fs.needs_quad_helper_invocations);
       print_nz_bool(fp, "uses_sample_qualifier", info->fs.uses_sample_qualifier);
       print_nz_bool(fp, "uses_sample_shading", info->fs.uses_sample_shading);
diff --git a/src/compiler/shader_info.h b/src/compiler/shader_info.h
index 8f519418d6b70..025ae746d885f 100644
--- a/src/compiler/shader_info.h
+++ b/src/compiler/shader_info.h
@@ -414,11 +414,16 @@ typedef struct shader_info {
          bool fbfetch_coherent:1;
          bool color_is_dual_source:1;
 
+         /**
+          * True if this fragment shader requires full quad invocations.
+          */
+         bool require_full_quads:1;
+
          /**
           * True if this fragment shader requires helper invocations.  This
           * can be caused by the use of ALU derivative ops, texture
-          * instructions which do implicit derivatives, and the use of quad
-          * subgroup operations.
+          * instructions which do implicit derivatives, the use of quad
+          * subgroup operations or if the shader requires full quads.
           */
          bool needs_quad_helper_invocations:1;
 
diff --git a/src/compiler/spirv/vtn_subgroup.c b/src/compiler/spirv/vtn_subgroup.c
index de18259a199cd..4a987c900acb7 100644
--- a/src/compiler/spirv/vtn_subgroup.c
+++ b/src/compiler/spirv/vtn_subgroup.c
@@ -341,6 +341,7 @@ vtn_handle_subgroup(struct vtn_builder *b, SpvOp opcode,
    }
 
    case SpvOpGroupNonUniformQuadBroadcast:
+      b->shader->info.fs.require_full_quads = true;
       vtn_push_ssa_value(b, w[2],
          vtn_build_subgroup_instr(b, nir_intrinsic_quad_broadcast,
                                   vtn_ssa_value(b, w[4]),
@@ -348,6 +349,7 @@ vtn_handle_subgroup(struct vtn_builder *b, SpvOp opcode,
       break;
 
    case SpvOpGroupNonUniformQuadSwap: {
+      b->shader->info.fs.require_full_quads = true;
       unsigned direction = vtn_constant_uint(b, w[5]);
       nir_intrinsic_op op;
       switch (direction) {
-- 
GitLab


From 14635d68468938e4e81592302c7d223091a3f480 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Daniel=20Sch=C3=BCrmann?= <daniel@schuermann.dev>
Date: Thu, 2 Nov 2023 16:45:29 +0100
Subject: [PATCH 4/4] aco: enable helper lanes if
 shader->info.fs.require_full_quads

This enables helper invocations also for lowered quad group operations.
---
 src/amd/compiler/aco_instruction_selection.cpp | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/amd/compiler/aco_instruction_selection.cpp b/src/amd/compiler/aco_instruction_selection.cpp
index bf78be5454f21..97f31ab55fbc4 100644
--- a/src/amd/compiler/aco_instruction_selection.cpp
+++ b/src/amd/compiler/aco_instruction_selection.cpp
@@ -174,6 +174,7 @@ set_wqm(isel_context* ctx, bool enable_helpers = false)
    if (ctx->program->stage == fragment_fs) {
       ctx->wqm_block_idx = ctx->block->index;
       ctx->wqm_instruction_idx = ctx->block->instructions.size();
+      enable_helpers |= ctx->shader->info.fs.require_full_quads;
       ctx->program->needs_wqm |= enable_helpers;
    }
 }
@@ -8675,8 +8676,7 @@ visit_intrinsic(isel_context* ctx, nir_intrinsic_instr* instr)
          isel_err(&instr->instr, "Unimplemented NIR quad group instruction bit size.");
       }
 
-      /* Vulkan spec 9.25: Helper invocations must be active for quad group instructions. */
-      set_wqm(ctx, true);
+      set_wqm(ctx);
       break;
    }
    case nir_intrinsic_masked_swizzle_amd: {
-- 
GitLab

