From 517c06e1b3a47f00b4e62726c4d574474b90682d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Daniel=20Sch=C3=BCrmann?= <daniel@schuermann.dev>
Date: Tue, 16 Apr 2024 11:32:46 +0200
Subject: [PATCH 1/3] nir: implement loop invariant code motion (LICM) pass

This simple LICM pass hoists all loop-invariant instructions
from the loops' top-level control flow, skipping any nested CF.
The hoisted instructions are placed right before the loop.

Reviewed-by: Georg Lehmann <dadschoorse@gmail.com>
Part-of: <https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/28783>
---
 src/compiler/nir/meson.build    |   1 +
 src/compiler/nir/nir.h          |   1 +
 src/compiler/nir/nir_opt_licm.c | 120 ++++++++++++++++++++++++++++++++
 3 files changed, 122 insertions(+)
 create mode 100644 src/compiler/nir/nir_opt_licm.c

diff --git a/src/compiler/nir/meson.build b/src/compiler/nir/meson.build
index 42ff91799df53..6d1d05172b752 100644
--- a/src/compiler/nir/meson.build
+++ b/src/compiler/nir/meson.build
@@ -252,6 +252,7 @@ files_libnir = files(
   'nir_opt_if.c',
   'nir_opt_intrinsics.c',
   'nir_opt_large_constants.c',
+  'nir_opt_licm.c',
   'nir_opt_load_store_vectorize.c',
   'nir_opt_loop.c',
   'nir_opt_loop_unroll.c',
diff --git a/src/compiler/nir/nir.h b/src/compiler/nir/nir.h
index 0418507866da8..e7fbf15de4c8e 100644
--- a/src/compiler/nir/nir.h
+++ b/src/compiler/nir/nir.h
@@ -6530,6 +6530,7 @@ bool nir_opt_large_constants(nir_shader *shader,
                              glsl_type_size_align_func size_align,
                              unsigned threshold);
 
+bool nir_opt_licm(nir_shader *shader);
 bool nir_opt_loop(nir_shader *shader);
 
 bool nir_opt_loop_unroll(nir_shader *shader);
diff --git a/src/compiler/nir/nir_opt_licm.c b/src/compiler/nir/nir_opt_licm.c
new file mode 100644
index 0000000000000..c9ba6fd5cdc39
--- /dev/null
+++ b/src/compiler/nir/nir_opt_licm.c
@@ -0,0 +1,120 @@
+/*
+ * Copyright 2024 Valve Corporation
+ * SPDX-License-Identifier: MIT
+ */
+
+#include "nir.h"
+
+static bool
+defined_before_loop(nir_src *src, void *state)
+{
+   unsigned *loop_preheader_idx = state;
+   return src->ssa->parent_instr->block->index <= *loop_preheader_idx;
+}
+
+static bool
+is_instr_loop_invariant(nir_instr *instr, unsigned loop_preheader_idx)
+{
+   switch (instr->type) {
+   case nir_instr_type_load_const:
+   case nir_instr_type_undef:
+      return true;
+
+   case nir_instr_type_intrinsic:
+      if (!nir_intrinsic_can_reorder(nir_instr_as_intrinsic(instr)))
+         return false;
+      FALLTHROUGH;
+
+   case nir_instr_type_alu:
+   case nir_instr_type_tex:
+   case nir_instr_type_deref:
+      return nir_foreach_src(instr, defined_before_loop, &loop_preheader_idx);
+
+   case nir_instr_type_phi:
+   case nir_instr_type_call:
+   case nir_instr_type_jump:
+   default:
+      return false;
+   }
+}
+
+static bool
+visit_block(nir_block *block, nir_block *preheader)
+{
+   bool progress = false;
+   nir_foreach_instr_safe(instr, block) {
+      if (is_instr_loop_invariant(instr, preheader->index)) {
+         nir_instr_remove(instr);
+         nir_instr_insert_after_block(preheader, instr);
+         progress = true;
+      }
+   }
+
+   return progress;
+}
+
+static bool
+visit_cf_list(struct exec_list *list, nir_block *preheader, nir_block *exit)
+{
+   bool progress = false;
+
+   foreach_list_typed(nir_cf_node, node, node, list) {
+      switch (node->type) {
+      case nir_cf_node_block: {
+         /* By only visiting blocks which dominate the loop exit, we
+          * ensure that we don't speculatively hoist any instructions
+          * which otherwise might not be executed.
+          *
+          * Note, that the proper check would be whether this block
+          * postdominates the loop preheader.
+          * We assume no early returns inside the loop.
+          */
+         nir_block *block = nir_cf_node_as_block(node);
+         if (exit && nir_block_dominates(block, exit))
+            progress |= visit_block(block, preheader);
+         break;
+      }
+      case nir_cf_node_if: {
+         nir_if *nif = nir_cf_node_as_if(node);
+         progress |= visit_cf_list(&nif->then_list, preheader, exit);
+         progress |= visit_cf_list(&nif->else_list, preheader, exit);
+         break;
+      }
+      case nir_cf_node_loop: {
+         /* Ignore loops without back-edge */
+         nir_loop *loop = nir_cf_node_as_loop(node);
+         bool is_loop = nir_loop_first_block(loop)->predecessors->entries > 1;
+         nir_block *inner_preheader = is_loop ? nir_cf_node_cf_tree_prev(node) : preheader;
+         nir_block *inner_exit = is_loop ? nir_cf_node_cf_tree_next(node) : exit;
+         progress |= visit_cf_list(&loop->body, inner_preheader, inner_exit);
+         progress |= visit_cf_list(&loop->continue_list, inner_preheader, inner_exit);
+         break;
+      }
+      case nir_cf_node_function:
+         unreachable("NIR LICM: Unsupported cf_node type.");
+      }
+   }
+
+   return progress;
+}
+
+bool
+nir_opt_licm(nir_shader *shader)
+{
+   bool progress = false;
+
+   nir_foreach_function_impl(impl, shader) {
+      nir_metadata_require(impl, nir_metadata_block_index |
+                                    nir_metadata_dominance);
+
+      if (visit_cf_list(&impl->body, NULL, NULL)) {
+         progress = true;
+         nir_metadata_preserve(impl, nir_metadata_block_index |
+                                        nir_metadata_dominance);
+      } else {
+         nir_metadata_preserve(impl, nir_metadata_all);
+      }
+   }
+
+   return progress;
+}
-- 
GitLab


From bb646b2b6eb01ed1efb23d5c24e5b378beb202d0 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Daniel=20Sch=C3=BCrmann?= <daniel@schuermann.dev>
Date: Tue, 16 Apr 2024 11:34:31 +0200
Subject: [PATCH 2/3] radv: use NIR loop invariant code motion pass

Totals from 3469 (4.37% of 79395) affected shaders: (GFX11)
MaxWaves: 78690 -> 78622 (-0.09%); split: +0.03%, -0.11%
Instrs: 11093592 -> 11092346 (-0.01%); split: -0.09%, +0.07%
CodeSize: 57979444 -> 58077232 (+0.17%); split: -0.12%, +0.29%
VGPRs: 257892 -> 258336 (+0.17%); split: -0.08%, +0.25%
SpillSGPRs: 2958 -> 2521 (-14.77%); split: -32.83%, +18.05%
Latency: 135247583 -> 134446992 (-0.59%); split: -0.61%, +0.02%
InvThroughput: 25654328 -> 25478620 (-0.68%); split: -0.73%, +0.05%
VClause: 244799 -> 244499 (-0.12%); split: -0.17%, +0.05%
SClause: 313323 -> 315081 (+0.56%); split: -0.40%, +0.96%
Copies: 835953 -> 842457 (+0.78%); split: -0.38%, +1.15%
Branches: 330136 -> 330210 (+0.02%); split: -0.03%, +0.05%
PreSGPRs: 193374 -> 200277 (+3.57%); split: -0.38%, +3.95%
PreVGPRs: 223947 -> 224227 (+0.13%); split: -0.02%, +0.15%
VALU: 6312413 -> 6314841 (+0.04%); split: -0.02%, +0.06%
SALU: 1222275 -> 1227329 (+0.41%); split: -0.26%, +0.67%
VMEM: 408421 -> 408412 (-0.00%)
SMEM: 430966 -> 430399 (-0.13%)
VOPD: 2482 -> 2440 (-1.69%); split: +0.44%, -2.14%

Reviewed-by: Georg Lehmann <dadschoorse@gmail.com>
Part-of: <https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/28783>
---
 src/amd/vulkan/radv_pipeline.c | 1 +
 1 file changed, 1 insertion(+)

diff --git a/src/amd/vulkan/radv_pipeline.c b/src/amd/vulkan/radv_pipeline.c
index e77f501978eda..8b796ede40fb7 100644
--- a/src/amd/vulkan/radv_pipeline.c
+++ b/src/amd/vulkan/radv_pipeline.c
@@ -480,6 +480,7 @@ radv_postprocess_nir(struct radv_device *device, const struct radv_graphics_stat
    nir_move_options sink_opts = nir_move_const_undef | nir_move_copies;
 
    if (!stage->key.optimisations_disabled) {
+      NIR_PASS(_, stage->nir, nir_opt_licm);
       if (stage->stage != MESA_SHADER_FRAGMENT || !pdev->cache_key.disable_sinking_load_input_fs)
          sink_opts |= nir_move_load_input;
 
-- 
GitLab


From 1c5a3934544c9b4352aa0a2f8d6663561bb4d00e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Daniel=20Sch=C3=BCrmann?= <daniel@schuermann.dev>
Date: Tue, 16 Apr 2024 17:32:29 +0200
Subject: [PATCH 3/3] nir/opt_sink: ignore loops without backedge

Loops without backedge should not be considered loops.
For RADV, 2069 (2.61% of 79395) affected shaders.

Reviewed-by: Georg Lehmann <dadschoorse@gmail.com>
Part-of: <https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/28783>
---
 src/compiler/nir/nir_opt_sink.c | 10 +++++++---
 1 file changed, 7 insertions(+), 3 deletions(-)

diff --git a/src/compiler/nir/nir_opt_sink.c b/src/compiler/nir/nir_opt_sink.c
index b83299ef2b991..ac092c5b0d201 100644
--- a/src/compiler/nir/nir_opt_sink.c
+++ b/src/compiler/nir/nir_opt_sink.c
@@ -131,8 +131,11 @@ static nir_loop *
 get_innermost_loop(nir_cf_node *node)
 {
    for (; node != NULL; node = node->parent) {
-      if (node->type == nir_cf_node_loop)
-         return (nir_loop *)node;
+      if (node->type == nir_cf_node_loop) {
+         nir_loop *loop = nir_cf_node_as_loop(node);
+         if (nir_loop_first_block(loop)->predecessors->entries > 1)
+            return loop;
+      }
    }
    return NULL;
 }
@@ -170,7 +173,8 @@ adjust_block_for_loops(nir_block *use_block, nir_block *def_block,
       }
 
       nir_cf_node *next = nir_cf_node_next(&cur_block->cf_node);
-      if (next && next->type == nir_cf_node_loop) {
+      if (next && next->type == nir_cf_node_loop &&
+          nir_block_cf_tree_next(cur_block)->predecessors->entries > 1) {
          nir_loop *following_loop = nir_cf_node_as_loop(next);
          if (loop_contains_block(following_loop, use_block)) {
             use_block = cur_block;
-- 
GitLab

