From 911042ed19971155aa60a6f3a93b1df85f2de21d Mon Sep 17 00:00:00 2001
From: Italo Nicola <italonicola@collabora.com>
Date: Fri, 14 May 2021 11:25:42 +0000
Subject: [PATCH 1/2] mesa/main: account for RTT samples when updating
 framebuffer

For EXT_multisampled_render_to_texture, we store the number of samples
in Attachment->NumSamples instead of Renderbuffer->NumSamples. This
meant that the previous code ignored that the framebuffer was
multisampled. Because of this, pipe_rasterizer_state::multisample is set
incorrectly, leading to visual artifacts on drivers that support MS-RTT
extension, such as panfrost.

Signed-off-by: Italo Nicola <italonicola@collabora.com>
Reviewed-by: Rob Clark <robclark@freedesktop.org>
Reviewed-by: Emma Anholt <emma@anholt.net>
---
 src/mesa/main/framebuffer.c | 27 ++++++++++++++++++++++++---
 1 file changed, 24 insertions(+), 3 deletions(-)

diff --git a/src/mesa/main/framebuffer.c b/src/mesa/main/framebuffer.c
index f2d4a603f130f..5d2c0044e85ab 100644
--- a/src/mesa/main/framebuffer.c
+++ b/src/mesa/main/framebuffer.c
@@ -423,15 +423,36 @@ _mesa_update_framebuffer_visual(struct gl_context *ctx,
    /* find first RGB renderbuffer */
    for (unsigned i = 0; i < BUFFER_COUNT; i++) {
       if (fb->Attachment[i].Renderbuffer) {
-         const struct gl_renderbuffer *rb = fb->Attachment[i].Renderbuffer;
+         const struct gl_renderbuffer_attachment *att = &fb->Attachment[i];
+         const struct gl_renderbuffer *rb = att->Renderbuffer;
          const GLenum baseFormat = _mesa_get_format_base_format(rb->Format);
          const mesa_format fmt = rb->Format;
 
          /* Grab samples and sampleBuffers from any attachment point (assuming
           * the framebuffer is complete, we'll get the same answer from all
-          * attachments).
+          * attachments). If using EXT_multisampled_render_to_texture, the
+          * number of samples will be on fb->Attachment[i].NumSamples instead
+          * of the usual rb->NumSamples, but it's still guarantted to be the
+          * same for every attachment.
+          *
+          * From EXT_multisampled_render_to_texture:
+          *
+          *    Also, FBOs cannot combine attachments that have associated
+          *    multisample data specified by the mechanisms described in this
+          *    extension with attachments allocated using the core OpenGL ES
+          *    3.1 mechanisms, such as TexStorage2DMultisample. Add to section
+          *    9.4.2 "Whole Framebuffer Completeness":
+          *
+          *    "* If the value of RENDERBUFFER_SAMPLES is non-zero, all or
+          *       none of the attached renderbuffers have been allocated
+          *       using RenderbufferStorage- MultisampleEXT; if the value of
+          *       TEXTURES_SAMPLES is non-zero, all or none of the attached
+          *       textures have been attached using Framebuffer-
+          *       Texture2DMultisampleEXT.
+          *       { GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT }"
           */
-         fb->Visual.samples = rb->NumSamples;
+         fb->Visual.samples =
+            att->NumSamples ? att->NumSamples : rb->NumSamples;
 
          if (_mesa_is_legal_color_format(ctx, baseFormat)) {
             fb->Visual.redBits = _mesa_get_format_bits(fmt, GL_RED_BITS);
-- 
GitLab


From 8d2a469fcc176a1e776784482db52d4b6b1033e5 Mon Sep 17 00:00:00 2001
From: Italo Nicola <italonicola@collabora.com>
Date: Tue, 21 Feb 2023 16:32:03 +0000
Subject: [PATCH 2/2] mesa/main: allow readpix/teximage to read from implicitly
 multisampled fbos

The GL_EXT_multisampled_render_to_texture spec explicitly allow reading
from these FBOs.

"Similarly, for ReadPixels:
 'An INVALID_OPERATION error is generated if the value of READ_-
FRAMEBUFFER_BINDING (see section 9) is non-zero, the read framebuffer is
framebuffer complete, and the value of SAMPLE_BUFFERS for the read
framebuffer is one.'

 These errors do not apply to textures and renderbuffers that have
associated multisample data specified by the mechanisms described in
this extension, i.e., the above operations are allowed even when
SAMPLE_BUFFERS is non-zero for renderbuffers created via Renderbuffer-
StorageMultisampleEXT or textures attached via FramebufferTexture2D-
MultisampleEXT."

Signed-off-by: Italo Nicola <italonicola@collabora.com>
Reviewed-by: Emma Anholt <emma@anholt.net>
---
 src/mesa/main/framebuffer.c | 16 ++++++++++++++++
 src/mesa/main/framebuffer.h |  3 +++
 src/mesa/main/readpix.c     | 19 ++++++++++++++++++-
 src/mesa/main/teximage.c    | 21 ++++++++++++++++++++-
 4 files changed, 57 insertions(+), 2 deletions(-)

diff --git a/src/mesa/main/framebuffer.c b/src/mesa/main/framebuffer.c
index 5d2c0044e85ab..962cd7c5334ed 100644
--- a/src/mesa/main/framebuffer.c
+++ b/src/mesa/main/framebuffer.c
@@ -828,6 +828,22 @@ _mesa_dest_buffer_exists(struct gl_context *ctx, GLenum format)
    return renderbuffer_exists(ctx, ctx->DrawBuffer, format, GL_FALSE);
 }
 
+extern bool
+_mesa_has_rtt_samples(const struct gl_framebuffer *fb)
+{
+   /* If there are multiple attachments, all of them are guaranteed
+    * to have the same sample count. */
+   if (fb->_ColorReadBufferIndex) {
+      assert(fb->Attachment[fb->_ColorReadBufferIndex].Type != GL_NONE);
+      return fb->Attachment[fb->_ColorReadBufferIndex].NumSamples > 0;
+   } else if (fb->Attachment[BUFFER_DEPTH].Type != GL_NONE) {
+      return fb->Attachment[BUFFER_DEPTH].NumSamples > 0;
+   } else if (fb->Attachment[BUFFER_STENCIL].Type != GL_NONE) {
+      return fb->Attachment[BUFFER_STENCIL].NumSamples > 0;
+   }
+
+   return true;
+}
 
 /**
  * Used to answer the GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES queries (using
diff --git a/src/mesa/main/framebuffer.h b/src/mesa/main/framebuffer.h
index 8891e4e416478..60c53e6af2148 100644
--- a/src/mesa/main/framebuffer.h
+++ b/src/mesa/main/framebuffer.h
@@ -161,6 +161,9 @@ extern struct gl_renderbuffer *
 _mesa_get_read_renderbuffer_for_format(const struct gl_context *ctx,
                                        GLenum format);
 
+extern bool
+_mesa_has_rtt_samples(const struct gl_framebuffer *fb);
+
 extern void
 _mesa_print_framebuffer(const struct gl_framebuffer *fb);
 
diff --git a/src/mesa/main/readpix.c b/src/mesa/main/readpix.c
index e7ab5f681d079..9978884605824 100644
--- a/src/mesa/main/readpix.c
+++ b/src/mesa/main/readpix.c
@@ -1119,8 +1119,25 @@ read_pixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format,
          return;
       }
 
+      /**
+       * From the GL_EXT_multisampled_render_to_texture spec:
+       *
+       * Similarly, for ReadPixels:
+       * "An INVALID_OPERATION error is generated if the value of READ_-
+       *  FRAMEBUFFER_BINDING (see section 9) is non-zero, the read framebuffer
+       *  is framebuffer complete, and the value of SAMPLE_BUFFERS for the read
+       *  framebuffer is one."
+       *
+       * These errors do not apply to textures and renderbuffers that have
+       * associated multisample data specified by the mechanisms described in
+       * this extension, i.e., the above operations are allowed even when
+       * SAMPLE_BUFFERS is non-zero for renderbuffers created via Renderbuffer-
+       * StorageMultisampleEXT or textures attached via FramebufferTexture2D-
+       * MultisampleEXT.
+       */
       if (_mesa_is_user_fbo(ctx->ReadBuffer) &&
-          ctx->ReadBuffer->Visual.samples > 0) {
+          ctx->ReadBuffer->Visual.samples > 0 &&
+          !_mesa_has_rtt_samples(ctx->ReadBuffer)) {
          _mesa_error(ctx, GL_INVALID_OPERATION, "glReadPixels(multisample FBO)");
          return;
       }
diff --git a/src/mesa/main/teximage.c b/src/mesa/main/teximage.c
index a8fd97d9f6330..412fce4d8c74f 100644
--- a/src/mesa/main/teximage.c
+++ b/src/mesa/main/teximage.c
@@ -2692,8 +2692,27 @@ copytexsubimage_error_check(struct gl_context *ctx, GLuint dimensions,
          return GL_TRUE;
       }
 
+      /**
+       * From the GL_EXT_multisampled_render_to_texture spec:
+       *
+       * "An INVALID_OPERATION error is generated by CopyTexSubImage3D,
+       * CopyTexImage2D, or CopyTexSubImage2D if [...] the value of
+       * READ_FRAMEBUFFER_BINDING is non-zero, and:
+       *   - the read buffer selects an attachment that has no image attached,
+       *     or
+       *   - the value of SAMPLE_BUFFERS for the read framebuffer is one."
+       *
+       * [...]
+       * These errors do not apply to textures and renderbuffers that have
+       * associated multisample data specified by the mechanisms described in
+       * this extension, i.e., the above operations are allowed even when
+       * SAMPLE_BUFFERS is non-zero for renderbuffers created via Renderbuffer-
+       * StorageMultisampleEXT or textures attached via FramebufferTexture2D-
+       * MultisampleEXT.
+       */
       if (!ctx->st_opts->allow_multisampled_copyteximage &&
-          ctx->ReadBuffer->Visual.samples > 0) {
+          ctx->ReadBuffer->Visual.samples > 0 &&
+          !_mesa_has_rtt_samples(ctx->ReadBuffer)) {
          _mesa_error(ctx, GL_INVALID_OPERATION, "%s(multisample FBO)",
                      caller);
          return GL_TRUE;
-- 
GitLab

