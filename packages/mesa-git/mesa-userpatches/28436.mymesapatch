From 4552d250b51d059a7cfe72a06c8ff28aaef84310 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Wed, 27 Mar 2024 14:58:28 -0400
Subject: [PATCH] nir/use_dominance: set the root as post-dominator of
 unmovable instructions

Some uses don't have any post-dominator. An example is an atomic that
feeds itself in a loop. No instruction immediately post-dominates
the result of such an atomic because no instruction can strictly
post-dominate itself. This handles that case generally by setting
the root node as the post-dominator for instructions that can't be
reordered.

Fixes: ba54099dce6 - nir: add a utility computing post-dominance of SSA uses
---
 src/compiler/nir/nir_use_dominance.c | 7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)

diff --git a/src/compiler/nir/nir_use_dominance.c b/src/compiler/nir/nir_use_dominance.c
index 217e903454c8e..9dd73651c6921 100644
--- a/src/compiler/nir/nir_use_dominance.c
+++ b/src/compiler/nir/nir_use_dominance.c
@@ -177,7 +177,12 @@ calc_dominance(struct nir_use_dominance_state *state,
       nir_def *def = nir_instr_def(node->instr);
       bool has_use = false;
 
-      if (def) {
+      /* Intrinsics that can't be reordered will get the root node as
+       * the post-dominator.
+       */
+      if (def &&
+          (node->instr->type != nir_instr_type_intrinsic ||
+           nir_intrinsic_can_reorder(nir_instr_as_intrinsic(node->instr)))) {
          nir_foreach_use_including_if(src, def) {
             has_use = true;
 
-- 
GitLab

