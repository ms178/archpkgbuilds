From 2fa6a7eb42d827e8b8f56c6421221b6b5c01170f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Wed, 3 Jan 2024 12:03:11 -0500
Subject: [PATCH] nir/opt_algebraic: eliminate off-by-1-bit multiplications by
 1

shader-db:
    TOTALS FROM AFFECTED SHADERS (53/58918)
      VGPRS: 1756 -> 1748 (-0.46 %)
      Code Size: 107348 -> 106528 (-0.76 %) bytes
      Max Waves: 805 -> 813 (0.99 %)
---
 src/compiler/nir/nir_opt_algebraic.py | 19 ++++++++++++++++++-
 1 file changed, 18 insertions(+), 1 deletion(-)

diff --git a/src/compiler/nir/nir_opt_algebraic.py b/src/compiler/nir/nir_opt_algebraic.py
index 89d51b1707261..e031f28abed22 100644
--- a/src/compiler/nir/nir_opt_algebraic.py
+++ b/src/compiler/nir/nir_opt_algebraic.py
@@ -229,8 +229,25 @@ optimizations = [
    (('~flrp', a, b, 0.0), a),
    (('~flrp', a, b, 1.0), b),
    (('~flrp', a, a, b), a),
-   (('~flrp', 0.0, a, b), ('fmul', a, b)),
+   (('~flrp', 0.0, a, b), ('fmul', a, b))
+]
+
+# Inexact patterns for rounding errors in constant folding
+for suffix in ['', 'z']:
+    # ULP error deltas:
+    for error in [-1, 1]:
+        # The values are the next representable value above and below +-1.
+        minus1 = 0xBF800000 + error
+        plus1 = 0x3F800000 + error
+
+        optimizations += [
+            ((f'~fmul{suffix}@32', a, plus1), a),
+            ((f'~ffma{suffix}@32', plus1, a, b), ('fadd', a, b)),
+            ((f'~fmul{suffix}@32', a, minus1), ('fneg', a)),
+            ((f'~ffma{suffix}@32', minus1, a, b), ('fadd', ('fneg', a), b))
+        ]
 
+optimizations += [
    # flrp(a, a + b, c) => a + flrp(0, b, c) => a + (b * c)
    (('~flrp', a, ('fadd(is_used_once)', a, b), c), ('fadd', ('fmul', b, c), a)),
 
-- 
GitLab

