From a0dcbd010c552adf51eba61a6bcf0f3303fc23c1 Mon Sep 17 00:00:00 2001
From: Yonggang Luo <luoyonggang@gmail.com>
Date: Mon, 20 Jun 2022 11:34:14 +0800
Subject: [PATCH 1/5] mesa/st: Use gl_framebuffer::Delete instead FREE in
 st_framebuffer_create

This is a prepare for refactoring _mesa_calloc_framebuffer out

Signed-off-by: Yonggang Luo <luoyonggang@gmail.com>
---
 src/mesa/state_tracker/st_manager.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/mesa/state_tracker/st_manager.c b/src/mesa/state_tracker/st_manager.c
index 8c5dab9bd3fa..54865ab7c504 100644
--- a/src/mesa/state_tracker/st_manager.c
+++ b/src/mesa/state_tracker/st_manager.c
@@ -646,7 +646,7 @@ st_framebuffer_create(struct st_context *st,
    /* add the color buffer */
    idx = stfb->_ColorDrawBufferIndexes[0];
    if (!st_framebuffer_add_renderbuffer(stfb, idx, prefer_srgb)) {
-      FREE(stfb);
+      stfb->Delete(stfb);
       return NULL;
    }
 
-- 
GitLab


From 86a15b29e3a5c4a9fd184535327f4774c17382b9 Mon Sep 17 00:00:00 2001
From: Yonggang Luo <luoyonggang@gmail.com>
Date: Mon, 20 Jun 2022 12:16:51 +0800
Subject: [PATCH 2/5] mesa/st: Refactoring _mesa_calloc_framebuffer out

Introduce _mesa_create_window_framebuffer

Signed-off-by: Yonggang Luo <luoyonggang@gmail.com>
---
 src/mesa/main/context.c             |  2 +-
 src/mesa/main/framebuffer.c         | 66 ++++++++++++++---------------
 src/mesa/main/framebuffer.h         | 10 ++---
 src/mesa/state_tracker/st_manager.c |  8 ++--
 4 files changed, 39 insertions(+), 47 deletions(-)

diff --git a/src/mesa/main/context.c b/src/mesa/main/context.c
index 21f53d489ede..cc523517d842 100644
--- a/src/mesa/main/context.c
+++ b/src/mesa/main/context.c
@@ -1538,7 +1538,7 @@ _mesa_make_current( struct gl_context *newCtx,
          }
          if (!newCtx->ReadBuffer || _mesa_is_winsys_fbo(newCtx->ReadBuffer)) {
             _mesa_reference_framebuffer(&newCtx->ReadBuffer, readBuffer);
-            /* In _mesa_initialize_window_framebuffer, for single-buffered
+            /* In _mesa_create_window_framebuffer, for single-buffered
              * visuals, the ColorReadBuffer is set to be GL_FRONT, even with
              * GLES contexts. When calling read_buffer, we verify we are reading
              * from GL_BACK in is_legal_es3_readbuffer_enum.  But the default is
diff --git a/src/mesa/main/framebuffer.c b/src/mesa/main/framebuffer.c
index 18f00820bb99..815f9d21cb43 100644
--- a/src/mesa/main/framebuffer.c
+++ b/src/mesa/main/framebuffer.c
@@ -80,42 +80,36 @@ compute_depth_max(struct gl_framebuffer *fb)
 }
 
 /**
- * Allocate a new gl_framebuffer object.
- * This is the default function for ctx->Driver.NewFramebuffer().
- * This is for allocating user-created framebuffers, not window-system
- * framebuffers!
+ * Allocate and memset to zeros of a new gl_framebuffer object.
+ * This is also initialize RefCount, Delete and Mutex members
  */
-struct gl_framebuffer *
-_mesa_new_framebuffer(struct gl_context *ctx, GLuint name)
+static struct gl_framebuffer *
+_mesa_calloc_framebuffer(void)
 {
-   struct gl_framebuffer *fb;
-   (void) ctx;
-   assert(name != 0);
-   fb = CALLOC_STRUCT(gl_framebuffer);
+   struct gl_framebuffer *fb = CALLOC_STRUCT(gl_framebuffer);
    if (fb) {
-      _mesa_initialize_user_framebuffer(fb, name);
+      fb->RefCount = 1;
+      fb->Delete = _mesa_destroy_framebuffer;
+      simple_mtx_init(&fb->Mutex, mtx_plain);
    }
    return fb;
 }
 
 
 /**
- * Initialize a gl_framebuffer object.  Typically used to initialize
+ * Create a gl_framebuffer object. Typically used to create and initialize
  * window system-created framebuffers, not user-created framebuffers.
- * \sa _mesa_initialize_user_framebuffer
+ * \sa _mesa_create_window_framebuffer
  */
-void
-_mesa_initialize_window_framebuffer(struct gl_framebuffer *fb,
-				     const struct gl_config *visual)
+struct gl_framebuffer *
+_mesa_create_window_framebuffer(const struct gl_config *visual)
 {
-   assert(fb);
+   struct gl_framebuffer *fb;
    assert(visual);
-
-   memset(fb, 0, sizeof(struct gl_framebuffer));
-
-   simple_mtx_init(&fb->Mutex, mtx_plain);
-
-   fb->RefCount = 1;
+   fb = _mesa_calloc_framebuffer();
+   if (fb == NULL) {
+      return NULL;
+   }
 
    /* save the visual */
    fb->Visual = *visual;
@@ -136,7 +130,6 @@ _mesa_initialize_window_framebuffer(struct gl_framebuffer *fb,
       fb->_ColorReadBufferIndex = BUFFER_FRONT_LEFT;
    }
 
-   fb->Delete = _mesa_destroy_framebuffer;
    fb->_Status = GL_FRAMEBUFFER_COMPLETE_EXT;
    fb->_AllColorBuffersFixedPoint = !visual->floatMode;
    fb->_HasSNormOrFloatColorBuffer = visual->floatMode;
@@ -148,23 +141,29 @@ _mesa_initialize_window_framebuffer(struct gl_framebuffer *fb,
    fb->SampleLocationPixelGrid = 0;
 
    compute_depth_max(fb);
+   return fb;
 }
 
 
 /**
- * Initialize a user-created gl_framebuffer object.
- * \sa _mesa_initialize_window_framebuffer
+ * Allocate and initialize a user-created gl_framebuffer object.
+ * This is the default function for ctx->Driver.NewFramebuffer().
+ * This is for allocating user-created framebuffers, not window-system
+ * framebuffers!
+ * \sa _mesa_new_framebuffer
  */
-void
-_mesa_initialize_user_framebuffer(struct gl_framebuffer *fb, GLuint name)
+static struct gl_framebuffer *
+_mesa_new_framebuffer(struct gl_context *ctx, GLuint name)
 {
-   assert(fb);
+   struct gl_framebuffer *fb;
+   (void) ctx;
    assert(name);
-
-   memset(fb, 0, sizeof(struct gl_framebuffer));
+   fb = _mesa_calloc_framebuffer();
+   if (fb == NULL) {
+      return NULL;
+   }
 
    fb->Name = name;
-   fb->RefCount = 1;
    fb->_NumColorDrawBuffers = 1;
    fb->ColorDrawBuffer[0] = GL_COLOR_ATTACHMENT0_EXT;
    fb->_ColorDrawBufferIndexes[0] = BUFFER_COLOR0;
@@ -173,8 +172,7 @@ _mesa_initialize_user_framebuffer(struct gl_framebuffer *fb, GLuint name)
    fb->SampleLocationTable = NULL;
    fb->ProgrammableSampleLocations = 0;
    fb->SampleLocationPixelGrid = 0;
-   fb->Delete = _mesa_destroy_framebuffer;
-   simple_mtx_init(&fb->Mutex, mtx_plain);
+   return fb;
 }
 
 
diff --git a/src/mesa/main/framebuffer.h b/src/mesa/main/framebuffer.h
index 8891e4e41647..5ebd6a60d775 100644
--- a/src/mesa/main/framebuffer.h
+++ b/src/mesa/main/framebuffer.h
@@ -33,14 +33,10 @@ struct gl_context;
 struct gl_renderbuffer;
 
 extern struct gl_framebuffer *
-_mesa_new_framebuffer(struct gl_context *ctx, GLuint name);
-
-extern void
-_mesa_initialize_window_framebuffer(struct gl_framebuffer *fb,
-				     const struct gl_config *visual);
+_mesa_create_window_framebuffer(const struct gl_config *visual);
 
-extern void
-_mesa_initialize_user_framebuffer(struct gl_framebuffer *fb, GLuint name);
+extern struct gl_framebuffer *
+_mesa_new_framebuffer(struct gl_context *ctx, GLuint name);
 
 extern void
 _mesa_destroy_framebuffer(struct gl_framebuffer *buffer);
diff --git a/src/mesa/state_tracker/st_manager.c b/src/mesa/state_tracker/st_manager.c
index 54865ab7c504..dc24cea65896 100644
--- a/src/mesa/state_tracker/st_manager.c
+++ b/src/mesa/state_tracker/st_manager.c
@@ -591,10 +591,6 @@ st_framebuffer_create(struct st_context *st,
    if (!stfbi)
       return NULL;
 
-   stfb = CALLOC_STRUCT(gl_framebuffer);
-   if (!stfb)
-      return NULL;
-
    st_visual_to_context_mode(stfbi->visual, &mode);
 
    /*
@@ -637,7 +633,9 @@ st_framebuffer_create(struct st_context *st,
       }
    }
 
-   _mesa_initialize_window_framebuffer(stfb, &mode);
+   stfb = _mesa_create_window_framebuffer(&mode);
+   if (!stfb)
+      return NULL;
 
    stfb->iface = stfbi;
    stfb->iface_ID = stfbi->ID;
-- 
GitLab


From 8d0d294e8581d3247ad85db0d0cd7b440bb74d8b Mon Sep 17 00:00:00 2001
From: Yonggang Luo <luoyonggang@gmail.com>
Date: Mon, 20 Jun 2022 12:36:33 +0800
Subject: [PATCH 3/5] mesa/framebuffer: Rename function _mesa_new_framebuffer
 to _mesa_create_user_framebuffer

There is also a function named _mesa_create_window_framebuffer, use name of _mesa_create_user_framebuffer
for consistence.

Signed-off-by: Yonggang Luo <luoyonggang@gmail.com>
---
 src/mesa/main/fbobject.c    | 10 +++++-----
 src/mesa/main/framebuffer.c |  6 +++---
 src/mesa/main/framebuffer.h |  2 +-
 3 files changed, 9 insertions(+), 9 deletions(-)

diff --git a/src/mesa/main/fbobject.c b/src/mesa/main/fbobject.c
index 076d957e5899..033972d1fb25 100644
--- a/src/mesa/main/fbobject.c
+++ b/src/mesa/main/fbobject.c
@@ -176,12 +176,12 @@ _mesa_lookup_framebuffer_dsa(struct gl_context *ctx, GLuint id,
 
    /* Name exists but buffer is not initialized */
    if (fb == &DummyFramebuffer) {
-      fb = _mesa_new_framebuffer(ctx, id);
+      fb = _mesa_create_user_framebuffer(ctx, id);
       _mesa_HashInsert(ctx->Shared->FrameBuffers, id, fb, true);
    }
    /* Name doesn't exist */
    else if (!fb) {
-      fb = _mesa_new_framebuffer(ctx, id);
+      fb = _mesa_create_user_framebuffer(ctx, id);
       if (!fb) {
          _mesa_error(ctx, GL_OUT_OF_MEMORY, "%s", func);
          return NULL;
@@ -3266,7 +3266,7 @@ bind_framebuffer(GLenum target, GLuint framebuffer)
 
       if (!newDrawFb) {
          /* create new framebuffer object */
-         newDrawFb = _mesa_new_framebuffer(ctx, framebuffer);
+         newDrawFb = _mesa_create_user_framebuffer(ctx, framebuffer);
          if (!newDrawFb) {
             _mesa_error(ctx, GL_OUT_OF_MEMORY, "glBindFramebufferEXT");
             return;
@@ -3428,7 +3428,7 @@ create_framebuffers(GLsizei n, GLuint *framebuffers, bool dsa)
 
    for (i = 0; i < n; i++) {
       if (dsa) {
-         fb = _mesa_new_framebuffer(ctx, framebuffers[i]);
+         fb = _mesa_create_user_framebuffer(ctx, framebuffers[i]);
          if (!fb) {
             _mesa_HashUnlockMutex(ctx->Shared->FrameBuffers);
             _mesa_error(ctx, GL_OUT_OF_MEMORY, "%s", func);
@@ -5041,7 +5041,7 @@ lookup_named_framebuffer_ext_dsa(struct gl_context *ctx, GLuint framebuffer, con
       }
       /* Then, make sure it's initialized */
       if (fb == &DummyFramebuffer) {
-         fb = _mesa_new_framebuffer(ctx, framebuffer);
+         fb = _mesa_create_user_framebuffer(ctx, framebuffer);
          _mesa_HashInsert(ctx->Shared->FrameBuffers, framebuffer, fb, true);
       }
    }
diff --git a/src/mesa/main/framebuffer.c b/src/mesa/main/framebuffer.c
index 815f9d21cb43..59ade190086c 100644
--- a/src/mesa/main/framebuffer.c
+++ b/src/mesa/main/framebuffer.c
@@ -150,10 +150,10 @@ _mesa_create_window_framebuffer(const struct gl_config *visual)
  * This is the default function for ctx->Driver.NewFramebuffer().
  * This is for allocating user-created framebuffers, not window-system
  * framebuffers!
- * \sa _mesa_new_framebuffer
+ * \sa _mesa_create_user_framebuffer
  */
-static struct gl_framebuffer *
-_mesa_new_framebuffer(struct gl_context *ctx, GLuint name)
+struct gl_framebuffer *
+_mesa_create_user_framebuffer(struct gl_context *ctx, GLuint name)
 {
    struct gl_framebuffer *fb;
    (void) ctx;
diff --git a/src/mesa/main/framebuffer.h b/src/mesa/main/framebuffer.h
index 5ebd6a60d775..d5f28872f667 100644
--- a/src/mesa/main/framebuffer.h
+++ b/src/mesa/main/framebuffer.h
@@ -36,7 +36,7 @@ extern struct gl_framebuffer *
 _mesa_create_window_framebuffer(const struct gl_config *visual);
 
 extern struct gl_framebuffer *
-_mesa_new_framebuffer(struct gl_context *ctx, GLuint name);
+_mesa_create_user_framebuffer(struct gl_context *ctx, GLuint name);
 
 extern void
 _mesa_destroy_framebuffer(struct gl_framebuffer *buffer);
-- 
GitLab


From 08c7c18c5c72978392ade63ff272424747232539 Mon Sep 17 00:00:00 2001
From: Yonggang Luo <luoyonggang@gmail.com>
Date: Fri, 17 Jun 2022 23:21:45 +0800
Subject: [PATCH 4/5] mesa/st: Refactoring _mesa_get_dummy_framebuffer out

Move DummyFramebuffer and IncompleteFramebuffer into function.
This is implemented by introduce enum gl_framebuffer_type

Signed-off-by: Yonggang Luo <luoyonggang@gmail.com>
---
 src/mesa/main/context.c             |  6 +--
 src/mesa/main/fbobject.c            | 62 ++++++++++++++++-------------
 src/mesa/main/framebuffer.c         |  3 +-
 src/mesa/main/mtypes.h              | 16 ++++++++
 src/mesa/state_tracker/st_manager.c |  2 +-
 5 files changed, 56 insertions(+), 33 deletions(-)

diff --git a/src/mesa/main/context.c b/src/mesa/main/context.c
index cc523517d842..e91cde59f731 100644
--- a/src/mesa/main/context.c
+++ b/src/mesa/main/context.c
@@ -1321,7 +1321,7 @@ check_compatible(const struct gl_context *ctx,
    const struct gl_config *ctxvis = &ctx->Visual;
    const struct gl_config *bufvis = &buffer->Visual;
 
-   if (buffer == _mesa_get_incomplete_framebuffer())
+   if (buffer != NULL && buffer->Type == GL_FRAMEBUFFER_TYPE_INCOMPLETE)
       return GL_TRUE;
 
 #define check_component(foo)           \
@@ -1387,7 +1387,7 @@ handle_first_current(struct gl_context *ctx)
     * For GLES it is always GL_BACK which has a magic interpretation.
     */
    if (!ctx->HasConfig && _mesa_is_desktop_gl(ctx)) {
-      if (ctx->DrawBuffer != _mesa_get_incomplete_framebuffer()) {
+      if (ctx->DrawBuffer->Type != GL_FRAMEBUFFER_TYPE_INCOMPLETE) {
          GLenum16 buffer;
 
          if (ctx->DrawBuffer->Visual.doubleBufferMode)
@@ -1399,7 +1399,7 @@ handle_first_current(struct gl_context *ctx)
                            NULL /* destMask */);
       }
 
-      if (ctx->ReadBuffer != _mesa_get_incomplete_framebuffer()) {
+      if (ctx->ReadBuffer != NULL && ctx->ReadBuffer->Type != GL_FRAMEBUFFER_TYPE_INCOMPLETE) {
          gl_buffer_index bufferIndex;
          GLenum buffer;
 
diff --git a/src/mesa/main/fbobject.c b/src/mesa/main/fbobject.c
index 033972d1fb25..2f77047c0a40 100644
--- a/src/mesa/main/fbobject.c
+++ b/src/mesa/main/fbobject.c
@@ -78,32 +78,38 @@ delete_dummy_framebuffer(struct gl_framebuffer *fb)
    /* no op */
 }
 
-
-/*
- * When glGenRender/FramebuffersEXT() is called we insert pointers to
- * these placeholder objects into the hash table.
- * Later, when the object ID is first bound, we replace the placeholder
- * with the real frame/renderbuffer.
- */
-static struct gl_framebuffer DummyFramebuffer = {
-   .Mutex = _SIMPLE_MTX_INITIALIZER_NP,
-   .Delete = delete_dummy_framebuffer,
-};
 static struct gl_renderbuffer DummyRenderbuffer = {
    .Delete = delete_dummy_renderbuffer,
 };
 
-/* We bind this framebuffer when applications pass a NULL
- * drawable/surface in make current. */
-static struct gl_framebuffer IncompleteFramebuffer = {
-   .Mutex = _SIMPLE_MTX_INITIALIZER_NP,
-   .Delete = delete_dummy_framebuffer,
-};
-
+static inline struct gl_framebuffer *
+_mesa_get_dummy_framebuffer(void)
+{
+   /*
+    * When glGenRender/FramebuffersEXT() is called we insert pointers to
+    * these placeholder objects into the hash table.
+    * Later, when the object ID is first bound, we replace the placeholder
+    * with the real frame/renderbuffer.
+    */
+   static struct gl_framebuffer DummyFramebuffer = {
+      .Type = GL_FRAMEBUFFER_TYPE_DUMMY,
+      .Mutex = _SIMPLE_MTX_INITIALIZER_NP,
+      .Delete = delete_dummy_framebuffer,
+   };
+   return &DummyFramebuffer;
+}
 
 struct gl_framebuffer *
 _mesa_get_incomplete_framebuffer(void)
 {
+   /* We bind this framebuffer when applications pass a NULL
+    * drawable/surface in make current.
+    */
+   static struct gl_framebuffer IncompleteFramebuffer = {
+      .Type = GL_FRAMEBUFFER_TYPE_INCOMPLETE,
+      .Mutex = _SIMPLE_MTX_INITIALIZER_NP,
+      .Delete = delete_dummy_framebuffer,
+   };
    return &IncompleteFramebuffer;
 }
 
@@ -175,7 +181,7 @@ _mesa_lookup_framebuffer_dsa(struct gl_context *ctx, GLuint id,
    fb = _mesa_lookup_framebuffer(ctx, id);
 
    /* Name exists but buffer is not initialized */
-   if (fb == &DummyFramebuffer) {
+   if (fb != NULL && fb->Type == GL_FRAMEBUFFER_TYPE_DUMMY) {
       fb = _mesa_create_user_framebuffer(ctx, id);
       _mesa_HashInsert(ctx->Shared->FrameBuffers, id, fb, true);
    }
@@ -203,7 +209,7 @@ _mesa_lookup_framebuffer_err(struct gl_context *ctx, GLuint id,
    struct gl_framebuffer *fb;
 
    fb = _mesa_lookup_framebuffer(ctx, id);
-   if (!fb || fb == &DummyFramebuffer) {
+   if (fb == NULL || fb->Type == GL_FRAMEBUFFER_TYPE_DUMMY) {
       _mesa_error(ctx, GL_INVALID_OPERATION,
                   "%s(non-existent framebuffer %u)", func, id);
       return NULL;
@@ -3171,7 +3177,7 @@ _mesa_IsFramebuffer(GLuint framebuffer)
    ASSERT_OUTSIDE_BEGIN_END_WITH_RETVAL(ctx, GL_FALSE);
    if (framebuffer) {
       struct gl_framebuffer *rb = _mesa_lookup_framebuffer(ctx, framebuffer);
-      if (rb != NULL && rb != &DummyFramebuffer)
+      if (rb != NULL && rb->Type != GL_FRAMEBUFFER_TYPE_DUMMY)
          return GL_TRUE;
    }
    return GL_FALSE;
@@ -3252,7 +3258,7 @@ bind_framebuffer(GLenum target, GLuint framebuffer)
       bool isGenName = false;
       /* Binding a user-created framebuffer object */
       newDrawFb = _mesa_lookup_framebuffer(ctx, framebuffer);
-      if (newDrawFb == &DummyFramebuffer) {
+      if (newDrawFb != NULL && newDrawFb->Type == GL_FRAMEBUFFER_TYPE_DUMMY) {
          /* ID was reserved, but no real framebuffer object made yet */
          newDrawFb = NULL;
          isGenName = true;
@@ -3299,7 +3305,7 @@ _mesa_bind_framebuffers(struct gl_context *ctx,
    const bool bindReadBuf = oldReadFb != newReadFb;
 
    assert(newDrawFb);
-   assert(newDrawFb != &DummyFramebuffer);
+   assert(newDrawFb->Type != GL_FRAMEBUFFER_TYPE_DUMMY);
 
    /*
     * OK, now bind the new Draw/Read framebuffers, if they're changing.
@@ -3371,7 +3377,7 @@ _mesa_DeleteFramebuffers(GLsizei n, const GLuint *framebuffers)
          struct gl_framebuffer *fb;
          fb = _mesa_lookup_framebuffer(ctx, framebuffers[i]);
          if (fb) {
-            assert(fb == &DummyFramebuffer || fb->Name == framebuffers[i]);
+            assert(fb->Type == GL_FRAMEBUFFER_TYPE_DUMMY || fb->Name == framebuffers[i]);
 
             /* check if deleting currently bound framebuffer object */
             if (fb == ctx->DrawBuffer) {
@@ -3388,7 +3394,7 @@ _mesa_DeleteFramebuffers(GLsizei n, const GLuint *framebuffers)
             /* remove from hash table immediately, to free the ID */
             _mesa_HashRemove(ctx->Shared->FrameBuffers, framebuffers[i]);
 
-            if (fb != &DummyFramebuffer) {
+            if (fb->Type != GL_FRAMEBUFFER_TYPE_DUMMY) {
                /* But the object will not be freed until it's no longer
                 * bound in any context.
                 */
@@ -3436,7 +3442,7 @@ create_framebuffers(GLsizei n, GLuint *framebuffers, bool dsa)
          }
       }
       else
-         fb = &DummyFramebuffer;
+         fb = _mesa_get_dummy_framebuffer();
 
       _mesa_HashInsertLocked(ctx->Shared->FrameBuffers, framebuffers[i],
                              fb, true);
@@ -3468,7 +3474,7 @@ _mesa_check_framebuffer_status(struct gl_context *ctx,
 
    if (_mesa_is_winsys_fbo(buffer)) {
       /* EGL_KHR_surfaceless_context allows the winsys FBO to be incomplete. */
-      if (buffer != &IncompleteFramebuffer) {
+      if (buffer->Type != GL_FRAMEBUFFER_TYPE_INCOMPLETE) {
          return GL_FRAMEBUFFER_COMPLETE_EXT;
       } else {
          return GL_FRAMEBUFFER_UNDEFINED;
@@ -5040,7 +5046,7 @@ lookup_named_framebuffer_ext_dsa(struct gl_context *ctx, GLuint framebuffer, con
          return NULL;
       }
       /* Then, make sure it's initialized */
-      if (fb == &DummyFramebuffer) {
+      if (fb->Type == GL_FRAMEBUFFER_TYPE_DUMMY) {
          fb = _mesa_create_user_framebuffer(ctx, framebuffer);
          _mesa_HashInsert(ctx->Shared->FrameBuffers, framebuffer, fb, true);
       }
diff --git a/src/mesa/main/framebuffer.c b/src/mesa/main/framebuffer.c
index 59ade190086c..11735c9dc0ee 100644
--- a/src/mesa/main/framebuffer.c
+++ b/src/mesa/main/framebuffer.c
@@ -81,13 +81,14 @@ compute_depth_max(struct gl_framebuffer *fb)
 
 /**
  * Allocate and memset to zeros of a new gl_framebuffer object.
- * This is also initialize RefCount, Delete and Mutex members
+ * This is also initialize Type, RefCount, Delete and Mutex members
  */
 static struct gl_framebuffer *
 _mesa_calloc_framebuffer(void)
 {
    struct gl_framebuffer *fb = CALLOC_STRUCT(gl_framebuffer);
    if (fb) {
+      fb->Type = GL_FRAMEBUFFER_TYPE_NORMAL;
       fb->RefCount = 1;
       fb->Delete = _mesa_destroy_framebuffer;
       simple_mtx_init(&fb->Mutex, mtx_plain);
diff --git a/src/mesa/main/mtypes.h b/src/mesa/main/mtypes.h
index 1c725f010081..ea0d61ce0cb6 100644
--- a/src/mesa/main/mtypes.h
+++ b/src/mesa/main/mtypes.h
@@ -2643,6 +2643,21 @@ struct gl_renderbuffer_attachment
    GLboolean Layered;
 };
 
+enum gl_framebuffer_type {
+   /*
+    * When glGenRender/FramebuffersEXT() is called we insert pointers to
+    * these placeholder objects into the hash table.
+    * Later, when the object ID is first bound, we replace the placeholder
+    * with the real frame/renderbuffer.
+    */
+   GL_FRAMEBUFFER_TYPE_DUMMY,
+   /* We bind this framebuffer when applications pass a NULL
+    * drawable/surface in make current.
+    */
+   GL_FRAMEBUFFER_TYPE_INCOMPLETE,
+
+   GL_FRAMEBUFFER_TYPE_NORMAL,
+};
 
 /**
  * A framebuffer is a collection of renderbuffers (color, depth, stencil, etc).
@@ -2652,6 +2667,7 @@ struct gl_renderbuffer_attachment
 struct gl_framebuffer
 {
    simple_mtx_t Mutex;  /**< for thread safety */
+   enum gl_framebuffer_type Type;
    /**
     * If zero, this is a window system framebuffer.  If non-zero, this
     * is a FBO framebuffer; note that for some devices (i.e. those with
diff --git a/src/mesa/state_tracker/st_manager.c b/src/mesa/state_tracker/st_manager.c
index dc24cea65896..d30d62bbd7c8 100644
--- a/src/mesa/state_tracker/st_manager.c
+++ b/src/mesa/state_tracker/st_manager.c
@@ -83,7 +83,7 @@ st_ws_framebuffer(struct gl_framebuffer *fb)
 {
    /* FBO cannot be casted.  See st_new_framebuffer */
    if (fb && _mesa_is_winsys_fbo(fb) &&
-       fb != _mesa_get_incomplete_framebuffer())
+       fb->Type != GL_FRAMEBUFFER_TYPE_INCOMPLETE)
       return fb;
    return NULL;
 }
-- 
GitLab


From a893450eb75d7687742ec0903dfc5467a854a1c1 Mon Sep 17 00:00:00 2001
From: Yonggang Luo <luoyonggang@gmail.com>
Date: Sun, 19 Jun 2022 00:16:06 +0800
Subject: [PATCH 5/5] mesa: Refactoring get_dummy_buffer_object out

By doing this to remove usage of global DummyBufferObject

Signed-off-by: Yonggang Luo <luoyonggang@gmail.com>
---
 src/mesa/main/bufferobj.c | 43 ++++++++++++++++++++++-----------------
 src/mesa/main/mtypes.h    |  1 +
 2 files changed, 25 insertions(+), 19 deletions(-)

diff --git a/src/mesa/main/bufferobj.c b/src/mesa/main/bufferobj.c
index 4f528cef5ca4..dac4a0d16411 100644
--- a/src/mesa/main/bufferobj.c
+++ b/src/mesa/main/bufferobj.c
@@ -644,16 +644,20 @@ buffer_usage_warning(struct gl_context *ctx, GLuint *id, const char *fmt, ...)
       buffer_usage_warning(CTX, &id, FMT, ##__VA_ARGS__); \
    } while (0)
 
-
-/**
- * Used as a placeholder for buffer objects between glGenBuffers() and
- * glBindBuffer() so that glIsBuffer() can work correctly.
- */
-static struct gl_buffer_object DummyBufferObject = {
-   .MinMaxCacheMutex = _SIMPLE_MTX_INITIALIZER_NP,
-   .RefCount = 1000*1000*1000,  /* never delete */
-};
-
+static inline struct gl_buffer_object *
+get_dummy_buffer_object(void)
+{
+   /**
+    * Used as a placeholder for buffer objects between glGenBuffers() and
+    * glBindBuffer() so that glIsBuffer() can work correctly.
+    */
+   static struct gl_buffer_object DummyBufferObject = {
+      .MinMaxCacheMutex = _SIMPLE_MTX_INITIALIZER_NP,
+      .RefCount = 1000*1000*1000,  /* never delete */
+      .IsDummy = true,
+   };
+   return &DummyBufferObject;
+}
 
 /**
  * Return pointer to address of a buffer object target.
@@ -1311,6 +1315,7 @@ _mesa_bufferobj_alloc(struct gl_context *ctx, GLuint id)
    if (!buf)
       return NULL;
 
+   buf->IsDummy = false;
    buf->RefCount = 1;
    buf->Name = id;
    buf->Usage = GL_STATIC_DRAW_ARB;
@@ -1350,7 +1355,7 @@ _mesa_handle_bind_buffer_gen(struct gl_context *ctx,
       return false;
    }
 
-   if (!buf || buf == &DummyBufferObject) {
+   if (!buf || buf->IsDummy) {
       /* If this is a new buffer object id, or one which was generated but
        * never used before, allocate a buffer object now.
        */
@@ -1469,7 +1474,7 @@ _mesa_lookup_bufferobj_err(struct gl_context *ctx, GLuint buffer,
    struct gl_buffer_object *bufObj;
 
    bufObj = _mesa_lookup_bufferobj(ctx, buffer);
-   if (!bufObj || bufObj == &DummyBufferObject) {
+   if (!bufObj || bufObj->IsDummy) {
       _mesa_error(ctx, GL_INVALID_OPERATION,
                   "%s(non-existent buffer object %u)", caller, buffer);
       return NULL;
@@ -1510,7 +1515,7 @@ _mesa_multi_bind_lookup_bufferobj(struct gl_context *ctx,
 
       /* The multi-bind functions don't create the buffer objects
          when they don't exist. */
-      if (bufObj == &DummyBufferObject)
+      if (bufObj != NULL && bufObj->IsDummy)
          bufObj = NULL;
 
       if (!bufObj) {
@@ -1838,7 +1843,7 @@ delete_buffers(struct gl_context *ctx, GLsizei n, const GLuint *ids)
          struct gl_vertex_array_object *vao = ctx->Array.VAO;
          GLuint j;
 
-         assert(bufObj->Name == ids[i] || bufObj == &DummyBufferObject);
+         assert(bufObj->Name == ids[i] || bufObj->IsDummy);
 
          _mesa_buffer_unmap_all_mappings(ctx, bufObj);
 
@@ -2043,7 +2048,7 @@ create_buffers(struct gl_context *ctx, GLsizei n, GLuint *buffers, bool dsa)
          }
       }
       else
-         buf = &DummyBufferObject;
+         buf = get_dummy_buffer_object();
 
       _mesa_HashInsertLocked(ctx->Shared->BufferObjects, buffers[i], buf, true);
    }
@@ -2128,7 +2133,7 @@ _mesa_IsBuffer(GLuint id)
 
    bufObj = _mesa_lookup_bufferobj(ctx, id);
 
-   return bufObj && bufObj != &DummyBufferObject;
+   return bufObj && (!bufObj->IsDummy);
 }
 
 
@@ -5226,7 +5231,7 @@ _mesa_InvalidateBufferSubData(GLuint buffer, GLintptr offset,
     *     name of an existing buffer object."
     */
    bufObj = _mesa_lookup_bufferobj(ctx, buffer);
-   if (!bufObj || bufObj == &DummyBufferObject) {
+   if (!bufObj || bufObj->IsDummy) {
       _mesa_error(ctx, GL_INVALID_VALUE,
                   "glInvalidateBufferSubData(name = %u) invalid object",
                   buffer);
@@ -5285,7 +5290,7 @@ _mesa_InvalidateBufferData(GLuint buffer)
     *     name of an existing buffer object."
     */
    bufObj = _mesa_lookup_bufferobj(ctx, buffer);
-   if (!bufObj || bufObj == &DummyBufferObject) {
+   if (!bufObj || bufObj->IsDummy) {
       _mesa_error(ctx, GL_INVALID_VALUE,
                   "glInvalidateBufferData(name = %u) invalid object",
                   buffer);
@@ -5382,7 +5387,7 @@ _mesa_NamedBufferPageCommitmentARB(GLuint buffer, GLintptr offset,
    struct gl_buffer_object *bufferObj;
 
    bufferObj = _mesa_lookup_bufferobj(ctx, buffer);
-   if (!bufferObj || bufferObj == &DummyBufferObject) {
+   if (!bufferObj || bufferObj->IsDummy) {
       /* Note: the extension spec is not clear about the excpected error value. */
       _mesa_error(ctx, GL_INVALID_VALUE,
                   "glNamedBufferPageCommitmentARB(name = %u) invalid object",
diff --git a/src/mesa/main/mtypes.h b/src/mesa/main/mtypes.h
index ea0d61ce0cb6..abb3933da859 100644
--- a/src/mesa/main/mtypes.h
+++ b/src/mesa/main/mtypes.h
@@ -1458,6 +1458,7 @@ struct gl_buffer_object
    struct hash_table *MinMaxCache;
    unsigned MinMaxCacheHitIndices;
    unsigned MinMaxCacheMissIndices;
+   bool IsDummy;
    bool MinMaxCacheDirty;
 
    bool HandleAllocated; /**< GL_ARB_bindless_texture */
-- 
GitLab

