From 2d41572fb824e673b9ab6d8112dd5f38e36b46a9 Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Tue, 31 May 2022 08:47:19 +0200
Subject: [PATCH 1/4] radv: remove RADV_META_SAVE_SAMPLE_LOCATIONS

We already save/restore all other dynamic states unconditionally, it's
not really useful to make an exception for sample locations.

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Reviewed-By: Mike Blumenkrantz <michael.blumenkrantz@gmail.com>
---
 src/amd/vulkan/radv_meta.c            | 15 +++++----------
 src/amd/vulkan/radv_meta.h            |  3 +--
 src/amd/vulkan/radv_meta_decompress.c |  2 +-
 3 files changed, 7 insertions(+), 13 deletions(-)

diff --git a/src/amd/vulkan/radv_meta.c b/src/amd/vulkan/radv_meta.c
index a96835b1e02c..b78951ece73f 100644
--- a/src/amd/vulkan/radv_meta.c
+++ b/src/amd/vulkan/radv_meta.c
@@ -183,9 +183,7 @@ radv_meta_save(struct radv_meta_saved_state *state, struct radv_cmd_buffer *cmd_
       typed_memcpy(state->dynamic.discard_rectangle.rectangles,
                    cmd_buffer->state.dynamic.discard_rectangle.rectangles,
                    MAX_DISCARD_RECTANGLES);
-   }
 
-   if (state->flags & RADV_META_SAVE_SAMPLE_LOCATIONS) {
       typed_memcpy(&state->dynamic.sample_location, &cmd_buffer->state.dynamic.sample_location, 1);
    }
 
@@ -314,6 +312,9 @@ radv_meta_restore(const struct radv_meta_saved_state *state, struct radv_cmd_buf
                    state->dynamic.discard_rectangle.rectangles,
                    MAX_DISCARD_RECTANGLES);
 
+      typed_memcpy(&cmd_buffer->state.dynamic.sample_location.locations,
+                   &state->dynamic.sample_location.locations, 1);
+
       cmd_buffer->state.dirty |=
          RADV_CMD_DIRTY_DYNAMIC_VIEWPORT | RADV_CMD_DIRTY_DYNAMIC_SCISSOR |
          RADV_CMD_DIRTY_DYNAMIC_CULL_MODE | RADV_CMD_DIRTY_DYNAMIC_FRONT_FACE |
@@ -328,14 +329,8 @@ radv_meta_restore(const struct radv_meta_saved_state *state, struct radv_cmd_buf
          RADV_CMD_DIRTY_DYNAMIC_COLOR_WRITE_ENABLE | RADV_CMD_DIRTY_DYNAMIC_LINE_STIPPLE |
          RADV_CMD_DIRTY_DYNAMIC_STENCIL_COMPARE_MASK | RADV_CMD_DIRTY_DYNAMIC_DEPTH_BOUNDS |
          RADV_CMD_DIRTY_DYNAMIC_BLEND_CONSTANTS | RADV_CMD_DIRTY_DYNAMIC_LINE_WIDTH |
-         RADV_CMD_DIRTY_DYNAMIC_DEPTH_BIAS | RADV_CMD_DIRTY_DYNAMIC_DISCARD_RECTANGLE;
-   }
-
-   if (state->flags & RADV_META_SAVE_SAMPLE_LOCATIONS) {
-      typed_memcpy(&cmd_buffer->state.dynamic.sample_location.locations,
-                   &state->dynamic.sample_location.locations, 1);
-
-      cmd_buffer->state.dirty |= RADV_CMD_DIRTY_DYNAMIC_SAMPLE_LOCATIONS;
+         RADV_CMD_DIRTY_DYNAMIC_DEPTH_BIAS | RADV_CMD_DIRTY_DYNAMIC_DISCARD_RECTANGLE |
+         RADV_CMD_DIRTY_DYNAMIC_SAMPLE_LOCATIONS;
    }
 
    if (state->flags & RADV_META_SAVE_COMPUTE_PIPELINE) {
diff --git a/src/amd/vulkan/radv_meta.h b/src/amd/vulkan/radv_meta.h
index 039e64b0becb..ef7e2edbb3c1 100644
--- a/src/amd/vulkan/radv_meta.h
+++ b/src/amd/vulkan/radv_meta.h
@@ -39,8 +39,7 @@ enum radv_meta_save_flags {
    RADV_META_SAVE_DESCRIPTORS = (1 << 2),
    RADV_META_SAVE_GRAPHICS_PIPELINE = (1 << 3),
    RADV_META_SAVE_COMPUTE_PIPELINE = (1 << 4),
-   RADV_META_SAVE_SAMPLE_LOCATIONS = (1 << 5),
-   RADV_META_SUSPEND_PREDICATING = (1 << 6),
+   RADV_META_SUSPEND_PREDICATING = (1 << 5),
 };
 
 struct radv_meta_saved_state {
diff --git a/src/amd/vulkan/radv_meta_decompress.c b/src/amd/vulkan/radv_meta_decompress.c
index f852f6971e99..4d7f7a949418 100644
--- a/src/amd/vulkan/radv_meta_decompress.c
+++ b/src/amd/vulkan/radv_meta_decompress.c
@@ -478,7 +478,7 @@ radv_process_depth_stencil(struct radv_cmd_buffer *cmd_buffer, struct radv_image
 
    radv_meta_save(
       &saved_state, cmd_buffer,
-      RADV_META_SAVE_GRAPHICS_PIPELINE | RADV_META_SAVE_SAMPLE_LOCATIONS | RADV_META_SAVE_PASS);
+      RADV_META_SAVE_GRAPHICS_PIPELINE | RADV_META_SAVE_PASS);
 
    pipeline = radv_get_depth_pipeline(cmd_buffer, image, subresourceRange, op);
 
-- 
GitLab


From 44a6ffed4dd6028ed59f4b3b2af2aad7a3e7dc37 Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Mon, 30 May 2022 22:55:49 +0200
Subject: [PATCH 2/4] radv: simplify saving/restoring all dynamic states

Instead of copying every field individually, just use a whole memcpy.
This could be optimized but that's not the point here.

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Reviewed-By: Mike Blumenkrantz <michael.blumenkrantz@gmail.com>
---
 src/amd/vulkan/radv_meta.c | 185 +------------------------------------
 1 file changed, 5 insertions(+), 180 deletions(-)

diff --git a/src/amd/vulkan/radv_meta.c b/src/amd/vulkan/radv_meta.c
index b78951ece73f..9202bdb0e477 100644
--- a/src/amd/vulkan/radv_meta.c
+++ b/src/amd/vulkan/radv_meta.c
@@ -104,87 +104,8 @@ radv_meta_save(struct radv_meta_saved_state *state, struct radv_cmd_buffer *cmd_
 
       state->old_graphics_pipeline = cmd_buffer->state.graphics_pipeline;
 
-      /* Save all viewports. */
-      state->dynamic.viewport.count = cmd_buffer->state.dynamic.viewport.count;
-      typed_memcpy(state->dynamic.viewport.viewports, cmd_buffer->state.dynamic.viewport.viewports,
-                   MAX_VIEWPORTS);
-      typed_memcpy(state->dynamic.viewport.xform, cmd_buffer->state.dynamic.viewport.xform,
-                   MAX_VIEWPORTS);
-
-      /* Save all scissors. */
-      state->dynamic.scissor.count = cmd_buffer->state.dynamic.scissor.count;
-      typed_memcpy(state->dynamic.scissor.scissors, cmd_buffer->state.dynamic.scissor.scissors,
-                   MAX_SCISSORS);
-
-      state->dynamic.line_stipple.factor = cmd_buffer->state.dynamic.line_stipple.factor;
-      state->dynamic.line_stipple.pattern = cmd_buffer->state.dynamic.line_stipple.pattern;
-
-      state->dynamic.cull_mode = cmd_buffer->state.dynamic.cull_mode;
-      state->dynamic.front_face = cmd_buffer->state.dynamic.front_face;
-
-      state->dynamic.primitive_topology = cmd_buffer->state.dynamic.primitive_topology;
-
-      state->dynamic.depth_test_enable = cmd_buffer->state.dynamic.depth_test_enable;
-      state->dynamic.depth_write_enable = cmd_buffer->state.dynamic.depth_write_enable;
-      state->dynamic.depth_compare_op = cmd_buffer->state.dynamic.depth_compare_op;
-      state->dynamic.depth_bounds_test_enable = cmd_buffer->state.dynamic.depth_bounds_test_enable;
-      state->dynamic.stencil_test_enable = cmd_buffer->state.dynamic.stencil_test_enable;
-
-      state->dynamic.stencil_op.front.compare_op = cmd_buffer->state.dynamic.stencil_op.front.compare_op;
-      state->dynamic.stencil_op.front.fail_op = cmd_buffer->state.dynamic.stencil_op.front.fail_op;
-      state->dynamic.stencil_op.front.pass_op = cmd_buffer->state.dynamic.stencil_op.front.pass_op;
-      state->dynamic.stencil_op.front.depth_fail_op =
-         cmd_buffer->state.dynamic.stencil_op.front.depth_fail_op;
-
-      state->dynamic.stencil_op.back.compare_op = cmd_buffer->state.dynamic.stencil_op.back.compare_op;
-      state->dynamic.stencil_op.back.fail_op = cmd_buffer->state.dynamic.stencil_op.back.fail_op;
-      state->dynamic.stencil_op.back.pass_op = cmd_buffer->state.dynamic.stencil_op.back.pass_op;
-      state->dynamic.stencil_op.back.depth_fail_op =
-         cmd_buffer->state.dynamic.stencil_op.back.depth_fail_op;
-
-      state->dynamic.line_width = cmd_buffer->state.dynamic.line_width;
-
-      state->dynamic.depth_bias.bias = cmd_buffer->state.dynamic.depth_bias.bias;
-      state->dynamic.depth_bias.clamp = cmd_buffer->state.dynamic.depth_bias.clamp;
-      state->dynamic.depth_bias.slope = cmd_buffer->state.dynamic.depth_bias.slope;
-
-      memcpy(state->dynamic.blend_constants, cmd_buffer->state.dynamic.blend_constants,
-             sizeof(state->dynamic.blend_constants));
-
-      state->dynamic.depth_bounds.min = cmd_buffer->state.dynamic.depth_bounds.min;
-      state->dynamic.depth_bounds.max = cmd_buffer->state.dynamic.depth_bounds.max;
-
-      state->dynamic.stencil_compare_mask.front = cmd_buffer->state.dynamic.stencil_compare_mask.front;
-      state->dynamic.stencil_compare_mask.back = cmd_buffer->state.dynamic.stencil_compare_mask.back;
-
-      state->dynamic.stencil_write_mask.front = cmd_buffer->state.dynamic.stencil_write_mask.front;
-      state->dynamic.stencil_write_mask.back = cmd_buffer->state.dynamic.stencil_write_mask.back;
-
-      state->dynamic.stencil_reference.front = cmd_buffer->state.dynamic.stencil_reference.front;
-      state->dynamic.stencil_reference.back = cmd_buffer->state.dynamic.stencil_reference.back;
-
-      state->dynamic.fragment_shading_rate.size = cmd_buffer->state.dynamic.fragment_shading_rate.size;
-      state->dynamic.fragment_shading_rate.combiner_ops[0] =
-         cmd_buffer->state.dynamic.fragment_shading_rate.combiner_ops[0];
-      state->dynamic.fragment_shading_rate.combiner_ops[1] =
-         cmd_buffer->state.dynamic.fragment_shading_rate.combiner_ops[1];
-
-      state->dynamic.depth_bias_enable = cmd_buffer->state.dynamic.depth_bias_enable;
-
-      state->dynamic.primitive_restart_enable = cmd_buffer->state.dynamic.primitive_restart_enable;
-
-      state->dynamic.rasterizer_discard_enable = cmd_buffer->state.dynamic.rasterizer_discard_enable;
-
-      state->dynamic.logic_op = cmd_buffer->state.dynamic.logic_op;
-
-      state->dynamic.color_write_enable = cmd_buffer->state.dynamic.color_write_enable;
-
-      state->dynamic.discard_rectangle.count = cmd_buffer->state.dynamic.discard_rectangle.count;
-      typed_memcpy(state->dynamic.discard_rectangle.rectangles,
-                   cmd_buffer->state.dynamic.discard_rectangle.rectangles,
-                   MAX_DISCARD_RECTANGLES);
-
-      typed_memcpy(&state->dynamic.sample_location, &cmd_buffer->state.dynamic.sample_location, 1);
+      /* Save all dynamic states. */
+      state->dynamic = cmd_buffer->state.dynamic;
    }
 
    if (state->flags & RADV_META_SAVE_COMPUTE_PIPELINE) {
@@ -232,105 +153,9 @@ radv_meta_restore(const struct radv_meta_saved_state *state, struct radv_cmd_buf
 
       cmd_buffer->state.dirty |= RADV_CMD_DIRTY_PIPELINE;
 
-      /* Restore all viewports. */
-      cmd_buffer->state.dynamic.viewport.count = state->dynamic.viewport.count;
-      typed_memcpy(cmd_buffer->state.dynamic.viewport.viewports, state->dynamic.viewport.viewports,
-                   MAX_VIEWPORTS);
-      typed_memcpy(cmd_buffer->state.dynamic.viewport.xform, state->dynamic.viewport.xform,
-                   MAX_VIEWPORTS);
-
-      /* Restore all scissors. */
-      cmd_buffer->state.dynamic.scissor.count = state->dynamic.scissor.count;
-      typed_memcpy(cmd_buffer->state.dynamic.scissor.scissors, state->dynamic.scissor.scissors,
-                   MAX_SCISSORS);
-
-      cmd_buffer->state.dynamic.line_stipple.factor = state->dynamic.line_stipple.factor;
-      cmd_buffer->state.dynamic.line_stipple.pattern = state->dynamic.line_stipple.pattern;
-
-      cmd_buffer->state.dynamic.cull_mode = state->dynamic.cull_mode;
-      cmd_buffer->state.dynamic.front_face = state->dynamic.front_face;
-
-      cmd_buffer->state.dynamic.primitive_topology = state->dynamic.primitive_topology;
-
-      cmd_buffer->state.dynamic.depth_test_enable = state->dynamic.depth_test_enable;
-      cmd_buffer->state.dynamic.depth_write_enable = state->dynamic.depth_write_enable;
-      cmd_buffer->state.dynamic.depth_compare_op = state->dynamic.depth_compare_op;
-      cmd_buffer->state.dynamic.depth_bounds_test_enable = state->dynamic.depth_bounds_test_enable;
-      cmd_buffer->state.dynamic.stencil_test_enable = state->dynamic.stencil_test_enable;
-
-      cmd_buffer->state.dynamic.stencil_op.front.compare_op = state->dynamic.stencil_op.front.compare_op;
-      cmd_buffer->state.dynamic.stencil_op.front.fail_op = state->dynamic.stencil_op.front.fail_op;
-      cmd_buffer->state.dynamic.stencil_op.front.pass_op = state->dynamic.stencil_op.front.pass_op;
-      cmd_buffer->state.dynamic.stencil_op.front.depth_fail_op =
-         state->dynamic.stencil_op.front.depth_fail_op;
-
-      cmd_buffer->state.dynamic.stencil_op.back.compare_op = state->dynamic.stencil_op.back.compare_op;
-      cmd_buffer->state.dynamic.stencil_op.back.fail_op = state->dynamic.stencil_op.back.fail_op;
-      cmd_buffer->state.dynamic.stencil_op.back.pass_op = state->dynamic.stencil_op.back.pass_op;
-      cmd_buffer->state.dynamic.stencil_op.back.depth_fail_op =
-         state->dynamic.stencil_op.back.depth_fail_op;
-
-      cmd_buffer->state.dynamic.line_width = state->dynamic.line_width;
-
-      cmd_buffer->state.dynamic.depth_bias.bias = state->dynamic.depth_bias.bias;
-      cmd_buffer->state.dynamic.depth_bias.clamp = state->dynamic.depth_bias.clamp;
-      cmd_buffer->state.dynamic.depth_bias.slope = state->dynamic.depth_bias.slope;
-
-      memcpy(cmd_buffer->state.dynamic.blend_constants, state->dynamic.blend_constants,
-             sizeof(state->dynamic.blend_constants));
-
-      cmd_buffer->state.dynamic.depth_bounds.min = state->dynamic.depth_bounds.min;
-      cmd_buffer->state.dynamic.depth_bounds.max = state->dynamic.depth_bounds.max;
-
-      cmd_buffer->state.dynamic.stencil_compare_mask.front = state->dynamic.stencil_compare_mask.front;
-      cmd_buffer->state.dynamic.stencil_compare_mask.back = state->dynamic.stencil_compare_mask.back;
-
-      cmd_buffer->state.dynamic.stencil_write_mask.front = state->dynamic.stencil_write_mask.front;
-      cmd_buffer->state.dynamic.stencil_write_mask.back = state->dynamic.stencil_write_mask.back;
-
-      cmd_buffer->state.dynamic.stencil_reference.front = state->dynamic.stencil_reference.front;
-      cmd_buffer->state.dynamic.stencil_reference.back = state->dynamic.stencil_reference.back;
-
-      cmd_buffer->state.dynamic.fragment_shading_rate.size = state->dynamic.fragment_shading_rate.size;
-      cmd_buffer->state.dynamic.fragment_shading_rate.combiner_ops[0] =
-         state->dynamic.fragment_shading_rate.combiner_ops[0];
-      cmd_buffer->state.dynamic.fragment_shading_rate.combiner_ops[1] =
-         state->dynamic.fragment_shading_rate.combiner_ops[1];
-
-      cmd_buffer->state.dynamic.depth_bias_enable = state->dynamic.depth_bias_enable;
-
-      cmd_buffer->state.dynamic.primitive_restart_enable = state->dynamic.primitive_restart_enable;
-
-      cmd_buffer->state.dynamic.rasterizer_discard_enable = state->dynamic.rasterizer_discard_enable;
-
-      cmd_buffer->state.dynamic.logic_op = state->dynamic.logic_op;
-
-      cmd_buffer->state.dynamic.color_write_enable = state->dynamic.color_write_enable;
-
-      cmd_buffer->state.dynamic.discard_rectangle.count = state->dynamic.discard_rectangle.count;
-      typed_memcpy(cmd_buffer->state.dynamic.discard_rectangle.rectangles,
-                   state->dynamic.discard_rectangle.rectangles,
-                   MAX_DISCARD_RECTANGLES);
-
-      typed_memcpy(&cmd_buffer->state.dynamic.sample_location.locations,
-                   &state->dynamic.sample_location.locations, 1);
-
-      cmd_buffer->state.dirty |=
-         RADV_CMD_DIRTY_DYNAMIC_VIEWPORT | RADV_CMD_DIRTY_DYNAMIC_SCISSOR |
-         RADV_CMD_DIRTY_DYNAMIC_CULL_MODE | RADV_CMD_DIRTY_DYNAMIC_FRONT_FACE |
-         RADV_CMD_DIRTY_DYNAMIC_PRIMITIVE_TOPOLOGY | RADV_CMD_DIRTY_DYNAMIC_DEPTH_TEST_ENABLE |
-         RADV_CMD_DIRTY_DYNAMIC_DEPTH_WRITE_ENABLE | RADV_CMD_DIRTY_DYNAMIC_DEPTH_COMPARE_OP |
-         RADV_CMD_DIRTY_DYNAMIC_DEPTH_BOUNDS_TEST_ENABLE |
-         RADV_CMD_DIRTY_DYNAMIC_STENCIL_TEST_ENABLE | RADV_CMD_DIRTY_DYNAMIC_STENCIL_OP |
-         RADV_CMD_DIRTY_DYNAMIC_STENCIL_WRITE_MASK | RADV_CMD_DIRTY_DYNAMIC_STENCIL_REFERENCE |
-         RADV_CMD_DIRTY_DYNAMIC_FRAGMENT_SHADING_RATE | RADV_CMD_DIRTY_DYNAMIC_DEPTH_BIAS_ENABLE |
-         RADV_CMD_DIRTY_DYNAMIC_PRIMITIVE_RESTART_ENABLE |
-         RADV_CMD_DIRTY_DYNAMIC_RASTERIZER_DISCARD_ENABLE | RADV_CMD_DIRTY_DYNAMIC_LOGIC_OP |
-         RADV_CMD_DIRTY_DYNAMIC_COLOR_WRITE_ENABLE | RADV_CMD_DIRTY_DYNAMIC_LINE_STIPPLE |
-         RADV_CMD_DIRTY_DYNAMIC_STENCIL_COMPARE_MASK | RADV_CMD_DIRTY_DYNAMIC_DEPTH_BOUNDS |
-         RADV_CMD_DIRTY_DYNAMIC_BLEND_CONSTANTS | RADV_CMD_DIRTY_DYNAMIC_LINE_WIDTH |
-         RADV_CMD_DIRTY_DYNAMIC_DEPTH_BIAS | RADV_CMD_DIRTY_DYNAMIC_DISCARD_RECTANGLE |
-         RADV_CMD_DIRTY_DYNAMIC_SAMPLE_LOCATIONS;
+      /* Restore all dynamic states. */
+      cmd_buffer->state.dynamic = state->dynamic;
+      cmd_buffer->state.dirty |= RADV_DYNAMIC_ALL;
    }
 
    if (state->flags & RADV_META_SAVE_COMPUTE_PIPELINE) {
-- 
GitLab


From b1a7b19fc1884fade0cdce24d7236d8e42473153 Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Tue, 31 May 2022 09:13:12 +0200
Subject: [PATCH 3/4] radv: remove unused states parameter from some
 radv_emit_XXX() helpers

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Reviewed-By: Mike Blumenkrantz <michael.blumenkrantz@gmail.com>
---
 src/amd/vulkan/radv_cmd_buffer.c | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

diff --git a/src/amd/vulkan/radv_cmd_buffer.c b/src/amd/vulkan/radv_cmd_buffer.c
index 1b8f67cf3660..86378d83d01c 100644
--- a/src/amd/vulkan/radv_cmd_buffer.c
+++ b/src/amd/vulkan/radv_cmd_buffer.c
@@ -1789,7 +1789,7 @@ radv_get_pa_su_sc_mode_cntl(const struct radv_cmd_buffer *cmd_buffer)
 }
 
 static void
-radv_emit_culling(struct radv_cmd_buffer *cmd_buffer, uint64_t states)
+radv_emit_culling(struct radv_cmd_buffer *cmd_buffer)
 {
    unsigned pa_su_sc_mode_cntl = radv_get_pa_su_sc_mode_cntl(cmd_buffer);
 
@@ -1812,7 +1812,7 @@ radv_emit_primitive_topology(struct radv_cmd_buffer *cmd_buffer)
 }
 
 static void
-radv_emit_depth_control(struct radv_cmd_buffer *cmd_buffer, uint64_t states)
+radv_emit_depth_control(struct radv_cmd_buffer *cmd_buffer)
 {
    unsigned db_depth_control = cmd_buffer->state.graphics_pipeline->db_depth_control;
    struct radv_dynamic_state *d = &cmd_buffer->state.dynamic;
@@ -3354,7 +3354,7 @@ radv_cmd_buffer_flush_dynamic_state(struct radv_cmd_buffer *cmd_buffer, bool pip
 
    if (states & (RADV_CMD_DIRTY_DYNAMIC_CULL_MODE | RADV_CMD_DIRTY_DYNAMIC_FRONT_FACE |
                  RADV_CMD_DIRTY_DYNAMIC_DEPTH_BIAS_ENABLE))
-      radv_emit_culling(cmd_buffer, states);
+      radv_emit_culling(cmd_buffer);
 
    if (states & RADV_CMD_DIRTY_DYNAMIC_PRIMITIVE_TOPOLOGY)
       radv_emit_primitive_topology(cmd_buffer);
@@ -3363,7 +3363,7 @@ radv_cmd_buffer_flush_dynamic_state(struct radv_cmd_buffer *cmd_buffer, bool pip
        (RADV_CMD_DIRTY_DYNAMIC_DEPTH_TEST_ENABLE | RADV_CMD_DIRTY_DYNAMIC_DEPTH_WRITE_ENABLE |
         RADV_CMD_DIRTY_DYNAMIC_DEPTH_COMPARE_OP | RADV_CMD_DIRTY_DYNAMIC_DEPTH_BOUNDS_TEST_ENABLE |
         RADV_CMD_DIRTY_DYNAMIC_STENCIL_TEST_ENABLE | RADV_CMD_DIRTY_DYNAMIC_STENCIL_OP))
-      radv_emit_depth_control(cmd_buffer, states);
+      radv_emit_depth_control(cmd_buffer);
 
    if (states & RADV_CMD_DIRTY_DYNAMIC_STENCIL_OP)
       radv_emit_stencil_control(cmd_buffer);
@@ -10358,4 +10358,4 @@ radv_CmdBindPipelineShaderGroupNV(VkCommandBuffer commandBuffer,
 {
    fprintf(stderr, "radv: unimplemented vkCmdBindPipelineShaderGroupNV\n");
    abort();
-}
\ No newline at end of file
+}
-- 
GitLab


From ea821420acd337565bb309f866574ee0ed16cc9f Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Tue, 31 May 2022 09:29:30 +0200
Subject: [PATCH 4/4] radv: simplify radv_bind_dynamic_state() slightly

This adds RADV_CMP_COPY to compact copies. Based on ANV.

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Reviewed-By: Mike Blumenkrantz <michael.blumenkrantz@gmail.com>
---
 src/amd/vulkan/radv_cmd_buffer.c | 188 ++++++++-----------------------
 1 file changed, 47 insertions(+), 141 deletions(-)

diff --git a/src/amd/vulkan/radv_cmd_buffer.c b/src/amd/vulkan/radv_cmd_buffer.c
index 86378d83d01c..d88ea79994f0 100644
--- a/src/amd/vulkan/radv_cmd_buffer.c
+++ b/src/amd/vulkan/radv_cmd_buffer.c
@@ -158,20 +158,6 @@ radv_bind_dynamic_state(struct radv_cmd_buffer *cmd_buffer, const struct radv_dy
       }
    }
 
-   if (copy_mask & RADV_DYNAMIC_LINE_WIDTH) {
-      if (dest->line_width != src->line_width) {
-         dest->line_width = src->line_width;
-         dest_mask |= RADV_DYNAMIC_LINE_WIDTH;
-      }
-   }
-
-   if (copy_mask & RADV_DYNAMIC_DEPTH_BIAS) {
-      if (memcmp(&dest->depth_bias, &src->depth_bias, sizeof(src->depth_bias))) {
-         dest->depth_bias = src->depth_bias;
-         dest_mask |= RADV_DYNAMIC_DEPTH_BIAS;
-      }
-   }
-
    if (copy_mask & RADV_DYNAMIC_BLEND_CONSTANTS) {
       if (memcmp(&dest->blend_constants, &src->blend_constants, sizeof(src->blend_constants))) {
          typed_memcpy(dest->blend_constants, src->blend_constants, 4);
@@ -179,37 +165,6 @@ radv_bind_dynamic_state(struct radv_cmd_buffer *cmd_buffer, const struct radv_dy
       }
    }
 
-   if (copy_mask & RADV_DYNAMIC_DEPTH_BOUNDS) {
-      if (memcmp(&dest->depth_bounds, &src->depth_bounds, sizeof(src->depth_bounds))) {
-         dest->depth_bounds = src->depth_bounds;
-         dest_mask |= RADV_DYNAMIC_DEPTH_BOUNDS;
-      }
-   }
-
-   if (copy_mask & RADV_DYNAMIC_STENCIL_COMPARE_MASK) {
-      if (memcmp(&dest->stencil_compare_mask, &src->stencil_compare_mask,
-                 sizeof(src->stencil_compare_mask))) {
-         dest->stencil_compare_mask = src->stencil_compare_mask;
-         dest_mask |= RADV_DYNAMIC_STENCIL_COMPARE_MASK;
-      }
-   }
-
-   if (copy_mask & RADV_DYNAMIC_STENCIL_WRITE_MASK) {
-      if (memcmp(&dest->stencil_write_mask, &src->stencil_write_mask,
-                 sizeof(src->stencil_write_mask))) {
-         dest->stencil_write_mask = src->stencil_write_mask;
-         dest_mask |= RADV_DYNAMIC_STENCIL_WRITE_MASK;
-      }
-   }
-
-   if (copy_mask & RADV_DYNAMIC_STENCIL_REFERENCE) {
-      if (memcmp(&dest->stencil_reference, &src->stencil_reference,
-                 sizeof(src->stencil_reference))) {
-         dest->stencil_reference = src->stencil_reference;
-         dest_mask |= RADV_DYNAMIC_STENCIL_REFERENCE;
-      }
-   }
-
    if (copy_mask & RADV_DYNAMIC_DISCARD_RECTANGLE) {
       if (memcmp(&dest->discard_rectangle.rectangles, &src->discard_rectangle.rectangles,
                  src->discard_rectangle.count * sizeof(VkRect2D))) {
@@ -233,118 +188,69 @@ radv_bind_dynamic_state(struct radv_cmd_buffer *cmd_buffer, const struct radv_dy
       }
    }
 
-   if (copy_mask & RADV_DYNAMIC_LINE_STIPPLE) {
-      if (memcmp(&dest->line_stipple, &src->line_stipple, sizeof(src->line_stipple))) {
-         dest->line_stipple = src->line_stipple;
-         dest_mask |= RADV_DYNAMIC_LINE_STIPPLE;
-      }
+#define RADV_CMP_COPY(field, flag)                                \
+   if (copy_mask & flag) {                                        \
+      if (dest->field != src->field) {                            \
+         dest->field = src->field;                                \
+         dest_mask |= flag;                                       \
+      }                                                           \
    }
 
-   if (copy_mask & RADV_DYNAMIC_CULL_MODE) {
-      if (dest->cull_mode != src->cull_mode) {
-         dest->cull_mode = src->cull_mode;
-         dest_mask |= RADV_DYNAMIC_CULL_MODE;
-      }
-   }
+   RADV_CMP_COPY(line_width, RADV_DYNAMIC_LINE_WIDTH);
 
-   if (copy_mask & RADV_DYNAMIC_FRONT_FACE) {
-      if (dest->front_face != src->front_face) {
-         dest->front_face = src->front_face;
-         dest_mask |= RADV_DYNAMIC_FRONT_FACE;
-      }
-   }
+   RADV_CMP_COPY(depth_bias.bias, RADV_DYNAMIC_DEPTH_BIAS);
+   RADV_CMP_COPY(depth_bias.clamp, RADV_DYNAMIC_DEPTH_BIAS);
+   RADV_CMP_COPY(depth_bias.slope, RADV_DYNAMIC_DEPTH_BIAS);
 
-   if (copy_mask & RADV_DYNAMIC_PRIMITIVE_TOPOLOGY) {
-      if (dest->primitive_topology != src->primitive_topology) {
-         dest->primitive_topology = src->primitive_topology;
-         dest_mask |= RADV_DYNAMIC_PRIMITIVE_TOPOLOGY;
-      }
-   }
+   RADV_CMP_COPY(depth_bounds.min, RADV_DYNAMIC_DEPTH_BOUNDS);
+   RADV_CMP_COPY(depth_bounds.max, RADV_DYNAMIC_DEPTH_BOUNDS);
 
-   if (copy_mask & RADV_DYNAMIC_DEPTH_TEST_ENABLE) {
-      if (dest->depth_test_enable != src->depth_test_enable) {
-         dest->depth_test_enable = src->depth_test_enable;
-         dest_mask |= RADV_DYNAMIC_DEPTH_TEST_ENABLE;
-      }
-   }
+   RADV_CMP_COPY(stencil_compare_mask.front, RADV_DYNAMIC_STENCIL_COMPARE_MASK);
+   RADV_CMP_COPY(stencil_compare_mask.back, RADV_DYNAMIC_STENCIL_COMPARE_MASK);
 
-   if (copy_mask & RADV_DYNAMIC_DEPTH_WRITE_ENABLE) {
-      if (dest->depth_write_enable != src->depth_write_enable) {
-         dest->depth_write_enable = src->depth_write_enable;
-         dest_mask |= RADV_DYNAMIC_DEPTH_WRITE_ENABLE;
-      }
-   }
+   RADV_CMP_COPY(stencil_write_mask.front, RADV_DYNAMIC_STENCIL_WRITE_MASK);
+   RADV_CMP_COPY(stencil_write_mask.back, RADV_DYNAMIC_STENCIL_WRITE_MASK);
 
-   if (copy_mask & RADV_DYNAMIC_DEPTH_COMPARE_OP) {
-      if (dest->depth_compare_op != src->depth_compare_op) {
-         dest->depth_compare_op = src->depth_compare_op;
-         dest_mask |= RADV_DYNAMIC_DEPTH_COMPARE_OP;
-      }
-   }
+   RADV_CMP_COPY(stencil_reference.front, RADV_DYNAMIC_STENCIL_REFERENCE);
+   RADV_CMP_COPY(stencil_reference.back, RADV_DYNAMIC_STENCIL_REFERENCE);
 
-   if (copy_mask & RADV_DYNAMIC_DEPTH_BOUNDS_TEST_ENABLE) {
-      if (dest->depth_bounds_test_enable != src->depth_bounds_test_enable) {
-         dest->depth_bounds_test_enable = src->depth_bounds_test_enable;
-         dest_mask |= RADV_DYNAMIC_DEPTH_BOUNDS_TEST_ENABLE;
-      }
-   }
+   RADV_CMP_COPY(line_stipple.factor, RADV_DYNAMIC_LINE_STIPPLE);
+   RADV_CMP_COPY(line_stipple.pattern, RADV_DYNAMIC_LINE_STIPPLE);
 
-   if (copy_mask & RADV_DYNAMIC_STENCIL_TEST_ENABLE) {
-      if (dest->stencil_test_enable != src->stencil_test_enable) {
-         dest->stencil_test_enable = src->stencil_test_enable;
-         dest_mask |= RADV_DYNAMIC_STENCIL_TEST_ENABLE;
-      }
-   }
+   RADV_CMP_COPY(cull_mode, RADV_DYNAMIC_CULL_MODE);
+   RADV_CMP_COPY(front_face, RADV_DYNAMIC_FRONT_FACE);
+   RADV_CMP_COPY(primitive_topology, RADV_DYNAMIC_PRIMITIVE_TOPOLOGY);
+   RADV_CMP_COPY(depth_test_enable, RADV_DYNAMIC_DEPTH_TEST_ENABLE);
+   RADV_CMP_COPY(depth_write_enable, RADV_DYNAMIC_DEPTH_WRITE_ENABLE);
+   RADV_CMP_COPY(depth_compare_op, RADV_DYNAMIC_DEPTH_COMPARE_OP);
+   RADV_CMP_COPY(depth_bounds_test_enable, RADV_DYNAMIC_DEPTH_BOUNDS_TEST_ENABLE);
+   RADV_CMP_COPY(stencil_test_enable, RADV_DYNAMIC_STENCIL_TEST_ENABLE);
 
-   if (copy_mask & RADV_DYNAMIC_STENCIL_OP) {
-      if (memcmp(&dest->stencil_op, &src->stencil_op, sizeof(src->stencil_op))) {
-         dest->stencil_op = src->stencil_op;
-         dest_mask |= RADV_DYNAMIC_STENCIL_OP;
-      }
-   }
+   RADV_CMP_COPY(stencil_op.front.fail_op, RADV_DYNAMIC_STENCIL_OP);
+   RADV_CMP_COPY(stencil_op.front.pass_op, RADV_DYNAMIC_STENCIL_OP);
+   RADV_CMP_COPY(stencil_op.front.depth_fail_op, RADV_DYNAMIC_STENCIL_OP);
+   RADV_CMP_COPY(stencil_op.front.compare_op, RADV_DYNAMIC_STENCIL_OP);
+   RADV_CMP_COPY(stencil_op.back.fail_op, RADV_DYNAMIC_STENCIL_OP);
+   RADV_CMP_COPY(stencil_op.back.pass_op, RADV_DYNAMIC_STENCIL_OP);
+   RADV_CMP_COPY(stencil_op.back.depth_fail_op, RADV_DYNAMIC_STENCIL_OP);
+   RADV_CMP_COPY(stencil_op.back.compare_op, RADV_DYNAMIC_STENCIL_OP);
 
-   if (copy_mask & RADV_DYNAMIC_FRAGMENT_SHADING_RATE) {
-      if (memcmp(&dest->fragment_shading_rate, &src->fragment_shading_rate,
-                 sizeof(src->fragment_shading_rate))) {
-         dest->fragment_shading_rate = src->fragment_shading_rate;
-         dest_mask |= RADV_DYNAMIC_FRAGMENT_SHADING_RATE;
-      }
-   }
+   RADV_CMP_COPY(fragment_shading_rate.size.width, RADV_DYNAMIC_FRAGMENT_SHADING_RATE);
+   RADV_CMP_COPY(fragment_shading_rate.size.height, RADV_DYNAMIC_FRAGMENT_SHADING_RATE);
+   RADV_CMP_COPY(fragment_shading_rate.combiner_ops[0], RADV_DYNAMIC_FRAGMENT_SHADING_RATE);
+   RADV_CMP_COPY(fragment_shading_rate.combiner_ops[1], RADV_DYNAMIC_FRAGMENT_SHADING_RATE);
 
-   if (copy_mask & RADV_DYNAMIC_DEPTH_BIAS_ENABLE) {
-      if (dest->depth_bias_enable != src->depth_bias_enable) {
-         dest->depth_bias_enable = src->depth_bias_enable;
-         dest_mask |= RADV_DYNAMIC_DEPTH_BIAS_ENABLE;
-      }
-   }
+   RADV_CMP_COPY(depth_bias_enable, RADV_DYNAMIC_DEPTH_BIAS_ENABLE);
 
-   if (copy_mask & RADV_DYNAMIC_PRIMITIVE_RESTART_ENABLE) {
-      if (dest->primitive_restart_enable != src->primitive_restart_enable) {
-         dest->primitive_restart_enable = src->primitive_restart_enable;
-         dest_mask |= RADV_DYNAMIC_PRIMITIVE_RESTART_ENABLE;
-      }
-   }
+   RADV_CMP_COPY(primitive_restart_enable, RADV_DYNAMIC_PRIMITIVE_RESTART_ENABLE);
 
-   if (copy_mask & RADV_DYNAMIC_RASTERIZER_DISCARD_ENABLE) {
-      if (dest->rasterizer_discard_enable != src->rasterizer_discard_enable) {
-         dest->rasterizer_discard_enable = src->rasterizer_discard_enable;
-         dest_mask |= RADV_DYNAMIC_RASTERIZER_DISCARD_ENABLE;
-      }
-   }
+   RADV_CMP_COPY(rasterizer_discard_enable, RADV_DYNAMIC_RASTERIZER_DISCARD_ENABLE);
 
-   if (copy_mask & RADV_DYNAMIC_LOGIC_OP) {
-      if (dest->logic_op != src->logic_op) {
-         dest->logic_op = src->logic_op;
-         dest_mask |= RADV_DYNAMIC_LOGIC_OP;
-      }
-   }
+   RADV_CMP_COPY(logic_op, RADV_DYNAMIC_LOGIC_OP);
 
-   if (copy_mask & RADV_DYNAMIC_COLOR_WRITE_ENABLE) {
-      if (dest->color_write_enable != src->color_write_enable) {
-         dest->color_write_enable = src->color_write_enable;
-         dest_mask |= RADV_DYNAMIC_COLOR_WRITE_ENABLE;
-      }
-   }
+   RADV_CMP_COPY(color_write_enable, RADV_DYNAMIC_COLOR_WRITE_ENABLE);
+
+#undef RADV_CMP_COPY
 
    cmd_buffer->state.dirty |= dest_mask;
 }
-- 
GitLab

