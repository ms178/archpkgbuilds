From c96863a678c53d1743cb6ae9133862d3929ed68b Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Tue, 18 Jun 2024 14:15:04 +0100
Subject: [PATCH] aco/insert_exec_mask: ensure top mask is not a temporary at
 loop exits

This is problematic when the successor of the loop exit is an invert
block. It assumes that the top mask is Operand(bld.lm) and doesn't change
it when entering the else branch.

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
Closes: https://gitlab.freedesktop.org/mesa/mesa/-/issues/11348
Cc: mesa-stable
---
 src/amd/compiler/aco_insert_exec_mask.cpp | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/src/amd/compiler/aco_insert_exec_mask.cpp b/src/amd/compiler/aco_insert_exec_mask.cpp
index c28d4b2ba42bc..eca753f5a9c1d 100644
--- a/src/amd/compiler/aco_insert_exec_mask.cpp
+++ b/src/amd/compiler/aco_insert_exec_mask.cpp
@@ -303,6 +303,11 @@ add_coupling_code(exec_ctx& ctx, Block* block, std::vector<aco_ptr<Instruction>>
          }
       }
 
+      /* This can happen if the loop has divergent continues but no divergent breaks. We should
+       * ensure that exec.back() is not a temporary. */
+      if (!restore_exec && ctx.info[idx].exec.back().first.isTemp())
+         ctx.info[idx].exec.back().first = Operand(bld.lm);
+
       assert(ctx.info[idx].exec.size() == info.num_exec_masks);
       ctx.loop.pop_back();
 
-- 
GitLab

