From 53596dd5aa7c90a853a7d510f41096dd918cada2 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Mon, 7 Nov 2022 18:53:22 -0500
Subject: [PATCH 1/8] st/mesa: remove alignment code from st_setup_current

I was the one who added this code and it doesn't seem useful.
---
 src/mesa/state_tracker/st_atom_array.cpp | 11 ++++-------
 1 file changed, 4 insertions(+), 7 deletions(-)

diff --git a/src/mesa/state_tracker/st_atom_array.cpp b/src/mesa/state_tracker/st_atom_array.cpp
index 4ed0d488068c..6e30d7cef8ff 100644
--- a/src/mesa/state_tracker/st_atom_array.cpp
+++ b/src/mesa/state_tracker/st_atom_array.cpp
@@ -219,18 +219,15 @@ st_setup_current(struct st_context *st,
       GLubyte data[VERT_ATTRIB_MAX * sizeof(GLdouble) * 4];
       GLubyte *cursor = data;
       const unsigned bufidx = (*num_vbuffers)++;
-      unsigned max_alignment = 1;
 
       do {
          const gl_vert_attrib attr = (gl_vert_attrib)u_bit_scan(&curmask);
          const struct gl_array_attributes *const attrib
             = _mesa_draw_current_attrib(ctx, attr);
          const unsigned size = attrib->Format._ElementSize;
-         const unsigned alignment = util_next_power_of_two(size);
-         max_alignment = MAX2(max_alignment, alignment);
+
+         assert(size % 4 == 0); /* assume a hw-friendly alignment */
          memcpy(cursor, attrib->Ptr, size);
-         if (alignment != size)
-            memset(cursor + size, 0, alignment - size);
 
          if (UPDATE == UPDATE_ALL) {
             init_velement(velements->velems, &attrib->Format, cursor - data,
@@ -238,7 +235,7 @@ st_setup_current(struct st_context *st,
                           util_bitcount_fast<POPCNT>(inputs_read & BITFIELD_MASK(attr)));
          }
 
-         cursor += alignment;
+         cursor += size;
       } while (curmask);
 
       vbuffer[bufidx].is_user_buffer = false;
@@ -256,7 +253,7 @@ st_setup_current(struct st_context *st,
                                       st->pipe->const_uploader :
                                       st->pipe->stream_uploader;
       u_upload_data(uploader,
-                    0, cursor - data, max_alignment, data,
+                    0, cursor - data, 16, data,
                     &vbuffer[bufidx].buffer_offset,
                     &vbuffer[bufidx].buffer.resource);
       /* Always unmap. The uploader might use explicit flushes. */
-- 
GitLab


From 5bfab64254e84667c3427be81625b8eb04eb5b0b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Mon, 7 Nov 2022 21:18:33 -0500
Subject: [PATCH 2/8] st/mesa: optimize uploading zero-stride vertex attribs

Instead of memcpy into a temporary array and then upload from that,
upload into a buffer directly.
---
 src/mesa/state_tracker/st_atom_array.cpp | 51 ++++++++++++++----------
 1 file changed, 29 insertions(+), 22 deletions(-)

diff --git a/src/mesa/state_tracker/st_atom_array.cpp b/src/mesa/state_tracker/st_atom_array.cpp
index 6e30d7cef8ff..71f518ce4cbf 100644
--- a/src/mesa/state_tracker/st_atom_array.cpp
+++ b/src/mesa/state_tracker/st_atom_array.cpp
@@ -215,10 +215,35 @@ st_setup_current(struct st_context *st,
    /* Process values that should have better been uniforms in the application */
    GLbitfield curmask = inputs_read & _mesa_draw_current_bits(ctx);
    if (curmask) {
-      /* For each attribute, upload the maximum possible size. */
-      GLubyte data[VERT_ATTRIB_MAX * sizeof(GLdouble) * 4];
-      GLubyte *cursor = data;
+      unsigned num_attribs = util_bitcount_fast<POPCNT>(curmask);
+      unsigned num_dual_attribs = util_bitcount_fast<POPCNT>(curmask &
+                                                             dual_slot_inputs);
+      /* num_attribs includes num_dual_attribs, so adding num_dual_attribs
+       * doubles the size of those attribs.
+       */
+      unsigned max_size = (num_attribs + num_dual_attribs) * 16;
+
       const unsigned bufidx = (*num_vbuffers)++;
+      vbuffer[bufidx].is_user_buffer = false;
+      vbuffer[bufidx].buffer.resource = NULL;
+      /* vbuffer[bufidx].buffer_offset is set below */
+      vbuffer[bufidx].stride = 0;
+
+      /* Use const_uploader for zero-stride vertex attributes, because
+       * it may use a better memory placement than stream_uploader.
+       * The reason is that zero-stride attributes can be fetched many
+       * times (thousands of times), so a better placement is going to
+       * perform better.
+       */
+      struct u_upload_mgr *uploader = st->can_bind_const_buffer_as_vertex ?
+                                      st->pipe->const_uploader :
+                                      st->pipe->stream_uploader;
+      uint8_t *ptr = NULL;
+
+      u_upload_alloc(uploader, 0, max_size, 16,
+                     &vbuffer[bufidx].buffer_offset,
+                     &vbuffer[bufidx].buffer.resource, (void**)&ptr);
+      uint8_t *cursor = ptr;
 
       do {
          const gl_vert_attrib attr = (gl_vert_attrib)u_bit_scan(&curmask);
@@ -230,7 +255,7 @@ st_setup_current(struct st_context *st,
          memcpy(cursor, attrib->Ptr, size);
 
          if (UPDATE == UPDATE_ALL) {
-            init_velement(velements->velems, &attrib->Format, cursor - data,
+            init_velement(velements->velems, &attrib->Format, cursor - ptr,
                           0, bufidx, dual_slot_inputs & BITFIELD_BIT(attr),
                           util_bitcount_fast<POPCNT>(inputs_read & BITFIELD_MASK(attr)));
          }
@@ -238,24 +263,6 @@ st_setup_current(struct st_context *st,
          cursor += size;
       } while (curmask);
 
-      vbuffer[bufidx].is_user_buffer = false;
-      vbuffer[bufidx].buffer.resource = NULL;
-      /* vbuffer[bufidx].buffer_offset is set below */
-      vbuffer[bufidx].stride = 0;
-
-      /* Use const_uploader for zero-stride vertex attributes, because
-       * it may use a better memory placement than stream_uploader.
-       * The reason is that zero-stride attributes can be fetched many
-       * times (thousands of times), so a better placement is going to
-       * perform better.
-       */
-      struct u_upload_mgr *uploader = st->can_bind_const_buffer_as_vertex ?
-                                      st->pipe->const_uploader :
-                                      st->pipe->stream_uploader;
-      u_upload_data(uploader,
-                    0, cursor - data, 16, data,
-                    &vbuffer[bufidx].buffer_offset,
-                    &vbuffer[bufidx].buffer.resource);
       /* Always unmap. The uploader might use explicit flushes. */
       u_upload_unmap(uploader);
    }
-- 
GitLab


From 6108813db69defefca6503c481960918181d2905 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Mon, 7 Nov 2022 16:58:22 -0500
Subject: [PATCH 3/8] st/mesa: simplify st_setup_current parameters

---
 src/mesa/state_tracker/st_atom_array.cpp | 16 ++++++++--------
 1 file changed, 8 insertions(+), 8 deletions(-)

diff --git a/src/mesa/state_tracker/st_atom_array.cpp b/src/mesa/state_tracker/st_atom_array.cpp
index 71f518ce4cbf..fcd3a77ec20b 100644
--- a/src/mesa/state_tracker/st_atom_array.cpp
+++ b/src/mesa/state_tracker/st_atom_array.cpp
@@ -203,14 +203,12 @@ st_setup_arrays(struct st_context *st,
  */
 template<util_popcnt POPCNT, st_update_flag UPDATE> void ALWAYS_INLINE
 st_setup_current(struct st_context *st,
-                 const struct gl_vertex_program *vp,
-                 const struct st_common_variant *vp_variant,
+                 const GLbitfield inputs_read,
+                 const GLbitfield dual_slot_inputs,
                  struct cso_velems_state *velements,
                  struct pipe_vertex_buffer *vbuffer, unsigned *num_vbuffers)
 {
    struct gl_context *ctx = st->ctx;
-   const GLbitfield inputs_read = vp_variant->vert_attrib_mask;
-   const GLbitfield dual_slot_inputs = vp->Base.DualSlotInputs;
 
    /* Process values that should have better been uniforms in the application */
    GLbitfield curmask = inputs_read & _mesa_draw_current_bits(ctx);
@@ -309,6 +307,8 @@ st_update_array_templ(struct st_context *st)
    /* _NEW_PROGRAM, ST_NEW_VS_STATE */
    const struct gl_vertex_program *vp = (struct gl_vertex_program *)st->vp;
    const struct st_common_variant *vp_variant = st->vp_variant;
+   const GLbitfield inputs_read = vp_variant->vert_attrib_mask;
+   const GLbitfield dual_slot_inputs = vp->Base.DualSlotInputs;
 
    struct pipe_vertex_buffer vbuffer[PIPE_MAX_ATTRIBS];
    unsigned num_vbuffers = 0;
@@ -318,15 +318,15 @@ st_update_array_templ(struct st_context *st)
    /* ST_NEW_VERTEX_ARRAYS */
    /* Setup arrays */
    setup_arrays<POPCNT, UPDATE>
-      (st, ctx->Array._DrawVAO, vp->Base.DualSlotInputs,
-       vp_variant->vert_attrib_mask, _mesa_draw_nonzero_divisor_bits(ctx),
+      (st, ctx->Array._DrawVAO, dual_slot_inputs,
+       inputs_read, _mesa_draw_nonzero_divisor_bits(ctx),
        _mesa_draw_array_bits(ctx), _mesa_draw_user_array_bits(ctx),
        &velements, vbuffer, &num_vbuffers, &uses_user_vertex_buffers);
 
    /* _NEW_CURRENT_ATTRIB */
    /* Setup zero-stride attribs. */
-   st_setup_current<POPCNT, UPDATE>(st, vp, vp_variant, &velements, vbuffer,
-                                    &num_vbuffers);
+   st_setup_current<POPCNT, UPDATE>(st, inputs_read, dual_slot_inputs,
+                                    &velements, vbuffer, &num_vbuffers);
 
    unsigned unbind_trailing_vbuffers =
       st->last_num_vbuffers > num_vbuffers ?
-- 
GitLab


From 8c95184c11bbe5970ff54be8972b8e8eeebc4dc9 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Wed, 19 Oct 2022 18:21:47 -0400
Subject: [PATCH 4/8] st/mesa: move setting draw_needs_minmax_index into
 st_update_array_templ

This removes several parameters from setup_array that become unused.
---
 src/mesa/state_tracker/st_atom.h          |  3 +-
 src/mesa/state_tracker/st_atom_array.cpp  | 38 +++++++++--------------
 src/mesa/state_tracker/st_draw_feedback.c |  4 +--
 3 files changed, 16 insertions(+), 29 deletions(-)

diff --git a/src/mesa/state_tracker/st_atom.h b/src/mesa/state_tracker/st_atom.h
index e616c0d8c4b4..a2e76f985bd3 100644
--- a/src/mesa/state_tracker/st_atom.h
+++ b/src/mesa/state_tracker/st_atom.h
@@ -69,8 +69,7 @@ st_setup_arrays(struct st_context *st,
                 const struct gl_vertex_program *vp,
                 const struct st_common_variant *vp_variant,
                 struct cso_velems_state *velements,
-                struct pipe_vertex_buffer *vbuffer, unsigned *num_vbuffers,
-                bool *has_user_vertex_buffers);
+                struct pipe_vertex_buffer *vbuffer, unsigned *num_vbuffers);
 
 void
 st_setup_current_user(struct st_context *st,
diff --git a/src/mesa/state_tracker/st_atom_array.cpp b/src/mesa/state_tracker/st_atom_array.cpp
index fcd3a77ec20b..fe4d42021ea1 100644
--- a/src/mesa/state_tracker/st_atom_array.cpp
+++ b/src/mesa/state_tracker/st_atom_array.cpp
@@ -79,22 +79,14 @@ setup_arrays(struct st_context *st,
              const struct gl_vertex_array_object *vao,
              const GLbitfield dual_slot_inputs,
              const GLbitfield inputs_read,
-             const GLbitfield nonzero_divisor_attribs,
              const GLbitfield enabled_attribs,
-             const GLbitfield enabled_user_attribs,
              struct cso_velems_state *velements,
-             struct pipe_vertex_buffer *vbuffer, unsigned *num_vbuffers,
-             bool *has_user_vertex_buffers)
+             struct pipe_vertex_buffer *vbuffer, unsigned *num_vbuffers)
 {
    struct gl_context *ctx = st->ctx;
 
    /* Process attribute array data. */
    GLbitfield mask = inputs_read & enabled_attribs;
-   GLbitfield userbuf_attribs = inputs_read & enabled_user_attribs;
-
-   *has_user_vertex_buffers = userbuf_attribs != 0;
-   st->draw_needs_minmax_index =
-      (userbuf_attribs & ~nonzero_divisor_attribs) != 0;
 
    if (vao->IsDynamic) {
       while (mask) {
@@ -183,16 +175,14 @@ st_setup_arrays(struct st_context *st,
                 const struct gl_vertex_program *vp,
                 const struct st_common_variant *vp_variant,
                 struct cso_velems_state *velements,
-                struct pipe_vertex_buffer *vbuffer, unsigned *num_vbuffers,
-                bool *has_user_vertex_buffers)
+                struct pipe_vertex_buffer *vbuffer, unsigned *num_vbuffers)
 {
    struct gl_context *ctx = st->ctx;
 
    setup_arrays<POPCNT_NO, UPDATE_ALL>
       (st, ctx->Array._DrawVAO, vp->Base.DualSlotInputs,
-       vp_variant->vert_attrib_mask, _mesa_draw_nonzero_divisor_bits(ctx),
-       _mesa_draw_array_bits(ctx), _mesa_draw_user_array_bits(ctx),
-       velements, vbuffer, num_vbuffers, has_user_vertex_buffers);
+       vp_variant->vert_attrib_mask, _mesa_draw_array_bits(ctx),
+       velements, vbuffer, num_vbuffers);
 }
 
 /* ALWAYS_INLINE helps the compiler realize that most of the parameters are
@@ -309,19 +299,21 @@ st_update_array_templ(struct st_context *st)
    const struct st_common_variant *vp_variant = st->vp_variant;
    const GLbitfield inputs_read = vp_variant->vert_attrib_mask;
    const GLbitfield dual_slot_inputs = vp->Base.DualSlotInputs;
+   const GLbitfield userbuf_attribs = inputs_read & _mesa_draw_user_array_bits(ctx);
+   bool uses_user_vertex_buffers = userbuf_attribs != 0;
+
+   st->draw_needs_minmax_index =
+      (userbuf_attribs & ~_mesa_draw_nonzero_divisor_bits(ctx)) != 0;
 
    struct pipe_vertex_buffer vbuffer[PIPE_MAX_ATTRIBS];
    unsigned num_vbuffers = 0;
    struct cso_velems_state velements;
-   bool uses_user_vertex_buffers;
 
    /* ST_NEW_VERTEX_ARRAYS */
    /* Setup arrays */
    setup_arrays<POPCNT, UPDATE>
-      (st, ctx->Array._DrawVAO, dual_slot_inputs,
-       inputs_read, _mesa_draw_nonzero_divisor_bits(ctx),
-       _mesa_draw_array_bits(ctx), _mesa_draw_user_array_bits(ctx),
-       &velements, vbuffer, &num_vbuffers, &uses_user_vertex_buffers);
+      (st, ctx->Array._DrawVAO, dual_slot_inputs, inputs_read,
+       _mesa_draw_array_bits(ctx), &velements, vbuffer, &num_vbuffers);
 
    /* _NEW_CURRENT_ATTRIB */
    /* Setup zero-stride attribs. */
@@ -399,13 +391,11 @@ st_create_gallium_vertex_state(struct gl_context *ctx,
    struct pipe_vertex_buffer vbuffer[PIPE_MAX_ATTRIBS];
    unsigned num_vbuffers = 0;
    struct cso_velems_state velements;
-   bool uses_user_vertex_buffers;
 
-   setup_arrays<POPCNT_NO, UPDATE_ALL>(st, vao, dual_slot_inputs, inputs_read, 0,
-                                inputs_read, 0, &velements, vbuffer, &num_vbuffers,
-                                &uses_user_vertex_buffers);
+   setup_arrays<POPCNT_NO, UPDATE_ALL>(st, vao, dual_slot_inputs, inputs_read,
+                                inputs_read, &velements, vbuffer, &num_vbuffers);
 
-   if (num_vbuffers != 1 || uses_user_vertex_buffers) {
+   if (num_vbuffers != 1) {
       assert(!"this should never happen with display lists");
       return NULL;
    }
diff --git a/src/mesa/state_tracker/st_draw_feedback.c b/src/mesa/state_tracker/st_draw_feedback.c
index ebadabf9503c..fe90336fcda3 100644
--- a/src/mesa/state_tracker/st_draw_feedback.c
+++ b/src/mesa/state_tracker/st_draw_feedback.c
@@ -148,9 +148,7 @@ st_feedback_draw_vbo(struct gl_context *ctx,
 
    /* Must setup these after state validation! */
    /* Setup arrays */
-   bool uses_user_vertex_buffers;
-   st_setup_arrays(st, vp, vp_variant, &velements, vbuffers, &num_vbuffers,
-                   &uses_user_vertex_buffers);
+   st_setup_arrays(st, vp, vp_variant, &velements, vbuffers, &num_vbuffers);
    /* Setup current values as userspace arrays */
    st_setup_current_user(st, vp, vp_variant, &velements, vbuffers, &num_vbuffers);
 
-- 
GitLab


From 1c4d2c93f80614066da9c8c074e10accaeab6f46 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Mon, 7 Nov 2022 19:33:32 -0500
Subject: [PATCH 5/8] mesa: add more cases to the gallium vertex_formats table

The way we convert gltype to the index changed to handle more enums.
The reason why (gltype & 0x3f) works is because of how the enums are
defined.

Also change the type to uint8_t. We only need the low 7 bits of
the pipe format enum.
---
 src/mesa/main/varray.c | 133 ++++++++++++++++++++++++++++++++++-------
 1 file changed, 111 insertions(+), 22 deletions(-)

diff --git a/src/mesa/main/varray.c b/src/mesa/main/varray.c
index 2fa12a9e9bd8..8ea0c41bf676 100644
--- a/src/mesa/main/varray.c
+++ b/src/mesa/main/varray.c
@@ -289,8 +289,8 @@ vertex_binding_divisor(struct gl_context *ctx,
    }
 }
 
-/* vertex_formats[gltype - GL_BYTE][integer*2 + normalized][size - 1] */
-static const uint16_t vertex_formats[][4][4] = {
+/* vertex_formats[gltype & 0x3f][integer*2 + normalized][size - 1] */
+static const uint8_t vertex_formats[][4][4] = {
    { /* GL_BYTE */
       {
          PIPE_FORMAT_R8_SSCALED,
@@ -470,6 +470,105 @@ static const uint16_t vertex_formats[][4][4] = {
          PIPE_FORMAT_R32G32B32A32_FIXED
       },
    },
+   {{0}}, /* unused (13) */
+   {{0}}, /* unused (14) */
+   {{0}}, /* unused (15) */
+   {{0}}, /* unused (16) */
+   {{0}}, /* unused (17) */
+   {{0}}, /* unused (18) */
+   {{0}}, /* unused (19) */
+   {{0}}, /* unused (20) */
+   {{0}}, /* unused (21) */
+   {{0}}, /* unused (22) */
+   {{0}}, /* unused (23) */
+   {{0}}, /* unused (24) */
+   {{0}}, /* unused (25) */
+   {{0}}, /* unused (26) */
+   {{0}}, /* unused (27) */
+   {{0}}, /* unused (28) */
+   {{0}}, /* unused (29) */
+   {{0}}, /* unused (30) */
+   { /* GL_INT_2_10_10_10_REV */
+      {
+         0,
+         0,
+         0,
+         PIPE_FORMAT_R10G10B10A2_SSCALED
+      },
+      {
+         0,
+         0,
+         0,
+         PIPE_FORMAT_R10G10B10A2_SNORM
+      },
+   },
+   {{0}}, /* unused (32) */
+   { /* GL_HALF_FLOAT_OES */
+      {
+         PIPE_FORMAT_R16_FLOAT,
+         PIPE_FORMAT_R16G16_FLOAT,
+         PIPE_FORMAT_R16G16B16_FLOAT,
+         PIPE_FORMAT_R16G16B16A16_FLOAT
+      },
+      {
+         PIPE_FORMAT_R16_FLOAT,
+         PIPE_FORMAT_R16G16_FLOAT,
+         PIPE_FORMAT_R16G16B16_FLOAT,
+         PIPE_FORMAT_R16G16B16A16_FLOAT
+      },
+   },
+   {{0}}, /* unused (34) */
+   {{0}}, /* unused (35) */
+   {{0}}, /* unused (36) */
+   {{0}}, /* unused (37) */
+   {{0}}, /* unused (38) */
+   {{0}}, /* unused (39) */
+   { /* GL_UNSIGNED_INT_2_10_10_10_REV */
+      {
+         0,
+         0,
+         0,
+         PIPE_FORMAT_R10G10B10A2_USCALED
+      },
+      {
+         0,
+         0,
+         0,
+         PIPE_FORMAT_R10G10B10A2_UNORM
+      },
+   },
+   {{0}}, /* unused (41) */
+   {{0}}, /* unused (42) */
+   {{0}}, /* unused (43) */
+   {{0}}, /* unused (44) */
+   {{0}}, /* unused (45) */
+   {{0}}, /* unused (46) */
+   {{0}}, /* unused (47) */
+   {{0}}, /* unused (48) */
+   {{0}}, /* unused (49) */
+   {{0}}, /* unused (50) */
+   {{0}}, /* unused (51) */
+   {{0}}, /* unused (52) */
+   {{0}}, /* unused (53) */
+   {{0}}, /* unused (54) */
+   {{0}}, /* unused (55) */
+   {{0}}, /* unused (56) */
+   {{0}}, /* unused (57) */
+   {{0}}, /* unused (58) */
+   { /* GL_UNSIGNED_INT_10F_11F_11F_REV */
+      {
+         0,
+         0,
+         PIPE_FORMAT_R11G11B10_FLOAT,
+         0
+      },
+      {
+         0,
+         0,
+         PIPE_FORMAT_R11G11B10_FLOAT,
+         0
+      },
+   },
 };
 
 /**
@@ -487,10 +586,6 @@ vertex_format_to_pipe_format(GLubyte size, GLenum16 type, GLenum16 format,
       return PIPE_FORMAT_R64_UINT + size - 1;
 
    switch (type) {
-   case GL_HALF_FLOAT_OES:
-      type = GL_HALF_FLOAT;
-      break;
-
    case GL_INT_2_10_10_10_REV:
       assert(size == 4 && !integer);
 
@@ -499,11 +594,6 @@ vertex_format_to_pipe_format(GLubyte size, GLenum16 type, GLenum16 format,
             return PIPE_FORMAT_B10G10R10A2_SNORM;
          else
             return PIPE_FORMAT_B10G10R10A2_SSCALED;
-      } else {
-         if (normalized)
-            return PIPE_FORMAT_R10G10B10A2_SNORM;
-         else
-            return PIPE_FORMAT_R10G10B10A2_SSCALED;
       }
       break;
 
@@ -515,18 +605,9 @@ vertex_format_to_pipe_format(GLubyte size, GLenum16 type, GLenum16 format,
             return PIPE_FORMAT_B10G10R10A2_UNORM;
          else
             return PIPE_FORMAT_B10G10R10A2_USCALED;
-      } else {
-         if (normalized)
-            return PIPE_FORMAT_R10G10B10A2_UNORM;
-         else
-            return PIPE_FORMAT_R10G10B10A2_USCALED;
       }
       break;
 
-   case GL_UNSIGNED_INT_10F_11F_11F_REV:
-      assert(size == 3 && !integer && format == GL_RGBA);
-      return PIPE_FORMAT_R11G11B10_FLOAT;
-
    case GL_UNSIGNED_BYTE:
       if (format == GL_BGRA) {
          /* this is an odd-ball case */
@@ -538,8 +619,16 @@ vertex_format_to_pipe_format(GLubyte size, GLenum16 type, GLenum16 format,
 
    unsigned index = integer*2 + normalized;
    assert(index <= 2);
-   assert(type >= GL_BYTE && type <= GL_FIXED);
-   return vertex_formats[type - GL_BYTE][index][size-1];
+   assert((type >= GL_BYTE && type <= GL_FIXED) ||
+          type == GL_HALF_FLOAT_OES ||
+          type == GL_INT_2_10_10_10_REV ||
+          type == GL_UNSIGNED_INT_2_10_10_10_REV ||
+          type == GL_UNSIGNED_INT_10F_11F_11F_REV);
+
+   enum pipe_format pipe_format =
+      vertex_formats[type & 0x3f][index][size-1];
+   assert(pipe_format);
+   return pipe_format;
 }
 
 void
-- 
GitLab


From caa8149eecee354c877e39470a2f465546a3ec1d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Mon, 7 Nov 2022 19:55:20 -0500
Subject: [PATCH 6/8] mesa: add a format table for GL_BGRA vertex format
 translation too

---
 src/mesa/main/varray.c | 55 ++++++++++++++++++++----------------------
 1 file changed, 26 insertions(+), 29 deletions(-)

diff --git a/src/mesa/main/varray.c b/src/mesa/main/varray.c
index 8ea0c41bf676..0806008be344 100644
--- a/src/mesa/main/varray.c
+++ b/src/mesa/main/varray.c
@@ -571,6 +571,23 @@ static const uint8_t vertex_formats[][4][4] = {
    },
 };
 
+/* bgra_vertex_formats[type & 0x3][normalized] */
+static const uint8_t bgra_vertex_formats[4][2] = {
+   { /* GL_UNSIGNED_INT_2_10_10_10_REV */
+      PIPE_FORMAT_B10G10R10A2_USCALED,
+      PIPE_FORMAT_B10G10R10A2_UNORM
+   },
+   { /* GL_UNSIGNED_BYTE */
+      0,
+      PIPE_FORMAT_B8G8R8A8_UNORM
+   },
+   {0}, /* unused (2) */
+   { /* GL_INT_2_10_10_10_REV */
+      PIPE_FORMAT_B10G10R10A2_SSCALED,
+      PIPE_FORMAT_B10G10R10A2_SNORM
+   }
+};
+
 /**
  * Return a PIPE_FORMAT_x for the given GL datatype and size.
  */
@@ -585,36 +602,16 @@ vertex_format_to_pipe_format(GLubyte size, GLenum16 type, GLenum16 format,
    if (doubles)
       return PIPE_FORMAT_R64_UINT + size - 1;
 
-   switch (type) {
-   case GL_INT_2_10_10_10_REV:
-      assert(size == 4 && !integer);
-
-      if (format == GL_BGRA) {
-         if (normalized)
-            return PIPE_FORMAT_B10G10R10A2_SNORM;
-         else
-            return PIPE_FORMAT_B10G10R10A2_SSCALED;
-      }
-      break;
-
-   case GL_UNSIGNED_INT_2_10_10_10_REV:
+   if (format == GL_BGRA) {
       assert(size == 4 && !integer);
-
-      if (format == GL_BGRA) {
-         if (normalized)
-            return PIPE_FORMAT_B10G10R10A2_UNORM;
-         else
-            return PIPE_FORMAT_B10G10R10A2_USCALED;
-      }
-      break;
-
-   case GL_UNSIGNED_BYTE:
-      if (format == GL_BGRA) {
-         /* this is an odd-ball case */
-         assert(normalized);
-         return PIPE_FORMAT_B8G8R8A8_UNORM;
-      }
-      break;
+      assert(type == GL_UNSIGNED_BYTE ||
+             type == GL_INT_2_10_10_10_REV ||
+             type == GL_UNSIGNED_INT_2_10_10_10_REV);
+
+      enum pipe_format pipe_format =
+         bgra_vertex_formats[type & 0x3][normalized];
+      assert(pipe_format);
+      return pipe_format;
    }
 
    unsigned index = integer*2 + normalized;
-- 
GitLab


From ad43022916307131c18709500e91d6dcb9885e43 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Mon, 7 Nov 2022 20:10:38 -0500
Subject: [PATCH 7/8] mesa: use the format table for double attrib format
 translation too

---
 src/mesa/main/varray.c | 31 ++++++++++++++++++++++---------
 1 file changed, 22 insertions(+), 9 deletions(-)

diff --git a/src/mesa/main/varray.c b/src/mesa/main/varray.c
index 0806008be344..201d93f23b3b 100644
--- a/src/mesa/main/varray.c
+++ b/src/mesa/main/varray.c
@@ -289,7 +289,7 @@ vertex_binding_divisor(struct gl_context *ctx,
    }
 }
 
-/* vertex_formats[gltype & 0x3f][integer*2 + normalized][size - 1] */
+/* vertex_formats[(gltype & 0x3f) | (double << 5)][integer*2 + normalized][size - 1] */
 static const uint8_t vertex_formats[][4][4] = {
    { /* GL_BYTE */
       {
@@ -538,12 +538,28 @@ static const uint8_t vertex_formats[][4][4] = {
       },
    },
    {{0}}, /* unused (41) */
-   {{0}}, /* unused (42) */
+   { /* GL_DOUBLE | (doubles << 5) (real double) */
+     {
+        PIPE_FORMAT_R64_UINT,
+        PIPE_FORMAT_R64G64_UINT,
+        PIPE_FORMAT_R64G64B64_UINT,
+        PIPE_FORMAT_R64G64B64A64_UINT,
+     },
+   },
    {{0}}, /* unused (43) */
    {{0}}, /* unused (44) */
    {{0}}, /* unused (45) */
    {{0}}, /* unused (46) */
-   {{0}}, /* unused (47) */
+   { /* GL_UNSIGNED_INT64_ARB | (doubles << 5) (doubles is always true) */
+     {0},
+     {0},
+     {
+        PIPE_FORMAT_R64_UINT,
+        PIPE_FORMAT_R64G64_UINT,
+        PIPE_FORMAT_R64G64B64_UINT,
+        PIPE_FORMAT_R64G64B64A64_UINT,
+     },
+   },
    {{0}}, /* unused (48) */
    {{0}}, /* unused (49) */
    {{0}}, /* unused (50) */
@@ -598,10 +614,6 @@ vertex_format_to_pipe_format(GLubyte size, GLenum16 type, GLenum16 format,
    assert(size >= 1 && size <= 4);
    assert(format == GL_RGBA || format == GL_BGRA);
 
-   /* Raw doubles use 64_UINT. */
-   if (doubles)
-      return PIPE_FORMAT_R64_UINT + size - 1;
-
    if (format == GL_BGRA) {
       assert(size == 4 && !integer);
       assert(type == GL_UNSIGNED_BYTE ||
@@ -620,10 +632,11 @@ vertex_format_to_pipe_format(GLubyte size, GLenum16 type, GLenum16 format,
           type == GL_HALF_FLOAT_OES ||
           type == GL_INT_2_10_10_10_REV ||
           type == GL_UNSIGNED_INT_2_10_10_10_REV ||
-          type == GL_UNSIGNED_INT_10F_11F_11F_REV);
+          type == GL_UNSIGNED_INT_10F_11F_11F_REV ||
+          (type == GL_UNSIGNED_INT64_ARB && doubles));
 
    enum pipe_format pipe_format =
-      vertex_formats[type & 0x3f][index][size-1];
+      vertex_formats[(type & 0x3f) | ((int)doubles << 5)][index][size-1];
    assert(pipe_format);
    return pipe_format;
 }
-- 
GitLab


From 3148eb18885bcddfc5243c0f303cd31e2ec68d0d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Tue, 18 Oct 2022 01:37:10 -0400
Subject: [PATCH 8/8] mesa: fix typos in gl_array_attrib comments

---
 src/mesa/main/mtypes.h | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/mesa/main/mtypes.h b/src/mesa/main/mtypes.h
index 6bd289476ab0..3bd33366f9a6 100644
--- a/src/mesa/main/mtypes.h
+++ b/src/mesa/main/mtypes.h
@@ -1759,8 +1759,8 @@ struct gl_array_attrib
     * The VERT_BIT_* bits effectively enabled from the current _DrawVAO.
     * This is always a subset of _mesa_get_vao_vp_inputs(_DrawVAO)
     * but may omit those arrays that shall not be referenced by the current
-    * gl_vertex_program_state::_VPMode. For example the generic attributes are
-    * maked out form the _DrawVAO's enabled arrays when a fixed function
+    * gl_vertex_program_state::_VPMode. For example, the generic attributes are
+    * masked out from the _DrawVAO's enabled arrays when a fixed function
     * array draw is executed.
     */
    GLbitfield _DrawVAOEnabledAttribs;
-- 
GitLab

