From 71cba85706c9cb7d0f7304ed9e722c29300ac1e2 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Fri, 3 Jan 2025 11:29:39 -0500
Subject: [PATCH 1/3] radeonsi: fix a perf regression due to slow reply from
 GEM_WAIT_IDLE for timeout=0

It sometimes takes 1 ms to return with timeout=0, which is unacceptable.

Fixes: 4194774edf5 - radeonsi: move barriers out of si_launch_grid_internal_ssbos
---
 src/gallium/drivers/radeonsi/si_barrier.c  |  2 +-
 src/gallium/include/winsys/radeon_winsys.h | 14 +++++++++++++-
 src/gallium/winsys/amdgpu/drm/amdgpu_bo.c  |  6 ++++++
 3 files changed, 20 insertions(+), 2 deletions(-)

diff --git a/src/gallium/drivers/radeonsi/si_barrier.c b/src/gallium/drivers/radeonsi/si_barrier.c
index 7186de80ded8a..4951fd84b8326 100644
--- a/src/gallium/drivers/radeonsi/si_barrier.c
+++ b/src/gallium/drivers/radeonsi/si_barrier.c
@@ -497,7 +497,7 @@ static bool si_is_buffer_idle(struct si_context *sctx, struct si_resource *buf,
                               unsigned usage)
 {
    return !si_cs_is_buffer_referenced(sctx, buf->buf, usage) &&
-          sctx->ws->buffer_wait(sctx->ws, buf->buf, 0, usage);
+          sctx->ws->buffer_wait(sctx->ws, buf->buf, 0, usage | RADEON_USAGE_DISALLOW_SLOW_REPLY);
 }
 
 void si_barrier_before_internal_op(struct si_context *sctx, unsigned flags,
diff --git a/src/gallium/include/winsys/radeon_winsys.h b/src/gallium/include/winsys/radeon_winsys.h
index cf9345cf9669a..fe81edecdefe5 100644
--- a/src/gallium/include/winsys/radeon_winsys.h
+++ b/src/gallium/include/winsys/radeon_winsys.h
@@ -188,7 +188,12 @@ enum radeon_ctx_pstate
 #define RADEON_PRIO_SHADER_RINGS (1 << 22)
 #define RADEON_PRIO_SCRATCH_BUFFER (1 << 23)
 
-#define RADEON_ALL_PRIORITIES (RADEON_USAGE_READ - 1)
+#define RADEON_ALL_PRIORITIES    BITFIELD_MASK(24)
+
+/* When passed to radeon_winsys::buffer_wait, it disallows using the DRM ioctl for timeout=0
+ * queries because it can take ~1 ms to return, reducing FPS.
+ */
+#define RADEON_USAGE_DISALLOW_SLOW_REPLY (1 << 26)
 
 /* Upper bits of priorities are used by usage flags. */
 #define RADEON_USAGE_READ (1 << 27)
@@ -375,6 +380,13 @@ struct radeon_winsys {
     * The timeout of 0 will only return the status.
     * The timeout of OS_TIMEOUT_INFINITE will always wait until the buffer
     * is idle.
+    *
+    * usage is RADEON_USAGE_READ/WRITE.
+    *
+    * Checking whether a buffer is idle using timeout=0 can take 1 ms even if the DRM ioctl is
+    * used, reducing our FPS to several hundreds. To prevent that, set
+    * RADEON_USAGE_DISALLOW_SLOW_REPLY, which will return busy. This is a workaround for kernel
+    * inefficiency.
     */
    bool (*buffer_wait)(struct radeon_winsys *ws, struct pb_buffer_lean *buf,
                        uint64_t timeout, unsigned usage);
diff --git a/src/gallium/winsys/amdgpu/drm/amdgpu_bo.c b/src/gallium/winsys/amdgpu/drm/amdgpu_bo.c
index 5a24ea85bc42e..373f3c330f23d 100644
--- a/src/gallium/winsys/amdgpu/drm/amdgpu_bo.c
+++ b/src/gallium/winsys/amdgpu/drm/amdgpu_bo.c
@@ -103,6 +103,12 @@ static bool amdgpu_bo_wait(struct radeon_winsys *rws,
       bool buffer_busy = true;
       int r;
 
+      /* The GEM_WAIT_IDLE ioctl with timeout=0 can take up to 1 ms to return. This is a kernel
+       * inefficiency. This flag indicates whether it's better to return busy than wait for 1 ms.
+       */
+      if (timeout == 0 && usage & RADEON_USAGE_DISALLOW_SLOW_REPLY)
+         return false;
+
       r = ac_drm_bo_wait_for_idle(aws->fd, get_real_bo(bo)->kms_handle, timeout, &buffer_busy);
       if (r)
          fprintf(stderr, "%s: amdgpu_bo_wait_for_idle failed %i\n", __func__, r);
-- 
GitLab


From def50402ad09a032573fa1d8e1fe7b9a6b0089f8 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Fri, 3 Jan 2025 11:42:26 -0500
Subject: [PATCH 2/3] radeonsi: always use RADEON_USAGE_DISALLOW_SLOW_REPLY

All places are fine with getting a false negative as long as buffer_wait
returns quickly. This can improve performance.
---
 src/gallium/drivers/radeonsi/gfx11_query.c | 3 ++-
 src/gallium/drivers/radeonsi/si_buffer.c   | 6 ++++--
 src/gallium/drivers/radeonsi/si_pipe.c     | 3 ++-
 src/gallium/drivers/radeonsi/si_query.c    | 3 ++-
 src/gallium/drivers/radeonsi/si_texture.c  | 3 ++-
 5 files changed, 12 insertions(+), 6 deletions(-)

diff --git a/src/gallium/drivers/radeonsi/gfx11_query.c b/src/gallium/drivers/radeonsi/gfx11_query.c
index b94ed6af5aa85..62b304d92d2ce 100644
--- a/src/gallium/drivers/radeonsi/gfx11_query.c
+++ b/src/gallium/drivers/radeonsi/gfx11_query.c
@@ -62,7 +62,8 @@ static bool gfx11_alloc_query_buffer(struct si_context *sctx)
       qbuf = list_first_entry(&sctx->shader_query_buffers, struct gfx11_sh_query_buffer, list);
       if (!qbuf->refcount &&
           !si_cs_is_buffer_referenced(sctx, qbuf->buf->buf, RADEON_USAGE_READWRITE) &&
-          sctx->ws->buffer_wait(sctx->ws, qbuf->buf->buf, 0, RADEON_USAGE_READWRITE)) {
+          sctx->ws->buffer_wait(sctx->ws, qbuf->buf->buf, 0,
+                                RADEON_USAGE_READWRITE | RADEON_USAGE_DISALLOW_SLOW_REPLY)) {
          /* Can immediately re-use the oldest buffer */
          list_del(&qbuf->list);
       } else {
diff --git a/src/gallium/drivers/radeonsi/si_buffer.c b/src/gallium/drivers/radeonsi/si_buffer.c
index 2b661dc58aac4..c41c4be114752 100644
--- a/src/gallium/drivers/radeonsi/si_buffer.c
+++ b/src/gallium/drivers/radeonsi/si_buffer.c
@@ -256,7 +256,8 @@ static bool si_invalidate_buffer(struct si_context *sctx, struct si_resource *bu
 
    /* Check if mapping this buffer would cause waiting for the GPU. */
    if (si_cs_is_buffer_referenced(sctx, buf->buf, RADEON_USAGE_READWRITE) ||
-       !sctx->ws->buffer_wait(sctx->ws, buf->buf, 0, RADEON_USAGE_READWRITE)) {
+       !sctx->ws->buffer_wait(sctx->ws, buf->buf, 0,
+                              RADEON_USAGE_READWRITE | RADEON_USAGE_DISALLOW_SLOW_REPLY)) {
       /* Reallocate the buffer in the same pipe_resource. */
       si_alloc_resource(sctx->screen, buf);
       si_rebind_buffer(sctx, &buf->b.b);
@@ -399,7 +400,8 @@ static void *si_buffer_transfer_map(struct pipe_context *ctx, struct pipe_resour
       if (buf->flags & (RADEON_FLAG_SPARSE | RADEON_FLAG_NO_CPU_ACCESS) ||
           force_discard_range ||
           si_cs_is_buffer_referenced(sctx, buf->buf, RADEON_USAGE_READWRITE) ||
-          !sctx->ws->buffer_wait(sctx->ws, buf->buf, 0, RADEON_USAGE_READWRITE)) {
+          !sctx->ws->buffer_wait(sctx->ws, buf->buf, 0,
+                                 RADEON_USAGE_READWRITE | RADEON_USAGE_DISALLOW_SLOW_REPLY)) {
          /* Do a wait-free write-only transfer using a temporary buffer. */
          struct u_upload_mgr *uploader;
          struct si_resource *staging = NULL;
diff --git a/src/gallium/drivers/radeonsi/si_pipe.c b/src/gallium/drivers/radeonsi/si_pipe.c
index 3ace56464d918..13673399c22cf 100644
--- a/src/gallium/drivers/radeonsi/si_pipe.c
+++ b/src/gallium/drivers/radeonsi/si_pipe.c
@@ -908,7 +908,8 @@ static bool si_is_resource_busy(struct pipe_screen *screen, struct pipe_resource
                            /* If mapping for write, we need to wait for all reads and writes.
                             * If mapping for read, we only need to wait for writes.
                             */
-                           usage & PIPE_MAP_WRITE ? RADEON_USAGE_READWRITE : RADEON_USAGE_WRITE);
+                           (usage & PIPE_MAP_WRITE ? RADEON_USAGE_READWRITE : RADEON_USAGE_WRITE) |
+                           RADEON_USAGE_DISALLOW_SLOW_REPLY);
 }
 
 static struct pipe_context *si_pipe_create_context(struct pipe_screen *screen, void *priv,
diff --git a/src/gallium/drivers/radeonsi/si_query.c b/src/gallium/drivers/radeonsi/si_query.c
index d69ba929071d1..4a48b72383c3d 100644
--- a/src/gallium/drivers/radeonsi/si_query.c
+++ b/src/gallium/drivers/radeonsi/si_query.c
@@ -518,7 +518,8 @@ void si_query_buffer_reset(struct si_context *sctx, struct si_query_buffer *buff
 
    /* Discard even the oldest buffer if it can't be mapped without a stall. */
    if (si_cs_is_buffer_referenced(sctx, buffer->buf->buf, RADEON_USAGE_READWRITE) ||
-       !sctx->ws->buffer_wait(sctx->ws, buffer->buf->buf, 0, RADEON_USAGE_READWRITE)) {
+       !sctx->ws->buffer_wait(sctx->ws, buffer->buf->buf, 0,
+                              RADEON_USAGE_READWRITE | RADEON_USAGE_DISALLOW_SLOW_REPLY)) {
       si_resource_reference(&buffer->buf, NULL);
    }
 }
diff --git a/src/gallium/drivers/radeonsi/si_texture.c b/src/gallium/drivers/radeonsi/si_texture.c
index a00e46c8521a2..57c3390982a31 100644
--- a/src/gallium/drivers/radeonsi/si_texture.c
+++ b/src/gallium/drivers/radeonsi/si_texture.c
@@ -2074,7 +2074,8 @@ static void *si_texture_transfer_map(struct pipe_context *ctx, struct pipe_resou
             tex->buffer.domains & RADEON_DOMAIN_VRAM || tex->buffer.flags & RADEON_FLAG_GTT_WC;
       /* Write & linear only: */
       else if (si_cs_is_buffer_referenced(sctx, tex->buffer.buf, RADEON_USAGE_READWRITE) ||
-               !sctx->ws->buffer_wait(sctx->ws, tex->buffer.buf, 0, RADEON_USAGE_READWRITE)) {
+               !sctx->ws->buffer_wait(sctx->ws, tex->buffer.buf, 0,
+                                      RADEON_USAGE_READWRITE | RADEON_USAGE_DISALLOW_SLOW_REPLY)) {
          /* It's busy. */
          if (si_can_invalidate_texture(sctx->screen, tex, usage, box))
             si_texture_invalidate_storage(sctx, tex);
-- 
GitLab


From c63b6c97fad9ac3d3ebafad32cd31f7c95207a46 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Thu, 26 Dec 2024 06:09:50 -0500
Subject: [PATCH 3/3] ac: update ATOMIC_MEM definitions

---
 src/amd/common/ac_sqtt.c |  2 +-
 src/amd/common/sid.h     | 14 ++++++++++----
 2 files changed, 11 insertions(+), 5 deletions(-)

diff --git a/src/amd/common/ac_sqtt.c b/src/amd/common/ac_sqtt.c
index 83982ba2eca54..4349c856d61c9 100644
--- a/src/amd/common/ac_sqtt.c
+++ b/src/amd/common/ac_sqtt.c
@@ -544,7 +544,7 @@ ac_sqtt_copy_info_regs(const struct radeon_info *info, struct ac_pm4_state *pm4,
       uint32_t init_wptr_value = shifted_data_va & 0x1fffffff;
 
       ac_pm4_cmd_add(pm4, PKT3(PKT3_ATOMIC_MEM, 7, 0));
-      ac_pm4_cmd_add(pm4, ATOMIC_OP(TC_OP_ATOMIC_SUB_32));
+      ac_pm4_cmd_add(pm4, ATOMIC_OP(TC_OP_ATOMIC_SUB_RTN_32));
       ac_pm4_cmd_add(pm4, info_va);         /* addr lo */
       ac_pm4_cmd_add(pm4, info_va >> 32);   /* addr hi */
       ac_pm4_cmd_add(pm4, init_wptr_value); /* data lo */
diff --git a/src/amd/common/sid.h b/src/amd/common/sid.h
index 62177e853e91a..4249dfb9bef46 100644
--- a/src/amd/common/sid.h
+++ b/src/amd/common/sid.h
@@ -45,11 +45,17 @@
 #define PKT3_DISPATCH_INDIRECT                     0x16
 #define PKT3_ATOMIC_MEM                            0x1E
 #define   ATOMIC_OP(x)                                ((unsigned)((x)&0x7f) << 0)
-#define     TC_OP_ATOMIC_SUB_32                       0x10
-#define     TC_OP_ATOMIC_CMPSWAP_32                   0x48
+#define     TC_OP_ATOMIC_SUB_RTN_32                   16
+#define     TC_OP_ATOMIC_SUB_RTN_64                   48
+#define     TC_OP_ATOMIC_CMPSWAP_32                   72
+#define     TC_OP_ATOMIC_SUB_64                       112
+#define     TC_OP_ATOMIC_XOR_64                       119
 #define   ATOMIC_COMMAND(x)                           ((unsigned)((x)&0x3) << 8)
-#define   ATOMIC_COMMAND_SINGLE_PASS                  0x0
-#define   ATOMIC_COMMAND_LOOP                         0x1
+#define   ATOMIC_COMMAND_SEND_RTN                     0x0 /* only RTN opcodes */
+#define   ATOMIC_COMMAND_LOOP                         0x1 /* only RTN opcodes */
+#define   ATOMIC_COMMAND_WR_CONFIRM                   0x2 /* only non-RTN opcodes */
+#define   ATOMIC_COMMAND_SEND_NO_RTN                  0x3 /* only non-RTN opcodes */
+#define   ATOMIC_ENGINE_PFP                           (1 << 30)
 #define PKT3_OCCLUSION_QUERY                       0x1F /* GFX7+ */
 #define PKT3_SET_PREDICATION                       0x20
 #define   PREDICATION_DRAW_NOT_VISIBLE                (0 << 8)
-- 
GitLab

