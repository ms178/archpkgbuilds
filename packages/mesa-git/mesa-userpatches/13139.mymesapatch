From a19b7296176f5aa8ba87c7fedf3cc949459a4671 Mon Sep 17 00:00:00 2001
From: Kostiantyn Lazukin <kostiantyn.lazukin@globallogic.com>
Date: Mon, 25 Oct 2021 19:05:44 +0300
Subject: [PATCH] state_tracker: remove unused program resources (inputs)
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Closes: https://gitlab.freedesktop.org/mesa/mesa/-/issues/807

Signed-off-by: Kostiantyn Lazukin <kostiantyn.lazukin@globallogic.com>

Reviewed-by: Tapani PÃ¤lli <tapani.palli@intel.com>
---
 src/amd/ci/radeonsi-raven-fails.txt           |   2 -
 src/amd/ci/radeonsi-stoney-fails.txt          |   2 -
 src/freedreno/ci/freedreno-a618-fails.txt     |   1 -
 src/freedreno/ci/freedreno-a630-fails.txt     |   1 -
 .../drivers/crocus/ci/crocus-hsw-fails.txt    |   3 -
 .../drivers/d3d12/ci/d3d12-quick_gl.txt       |   3 -
 .../drivers/llvmpipe/ci/llvmpipe-fails.txt    |   3 -
 .../drivers/radeonsi/ci/gfx10-navi10-fail.csv |   2 -
 .../drivers/radeonsi/ci/gfx9-raven-fail.csv   |   2 -
 .../drivers/radeonsi/ci/gfx9-vega20-fail.csv  |   2 -
 .../drivers/softpipe/ci/softpipe-fails.txt    |   3 -
 .../drivers/zink/ci/zink-lvp-fails.txt        |   2 -
 src/intel/ci/iris-kbl-fails.txt               |   4 -
 src/mesa/state_tracker/st_glsl_to_nir.cpp     | 111 +++++++++++++
 src/mesa/state_tracker/st_nir.h               |   4 +
 src/mesa/state_tracker/tests/meson.build      |  14 ++
 .../tests/test_is_variable_used.cpp           | 152 ++++++++++++++++++
 17 files changed, 281 insertions(+), 30 deletions(-)
 create mode 100644 src/mesa/state_tracker/tests/test_is_variable_used.cpp

diff --git a/src/amd/ci/radeonsi-raven-fails.txt b/src/amd/ci/radeonsi-raven-fails.txt
index 9049f6f914cc3..885024d871272 100644
--- a/src/amd/ci/radeonsi-raven-fails.txt
+++ b/src/amd/ci/radeonsi-raven-fails.txt
@@ -72,8 +72,6 @@ spec@arb_gpu_shader_fp64@execution@conversion@vert-conversion-explicit-double-fl
 spec@arb_gpu_shader_fp64@execution@conversion@vert-conversion-explicit-dvec2-vec2,Fail
 spec@arb_gpu_shader_fp64@execution@conversion@vert-conversion-explicit-dvec3-vec3,Fail
 spec@arb_gpu_shader_fp64@execution@conversion@vert-conversion-explicit-dvec4-vec4,Fail
-spec@arb_program_interface_query@arb_program_interface_query-getprogramresourceindex,Fail
-spec@arb_program_interface_query@arb_program_interface_query-getprogramresourceindex@'vs_input2[1][0]' on GL_PROGRAM_INPUT,Fail
 spec@arb_shader_texture_lod@execution@arb_shader_texture_lod-texgradcube,Fail
 spec@arb_shading_language_packing@execution@built-in-functions@fs-packhalf2x16,Fail
 spec@arb_shading_language_packing@execution@built-in-functions@vs-packhalf2x16,Fail
diff --git a/src/amd/ci/radeonsi-stoney-fails.txt b/src/amd/ci/radeonsi-stoney-fails.txt
index c83cf4fb4273b..cc39a5a76bca3 100644
--- a/src/amd/ci/radeonsi-stoney-fails.txt
+++ b/src/amd/ci/radeonsi-stoney-fails.txt
@@ -77,8 +77,6 @@ spec@arb_gpu_shader_fp64@execution@conversion@vert-conversion-explicit-double-fl
 spec@arb_gpu_shader_fp64@execution@conversion@vert-conversion-explicit-dvec2-vec2,Fail
 spec@arb_gpu_shader_fp64@execution@conversion@vert-conversion-explicit-dvec3-vec3,Fail
 spec@arb_gpu_shader_fp64@execution@conversion@vert-conversion-explicit-dvec4-vec4,Fail
-spec@arb_program_interface_query@arb_program_interface_query-getprogramresourceindex,Fail
-spec@arb_program_interface_query@arb_program_interface_query-getprogramresourceindex@'vs_input2[1][0]' on GL_PROGRAM_INPUT,Fail
 spec@arb_shader_texture_lod@execution@arb_shader_texture_lod-texgradcube,Fail
 spec@arb_shading_language_packing@execution@built-in-functions@fs-packhalf2x16,Fail
 spec@arb_shading_language_packing@execution@built-in-functions@vs-packhalf2x16,Fail
diff --git a/src/freedreno/ci/freedreno-a618-fails.txt b/src/freedreno/ci/freedreno-a618-fails.txt
index c58de67178db7..9ac5b92404cf2 100644
--- a/src/freedreno/ci/freedreno-a618-fails.txt
+++ b/src/freedreno/ci/freedreno-a618-fails.txt
@@ -65,7 +65,6 @@ spec@arb_depth_buffer_float@fbo-generatemipmap-formats@GL_DEPTH_COMPONENT32F NPO
 spec@arb_occlusion_query@occlusion_query_order,Fail
 spec@arb_point_sprite@arb_point_sprite-interactions 1.0,Fail
 spec@arb_program_interface_query@arb_program_interface_query-getprogramresourceindex,Fail
-spec@arb_program_interface_query@arb_program_interface_query-getprogramresourceindex@'vs_input2[1][0]' on GL_PROGRAM_INPUT,Fail
 spec@arb_program_interface_query@arb_program_interface_query-getprogramresourceindex@'vs_input2' on GL_PROGRAM_INPUT,Fail
 spec@arb_sample_shading@samplemask 2@0.500000 mask_in_one,Fail
 spec@arb_sample_shading@samplemask 2@1.000000 mask_in_one,Fail
diff --git a/src/freedreno/ci/freedreno-a630-fails.txt b/src/freedreno/ci/freedreno-a630-fails.txt
index a8786664b3709..af29a464a25d5 100644
--- a/src/freedreno/ci/freedreno-a630-fails.txt
+++ b/src/freedreno/ci/freedreno-a630-fails.txt
@@ -68,7 +68,6 @@ spec@arb_depth_buffer_float@fbo-generatemipmap-formats@GL_DEPTH_COMPONENT32F NPO
 spec@arb_occlusion_query@occlusion_query_order,Fail
 spec@arb_point_sprite@arb_point_sprite-interactions 1.0,Fail
 spec@arb_program_interface_query@arb_program_interface_query-getprogramresourceindex,Fail
-spec@arb_program_interface_query@arb_program_interface_query-getprogramresourceindex@'vs_input2[1][0]' on GL_PROGRAM_INPUT,Fail
 spec@arb_program_interface_query@arb_program_interface_query-getprogramresourceindex@'vs_input2' on GL_PROGRAM_INPUT,Fail
 spec@arb_sample_shading@samplemask 2@0.500000 mask_in_one,Fail
 spec@arb_sample_shading@samplemask 2@1.000000 mask_in_one,Fail
diff --git a/src/gallium/drivers/crocus/ci/crocus-hsw-fails.txt b/src/gallium/drivers/crocus/ci/crocus-hsw-fails.txt
index 21803984be026..d578add3562d3 100644
--- a/src/gallium/drivers/crocus/ci/crocus-hsw-fails.txt
+++ b/src/gallium/drivers/crocus/ci/crocus-hsw-fails.txt
@@ -30,9 +30,6 @@ spec@arb_indirect_parameters@conditional-render@Query result: Pass. Inverted mod
 spec@arb_indirect_parameters@conditional-render@Query result: Fail. Inverted mode: Yes.  Points drawn: 0,Fail
 spec@arb_indirect_parameters@conditional-render@Query result: Pass. Inverted mode: No.  Points drawn: 0,Fail
 
-spec@arb_program_interface_query@arb_program_interface_query-getprogramresourceindex,Fail
-spec@arb_program_interface_query@arb_program_interface_query-getprogramresourceindex@'vs_input2[1][0]' on GL_PROGRAM_INPUT,Fail
-
 spec@arb_query_buffer_object@qbo,Fail
 spec@arb_query_buffer_object@qbo@query-GL_TIMESTAMP-ASYNC_CPU_READ_BEFORE-GL_INT,Fail
 spec@arb_query_buffer_object@qbo@query-GL_TIMESTAMP-ASYNC_CPU_READ_BEFORE-GL_UNSIGNED_INT,Fail
diff --git a/src/gallium/drivers/d3d12/ci/d3d12-quick_gl.txt b/src/gallium/drivers/d3d12/ci/d3d12-quick_gl.txt
index 6e4247185b5f0..0f6d0e93e1761 100644
--- a/src/gallium/drivers/d3d12/ci/d3d12-quick_gl.txt
+++ b/src/gallium/drivers/d3d12/ci/d3d12-quick_gl.txt
@@ -35,9 +35,6 @@ spec@arb_draw_indirect@arb_draw_indirect-api-errors,Crash
 spec@arb_framebuffer_object@fbo-blit-scaled-linear,Fail
 spec@arb_get_program_binary@restore-sso-program,Fail
 spec@arb_point_sprite@arb_point_sprite-mipmap,Fail
-spec@arb_program_interface_query@arb_program_interface_query-getprogramresourceindex,Fail
-spec@arb_program_interface_query@arb_program_interface_query-getprogramresourceindex@'vs_input2' on GL_PROGRAM_INPUT,Fail
-spec@arb_program_interface_query@arb_program_interface_query-getprogramresourceindex@'vs_input2[1][0]' on GL_PROGRAM_INPUT,Fail
 spec@arb_sample_shading@arb_sample_shading-builtin-gl-sample-mask-mrt-alpha-to-coverage,Fail
 spec@arb_seamless_cube_map@arb_seamless_cubemap,Fail
 spec@arb_shader_atomic_counters@semantics,Fail
diff --git a/src/mesa/state_tracker/st_glsl_to_nir.cpp b/src/mesa/state_tracker/st_glsl_to_nir.cpp
index 0255b0cca9044..da6e5df1f4626 100644
--- a/src/mesa/state_tracker/st_glsl_to_nir.cpp
+++ b/src/mesa/state_tracker/st_glsl_to_nir.cpp
@@ -483,6 +483,114 @@ st_nir_lower_wpos_ytransform(struct nir_shader *nir,
    }
 }
 
+static int
+get_variable_location_offset(unsigned stage,
+                             const gl_shader_variable* variable)
+{
+   int offset = 0;
+
+   switch (stage) {
+   case MESA_SHADER_VERTEX:
+      offset = VERT_ATTRIB_GENERIC0;
+      break;
+
+   case MESA_SHADER_GEOMETRY:
+   case MESA_SHADER_FRAGMENT:
+      offset = VARYING_SLOT_VAR0;
+      break;
+
+   case MESA_SHADER_TESS_EVAL:
+   case MESA_SHADER_TESS_CTRL:
+      offset = variable->patch ? VARYING_SLOT_PATCH0 : 0;
+      break;
+   }
+
+   return offset;
+}
+
+bool
+st_is_variable_used(struct gl_shader_program *shader_program,
+                    struct gl_shader_variable const *variable)
+{
+   const unsigned stage = MESA_SHADER_VERTEX;
+
+   struct gl_linked_shader *stage_shader =
+      shader_program->_LinkedShaders[stage];
+
+   if (!stage_shader)
+      return false;
+
+   int location_offset = get_variable_location_offset(stage, variable);
+   int doubles_offset = util_bitcount64(stage_shader->Program->DualSlotInputs &
+      BITFIELD64_MASK(variable->location + location_offset));
+   int location = variable->location + location_offset + doubles_offset;
+   unsigned num_slots = glsl_count_attribute_slots(variable->type, false);
+   uint64_t inputs_read = stage_shader->Program->nir->info.inputs_read;
+
+   for (unsigned idx = 0; idx != num_slots; ++idx) {
+      const uint64_t one_64 = 1u;
+      if ((one_64 << (location + idx)) & inputs_read) {
+         return true;
+      }
+   }
+
+   return false;
+}
+
+static void
+remove_unused_vertex_inputs(struct gl_shader_program *shader_program)
+{
+   struct util_dynarray unused_resources;
+   util_dynarray_init(&unused_resources, shader_program->data);
+
+   unsigned num_resources = shader_program->data->NumProgramResourceList;
+   for (unsigned res_idx = 0; res_idx < num_resources; ++res_idx) {
+      struct gl_program_resource* program_resource =
+         shader_program->data->ProgramResourceList + res_idx;
+
+      if (program_resource->Type != GL_PROGRAM_INPUT)
+         continue;
+
+      struct gl_shader_variable const* variable =
+         (struct gl_shader_variable const*)program_resource->Data;
+      if (variable->mode != ir_var_shader_in || variable->location == -1)
+         continue;
+
+      if (!st_is_variable_used(shader_program, variable))
+         util_dynarray_append(&unused_resources, unsigned, res_idx);
+   }
+
+   unsigned num_unused = util_dynarray_num_elements(&unused_resources, unsigned);
+   if (num_unused == 0) {
+      util_dynarray_fini(&unused_resources);
+      return;
+   }
+
+   unsigned new_num = num_resources - num_unused;
+
+   gl_program_resource* new_resources =
+      reralloc(shader_program->data, NULL, gl_program_resource, new_num);
+
+   unsigned *unused_next = (unsigned *)util_dynarray_begin(&unused_resources);
+   unsigned *unused_end = unused_next + num_unused;
+   gl_program_resource *dst_res_next = new_resources;
+   for (unsigned src_idx = 0; src_idx < num_resources; ++src_idx) {
+      if ((unused_next != unused_end) && (*unused_next == src_idx)) {
+         ++unused_next;
+      } else {
+         memcpy(dst_res_next,
+               shader_program->data->ProgramResourceList + src_idx,
+               sizeof(gl_program_resource));
+         ++dst_res_next;
+      }
+   }
+
+   ralloc_free(shader_program->data->ProgramResourceList);
+   shader_program->data->NumProgramResourceList = new_num;
+   shader_program->data->ProgramResourceList = new_resources;
+   util_dynarray_fini(&unused_resources);
+}
+
 static bool
 st_link_glsl_to_nir(struct gl_context *ctx,
                     struct gl_shader_program *shader_program)
@@ -700,6 +808,9 @@ st_link_glsl_to_nir(struct gl_context *ctx,
       prev_info = info;
    }
 
+   if (!shader_program->SeparateShader)
+      remove_unused_vertex_inputs(shader_program);
+
    for (unsigned i = 0; i < num_shaders; i++) {
       struct gl_linked_shader *shader = linked_shader[i];
       struct gl_program *prog = shader->Program;
diff --git a/src/mesa/state_tracker/st_nir.h b/src/mesa/state_tracker/st_nir.h
index b4598ad0a810d..7a0c4970b7b2b 100644
--- a/src/mesa/state_tracker/st_nir.h
+++ b/src/mesa/state_tracker/st_nir.h
@@ -48,6 +48,10 @@ char *st_finalize_nir(struct st_context *st, struct gl_program *prog,
                       struct nir_shader *nir, bool finalize_by_driver,
                       bool is_before_variants);
 
+bool
+st_is_variable_used(struct gl_shader_program *shader_program,
+                    struct gl_shader_variable const *variable);
+
 void st_nir_assign_vs_in_locations(struct nir_shader *nir);
 void st_nir_assign_varying_locations(struct st_context *st,
                                      struct nir_shader *nir);
diff --git a/src/mesa/state_tracker/tests/meson.build b/src/mesa/state_tracker/tests/meson.build
index 240a7dd8b449b..fa2581c3019fd 100644
--- a/src/mesa/state_tracker/tests/meson.build
+++ b/src/mesa/state_tracker/tests/meson.build
@@ -31,3 +31,17 @@ test(
   ),
   suite : ['st_mesa'],
 )
+
+test(
+  'st-is-variable-used-test',
+  executable(
+    'st_test_is_variable_used',
+    ['test_is_variable_used.cpp', ir_expression_operation_h],
+    include_directories : [inc_include, inc_src, inc_mapi, inc_mesa, inc_gallium, inc_gallium_aux],
+    link_with : [
+      libmesa, libglapi, libgallium,
+    ],
+    dependencies : [idep_nir_headers, idep_mesautil, idep_gtest],
+  ),
+  suite : ['st_mesa'],
+)
\ No newline at end of file
diff --git a/src/mesa/state_tracker/tests/test_is_variable_used.cpp b/src/mesa/state_tracker/tests/test_is_variable_used.cpp
new file mode 100644
index 0000000000000..1d415df84befe
--- /dev/null
+++ b/src/mesa/state_tracker/tests/test_is_variable_used.cpp
@@ -0,0 +1,152 @@
+#include <gtest/gtest.h>
+#include <bitset>
+
+#include "mesa/main/shaderapi.h"
+#include "mesa/main/get.h"
+#include "mesa/main/enums.h"
+#include "mesa/main/shaderobj.h"
+#include "util/compiler.h"
+#include "main/mtypes.h"
+#include "main/macros.h"
+#include "compiler/nir/nir.h"
+#include "compiler/nir/nir_builder.h"
+#include "compiler/glsl/string_to_uint_map.h"
+#include "mesa/state_tracker/st_nir.h"
+
+template<size_t bitset_capacity>
+void mark_used(std::bitset<bitset_capacity>& bitset, int location, int component)
+{
+   int index = (location * 4) + component;
+   bitset.set(index);
+}
+
+template<size_t bitset_capacity>
+void mark_used(std::bitset<bitset_capacity>& bitset, int location)
+{
+   for (int component = 0; component < 4; ++component) {
+      mark_used(bitset, location, component);
+   }
+}
+
+template<size_t bitset_capacity>
+bool is_used(const std::bitset<bitset_capacity>& bitset, int location, int component)
+{
+   int index = (location * 4) + component;
+   return bitset[index];
+}
+
+template<size_t bitset_capacity>
+bool is_used(const std::bitset<bitset_capacity>& bitset, int location)
+{
+   for (int component = 0; component < 4; ++component) {
+      if (is_used(bitset, location, component)) {
+         return true;
+      }
+   }
+
+   return false;
+}
+
+class TestIsVariableUsed : public ::testing::Test {
+public:
+   virtual void SetUp() override;
+   virtual void TearDown() override;
+   void InitializeShaderStage(gl_shader_stage stage);
+
+   bool stages[MESA_SHADER_STAGES];
+   gl_shader_program *prog;
+};
+
+void
+TestIsVariableUsed::SetUp()
+{
+   glsl_type_singleton_init_or_ref();
+
+   prog = rzalloc(nullptr, gl_shader_program);
+   prog->SeparateShader = false;
+   prog->data = rzalloc(prog, gl_shader_program_data);
+   prog->data->ProgramResourceList = NULL;
+   prog->data->NumProgramResourceList = 0;
+
+   for (int i = 0; i < MESA_SHADER_STAGES; ++i) {
+      prog->_LinkedShaders[i] = nullptr;
+   }
+}
+
+void
+TestIsVariableUsed::TearDown()
+{
+   if (prog->UniformHash)
+      string_to_uint_map_dtor(prog->UniformHash);
+
+   ralloc_free(prog);
+   prog = nullptr;
+
+   glsl_type_singleton_decref();
+}
+
+void
+TestIsVariableUsed::InitializeShaderStage(gl_shader_stage stage) {
+   assert(stage < MESA_SHADER_STAGES);
+   prog->_LinkedShaders[stage] = rzalloc(prog, gl_linked_shader);
+   prog->_LinkedShaders[stage]->Program = rzalloc(prog, gl_program);
+}
+
+TEST_F(TestIsVariableUsed, VertexShader) {
+   constexpr int components_per_location = 4;
+   constexpr int num_locations = 32;
+   constexpr int num_components = components_per_location * num_locations;
+   std::bitset<num_components> component_bitset;
+   constexpr gl_shader_stage stage = MESA_SHADER_VERTEX;
+   InitializeShaderStage(stage);
+
+   const nir_shader_compiler_options compiler_options {};
+   nir_builder builder = nir_builder_init_simple_shader(
+      stage, &compiler_options, "test_shader");
+
+   uint64_t& inputs_read = builder.shader->info.inputs_read;
+
+   mark_used(component_bitset, VERT_ATTRIB_GENERIC10 - VERT_ATTRIB_GENERIC0);
+   inputs_read |= ((uint64_t)1) << VERT_ATTRIB_GENERIC10;
+
+   mark_used(component_bitset, VERT_ATTRIB_GENERIC6 - VERT_ATTRIB_GENERIC0);
+   inputs_read |= ((uint64_t)1) << VERT_ATTRIB_GENERIC6;
+
+   mark_used(component_bitset, VERT_ATTRIB_GENERIC3 - VERT_ATTRIB_GENERIC0);
+   inputs_read |= ((uint64_t)1) << VERT_ATTRIB_GENERIC3;
+
+   prog->_LinkedShaders[stage]->Program->nir = builder.shader;
+   prog->_LinkedShaders[stage]->Program->DualSlotInputs = 0;
+
+   gl_shader_variable *shader_variable = rzalloc(prog, gl_shader_variable);
+   shader_variable->type = glsl_float_type();
+
+   auto is_variable_used = [&](int location, int component) {
+      shader_variable->location = location;
+      shader_variable->component = component;
+      if (st_is_variable_used(prog, shader_variable)) {
+         return testing::AssertionSuccess()
+            << "location " << location << " "
+            << "component " << component
+            << " is used";
+      } else {
+         return testing::AssertionFailure()
+            << "location " << location << " "
+            << "component " << component
+            << " isn't used";
+      }
+   };
+
+   for (int location = 0; location < num_locations; ++location) {
+      for (int component = 0; component < components_per_location; ++component) {
+         if (is_used(component_bitset, location, component)) {
+            EXPECT_TRUE(is_variable_used(location, component));
+         } else {
+            EXPECT_FALSE(is_variable_used(location, component));
+         }
+      }
+   }
+
+   ralloc_free(shader_variable);
+   ralloc_free(builder.shader);
+}
-- 
GitLab

