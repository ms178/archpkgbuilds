From 15614c96d240f06b927ba7330b907f82b7aded7d Mon Sep 17 00:00:00 2001
From: Chia-I Wu <olvaffe@gmail.com>
Date: Wed, 1 Nov 2023 17:53:44 -0700
Subject: [PATCH 1/2] radv: stop using vk_render_pass_state::render_pass

vk_render_pass_state::pipeline_flags is derived from
vk_get_pipeline_rendering_flags and has the info we need.

Cc: mesa-stable
Closes: https://gitlab.freedesktop.org/mesa/mesa/-/issues/10074
---
 src/amd/vulkan/radv_pipeline_graphics.c | 31 +++++++------------------
 1 file changed, 8 insertions(+), 23 deletions(-)

diff --git a/src/amd/vulkan/radv_pipeline_graphics.c b/src/amd/vulkan/radv_pipeline_graphics.c
index d02c53f778c86..f7f6e4ea3c915 100644
--- a/src/amd/vulkan/radv_pipeline_graphics.c
+++ b/src/amd/vulkan/radv_pipeline_graphics.c
@@ -296,16 +296,11 @@ static bool
 radv_pipeline_uses_vrs_attachment(const struct radv_graphics_pipeline *pipeline,
                                   const struct vk_graphics_pipeline_state *state)
 {
-   VK_FROM_HANDLE(vk_render_pass, render_pass, state->rp->render_pass);
+   VkPipelineCreateFlags2KHR create_flags = pipeline->base.create_flags;
+   if (state->rp)
+      create_flags |= state->rp->pipeline_flags;
 
-   if (render_pass) {
-      uint32_t subpass_idx = state->rp->subpass;
-      struct vk_subpass *subpass = &render_pass->subpasses[subpass_idx];
-
-      return !!subpass->fragment_shading_rate_attachment;
-   }
-
-   return (pipeline->base.create_flags & VK_PIPELINE_CREATE_2_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR) != 0;
+   return (create_flags & VK_PIPELINE_CREATE_2_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR) != 0;
 }
 
 static void
@@ -824,21 +819,11 @@ static bool
 radv_pipeline_uses_ds_feedback_loop(const struct radv_graphics_pipeline *pipeline,
                                     const struct vk_graphics_pipeline_state *state)
 {
-   VK_FROM_HANDLE(vk_render_pass, render_pass, state->rp->render_pass);
-
-   if (render_pass) {
-      uint32_t subpass_idx = state->rp->subpass;
-      struct vk_subpass *subpass = &render_pass->subpasses[subpass_idx];
-      struct vk_subpass_attachment *ds_att = subpass->depth_stencil_attachment;
-
-      for (uint32_t i = 0; i < subpass->input_count; i++) {
-         if (ds_att && ds_att->attachment == subpass->input_attachments[i].attachment) {
-            return true;
-         }
-      }
-   }
+   VkPipelineCreateFlags2KHR create_flags = pipeline->base.create_flags;
+   if (state->rp)
+      create_flags |= state->rp->pipeline_flags;
 
-   return (pipeline->base.create_flags & VK_PIPELINE_CREATE_2_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT) != 0;
+   return (create_flags & VK_PIPELINE_CREATE_2_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT) != 0;
 }
 
 static void
-- 
GitLab


From c419a84465317338fa0f38124466df1209f378a5 Mon Sep 17 00:00:00 2001
From: Chia-I Wu <olvaffe@gmail.com>
Date: Wed, 1 Nov 2023 18:00:56 -0700
Subject: [PATCH 2/2] vulkan, tu, pvr: remove vk_render_pass_state::render_pass

The spec says

  A VkRenderPass or VkPipelineLayout object passed as a parameter to
  create another object is not further accessed by that object after the
  duration of the command it is passed into.

The object could have been destroyed if we get the pointer from a
pipeline library.  Since it has no user now, let's remove it.
---
 src/freedreno/vulkan/tu_pipeline.cc    | 10 +---------
 src/imagination/vulkan/pvr_pipeline.c  |  2 --
 src/vulkan/runtime/vk_graphics_state.c |  4 ----
 src/vulkan/runtime/vk_graphics_state.h |  6 ------
 4 files changed, 1 insertion(+), 21 deletions(-)

diff --git a/src/freedreno/vulkan/tu_pipeline.cc b/src/freedreno/vulkan/tu_pipeline.cc
index 1f4eb6051b250..abed3318dc616 100644
--- a/src/freedreno/vulkan/tu_pipeline.cc
+++ b/src/freedreno/vulkan/tu_pipeline.cc
@@ -4092,10 +4092,7 @@ tu_pipeline_builder_init_graphics(
       builder->create_info->pRasterizationState->rasterizerDiscardEnable &&
       !rasterizer_discard_dynamic;
 
-   struct vk_render_pass_state rp_state = {
-      .render_pass = builder->create_info->renderPass,
-      .subpass = builder->create_info->subpass,
-   };
+   struct vk_render_pass_state rp_state = {};
    const struct vk_render_pass_state *driver_rp = NULL;
 
    builder->unscaled_input_fragcoord = 0;
@@ -4115,11 +4112,6 @@ tu_pipeline_builder_init_graphics(
       const struct tu_subpass *subpass =
          &pass->subpasses[create_info->subpass];
 
-      rp_state = (struct vk_render_pass_state) {
-         .render_pass = builder->create_info->renderPass,
-         .subpass = builder->create_info->subpass,
-      };
-
       tu_fill_render_pass_state(&rp_state, pass, subpass);
 
       rp_state.feedback_loop_input_only = true;
diff --git a/src/imagination/vulkan/pvr_pipeline.c b/src/imagination/vulkan/pvr_pipeline.c
index 0b88f87535bf8..b5ea7448e226a 100644
--- a/src/imagination/vulkan/pvr_pipeline.c
+++ b/src/imagination/vulkan/pvr_pipeline.c
@@ -2266,8 +2266,6 @@ pvr_create_renderpass_state(const VkGraphicsPipelineCreateInfo *const info)
 
    return (struct vk_render_pass_state){
       .attachment_aspects = attachment_aspects,
-      .render_pass = info->renderPass,
-      .subpass = info->subpass,
 
       /* TODO: This is only needed for VK_KHR_create_renderpass2 (or core 1.2),
        * which is not currently supported.
diff --git a/src/vulkan/runtime/vk_graphics_state.c b/src/vulkan/runtime/vk_graphics_state.c
index eb526cc1b3ac7..d5c2284876b9e 100644
--- a/src/vulkan/runtime/vk_graphics_state.c
+++ b/src/vulkan/runtime/vk_graphics_state.c
@@ -1064,16 +1064,12 @@ vk_render_pass_state_init(struct vk_render_pass_state *rp,
    }
 
    *rp = (struct vk_render_pass_state) {
-      .render_pass = info->renderPass,
-      .subpass = info->subpass,
       .pipeline_flags = pipeline_flags,
       .depth_attachment_format = VK_FORMAT_UNDEFINED,
       .stencil_attachment_format = VK_FORMAT_UNDEFINED,
    };
 
    if (info->renderPass != VK_NULL_HANDLE && driver_rp != NULL) {
-      assert(driver_rp->render_pass == info->renderPass);
-      assert(driver_rp->subpass == info->subpass);
       *rp = *driver_rp;
       return;
    }
diff --git a/src/vulkan/runtime/vk_graphics_state.h b/src/vulkan/runtime/vk_graphics_state.h
index 1a0a01ed7af05..5e6541956de75 100644
--- a/src/vulkan/runtime/vk_graphics_state.h
+++ b/src/vulkan/runtime/vk_graphics_state.h
@@ -672,12 +672,6 @@ struct vk_render_pass_state {
     */
    VkImageAspectFlags attachment_aspects;
 
-   /** VkGraphicsPipelineCreateInfo::renderPass */
-   VkRenderPass render_pass;
-
-   /** VkGraphicsPipelineCreateInfo::subpass */
-   uint32_t subpass;
-
    /** VkPipelineRenderingCreateInfo::viewMask */
    uint32_t view_mask;
 
-- 
GitLab

