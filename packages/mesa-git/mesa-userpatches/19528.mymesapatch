From 395467807317592a3c9c19a0a15152c038fd03fe Mon Sep 17 00:00:00 2001
From: Yonggang Luo <luoyonggang@gmail.com>
Date: Fri, 4 Nov 2022 03:53:01 +0800
Subject: [PATCH] amd/addrlib: Use static_assert directly instead ADDR_C_ASSERT

Minimal C/C++ version are C11/C++11, so it's better to use static_assert directly

Signed-off-by: Yonggang Luo <luoyonggang@gmail.com>
---
 src/amd/addrlib/src/core/addrcommon.h      | 16 +---------------
 src/amd/addrlib/src/gfx10/gfx10addrlib.cpp | 16 ++++++++--------
 src/amd/addrlib/src/gfx11/gfx11addrlib.cpp |  4 ++--
 3 files changed, 11 insertions(+), 25 deletions(-)

diff --git a/src/amd/addrlib/src/core/addrcommon.h b/src/amd/addrlib/src/core/addrcommon.h
index 02e54438147f..5b9bac47cc4c 100644
--- a/src/amd/addrlib/src/core/addrcommon.h
+++ b/src/amd/addrlib/src/core/addrcommon.h
@@ -41,9 +41,7 @@
     #include <string.h>
 #endif
 
-#if defined(__GNUC__)
-    #include <assert.h>
-#endif
+#include <assert.h>
 
 
 ////////////////////////////////////////////////////////////////////////////////////////////////////
@@ -179,18 +177,6 @@
 #endif // DEBUG
 ////////////////////////////////////////////////////////////////////////////////////////////////////
 
-#if defined(static_assert)
-#define ADDR_C_ASSERT(__e) static_assert(__e, "")
-#else
-   /* This version of STATIC_ASSERT() relies on VLAs.  If COND is
-    * false/zero, the array size will be -1 and we'll get a compile
-    * error
-    */
-#  define ADDR_C_ASSERT(__e) do {         \
-      (void) sizeof(char [1 - 2*!(__e)]); \
-   } while (0)
-#endif
-
 namespace Addr
 {
 
diff --git a/src/amd/addrlib/src/gfx10/gfx10addrlib.cpp b/src/amd/addrlib/src/gfx10/gfx10addrlib.cpp
index d130487e6dca..8215281eaa9c 100644
--- a/src/amd/addrlib/src/gfx10/gfx10addrlib.cpp
+++ b/src/amd/addrlib/src/gfx10/gfx10addrlib.cpp
@@ -257,7 +257,7 @@ ADDR_E_RETURNCODE Gfx10Lib::HwlComputeHtileInfo(
         const UINT_32 index = m_xmaskBaseIndex;
         const UINT_8* patIdxTable = m_settings.supportRbPlus ? GFX10_HTILE_RBPLUS_PATIDX : GFX10_HTILE_PATIDX;
 
-        ADDR_C_ASSERT(sizeof(GFX10_HTILE_SW_PATTERN[patIdxTable[index]]) == 72 * 2);
+        static_assert(sizeof(GFX10_HTILE_SW_PATTERN[patIdxTable[index]]) == 72 * 2, "");
         pOut->equation.gfx10_bits = (UINT_16 *)GFX10_HTILE_SW_PATTERN[patIdxTable[index]];
     }
 
@@ -377,7 +377,7 @@ ADDR_E_RETURNCODE Gfx10Lib::HwlComputeCmaskInfo(
             (pIn->swizzleMode == ADDR_SW_VAR_Z_X) ? GFX10_CMASK_VAR_RBPLUS_PATIDX :
             (m_settings.supportRbPlus ? GFX10_CMASK_64K_RBPLUS_PATIDX : GFX10_CMASK_64K_PATIDX);
 
-        ADDR_C_ASSERT(sizeof(GFX10_CMASK_SW_PATTERN[patIdxTable[index]]) == 68 * 2);
+        static_assert(sizeof(GFX10_CMASK_SW_PATTERN[patIdxTable[index]]) == 68 * 2, "");
         pOut->equation.gfx10_bits = (UINT_16*)GFX10_CMASK_SW_PATTERN[patIdxTable[index]];
     }
 
@@ -559,7 +559,7 @@ ADDR_E_RETURNCODE Gfx10Lib::HwlComputeDccInfo(
                 }
             }
 
-            ADDR_C_ASSERT(sizeof(GFX10_DCC_64K_R_X_SW_PATTERN[patIdxTable[index]]) == 68 * 2);
+            static_assert(sizeof(GFX10_DCC_64K_R_X_SW_PATTERN[patIdxTable[index]]) == 68 * 2, "");
             pOut->equation.gfx10_bits = (UINT_16*)GFX10_DCC_64K_R_X_SW_PATTERN[patIdxTable[index]];
         }
     }
@@ -960,8 +960,8 @@ BOOL_32 Gfx10Lib::HwlInitGlobalParams(
 
             ADDR_ASSERT((m_numPkrLog2 <= m_pipesLog2) && ((m_pipesLog2 - m_numPkrLog2) <= 2));
 
-            ADDR_C_ASSERT(sizeof(GFX10_HTILE_RBPLUS_PATIDX) / sizeof(GFX10_HTILE_RBPLUS_PATIDX[0]) ==
-                          sizeof(GFX10_CMASK_64K_RBPLUS_PATIDX) / sizeof(GFX10_CMASK_64K_RBPLUS_PATIDX[0]));
+            static_assert(sizeof(GFX10_HTILE_RBPLUS_PATIDX) / sizeof(GFX10_HTILE_RBPLUS_PATIDX[0]) ==
+                          sizeof(GFX10_CMASK_64K_RBPLUS_PATIDX) / sizeof(GFX10_CMASK_64K_RBPLUS_PATIDX[0]), "");
 
             if (m_numPkrLog2 >= 2)
             {
@@ -975,10 +975,10 @@ BOOL_32 Gfx10Lib::HwlInitGlobalParams(
                                         static_cast<UINT_32>(ADDR_CONFIG_1_PIPE)  +
                                         1;
 
-            ADDR_C_ASSERT(sizeof(GFX10_HTILE_PATIDX) / sizeof(GFX10_HTILE_PATIDX[0]) == (numPipeType + 1) * MaxNumOfAA);
+            static_assert(sizeof(GFX10_HTILE_PATIDX) / sizeof(GFX10_HTILE_PATIDX[0]) == (numPipeType + 1) * MaxNumOfAA, "");
 
-            ADDR_C_ASSERT(sizeof(GFX10_HTILE_PATIDX) / sizeof(GFX10_HTILE_PATIDX[0]) ==
-                          sizeof(GFX10_CMASK_64K_PATIDX) / sizeof(GFX10_CMASK_64K_PATIDX[0]));
+            static_assert(sizeof(GFX10_HTILE_PATIDX) / sizeof(GFX10_HTILE_PATIDX[0]) ==
+                          sizeof(GFX10_CMASK_64K_PATIDX) / sizeof(GFX10_CMASK_64K_PATIDX[0]), "");
         }
     }
 
diff --git a/src/amd/addrlib/src/gfx11/gfx11addrlib.cpp b/src/amd/addrlib/src/gfx11/gfx11addrlib.cpp
index 9adc28a63026..b4e15f187f8e 100644
--- a/src/amd/addrlib/src/gfx11/gfx11addrlib.cpp
+++ b/src/amd/addrlib/src/gfx11/gfx11addrlib.cpp
@@ -258,7 +258,7 @@ ADDR_E_RETURNCODE Gfx11Lib::HwlComputeHtileInfo(
         const UINT_32  index         = m_htileBaseIndex;
         const UINT_8* patIdxTable = GFX11_HTILE_PATIDX;
 
-        ADDR_C_ASSERT(sizeof(GFX11_HTILE_SW_PATTERN[patIdxTable[index]]) == 72 * 2);
+        static_assert(sizeof(GFX11_HTILE_SW_PATTERN[patIdxTable[index]]) == 72 * 2, "");
         pOut->equation.gfx10_bits = (UINT_16 *)GFX11_HTILE_SW_PATTERN[patIdxTable[index]];
     }
 
@@ -411,7 +411,7 @@ ADDR_E_RETURNCODE Gfx11Lib::HwlComputeDccInfo(
                 }
             }
 
-            ADDR_C_ASSERT(sizeof(GFX11_DCC_R_X_SW_PATTERN[patIdxTable[index]]) == 68 * 2);
+            static_assert(sizeof(GFX11_DCC_R_X_SW_PATTERN[patIdxTable[index]]) == 68 * 2, "");
             pOut->equation.gfx10_bits = (UINT_16*)GFX11_DCC_R_X_SW_PATTERN[patIdxTable[index]];
         }
     }
-- 
GitLab

