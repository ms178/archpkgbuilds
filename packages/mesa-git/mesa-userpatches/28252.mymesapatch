From a86324a0bb731b3e929a058acfc77d91f44eaf20 Mon Sep 17 00:00:00 2001
From: Sathishkumar S <sathishkumar.sundararaju@amd.com>
Date: Thu, 14 Mar 2024 20:39:25 +0530
Subject: [PATCH 1/3] ac/gpu_info: fix regression in vulkan hw decode
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

commit f3ab454f074 breaks vulkan hardware decoding. num_queues must
not be more than 1 for vcn ip since vcn has to retain context among
dependent jobs. use num_instances variable to track ip count.

Fixes: f3ab454f074 ("ac/gpu_info: query the number of ip instance")

Signed-off-by: Sathishkumar S <sathishkumar.sundararaju@amd.com>
Reviewed-by: Leo Liu <leo.liu@amd.com>
Acked-by: Marek Olšák <marek.olsak@amd.com>
---
 src/amd/common/ac_gpu_info.c | 16 +++++++---------
 src/amd/common/ac_gpu_info.h |  1 +
 2 files changed, 8 insertions(+), 9 deletions(-)

diff --git a/src/amd/common/ac_gpu_info.c b/src/amd/common/ac_gpu_info.c
index 786ba57df06cc..62fad822d1ae8 100644
--- a/src/amd/common/ac_gpu_info.c
+++ b/src/amd/common/ac_gpu_info.c
@@ -597,6 +597,7 @@ bool ac_query_gpu_info(int fd, void *dev_p, struct radeon_info *info,
    struct drm_amdgpu_info_device device_info = {0};
    struct amdgpu_buffer_size_alignments alignment_info = {0};
    uint32_t vce_version = 0, vce_feature = 0, uvd_version = 0, uvd_feature = 0;
+   uint32_t num_instances = 0;
    int r, i, j;
    amdgpu_device_handle dev = dev_p;
 
@@ -683,15 +684,12 @@ bool ac_query_gpu_info(int fd, void *dev_p, struct radeon_info *info,
                   device_info.family == FAMILY_MDN)
             info->ip[AMD_IP_GFX].ver_minor = info->ip[AMD_IP_COMPUTE].ver_minor = 3;
       }
-      if (ip_type >= AMD_IP_VCN_DEC && ip_type <= AMD_IP_VCN_JPEG) {
-         uint32_t num_inst;
-         r = amdgpu_query_hw_ip_count(dev, ip_type, &num_inst);
-         if (r)
-            fprintf(stderr, "amdgpu: failed to query ip count for vcn or jpeg\n");
-         else
-            info->ip[ip_type].num_queues = num_inst;
-      } else
-         info->ip[ip_type].num_queues = util_bitcount(ip_info.available_rings);
+      info->ip[ip_type].num_queues = util_bitcount(ip_info.available_rings);
+
+      /* query ip count */
+      r = amdgpu_query_hw_ip_count(dev, ip_type, &num_instances);
+      if (!r)
+         info->ip[ip_type].num_instances = num_instances;
 
       /* According to the kernel, only SDMA and VPE require 256B alignment, but use it
        * for all queues because the kernel reports wrong limits for some of the queues.
diff --git a/src/amd/common/ac_gpu_info.h b/src/amd/common/ac_gpu_info.h
index 49533f8e17a82..f47e9e965ef05 100644
--- a/src/amd/common/ac_gpu_info.h
+++ b/src/amd/common/ac_gpu_info.h
@@ -26,6 +26,7 @@ struct amd_ip_info {
    uint8_t ver_minor;
    uint8_t ver_rev;
    uint8_t num_queues;
+   uint8_t num_instances;
    uint32_t ib_alignment;
    uint32_t ib_pad_dw_mask;
 };
-- 
GitLab


From 9ad78637967f16531302eac9c12628a4e32d45d8 Mon Sep 17 00:00:00 2001
From: Sathishkumar S <sathishkumar.sundararaju@amd.com>
Date: Thu, 14 Mar 2024 21:01:31 +0530
Subject: [PATCH 2/3] radeonsi/vcn: use num_instances from radeon_info
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

num_instances is used to track ip count not num_queues.

Signed-off-by: Sathishkumar S <sathishkumar.sundararaju@amd.com>
Reviewed-by: Leo Liu <leo.liu@amd.com>
Acked-by: Marek Olšák <marek.olsak@amd.com>
---
 src/gallium/drivers/radeonsi/radeon_vcn_dec.c | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/src/gallium/drivers/radeonsi/radeon_vcn_dec.c b/src/gallium/drivers/radeonsi/radeon_vcn_dec.c
index 5cca2a8590d71..f7a4f2c377790 100644
--- a/src/gallium/drivers/radeonsi/radeon_vcn_dec.c
+++ b/src/gallium/drivers/radeonsi/radeon_vcn_dec.c
@@ -3132,9 +3132,9 @@ struct pipe_video_codec *radeon_create_decoder(struct pipe_context *context,
 
    if (dec->stream_type == RDECODE_CODEC_JPEG) {
 
-      if (((struct si_screen*)dec->screen)->info.ip[AMD_IP_VCN_JPEG].num_queues > 1 &&
-          ((struct si_screen*)dec->screen)->info.ip[AMD_IP_VCN_JPEG].num_queues <= MAX_JPEG_INST)
-         dec->njctx = ((struct si_screen*)dec->screen)->info.ip[AMD_IP_VCN_JPEG].num_queues;
+      if (((struct si_screen*)dec->screen)->info.ip[AMD_IP_VCN_JPEG].num_instances > 1 &&
+          ((struct si_screen*)dec->screen)->info.ip[AMD_IP_VCN_JPEG].num_instances <= MAX_JPEG_INST)
+         dec->njctx = ((struct si_screen*)dec->screen)->info.ip[AMD_IP_VCN_JPEG].num_instances;
       else
          dec->njctx = 1;
 
-- 
GitLab


From a6a3c8f6511f6f98f50c07937c27d8e1aab9cd75 Mon Sep 17 00:00:00 2001
From: Sathishkumar S <sathishkumar.sundararaju@amd.com>
Date: Fri, 15 Mar 2024 23:28:46 +0530
Subject: [PATCH 3/3] ac/gpu_info: update multimedia info
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

update multimedia info to show num_instances and firmware version when valid
and video codec capabilities are shown if the query is supported and valid.
Multimedia info: from Navi21 ASIC is shown below.

vcn_decode = 2
vcn_encode = 2
vcn_fw_version = 0x211200e
jpeg_decode = 1
codec    dec  max_resolution   enc  max_resolution
mpeg2    *    4096x4096        -    -
mpeg4    *    4096x4096        -    -
vc1      *    4096x4096        -    -
h264     *    4096x4096        *    4096x2160
hevc     *    8192x4352        *    7680x4352
jpeg     *    4096x4096        -    -
vp9      *    8192x4352        -    -
av1      *    8192x4352        -    -

v2: fix build error with _WIN32 builds

Signed-off-by: Sathishkumar S <sathishkumar.sundararaju@amd.com>
Reviewed-by: Leo Liu <leo.liu@amd.com>
Acked-by: Marek Olšák <marek.olsak@amd.com>
---
 src/amd/common/ac_gpu_info.c | 106 +++++++++++++++++++++++++++--------
 src/amd/common/ac_gpu_info.h |   1 +
 2 files changed, 84 insertions(+), 23 deletions(-)

diff --git a/src/amd/common/ac_gpu_info.c b/src/amd/common/ac_gpu_info.c
index 62fad822d1ae8..c9efd98795800 100644
--- a/src/amd/common/ac_gpu_info.c
+++ b/src/amd/common/ac_gpu_info.c
@@ -55,6 +55,7 @@
 #define AMDGPU_INFO_FW_GFX_ME 0x04
 #define AMDGPU_INFO_FW_GFX_PFP 0x05
 #define AMDGPU_INFO_FW_GFX_CE 0x06
+#define AMDGPU_INFO_FW_VCN 0x0e
 #define AMDGPU_INFO_DEV_INFO 0x16
 #define AMDGPU_INFO_MEMORY 0x19
 #define AMDGPU_INFO_VIDEO_CAPS_DECODE 0
@@ -76,6 +77,16 @@
 #define AMDGPU_VRAM_TYPE_LPDDR4 11
 #define AMDGPU_VRAM_TYPE_LPDDR5 12
 
+#define AMDGPU_INFO_VIDEO_CAPS_CODEC_IDX_MPEG2     0
+#define AMDGPU_INFO_VIDEO_CAPS_CODEC_IDX_MPEG4     1
+#define AMDGPU_INFO_VIDEO_CAPS_CODEC_IDX_VC1       2
+#define AMDGPU_INFO_VIDEO_CAPS_CODEC_IDX_MPEG4_AVC 3
+#define AMDGPU_INFO_VIDEO_CAPS_CODEC_IDX_HEVC      4
+#define AMDGPU_INFO_VIDEO_CAPS_CODEC_IDX_JPEG      5
+#define AMDGPU_INFO_VIDEO_CAPS_CODEC_IDX_VP9       6
+#define AMDGPU_INFO_VIDEO_CAPS_CODEC_IDX_AV1       7
+#define AMDGPU_INFO_VIDEO_CAPS_CODEC_IDX_COUNT     8
+
 struct drm_amdgpu_heap_info {
    uint64_t total_heap_size;
 };
@@ -596,7 +607,7 @@ bool ac_query_gpu_info(int fd, void *dev_p, struct radeon_info *info,
    struct amdgpu_gpu_info amdinfo;
    struct drm_amdgpu_info_device device_info = {0};
    struct amdgpu_buffer_size_alignments alignment_info = {0};
-   uint32_t vce_version = 0, vce_feature = 0, uvd_version = 0, uvd_feature = 0;
+   uint32_t vidip_fw_version = 0, vidip_fw_feature = 0;
    uint32_t num_instances = 0;
    int r, i, j;
    amdgpu_device_handle dev = dev_p;
@@ -739,16 +750,27 @@ bool ac_query_gpu_info(int fd, void *dev_p, struct radeon_info *info,
       return false;
    }
 
-   r = amdgpu_query_firmware_version(dev, AMDGPU_INFO_FW_UVD, 0, 0, &uvd_version, &uvd_feature);
-   if (r) {
-      fprintf(stderr, "amdgpu: amdgpu_query_firmware_version(uvd) failed.\n");
-      return false;
-   }
-
-   r = amdgpu_query_firmware_version(dev, AMDGPU_INFO_FW_VCE, 0, 0, &vce_version, &vce_feature);
-   if (r) {
-      fprintf(stderr, "amdgpu: amdgpu_query_firmware_version(vce) failed.\n");
-      return false;
+   if (info->ip[AMD_IP_VCN_DEC].num_queues || info->ip[AMD_IP_VCN_UNIFIED].num_queues) {
+      r = amdgpu_query_firmware_version(dev, AMDGPU_INFO_FW_VCN, 0, 0, &vidip_fw_version, &vidip_fw_feature);
+      if (r) {
+         fprintf(stderr, "amdgpu: amdgpu_query_firmware_version(vcn) failed.\n");
+         return false;
+      } else
+         info->vcn_fw_version = vidip_fw_version;
+   } else if (info->ip[AMD_IP_VCE].num_queues) {
+      r = amdgpu_query_firmware_version(dev, AMDGPU_INFO_FW_VCE, 0, 0, &vidip_fw_version, &vidip_fw_feature);
+      if (r) {
+         fprintf(stderr, "amdgpu: amdgpu_query_firmware_version(vce) failed.\n");
+         return false;
+      } else
+         info->vce_fw_version = vidip_fw_version;
+   } else if (info->ip[AMD_IP_UVD].num_queues) {
+      r = amdgpu_query_firmware_version(dev, AMDGPU_INFO_FW_UVD, 0, 0, &vidip_fw_version, &vidip_fw_feature);
+      if (r) {
+         fprintf(stderr, "amdgpu: amdgpu_query_firmware_version(uvd) failed.\n");
+         return false;
+      } else
+         info->uvd_fw_version = vidip_fw_version;
    }
 
    r = amdgpu_query_sw_info(dev, amdgpu_sw_info_address32_hi, &info->address32_hi);
@@ -1021,8 +1043,6 @@ bool ac_query_gpu_info(int fd, void *dev_p, struct radeon_info *info,
    info->max_se = device_info.num_shader_engines;
    info->max_sa_per_se = device_info.num_shader_arrays_per_engine;
    info->num_cu_per_sh = device_info.num_cu_per_sh;
-   info->uvd_fw_version = info->ip[AMD_IP_UVD].num_queues ? uvd_version : 0;
-   info->vce_fw_version = info->ip[AMD_IP_VCE].num_queues ? vce_version : 0;
 
    info->memory_freq_mhz_effective *= ac_memory_ops_per_clock(info->vram_type);
 
@@ -1831,18 +1851,58 @@ void ac_print_gpu_info(const struct radeon_info *info, FILE *f)
    fprintf(f, "    pfp_fw_feature = %i\n", info->pfp_fw_feature);
 
    fprintf(f, "Multimedia info:\n");
-   fprintf(f, "    vce_encode = %u\n", info->ip[AMD_IP_VCE].num_queues);
-
-   if (info->family >= CHIP_NAVI31 || info->family == CHIP_GFX940)
-      fprintf(f, "    vcn_unified = %u\n", info->ip[AMD_IP_VCN_UNIFIED].num_queues);
-   else {
-      fprintf(f, "    vcn_decode = %u\n", info->ip[AMD_IP_VCN_DEC].num_queues);
-      fprintf(f, "    vcn_encode = %u\n", info->ip[AMD_IP_VCN_ENC].num_queues);
+   if (info->ip[AMD_IP_VCN_DEC].num_queues || info->ip[AMD_IP_VCN_UNIFIED].num_queues) {
+      if (info->family >= CHIP_NAVI31 || info->family == CHIP_GFX940)
+         fprintf(f, "    vcn_unified = %u\n", info->ip[AMD_IP_VCN_UNIFIED].num_instances);
+      else {
+         fprintf(f, "    vcn_decode = %u\n", info->ip[AMD_IP_VCN_DEC].num_instances);
+         fprintf(f, "    vcn_encode = %u\n", info->ip[AMD_IP_VCN_ENC].num_instances);
+      }
+      fprintf(f, "    vcn_fw_version = 0x%x\n", info->vcn_fw_version);
+   } else if (info->ip[AMD_IP_VCE].num_queues) {
+      fprintf(f, "    vce_encode = %u\n", info->ip[AMD_IP_VCE].num_queues);
+      fprintf(f, "    vce_fw_version = %u\n", info->vce_fw_version);
+      fprintf(f, "    vce_harvest_config = %i\n", info->vce_harvest_config);
+   } else if (info->ip[AMD_IP_UVD].num_queues)
+      fprintf(f, "    uvd_fw_version = %u\n", info->uvd_fw_version);
+
+   if (info->ip[AMD_IP_VCN_JPEG].num_queues)
+      fprintf(f, "    jpeg_decode = %u\n", info->ip[AMD_IP_VCN_JPEG].num_instances);
+
+   if ((info->drm_minor >= 41) &&
+       (info->ip[AMD_IP_VCN_DEC].num_queues || info->ip[AMD_IP_VCN_UNIFIED].num_queues
+       || info->ip[AMD_IP_VCE].num_queues || info->ip[AMD_IP_UVD].num_queues)) {
+      char max_res_dec[64] = {0}, max_res_enc[64] = {0};
+      char codec_str[][8] = {
+         [AMDGPU_INFO_VIDEO_CAPS_CODEC_IDX_MPEG2] = "mpeg2",
+         [AMDGPU_INFO_VIDEO_CAPS_CODEC_IDX_MPEG4] = "mpeg4",
+         [AMDGPU_INFO_VIDEO_CAPS_CODEC_IDX_VC1] = "vc1",
+         [AMDGPU_INFO_VIDEO_CAPS_CODEC_IDX_MPEG4_AVC] = "h264",
+         [AMDGPU_INFO_VIDEO_CAPS_CODEC_IDX_HEVC] = "hevc",
+         [AMDGPU_INFO_VIDEO_CAPS_CODEC_IDX_JPEG] = "jpeg",
+         [AMDGPU_INFO_VIDEO_CAPS_CODEC_IDX_VP9] = "vp9",
+         [AMDGPU_INFO_VIDEO_CAPS_CODEC_IDX_AV1] = "av1",
+      };
+      fprintf(f, "    %-8s %-4s %-16s %-4s %-16s\n",
+              "codec", "dec", "max_resolution", "enc", "max_resolution");
+      for (unsigned i = 0; i < AMDGPU_INFO_VIDEO_CAPS_CODEC_IDX_COUNT; i++) {
+         if (info->dec_caps.codec_info[i].valid)
+            sprintf(max_res_dec, "%ux%u", info->dec_caps.codec_info[i].max_width,
+                    info->dec_caps.codec_info[i].max_height);
+         else
+            sprintf(max_res_dec, "%s", "-");
+         if (info->enc_caps.codec_info[i].valid)
+            sprintf(max_res_enc, "%ux%u", info->enc_caps.codec_info[i].max_width,
+                    info->enc_caps.codec_info[i].max_height);
+         else
+            sprintf(max_res_enc, "%s", "-");
+      fprintf(f, "    %-8s %-4s %-16s %-4s %-16s\n",
+            codec_str[i],
+            info->dec_caps.codec_info[i].valid ? "*" : "-", max_res_dec,
+            info->enc_caps.codec_info[i].valid ? "*" : "-", max_res_enc);
+      }
    }
 
-   fprintf(f, "    uvd_fw_version = %u\n", info->uvd_fw_version);
-   fprintf(f, "    vce_fw_version = %u\n", info->vce_fw_version);
-   fprintf(f, "    vce_harvest_config = %i\n", info->vce_harvest_config);
 
    fprintf(f, "Kernel & winsys capabilities:\n");
    fprintf(f, "    drm = %i.%i.%i\n", info->drm_major, info->drm_minor, info->drm_patchlevel);
diff --git a/src/amd/common/ac_gpu_info.h b/src/amd/common/ac_gpu_info.h
index f47e9e965ef05..585b21305e08d 100644
--- a/src/amd/common/ac_gpu_info.h
+++ b/src/amd/common/ac_gpu_info.h
@@ -184,6 +184,7 @@ struct radeon_info {
    /* Multimedia info. */
    uint32_t uvd_fw_version;
    uint32_t vce_fw_version;
+   uint32_t vcn_fw_version;
    uint32_t vce_harvest_config;
    struct video_caps_info {
       struct video_codec_cap {
-- 
GitLab

