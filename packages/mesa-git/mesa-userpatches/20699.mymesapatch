From 3eac79d237127fbcd61d1840e9e0cf39db5905a7 Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Fri, 13 Jan 2023 17:04:01 +0100
Subject: [PATCH] radv: do not add descriptor BOs on update when the global BO
 list is used

It's unnecessary and already checked elsewhere like in
vkCmdBindDescriptorSets(). This improves performance of vkoverhead
test #76 (descriptor_1image) by +18%. It's the same performance as
PRO on my Threadripper 1950X now. This should also slightly improve
texel and buffer descriptors.

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/amd/vulkan/radv_descriptor_set.c | 9 +++++++++
 1 file changed, 9 insertions(+)

diff --git a/src/amd/vulkan/radv_descriptor_set.c b/src/amd/vulkan/radv_descriptor_set.c
index dae3aeee349a..32261bb95a4f 100644
--- a/src/amd/vulkan/radv_descriptor_set.c
+++ b/src/amd/vulkan/radv_descriptor_set.c
@@ -1055,6 +1055,9 @@ write_texel_buffer_descriptor(struct radv_device *device, struct radv_cmd_buffer
 
    memcpy(dst, buffer_view->state, 4 * 4);
 
+   if (device->use_global_bo_list)
+      return;
+
    if (cmd_buffer)
       radv_cs_add_buffer(device->ws, cmd_buffer->cs, buffer_view->bo);
    else
@@ -1113,6 +1116,9 @@ write_buffer_descriptor_impl(struct radv_device *device, struct radv_cmd_buffer
 
    write_buffer_descriptor(device, dst, va, range);
 
+   if (device->use_global_bo_list)
+      return;
+
    if (!buffer) {
       if (!cmd_buffer)
          *buffer_list = NULL;
@@ -1202,6 +1208,9 @@ write_image_descriptor_impl(struct radv_device *device, struct radv_cmd_buffer *
 
    write_image_descriptor(dst, size, descriptor_type, image_info);
 
+   if (device->use_global_bo_list)
+      return;
+
    if (!iview) {
       if (!cmd_buffer)
          *buffer_list = NULL;
-- 
GitLab

From 6ada05622cab0108fca8f9d22db1f7cc3da46a06 Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Wed, 18 Jan 2023 09:02:16 +0100
Subject: [PATCH] try Mike's suggestion

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/amd/vulkan/radv_descriptor_set.c | 44 ++++++++++++++++------------
 1 file changed, 26 insertions(+), 18 deletions(-)

diff --git a/src/amd/vulkan/radv_descriptor_set.c b/src/amd/vulkan/radv_descriptor_set.c
index 32261bb95a4f..20eded9976c9 100644
--- a/src/amd/vulkan/radv_descriptor_set.c
+++ b/src/amd/vulkan/radv_descriptor_set.c
@@ -1042,7 +1042,7 @@ radv_FreeDescriptorSets(VkDevice _device, VkDescriptorPool descriptorPool, uint3
 static ALWAYS_INLINE void
 write_texel_buffer_descriptor(struct radv_device *device, struct radv_cmd_buffer *cmd_buffer,
                               unsigned *dst, struct radeon_winsys_bo **buffer_list,
-                              const VkBufferView _buffer_view)
+                              const VkBufferView _buffer_view, bool use_global_bo_list)
 {
    RADV_FROM_HANDLE(radv_buffer_view, buffer_view, _buffer_view);

@@ -1055,7 +1055,7 @@ write_texel_buffer_descriptor(struct radv_device *device, struct radv_cmd_buffer

    memcpy(dst, buffer_view->state, 4 * 4);

-   if (device->use_global_bo_list)
+   if (use_global_bo_list)
       return;

    if (cmd_buffer)
@@ -1096,7 +1096,7 @@ write_buffer_descriptor(struct radv_device *device, unsigned *dst, uint64_t va,
 static ALWAYS_INLINE void
 write_buffer_descriptor_impl(struct radv_device *device, struct radv_cmd_buffer *cmd_buffer,
                              unsigned *dst, struct radeon_winsys_bo **buffer_list,
-                             const VkDescriptorBufferInfo *buffer_info)
+                             const VkDescriptorBufferInfo *buffer_info, bool use_global_bo_list)
 {
    RADV_FROM_HANDLE(radv_buffer, buffer, buffer_info->buffer);
    uint64_t va = 0, range = 0;
@@ -1116,7 +1116,7 @@ write_buffer_descriptor_impl(struct radv_device *device, struct radv_cmd_buffer

    write_buffer_descriptor(device, dst, va, range);

-   if (device->use_global_bo_list)
+   if (use_global_bo_list)
       return;

    if (!buffer) {
@@ -1202,13 +1202,14 @@ write_image_descriptor(unsigned *dst, unsigned size, VkDescriptorType descriptor
 static ALWAYS_INLINE void
 write_image_descriptor_impl(struct radv_device *device, struct radv_cmd_buffer *cmd_buffer,
                             unsigned size, unsigned *dst, struct radeon_winsys_bo **buffer_list,
-                            VkDescriptorType descriptor_type, const VkDescriptorImageInfo *image_info)
+                            VkDescriptorType descriptor_type, const VkDescriptorImageInfo *image_info,
+                            bool use_global_bo_list)
 {
    RADV_FROM_HANDLE(radv_image_view, iview, image_info->imageView);

    write_image_descriptor(dst, size, descriptor_type, image_info);

-   if (device->use_global_bo_list)
+   if (use_global_bo_list)
       return;

    if (!iview) {
@@ -1235,10 +1236,11 @@ write_combined_image_sampler_descriptor(struct radv_device *device,
                                         struct radv_cmd_buffer *cmd_buffer, unsigned sampler_offset,
                                         unsigned *dst, struct radeon_winsys_bo **buffer_list,
                                         VkDescriptorType descriptor_type,
-                                        const VkDescriptorImageInfo *image_info, bool has_sampler)
+                                        const VkDescriptorImageInfo *image_info, bool has_sampler,
+                                        bool use_global_bo_list)
 {
    write_image_descriptor_impl(device, cmd_buffer, sampler_offset, dst, buffer_list, descriptor_type,
-                               image_info);
+                               image_info, use_global_bo_list);
    /* copy over sampler state */
    if (has_sampler) {
       RADV_FROM_HANDLE(radv_sampler, sampler, image_info->sampler);
@@ -1320,27 +1322,30 @@ radv_update_descriptor_sets_impl(struct radv_device *device, struct radv_cmd_buf
          case VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER:
          case VK_DESCRIPTOR_TYPE_STORAGE_BUFFER:
             write_buffer_descriptor_impl(device, cmd_buffer, ptr, buffer_list,
-                                         writeset->pBufferInfo + j);
+                                         writeset->pBufferInfo + j, device->use_global_bo_list);
             break;
          case VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER:
          case VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER:
             write_texel_buffer_descriptor(device, cmd_buffer, ptr, buffer_list,
-                                          writeset->pTexelBufferView[j]);
+                                          writeset->pTexelBufferView[j], device->use_global_bo_list);
             break;
          case VK_DESCRIPTOR_TYPE_STORAGE_IMAGE:
             write_image_descriptor_impl(device, cmd_buffer, 32, ptr, buffer_list,
-                                        writeset->descriptorType, writeset->pImageInfo + j);
+                                        writeset->descriptorType, writeset->pImageInfo + j,
+                                        device->use_global_bo_list);
             break;
          case VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE:
          case VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT:
             write_image_descriptor_impl(device, cmd_buffer, 64, ptr, buffer_list,
-                                        writeset->descriptorType, writeset->pImageInfo + j);
+                                        writeset->descriptorType, writeset->pImageInfo + j,
+                                        device->use_global_bo_list);
             break;
          case VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER: {
             unsigned sampler_offset = radv_combined_image_descriptor_sampler_offset(binding_layout);
             write_combined_image_sampler_descriptor(
                device, cmd_buffer, sampler_offset, ptr, buffer_list, writeset->descriptorType,
-               writeset->pImageInfo + j, !binding_layout->immutable_samplers_offset);
+               writeset->pImageInfo + j, !binding_layout->immutable_samplers_offset,
+               device->use_global_bo_list);
             if (copy_immutable_samplers) {
                const unsigned idx = writeset->dstArrayElement + j;
                memcpy((char *)ptr + sampler_offset, samplers + 4 * idx, 16);
@@ -1617,29 +1622,32 @@ radv_update_descriptor_set_with_template_impl(struct radv_device *device,
          case VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER:
          case VK_DESCRIPTOR_TYPE_STORAGE_BUFFER:
             write_buffer_descriptor_impl(device, cmd_buffer, pDst, buffer_list,
-                                         (struct VkDescriptorBufferInfo *)pSrc);
+                                         (struct VkDescriptorBufferInfo *)pSrc,
+                                         device->use_global_bo_list);
             break;
          case VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER:
          case VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER:
             write_texel_buffer_descriptor(device, cmd_buffer, pDst, buffer_list,
-                                          *(VkBufferView *)pSrc);
+                                          *(VkBufferView *)pSrc, device->use_global_bo_list);
             break;
          case VK_DESCRIPTOR_TYPE_STORAGE_IMAGE:
             write_image_descriptor_impl(device, cmd_buffer, 32, pDst, buffer_list,
                                         templ->entry[i].descriptor_type,
-                                        (struct VkDescriptorImageInfo *)pSrc);
+                                        (struct VkDescriptorImageInfo *)pSrc,
+                                        device->use_global_bo_list);
             break;
          case VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE:
          case VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT:
             write_image_descriptor_impl(device, cmd_buffer, 64, pDst, buffer_list,
                                         templ->entry[i].descriptor_type,
-                                        (struct VkDescriptorImageInfo *)pSrc);
+                                        (struct VkDescriptorImageInfo *)pSrc,
+                                        device->use_global_bo_list);
             break;
          case VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER:
             write_combined_image_sampler_descriptor(
                device, cmd_buffer, templ->entry[i].sampler_offset, pDst, buffer_list,
                templ->entry[i].descriptor_type, (struct VkDescriptorImageInfo *)pSrc,
-               templ->entry[i].has_sampler);
+               templ->entry[i].has_sampler, device->use_global_bo_list);
             if (cmd_buffer && templ->entry[i].immutable_samplers) {
                memcpy((char *)pDst + templ->entry[i].sampler_offset,
                       templ->entry[i].immutable_samplers + 4 * j, 16);
--
GitLab
