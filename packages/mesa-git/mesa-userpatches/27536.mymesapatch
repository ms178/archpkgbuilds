From 6f064bb3c3a2492aab86a72abb7f906f6a1ade5d Mon Sep 17 00:00:00 2001
From: Georg Lehmann <dadschoorse@gmail.com>
Date: Thu, 8 Feb 2024 21:22:32 +0100
Subject: [PATCH] nir: don't try to optimize exclusive min/max scan to
 inclusive

SPIR-V rules for fmax/fmin scans are *very* stupid.
The required identity is Inf instead of NaN but if one input
is NaN, the other value has to be returned.
This means for invocation 0:
min(subgroupExclusiveMin(NaN), NaN) -> Inf
subgroupInclusiveMin(NaN) -> undefined (NaN for any sane backend)
---
 src/compiler/nir/nir_opt_intrinsics.c | 14 ++++++++++++--
 1 file changed, 12 insertions(+), 2 deletions(-)

diff --git a/src/compiler/nir/nir_opt_intrinsics.c b/src/compiler/nir/nir_opt_intrinsics.c
index b114d1f7289c6..22e1b8053ef93 100644
--- a/src/compiler/nir/nir_opt_intrinsics.c
+++ b/src/compiler/nir/nir_opt_intrinsics.c
@@ -258,8 +258,18 @@ try_opt_exclusive_scan_to_inclusive(nir_intrinsic_instr *intrin)
          return false;
 
       /* Don't reassociate exact float operations. */
-      if (nir_alu_type_get_base_type(nir_op_infos[alu->op].output_type) == nir_type_float &&
-          alu->op != nir_op_fmax && alu->op != nir_op_fmin && alu->exact)
+      if (nir_alu_type_get_base_type(nir_op_infos[alu->op].output_type) == nir_type_float && alu->exact)
+         return false;
+
+      /* SPIR-V rules for fmax/fmin scans are *very* stupid.
+       * The required identity is Inf instead of NaN but if one input
+       * is NaN, the other value has to be returned.
+       *
+       * This means for invocation 0:
+       * min(subgroupExclusiveMin(NaN), NaN) -> Inf
+       * subgroupInclusiveMin(NaN) -> undefined (NaN for any sane backend)
+       */
+      if (alu->op == nir_op_fmax || alu->op == nir_op_fmin)
          return false;
 
       if (alu->def.num_components != 1)
-- 
GitLab

