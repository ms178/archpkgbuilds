From 88f6ba3367eabe6c275cf99364cdcc013a4897fe Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Mon, 3 Jul 2023 18:36:28 +0100
Subject: [PATCH 1/2] nir/unsigned_upper_bound: fix phi(bcsel)

This was looking at the wrong sources. src0 is the condition.

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
Fixes: 72ac3f60261 ("nir: add nir_unsigned_upper_bound and nir_addition_might_overflow")
---
 src/compiler/nir/nir_range_analysis.c | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/src/compiler/nir/nir_range_analysis.c b/src/compiler/nir/nir_range_analysis.c
index c85530e138868..927eb6c0e5658 100644
--- a/src/compiler/nir/nir_range_analysis.c
+++ b/src/compiler/nir/nir_range_analysis.c
@@ -1418,12 +1418,12 @@ search_phi_bcsel(nir_ssa_scalar scalar, nir_ssa_scalar *buf, unsigned buf_size,
       nir_op op = nir_ssa_scalar_alu_op(scalar);
 
       if ((op == nir_op_bcsel || op == nir_op_b32csel) && buf_size >= 2) {
-         nir_ssa_scalar src0 = nir_ssa_scalar_chase_alu_src(scalar, 0);
          nir_ssa_scalar src1 = nir_ssa_scalar_chase_alu_src(scalar, 1);
+         nir_ssa_scalar src2 = nir_ssa_scalar_chase_alu_src(scalar, 2);
 
-         unsigned added = search_phi_bcsel(src0, buf, buf_size - 1, visited);
+         unsigned added = search_phi_bcsel(src1, buf, buf_size - 1, visited);
          buf_size -= added;
-         added += search_phi_bcsel(src1, buf + added, buf_size, visited);
+         added += search_phi_bcsel(src2, buf + added, buf_size, visited);
          return added;
       }
    }
-- 
GitLab


From 763390a7dbf3fc8e9b2915df573b9d6d88dc74c6 Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Tue, 4 Jul 2023 12:41:11 +0100
Subject: [PATCH 2/2] nir/tests: add test for unsigned_upper_bound with loop
 header phis

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
---
 src/compiler/nir/meson.build                  |  2 +-
 ...sed_tests.cpp => range_analysis_tests.cpp} | 66 +++++++++++++++++++
 2 files changed, 67 insertions(+), 1 deletion(-)
 rename src/compiler/nir/tests/{ssa_def_bits_used_tests.cpp => range_analysis_tests.cpp} (79%)

diff --git a/src/compiler/nir/meson.build b/src/compiler/nir/meson.build
index 04f266e3648e5..efeb0b125fea0 100644
--- a/src/compiler/nir/meson.build
+++ b/src/compiler/nir/meson.build
@@ -354,7 +354,7 @@ if with_tests
         'tests/opt_if_tests.cpp',
         'tests/opt_shrink_vectors_tests.cpp',
         'tests/serialize_tests.cpp',
-        'tests/ssa_def_bits_used_tests.cpp',
+        'tests/range_analysis_tests.cpp',
         'tests/vars_tests.cpp',
       ),
       cpp_args : [cpp_msvc_compat_args],
diff --git a/src/compiler/nir/tests/ssa_def_bits_used_tests.cpp b/src/compiler/nir/tests/range_analysis_tests.cpp
similarity index 79%
rename from src/compiler/nir/tests/ssa_def_bits_used_tests.cpp
rename to src/compiler/nir/tests/range_analysis_tests.cpp
index 4c9aa29505765..09f1f525fbfa7 100644
--- a/src/compiler/nir/tests/ssa_def_bits_used_tests.cpp
+++ b/src/compiler/nir/tests/range_analysis_tests.cpp
@@ -47,6 +47,26 @@ protected:
    struct nir_builder bld;
 };
 
+class unsigned_upper_bound_test : public ::testing::Test {
+protected:
+   unsigned_upper_bound_test()
+   {
+      glsl_type_singleton_init_or_ref();
+
+      static const nir_shader_compiler_options options = { };
+      bld = nir_builder_init_simple_shader(MESA_SHADER_VERTEX, &options,
+                                           "unsigned_upper_bound test");
+   }
+
+   ~unsigned_upper_bound_test()
+   {
+      ralloc_free(bld.shader);
+      glsl_type_singleton_decref();
+   }
+
+   struct nir_builder bld;
+};
+
 static bool
 is_used_once(const nir_ssa_def *def)
 {
@@ -254,3 +274,49 @@ TEST_F(ssa_def_bits_used_test, extract_u8_with_const_index)
       EXPECT_EQ(0xffu << (8 * src1_imm[i]), bits_used);
    }
 }
+
+/* Unsigned upper bound analysis should look through a bcsel which uses the phi. */
+TEST_F(unsigned_upper_bound_test, loop_phi_bcsel)
+{
+   /*
+    * impl main {
+    *     block b0:  // preds:
+    *     32    %0 = load_const (0x00000000 = 0.000000)
+    *     32    %1 = load_const (0x00000002 = 0.000000)
+    *     1     %2 = load_const (false)
+    *                // succs: b1
+    *     loop {
+    *         block b1:  // preds: b0 b1
+    *         32    %4 = phi b0: %0 (0x0), b1: %3
+    *         32    %3 = bcsel %2 (false), %4, %1 (0x2)
+    *                    // succs: b1
+    *     }
+    *     block b2:  // preds: , succs: b3
+    *     block b3:
+    * }
+    */
+   nir_ssa_def *zero = nir_imm_int(&bld, 0);
+   nir_ssa_def *two = nir_imm_int(&bld, 2);
+   nir_ssa_def *cond = nir_imm_false(&bld);
+
+   nir_phi_instr *const phi = nir_phi_instr_create(bld.shader);
+   nir_ssa_dest_init(&phi->instr, &phi->dest, 1, 32);
+
+   nir_push_loop(&bld);
+   nir_ssa_def *sel = nir_bcsel(&bld, cond, &phi->dest.ssa, two);
+   nir_pop_loop(&bld, NULL);
+
+   bld.cursor = nir_before_instr(sel->parent_instr);
+   nir_phi_instr_add_src(phi, zero->parent_instr->block,
+                         nir_src_for_ssa(zero));
+   nir_phi_instr_add_src(phi, sel->parent_instr->block,
+                         nir_src_for_ssa(sel));
+   nir_builder_instr_insert(&bld, &phi->instr);
+
+   nir_validate_shader(bld.shader, NULL);
+
+   struct hash_table *range_ht = _mesa_pointer_hash_table_create(NULL);
+   nir_ssa_scalar scalar = nir_get_ssa_scalar(&phi->dest.ssa, 0);
+   EXPECT_EQ(nir_unsigned_upper_bound(bld.shader, range_ht, scalar, NULL), 2);
+   _mesa_hash_table_destroy(range_ht, NULL);
+}
-- 
GitLab

