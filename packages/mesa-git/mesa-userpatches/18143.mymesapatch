From 293a6c99f75cb5cdbf2aa98638102bb11b6cec8e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Timur=20Krist=C3=B3f?= <timur.kristof@gmail.com>
Date: Sat, 24 Dec 2022 19:36:30 +0100
Subject: [PATCH 1/8] nir/opt_if: Slightly refactor the function that
 transforms phis.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

We're planning to extend this function so rename it from
opt_if_phi_is_condition to opt_if_transform_phis_after_if.

Also move the part that deals with a single phi to a separate function.

Signed-off-by: Timur Krist贸f <timur.kristof@gmail.com>
---
 src/compiler/nir/nir.h        |  5 +++
 src/compiler/nir/nir_opt_if.c | 76 ++++++++++++++++++++---------------
 2 files changed, 49 insertions(+), 32 deletions(-)

diff --git a/src/compiler/nir/nir.h b/src/compiler/nir/nir.h
index 736b20c261b3..7ee08b9aa930 100644
--- a/src/compiler/nir/nir.h
+++ b/src/compiler/nir/nir.h
@@ -5647,6 +5647,11 @@ bool nir_opt_idiv_const(nir_shader *shader, unsigned min_bit_size);
 
 typedef enum {
    nir_opt_if_aggressive_last_continue = (1 << 0),
+
+   /**
+    * Find phi instructions whose operands are constant true/false and
+    * replace them with the if condition.
+    */
    nir_opt_if_optimize_phi_true_false = (1 << 1),
 } nir_opt_if_options;
 
diff --git a/src/compiler/nir/nir_opt_if.c b/src/compiler/nir/nir_opt_if.c
index 142e0ef3d958..5d26d57700e3 100644
--- a/src/compiler/nir/nir_opt_if.c
+++ b/src/compiler/nir/nir_opt_if.c
@@ -934,15 +934,53 @@ opt_if_simplification(nir_builder *b, nir_if *nif)
    return true;
 }
 
-/* Find phi statements after an if that choose between true and false, and
- * replace them with the if statement's condition (or an inot of it).
+static bool
+opt_if_transform_phi(nir_builder *b, nir_phi_instr *phi, nir_if *nif,
+                     nir_block *then_block, nir_block *else_block)
+{
+   nir_ssa_def *cond = nif->condition.ssa;
+
+   enum opt_bool {
+      T, F, UNKNOWN
+   } then_val = UNKNOWN, else_val = UNKNOWN;
+
+   nir_foreach_phi_src(src, phi) {
+      assert(src->pred == then_block || src->pred == else_block);
+      enum opt_bool *pred_val = src->pred == then_block ? &then_val : &else_val;
+
+      nir_ssa_scalar val = nir_ssa_scalar_resolved(src->src.ssa, 0);
+      if (!nir_ssa_scalar_is_const(val))
+         break;
+
+      if (nir_ssa_scalar_as_int(val) == -1)
+         *pred_val = T;
+      else if (nir_ssa_scalar_as_uint(val) == 0)
+         *pred_val = F;
+      else
+         break;
+   }
+
+   if (then_val == T && else_val == F) {
+      nir_ssa_def_rewrite_uses(&phi->dest.ssa, cond);
+      return true;
+   } else if (then_val == F && else_val == T) {
+      b->cursor = nir_before_cf_node(&nif->cf_node);
+      nir_ssa_def_rewrite_uses(&phi->dest.ssa, nir_inot(b, cond));
+      return true;
+   }
+
+   return false;
+}
+
+/* Find phi instructions after an if and apply transformations
+ * to them based on flags passed by the caller of nir_opt_if.
  */
 static bool
-opt_if_phi_is_condition(nir_builder *b, nir_if *nif)
+opt_if_transform_phis_after_if(nir_builder *b, nir_if *nif)
 {
    /* Grab pointers to the last then/else blocks for looking in the phis. */
    nir_block *then_block = nir_if_last_then_block(nif);
-   ASSERTED nir_block *else_block = nir_if_last_else_block(nif);
+   nir_block *else_block = nir_if_last_else_block(nif);
    nir_ssa_def *cond = nif->condition.ssa;
    bool progress = false;
 
@@ -956,33 +994,7 @@ opt_if_phi_is_condition(nir_builder *b, nir_if *nif)
           phi->dest.ssa.num_components != 1)
          continue;
 
-      enum opt_bool {
-         T, F, UNKNOWN
-      } then_val = UNKNOWN, else_val = UNKNOWN;
-
-      nir_foreach_phi_src(src, phi) {
-         assert(src->pred == then_block || src->pred == else_block);
-         enum opt_bool *pred_val = src->pred == then_block ? &then_val : &else_val;
-
-         nir_ssa_scalar val = nir_ssa_scalar_resolved(src->src.ssa, 0);
-         if (!nir_ssa_scalar_is_const(val))
-            break;
-
-         if (nir_ssa_scalar_as_int(val) == -1)
-            *pred_val = T;
-         else if (nir_ssa_scalar_as_uint(val) == 0)
-            *pred_val = F;
-         else
-            break;
-      }
-      if (then_val == T && else_val == F) {
-         nir_ssa_def_rewrite_uses(&phi->dest.ssa, cond);
-         progress = true;
-      } else if (then_val == F && else_val == T) {
-         b->cursor = nir_before_cf_node(&nif->cf_node);
-         nir_ssa_def_rewrite_uses(&phi->dest.ssa, nir_inot(b, cond));
-         progress = true;
-      }
+      progress |= opt_if_transform_phi(b, phi, nif, then_block, else_block);
    }
 
    return progress;
@@ -1615,7 +1627,7 @@ opt_if_cf_list(nir_builder *b, struct exec_list *cf_list,
          progress |= opt_if_merge(nif);
          progress |= opt_if_simplification(b, nif);
          if (options & nir_opt_if_optimize_phi_true_false)
-            progress |= opt_if_phi_is_condition(b, nif);
+            progress |= opt_if_transform_phis_after_if(b, nif);
          break;
       }
 
-- 
GitLab


From fb9c859449c28aab249448395c4a0c7dc1661ad6 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Timur=20Krist=C3=B3f?= <timur.kristof@gmail.com>
Date: Sat, 24 Dec 2022 19:39:51 +0100
Subject: [PATCH 2/8] nir/opt_if: Pass options to opt_if_transform_phi
 function.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

There will be additional options in the future.

Signed-off-by: Timur Krist贸f <timur.kristof@gmail.com>
---
 src/compiler/nir/nir_opt_if.c | 26 +++++++++++++++-----------
 1 file changed, 15 insertions(+), 11 deletions(-)

diff --git a/src/compiler/nir/nir_opt_if.c b/src/compiler/nir/nir_opt_if.c
index 5d26d57700e3..37c28d3ae615 100644
--- a/src/compiler/nir/nir_opt_if.c
+++ b/src/compiler/nir/nir_opt_if.c
@@ -936,7 +936,8 @@ opt_if_simplification(nir_builder *b, nir_if *nif)
 
 static bool
 opt_if_transform_phi(nir_builder *b, nir_phi_instr *phi, nir_if *nif,
-                     nir_block *then_block, nir_block *else_block)
+                     nir_block *then_block, nir_block *else_block,
+                     nir_opt_if_options options)
 {
    nir_ssa_def *cond = nif->condition.ssa;
 
@@ -960,13 +961,16 @@ opt_if_transform_phi(nir_builder *b, nir_phi_instr *phi, nir_if *nif,
          break;
    }
 
-   if (then_val == T && else_val == F) {
-      nir_ssa_def_rewrite_uses(&phi->dest.ssa, cond);
-      return true;
-   } else if (then_val == F && else_val == T) {
-      b->cursor = nir_before_cf_node(&nif->cf_node);
-      nir_ssa_def_rewrite_uses(&phi->dest.ssa, nir_inot(b, cond));
-      return true;
+   if (options & nir_opt_if_optimize_phi_true_false) {
+      if (then_val == T && else_val == F) {
+         nir_ssa_def_rewrite_uses(&phi->dest.ssa, cond);
+         return true;
+      } else if (then_val == F && else_val == T) {
+         b->cursor = nir_before_cf_node(&nif->cf_node);
+         nir_ssa_def_rewrite_uses(&phi->dest.ssa, nir_inot(b, cond));
+         return true;
+      }
+   }
    }
 
    return false;
@@ -976,7 +980,7 @@ opt_if_transform_phi(nir_builder *b, nir_phi_instr *phi, nir_if *nif,
  * to them based on flags passed by the caller of nir_opt_if.
  */
 static bool
-opt_if_transform_phis_after_if(nir_builder *b, nir_if *nif)
+opt_if_transform_phis_after_if(nir_builder *b, nir_if *nif, nir_opt_if_options options)
 {
    /* Grab pointers to the last then/else blocks for looking in the phis. */
    nir_block *then_block = nir_if_last_then_block(nif);
@@ -994,7 +998,7 @@ opt_if_transform_phis_after_if(nir_builder *b, nir_if *nif)
           phi->dest.ssa.num_components != 1)
          continue;
 
-      progress |= opt_if_transform_phi(b, phi, nif, then_block, else_block);
+      progress |= opt_if_transform_phi(b, phi, nif, then_block, else_block, options);
    }
 
    return progress;
@@ -1627,7 +1631,7 @@ opt_if_cf_list(nir_builder *b, struct exec_list *cf_list,
          progress |= opt_if_merge(nif);
          progress |= opt_if_simplification(b, nif);
          if (options & nir_opt_if_optimize_phi_true_false)
-            progress |= opt_if_transform_phis_after_if(b, nif);
+            progress |= opt_if_transform_phis_after_if(b, nif, options);
          break;
       }
 
-- 
GitLab


From f9fcb2e685e4428c2d0966af6c5fbf588e6d131f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Timur=20Krist=C3=B3f?= <timur.kristof@gmail.com>
Date: Sat, 24 Dec 2022 19:43:20 +0100
Subject: [PATCH 3/8] nir/opt_if: Track undef in opt_if_transform_phi.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Timur Krist贸f <timur.kristof@gmail.com>
---
 src/compiler/nir/nir_opt_if.c | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/src/compiler/nir/nir_opt_if.c b/src/compiler/nir/nir_opt_if.c
index 37c28d3ae615..ea6e7287755b 100644
--- a/src/compiler/nir/nir_opt_if.c
+++ b/src/compiler/nir/nir_opt_if.c
@@ -942,7 +942,7 @@ opt_if_transform_phi(nir_builder *b, nir_phi_instr *phi, nir_if *nif,
    nir_ssa_def *cond = nif->condition.ssa;
 
    enum opt_bool {
-      T, F, UNKNOWN
+      T, F, UNDEF, UNKNOWN
    } then_val = UNKNOWN, else_val = UNKNOWN;
 
    nir_foreach_phi_src(src, phi) {
@@ -957,6 +957,8 @@ opt_if_transform_phi(nir_builder *b, nir_phi_instr *phi, nir_if *nif,
          *pred_val = T;
       else if (nir_ssa_scalar_as_uint(val) == 0)
          *pred_val = F;
+      else if (nir_ssa_scalar_is_undef(val))
+         *pred_val = UNDEF;
       else
          break;
    }
-- 
GitLab


From b2a9886198326a0fbd1a68dc996c0531bb3527ac Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Timur=20Krist=C3=B3f?= <timur.kristof@gmail.com>
Date: Sat, 24 Dec 2022 20:27:40 +0100
Subject: [PATCH 4/8] nir/opt_if: Track then and else phi sources in
 opt_if_transform_phi.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Timur Krist贸f <timur.kristof@gmail.com>
---
 src/compiler/nir/nir_opt_if.c | 7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/src/compiler/nir/nir_opt_if.c b/src/compiler/nir/nir_opt_if.c
index ea6e7287755b..e9cfebc8d11d 100644
--- a/src/compiler/nir/nir_opt_if.c
+++ b/src/compiler/nir/nir_opt_if.c
@@ -945,10 +945,17 @@ opt_if_transform_phi(nir_builder *b, nir_phi_instr *phi, nir_if *nif,
       T, F, UNDEF, UNKNOWN
    } then_val = UNKNOWN, else_val = UNKNOWN;
 
+   nir_src *then_src = NULL, *else_src = NULL;
+
    nir_foreach_phi_src(src, phi) {
       assert(src->pred == then_block || src->pred == else_block);
       enum opt_bool *pred_val = src->pred == then_block ? &then_val : &else_val;
 
+      if (src->pred == then_block)
+         then_src = &src->src;
+      else
+         else_src = &src->src;
+
       nir_ssa_scalar val = nir_ssa_scalar_resolved(src->src.ssa, 0);
       if (!nir_ssa_scalar_is_const(val))
          break;
-- 
GitLab


From 355857577405c0f16d0dbad35a9aad8f331361e8 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Timur=20Krist=C3=B3f?= <timur.kristof@gmail.com>
Date: Sun, 25 Dec 2022 01:05:19 +0100
Subject: [PATCH 5/8] nir/opt_if: Don't break on non-const phi sources in
 opt_if_transform_phi.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Timur Krist贸f <timur.kristof@gmail.com>
---
 src/compiler/nir/nir_opt_if.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/compiler/nir/nir_opt_if.c b/src/compiler/nir/nir_opt_if.c
index e9cfebc8d11d..9ae53c985a88 100644
--- a/src/compiler/nir/nir_opt_if.c
+++ b/src/compiler/nir/nir_opt_if.c
@@ -958,7 +958,7 @@ opt_if_transform_phi(nir_builder *b, nir_phi_instr *phi, nir_if *nif,
 
       nir_ssa_scalar val = nir_ssa_scalar_resolved(src->src.ssa, 0);
       if (!nir_ssa_scalar_is_const(val))
-         break;
+         continue;
 
       if (nir_ssa_scalar_as_int(val) == -1)
          *pred_val = T;
@@ -967,7 +967,7 @@ opt_if_transform_phi(nir_builder *b, nir_phi_instr *phi, nir_if *nif,
       else if (nir_ssa_scalar_is_undef(val))
          *pred_val = UNDEF;
       else
-         break;
+         continue;
    }
 
    if (options & nir_opt_if_optimize_phi_true_false) {
-- 
GitLab


From b7d77c431fd4f9d9d3eb6b9bb58044aec3ddb944 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Timur=20Krist=C3=B3f?= <timur.kristof@gmail.com>
Date: Sat, 24 Dec 2022 20:28:28 +0100
Subject: [PATCH 6/8] nir/opt_if: New option: phis of empty if blocks to undef
 + ALU.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Find phi instructions after an if-else where either if or else block
is empty. Change the phi to use undef for the empty block and add ALU
instructions to get the original value.

This helps backends that control SIMD lanes explicitly (eg. ACO)
because they won't have to emit instructions for the empty block.

Signed-off-by: Timur Krist贸f <timur.kristof@gmail.com>
---
 src/compiler/nir/nir.h        | 10 +++++
 src/compiler/nir/nir_opt_if.c | 76 ++++++++++++++++++++++++++++++++++-
 2 files changed, 85 insertions(+), 1 deletion(-)

diff --git a/src/compiler/nir/nir.h b/src/compiler/nir/nir.h
index 7ee08b9aa930..4757a9940752 100644
--- a/src/compiler/nir/nir.h
+++ b/src/compiler/nir/nir.h
@@ -5653,6 +5653,16 @@ typedef enum {
     * replace them with the if condition.
     */
    nir_opt_if_optimize_phi_true_false = (1 << 1),
+
+   /**
+    * Find phi instructions after an if-else where either if or else block
+    * is empty. Change the phi to use undef for the empty block and add ALU
+    * instructions to get the original value.
+    *
+    * This helps backends that control SIMD lanes explicitly (eg. ACO)
+    * because they won't have to emit instructions for the empty block.
+    */
+   nir_opt_if_empty_block_phi_to_undef = (1 << 2),
 } nir_opt_if_options;
 
 bool nir_opt_if(nir_shader *shader, nir_opt_if_options options);
diff --git a/src/compiler/nir/nir_opt_if.c b/src/compiler/nir/nir_opt_if.c
index 9ae53c985a88..b0ae89424abc 100644
--- a/src/compiler/nir/nir_opt_if.c
+++ b/src/compiler/nir/nir_opt_if.c
@@ -934,6 +934,45 @@ opt_if_simplification(nir_builder *b, nir_if *nif)
    return true;
 }
 
+static void
+opt_if_phi_to_undef_with_alu(nir_builder *b, nir_ssa_def *cond, nir_phi_instr *phi,
+                             nir_src *to_undef_src, bool invert_cond, bool use_or)
+{
+   /* Insert undef before the condition and use that instead of the specificed source. */
+   b->cursor = nir_before_instr(cond->parent_instr);
+   nir_ssa_def *undef = nir_ssa_undef(b, 1, 1);
+   nir_instr_rewrite_src_ssa(&phi->instr, to_undef_src, undef);
+
+   b->cursor = nir_after_phis(phi->instr.block);
+
+   /* Invert the condition if needed. */
+   if (invert_cond)
+      cond = nir_inot(b, cond);
+
+   /* Create ALU instruction. */
+   nir_ssa_def *replacement =
+      use_or ? nir_ior(b, cond, &phi->dest.ssa)
+             : nir_iand(b, cond, &phi->dest.ssa);
+
+   /* Use the replacement instead of the phi. */
+   nir_ssa_def_rewrite_uses_after(&phi->dest.ssa, replacement, replacement->parent_instr);
+}
+
+/** Returns true when a block is empty or only contains undefs. */
+static bool
+opt_if_block_is_empty_or_undef(nir_block *block)
+{
+   if (exec_list_is_empty(&block->instr_list))
+      return true;
+
+   nir_foreach_instr(instr, block) {
+      if (instr->type != nir_instr_type_ssa_undef)
+         return false;
+   }
+
+   return true;
+}
+
 static bool
 opt_if_transform_phi(nir_builder *b, nir_phi_instr *phi, nir_if *nif,
                      nir_block *then_block, nir_block *else_block,
@@ -980,6 +1019,40 @@ opt_if_transform_phi(nir_builder *b, nir_phi_instr *phi, nir_if *nif,
          return true;
       }
    }
+
+   if (options & nir_opt_if_empty_block_phi_to_undef) {
+      const bool then_empty = opt_if_block_is_empty_or_undef(then_block);
+      const bool else_empty = opt_if_block_is_empty_or_undef(else_block);
+
+      if (then_val == UNKNOWN && else_empty) {
+         if (else_val == T) {
+            /* if (a) { b = ... } else {} c = phi(b, 1)
+             * => c' = phi(b, undef); c = ior(inot(a), c')
+             */
+            opt_if_phi_to_undef_with_alu(b, cond, phi, else_src, true, true);
+            return true;
+         } else if (else_val == F) {
+            /* if (a) { b = ... } else {} c = phi(b, 0)
+             * => c' = phi(b, undef); c = iand(a, c')
+             */
+            opt_if_phi_to_undef_with_alu(b, cond, phi, else_src, false, false);
+            return true;
+         }
+      } else if (else_val == UNKNOWN && then_empty) {
+         if (then_val == T) {
+            /* if (a) {} else { b = ... } c = phi(1, b)
+             * => c' = phi(undef, b); c = ior(a, c')
+             */
+            opt_if_phi_to_undef_with_alu(b, cond, phi, then_src, false, true);
+            return true;
+         } else if (then_val == F) {
+            /* if (a) {} else { b = ... } c = phi(0, b)
+             * => c' = phi(undef, b); c = iand(inot(a), c')
+             */
+            opt_if_phi_to_undef_with_alu(b, cond, phi, then_src, true, false);
+            return true;
+         }
+      }
    }
 
    return false;
@@ -1639,7 +1712,8 @@ opt_if_cf_list(nir_builder *b, struct exec_list *cf_list,
          progress |= opt_if_loop_terminator(nif);
          progress |= opt_if_merge(nif);
          progress |= opt_if_simplification(b, nif);
-         if (options & nir_opt_if_optimize_phi_true_false)
+         if (options & (nir_opt_if_optimize_phi_true_false |
+                        nir_opt_if_empty_block_phi_to_undef))
             progress |= opt_if_transform_phis_after_if(b, nif, options);
          break;
       }
-- 
GitLab


From 5bb3a07683848161e6a8d0dd9052c44b0ae37600 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Timur=20Krist=C3=B3f?= <timur.kristof@gmail.com>
Date: Sun, 25 Dec 2022 01:10:03 +0100
Subject: [PATCH 7/8] radv: Use nir_opt_if_empty_block_phi_to_undef in
 radv_optimize_nir.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Fossil DB stats on Navi 21 (RDNA2):
Totals from 1250 (0.93% of 134913) affected shaders:
VGPRs: 62760 -> 62728 (-0.05%)
SpillSGPRs: 1416 -> 1755 (+23.94%)
SpillVGPRs: 2284 -> 2289 (+0.22%); split: -0.70%, +0.92%
CodeSize: 9934684 -> 9929836 (-0.05%); split: -0.18%, +0.13%
Scratch: 260096 -> 262144 (+0.79%)
MaxWaves: 27885 -> 27905 (+0.07%)
Instrs: 1852071 -> 1848835 (-0.17%); split: -0.26%, +0.09%
Latency: 22181190 -> 21988739 (-0.87%); split: -1.23%, +0.36%
InvThroughput: 8420229 -> 8340314 (-0.95%); split: -1.37%, +0.42%
VClause: 32788 -> 32774 (-0.04%); split: -0.09%, +0.05%
SClause: 68343 -> 68441 (+0.14%); split: -0.12%, +0.26%
Copies: 168843 -> 163765 (-3.01%); split: -3.45%, +0.44%
Branches: 76176 -> 74962 (-1.59%); split: -1.81%, +0.22%
PreSGPRs: 67272 -> 70274 (+4.46%); split: -0.23%, +4.70%
PreVGPRs: 57359 -> 57317 (-0.07%); split: -0.07%, +0.00%

Signed-off-by: Timur Krist贸f <timur.kristof@gmail.com>
---
 src/amd/vulkan/radv_shader.c | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/src/amd/vulkan/radv_shader.c b/src/amd/vulkan/radv_shader.c
index 3de836c5f713..f9f38dadfb62 100644
--- a/src/amd/vulkan/radv_shader.c
+++ b/src/amd/vulkan/radv_shader.c
@@ -205,7 +205,8 @@ radv_optimize_nir(struct nir_shader *shader, bool optimize_conservatively, bool
          NIR_PASS(progress, shader, nir_opt_dce);
       }
       NIR_PASS(progress, shader, nir_opt_if,
-               nir_opt_if_aggressive_last_continue | nir_opt_if_optimize_phi_true_false);
+               nir_opt_if_aggressive_last_continue | nir_opt_if_optimize_phi_true_false |
+               nir_opt_if_empty_block_phi_to_undef);
       NIR_PASS(progress, shader, nir_opt_dead_cf);
       NIR_PASS(progress, shader, nir_opt_cse);
       NIR_PASS(progress, shader, nir_opt_peephole_select, 8, true, true);
-- 
GitLab


From 195e899b780f1f0cb051dc385bac896869332169 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Timur=20Krist=C3=B3f?= <timur.kristof@gmail.com>
Date: Sun, 25 Dec 2022 01:10:12 +0100
Subject: [PATCH 8/8] ac/nir/ngg: Use nir_opt_if_empty_block_phi_to_undef for
 culling shaders.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Fossil DB stats on Navi 21 (RDNA2):
Totals from 60918 (45.15% of 134913) affected shaders:
CodeSize: 156474812 -> 154395648 (-1.33%)
Instrs: 29768793 -> 29248993 (-1.75%)
Latency: 139173842 -> 139110749 (-0.05%); split: -0.05%, +0.00%
InvThroughput: 21156993 -> 21156219 (-0.00%)
Copies: 2508897 -> 2293687 (-8.58%); split: -8.58%, +0.00%

Signed-off-by: Timur Krist贸f <timur.kristof@gmail.com>
---
 src/amd/common/ac_nir_lower_ngg.c | 7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)

diff --git a/src/amd/common/ac_nir_lower_ngg.c b/src/amd/common/ac_nir_lower_ngg.c
index 9cb28181ee9c..f837989a3483 100644
--- a/src/amd/common/ac_nir_lower_ngg.c
+++ b/src/amd/common/ac_nir_lower_ngg.c
@@ -2294,8 +2294,13 @@ ac_nir_lower_ngg_nogs(nir_shader *shader, const ac_nir_lower_ngg_options *option
       NIR_PASS(progress, shader, nir_opt_dce);
       NIR_PASS(progress, shader, nir_opt_dead_cf);
 
-      if (options->can_cull)
+      if (options->can_cull) {
+         NIR_PASS(progress, shader, nir_opt_cse);
+         NIR_PASS(progress, shader, nir_opt_if, nir_opt_if_optimize_phi_true_false |
+                                                nir_opt_if_empty_block_phi_to_undef);
+
          progress |= cleanup_culling_shader_after_dce(shader, b->impl, &state);
+      }
    } while (progress);
 }
 
-- 
GitLab

