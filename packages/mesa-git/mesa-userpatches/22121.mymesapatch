From 3959c8da15e28a4422772fd97d0f84b682d7c908 Mon Sep 17 00:00:00 2001
From: Bas Nieuwenhuizen <bas@basnieuwenhuizen.nl>
Date: Sun, 26 Mar 2023 00:03:30 +0100
Subject: [PATCH 1/3] util: Add aligned int64_t types for x86(non 64).

To avoid split locks.
---
 src/util/u_atomic.h | 12 ++++++++++++
 1 file changed, 12 insertions(+)

diff --git a/src/util/u_atomic.h b/src/util/u_atomic.h
index ec4569d24f73..38a8185dd43b 100644
--- a/src/util/u_atomic.h
+++ b/src/util/u_atomic.h
@@ -340,4 +340,16 @@ static inline uint64_t p_atomic_xchg_64(uint64_t *v, uint64_t i)
                                       (assert(!"should not get here"), 0))
 #endif
 
+/* On x86 we can have sizeof(uint64_t) = 8 and _Alignof(uint64_t) = 4. causing split locks. The
+ * implementation does handle that correctly, but with an internal mutex. Extend the alignment to
+ * avoid this.
+ */
+#if  __STDC_VERSION__ >= 201112L && !defined(__STDC_NO_ATOMICS__) && defined(USE_GCC_ATOMIC_BUILTINS)
+typedef int64_t __attribute__((aligned(sizeof(_Atomic(int64_t))))) p_atomic_int64_t;
+typedef uint64_t __attribute__((aligned(sizeof(_Atomic(uint64_t))))) p_atomic_uint64_t;
+#else
+typedef int64_t p_atomic_int64_t;
+typedef uint64_t p_atomic_uint64_t;
+#endif
+
 #endif /* U_ATOMIC_H */
-- 
GitLab


From 486f88e5bd42054563dc6b575499a399cace37fa Mon Sep 17 00:00:00 2001
From: Bas Nieuwenhuizen <bas@basnieuwenhuizen.nl>
Date: Sun, 26 Mar 2023 00:06:24 +0100
Subject: [PATCH 2/3] util/disk_cache: Align atomic size.

---
 src/util/disk_cache_os.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/util/disk_cache_os.h b/src/util/disk_cache_os.h
index 05a4c37de8ed..f87044708cf0 100644
--- a/src/util/disk_cache_os.h
+++ b/src/util/disk_cache_os.h
@@ -77,7 +77,7 @@ struct disk_cache {
    size_t index_mmap_size;
 
    /* Pointer to total size of all objects in cache (within index_mmap) */
-   uint64_t *size;
+   p_atomic_uint64_t *size;
 
    /* Pointer to stored keys, (within index_mmap). */
    uint8_t *stored_keys;
-- 
GitLab


From 3bcf4aa6a49ec80c4a9af1fe0b885c82a54d71eb Mon Sep 17 00:00:00 2001
From: Bas Nieuwenhuizen <bas@basnieuwenhuizen.nl>
Date: Sun, 26 Mar 2023 00:42:10 +0100
Subject: [PATCH 3/3] radv: Align atomic values.

---
 src/amd/vulkan/radv_query.c                       | 10 +++++-----
 src/amd/vulkan/winsys/amdgpu/radv_amdgpu_winsys.h |  6 +++---
 2 files changed, 8 insertions(+), 8 deletions(-)

diff --git a/src/amd/vulkan/radv_query.c b/src/amd/vulkan/radv_query.c
index c176d5b254b4..cdb8aedac2f2 100644
--- a/src/amd/vulkan/radv_query.c
+++ b/src/amd/vulkan/radv_query.c
@@ -1224,7 +1224,7 @@ radv_GetQueryPoolResults(VkDevice _device, VkQueryPool queryPool, uint32_t first
       case VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR:
       case VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR:
       case VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR: {
-         uint64_t const *src64 = (uint64_t const *)src;
+         p_atomic_uint64_t const *src64 = (p_atomic_uint64_t const *)src;
          uint64_t value;
 
          do {
@@ -1248,7 +1248,7 @@ radv_GetQueryPoolResults(VkDevice _device, VkQueryPool queryPool, uint32_t first
          break;
       }
       case VK_QUERY_TYPE_OCCLUSION: {
-         uint64_t const *src64 = (uint64_t const *)src;
+         p_atomic_uint64_t const *src64 = (p_atomic_uint64_t const *)src;
          uint32_t db_count = device->physical_device->rad_info.max_render_backends;
          uint64_t enabled_rb_mask = device->physical_device->rad_info.enabled_rb_mask;
          uint64_t sample_count = 0;
@@ -1349,7 +1349,7 @@ radv_GetQueryPoolResults(VkDevice _device, VkQueryPool queryPool, uint32_t first
          break;
       }
       case VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT: {
-         uint64_t const *src64 = (uint64_t const *)src;
+         p_atomic_uint64_t const *src64 = (p_atomic_uint64_t const *)src;
          uint64_t num_primitives_written;
          uint64_t primitive_storage_needed;
 
@@ -1389,7 +1389,7 @@ radv_GetQueryPoolResults(VkDevice _device, VkQueryPool queryPool, uint32_t first
          break;
       }
       case VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT: {
-         uint64_t const *src64 = (uint64_t const *)src;
+         p_atomic_uint64_t const *src64 = (p_atomic_uint64_t const *)src;
          uint64_t primitive_storage_needed;
 
          /* SAMPLE_STREAMOUTSTATS stores this structure:
@@ -1429,7 +1429,7 @@ radv_GetQueryPoolResults(VkDevice _device, VkQueryPool queryPool, uint32_t first
       }
       case VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR: {
          struct radv_pc_query_pool *pc_pool = (struct radv_pc_query_pool *)pool;
-         const uint64_t *src64 = (const uint64_t *)src;
+         const p_atomic_uint64_t *src64 = (const p_atomic_uint64_t *)src;
          bool avail;
          do {
             avail = true;
diff --git a/src/amd/vulkan/winsys/amdgpu/radv_amdgpu_winsys.h b/src/amd/vulkan/winsys/amdgpu/radv_amdgpu_winsys.h
index 657b055ffaa2..5ebe34129bab 100644
--- a/src/amd/vulkan/winsys/amdgpu/radv_amdgpu_winsys.h
+++ b/src/amd/vulkan/winsys/amdgpu/radv_amdgpu_winsys.h
@@ -52,9 +52,9 @@ struct radv_amdgpu_winsys {
    bool reserve_vmid;
    uint64_t perftest;
 
-   uint64_t allocated_vram;
-   uint64_t allocated_vram_vis;
-   uint64_t allocated_gtt;
+   p_atomic_uint64_t allocated_vram;
+   p_atomic_uint64_t allocated_vram_vis;
+   p_atomic_uint64_t allocated_gtt;
 
    /* Global BO list */
    struct {
-- 
GitLab

