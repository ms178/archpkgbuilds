From 8ed7877581d14cc4820ce11fbef93a891208c015 Mon Sep 17 00:00:00 2001
From: Yogesh Mohanmarimuthu <yogesh.mohanmarimuthu@amd.com>
Date: Sun, 17 Oct 2021 22:24:10 +0530
Subject: [PATCH 1/7] egl: add fd_display_gpu to struct dri2_egl_display

fd opened on display gpu is saved in fd_display_gpu. It is later used
to create dri screen on display gpu.

Signed-off-by: Yogesh Mohanmarimuthu <yogesh.mohanmarimuthu@amd.com>
---
 src/egl/drivers/dri2/egl_dri2.h             | 1 +
 src/egl/drivers/dri2/platform_android.c     | 1 +
 src/egl/drivers/dri2/platform_device.c      | 1 +
 src/egl/drivers/dri2/platform_drm.c         | 1 +
 src/egl/drivers/dri2/platform_surfaceless.c | 1 +
 src/egl/drivers/dri2/platform_wayland.c     | 1 +
 src/egl/drivers/dri2/platform_x11.c         | 3 +++
 7 files changed, 9 insertions(+)

diff --git a/src/egl/drivers/dri2/egl_dri2.h b/src/egl/drivers/dri2/egl_dri2.h
index 1c840a966b3c..f0c570266a91 100644
--- a/src/egl/drivers/dri2/egl_dri2.h
+++ b/src/egl/drivers/dri2/egl_dri2.h
@@ -237,6 +237,7 @@ struct dri2_egl_display
    const __DRIconfigOptionsExtension *configOptions;
    const __DRImutableRenderBufferDriverExtension *mutable_render_buffer;
    int fd;
+   int fd_display_gpu;
 
    /* dri2_initialize/dri2_terminate increment/decrement this count, so does
     * dri2_make_current (tracks if there are active contexts/surfaces). */
diff --git a/src/egl/drivers/dri2/platform_android.c b/src/egl/drivers/dri2/platform_android.c
index e0ec9ae795cd..29031a5967c4 100644
--- a/src/egl/drivers/dri2/platform_android.c
+++ b/src/egl/drivers/dri2/platform_android.c
@@ -1684,6 +1684,7 @@ dri2_initialize_android(_EGLDisplay *disp)
       return _eglError(EGL_BAD_ALLOC, "eglInitialize");
 
    dri2_dpy->fd = -1;
+   dri2_dpy->fd_display_gpu = -1;
    ret = hw_get_module(GRALLOC_HARDWARE_MODULE_ID,
                        (const hw_module_t **)&dri2_dpy->gralloc);
    if (ret) {
diff --git a/src/egl/drivers/dri2/platform_device.c b/src/egl/drivers/dri2/platform_device.c
index 66b2eee08ee4..34c2e82c85b4 100644
--- a/src/egl/drivers/dri2/platform_device.c
+++ b/src/egl/drivers/dri2/platform_device.c
@@ -352,6 +352,7 @@ dri2_initialize_device(_EGLDisplay *disp)
    dev = disp->PlatformDisplay;
 
    dri2_dpy->fd = -1;
+   dri2_dpy->fd_display_gpu = -1;
    disp->Device = dev;
    disp->DriverData = (void *) dri2_dpy;
    err = "DRI2: failed to load driver";
diff --git a/src/egl/drivers/dri2/platform_drm.c b/src/egl/drivers/dri2/platform_drm.c
index 45895a88b6c0..ce906e977141 100644
--- a/src/egl/drivers/dri2/platform_drm.c
+++ b/src/egl/drivers/dri2/platform_drm.c
@@ -692,6 +692,7 @@ dri2_initialize_drm(_EGLDisplay *disp)
       return _eglError(EGL_BAD_ALLOC, "eglInitialize");
 
    dri2_dpy->fd = -1;
+   dri2_dpy->fd_display_gpu = -1;
    disp->DriverData = (void *) dri2_dpy;
 
    gbm = disp->PlatformDisplay;
diff --git a/src/egl/drivers/dri2/platform_surfaceless.c b/src/egl/drivers/dri2/platform_surfaceless.c
index df88c54cf84b..82d44e3cd224 100644
--- a/src/egl/drivers/dri2/platform_surfaceless.c
+++ b/src/egl/drivers/dri2/platform_surfaceless.c
@@ -334,6 +334,7 @@ dri2_initialize_surfaceless(_EGLDisplay *disp)
       return _eglError(EGL_BAD_ALLOC, "eglInitialize");
 
    dri2_dpy->fd = -1;
+   dri2_dpy->fd_display_gpu = -1;
    disp->DriverData = (void *) dri2_dpy;
 
    /* When ForceSoftware is false, we try the HW driver.  When ForceSoftware
diff --git a/src/egl/drivers/dri2/platform_wayland.c b/src/egl/drivers/dri2/platform_wayland.c
index 634c6062d4f3..c7548ccb9d55 100644
--- a/src/egl/drivers/dri2/platform_wayland.c
+++ b/src/egl/drivers/dri2/platform_wayland.c
@@ -2081,6 +2081,7 @@ dri2_initialize_wayland_drm(_EGLDisplay *disp)
       return _eglError(EGL_BAD_ALLOC, "eglInitialize");
 
    dri2_dpy->fd = -1;
+   dri2_dpy->fd_display_gpu = -1;
    disp->DriverData = (void *) dri2_dpy;
 
    if (dri2_wl_formats_init(&dri2_dpy->formats) < 0)
diff --git a/src/egl/drivers/dri2/platform_x11.c b/src/egl/drivers/dri2/platform_x11.c
index 53302981fc26..15b497ce4b21 100644
--- a/src/egl/drivers/dri2/platform_x11.c
+++ b/src/egl/drivers/dri2/platform_x11.c
@@ -1413,6 +1413,7 @@ dri2_initialize_x11_swrast(_EGLDisplay *disp)
       return _eglError(EGL_BAD_ALLOC, "eglInitialize");
 
    dri2_dpy->fd = -1;
+   dri2_dpy->fd_display_gpu = -1;
    if (!dri2_get_xcb_connection(disp, dri2_dpy))
       goto cleanup;
 
@@ -1497,6 +1498,7 @@ dri2_initialize_x11_dri3(_EGLDisplay *disp)
       return _eglError(EGL_BAD_ALLOC, "eglInitialize");
 
    dri2_dpy->fd = -1;
+   dri2_dpy->fd_display_gpu = -1;
    if (!dri2_get_xcb_connection(disp, dri2_dpy))
       goto cleanup;
 
@@ -1605,6 +1607,7 @@ dri2_initialize_x11_dri2(_EGLDisplay *disp)
       return _eglError(EGL_BAD_ALLOC, "eglInitialize");
 
    dri2_dpy->fd = -1;
+   dri2_dpy->fd_display_gpu = -1;
    if (!dri2_get_xcb_connection(disp, dri2_dpy))
       goto cleanup;
 
-- 
GitLab


From 92eec735eac0baff1068ca1a4ecc2c4029495506 Mon Sep 17 00:00:00 2001
From: Yogesh Mohanmarimuthu <yogesh.mohanmarimuthu@amd.com>
Date: Mon, 22 Nov 2021 21:04:53 +0530
Subject: [PATCH 2/7] egl,egl/x11: keep display fd open for prime

Keep the display fd open for creating DRI screen on display gpu in
case of prime. Also close the fd opened in dri2_display_destroy()

Signed-off-by: Yogesh Mohanmarimuthu <yogesh.mohanmarimuthu@amd.com>
---
 src/egl/drivers/dri2/egl_dri2.c          | 2 ++
 src/egl/drivers/dri2/platform_x11_dri3.c | 6 ++++++
 2 files changed, 8 insertions(+)

diff --git a/src/egl/drivers/dri2/egl_dri2.c b/src/egl/drivers/dri2/egl_dri2.c
index 3682d05be954..7df135f0ecde 100644
--- a/src/egl/drivers/dri2/egl_dri2.c
+++ b/src/egl/drivers/dri2/egl_dri2.c
@@ -1236,6 +1236,8 @@ dri2_display_destroy(_EGLDisplay *disp)
    }
    if (dri2_dpy->fd >= 0)
       close(dri2_dpy->fd);
+   if (dri2_dpy->fd_display_gpu >= 0)
+      close(dri2_dpy->fd_display_gpu);
 
    /* Don't dlclose the driver when building with the address sanitizer, so you
     * get good symbols from the leak reports.
diff --git a/src/egl/drivers/dri2/platform_x11_dri3.c b/src/egl/drivers/dri2/platform_x11_dri3.c
index 3d7c2ae44012..45291ce85711 100644
--- a/src/egl/drivers/dri2/platform_x11_dri3.c
+++ b/src/egl/drivers/dri2/platform_x11_dri3.c
@@ -24,6 +24,7 @@
 #include <stdlib.h>
 #include <string.h>
 #include <unistd.h>
+#include <fcntl.h>
 
 #include <xcb/xcb.h>
 #include <xcb/dri3.h>
@@ -633,7 +634,12 @@ dri3_x11_connect(struct dri2_egl_display *dri2_dpy)
       return EGL_FALSE;
    }
 
+   dri2_dpy->fd_display_gpu = fcntl(dri2_dpy->fd, F_DUPFD_CLOEXEC, 3);
    dri2_dpy->fd = loader_get_user_preferred_fd(dri2_dpy->fd, &dri2_dpy->is_different_gpu);
+   if (!dri2_dpy->is_different_gpu) {
+      close(dri2_dpy->fd_display_gpu);
+      dri2_dpy->fd_display_gpu = -1;
+   }
 
    dri2_dpy->driver_name = loader_get_driver_for_fd(dri2_dpy->fd);
    if (!dri2_dpy->driver_name) {
-- 
GitLab


From 13151abf1b6bd549fde5c48876cd1354069ceedd Mon Sep 17 00:00:00 2001
From: Yogesh Mohanmarimuthu <yogesh.mohanmarimuthu@amd.com>
Date: Mon, 18 Oct 2021 09:52:16 +0530
Subject: [PATCH 3/7] egl: create DRI screen for display GPU in case of prime

The created DRI screen can be used to allocate VRAM memory from
display GPU in case of prime.

Signed-off-by: Yogesh Mohanmarimuthu <yogesh.mohanmarimuthu@amd.com>
---
 src/egl/drivers/dri2/egl_dri2.c | 27 +++++++++++++++++++++++++++
 src/egl/drivers/dri2/egl_dri2.h |  1 +
 2 files changed, 28 insertions(+)

diff --git a/src/egl/drivers/dri2/egl_dri2.c b/src/egl/drivers/dri2/egl_dri2.c
index 7df135f0ecde..5a51f0bf67be 100644
--- a/src/egl/drivers/dri2/egl_dri2.c
+++ b/src/egl/drivers/dri2/egl_dri2.c
@@ -1062,8 +1062,31 @@ EGLBoolean
 dri2_create_screen(_EGLDisplay *disp)
 {
    struct dri2_egl_display *dri2_dpy = dri2_egl_display(disp);
+   char *driver_name_display_gpu;
 
    if (dri2_dpy->image_driver) {
+
+      /* create screen on display gpu in case of prime */
+      if (dri2_dpy->fd_display_gpu >= 0) {
+         driver_name_display_gpu = loader_get_driver_for_fd(dri2_dpy->fd_display_gpu);
+         if (driver_name_display_gpu) {
+            /* check if driver name is matching so that non mesa drivers
+             * will not crash. Also need this check since image extension
+             * pointer from render gpu is shared with display gpu. Image
+             * extension pointer is shared because it keeps things simple.
+             */
+            if (strcmp(dri2_dpy->driver_name, driver_name_display_gpu) == 0) {
+               dri2_dpy->dri_screen_display_gpu =
+                  dri2_dpy->image_driver->createNewScreen2(0, dri2_dpy->fd_display_gpu,
+                                                           dri2_dpy->loader_extensions,
+                                                           dri2_dpy->driver_extensions,
+                                                           &dri2_dpy->driver_configs,
+                                                           disp);
+            }
+            free(driver_name_display_gpu);
+         }
+      }
+
       dri2_dpy->dri_screen =
          dri2_dpy->image_driver->createNewScreen2(0, dri2_dpy->fd,
                                                   dri2_dpy->loader_extensions,
@@ -1232,7 +1255,11 @@ dri2_display_destroy(_EGLDisplay *disp)
    if (dri2_dpy->own_dri_screen) {
       if (dri2_dpy->vtbl && dri2_dpy->vtbl->close_screen_notify)
          dri2_dpy->vtbl->close_screen_notify(disp);
+
       dri2_dpy->core->destroyScreen(dri2_dpy->dri_screen);
+
+      if (dri2_dpy->dri_screen_display_gpu)
+         dri2_dpy->core->destroyScreen(dri2_dpy->dri_screen_display_gpu);
    }
    if (dri2_dpy->fd >= 0)
       close(dri2_dpy->fd);
diff --git a/src/egl/drivers/dri2/egl_dri2.h b/src/egl/drivers/dri2/egl_dri2.h
index f0c570266a91..4881a623790f 100644
--- a/src/egl/drivers/dri2/egl_dri2.h
+++ b/src/egl/drivers/dri2/egl_dri2.h
@@ -215,6 +215,7 @@ struct dri2_egl_display
    int dri2_major;
    int dri2_minor;
    __DRIscreen *dri_screen;
+   __DRIscreen *dri_screen_display_gpu;
    bool own_dri_screen;
    const __DRIconfig **driver_configs;
    void *driver;
-- 
GitLab


From d4c532e811f2a17693310a7ec0b52570e7bcac83 Mon Sep 17 00:00:00 2001
From: Yogesh Mohanmarimuthu <yogesh.mohanmarimuthu@amd.com>
Date: Mon, 18 Oct 2021 21:44:25 +0530
Subject: [PATCH 4/7] loader,glx,egl/x11: init dri_screen_display_gpu in struct
 loader_dri3_drawable

Initialize dri_screendisplay_gpu variable in struct laoder_dri3_drawable.
Also make dri_screen_display_gpu variable as input parameter to function
loader_dri3_drawable_init() since dri_screen variable is initialized this way.
This also helps to avoid duplicate initializing dri_screen_display_gpu
in glx and egl code.

Signed-off-by: Yogesh Mohanmarimuthu <yogesh.mohanmarimuthu@amd.com>
---
 src/egl/drivers/dri2/platform_x11_dri3.c | 1 +
 src/glx/dri3_glx.c                       | 3 +--
 src/loader/loader_dri3_helper.c          | 2 ++
 src/loader/loader_dri3_helper.h          | 1 +
 4 files changed, 5 insertions(+), 2 deletions(-)

diff --git a/src/egl/drivers/dri2/platform_x11_dri3.c b/src/egl/drivers/dri2/platform_x11_dri3.c
index 45291ce85711..f474cc60b077 100644
--- a/src/egl/drivers/dri2/platform_x11_dri3.c
+++ b/src/egl/drivers/dri2/platform_x11_dri3.c
@@ -190,6 +190,7 @@ dri3_create_surface(_EGLDisplay *disp, EGLint type, _EGLConfig *conf,
    if (loader_dri3_drawable_init(dri2_dpy->conn, drawable,
                                  egl_to_loader_dri3_drawable_type(type),
                                  dri2_dpy->dri_screen,
+                                 dri2_dpy->dri_screen_display_gpu,
                                  dri2_dpy->is_different_gpu,
                                  dri2_dpy->multibuffers_available,
                                  true,
diff --git a/src/glx/dri3_glx.c b/src/glx/dri3_glx.c
index 6370ca05beb3..b211e6d0a128 100644
--- a/src/glx/dri3_glx.c
+++ b/src/glx/dri3_glx.c
@@ -399,7 +399,7 @@ dri3_create_drawable(struct glx_screen *base, XID xDrawable,
    if (loader_dri3_drawable_init(XGetXCBConnection(base->dpy),
                                  xDrawable,
                                  glx_to_loader_dri3_drawable_type(type),
-                                 psc->driScreen,
+                                 psc->driScreen, psc->driScreenDisplayGPU,
                                  psc->is_different_gpu, has_multibuffer,
                                  psc->prefer_back_buffer_reuse,
                                  config->driConfig,
@@ -409,7 +409,6 @@ dri3_create_drawable(struct glx_screen *base, XID xDrawable,
       return NULL;
    }
 
-   pdraw->loader_drawable.dri_screen_display_gpu = psc->driScreenDisplayGPU;
    return &pdraw->base;
 }
 
diff --git a/src/loader/loader_dri3_helper.c b/src/loader/loader_dri3_helper.c
index 364695d06674..078092ffa790 100644
--- a/src/loader/loader_dri3_helper.c
+++ b/src/loader/loader_dri3_helper.c
@@ -386,6 +386,7 @@ loader_dri3_drawable_init(xcb_connection_t *conn,
                           xcb_drawable_t drawable,
                           enum loader_dri3_drawable_type type,
                           __DRIscreen *dri_screen,
+                          __DRIscreen *dri_screen_display_gpu,
                           bool is_different_gpu,
                           bool multiplanes_available,
                           bool prefer_back_buffer_reuse,
@@ -407,6 +408,7 @@ loader_dri3_drawable_init(xcb_connection_t *conn,
    draw->type = type;
    draw->region = 0;
    draw->dri_screen = dri_screen;
+   draw->dri_screen_display_gpu = dri_screen_display_gpu;
    draw->is_different_gpu = is_different_gpu;
    draw->multiplanes_available = multiplanes_available;
    draw->prefer_back_buffer_reuse = prefer_back_buffer_reuse;
diff --git a/src/loader/loader_dri3_helper.h b/src/loader/loader_dri3_helper.h
index 792f72700988..6e846cce4538 100644
--- a/src/loader/loader_dri3_helper.h
+++ b/src/loader/loader_dri3_helper.h
@@ -207,6 +207,7 @@ loader_dri3_drawable_init(xcb_connection_t *conn,
                           xcb_drawable_t drawable,
                           enum loader_dri3_drawable_type type,
                           __DRIscreen *dri_screen,
+                          __DRIscreen *dri_screen_display_gpu,
                           bool is_different_gpu,
                           bool is_multiplanes_available,
                           bool prefer_back_buffer_reuse,
-- 
GitLab


From ec02c8428dfb02560bcadb880d2755cfc82c1051 Mon Sep 17 00:00:00 2001
From: Yogesh Mohanmarimuthu <yogesh.mohanmarimuthu@amd.com>
Date: Mon, 22 Nov 2021 18:45:18 +0530
Subject: [PATCH 5/7] egl/wayland: keep display fd open for prime

Keep the display fd open for creating DRI screen on display gpu in
case of prime.

Signed-off-by: Yogesh Mohanmarimuthu <yogesh.mohanmarimuthu@amd.com>
---
 src/egl/drivers/dri2/platform_wayland.c | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/src/egl/drivers/dri2/platform_wayland.c b/src/egl/drivers/dri2/platform_wayland.c
index c7548ccb9d55..cb146bf3dd4a 100644
--- a/src/egl/drivers/dri2/platform_wayland.c
+++ b/src/egl/drivers/dri2/platform_wayland.c
@@ -2153,8 +2153,14 @@ dri2_initialize_wayland_drm(_EGLDisplay *disp)
          goto cleanup;
    }
 
+   dri2_dpy->fd_display_gpu = fcntl(dri2_dpy->fd, F_DUPFD_CLOEXEC, 3);
    dri2_dpy->fd = loader_get_user_preferred_fd(dri2_dpy->fd,
                                                &dri2_dpy->is_different_gpu);
+   if (!dri2_dpy->is_different_gpu) {
+      close(dri2_dpy->fd_display_gpu);
+      dri2_dpy->fd_display_gpu = -1;
+   }
+
    dev = _eglAddDevice(dri2_dpy->fd, false);
    if (!dev) {
       _eglError(EGL_NOT_INITIALIZED, "DRI2: failed to find EGLDevice");
-- 
GitLab


From 6eee0cc328bacbc3e8cc8d5e8f8e0595a81f4733 Mon Sep 17 00:00:00 2001
From: Yogesh Mohanmarimuthu <yogesh.mohanmarimuthu@amd.com>
Date: Mon, 22 Nov 2021 19:55:41 +0530
Subject: [PATCH 6/7] loader: make image_format_to_fourcc() non-static

the image_format_to_fourcc() function will be used from
egl/wayland hence make it non-static.

Signed-off-by: Yogesh Mohanmarimuthu <yogesh.mohanmarimuthu@amd.com>
---
 src/loader/loader_dri3_helper.c | 2 +-
 src/loader/loader_dri3_helper.h | 3 +++
 2 files changed, 4 insertions(+), 1 deletion(-)

diff --git a/src/loader/loader_dri3_helper.c b/src/loader/loader_dri3_helper.c
index 078092ffa790..5e274c8fa1e5 100644
--- a/src/loader/loader_dri3_helper.c
+++ b/src/loader/loader_dri3_helper.c
@@ -1348,7 +1348,7 @@ dri3_linear_format_for_format(struct loader_dri3_drawable *draw, uint32_t format
  * complete confusion, just deal in __DRI_IMAGE_FORMAT codes for now and
  * translate to DRM_FORMAT codes in the call to createImageFromFds
  */
-static int
+int
 image_format_to_fourcc(int format)
 {
 
diff --git a/src/loader/loader_dri3_helper.h b/src/loader/loader_dri3_helper.h
index 6e846cce4538..28e41c33177c 100644
--- a/src/loader/loader_dri3_helper.h
+++ b/src/loader/loader_dri3_helper.h
@@ -294,4 +294,7 @@ loader_dri3_swapbuffer_barrier(struct loader_dri3_drawable *draw);
 
 void
 loader_dri3_close_screen(__DRIscreen *dri_screen);
+
+int
+image_format_to_fourcc(int format);
 #endif
-- 
GitLab


From 43246103165f99db4e0f9252fd60df825b6d0653 Mon Sep 17 00:00:00 2001
From: Yogesh Mohanmarimuthu <yogesh.mohanmarimuthu@amd.com>
Date: Wed, 20 Oct 2021 20:18:05 +0530
Subject: [PATCH 7/7] egl/wayland: for prime, allocate linear_copy from display
 GPU VRAM
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Allocates VRAM in display GPU in case of prime. Then the dma_buf is imported
into prime GPU.

v3: move display fd opening to separate commit (Pierre-Eric)
    image_format_to_fourcc() non-static to seperate commit (Pierre-Eric)
v2: close query fds after linear_copy buffer import (Marek Olšák)
    use image_format_to_fourcc() from loader_dri3_helper.c (Marek Olšák)
Signed-off-by: Yogesh Mohanmarimuthu <yogesh.mohanmarimuthu@amd.com>
---
 src/egl/drivers/dri2/platform_wayland.c | 109 +++++++++++++++++++-----
 1 file changed, 87 insertions(+), 22 deletions(-)

diff --git a/src/egl/drivers/dri2/platform_wayland.c b/src/egl/drivers/dri2/platform_wayland.c
index cb146bf3dd4a..2e9483ca72a1 100644
--- a/src/egl/drivers/dri2/platform_wayland.c
+++ b/src/egl/drivers/dri2/platform_wayland.c
@@ -41,6 +41,7 @@
 
 #include "egl_dri2.h"
 #include "loader_dri_helper.h"
+#include "loader_dri3_helper.h"
 #include "loader.h"
 #include "util/u_vector.h"
 #include "util/anon_file.h"
@@ -884,26 +885,6 @@ dri2_wl_release_buffers(struct dri2_egl_surface *dri2_surf)
       dri2_egl_surface_free_local_buffers(dri2_surf);
 }
 
-static void
-create_dri_image_diff_gpu(struct dri2_egl_surface *dri2_surf,
-                          unsigned int linear_dri_image_format, uint32_t use_flags)
-{
-   struct dri2_egl_display *dri2_dpy =
-      dri2_egl_display(dri2_surf->base.Resource.Display);
-   uint64_t linear_mod;
-
-   /* The LINEAR modifier should be a perfect alias of the LINEAR use flag */
-   linear_mod = DRM_FORMAT_MOD_LINEAR;
-
-   dri2_surf->back->linear_copy =
-      loader_dri_create_image(dri2_dpy->dri_screen, dri2_dpy->image,
-                              dri2_surf->base.Width,
-                              dri2_surf->base.Height,
-                              linear_dri_image_format,
-                              use_flags | __DRI_IMAGE_USE_LINEAR,
-                              &linear_mod, 1, NULL);
-}
-
 static void
 create_dri_image_from_dmabuf_feedback(struct dri2_egl_surface *dri2_surf,
                                       unsigned int dri_image_format, uint32_t use_flags)
@@ -1068,9 +1049,93 @@ get_back_bo(struct dri2_egl_surface *dri2_surf)
    }
 
    if (dri2_dpy->is_different_gpu && dri2_surf->back->linear_copy == NULL) {
-      create_dri_image_diff_gpu(dri2_surf, linear_dri_image_format, use_flags);
+      uint64_t linear_mod = DRM_FORMAT_MOD_LINEAR;
+      __DRIimage *linear_copy_display_gpu = NULL;
+
+      if (dri2_dpy->dri_screen_display_gpu) {
+         linear_copy_display_gpu =
+               loader_dri_create_image(dri2_dpy->dri_screen_display_gpu,
+                                       dri2_dpy->image,
+                                       dri2_surf->base.Width,
+                                       dri2_surf->base.Height,
+                                       linear_dri_image_format,
+                                       use_flags | __DRI_IMAGE_USE_LINEAR,
+                                       &linear_mod, 1, NULL);
+
+         if (linear_copy_display_gpu) {
+            int i, ret;
+            int num_planes = 0;
+            int buffer_fds[4];
+            int strides[4];
+            int offsets[4];
+
+            if (!dri2_dpy->image->queryImage(linear_copy_display_gpu,
+                                             __DRI_IMAGE_ATTRIB_NUM_PLANES, &num_planes))
+               num_planes = 1;
+
+            for (i = 0; i < num_planes; i++) {
+               __DRIimage *image = dri2_dpy->image->fromPlanar(
+                                      linear_copy_display_gpu, i, NULL);
+
+               if (!image) {
+                  assert(i == 0);
+                  image = linear_copy_display_gpu;
+               }
+
+               buffer_fds[i] = -1;
+               ret = dri2_dpy->image->queryImage(image, __DRI_IMAGE_ATTRIB_FD,
+                                                 &buffer_fds[i]);
+               ret &= dri2_dpy->image->queryImage(image, __DRI_IMAGE_ATTRIB_STRIDE,
+                                                  &strides[i]);
+               ret &= dri2_dpy->image->queryImage(image, __DRI_IMAGE_ATTRIB_OFFSET,
+                                                  &offsets[i]);
+
+               if (image != linear_copy_display_gpu)
+                  dri2_dpy->image->destroyImage(image);
+
+               if (!ret) {
+                  do {
+                     if (buffer_fds[i] != -1)
+                        close(buffer_fds[i]);
+                  } while (--i >= 0);
+                  dri2_dpy->image->destroyImage(linear_copy_display_gpu);
+                  return -1;
+               }
+            }
+
+            /* The linear buffer was created in the display GPU's vram, so we
+             * need to make it visible to render GPU
+             */
+            dri2_surf->back->linear_copy =
+               dri2_dpy->image->createImageFromFds(dri2_dpy->dri_screen,
+                                                   dri2_surf->base.Width,
+                                                   dri2_surf->base.Height,
+                                                   image_format_to_fourcc(
+                                                      linear_dri_image_format),
+                                                   &buffer_fds[0], num_planes,
+                                                   &strides[0],
+                                                   &offsets[0],
+                                                   dri2_surf->back);
+            do {
+               if (buffer_fds[i] != -1)
+                  close(buffer_fds[i]);
+            } while (--i >= 0);
+            dri2_dpy->image->destroyImage(linear_copy_display_gpu);
+         }
+      }
+
+      if (!dri2_surf->back->linear_copy) {
+         dri2_surf->back->linear_copy =
+               loader_dri_create_image(dri2_dpy->dri_screen, dri2_dpy->image,
+                                       dri2_surf->base.Width,
+                                       dri2_surf->base.Height,
+                                       linear_dri_image_format,
+                                       use_flags | __DRI_IMAGE_USE_LINEAR,
+                                       &linear_mod, 1, NULL);
+      }
+
       if (dri2_surf->back->linear_copy == NULL)
-          return -1;
+         return -1;
    }
 
    if (dri2_surf->back->dri_image == NULL) {
-- 
GitLab

