From c178febb4e65a16f02a802bf38aa2dba664c129a Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Tue, 28 Feb 2023 09:03:52 +0100
Subject: [PATCH 1/9] nir: add nir_intrinsic_load_poly_line_smooth_enabled

To lower smooth lines conditionally in fragment shaders for RADV
because the line rasterization mode in Vulkan can be dynamic.

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/compiler/nir/nir_divergence_analysis.c | 1 +
 src/compiler/nir/nir_intrinsics.py         | 2 ++
 2 files changed, 3 insertions(+)

diff --git a/src/compiler/nir/nir_divergence_analysis.c b/src/compiler/nir/nir_divergence_analysis.c
index c10350583fd5..5e9bb142c5c7 100644
--- a/src/compiler/nir/nir_divergence_analysis.c
+++ b/src/compiler/nir/nir_divergence_analysis.c
@@ -209,6 +209,7 @@ visit_intrinsic(nir_shader *shader, nir_intrinsic_instr *instr)
    case nir_intrinsic_load_ssbo_uniform_block_intel:
    case nir_intrinsic_load_shared_uniform_block_intel:
    case nir_intrinsic_load_barycentric_optimize_amd:
+   case nir_intrinsic_load_poly_line_smooth_enabled:
       is_divergent = false;
       break;
 
diff --git a/src/compiler/nir/nir_intrinsics.py b/src/compiler/nir/nir_intrinsics.py
index 871ae5a2676a..b88ab97144d4 100644
--- a/src/compiler/nir/nir_intrinsics.py
+++ b/src/compiler/nir/nir_intrinsics.py
@@ -849,6 +849,8 @@ system_value("xfb_index_buffer", 1, bit_sizes=[32,64])
 
 system_value("frag_size", 2)
 system_value("frag_invocation_count", 1)
+# Whether smooth lines or polygon smoothing is enabled
+system_value("poly_line_smooth_enabled", 1, bit_sizes=[1])
 
 # System values for ray tracing.
 system_value("ray_launch_id", 3)
-- 
GitLab


From 9062de71058fb43c297af00928d303a484a69617 Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Tue, 28 Feb 2023 09:08:20 +0100
Subject: [PATCH 2/9] radeonsi: lower
 nir_intrinsic_load_poly_line_smooth_enabled_amd

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/gallium/drivers/radeonsi/si_nir_lower_abi.c | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/src/gallium/drivers/radeonsi/si_nir_lower_abi.c b/src/gallium/drivers/radeonsi/si_nir_lower_abi.c
index 070135c40e21..f8c598880599 100644
--- a/src/gallium/drivers/radeonsi/si_nir_lower_abi.c
+++ b/src/gallium/drivers/radeonsi/si_nir_lower_abi.c
@@ -520,6 +520,9 @@ static bool lower_intrinsic(nir_builder *b, nir_instr *instr, struct lower_abi_s
                                                 .component = 2);
       break;
    }
+   case nir_intrinsic_load_poly_line_smooth_enabled:
+      replacement = nir_imm_bool(b, key->ps.mono.poly_line_smoothing);
+      break;
    default:
       return false;
    }
-- 
GitLab


From 084f00507fb1c29461faf41199f1b20921b4a998 Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Tue, 28 Feb 2023 09:11:19 +0100
Subject: [PATCH 3/9] nir: lower smooth lines conditionally using the new
 intrinsic

RADV will enable/disable this based on a dynamic state.

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/compiler/nir/nir_lower_poly_line_smooth.c | 39 ++++++++++++-------
 1 file changed, 24 insertions(+), 15 deletions(-)

diff --git a/src/compiler/nir/nir_lower_poly_line_smooth.c b/src/compiler/nir/nir_lower_poly_line_smooth.c
index f09fe2191eaf..f9c9ff6d207c 100644
--- a/src/compiler/nir/nir_lower_poly_line_smooth.c
+++ b/src/compiler/nir/nir_lower_poly_line_smooth.c
@@ -51,20 +51,31 @@ lower_polylinesmooth(nir_builder *b, nir_instr *instr, void *data)
    assert(intr->num_components == 4);
 
    b->cursor = nir_before_instr(&intr->instr);
- 
-   nir_ssa_def *coverage = nir_load_sample_mask_in(b);
 
-   /* coverage = (coverage) / SI_NUM_SMOOTH_AA_SAMPLES */
-   coverage = nir_bit_count(b, coverage);
-   coverage = nir_u2f32(b, coverage);
-   coverage = nir_fmul_imm(b, coverage,  1.0 / *num_smooth_aa_sample);
+   nir_ssa_def *res1, *res2;
 
-   /* Write out the fragment color*vec4(1, 1, 1, alpha) */
-   nir_ssa_def *one = nir_imm_float(b, 1.0f);
-   nir_ssa_def *new_val = nir_fmul(b, nir_vec4(b, one, one, one, coverage),
-                                   intr->src[0].ssa);
-   nir_instr_rewrite_src(instr, &intr->src[0], nir_src_for_ssa(new_val));
+   nir_if *if_enabled = nir_push_if(b, nir_load_poly_line_smooth_enabled(b));
+   {
+      nir_ssa_def *coverage = nir_load_sample_mask_in(b);
 
+      /* coverage = (coverage) / SI_NUM_SMOOTH_AA_SAMPLES */
+      coverage = nir_bit_count(b, coverage);
+      coverage = nir_u2f32(b, coverage);
+      coverage = nir_fmul_imm(b, coverage,  1.0 / *num_smooth_aa_sample);
+
+      /* Write out the fragment color*vec4(1, 1, 1, alpha) */
+      nir_ssa_def *one = nir_imm_float(b, 1.0f);
+      res1 = nir_fmul(b, nir_vec4(b, one, one, one, coverage), intr->src[0].ssa);
+   }
+   nir_push_else(b, if_enabled);
+   {
+      res2 = intr->src[0].ssa;
+   }
+   nir_pop_if(b, if_enabled);
+
+   nir_ssa_def *new_dest = nir_if_phi(b, res1, res2);
+
+   nir_instr_rewrite_src(instr, &intr->src[0], nir_src_for_ssa(new_dest));
    return true;
 }
 
@@ -72,8 +83,6 @@ bool
 nir_lower_poly_line_smooth(nir_shader *shader, unsigned num_smooth_aa_sample)
 {
    assert(shader->info.stage == MESA_SHADER_FRAGMENT);
-   return nir_shader_instructions_pass(shader, lower_polylinesmooth,
-                                       nir_metadata_loop_analysis |
-                                       nir_metadata_block_index |
-                                       nir_metadata_dominance, &num_smooth_aa_sample);
+   return nir_shader_instructions_pass(shader, lower_polylinesmooth, 0,
+                                       &num_smooth_aa_sample);
 }
-- 
GitLab


From 7b43e0e9dec4499d05d0afbe867888f6a848bc79 Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Tue, 28 Feb 2023 09:40:48 +0100
Subject: [PATCH 4/9] radv: track if the smoothLines features is enabled in the
 device

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/amd/vulkan/radv_device.c  | 8 ++++++++
 src/amd/vulkan/radv_private.h | 3 +++
 2 files changed, 11 insertions(+)

diff --git a/src/amd/vulkan/radv_device.c b/src/amd/vulkan/radv_device.c
index f5559ba27152..e3bfccec1e9e 100644
--- a/src/amd/vulkan/radv_device.c
+++ b/src/amd/vulkan/radv_device.c
@@ -650,6 +650,7 @@ radv_CreateDevice(VkPhysicalDevice physicalDevice, const VkDeviceCreateInfo *pCr
    bool primitives_generated_query = false;
    bool use_perf_counters = false;
    bool use_dgc = false;
+   bool smooth_lines = false;
 
    /* Check enabled features */
    if (pCreateInfo->pEnabledFeatures) {
@@ -757,6 +758,12 @@ radv_CreateDevice(VkPhysicalDevice physicalDevice, const VkDeviceCreateInfo *pCr
             ps_epilogs = true;
          break;
       }
+      case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT: {
+         const VkPhysicalDeviceLineRasterizationFeaturesEXT *features = (const void *)ext;
+         if (features->smoothLines)
+            smooth_lines = true;
+         break;
+      }
       default:
          break;
       }
@@ -812,6 +819,7 @@ radv_CreateDevice(VkPhysicalDevice physicalDevice, const VkDeviceCreateInfo *pCr
 
    device->primitives_generated_query = primitives_generated_query;
    device->uses_device_generated_commands = use_dgc;
+   device->smooth_lines = smooth_lines;
 
    radv_init_shader_arenas(device);
 
diff --git a/src/amd/vulkan/radv_private.h b/src/amd/vulkan/radv_private.h
index 799802bc95a0..60ea77bb6d4d 100644
--- a/src/amd/vulkan/radv_private.h
+++ b/src/amd/vulkan/radv_private.h
@@ -1099,6 +1099,9 @@ struct radv_device {
 
    bool uses_device_generated_commands;
 
+   /* Whether smooth lines is enabled. */
+   bool smooth_lines;
+
    bool uses_shadow_regs;
 
    struct hash_table *rt_handles;
-- 
GitLab


From 9137114bc2afb7f44cadbc4f4dd35544d8a25109 Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Tue, 28 Feb 2023 09:42:17 +0100
Subject: [PATCH 5/9] radv: determine if smooth lines can be used in the
 pipeline key

Really complicated to reduce the scope because everything can be
dynamic and with GPL you can't even know if the pipeline draws lines
when compiling the fragment shader.

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/amd/vulkan/radv_pipeline_graphics.c | 9 +++++++++
 src/amd/vulkan/radv_shader.h            | 3 +++
 2 files changed, 12 insertions(+)

diff --git a/src/amd/vulkan/radv_pipeline_graphics.c b/src/amd/vulkan/radv_pipeline_graphics.c
index 9f7c8e8dd999..6f8176bd85df 100644
--- a/src/amd/vulkan/radv_pipeline_graphics.c
+++ b/src/amd/vulkan/radv_pipeline_graphics.c
@@ -2113,6 +2113,15 @@ radv_generate_graphics_pipeline_key(const struct radv_device *device,
       key.enable_remove_point_size = true;
    }
 
+   if (device->smooth_lines) {
+      if (pipeline->dynamic_states & RADV_DYNAMIC_LINE_RASTERIZATION_MODE) {
+         key.dynamic_line_rast_mode = true;
+      } else {
+         key.ps.line_smooth_enabled =
+            state->rs && state->rs->line.mode == VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT;
+      }
+   }
+
    return key;
 }
 
diff --git a/src/amd/vulkan/radv_shader.h b/src/amd/vulkan/radv_shader.h
index 96fc1422819f..1d2e4853e3c6 100644
--- a/src/amd/vulkan/radv_shader.h
+++ b/src/amd/vulkan/radv_shader.h
@@ -77,6 +77,7 @@ struct radv_pipeline_key {
    uint32_t dynamic_rasterization_samples : 1;
    uint32_t dynamic_color_write_mask : 1;
    uint32_t dynamic_provoking_vtx_mode : 1;
+   uint32_t dynamic_line_rast_mode : 1;
    uint32_t tex_non_uniform : 1;
    uint32_t enable_remove_point_size : 1;
 
@@ -111,6 +112,8 @@ struct radv_pipeline_key {
 
       bool dynamic_ps_epilog;
       bool has_epilog;
+
+      bool line_smooth_enabled;
    } ps;
 
    struct {
-- 
GitLab


From 567f2854ee91bdc7b2c1857155b200af3cc77e53 Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Tue, 28 Feb 2023 09:24:51 +0100
Subject: [PATCH 6/9] radv: declare a new user SGPR for the dynamic line
 rasterization mode

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/amd/vulkan/radv_shader.h      | 1 +
 src/amd/vulkan/radv_shader_args.c | 3 +++
 src/amd/vulkan/radv_shader_args.h | 1 +
 3 files changed, 5 insertions(+)

diff --git a/src/amd/vulkan/radv_shader.h b/src/amd/vulkan/radv_shader.h
index 1d2e4853e3c6..5e893e574699 100644
--- a/src/amd/vulkan/radv_shader.h
+++ b/src/amd/vulkan/radv_shader.h
@@ -169,6 +169,7 @@ enum radv_ud_index {
    AC_UD_VS_MAX_UD,
    AC_UD_PS_EPILOG_PC,
    AC_UD_PS_NUM_SAMPLES,
+   AC_UD_PS_LINE_RAST_MODE,
    AC_UD_PS_MAX_UD,
    AC_UD_CS_GRID_SIZE = AC_UD_SHADER_START,
    AC_UD_CS_SBT_DESCRIPTORS,
diff --git a/src/amd/vulkan/radv_shader_args.c b/src/amd/vulkan/radv_shader_args.c
index 276527679cb5..dfe11e9aa2b9 100644
--- a/src/amd/vulkan/radv_shader_args.c
+++ b/src/amd/vulkan/radv_shader_args.c
@@ -644,6 +644,9 @@ declare_shader_args(const struct radv_device *device, const struct radv_pipeline
          add_ud_arg(args, 1, AC_ARG_INT, &args->ps_num_samples, AC_UD_PS_NUM_SAMPLES);
       }
 
+      if (key->dynamic_line_rast_mode)
+         add_ud_arg(args, 1, AC_ARG_INT, &args->ps_line_rast_mode, AC_UD_PS_LINE_RAST_MODE);
+
       ac_add_arg(&args->ac, AC_ARG_SGPR, 1, AC_ARG_INT, &args->ac.prim_mask);
       if (args->explicit_scratch_args && gfx_level < GFX11) {
          ac_add_arg(&args->ac, AC_ARG_SGPR, 1, AC_ARG_INT, &args->ac.scratch_offset);
diff --git a/src/amd/vulkan/radv_shader_args.h b/src/amd/vulkan/radv_shader_args.h
index e3fb771de4f2..49928b63986b 100644
--- a/src/amd/vulkan/radv_shader_args.h
+++ b/src/amd/vulkan/radv_shader_args.h
@@ -60,6 +60,7 @@ struct radv_shader_args {
    /* Fragment shaders */
    struct ac_arg ps_epilog_pc;
    struct ac_arg ps_num_samples;
+   struct ac_arg ps_line_rast_mode;
 
    struct ac_arg prolog_inputs;
    struct ac_arg vs_inputs[MAX_VERTEX_ATTRIBS];
-- 
GitLab


From 77f86dd01b6193a96ec7fef8b938142a6ceb1a82 Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Tue, 16 May 2023 10:09:26 +0200
Subject: [PATCH 7/9] radv: lower
 nir_intrinsic_load_poly_line_smooth_enabled_amd

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/amd/vulkan/nir/radv_nir_lower_abi.c | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/src/amd/vulkan/nir/radv_nir_lower_abi.c b/src/amd/vulkan/nir/radv_nir_lower_abi.c
index b5ebccf75aad..898affcbdc68 100644
--- a/src/amd/vulkan/nir/radv_nir_lower_abi.c
+++ b/src/amd/vulkan/nir/radv_nir_lower_abi.c
@@ -460,6 +460,14 @@ lower_abi_instr(nir_builder *b, nir_instr *instr, void *state)
       replacement = nir_ilt(b, prim_mask, nir_imm_int(b, 0));
       break;
    }
+   case nir_intrinsic_load_poly_line_smooth_enabled:
+      if (s->pl_key->dynamic_line_rast_mode) {
+         replacement = nir_ieq_imm(b, ac_nir_load_arg(b, &s->args->ac, s->args->ps_line_rast_mode),
+                                   VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT);
+      } else {
+         replacement = nir_imm_bool(b, s->pl_key->ps.line_smooth_enabled);
+      }
+      break;
    default:
       progress = false;
       break;
-- 
GitLab


From c83c1357f2b8e3c0361decfe9574ec15a8013d42 Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Tue, 28 Feb 2023 09:48:56 +0100
Subject: [PATCH 8/9] radv: add support for smooth lines

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/amd/vulkan/meson.build                    |  1 +
 src/amd/vulkan/nir/radv_nir.h                 |  2 +
 .../nir/radv_nir_lower_poly_line_smooth.c     | 69 +++++++++++++++++++
 src/amd/vulkan/radv_cmd_buffer.c              | 23 +++++++
 src/amd/vulkan/radv_constants.h               |  3 +
 src/amd/vulkan/radv_pipeline_graphics.c       |  4 ++
 6 files changed, 102 insertions(+)
 create mode 100644 src/amd/vulkan/nir/radv_nir_lower_poly_line_smooth.c

diff --git a/src/amd/vulkan/meson.build b/src/amd/vulkan/meson.build
index 67585ad4fe33..ceb8623e8e0d 100644
--- a/src/amd/vulkan/meson.build
+++ b/src/amd/vulkan/meson.build
@@ -78,6 +78,7 @@ libradv_files = files(
   'nir/radv_nir_lower_fs_intrinsics.c',
   'nir/radv_nir_lower_intrinsics_early.c',
   'nir/radv_nir_lower_io.c',
+  'nir/radv_nir_lower_poly_line_smooth.c',
   'nir/radv_nir_lower_primitive_shading_rate.c',
   'nir/radv_nir_lower_ray_queries.c',
   'nir/radv_nir_lower_view_index.c',
diff --git a/src/amd/vulkan/nir/radv_nir.h b/src/amd/vulkan/nir/radv_nir.h
index 99bb361e7169..8b385727b968 100644
--- a/src/amd/vulkan/nir/radv_nir.h
+++ b/src/amd/vulkan/nir/radv_nir.h
@@ -76,6 +76,8 @@ void radv_nir_lower_io(struct radv_device *device, nir_shader *nir);
 
 bool radv_nir_lower_io_to_mem(struct radv_device *device, struct radv_pipeline_stage *stage);
 
+void radv_nir_lower_poly_line_smooth(nir_shader *nir, const struct radv_pipeline_key *key);
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/src/amd/vulkan/nir/radv_nir_lower_poly_line_smooth.c b/src/amd/vulkan/nir/radv_nir_lower_poly_line_smooth.c
new file mode 100644
index 000000000000..ab58fe4a1948
--- /dev/null
+++ b/src/amd/vulkan/nir/radv_nir_lower_poly_line_smooth.c
@@ -0,0 +1,69 @@
+/*
+ * Copyright © 2023 Valve Corporation
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
+ * IN THE SOFTWARE.
+ */
+
+#include "nir.h"
+#include "nir_builder.h"
+#include "radv_nir.h"
+#include "radv_private.h"
+
+static bool
+radv_should_lower_poly_line_smooth(nir_shader *nir, const struct radv_pipeline_key *key)
+{
+   nir_function_impl *impl = nir_shader_get_entrypoint(nir);
+
+   if (!key->ps.line_smooth_enabled && !key->dynamic_line_rast_mode)
+      return false;
+
+   nir_builder b;
+   nir_builder_init(&b, impl);
+
+   nir_foreach_block (block, impl) {
+      nir_foreach_instr (instr, block) {
+         if (instr->type != nir_instr_type_intrinsic)
+            continue;
+
+         nir_intrinsic_instr *intr = nir_instr_as_intrinsic(instr);
+         if (intr->intrinsic != nir_intrinsic_store_output)
+            continue;
+
+         /* Line smooth lowering is only valid for vec4. */
+         if (intr->num_components != 4)
+            return false;
+      }
+   }
+
+   return true;
+}
+
+void
+radv_nir_lower_poly_line_smooth(nir_shader *nir, const struct radv_pipeline_key *key)
+{
+   bool progress = false;
+
+   if (!radv_should_lower_poly_line_smooth(nir, key))
+      return;
+
+   NIR_PASS(progress, nir, nir_lower_poly_line_smooth, RADV_NUM_SMOOTH_AA_SAMPLES);
+   if (progress)
+      nir_shader_gather_info(nir, nir_shader_get_entrypoint(nir));
+}
diff --git a/src/amd/vulkan/radv_cmd_buffer.c b/src/amd/vulkan/radv_cmd_buffer.c
index 0eaad288512e..a11d3f2e3b99 100644
--- a/src/amd/vulkan/radv_cmd_buffer.c
+++ b/src/amd/vulkan/radv_cmd_buffer.c
@@ -965,6 +965,11 @@ radv_get_rasterization_samples(struct radv_cmd_buffer *cmd_buffer)
       return 1;
    }
 
+   if (d->vk.rs.line.mode == VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT &&
+       radv_rast_prim_is_line(radv_get_rasterization_prim(cmd_buffer))) {
+      return RADV_NUM_SMOOTH_AA_SAMPLES;
+   }
+
    return MAX2(1, d->vk.ms.rasterization_samples);
 }
 
@@ -4434,6 +4439,9 @@ radv_emit_msaa_state(struct radv_cmd_buffer *cmd_buffer)
                          S_028BE0_MAX_SAMPLE_DIST(max_sample_dist) |
                          S_028BE0_MSAA_EXPOSED_SAMPLES(log_samples) |
                          S_028BE0_COVERED_CENTROID_IS_CENTER(pdevice->rad_info.gfx_level >= GFX10_3);
+
+      if (d->vk.rs.line.mode == VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT)
+         db_eqaa |= S_028804_OVERRASTERIZATION_AMOUNT(log_samples);
    }
 
    pa_sc_aa_config |= S_028BE0_COVERAGE_TO_SHADER_SELECT(ps && ps->info.ps.reads_fully_covered);
@@ -4464,6 +4472,7 @@ radv_emit_msaa_state(struct radv_cmd_buffer *cmd_buffer)
 static void
 radv_emit_line_rasterization_mode(struct radv_cmd_buffer *cmd_buffer)
 {
+   const struct radv_shader *ps = cmd_buffer->state.shaders[MESA_SHADER_FRAGMENT];
    const struct radv_dynamic_state *d = &cmd_buffer->state.dynamic;
 
    /* The DX10 diamond test is unnecessary with Vulkan and it decreases line rasterization
@@ -4472,6 +4481,15 @@ radv_emit_line_rasterization_mode(struct radv_cmd_buffer *cmd_buffer)
    radeon_set_context_reg(cmd_buffer->cs, R_028BDC_PA_SC_LINE_CNTL,
                           S_028BDC_PERPENDICULAR_ENDCAP_ENA(
                              d->vk.rs.line.mode == VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT));
+
+   if (cmd_buffer->state.shaders[MESA_SHADER_FRAGMENT]) {
+      const struct radv_userdata_info *loc = radv_get_user_sgpr(
+         cmd_buffer->state.shaders[MESA_SHADER_FRAGMENT], AC_UD_PS_LINE_RAST_MODE);
+      if (loc->sgpr_idx != -1) {
+         uint32_t base_reg = ps->info.user_data_0;
+         radeon_set_sh_reg(cmd_buffer->cs, base_reg + loc->sgpr_idx * 4, d->vk.rs.line.mode);
+      }
+   }
 }
 
 static void
@@ -6619,6 +6637,11 @@ radv_bind_fragment_shader(struct radv_cmd_buffer *cmd_buffer, const struct radv_
       cmd_buffer->state.dirty |= RADV_CMD_DIRTY_DYNAMIC_RASTERIZATION_SAMPLES;
    }
 
+   /* Re-emit the line rasterization mode state because the SGPR idx can be different. */
+   if (radv_get_user_sgpr(ps, AC_UD_PS_LINE_RAST_MODE)->sgpr_idx != -1) {
+      cmd_buffer->state.dirty |= RADV_CMD_DIRTY_DYNAMIC_LINE_RASTERIZATION_MODE;
+   }
+
    /* Re-emit the conservative rasterization mode because inner coverage is different. */
    if (previous_ps && previous_ps->info.ps.reads_fully_covered != ps->info.ps.reads_fully_covered)
       cmd_buffer->state.dirty |= RADV_CMD_DIRTY_DYNAMIC_CONSERVATIVE_RAST_MODE;
diff --git a/src/amd/vulkan/radv_constants.h b/src/amd/vulkan/radv_constants.h
index 946c66c8bbe3..6d8d12b90b6e 100644
--- a/src/amd/vulkan/radv_constants.h
+++ b/src/amd/vulkan/radv_constants.h
@@ -152,4 +152,7 @@
 #define RADV_NGG_QUERY_PRIM_GEN_OFFSET(stream) (20 + stream * 4)
 #define RADV_NGG_QUERY_PRIM_XFB_OFFSET(stream) (36 + stream * 4)
 
+/* Number of samples for line smooth lowering (hw requirement). */
+#define RADV_NUM_SMOOTH_AA_SAMPLES 4
+
 #endif /* RADV_CONSTANTS_H */
diff --git a/src/amd/vulkan/radv_pipeline_graphics.c b/src/amd/vulkan/radv_pipeline_graphics.c
index 6f8176bd85df..3ee8521c0fd0 100644
--- a/src/amd/vulkan/radv_pipeline_graphics.c
+++ b/src/amd/vulkan/radv_pipeline_graphics.c
@@ -2761,6 +2761,10 @@ radv_graphics_pipeline_compile(struct radv_graphics_pipeline *pipeline,
       stages[i].feedback.duration += os_time_get_nano() - stage_start;
    }
 
+   if (stages[MESA_SHADER_FRAGMENT].nir) {
+      radv_nir_lower_poly_line_smooth(stages[MESA_SHADER_FRAGMENT].nir, pipeline_key);
+   }
+
    radv_fill_shader_info(device, pipeline, pipeline_layout, pipeline_key, stages,
                          active_nir_stages);
 
-- 
GitLab


From 5752c054602a718f9a8b853e7a70f22b4d26a893 Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Tue, 28 Feb 2023 09:10:30 +0100
Subject: [PATCH 9/9] radv: enable smoothLines

For Zink.

This marks one piglit test as expected failure because polygon
smoothing can't be implemented properly in Vulkan.

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/amd/vulkan/radv_physical_device.c                   | 2 +-
 src/gallium/drivers/zink/ci/zink-radv-navi10-fails.txt  | 3 +++
 src/gallium/drivers/zink/ci/zink-radv-vangogh-fails.txt | 3 +++
 3 files changed, 7 insertions(+), 1 deletion(-)

diff --git a/src/amd/vulkan/radv_physical_device.c b/src/amd/vulkan/radv_physical_device.c
index 9bec94268feb..6f5dbb623ac0 100644
--- a/src/amd/vulkan/radv_physical_device.c
+++ b/src/amd/vulkan/radv_physical_device.c
@@ -795,7 +795,7 @@ radv_physical_device_get_features(const struct radv_physical_device *pdevice,
       /* VK_EXT_line_rasterization */
       .rectangularLines = true,
       .bresenhamLines = true,
-      .smoothLines = false,
+      .smoothLines = true,
       .stippledRectangularLines = false,
       /* FIXME: Some stippled Bresenham CTS fails on Vega10
        * but work on Raven.
diff --git a/src/gallium/drivers/zink/ci/zink-radv-navi10-fails.txt b/src/gallium/drivers/zink/ci/zink-radv-navi10-fails.txt
index b0f525a8b5aa..b4fd08d25cde 100644
--- a/src/gallium/drivers/zink/ci/zink-radv-navi10-fails.txt
+++ b/src/gallium/drivers/zink/ci/zink-radv-navi10-fails.txt
@@ -452,3 +452,6 @@ spec@ext_packed_depth_stencil@fbo-clear-formats stencil,Fail
 spec@ext_packed_depth_stencil@fbo-clear-formats stencil@GL_DEPTH_STENCIL,Fail
 spec@ext_packed_depth_stencil@fbo-depthstencil-gl_depth24_stencil8-drawpixels-float-and-ushort,Fail
 spec@ext_packed_depth_stencil@fbo-stencil-gl_depth24_stencil8-drawpixels,Fail
+
+# Polygon smoothing isn't supported in Vulkan.
+spec@!opengl 1.0@gl-1.0-polygon-line-aa,Fail
diff --git a/src/gallium/drivers/zink/ci/zink-radv-vangogh-fails.txt b/src/gallium/drivers/zink/ci/zink-radv-vangogh-fails.txt
index 28e926f04cc7..7ccbe7c36b56 100644
--- a/src/gallium/drivers/zink/ci/zink-radv-vangogh-fails.txt
+++ b/src/gallium/drivers/zink/ci/zink-radv-vangogh-fails.txt
@@ -456,3 +456,6 @@ spec@ext_packed_depth_stencil@fbo-clear-formats stencil,Fail
 spec@ext_packed_depth_stencil@fbo-clear-formats stencil@GL_DEPTH_STENCIL,Fail
 spec@ext_packed_depth_stencil@fbo-depthstencil-gl_depth24_stencil8-drawpixels-float-and-ushort,Fail
 spec@ext_packed_depth_stencil@fbo-stencil-gl_depth24_stencil8-drawpixels,Fail
+
+# Polygon smoothing isn't supported in Vulkan.
+spec@!opengl 1.0@gl-1.0-polygon-line-aa,Fail
-- 
GitLab

