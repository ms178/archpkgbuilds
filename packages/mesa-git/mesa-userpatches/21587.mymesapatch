From d47295e15a4d0b9f6a0f3a171215c3c9a3268b70 Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Tue, 28 Feb 2023 09:03:52 +0100
Subject: [PATCH 01/10] nir: add nir_intrinsic_load_line_smooth_enabled

To lower smooth lines conditionally in fragment shaders for RADV
because the line rasterization mode in Vulkan can be dynamic.

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/compiler/nir/nir_divergence_analysis.c | 1 +
 src/compiler/nir/nir_intrinsics.py         | 2 ++
 2 files changed, 3 insertions(+)

diff --git a/src/compiler/nir/nir_divergence_analysis.c b/src/compiler/nir/nir_divergence_analysis.c
index f40b672ae55a..99ab1ae0cf00 100644
--- a/src/compiler/nir/nir_divergence_analysis.c
+++ b/src/compiler/nir/nir_divergence_analysis.c
@@ -209,6 +209,7 @@ visit_intrinsic(nir_shader *shader, nir_intrinsic_instr *instr)
    case nir_intrinsic_load_ssbo_uniform_block_intel:
    case nir_intrinsic_load_shared_uniform_block_intel:
    case nir_intrinsic_load_barycentric_optimize_amd:
+   case nir_intrinsic_load_line_smooth_enabled:
       is_divergent = false;
       break;
 
diff --git a/src/compiler/nir/nir_intrinsics.py b/src/compiler/nir/nir_intrinsics.py
index 830b2f42e282..ee1a268a06d7 100644
--- a/src/compiler/nir/nir_intrinsics.py
+++ b/src/compiler/nir/nir_intrinsics.py
@@ -875,6 +875,8 @@ system_value("xfb_index_buffer", 1, bit_sizes=[32,64])
 
 system_value("frag_size", 2)
 system_value("frag_invocation_count", 1)
+# Whether smooth lines drawing is enabled
+system_value("line_smooth_enabled", 1, bit_sizes=[1])
 
 # System values for ray tracing.
 system_value("ray_launch_id", 3)
-- 
GitLab


From 7ae019bbe2dcafb6819b6c1cd3f255efc866a62e Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Tue, 28 Feb 2023 09:08:20 +0100
Subject: [PATCH 02/10] radeonsi: lower
 nir_intrinsic_load_line_smooth_enabled_amd

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/gallium/drivers/radeonsi/si_nir_lower_abi.c | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/src/gallium/drivers/radeonsi/si_nir_lower_abi.c b/src/gallium/drivers/radeonsi/si_nir_lower_abi.c
index 473f035dc71f..3bd774f543e6 100644
--- a/src/gallium/drivers/radeonsi/si_nir_lower_abi.c
+++ b/src/gallium/drivers/radeonsi/si_nir_lower_abi.c
@@ -511,6 +511,9 @@ static bool lower_abi_instr(nir_builder *b, nir_instr *instr, struct lower_abi_s
       replacement = nir_vec(b, color, 4);
       break;
    }
+   case nir_intrinsic_load_line_smooth_enabled:
+      replacement = nir_imm_bool(b, key->ps.mono.poly_line_smoothing);
+      break;
    default:
       return false;
    }
-- 
GitLab


From 3e424c0c6f2ec3b0d08853c38749334a5041dace Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Tue, 28 Feb 2023 09:11:19 +0100
Subject: [PATCH 03/10] nir: lower smooth lines conditionally using the new
 intrinsic

RADV will enable/disable this based on a dynamic state.

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/compiler/nir/nir_lower_poly_line_smooth.c | 39 ++++++++++++-------
 1 file changed, 24 insertions(+), 15 deletions(-)

diff --git a/src/compiler/nir/nir_lower_poly_line_smooth.c b/src/compiler/nir/nir_lower_poly_line_smooth.c
index f09fe2191eaf..c32141044d8c 100644
--- a/src/compiler/nir/nir_lower_poly_line_smooth.c
+++ b/src/compiler/nir/nir_lower_poly_line_smooth.c
@@ -51,20 +51,31 @@ lower_polylinesmooth(nir_builder *b, nir_instr *instr, void *data)
    assert(intr->num_components == 4);
 
    b->cursor = nir_before_instr(&intr->instr);
- 
-   nir_ssa_def *coverage = nir_load_sample_mask_in(b);
 
-   /* coverage = (coverage) / SI_NUM_SMOOTH_AA_SAMPLES */
-   coverage = nir_bit_count(b, coverage);
-   coverage = nir_u2f32(b, coverage);
-   coverage = nir_fmul_imm(b, coverage,  1.0 / *num_smooth_aa_sample);
+   nir_ssa_def *res1, *res2;
 
-   /* Write out the fragment color*vec4(1, 1, 1, alpha) */
-   nir_ssa_def *one = nir_imm_float(b, 1.0f);
-   nir_ssa_def *new_val = nir_fmul(b, nir_vec4(b, one, one, one, coverage),
-                                   intr->src[0].ssa);
-   nir_instr_rewrite_src(instr, &intr->src[0], nir_src_for_ssa(new_val));
+   nir_push_if(b, nir_load_line_smooth_enabled(b));
+   {
+      nir_ssa_def *coverage = nir_load_sample_mask_in(b);
 
+      /* coverage = (coverage) / SI_NUM_SMOOTH_AA_SAMPLES */
+      coverage = nir_bit_count(b, coverage);
+      coverage = nir_u2f32(b, coverage);
+      coverage = nir_fmul_imm(b, coverage,  1.0 / *num_smooth_aa_sample);
+
+      /* Write out the fragment color*vec4(1, 1, 1, alpha) */
+      nir_ssa_def *one = nir_imm_float(b, 1.0f);
+      res1 = nir_fmul(b, nir_vec4(b, one, one, one, coverage), intr->src[0].ssa);
+   }
+   nir_push_else(b, NULL);
+   {
+      res2 = intr->src[0].ssa;
+   }
+   nir_pop_if(b, NULL);
+
+   nir_ssa_def *new_dest = nir_if_phi(b, res1, res2);
+
+   nir_instr_rewrite_src(instr, &intr->src[0], nir_src_for_ssa(new_dest));
    return true;
 }
 
@@ -72,8 +83,6 @@ bool
 nir_lower_poly_line_smooth(nir_shader *shader, unsigned num_smooth_aa_sample)
 {
    assert(shader->info.stage == MESA_SHADER_FRAGMENT);
-   return nir_shader_instructions_pass(shader, lower_polylinesmooth,
-                                       nir_metadata_loop_analysis |
-                                       nir_metadata_block_index |
-                                       nir_metadata_dominance, &num_smooth_aa_sample);
+   return nir_shader_instructions_pass(shader, lower_polylinesmooth, 0,
+                                       &num_smooth_aa_sample);
 }
-- 
GitLab


From 00f219a99f1fe32e161c61213bcc4210278b1df2 Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Tue, 4 Apr 2023 09:48:53 +0200
Subject: [PATCH 04/10] nir: skip smooth lines lowering for non-vec4 FS color
 outputs

Instead of asserting.

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/compiler/nir/nir_lower_poly_line_smooth.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/compiler/nir/nir_lower_poly_line_smooth.c b/src/compiler/nir/nir_lower_poly_line_smooth.c
index c32141044d8c..6efa93b5c749 100644
--- a/src/compiler/nir/nir_lower_poly_line_smooth.c
+++ b/src/compiler/nir/nir_lower_poly_line_smooth.c
@@ -44,11 +44,11 @@ lower_polylinesmooth(nir_builder *b, nir_instr *instr, void *data)
 
    int location = nir_intrinsic_io_semantics(intr).location;
    if ((location != FRAG_RESULT_COLOR && location < FRAG_RESULT_DATA0) ||
-       nir_intrinsic_src_type(intr) != nir_type_float32)
+       nir_intrinsic_src_type(intr) != nir_type_float32 ||
+       intr->num_components != 4)
       return false;
 
    assert(intr->src[0].is_ssa);
-   assert(intr->num_components == 4);
 
    b->cursor = nir_before_instr(&intr->instr);
 
-- 
GitLab


From 91f420b9cf8db6175a05336d71c458477c20b934 Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Tue, 28 Feb 2023 09:40:48 +0100
Subject: [PATCH 05/10] radv: track if the smoothLines features is enabled in
 the device

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/amd/vulkan/radv_device.c  | 8 ++++++++
 src/amd/vulkan/radv_private.h | 3 +++
 2 files changed, 11 insertions(+)

diff --git a/src/amd/vulkan/radv_device.c b/src/amd/vulkan/radv_device.c
index 9d44b143fc3f..2179feca1264 100644
--- a/src/amd/vulkan/radv_device.c
+++ b/src/amd/vulkan/radv_device.c
@@ -647,6 +647,7 @@ radv_CreateDevice(VkPhysicalDevice physicalDevice, const VkDeviceCreateInfo *pCr
    bool primitives_generated_query = false;
    bool use_perf_counters = false;
    bool use_dgc = false;
+   bool smooth_lines = false;
 
    /* Check enabled features */
    if (pCreateInfo->pEnabledFeatures) {
@@ -754,6 +755,12 @@ radv_CreateDevice(VkPhysicalDevice physicalDevice, const VkDeviceCreateInfo *pCr
             ps_epilogs = true;
          break;
       }
+      case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT: {
+         const VkPhysicalDeviceLineRasterizationFeaturesEXT *features = (const void *)ext;
+         if (features->smoothLines)
+            smooth_lines = true;
+         break;
+      }
       default:
          break;
       }
@@ -809,6 +816,7 @@ radv_CreateDevice(VkPhysicalDevice physicalDevice, const VkDeviceCreateInfo *pCr
 
    device->primitives_generated_query = primitives_generated_query;
    device->uses_device_generated_commands = use_dgc;
+   device->smooth_lines = smooth_lines;
 
    radv_init_shader_arenas(device);
 
diff --git a/src/amd/vulkan/radv_private.h b/src/amd/vulkan/radv_private.h
index f0fea917c91f..4e640c651c7a 100644
--- a/src/amd/vulkan/radv_private.h
+++ b/src/amd/vulkan/radv_private.h
@@ -1082,6 +1082,9 @@ struct radv_device {
 
    bool uses_device_generated_commands;
 
+   /* Whether smooth lines is enabled. */
+   bool smooth_lines;
+
    bool uses_shadow_regs;
 
    struct hash_table *rt_handles;
-- 
GitLab


From 71819252509baa576c4b483e88a905b13b328c48 Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Tue, 28 Feb 2023 09:42:17 +0100
Subject: [PATCH 06/10] radv: determine if smooth lines can be used in the
 pipeline key

Really complicated to reduce the scope because everything can be
dynamic and with GPL you can't even know if the pipeline draws lines
when compiling the fragment shader.

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/amd/vulkan/radv_pipeline_graphics.c | 9 +++++++++
 src/amd/vulkan/radv_shader.h            | 3 +++
 2 files changed, 12 insertions(+)

diff --git a/src/amd/vulkan/radv_pipeline_graphics.c b/src/amd/vulkan/radv_pipeline_graphics.c
index db5a51608e47..ed1d0ae258a0 100644
--- a/src/amd/vulkan/radv_pipeline_graphics.c
+++ b/src/amd/vulkan/radv_pipeline_graphics.c
@@ -2096,6 +2096,15 @@ radv_generate_graphics_pipeline_key(const struct radv_device *device,
       key.enable_remove_point_size = true;
    }
 
+   if (device->smooth_lines) {
+      if (pipeline->dynamic_states & RADV_DYNAMIC_LINE_RASTERIZATION_MODE) {
+         key.dynamic_line_rast_mode = true;
+      } else {
+         key.ps.line_smooth_enabled =
+            state->rs && state->rs->line.mode == VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT;
+      }
+   }
+
    return key;
 }
 
diff --git a/src/amd/vulkan/radv_shader.h b/src/amd/vulkan/radv_shader.h
index 21554d3dd300..0821ebbcdfc6 100644
--- a/src/amd/vulkan/radv_shader.h
+++ b/src/amd/vulkan/radv_shader.h
@@ -76,6 +76,7 @@ struct radv_pipeline_key {
    uint32_t dynamic_rasterization_samples : 1;
    uint32_t dynamic_color_write_mask : 1;
    uint32_t dynamic_provoking_vtx_mode : 1;
+   uint32_t dynamic_line_rast_mode : 1;
    uint32_t tex_non_uniform : 1;
    uint32_t enable_remove_point_size : 1;
 
@@ -110,6 +111,8 @@ struct radv_pipeline_key {
 
       bool dynamic_ps_epilog;
       bool has_epilog;
+
+      bool line_smooth_enabled;
    } ps;
 
    struct {
-- 
GitLab


From 072df927799d8e14a7254e48e4b1a2732fc1c0b2 Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Tue, 28 Feb 2023 09:24:51 +0100
Subject: [PATCH 07/10] radv: declare a new user SGPR for the dynamic line
 rasterization mode

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/amd/vulkan/radv_shader.h      | 1 +
 src/amd/vulkan/radv_shader_args.c | 3 +++
 src/amd/vulkan/radv_shader_args.h | 1 +
 3 files changed, 5 insertions(+)

diff --git a/src/amd/vulkan/radv_shader.h b/src/amd/vulkan/radv_shader.h
index 0821ebbcdfc6..efaaca33f578 100644
--- a/src/amd/vulkan/radv_shader.h
+++ b/src/amd/vulkan/radv_shader.h
@@ -168,6 +168,7 @@ enum radv_ud_index {
    AC_UD_VS_MAX_UD,
    AC_UD_PS_EPILOG_PC,
    AC_UD_PS_NUM_SAMPLES,
+   AC_UD_PS_LINE_RAST_MODE,
    AC_UD_PS_MAX_UD,
    AC_UD_CS_GRID_SIZE = AC_UD_SHADER_START,
    AC_UD_CS_SBT_DESCRIPTORS,
diff --git a/src/amd/vulkan/radv_shader_args.c b/src/amd/vulkan/radv_shader_args.c
index c51b9bbc8df3..0983a7c680df 100644
--- a/src/amd/vulkan/radv_shader_args.c
+++ b/src/amd/vulkan/radv_shader_args.c
@@ -663,6 +663,9 @@ declare_shader_args(const struct radv_device *device, const struct radv_pipeline
          add_ud_arg(args, 1, AC_ARG_INT, &args->ps_num_samples, AC_UD_PS_NUM_SAMPLES);
       }
 
+      if (key->dynamic_line_rast_mode)
+         add_ud_arg(args, 1, AC_ARG_INT, &args->ps_line_rast_mode, AC_UD_PS_LINE_RAST_MODE);
+
       ac_add_arg(&args->ac, AC_ARG_SGPR, 1, AC_ARG_INT, &args->ac.prim_mask);
       if (args->explicit_scratch_args && gfx_level < GFX11) {
          ac_add_arg(&args->ac, AC_ARG_SGPR, 1, AC_ARG_INT, &args->ac.scratch_offset);
diff --git a/src/amd/vulkan/radv_shader_args.h b/src/amd/vulkan/radv_shader_args.h
index e3fb771de4f2..49928b63986b 100644
--- a/src/amd/vulkan/radv_shader_args.h
+++ b/src/amd/vulkan/radv_shader_args.h
@@ -60,6 +60,7 @@ struct radv_shader_args {
    /* Fragment shaders */
    struct ac_arg ps_epilog_pc;
    struct ac_arg ps_num_samples;
+   struct ac_arg ps_line_rast_mode;
 
    struct ac_arg prolog_inputs;
    struct ac_arg vs_inputs[MAX_VERTEX_ATTRIBS];
-- 
GitLab


From b9bd0d318e8aced047564323937d3092f9c2f3ab Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Tue, 28 Feb 2023 09:09:24 +0100
Subject: [PATCH 08/10] radv: lower nir_intrinsic_load_line_smooth_enabled_amd

Currently unused.

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/amd/vulkan/nir/radv_nir_lower_abi.c | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/src/amd/vulkan/nir/radv_nir_lower_abi.c b/src/amd/vulkan/nir/radv_nir_lower_abi.c
index 3b23fce62245..53a884c262e7 100644
--- a/src/amd/vulkan/nir/radv_nir_lower_abi.c
+++ b/src/amd/vulkan/nir/radv_nir_lower_abi.c
@@ -454,6 +454,14 @@ lower_abi_instr(nir_builder *b, nir_instr *instr, void *state)
       replacement = nir_ine_imm(b, sample_coverage, 0);
       break;
    }
+   case nir_intrinsic_load_line_smooth_enabled:
+      if (s->pl_key->dynamic_line_rast_mode) {
+         replacement = nir_ieq_imm(b, ac_nir_load_arg(b, &s->args->ac, s->args->ps_line_rast_mode),
+                                      VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT);
+      } else {
+         replacement = nir_imm_bool(b, s->pl_key->ps.line_smooth_enabled);
+      }
+      break;
    default:
       progress = false;
       break;
-- 
GitLab


From 5219dc132e017535cc4eb3865e080c2bcc5448b5 Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Tue, 28 Feb 2023 09:48:56 +0100
Subject: [PATCH 09/10] radv: add support for smooth lines

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/amd/vulkan/radv_cmd_buffer.c        | 48 ++++++++++++++++++-------
 src/amd/vulkan/radv_pipeline_graphics.c | 11 ++++++
 2 files changed, 46 insertions(+), 13 deletions(-)

diff --git a/src/amd/vulkan/radv_cmd_buffer.c b/src/amd/vulkan/radv_cmd_buffer.c
index 5cc066e7e65c..29e1b5380c40 100644
--- a/src/amd/vulkan/radv_cmd_buffer.c
+++ b/src/amd/vulkan/radv_cmd_buffer.c
@@ -948,18 +948,24 @@ radv_get_rasterization_samples(struct radv_cmd_buffer *cmd_buffer)
 {
    const struct radv_dynamic_state *d = &cmd_buffer->state.dynamic;
 
-   if (d->vk.rs.line.mode == VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT &&
-       radv_rast_prim_is_line(radv_get_rasterization_prim(cmd_buffer))) {
-      /* From the Vulkan spec 1.3.221:
-       *
-       * "When Bresenham lines are being rasterized, sample locations may all be treated as being at
-       * the pixel center (this may affect attribute and depth interpolation)."
-       *
-       * "One consequence of this is that Bresenham lines cover the same pixels regardless of the
-       * number of rasterization samples, and cover all samples in those pixels (unless masked out
-       * or killed)."
-       */
-      return 1;
+   if (radv_rast_prim_is_line(radv_get_rasterization_prim(cmd_buffer))) {
+      switch (d->vk.rs.line.mode) {
+      case VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT:
+         /* From the Vulkan spec 1.3.221:
+          *
+          * "When Bresenham lines are being rasterized, sample locations may all be treated as being
+          * at the pixel center (this may affect attribute and depth interpolation)."
+          *
+          * "One consequence of this is that Bresenham lines cover the same pixels regardless of the
+          * number of rasterization samples, and cover all samples in those pixels (unless masked
+          * out or killed)."
+          */
+         return 1;
+      case VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT:
+         return 4;
+      default:
+         break;
+      }
    }
 
    return MAX2(1, d->vk.ms.rasterization_samples);
@@ -4384,6 +4390,9 @@ radv_emit_msaa_state(struct radv_cmd_buffer *cmd_buffer)
                          S_028BE0_MAX_SAMPLE_DIST(max_sample_dist) |
                          S_028BE0_MSAA_EXPOSED_SAMPLES(log_samples) |
                          S_028BE0_COVERED_CENTROID_IS_CENTER(pdevice->rad_info.gfx_level >= GFX10_3);
+
+      if (d->vk.rs.line.mode == VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT)
+         db_eqaa |= S_028804_OVERRASTERIZATION_AMOUNT(log_samples);
    }
 
    pa_sc_aa_config |= S_028BE0_COVERAGE_TO_SHADER_SELECT(ps->info.ps.reads_fully_covered);
@@ -4414,6 +4423,7 @@ radv_emit_msaa_state(struct radv_cmd_buffer *cmd_buffer)
 static void
 radv_emit_line_rasterization_mode(struct radv_cmd_buffer *cmd_buffer)
 {
+   const struct radv_shader *ps = cmd_buffer->state.shaders[MESA_SHADER_FRAGMENT];
    const struct radv_dynamic_state *d = &cmd_buffer->state.dynamic;
 
    /* The DX10 diamond test is unnecessary with Vulkan and it decreases line rasterization
@@ -4421,7 +4431,14 @@ radv_emit_line_rasterization_mode(struct radv_cmd_buffer *cmd_buffer)
     */
    radeon_set_context_reg(cmd_buffer->cs, R_028BDC_PA_SC_LINE_CNTL,
                           S_028BDC_PERPENDICULAR_ENDCAP_ENA(
-                             d->vk.rs.line.mode == VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT));
+                             d->vk.rs.line.mode == VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT ||
+                             d->vk.rs.line.mode == VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT));
+
+   const struct radv_userdata_info *loc = radv_get_user_sgpr(ps, AC_UD_PS_LINE_RAST_MODE);
+   if (loc->sgpr_idx != -1) {
+      uint32_t base_reg = ps->info.user_data_0;
+      radeon_set_sh_reg(cmd_buffer->cs, base_reg + loc->sgpr_idx * 4, d->vk.rs.line.mode);
+   }
 }
 
 static void
@@ -6529,6 +6546,11 @@ radv_bind_fragment_shader(struct radv_cmd_buffer *cmd_buffer, const struct radv_
       cmd_buffer->state.dirty |= RADV_CMD_DIRTY_DYNAMIC_RASTERIZATION_SAMPLES;
    }
 
+   /* Re-emit the line rasterization mode state because the SGPR idx can be different. */
+   if (radv_get_user_sgpr(ps, AC_UD_PS_LINE_RAST_MODE)->sgpr_idx != -1) {
+      cmd_buffer->state.dirty |= RADV_CMD_DIRTY_DYNAMIC_LINE_RASTERIZATION_MODE;
+   }
+
    /* Re-emit the conservative rasterization mode because inner coverage is different. */
    if (previous_ps && previous_ps->info.ps.reads_fully_covered != ps->info.ps.reads_fully_covered)
       cmd_buffer->state.dirty |= RADV_CMD_DIRTY_DYNAMIC_CONSERVATIVE_RAST_MODE;
diff --git a/src/amd/vulkan/radv_pipeline_graphics.c b/src/amd/vulkan/radv_pipeline_graphics.c
index ed1d0ae258a0..2d8b2fa31151 100644
--- a/src/amd/vulkan/radv_pipeline_graphics.c
+++ b/src/amd/vulkan/radv_pipeline_graphics.c
@@ -2797,6 +2797,17 @@ radv_graphics_pipeline_compile(struct radv_graphics_pipeline *pipeline,
       stages[i].feedback.duration += os_time_get_nano() - stage_start;
    }
 
+   if (stages[MESA_SHADER_FRAGMENT].nir &&
+       (pipeline_key->ps.line_smooth_enabled || pipeline_key->dynamic_line_rast_mode)) {
+      bool progress = false;
+      NIR_PASS(progress, stages[MESA_SHADER_FRAGMENT].nir, nir_lower_poly_line_smooth, 4);
+
+      if (progress) {
+         nir_shader_gather_info(stages[MESA_SHADER_FRAGMENT].nir,
+                                nir_shader_get_entrypoint(stages[MESA_SHADER_FRAGMENT].nir));
+      }
+   }
+
    radv_fill_shader_info(device, pipeline, pipeline_layout, pipeline_key, stages, noop_fs,
                          active_nir_stages);
 
-- 
GitLab


From 58e902c309925e41b20c1194724cae6d50d80bb0 Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Tue, 28 Feb 2023 09:10:30 +0100
Subject: [PATCH 10/10] radv: enable smoothLines

For Zink.

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/amd/vulkan/radv_physical_device.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/amd/vulkan/radv_physical_device.c b/src/amd/vulkan/radv_physical_device.c
index 53fb6cf3c867..41016de2bed4 100644
--- a/src/amd/vulkan/radv_physical_device.c
+++ b/src/amd/vulkan/radv_physical_device.c
@@ -908,7 +908,7 @@ radv_GetPhysicalDeviceFeatures2(VkPhysicalDevice physicalDevice,
             (VkPhysicalDeviceLineRasterizationFeaturesEXT *)ext;
          features->rectangularLines = true;
          features->bresenhamLines = true;
-         features->smoothLines = false;
+         features->smoothLines = true;
          features->stippledRectangularLines = false;
          /* FIXME: Some stippled Bresenham CTS fails on Vega10
           * but work on Raven.
-- 
GitLab

