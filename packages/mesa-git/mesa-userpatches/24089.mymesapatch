From d6f44d088da66e13d2eb38328c96cf35c15fd0f3 Mon Sep 17 00:00:00 2001
From: Pierre-Eric Pelloux-Prayer <pierre-eric.pelloux-prayer@amd.com>
Date: Tue, 11 Jul 2023 15:49:30 +0200
Subject: [PATCH 1/2] ac/llvm: make ac_build_set_inactive non static

We'll use it from ac_nir_to_llvm in the next commit.

cc: mesa-stable
---
 src/amd/llvm/ac_llvm_build.c | 4 ++--
 src/amd/llvm/ac_llvm_build.h | 3 +++
 2 files changed, 5 insertions(+), 2 deletions(-)

diff --git a/src/amd/llvm/ac_llvm_build.c b/src/amd/llvm/ac_llvm_build.c
index 5ef1d28f58e5b..6062733471f0c 100644
--- a/src/amd/llvm/ac_llvm_build.c
+++ b/src/amd/llvm/ac_llvm_build.c
@@ -2975,8 +2975,8 @@ static LLVMValueRef ac_build_wwm(struct ac_llvm_context *ctx, LLVMValueRef src)
    return LLVMBuildBitCast(ctx->builder, ret, src_type, "");
 }
 
-static LLVMValueRef ac_build_set_inactive(struct ac_llvm_context *ctx, LLVMValueRef src,
-                                          LLVMValueRef inactive)
+LLVMValueRef ac_build_set_inactive(struct ac_llvm_context *ctx, LLVMValueRef src,
+                                   LLVMValueRef inactive)
 {
    char name[33], type[8];
    LLVMTypeRef src_type = LLVMTypeOf(src);
diff --git a/src/amd/llvm/ac_llvm_build.h b/src/amd/llvm/ac_llvm_build.h
index 52eecc03f16fd..03f57e67726a1 100644
--- a/src/amd/llvm/ac_llvm_build.h
+++ b/src/amd/llvm/ac_llvm_build.h
@@ -476,6 +476,9 @@ LLVMValueRef ac_build_reduce(struct ac_llvm_context *ctx, LLVMValueRef src, nir_
 LLVMValueRef ac_build_quad_swizzle(struct ac_llvm_context *ctx, LLVMValueRef src, unsigned lane0,
                                    unsigned lane1, unsigned lane2, unsigned lane3);
 
+LLVMValueRef ac_build_set_inactive(struct ac_llvm_context *ctx, LLVMValueRef src,
+                                   LLVMValueRef inactive);
+
 LLVMValueRef ac_build_shuffle(struct ac_llvm_context *ctx, LLVMValueRef src, LLVMValueRef index);
 
 LLVMValueRef ac_build_frexp_exp(struct ac_llvm_context *ctx, LLVMValueRef src0, unsigned bitsize);
-- 
GitLab


From 55c072c1719e7e18689b28ed55c4b2504c70c92f Mon Sep 17 00:00:00 2001
From: Pierre-Eric Pelloux-Prayer <pierre-eric.pelloux-prayer@amd.com>
Date: Tue, 11 Jul 2023 15:50:05 +0200
Subject: [PATCH 2/2] ac/llvm: use set.inactive for dual source blends

Dual source blend export instrinction enables strict WQM mode.
So we need to use set.inactive to avoid the WQM mode to leak in the rest
of the shader.

The _ac_build_dual_src_blend_swizzle changes deal with PS epilog, and the
nir_intrinsic_quad_swizzle_amd one deals with monolithic PS.

Closes: https://gitlab.freedesktop.org/mesa/mesa/-/issues/9239
cc: mesa-stable
---
 src/amd/llvm/ac_llvm_build.c  | 4 ++--
 src/amd/llvm/ac_nir_to_llvm.c | 9 ++++++++-
 2 files changed, 10 insertions(+), 3 deletions(-)

diff --git a/src/amd/llvm/ac_llvm_build.c b/src/amd/llvm/ac_llvm_build.c
index 6062733471f0c..24eb5bfe6c562 100644
--- a/src/amd/llvm/ac_llvm_build.c
+++ b/src/amd/llvm/ac_llvm_build.c
@@ -3485,7 +3485,7 @@ static void _ac_build_dual_src_blend_swizzle(struct ac_llvm_context *ctx,
    src1 = LLVMBuildBitCast(ctx->builder, *arg1, ctx->i32, "");
 
    /* swap odd,even lanes of arg_0*/
-   params[0] = src0;
+   params[0] = ac_build_set_inactive(ctx, src0, LLVMGetPoison(ctx->i32));
    params[1] = LLVMConstInt(ctx->i32, 0xde54c1, 0);
    src0 = ac_build_intrinsic(ctx, "llvm.amdgcn.mov.dpp8.i32",
                              ctx->i32, params, 2, 0);
@@ -3500,7 +3500,7 @@ static void _ac_build_dual_src_blend_swizzle(struct ac_llvm_context *ctx,
    src1 = LLVMBuildSelect(ctx->builder, is_even, tmp0, src1, "");
 
    /* swap odd,even lanes again for arg_0*/
-   params[0] = src0;
+   params[0] = ac_build_set_inactive(ctx, src0, LLVMGetPoison(ctx->i32));
    params[1] = LLVMConstInt(ctx->i32, 0xde54c1, 0);
    src0 = ac_build_intrinsic(ctx, "llvm.amdgcn.mov.dpp8.i32",
                              ctx->i32, params, 2, 0);
diff --git a/src/amd/llvm/ac_nir_to_llvm.c b/src/amd/llvm/ac_nir_to_llvm.c
index e40bea6077050..7ee8e5c110fbf 100644
--- a/src/amd/llvm/ac_nir_to_llvm.c
+++ b/src/amd/llvm/ac_nir_to_llvm.c
@@ -3423,7 +3423,14 @@ static bool visit_intrinsic(struct ac_nir_context *ctx, nir_intrinsic_instr *ins
       break;
    case nir_intrinsic_quad_swizzle_amd: {
       uint32_t mask = nir_intrinsic_swizzle_mask(instr);
-      result = ac_build_quad_swizzle(&ctx->ac, get_src(ctx, instr->src[0]), mask & 0x3,
+      LLVMValueRef src = get_src(ctx, instr->src[0]);
+      #if LLVM_VERSION_MAJOR >= 16
+      /* This is required for dual source blending (see #9239).
+       * Only use this for LLVM 16+ because it's not helping with older versions.
+       */
+      src = ac_build_set_inactive(&ctx->ac, src, LLVMGetPoison(ctx->ac.i32));
+      #endif
+      result = ac_build_quad_swizzle(&ctx->ac, src, mask & 0x3,
                                      (mask >> 2) & 0x3, (mask >> 4) & 0x3, (mask >> 6) & 0x3);
       break;
    }
-- 
GitLab

