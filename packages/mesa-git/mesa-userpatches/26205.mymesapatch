From 3db38a24d69d1e6733d911bc3595d8bcc9352b10 Mon Sep 17 00:00:00 2001
From: Simon Ser <contact@emersion.fr>
Date: Wed, 15 Nov 2023 12:51:57 +0100
Subject: [PATCH 1/3] egl: extract EGLDevice setup in dedicated function

Extract the logic responsible for populating disp->Device via
_eglFindDevice(). This isn't much for now but will grow in a
following commit.

No functional changes.

Signed-off-by: Simon Ser <contact@emersion.fr>
---
 src/egl/drivers/dri2/egl_dri2.c         | 14 ++++++++++++++
 src/egl/drivers/dri2/egl_dri2.h         |  3 +++
 src/egl/drivers/dri2/platform_android.c |  8 ++------
 src/egl/drivers/dri2/platform_drm.c     |  8 ++------
 src/egl/drivers/dri2/platform_wayland.c | 16 ++++------------
 src/egl/drivers/dri2/platform_x11.c     | 24 ++++++------------------
 6 files changed, 31 insertions(+), 42 deletions(-)

diff --git a/src/egl/drivers/dri2/egl_dri2.c b/src/egl/drivers/dri2/egl_dri2.c
index c3fb706bff1f3..77de3c0bb8852 100644
--- a/src/egl/drivers/dri2/egl_dri2.c
+++ b/src/egl/drivers/dri2/egl_dri2.c
@@ -1075,6 +1075,20 @@ dri2_setup_extensions(_EGLDisplay *disp)
    return EGL_TRUE;
 }
 
+EGLBoolean
+dri2_setup_device(_EGLDisplay *disp, EGLBoolean software)
+{
+   struct dri2_egl_display *dri2_dpy = dri2_egl_display(disp);
+   _EGLDevice *dev;
+
+   dev = _eglFindDevice(dri2_dpy->fd_render_gpu, software);
+   if (!dev)
+      return EGL_FALSE;
+
+   disp->Device = dev;
+   return EGL_TRUE;
+}
+
 /**
  * Called via eglInitialize(), drv->Initialize().
  *
diff --git a/src/egl/drivers/dri2/egl_dri2.h b/src/egl/drivers/dri2/egl_dri2.h
index bb09ceb8e9396..5edd810f476b1 100644
--- a/src/egl/drivers/dri2/egl_dri2.h
+++ b/src/egl/drivers/dri2/egl_dri2.h
@@ -483,6 +483,9 @@ dri2_create_screen(_EGLDisplay *disp);
 EGLBoolean
 dri2_setup_extensions(_EGLDisplay *disp);
 
+EGLBoolean
+dri2_setup_device(_EGLDisplay *disp, EGLBoolean software);
+
 __DRIdrawable *
 dri2_surface_get_dri_drawable(_EGLSurface *surf);
 
diff --git a/src/egl/drivers/dri2/platform_android.c b/src/egl/drivers/dri2/platform_android.c
index b0b327036fe68..476f4cca73c15 100644
--- a/src/egl/drivers/dri2/platform_android.c
+++ b/src/egl/drivers/dri2/platform_android.c
@@ -1476,7 +1476,6 @@ droid_open_device(_EGLDisplay *disp, bool swrast)
 EGLBoolean
 dri2_initialize_android(_EGLDisplay *disp)
 {
-   _EGLDevice *dev;
    bool device_opened = false;
    struct dri2_egl_display *dri2_dpy;
    const char *err;
@@ -1505,14 +1504,11 @@ dri2_initialize_android(_EGLDisplay *disp)
 
    dri2_dpy->fd_display_gpu = dri2_dpy->fd_render_gpu;
 
-   dev = _eglFindDevice(dri2_dpy->fd_render_gpu, false);
-   if (!dev) {
-      err = "DRI2: failed to find EGLDevice";
+   if (!dri2_setup_device(disp, false)) {
+      err = "DRI2: failed to setup EGLDevice";
       goto cleanup;
    }
 
-   disp->Device = dev;
-
    if (!dri2_setup_extensions(disp)) {
       err = "DRI2: failed to setup extensions";
       goto cleanup;
diff --git a/src/egl/drivers/dri2/platform_drm.c b/src/egl/drivers/dri2/platform_drm.c
index ec492d5e76d37..2f15ee7a47aa6 100644
--- a/src/egl/drivers/dri2/platform_drm.c
+++ b/src/egl/drivers/dri2/platform_drm.c
@@ -579,7 +579,6 @@ get_fd_render_gpu_drm(struct gbm_dri_device *gbm_dri, int fd_display_gpu)
 EGLBoolean
 dri2_initialize_drm(_EGLDisplay *disp)
 {
-   _EGLDevice *dev;
    struct gbm_device *gbm;
    const char *err;
    struct dri2_egl_display *dri2_dpy = dri2_display_create();
@@ -640,14 +639,11 @@ dri2_initialize_drm(_EGLDisplay *disp)
       goto cleanup;
    }
 
-   dev = _eglFindDevice(dri2_dpy->fd_render_gpu, dri2_dpy->gbm_dri->software);
-   if (!dev) {
-      err = "DRI2: failed to find EGLDevice";
+   if (!dri2_setup_device(disp, dri2_dpy->gbm_dri->software)) {
+      err = "DRI2: failed to setup EGLDevice";
       goto cleanup;
    }
 
-   disp->Device = dev;
-
    dri2_dpy->driver_name = strdup(dri2_dpy->gbm_dri->driver_name);
 
    if (!dri2_load_driver_dri3(disp)) {
diff --git a/src/egl/drivers/dri2/platform_wayland.c b/src/egl/drivers/dri2/platform_wayland.c
index 8922a1e1a8b38..ea54c5434ccaa 100644
--- a/src/egl/drivers/dri2/platform_wayland.c
+++ b/src/egl/drivers/dri2/platform_wayland.c
@@ -2161,7 +2161,6 @@ dri2_initialize_wayland_drm_extensions(struct dri2_egl_display *dri2_dpy)
 static EGLBoolean
 dri2_initialize_wayland_drm(_EGLDisplay *disp)
 {
-   _EGLDevice *dev;
    struct dri2_egl_display *dri2_dpy = dri2_display_create();
    if (!dri2_dpy)
       return EGL_FALSE;
@@ -2205,14 +2204,11 @@ dri2_initialize_wayland_drm(_EGLDisplay *disp)
    loader_get_user_preferred_fd(&dri2_dpy->fd_render_gpu,
                                 &dri2_dpy->fd_display_gpu);
 
-   dev = _eglFindDevice(dri2_dpy->fd_render_gpu, false);
-   if (!dev) {
-      _eglError(EGL_NOT_INITIALIZED, "DRI2: failed to find EGLDevice");
+   if (!dri2_setup_device(disp, false)) {
+      _eglError(EGL_NOT_INITIALIZED, "DRI2: failed to setup EGLDevice");
       goto cleanup;
    }
 
-   disp->Device = dev;
-
    if (dri2_dpy->fd_render_gpu != dri2_dpy->fd_display_gpu) {
       free(dri2_dpy->device_name);
       dri2_dpy->device_name =
@@ -2730,7 +2726,6 @@ static const __DRIextension *swrast_loader_extensions[] = {
 static EGLBoolean
 dri2_initialize_wayland_swrast(_EGLDisplay *disp)
 {
-   _EGLDevice *dev;
    struct dri2_egl_display *dri2_dpy = dri2_display_create();
    if (!dri2_dpy)
       return EGL_FALSE;
@@ -2776,14 +2771,11 @@ dri2_initialize_wayland_swrast(_EGLDisplay *disp)
    if (disp->Options.Zink)
       dri2_initialize_wayland_drm_extensions(dri2_dpy);
 
-   dev = _eglFindDevice(dri2_dpy->fd_render_gpu, true);
-   if (!dev) {
-      _eglError(EGL_NOT_INITIALIZED, "DRI2: failed to find EGLDevice");
+   if (!dri2_setup_device(disp, true)) {
+      _eglError(EGL_NOT_INITIALIZED, "DRI2: failed to setup EGLDevice");
       goto cleanup;
    }
 
-   disp->Device = dev;
-
    dri2_dpy->driver_name = strdup(disp->Options.Zink ? "zink" : "swrast");
    if (!dri2_load_driver_swrast(disp))
       goto cleanup;
diff --git a/src/egl/drivers/dri2/platform_x11.c b/src/egl/drivers/dri2/platform_x11.c
index a4c64f8fe08c8..c6d88d03e28f1 100644
--- a/src/egl/drivers/dri2/platform_x11.c
+++ b/src/egl/drivers/dri2/platform_x11.c
@@ -1505,7 +1505,6 @@ dri2_x11_setup_swap_interval(_EGLDisplay *disp)
 static EGLBoolean
 dri2_initialize_x11_swrast(_EGLDisplay *disp)
 {
-   _EGLDevice *dev;
    struct dri2_egl_display *dri2_dpy = dri2_display_create();
    if (!dri2_dpy)
       return EGL_FALSE;
@@ -1513,14 +1512,11 @@ dri2_initialize_x11_swrast(_EGLDisplay *disp)
    if (!dri2_get_xcb_connection(disp, dri2_dpy))
       goto cleanup;
 
-   dev = _eglFindDevice(dri2_dpy->fd_render_gpu, true);
-   if (!dev) {
-      _eglError(EGL_NOT_INITIALIZED, "DRI2: failed to find EGLDevice");
+   if (!dri2_setup_device(disp, true)) {
+      _eglError(EGL_NOT_INITIALIZED, "DRI2: failed to setup EGLDevice");
       goto cleanup;
    }
 
-   disp->Device = dev;
-
    /*
     * Every hardware driver_name is set using strdup. Doing the same in
     * here will allow is to simply free the memory at dri2_terminate().
@@ -1595,7 +1591,6 @@ static const __DRIextension *dri3_image_loader_extensions[] = {
 static EGLBoolean
 dri2_initialize_x11_dri3(_EGLDisplay *disp)
 {
-   _EGLDevice *dev;
    struct dri2_egl_display *dri2_dpy = dri2_display_create();
 
    if (!dri2_dpy)
@@ -1607,14 +1602,11 @@ dri2_initialize_x11_dri3(_EGLDisplay *disp)
    if (!dri3_x11_connect(dri2_dpy))
       goto cleanup;
 
-   dev = _eglFindDevice(dri2_dpy->fd_render_gpu, false);
-   if (!dev) {
-      _eglError(EGL_NOT_INITIALIZED, "DRI2: failed to find EGLDevice");
+   if (!dri2_setup_device(disp, false)) {
+      _eglError(EGL_NOT_INITIALIZED, "DRI2: failed to setup EGLDevice");
       goto cleanup;
    }
 
-   disp->Device = dev;
-
    if (!dri2_load_driver_dri3(disp))
       goto cleanup;
 
@@ -1705,7 +1697,6 @@ static const __DRIextension *dri2_loader_extensions[] = {
 static EGLBoolean
 dri2_initialize_x11_dri2(_EGLDisplay *disp)
 {
-   _EGLDevice *dev;
    struct dri2_egl_display *dri2_dpy = dri2_display_create();
    if (!dri2_dpy)
       return EGL_FALSE;
@@ -1716,14 +1707,11 @@ dri2_initialize_x11_dri2(_EGLDisplay *disp)
    if (!dri2_x11_connect(dri2_dpy))
       goto cleanup;
 
-   dev = _eglFindDevice(dri2_dpy->fd_render_gpu, false);
-   if (!dev) {
-      _eglError(EGL_NOT_INITIALIZED, "DRI2: failed to find EGLDevice");
+   if (!dri2_setup_device(disp, false)) {
+      _eglError(EGL_NOT_INITIALIZED, "DRI2: failed to setup EGLDevice");
       goto cleanup;
    }
 
-   disp->Device = dev;
-
    if (!dri2_load_driver(disp))
       goto cleanup;
 
-- 
GitLab


From 04d2b6c2c0c0c1c9cf514270262be144000dc4d9 Mon Sep 17 00:00:00 2001
From: Simon Ser <contact@emersion.fr>
Date: Wed, 15 Nov 2023 12:56:35 +0100
Subject: [PATCH 2/3] egl: move dri2_setup_device() after
 dri2_setup_extensions()

dri2_setup_device() will depend on the extensions being set up in
the next commit.

None of the code in-between depends on disp->Device AFAIU.

Signed-off-by: Simon Ser <contact@emersion.fr>
---
 src/egl/drivers/dri2/platform_android.c |  8 +++----
 src/egl/drivers/dri2/platform_drm.c     | 10 ++++-----
 src/egl/drivers/dri2/platform_wayland.c | 20 ++++++++---------
 src/egl/drivers/dri2/platform_x11.c     | 30 ++++++++++++-------------
 4 files changed, 34 insertions(+), 34 deletions(-)

diff --git a/src/egl/drivers/dri2/platform_android.c b/src/egl/drivers/dri2/platform_android.c
index 476f4cca73c15..4fb5621edf806 100644
--- a/src/egl/drivers/dri2/platform_android.c
+++ b/src/egl/drivers/dri2/platform_android.c
@@ -1504,13 +1504,13 @@ dri2_initialize_android(_EGLDisplay *disp)
 
    dri2_dpy->fd_display_gpu = dri2_dpy->fd_render_gpu;
 
-   if (!dri2_setup_device(disp, false)) {
-      err = "DRI2: failed to setup EGLDevice";
+   if (!dri2_setup_extensions(disp)) {
+      err = "DRI2: failed to setup extensions";
       goto cleanup;
    }
 
-   if (!dri2_setup_extensions(disp)) {
-      err = "DRI2: failed to setup extensions";
+   if (!dri2_setup_device(disp, false)) {
+      err = "DRI2: failed to setup EGLDevice";
       goto cleanup;
    }
 
diff --git a/src/egl/drivers/dri2/platform_drm.c b/src/egl/drivers/dri2/platform_drm.c
index 2f15ee7a47aa6..9ae16f384e22f 100644
--- a/src/egl/drivers/dri2/platform_drm.c
+++ b/src/egl/drivers/dri2/platform_drm.c
@@ -639,11 +639,6 @@ dri2_initialize_drm(_EGLDisplay *disp)
       goto cleanup;
    }
 
-   if (!dri2_setup_device(disp, dri2_dpy->gbm_dri->software)) {
-      err = "DRI2: failed to setup EGLDevice";
-      goto cleanup;
-   }
-
    dri2_dpy->driver_name = strdup(dri2_dpy->gbm_dri->driver_name);
 
    if (!dri2_load_driver_dri3(disp)) {
@@ -677,6 +672,11 @@ dri2_initialize_drm(_EGLDisplay *disp)
       goto cleanup;
    }
 
+   if (!dri2_setup_device(disp, dri2_dpy->gbm_dri->software)) {
+      err = "DRI2: failed to setup EGLDevice";
+      goto cleanup;
+   }
+
    dri2_setup_screen(disp);
 
    if (!drm_add_configs_for_visuals(disp)) {
diff --git a/src/egl/drivers/dri2/platform_wayland.c b/src/egl/drivers/dri2/platform_wayland.c
index ea54c5434ccaa..b86328f360335 100644
--- a/src/egl/drivers/dri2/platform_wayland.c
+++ b/src/egl/drivers/dri2/platform_wayland.c
@@ -2204,11 +2204,6 @@ dri2_initialize_wayland_drm(_EGLDisplay *disp)
    loader_get_user_preferred_fd(&dri2_dpy->fd_render_gpu,
                                 &dri2_dpy->fd_display_gpu);
 
-   if (!dri2_setup_device(disp, false)) {
-      _eglError(EGL_NOT_INITIALIZED, "DRI2: failed to setup EGLDevice");
-      goto cleanup;
-   }
-
    if (dri2_dpy->fd_render_gpu != dri2_dpy->fd_display_gpu) {
       free(dri2_dpy->device_name);
       dri2_dpy->device_name =
@@ -2245,6 +2240,11 @@ dri2_initialize_wayland_drm(_EGLDisplay *disp)
    if (!dri2_setup_extensions(disp))
       goto cleanup;
 
+   if (!dri2_setup_device(disp, false)) {
+      _eglError(EGL_NOT_INITIALIZED, "DRI2: failed to setup EGLDevice");
+      goto cleanup;
+   }
+
    dri2_setup_screen(disp);
 
    dri2_wl_setup_swap_interval(disp);
@@ -2771,11 +2771,6 @@ dri2_initialize_wayland_swrast(_EGLDisplay *disp)
    if (disp->Options.Zink)
       dri2_initialize_wayland_drm_extensions(dri2_dpy);
 
-   if (!dri2_setup_device(disp, true)) {
-      _eglError(EGL_NOT_INITIALIZED, "DRI2: failed to setup EGLDevice");
-      goto cleanup;
-   }
-
    dri2_dpy->driver_name = strdup(disp->Options.Zink ? "zink" : "swrast");
    if (!dri2_load_driver_swrast(disp))
       goto cleanup;
@@ -2788,6 +2783,11 @@ dri2_initialize_wayland_swrast(_EGLDisplay *disp)
    if (!dri2_setup_extensions(disp))
       goto cleanup;
 
+   if (!dri2_setup_device(disp, true)) {
+      _eglError(EGL_NOT_INITIALIZED, "DRI2: failed to setup EGLDevice");
+      goto cleanup;
+   }
+
    dri2_setup_screen(disp);
 
    dri2_wl_setup_swap_interval(disp);
diff --git a/src/egl/drivers/dri2/platform_x11.c b/src/egl/drivers/dri2/platform_x11.c
index c6d88d03e28f1..6af987ed7ad1c 100644
--- a/src/egl/drivers/dri2/platform_x11.c
+++ b/src/egl/drivers/dri2/platform_x11.c
@@ -1512,11 +1512,6 @@ dri2_initialize_x11_swrast(_EGLDisplay *disp)
    if (!dri2_get_xcb_connection(disp, dri2_dpy))
       goto cleanup;
 
-   if (!dri2_setup_device(disp, true)) {
-      _eglError(EGL_NOT_INITIALIZED, "DRI2: failed to setup EGLDevice");
-      goto cleanup;
-   }
-
    /*
     * Every hardware driver_name is set using strdup. Doing the same in
     * here will allow is to simply free the memory at dri2_terminate().
@@ -1536,6 +1531,11 @@ dri2_initialize_x11_swrast(_EGLDisplay *disp)
    if (!dri2_setup_extensions(disp))
       goto cleanup;
 
+   if (!dri2_setup_device(disp, true)) {
+      _eglError(EGL_NOT_INITIALIZED, "DRI2: failed to setup EGLDevice");
+      goto cleanup;
+   }
+
    dri2_setup_screen(disp);
 
    if (disp->Options.Zink) {
@@ -1602,11 +1602,6 @@ dri2_initialize_x11_dri3(_EGLDisplay *disp)
    if (!dri3_x11_connect(dri2_dpy))
       goto cleanup;
 
-   if (!dri2_setup_device(disp, false)) {
-      _eglError(EGL_NOT_INITIALIZED, "DRI2: failed to setup EGLDevice");
-      goto cleanup;
-   }
-
    if (!dri2_load_driver_dri3(disp))
       goto cleanup;
 
@@ -1621,6 +1616,11 @@ dri2_initialize_x11_dri3(_EGLDisplay *disp)
    if (!dri2_setup_extensions(disp))
       goto cleanup;
 
+   if (!dri2_setup_device(disp, false)) {
+      _eglError(EGL_NOT_INITIALIZED, "DRI2: failed to setup EGLDevice");
+      goto cleanup;
+   }
+
    dri2_setup_screen(disp);
 
    dri2_x11_setup_swap_interval(disp);
@@ -1707,11 +1707,6 @@ dri2_initialize_x11_dri2(_EGLDisplay *disp)
    if (!dri2_x11_connect(dri2_dpy))
       goto cleanup;
 
-   if (!dri2_setup_device(disp, false)) {
-      _eglError(EGL_NOT_INITIALIZED, "DRI2: failed to setup EGLDevice");
-      goto cleanup;
-   }
-
    if (!dri2_load_driver(disp))
       goto cleanup;
 
@@ -1729,6 +1724,11 @@ dri2_initialize_x11_dri2(_EGLDisplay *disp)
    if (!dri2_setup_extensions(disp))
       goto cleanup;
 
+   if (!dri2_setup_device(disp, false)) {
+      _eglError(EGL_NOT_INITIALIZED, "DRI2: failed to setup EGLDevice");
+      goto cleanup;
+   }
+
    dri2_setup_screen(disp);
 
    dri2_x11_setup_swap_interval(disp);
-- 
GitLab


From d9f951747abb6756eeda85f0202a1d17bcd557db Mon Sep 17 00:00:00 2001
From: Simon Ser <contact@emersion.fr>
Date: Wed, 15 Nov 2023 12:59:40 +0100
Subject: [PATCH 3/3] egl: ensure a render node is passed to _eglFindDevice()

_eglFindDevice() will fail if it's not provided a render node:
the EGLDevice list only contains one entry per render node, plus
the special software device. Passing a primary node for a
display-only device will not work.

Signed-off-by: Simon Ser <contact@emersion.fr>
Closes: https://gitlab.freedesktop.org/mesa/mesa/-/issues/10142
---
 src/egl/drivers/dri2/egl_dri2.c | 24 +++++++++++++++++++++++-
 1 file changed, 23 insertions(+), 1 deletion(-)

diff --git a/src/egl/drivers/dri2/egl_dri2.c b/src/egl/drivers/dri2/egl_dri2.c
index 77de3c0bb8852..4ef6e3f2334d4 100644
--- a/src/egl/drivers/dri2/egl_dri2.c
+++ b/src/egl/drivers/dri2/egl_dri2.c
@@ -1080,8 +1080,30 @@ dri2_setup_device(_EGLDisplay *disp, EGLBoolean software)
 {
    struct dri2_egl_display *dri2_dpy = dri2_egl_display(disp);
    _EGLDevice *dev;
+   int render_fd;
+
+   /* Extensions must be loaded before calling this function */
+   assert(dri2_dpy->mesa);
+   /* If we're not software, we need a DRM node FD */
+   assert(software || dri2_dpy->fd_render_gpu >= 0);
+
+   /* fd_render_gpu is what we got from WSI, so might actually be a lie and
+    * not a render node... */
+   if (software) {
+      render_fd = -1;
+   } else if (loader_is_device_render_capable(dri2_dpy->fd_render_gpu)) {
+      render_fd = dri2_dpy->fd_render_gpu;
+   } else {
+      render_fd = dri2_dpy->mesa->queryCompatibleRenderOnlyDeviceFd(dri2_dpy->fd_render_gpu);
+      if (render_fd < 0)
+         return EGL_FALSE;
+   }
+
+   dev = _eglFindDevice(render_fd, software);
+
+   if (render_fd >= 0 && render_fd != dri2_dpy->fd_render_gpu)
+      close(render_fd);
 
-   dev = _eglFindDevice(dri2_dpy->fd_render_gpu, software);
    if (!dev)
       return EGL_FALSE;
 
-- 
GitLab

