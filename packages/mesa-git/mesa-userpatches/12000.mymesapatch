From 4b4143158183259a171b8610e3aca6cb4fc54a9b Mon Sep 17 00:00:00 2001
From: Tony Wasserka <tony.wasserka@gmx.de>
Date: Tue, 20 Jul 2021 17:05:43 +0200
Subject: [PATCH 1/3] aco/spill: Use arena allocator for next use distances

---
 src/amd/compiler/aco_spill.cpp | 14 ++++++++++----
 src/amd/compiler/meson.build   |  2 +-
 2 files changed, 11 insertions(+), 5 deletions(-)

diff --git a/src/amd/compiler/aco_spill.cpp b/src/amd/compiler/aco_spill.cpp
index e712920f53ec..5bf7f2f3af7a 100644
--- a/src/amd/compiler/aco_spill.cpp
+++ b/src/amd/compiler/aco_spill.cpp
@@ -31,6 +31,7 @@
 #include <algorithm>
 #include <cstring>
 #include <map>
+#include <memory_resource>
 #include <set>
 #include <stack>
 #include <unordered_map>
@@ -70,10 +71,14 @@ struct spill_ctx {
    std::vector<std::unordered_map<Temp, uint32_t>> spills_entry;
    std::vector<std::unordered_map<Temp, uint32_t>> spills_exit;
 
+   std::pmr::monotonic_buffer_resource memory;
+
    std::vector<bool> processed;
    std::stack<Block*, std::vector<Block*>> loop_header;
-   std::vector<std::unordered_map<Temp, std::pair<uint32_t, uint32_t>>> next_use_distances_start;
-   std::vector<std::unordered_map<Temp, std::pair<uint32_t, uint32_t>>> next_use_distances_end;
+   using next_use_distance_startend_type =
+      std::pmr::unordered_map<Temp, std::pair<uint32_t, uint32_t>>;
+   std::pmr::vector<next_use_distance_startend_type> next_use_distances_start;
+   std::pmr::vector<next_use_distance_startend_type> next_use_distances_end;
    std::vector<std::vector<std::pair<Temp, uint32_t>>> local_next_use_distance; /* Working buffer */
    std::vector<std::pair<RegClass, std::unordered_set<uint32_t>>> interferences;
    std::vector<std::vector<uint32_t>> affinities;
@@ -91,8 +96,9 @@ struct spill_ctx {
        : target_pressure(target_pressure_), program(program_),
          register_demand(std::move(register_demand_)), renames(program->blocks.size()),
          spills_entry(program->blocks.size()), spills_exit(program->blocks.size()),
-         processed(program->blocks.size(), false), wave_size(program->wave_size),
-         sgpr_spill_slots(0), vgpr_spill_slots(0)
+         processed(program->blocks.size(), false), next_use_distances_start(&memory),
+         next_use_distances_end(&memory), wave_size(program->wave_size), sgpr_spill_slots(0),
+         vgpr_spill_slots(0)
    {}
 
    void add_affinity(uint32_t first, uint32_t second)
diff --git a/src/amd/compiler/meson.build b/src/amd/compiler/meson.build
index 9e47b69f4dbf..4608b142a0ac 100644
--- a/src/amd/compiler/meson.build
+++ b/src/amd/compiler/meson.build
@@ -82,7 +82,7 @@ libaco_files = files(
   'aco_validate.cpp',
 )
 
-cpp_args_aco = cpp.get_supported_arguments(['-fno-exceptions', '-fno-rtti', '-Wimplicit-fallthrough', '-Wshadow', '-DNOMINMAX'])
+cpp_args_aco = cpp.get_supported_arguments(['-fno-exceptions', '-fno-rtti', '-Wimplicit-fallthrough', '-Wshadow', '-DNOMINMAX', '-std=c++17'])
 
 _libaco = static_library(
   'aco',
-- 
GitLab


From bc0c3da7aceea3db39b252d3509933598b9f80ab Mon Sep 17 00:00:00 2001
From: Tony Wasserka <tony.wasserka@gmx.de>
Date: Wed, 21 Jul 2021 11:44:45 +0200
Subject: [PATCH 2/3] aco/spill: Destroy next use distance maps through the
 allocator

---
 src/amd/compiler/aco_spill.cpp | 26 +++++++++++++++++++++-----
 1 file changed, 21 insertions(+), 5 deletions(-)

diff --git a/src/amd/compiler/aco_spill.cpp b/src/amd/compiler/aco_spill.cpp
index 5bf7f2f3af7a..5f3dcab9c04a 100644
--- a/src/amd/compiler/aco_spill.cpp
+++ b/src/amd/compiler/aco_spill.cpp
@@ -63,6 +63,15 @@ struct remat_info {
    Instruction* instr;
 };
 
+/* Drop-in replacement for C++20's std::pmr::polymorphic_allocator<T>::new_object */
+template <typename T, typename Alloc, typename... Args>
+[[nodiscard]] T*
+new_object(Alloc& alloc, Args&&... args)
+{
+   void* ptr = alloc.allocate(sizeof(T), alignof(T));
+   return new (ptr) T(std::forward<Args>(args)...);
+}
+
 struct spill_ctx {
    RegisterDemand target_pressure;
    Program* program;
@@ -77,8 +86,12 @@ struct spill_ctx {
    std::stack<Block*, std::vector<Block*>> loop_header;
    using next_use_distance_startend_type =
       std::pmr::unordered_map<Temp, std::pair<uint32_t, uint32_t>>;
-   std::pmr::vector<next_use_distance_startend_type> next_use_distances_start;
-   std::pmr::vector<next_use_distance_startend_type> next_use_distances_end;
+   std::pmr::vector<next_use_distance_startend_type>* next_use_distances_start_ptr;
+   std::pmr::vector<next_use_distance_startend_type>* next_use_distances_end_ptr;
+   std::pmr::vector<next_use_distance_startend_type>& next_use_distances_start =
+      *next_use_distances_start_ptr;
+   std::pmr::vector<next_use_distance_startend_type>& next_use_distances_end =
+      *next_use_distances_end_ptr;
    std::vector<std::vector<std::pair<Temp, uint32_t>>> local_next_use_distance; /* Working buffer */
    std::vector<std::pair<RegClass, std::unordered_set<uint32_t>>> interferences;
    std::vector<std::vector<uint32_t>> affinities;
@@ -96,9 +109,12 @@ struct spill_ctx {
        : target_pressure(target_pressure_), program(program_),
          register_demand(std::move(register_demand_)), renames(program->blocks.size()),
          spills_entry(program->blocks.size()), spills_exit(program->blocks.size()),
-         processed(program->blocks.size(), false), next_use_distances_start(&memory),
-         next_use_distances_end(&memory), wave_size(program->wave_size), sgpr_spill_slots(0),
-         vgpr_spill_slots(0)
+         processed(program->blocks.size(), false),
+         next_use_distances_start_ptr(
+            new_object<std::pmr::vector<next_use_distance_startend_type>>(memory, &memory)),
+         next_use_distances_end_ptr(
+            new_object<std::pmr::vector<next_use_distance_startend_type>>(memory, &memory)),
+         wave_size(program->wave_size), sgpr_spill_slots(0), vgpr_spill_slots(0)
    {}
 
    void add_affinity(uint32_t first, uint32_t second)
-- 
GitLab


From 859b756b5f3729c440a7c3a59200e48baf18305c Mon Sep 17 00:00:00 2001
From: Tony Wasserka <tony.wasserka@gmx.de>
Date: Wed, 21 Jul 2021 17:19:13 +0200
Subject: [PATCH 3/3] aco/spill: Use arena allocator for spills

---
 src/amd/compiler/aco_spill.cpp | 13 +++++++------
 1 file changed, 7 insertions(+), 6 deletions(-)

diff --git a/src/amd/compiler/aco_spill.cpp b/src/amd/compiler/aco_spill.cpp
index 5f3dcab9c04a..2bff72ed22aa 100644
--- a/src/amd/compiler/aco_spill.cpp
+++ b/src/amd/compiler/aco_spill.cpp
@@ -75,13 +75,14 @@ new_object(Alloc& alloc, Args&&... args)
 struct spill_ctx {
    RegisterDemand target_pressure;
    Program* program;
-   std::vector<std::vector<RegisterDemand>> register_demand;
-   std::vector<std::map<Temp, Temp>> renames;
-   std::vector<std::unordered_map<Temp, uint32_t>> spills_entry;
-   std::vector<std::unordered_map<Temp, uint32_t>> spills_exit;
 
    std::pmr::monotonic_buffer_resource memory;
 
+   std::vector<std::vector<RegisterDemand>> register_demand;
+   std::vector<std::map<Temp, Temp>> renames;
+   std::pmr::vector<std::pmr::unordered_map<Temp, uint32_t>> spills_entry;
+   std::pmr::vector<std::pmr::unordered_map<Temp, uint32_t>> spills_exit;
+
    std::vector<bool> processed;
    std::stack<Block*, std::vector<Block*>> loop_header;
    using next_use_distance_startend_type =
@@ -108,8 +109,8 @@ struct spill_ctx {
              std::vector<std::vector<RegisterDemand>> register_demand_)
        : target_pressure(target_pressure_), program(program_),
          register_demand(std::move(register_demand_)), renames(program->blocks.size()),
-         spills_entry(program->blocks.size()), spills_exit(program->blocks.size()),
-         processed(program->blocks.size(), false),
+         spills_entry(program->blocks.size(), &memory),
+         spills_exit(program->blocks.size(), &memory), processed(program->blocks.size(), false),
          next_use_distances_start_ptr(
             new_object<std::pmr::vector<next_use_distance_startend_type>>(memory, &memory)),
          next_use_distances_end_ptr(
-- 
GitLab

