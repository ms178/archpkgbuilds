From cb62ec8128cef1046fdabc5bc65b6d043c7837e6 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Daniel=20Sch=C3=BCrmann?= <daniel@schuermann.dev>
Date: Thu, 6 Apr 2023 16:57:31 +0200
Subject: [PATCH 1/2] util/disk_cache: enable Mesa-DB disk cache by default

---
 docs/envvars.rst              | 33 +++++++++++++++------------------
 src/util/disk_cache.c         |  6 +++---
 src/util/tests/cache_test.cpp |  8 ++++----
 3 files changed, 22 insertions(+), 25 deletions(-)

diff --git a/docs/envvars.rst b/docs/envvars.rst
index c4f61ff6774ba..dfb9d2efc0663 100644
--- a/docs/envvars.rst
+++ b/docs/envvars.rst
@@ -204,8 +204,8 @@ Core Mesa environment variables
 
    if set, determines the directory to be used for the on-disk cache of
    compiled shader programs. If this variable is not set, then the cache
-   will be stored in ``$XDG_CACHE_HOME/mesa_shader_cache`` (if that
-   variable is set), or else within ``.cache/mesa_shader_cache`` within
+   will be stored in ``$XDG_CACHE_HOME/mesa_shader_cache_db`` (if that
+   variable is set), or else within ``.cache/mesa_shader_cache_db`` within
    the user's home directory.
 
 .. envvar:: MESA_SHADER_CACHE_SHOW_STATS
@@ -216,10 +216,9 @@ Core Mesa environment variables
 .. envvar:: MESA_DISK_CACHE_SINGLE_FILE
 
    if set to 1, enables the single file Fossilize DB on-disk shader
-   cache implementation instead of the default multi-file cache
-   implementation. This implementation reduces the overall disk usage by
-   the shader cache and also allows for loading of precompiled cache
-   DBs via :envvar:`MESA_DISK_CACHE_READ_ONLY_FOZ_DBS` or
+   cache implementation instead of the default Mesa-DB cache
+   implementation. This implementation allows for loading of precompiled
+   cache DBs via :envvar:`MESA_DISK_CACHE_READ_ONLY_FOZ_DBS` or
    :envvar:`MESA_DISK_CACHE_READ_ONLY_FOZ_DBS_DYNAMIC_LIST`. This
    implementation does not support cache size limits via
    :envvar:`MESA_SHADER_CACHE_MAX_SIZE`. If
@@ -228,6 +227,16 @@ Core Mesa environment variables
    or else within ``.cache/mesa_shader_cache_sf`` within the user's home
    directory.
 
+.. envvar:: MESA_DISK_CACHE_MULTI_FILE
+
+   if set to 1, enables the multi file on-disk shader cache implementation
+   instead of the default Mesa-DB cache implementation.
+   This implementation increases the overall disk usage.
+   If :envvar:`MESA_SHADER_CACHE_DIR` is not set, the cache will be stored
+   in ``$XDG_CACHE_HOME/mesa_shader_cache`` (if that variable is set)
+   or else within ``.cache/mesa_shader_cache`` within the user's home
+   directory.
+
 .. envvar:: MESA_DISK_CACHE_READ_ONLY_FOZ_DBS
 
    if set with :envvar:`MESA_DISK_CACHE_SINGLE_FILE` enabled, references
@@ -239,18 +248,6 @@ Core Mesa environment variables
    and ``filename1_idx.foz``. A limit of 8 DBs can be loaded and this limit
    is shared with :envvar:`MESA_DISK_CACHE_READ_ONLY_FOZ_DBS_DYNAMIC_LIST.`
 
-.. envvar:: MESA_DISK_CACHE_DATABASE
-
-   if set to 1, enables the Mesa-DB single file on-disk shader cache
-   implementation instead of the default multi-file cache implementation.
-   Like :envvar:`MESA_DISK_CACHE_SINGLE_FILE`, Mesa-DB reduces overall
-   disk usage but Mesa-DB supports cache size limits via
-   :envvar:`MESA_SHADER_CACHE_MAX_SIZE`. If
-   :envvar:`MESA_SHADER_CACHE_DIR` is not set, the cache will be stored
-   in ``$XDG_CACHE_HOME/mesa_shader_cache_db`` (if that variable is set)
-   or else within ``.cache/mesa_shader_cache_db`` within the user's home
-   directory.
-
 .. envvar:: MESA_DISK_CACHE_DATABASE_NUM_PARTS
 
    specifies number of mesa-db cache parts, default is 50.
diff --git a/src/util/disk_cache.c b/src/util/disk_cache.c
index 8298f9d7b329b..c85b941dc8c85 100644
--- a/src/util/disk_cache.c
+++ b/src/util/disk_cache.c
@@ -276,10 +276,10 @@ disk_cache_create(const char *gpu_name, const char *driver_id,
 
    if (debug_get_bool_option("MESA_DISK_CACHE_SINGLE_FILE", false))
       cache_type = DISK_CACHE_SINGLE_FILE;
-   else if (debug_get_bool_option("MESA_DISK_CACHE_DATABASE", false))
-      cache_type = DISK_CACHE_DATABASE;
-   else
+   else if (debug_get_bool_option("MESA_DISK_CACHE_MULTI_FILE", false))
       cache_type = DISK_CACHE_MULTI_FILE;
+   else
+      cache_type = DISK_CACHE_DATABASE;
 
    /* Create main writable cache. */
    cache = disk_cache_type_create(gpu_name, driver_id, driver_flags,
diff --git a/src/util/tests/cache_test.cpp b/src/util/tests/cache_test.cpp
index 299a4dc292ba5..a909dce2ee83f 100644
--- a/src/util/tests/cache_test.cpp
+++ b/src/util/tests/cache_test.cpp
@@ -694,6 +694,8 @@ TEST_F(Cache, MultiFile)
    bool compress = true;
 
 run_tests:
+   setenv("MESA_DISK_CACHE_MULTI_FILE", "true", 1);
+
    if (!compress)
       driver_id = "make_check_uncompressed";
    else
@@ -705,6 +707,8 @@ run_tests:
 
    test_put_key_and_get_key(driver_id);
 
+   setenv("MESA_DISK_CACHE_MULTI_FILE", "false", 1);
+
    int err = rmrf_local(CACHE_TEST_TMP);
    EXPECT_EQ(err, 0) << "Removing " CACHE_TEST_TMP " again";
 
@@ -763,7 +767,6 @@ TEST_F(Cache, Database)
    GTEST_SKIP() << "ENABLE_SHADER_CACHE not defined.";
 #else
    setenv("MESA_DISK_CACHE_DATABASE_NUM_PARTS", "1", 1);
-   setenv("MESA_DISK_CACHE_DATABASE", "true", 1);
 
    test_disk_cache_create(mem_ctx, CACHE_DIR_NAME_DB, driver_id);
 
@@ -787,7 +790,6 @@ TEST_F(Cache, Database)
 
    test_put_and_get_between_instances_with_eviction(driver_id);
 
-   setenv("MESA_DISK_CACHE_DATABASE", "false", 1);
    unsetenv("MESA_DISK_CACHE_DATABASE_NUM_PARTS");
 
    err = rmrf_local(CACHE_TEST_TMP);
@@ -1263,14 +1265,12 @@ TEST_F(Cache, DatabaseMultipartEviction)
    GTEST_SKIP() << "ENABLE_SHADER_CACHE not defined.";
 #else
    setenv("MESA_DISK_CACHE_DATABASE_NUM_PARTS", "3", 1);
-   setenv("MESA_DISK_CACHE_DATABASE", "true", 1);
 
    test_disk_cache_create(mem_ctx, CACHE_DIR_NAME_DB, driver_id);
 
    test_multipart_eviction(driver_id);
 
    unsetenv("MESA_DISK_CACHE_DATABASE_NUM_PARTS");
-   unsetenv("MESA_DISK_CACHE_DATABASE");
 
    int err = rmrf_local(CACHE_TEST_TMP);
    EXPECT_EQ(err, 0) << "Removing " CACHE_TEST_TMP " again";
-- 
GitLab


From b18d92b79ff5ad9f2ae63bf63b7860e5fe0451d5 Mon Sep 17 00:00:00 2001
From: Bas Nieuwenhuizen <bas@basnieuwenhuizen.nl>
Date: Mon, 10 Jul 2023 19:14:27 +0200
Subject: [PATCH 2/2] util/disk_cache: Delete the old multifile cache if using
 the default.

Only after 7 days so people who switch all the time aren't impacted.
---
 src/util/disk_cache.c    |  7 ++++-
 src/util/disk_cache_os.c | 68 ++++++++++++++++++++++++++++++++++++++++
 src/util/disk_cache_os.h |  3 ++
 3 files changed, 77 insertions(+), 1 deletion(-)

diff --git a/src/util/disk_cache.c b/src/util/disk_cache.c
index c85b941dc8c85..81f246c26382f 100644
--- a/src/util/disk_cache.c
+++ b/src/util/disk_cache.c
@@ -278,8 +278,13 @@ disk_cache_create(const char *gpu_name, const char *driver_id,
       cache_type = DISK_CACHE_SINGLE_FILE;
    else if (debug_get_bool_option("MESA_DISK_CACHE_MULTI_FILE", false))
       cache_type = DISK_CACHE_MULTI_FILE;
-   else
+   else {
       cache_type = DISK_CACHE_DATABASE;
+      /* Since switching the default cache to <mesa_shader_cache_db>, remove the
+       * old cache folder if it hasn't been modified for more than 7 days.
+       */
+      disk_cache_delete_old_cache();
+   }
 
    /* Create main writable cache. */
    cache = disk_cache_type_create(gpu_name, driver_id, driver_flags,
diff --git a/src/util/disk_cache_os.c b/src/util/disk_cache_os.c
index 31586fcec39dd..3f7d9053ea6b6 100644
--- a/src/util/disk_cache_os.c
+++ b/src/util/disk_cache_os.c
@@ -1112,6 +1112,74 @@ disk_cache_db_load_cache_index(void *mem_ctx, struct disk_cache *cache)
 {
    return mesa_cache_db_multipart_open(&cache->cache_db, cache->path);
 }
+
+static void
+delete_dir(const char* path)
+{
+   DIR *dir = opendir(path);
+   if (!dir)
+      return;
+
+   struct dirent *p;
+   int base_len = strlen(path);
+   char *entry_path = NULL;
+
+   while ((p = readdir(dir)) != NULL) {
+      if (strcmp(p->d_name, ".") == 0 || strcmp(p->d_name, "..") == 0)
+         continue;
+
+      int len = 2 + base_len + strlen(p->d_name);
+      entry_path = realloc(entry_path, len);
+      snprintf(entry_path, len, "%s/%s", path, p->d_name);
+      if (!entry_path)
+         continue;
+
+      struct stat st;
+      if (stat(entry_path, &st))
+         continue;
+      if (S_ISDIR(st.st_mode))
+         delete_dir(entry_path);
+      else
+         unlink(entry_path);
+
+   }
+   closedir(dir);
+   rmdir(path);
+   free(entry_path);
+}
+
+/* Deletes old multi-file caches */
+void
+disk_cache_delete_old_cache(void)
+{
+   if (getenv("MESA_SHADER_CACHE_DIR") || getenv("MESA_GLSL_CACHE_DIR"))
+      return;
+
+   void *ctx = ralloc_context(NULL);
+   char *dirname = disk_cache_generate_cache_dir(ctx, NULL, NULL, DISK_CACHE_MULTI_FILE);
+   if (!dirname)
+      return;
+
+   /* The directory itself doesn't get updated, so just use the index timestamp */
+   int index_path_len = strlen(dirname) + 7;
+   char *index_path = ralloc_size(ctx, index_path_len);
+   snprintf(index_path, index_path_len, "%s/index", dirname);
+
+   struct stat attr;
+   if (stat(index_path, &attr) == -1)
+      goto finish;
+
+   time_t now = time(NULL);
+
+   /* Do not delete anything if the cache has been modified in the past week */
+   if (now - attr.st_mtime < 60 * 60 * 24 * 7)
+      goto finish;
+
+   delete_dir(dirname);
+
+finish:
+   ralloc_free(ctx);
+}
 #endif
 
 #endif /* ENABLE_SHADER_CACHE */
diff --git a/src/util/disk_cache_os.h b/src/util/disk_cache_os.h
index 0f5f392330458..3bff63c282dfb 100644
--- a/src/util/disk_cache_os.h
+++ b/src/util/disk_cache_os.h
@@ -178,6 +178,9 @@ disk_cache_db_write_item_to_disk(struct disk_cache_put_job *dc_job);
 bool
 disk_cache_db_load_cache_index(void *mem_ctx, struct disk_cache *cache);
 
+void
+disk_cache_delete_old_cache(void);
+
 #ifdef __cplusplus
 }
 #endif
-- 
GitLab

