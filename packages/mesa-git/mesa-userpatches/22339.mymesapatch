From df293449bfcc73bcd22dbbe4cface3ccaf3f4e05 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Daniel=20Sch=C3=BCrmann?= <daniel@schuermann.dev>
Date: Thu, 6 Apr 2023 16:57:31 +0200
Subject: [PATCH 1/3] util/disk_cache: enable Mesa-DB disk cache by default

---
 docs/envvars.rst              | 33 +++++++++++++++------------------
 src/util/disk_cache.c         |  6 +++---
 src/util/tests/cache_test.cpp | 16 +++++++++-------
 3 files changed, 27 insertions(+), 28 deletions(-)

diff --git a/docs/envvars.rst b/docs/envvars.rst
index 1d6a2fca9388c..106128cb7ba39 100644
--- a/docs/envvars.rst
+++ b/docs/envvars.rst
@@ -205,8 +205,8 @@ Core Mesa environment variables
 
    if set, determines the directory to be used for the on-disk cache of
    compiled shader programs. If this variable is not set, then the cache
-   will be stored in ``$XDG_CACHE_HOME/mesa_shader_cache`` (if that
-   variable is set), or else within ``.cache/mesa_shader_cache`` within
+   will be stored in ``$XDG_CACHE_HOME/mesa_shader_cache_db`` (if that
+   variable is set), or else within ``.cache/mesa_shader_cache_db`` within
    the user's home directory.
 
 .. envvar:: MESA_SHADER_CACHE_SHOW_STATS
@@ -217,10 +217,9 @@ Core Mesa environment variables
 .. envvar:: MESA_DISK_CACHE_SINGLE_FILE
 
    if set to 1, enables the single file Fossilize DB on-disk shader
-   cache implementation instead of the default multi-file cache
-   implementation. This implementation reduces the overall disk usage by
-   the shader cache and also allows for loading of precompiled cache
-   DBs via :envvar:`MESA_DISK_CACHE_READ_ONLY_FOZ_DBS` or
+   cache implementation instead of the default Mesa-DB cache
+   implementation. This implementation allows for loading of precompiled
+   cache DBs via :envvar:`MESA_DISK_CACHE_READ_ONLY_FOZ_DBS` or
    :envvar:`MESA_DISK_CACHE_READ_ONLY_FOZ_DBS_DYNAMIC_LIST`. This
    implementation does not support cache size limits via
    :envvar:`MESA_SHADER_CACHE_MAX_SIZE`. If
@@ -229,6 +228,16 @@ Core Mesa environment variables
    or else within ``.cache/mesa_shader_cache_sf`` within the user's home
    directory.
 
+.. envvar:: MESA_DISK_CACHE_MULTI_FILE
+
+   if set to 1, enables the multi file on-disk shader cache implementation
+   instead of the default Mesa-DB cache implementation.
+   This implementation increases the overall disk usage.
+   If :envvar:`MESA_SHADER_CACHE_DIR` is not set, the cache will be stored
+   in ``$XDG_CACHE_HOME/mesa_shader_cache`` (if that variable is set)
+   or else within ``.cache/mesa_shader_cache`` within the user's home
+   directory.
+
 .. envvar:: MESA_DISK_CACHE_READ_ONLY_FOZ_DBS
 
    if set with :envvar:`MESA_DISK_CACHE_SINGLE_FILE` enabled, references
@@ -240,18 +249,6 @@ Core Mesa environment variables
    and ``filename1_idx.foz``. A limit of 8 DBs can be loaded and this limit
    is shared with :envvar:`MESA_DISK_CACHE_READ_ONLY_FOZ_DBS_DYNAMIC_LIST`.
 
-.. envvar:: MESA_DISK_CACHE_DATABASE
-
-   if set to 1, enables the Mesa-DB single file on-disk shader cache
-   implementation instead of the default multi-file cache implementation.
-   Like :envvar:`MESA_DISK_CACHE_SINGLE_FILE`, Mesa-DB reduces overall
-   disk usage but Mesa-DB supports cache size limits via
-   :envvar:`MESA_SHADER_CACHE_MAX_SIZE`. If
-   :envvar:`MESA_SHADER_CACHE_DIR` is not set, the cache will be stored
-   in ``$XDG_CACHE_HOME/mesa_shader_cache_db`` (if that variable is set)
-   or else within ``.cache/mesa_shader_cache_db`` within the user's home
-   directory.
-
 .. envvar:: MESA_DISK_CACHE_DATABASE_NUM_PARTS
 
    specifies number of mesa-db cache parts, default is 50.
diff --git a/src/util/disk_cache.c b/src/util/disk_cache.c
index 61825fa136020..ba8cbcd96f69e 100644
--- a/src/util/disk_cache.c
+++ b/src/util/disk_cache.c
@@ -271,10 +271,10 @@ disk_cache_create(const char *gpu_name, const char *driver_id,
 
    if (debug_get_bool_option("MESA_DISK_CACHE_SINGLE_FILE", false))
       cache_type = DISK_CACHE_SINGLE_FILE;
-   else if (debug_get_bool_option("MESA_DISK_CACHE_DATABASE", false))
-      cache_type = DISK_CACHE_DATABASE;
-   else
+   else if (debug_get_bool_option("MESA_DISK_CACHE_MULTI_FILE", false))
       cache_type = DISK_CACHE_MULTI_FILE;
+   else
+      cache_type = DISK_CACHE_DATABASE;
 
    /* Create main writable cache. */
    cache = disk_cache_type_create(gpu_name, driver_id, driver_flags,
diff --git a/src/util/tests/cache_test.cpp b/src/util/tests/cache_test.cpp
index 48d723b47422a..af4edb71c1fd6 100644
--- a/src/util/tests/cache_test.cpp
+++ b/src/util/tests/cache_test.cpp
@@ -700,6 +700,8 @@ TEST_F(Cache, MultiFile)
    bool compress = true;
 
 run_tests:
+   setenv("MESA_DISK_CACHE_MULTI_FILE", "true", 1);
+
    if (!compress)
       driver_id = "make_check_uncompressed";
    else
@@ -711,6 +713,8 @@ run_tests:
 
    test_put_key_and_get_key(driver_id);
 
+   setenv("MESA_DISK_CACHE_MULTI_FILE", "false", 1);
+
    int err = rmrf_local(CACHE_TEST_TMP);
    EXPECT_EQ(err, 0) << "Removing " CACHE_TEST_TMP " again";
 
@@ -769,7 +773,6 @@ TEST_F(Cache, Database)
    GTEST_SKIP() << "ENABLE_SHADER_CACHE not defined.";
 #else
    setenv("MESA_DISK_CACHE_DATABASE_NUM_PARTS", "1", 1);
-   setenv("MESA_DISK_CACHE_DATABASE", "true", 1);
 
    test_disk_cache_create(mem_ctx, CACHE_DIR_NAME_DB, driver_id);
 
@@ -793,7 +796,6 @@ TEST_F(Cache, Database)
 
    test_put_and_get_between_instances_with_eviction(driver_id);
 
-   setenv("MESA_DISK_CACHE_DATABASE", "false", 1);
    unsetenv("MESA_DISK_CACHE_DATABASE_NUM_PARTS");
 
    err = rmrf_local(CACHE_TEST_TMP);
@@ -820,7 +822,7 @@ TEST_F(Cache, Combined)
    GTEST_SKIP() << "ENABLE_SHADER_CACHE not defined.";
 #else
    setenv("MESA_DISK_CACHE_SINGLE_FILE", "true", 1);
-   setenv("MESA_DISK_CACHE_DATABASE", "false", 1);
+   setenv("MESA_DISK_CACHE_MULTI_FILE", "true", 1);
 
 #ifdef SHADER_CACHE_DISABLE_BY_DEFAULT
    setenv("MESA_SHADER_CACHE_DISABLE", "false", 1);
@@ -890,7 +892,7 @@ TEST_F(Cache, Combined)
    EXPECT_EQ(unlink(foz_rw_idx_file), 0);
 
    setenv("MESA_DISK_CACHE_SINGLE_FILE", "false", 1);
-   setenv("MESA_DISK_CACHE_DATABASE", "true", 1);
+   setenv("MESA_DISK_CACHE_MULTI_FILE", "false", 1);
 
    /* Create MESA-DB cache with enabled retrieval from the read-only
     * cache. */
@@ -959,7 +961,7 @@ TEST_F(Cache, Combined)
    disk_cache_destroy(cache_mesa_db);
 
    /* Create default multi-file cache. */
-   setenv("MESA_DISK_CACHE_DATABASE", "false", 1);
+   setenv("MESA_DISK_CACHE_MULTI_FILE", "true", 1);
 
    /* Enable read-only cache. */
    setenv("MESA_DISK_CACHE_COMBINE_RW_WITH_RO_FOZ", "true", 1);
@@ -1017,6 +1019,8 @@ TEST_F(Cache, Combined)
 
    disk_cache_destroy(cache_multifile);
 
+   unsetenv("MESA_DISK_CACHE_MULTI_FILE");
+
    int err = rmrf_local(CACHE_TEST_TMP);
    EXPECT_EQ(err, 0) << "Removing " CACHE_TEST_TMP " again";
 #endif
@@ -1269,14 +1273,12 @@ TEST_F(Cache, DatabaseMultipartEviction)
    GTEST_SKIP() << "ENABLE_SHADER_CACHE not defined.";
 #else
    setenv("MESA_DISK_CACHE_DATABASE_NUM_PARTS", "3", 1);
-   setenv("MESA_DISK_CACHE_DATABASE", "true", 1);
 
    test_disk_cache_create(mem_ctx, CACHE_DIR_NAME_DB, driver_id);
 
    test_multipart_eviction(driver_id);
 
    unsetenv("MESA_DISK_CACHE_DATABASE_NUM_PARTS");
-   unsetenv("MESA_DISK_CACHE_DATABASE");
 
    int err = rmrf_local(CACHE_TEST_TMP);
    EXPECT_EQ(err, 0) << "Removing " CACHE_TEST_TMP " again";
-- 
GitLab


From a980cb4f8a529e5736a4ddec3de950db32cd9167 Mon Sep 17 00:00:00 2001
From: Bas Nieuwenhuizen <bas@basnieuwenhuizen.nl>
Date: Mon, 10 Jul 2023 19:14:27 +0200
Subject: [PATCH 2/3] util/disk_cache: Delete the old multifile cache if using
 the default.

Only after 7 days so people who switch all the time aren't impacted.
---
 src/util/disk_cache.c    |  8 ++++-
 src/util/disk_cache_os.c | 65 ++++++++++++++++++++++++++++++++++++++++
 src/util/disk_cache_os.h |  3 ++
 3 files changed, 75 insertions(+), 1 deletion(-)

diff --git a/src/util/disk_cache.c b/src/util/disk_cache.c
index ba8cbcd96f69e..940b0a0414594 100644
--- a/src/util/disk_cache.c
+++ b/src/util/disk_cache.c
@@ -273,8 +273,14 @@ disk_cache_create(const char *gpu_name, const char *driver_id,
       cache_type = DISK_CACHE_SINGLE_FILE;
    else if (debug_get_bool_option("MESA_DISK_CACHE_MULTI_FILE", false))
       cache_type = DISK_CACHE_MULTI_FILE;
-   else
+   else {
       cache_type = DISK_CACHE_DATABASE;
+      /* Since switching the default cache to <mesa_shader_cache_db>, remove the
+       * old cache folder if it hasn't been modified for more than 7 days.
+       */
+      if (!getenv("MESA_SHADER_CACHE_DIR") && !getenv("MESA_GLSL_CACHE_DIR"))
+         disk_cache_delete_old_cache();
+   }
 
    /* Create main writable cache. */
    cache = disk_cache_type_create(gpu_name, driver_id, driver_flags,
diff --git a/src/util/disk_cache_os.c b/src/util/disk_cache_os.c
index d9a75cd7fc6d4..7271b041b41d4 100644
--- a/src/util/disk_cache_os.c
+++ b/src/util/disk_cache_os.c
@@ -1198,6 +1198,71 @@ disk_cache_db_load_cache_index(void *mem_ctx, struct disk_cache *cache)
 {
    return mesa_cache_db_multipart_open(&cache->cache_db, cache->path);
 }
+
+static void
+delete_dir(const char* path)
+{
+   DIR *dir = opendir(path);
+   if (!dir)
+      return;
+
+   struct dirent *p;
+   int base_len = strlen(path);
+   char *entry_path = NULL;
+
+   while ((p = readdir(dir)) != NULL) {
+      if (strcmp(p->d_name, ".") == 0 || strcmp(p->d_name, "..") == 0)
+         continue;
+
+      int len = 2 + base_len + strlen(p->d_name);
+      entry_path = realloc(entry_path, len);
+      snprintf(entry_path, len, "%s/%s", path, p->d_name);
+      if (!entry_path)
+         continue;
+
+      struct stat st;
+      if (stat(entry_path, &st))
+         continue;
+      if (S_ISDIR(st.st_mode))
+         delete_dir(entry_path);
+      else
+         unlink(entry_path);
+
+   }
+   closedir(dir);
+   rmdir(path);
+   free(entry_path);
+}
+
+/* Deletes old multi-file caches, to avoid having two default caches taking up disk space. */
+void
+disk_cache_delete_old_cache(void)
+{
+   void *ctx = ralloc_context(NULL);
+   char *dirname = disk_cache_generate_cache_dir(ctx, NULL, NULL, DISK_CACHE_MULTI_FILE);
+   if (!dirname)
+      return;
+
+   /* The directory itself doesn't get updated, so just use the index timestamp */
+   int index_path_len = strlen(dirname) + 8;
+   char *index_path = ralloc_size(ctx, index_path_len);
+   snprintf(index_path, index_path_len, "%s/marker", dirname);
+
+   struct stat attr;
+   if (stat(index_path, &attr) == -1)
+      goto finish;
+
+   time_t now = time(NULL);
+
+   /* Do not delete anything if the cache has been modified in the past week */
+   if (now - attr.st_mtime < 60 * 60 * 24 * 7)
+      goto finish;
+
+   delete_dir(dirname);
+
+finish:
+   ralloc_free(ctx);
+}
 #endif
 
 #endif /* ENABLE_SHADER_CACHE */
diff --git a/src/util/disk_cache_os.h b/src/util/disk_cache_os.h
index 2b543cf27bea7..1f922aed61963 100644
--- a/src/util/disk_cache_os.h
+++ b/src/util/disk_cache_os.h
@@ -181,6 +181,9 @@ disk_cache_db_write_item_to_disk(struct disk_cache_put_job *dc_job);
 bool
 disk_cache_db_load_cache_index(void *mem_ctx, struct disk_cache *cache);
 
+void
+disk_cache_delete_old_cache(void);
+
 #ifdef __cplusplus
 }
 #endif
-- 
GitLab


From ccc48556c6e3751b78908973aded8e7f0b3b01ca Mon Sep 17 00:00:00 2001
From: Bas Nieuwenhuizen <bas@basnieuwenhuizen.nl>
Date: Mon, 24 Jun 2024 01:14:35 +0200
Subject: [PATCH 3/3] util/cache_test: Add tests for old cache deletion.

---
 src/util/tests/cache_test.cpp | 116 ++++++++++++++++++++++++++++++++++
 1 file changed, 116 insertions(+)

diff --git a/src/util/tests/cache_test.cpp b/src/util/tests/cache_test.cpp
index af4edb71c1fd6..476b5b7015492 100644
--- a/src/util/tests/cache_test.cpp
+++ b/src/util/tests/cache_test.cpp
@@ -36,6 +36,7 @@
 #include <limits.h>
 #include <time.h>
 #include <unistd.h>
+#include <utime.h>
 
 #include "util/detect_os.h"
 #include "util/mesa-sha1.h"
@@ -1344,3 +1345,118 @@ TEST_F(Cache, Disabled)
    EXPECT_EQ(err, 0) << "Removing " CACHE_TEST_TMP " again";
 #endif
 }
+
+TEST_F(Cache, DoNotDeleteNewCache)
+{
+#ifndef ENABLE_SHADER_CACHE
+   GTEST_SKIP() << "ENABLE_SHADER_CACHE not defined.";
+#else
+   //setenv("MESA_DISK_CACHE_SINGLE_FILE", "true", 1);
+
+#ifdef SHADER_CACHE_DISABLE_BY_DEFAULT
+   setenv("MESA_SHADER_CACHE_DISABLE", "false", 1);
+#endif /* SHADER_CACHE_DISABLE_BY_DEFAULT */
+
+   char dir_template[] = "/tmp/tmpdir.XXXXXX";
+   char *dir_name = mkdtemp(dir_template);
+   ASSERT_NE(dir_name, nullptr);
+
+   char cache_dir_name[256];
+   sprintf(cache_dir_name, "%s/mesa_shader_cache", dir_name);
+   mkdir(cache_dir_name, 0755);
+
+   setenv("MESA_SHADER_CACHE_DIR", dir_name, 1);
+
+   disk_cache_delete_old_cache();
+
+   struct stat st;
+   EXPECT_EQ(stat(cache_dir_name, &st), 0);
+
+   unsetenv("MESA_SHADER_CACHE_DIR");
+   rmdir(cache_dir_name);
+   rmdir(dir_name);
+#endif
+}
+
+TEST_F(Cache, DoNotDeleteCacheWithNewMarker)
+{
+#ifndef ENABLE_SHADER_CACHE
+   GTEST_SKIP() << "ENABLE_SHADER_CACHE not defined.";
+#else
+   //setenv("MESA_DISK_CACHE_SINGLE_FILE", "true", 1);
+
+#ifdef SHADER_CACHE_DISABLE_BY_DEFAULT
+   setenv("MESA_SHADER_CACHE_DISABLE", "false", 1);
+#endif /* SHADER_CACHE_DISABLE_BY_DEFAULT */
+
+   char dir_template[] = "/tmp/tmpdir.XXXXXX";
+   char *dir_name = mkdtemp(dir_template);
+   ASSERT_NE(dir_name, nullptr);
+
+   char cache_dir_name[256];
+   sprintf(cache_dir_name, "%s/mesa_shader_cache", dir_name);
+   mkdir(cache_dir_name, 0755);
+
+   char file_name[256];
+   sprintf(file_name, "%s/marker", cache_dir_name);
+
+   FILE *file = fopen(file_name, "w");
+   fclose(file);
+
+   setenv("MESA_SHADER_CACHE_DIR", dir_name, 1);
+
+   disk_cache_delete_old_cache();
+
+   struct stat st;
+   EXPECT_EQ(stat(cache_dir_name, &st), 0);
+
+   unsetenv("MESA_SHADER_CACHE_DIR");
+   unlink(file_name);
+   rmdir(cache_dir_name);
+   rmdir(dir_name);
+#endif
+}
+
+TEST_F(Cache, DeleteOldCache)
+{
+#ifndef ENABLE_SHADER_CACHE
+   GTEST_SKIP() << "ENABLE_SHADER_CACHE not defined.";
+#else
+   //setenv("MESA_DISK_CACHE_SINGLE_FILE", "true", 1);
+
+#ifdef SHADER_CACHE_DISABLE_BY_DEFAULT
+   setenv("MESA_SHADER_CACHE_DISABLE", "false", 1);
+#endif /* SHADER_CACHE_DISABLE_BY_DEFAULT */
+
+   char dir_template[] = "/tmp/tmpdir.XXXXXX";
+   char *dir_name = mkdtemp(dir_template);
+   ASSERT_NE(dir_name, nullptr) << "Creating temporary directory failed";
+
+   char cache_dir_name[256];
+   sprintf(cache_dir_name, "%s/mesa_shader_cache", dir_name);
+   mkdir(cache_dir_name, 0755);
+
+   char file_name[256];
+   sprintf(file_name, "%s/marker", cache_dir_name);
+
+   FILE *file = fopen(file_name, "w");
+   fclose(file);
+
+   struct utimbuf utime_buf = { };
+   EXPECT_EQ(utime(file_name, &utime_buf), 0);
+
+
+   setenv("MESA_SHADER_CACHE_DIR", dir_name, 1);
+
+   disk_cache_delete_old_cache();
+
+   struct stat st;
+   EXPECT_NE(stat(cache_dir_name, &st), 0);
+   EXPECT_EQ(errno, ENOENT);
+
+   unsetenv("MESA_SHADER_CACHE_DIR");
+   unlink(file_name);
+   rmdir(cache_dir_name);
+   rmdir(dir_name);
+#endif
+}
\ No newline at end of file
-- 
GitLab

