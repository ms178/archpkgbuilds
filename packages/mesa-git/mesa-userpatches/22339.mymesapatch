From 59a165fc5cc8ad13a3cf0fd18ae3ef7def907c3e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Daniel=20Sch=C3=BCrmann?= <daniel@schuermann.dev>
Date: Thu, 6 Apr 2023 16:57:31 +0200
Subject: [PATCH] util/disk_cache: enable Mesa-DB disk cache by default

---
 docs/envvars.rst              | 29 +++++++++++++----------------
 src/util/disk_cache.c         |  6 +++---
 src/util/disk_cache.h         |  2 +-
 src/util/disk_cache_os.c      |  4 ++--
 src/util/tests/cache_test.cpp | 16 ++++++++--------
 5 files changed, 27 insertions(+), 30 deletions(-)

diff --git a/docs/envvars.rst b/docs/envvars.rst
index 47ff864029d8..57de68751332 100644
--- a/docs/envvars.rst
+++ b/docs/envvars.rst
@@ -216,10 +216,9 @@ Core Mesa environment variables
 .. envvar:: MESA_DISK_CACHE_SINGLE_FILE
 
    if set to 1, enables the single file Fossilize DB on-disk shader
-   cache implementation instead of the default multi-file cache
-   implementation. This implementation reduces the overall disk usage by
-   the shader cache and also allows for loading of precompiled cache
-   DBs via :envvar:`MESA_DISK_CACHE_READ_ONLY_FOZ_DBS` or
+   cache implementation instead of the default Mesa-DB cache
+   implementation. This implementation allows for loading of precompiled
+   cache DBs via :envvar:`MESA_DISK_CACHE_READ_ONLY_FOZ_DBS` or
    :envvar:`MESA_DISK_CACHE_READ_ONLY_FOZ_DBS_DYNAMIC_LIST`. This
    implementation does not support cache size limits via
    :envvar:`MESA_SHADER_CACHE_MAX_SIZE`. If
@@ -228,6 +227,16 @@ Core Mesa environment variables
    or else within ``.cache/mesa_shader_cache_sf`` within the user's home
    directory.
 
+.. envvar:: MESA_DISK_CACHE_MULTI_FILE
+
+   if set to 1, enables the multi file on-disk shader cache implementation
+   instead of the default Mesa-DB cache implementation.
+   This implementation increases the overall disk usage.
+   If :envvar:`MESA_SHADER_CACHE_DIR` is not set, the cache will be stored
+   in ``$XDG_CACHE_HOME/mesa_shader_cache_mf`` (if that variable is set)
+   or else within ``.cache/mesa_shader_cache_mf`` within the user's home
+   directory.
+
 .. envvar:: MESA_DISK_CACHE_READ_ONLY_FOZ_DBS
 
    if set with :envvar:`MESA_DISK_CACHE_SINGLE_FILE` enabled, references
@@ -239,18 +248,6 @@ Core Mesa environment variables
    and ``filename1_idx.foz``. A limit of 8 DBs can be loaded and this limit
    is shared with :envvar:`MESA_DISK_CACHE_READ_ONLY_FOZ_DBS_DYNAMIC_LIST.`
 
-.. envvar:: MESA_DISK_CACHE_DATABASE
-
-   if set to 1, enables the Mesa-DB single file on-disk shader cache
-   implementation instead of the default multi-file cache implementation.
-   Like :envvar:`MESA_DISK_CACHE_SINGLE_FILE`, Mesa-DB reduces overall
-   disk usage but Mesa-DB supports cache size limits via
-   :envvar:`MESA_SHADER_CACHE_MAX_SIZE`. If
-   :envvar:`MESA_SHADER_CACHE_DIR` is not set, the cache will be stored
-   in ``$XDG_CACHE_HOME/mesa_shader_cache_db`` (if that variable is set)
-   or else within ``.cache/mesa_shader_cache_db`` within the user's home
-   directory.
-
 .. envvar:: MESA_DISK_CACHE_DATABASE_NUM_PARTS
 
    specifies number of mesa-db cache parts, default is 50.
diff --git a/src/util/disk_cache.c b/src/util/disk_cache.c
index e4e03131b0ae..e66fc53cfcee 100644
--- a/src/util/disk_cache.c
+++ b/src/util/disk_cache.c
@@ -267,10 +267,10 @@ disk_cache_create(const char *gpu_name, const char *driver_id,
 
    if (debug_get_bool_option("MESA_DISK_CACHE_SINGLE_FILE", false))
       cache_type = DISK_CACHE_SINGLE_FILE;
-   else if (debug_get_bool_option("MESA_DISK_CACHE_DATABASE", false))
-      cache_type = DISK_CACHE_DATABASE;
-   else
+   else if (debug_get_bool_option("MESA_DISK_CACHE_MULTI_FILE", false))
       cache_type = DISK_CACHE_MULTI_FILE;
+   else
+      cache_type = DISK_CACHE_DATABASE;
 
    /* Create main writable cache. */
    cache = disk_cache_type_create(gpu_name, driver_id, driver_flags,
diff --git a/src/util/disk_cache.h b/src/util/disk_cache.h
index 026ca42f03ce..76da99a13c32 100644
--- a/src/util/disk_cache.h
+++ b/src/util/disk_cache.h
@@ -45,7 +45,7 @@ extern "C" {
 
 #define CACHE_DIR_NAME "mesa_shader_cache"
 #define CACHE_DIR_NAME_SF "mesa_shader_cache_sf"
-#define CACHE_DIR_NAME_DB "mesa_shader_cache_db"
+#define CACHE_DIR_NAME_MF "mesa_shader_cache_mf"
 
 typedef uint8_t cache_key[CACHE_KEY_SIZE];
 
diff --git a/src/util/disk_cache_os.c b/src/util/disk_cache_os.c
index e3596f2b4b02..b398f5c58082 100644
--- a/src/util/disk_cache_os.c
+++ b/src/util/disk_cache_os.c
@@ -847,8 +847,8 @@ disk_cache_generate_cache_dir(void *mem_ctx, const char *gpu_name,
    char *cache_dir_name = CACHE_DIR_NAME;
    if (cache_type == DISK_CACHE_SINGLE_FILE)
       cache_dir_name = CACHE_DIR_NAME_SF;
-   else if (cache_type == DISK_CACHE_DATABASE)
-      cache_dir_name = CACHE_DIR_NAME_DB;
+   else if (cache_type == DISK_CACHE_MULTI_FILE)
+      cache_dir_name = CACHE_DIR_NAME_MF;
 
    char *path = getenv("MESA_SHADER_CACHE_DIR");
 
diff --git a/src/util/tests/cache_test.cpp b/src/util/tests/cache_test.cpp
index 299a4dc292ba..23da121ebeec 100644
--- a/src/util/tests/cache_test.cpp
+++ b/src/util/tests/cache_test.cpp
@@ -694,17 +694,21 @@ TEST_F(Cache, MultiFile)
    bool compress = true;
 
 run_tests:
+   setenv("MESA_DISK_CACHE_MULTI_FILE", "true", 1);
+
    if (!compress)
       driver_id = "make_check_uncompressed";
    else
       driver_id = "make_check";
 
-   test_disk_cache_create(mem_ctx, CACHE_DIR_NAME, driver_id);
+   test_disk_cache_create(mem_ctx, CACHE_DIR_NAME_MF, driver_id);
 
    test_put_and_get(true, driver_id);
 
    test_put_key_and_get_key(driver_id);
 
+   setenv("MESA_DISK_CACHE_MULTI_FILE", "false", 1);
+
    int err = rmrf_local(CACHE_TEST_TMP);
    EXPECT_EQ(err, 0) << "Removing " CACHE_TEST_TMP " again";
 
@@ -763,9 +767,8 @@ TEST_F(Cache, Database)
    GTEST_SKIP() << "ENABLE_SHADER_CACHE not defined.";
 #else
    setenv("MESA_DISK_CACHE_DATABASE_NUM_PARTS", "1", 1);
-   setenv("MESA_DISK_CACHE_DATABASE", "true", 1);
 
-   test_disk_cache_create(mem_ctx, CACHE_DIR_NAME_DB, driver_id);
+   test_disk_cache_create(mem_ctx, CACHE_DIR_NAME, driver_id);
 
    /* We skip testing cache size limit as the single file cache compresses
     * data much better than the multi-file cache, which results in the
@@ -777,7 +780,7 @@ TEST_F(Cache, Database)
    int err = rmrf_local(CACHE_TEST_TMP);
    EXPECT_EQ(err, 0) << "Removing " CACHE_TEST_TMP " again";
 
-   test_disk_cache_create(mem_ctx, CACHE_DIR_NAME_DB, driver_id);
+   test_disk_cache_create(mem_ctx, CACHE_DIR_NAME, driver_id);
 
    test_put_and_get(true, driver_id);
 
@@ -787,7 +790,6 @@ TEST_F(Cache, Database)
 
    test_put_and_get_between_instances_with_eviction(driver_id);
 
-   setenv("MESA_DISK_CACHE_DATABASE", "false", 1);
    unsetenv("MESA_DISK_CACHE_DATABASE_NUM_PARTS");
 
    err = rmrf_local(CACHE_TEST_TMP);
@@ -1263,14 +1265,12 @@ TEST_F(Cache, DatabaseMultipartEviction)
    GTEST_SKIP() << "ENABLE_SHADER_CACHE not defined.";
 #else
    setenv("MESA_DISK_CACHE_DATABASE_NUM_PARTS", "3", 1);
-   setenv("MESA_DISK_CACHE_DATABASE", "true", 1);
 
-   test_disk_cache_create(mem_ctx, CACHE_DIR_NAME_DB, driver_id);
+   test_disk_cache_create(mem_ctx, CACHE_DIR_NAME, driver_id);
 
    test_multipart_eviction(driver_id);
 
    unsetenv("MESA_DISK_CACHE_DATABASE_NUM_PARTS");
-   unsetenv("MESA_DISK_CACHE_DATABASE");
 
    int err = rmrf_local(CACHE_TEST_TMP);
    EXPECT_EQ(err, 0) << "Removing " CACHE_TEST_TMP " again";
-- 
GitLab

