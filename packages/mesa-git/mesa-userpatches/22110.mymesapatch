From b9354169589c1411804117baf8265a1f43acbd42 Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Fri, 24 Mar 2023 14:15:26 +0100
Subject: [PATCH 1/3] radv: copy the multisample state to radv_cmd_state

To avoid relying on the pipeline.

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/amd/vulkan/radv_cmd_buffer.c | 14 +++++++++++---
 src/amd/vulkan/radv_private.h    | 12 +++++++-----
 2 files changed, 18 insertions(+), 8 deletions(-)

diff --git a/src/amd/vulkan/radv_cmd_buffer.c b/src/amd/vulkan/radv_cmd_buffer.c
index df2c0b0aa3f8..eb0e145d73e0 100644
--- a/src/amd/vulkan/radv_cmd_buffer.c
+++ b/src/amd/vulkan/radv_cmd_buffer.c
@@ -942,15 +942,14 @@ radv_get_rasterization_samples(struct radv_cmd_buffer *cmd_buffer)
 static ALWAYS_INLINE unsigned
 radv_get_ps_iter_samples(struct radv_cmd_buffer *cmd_buffer)
 {
-   const struct radv_graphics_pipeline *pipeline = cmd_buffer->state.graphics_pipeline;
    const struct radv_rendering_state *render = &cmd_buffer->state.render;
    unsigned ps_iter_samples = 1;
 
-   if (pipeline->ms.sample_shading_enable) {
+   if (cmd_buffer->state.ms.sample_shading_enable) {
       unsigned rasterization_samples = radv_get_rasterization_samples(cmd_buffer);
       unsigned color_samples = MAX2(render->color_samples, rasterization_samples);
 
-      ps_iter_samples = ceilf(pipeline->ms.min_sample_shading * color_samples);
+      ps_iter_samples = ceilf(cmd_buffer->state.ms.min_sample_shading * color_samples);
       ps_iter_samples = util_next_power_of_two(ps_iter_samples);
    }
 
@@ -6247,6 +6246,13 @@ radv_bind_vs_input_state(struct radv_cmd_buffer *cmd_buffer,
    cmd_buffer->state.dirty |= RADV_CMD_DIRTY_DYNAMIC_VERTEX_INPUT;
 }
 
+static void
+radv_bind_multisample_state(struct radv_cmd_buffer *cmd_buffer,
+                            const struct radv_graphics_pipeline *pipeline)
+{
+   cmd_buffer->state.ms = pipeline->ms;
+}
+
 static void
 radv_bind_pre_rast_shader(struct radv_cmd_buffer *cmd_buffer, const struct radv_shader *shader)
 {
@@ -6493,6 +6499,8 @@ radv_CmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipeline
          radv_bind_mesh_shader(cmd_buffer, graphics_pipeline->base.shaders[MESA_SHADER_MESH]);
       if (graphics_pipeline->base.shaders[MESA_SHADER_TASK])
          radv_bind_task_shader(cmd_buffer, graphics_pipeline->base.shaders[MESA_SHADER_TASK]);
+
+      radv_bind_multisample_state(cmd_buffer, graphics_pipeline);
       break;
    }
    default:
diff --git a/src/amd/vulkan/radv_private.h b/src/amd/vulkan/radv_private.h
index 3b7e5b890d4d..87b7707ee76f 100644
--- a/src/amd/vulkan/radv_private.h
+++ b/src/amd/vulkan/radv_private.h
@@ -1571,6 +1571,11 @@ enum rgp_flush_bits {
    RGP_FLUSH_INVAL_L1 = 0x8000,
 };
 
+struct radv_multisample_state {
+   bool sample_shading_enable;
+   float min_sample_shading;
+};
+
 struct radv_cmd_state {
    /* Vertex descriptors */
    uint64_t vb_va;
@@ -1683,6 +1688,8 @@ struct radv_cmd_state {
 
    /* Binning state */
    unsigned last_pa_sc_binner_cntl_0;
+
+   struct radv_multisample_state ms;
 };
 
 struct radv_cmd_buffer_upload {
@@ -2094,11 +2101,6 @@ enum {
 extern const VkFormat radv_fs_key_format_exemplars[NUM_META_FS_KEYS];
 unsigned radv_format_meta_fs_key(struct radv_device *device, VkFormat format);
 
-struct radv_multisample_state {
-   bool sample_shading_enable;
-   float min_sample_shading;
-};
-
 struct radv_vrs_state {
    uint32_t pa_cl_vrs_cntl;
 };
-- 
GitLab


From 51907982f480a8d39b9ee5b89a365d075925ed7c Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Wed, 22 Mar 2023 16:19:04 +0100
Subject: [PATCH 2/3] radv: move uses_user_sample_locations to
 radv_multisample_state

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/amd/vulkan/radv_cmd_buffer.c | 3 +--
 src/amd/vulkan/radv_pipeline.c   | 3 ++-
 src/amd/vulkan/radv_private.h    | 2 +-
 3 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/src/amd/vulkan/radv_cmd_buffer.c b/src/amd/vulkan/radv_cmd_buffer.c
index eb0e145d73e0..4c5d7f463e01 100644
--- a/src/amd/vulkan/radv_cmd_buffer.c
+++ b/src/amd/vulkan/radv_cmd_buffer.c
@@ -8601,7 +8601,6 @@ radv_need_late_scissor_emission(struct radv_cmd_buffer *cmd_buffer,
 ALWAYS_INLINE static uint32_t
 radv_get_ngg_culling_settings(struct radv_cmd_buffer *cmd_buffer, bool vp_y_inverted)
 {
-   const struct radv_graphics_pipeline *pipeline = cmd_buffer->state.graphics_pipeline;
    const struct radv_dynamic_state *d = &cmd_buffer->state.dynamic;
 
    /* Disable shader culling entirely when conservative overestimate is used.
@@ -8642,7 +8641,7 @@ radv_get_ngg_culling_settings(struct radv_cmd_buffer *cmd_buffer, bool vp_y_inve
    /* Small primitive culling assumes a sample position at (0.5, 0.5)
     * so don't enable it with user sample locations.
     */
-   if (!pipeline->uses_user_sample_locations) {
+   if (!cmd_buffer->state.ms.uses_user_sample_locations) {
       nggc_settings |= radv_nggc_small_primitives;
 
       /* small_prim_precision = num_samples / 2^subpixel_bits
diff --git a/src/amd/vulkan/radv_pipeline.c b/src/amd/vulkan/radv_pipeline.c
index cafb21d59c9c..a4b683804d25 100644
--- a/src/amd/vulkan/radv_pipeline.c
+++ b/src/amd/vulkan/radv_pipeline.c
@@ -504,6 +504,8 @@ radv_pipeline_init_multisample_state(const struct radv_device *device,
        */
       pipeline->pa_sc_mode_cntl_1 |= S_028A4C_WALK_ALIGN8_PRIM_FITS_ST(1);
    }
+
+   ms->uses_user_sample_locations = state->ms && state->ms->sample_locations_enable;
 }
 
 static void
@@ -4983,7 +4985,6 @@ radv_graphics_pipeline_init(struct radv_graphics_pipeline *pipeline, struct radv
       pipeline->base.shaders[pipeline->last_vgt_api_stage]->info.has_ngg_culling;
    pipeline->force_vrs_per_vertex =
       pipeline->base.shaders[pipeline->last_vgt_api_stage]->info.force_vrs_per_vertex;
-   pipeline->uses_user_sample_locations = state.ms && state.ms->sample_locations_enable;
    pipeline->uses_inner_coverage =
       pipeline->base.shaders[MESA_SHADER_FRAGMENT]->info.ps.reads_fully_covered;
    pipeline->rast_prim = vgt_gs_out_prim_type;
diff --git a/src/amd/vulkan/radv_private.h b/src/amd/vulkan/radv_private.h
index 87b7707ee76f..70923da4a6da 100644
--- a/src/amd/vulkan/radv_private.h
+++ b/src/amd/vulkan/radv_private.h
@@ -1573,6 +1573,7 @@ enum rgp_flush_bits {
 
 struct radv_multisample_state {
    bool sample_shading_enable;
+   bool uses_user_sample_locations;
    float min_sample_shading;
 };
 
@@ -2193,7 +2194,6 @@ struct radv_graphics_pipeline {
    bool uses_baseinstance;
    bool use_per_attribute_vb_descs;
    bool can_use_simple_input;
-   bool uses_user_sample_locations;
 
    /* Whether the pipeline uses inner coverage which means that a fragment has all of its pixel
     * squares fully covered by the generating primitive.
-- 
GitLab


From 2b3e46eae30ece36a87879431ccba7acc5ac47da Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Fri, 24 Mar 2023 14:26:20 +0100
Subject: [PATCH 3/3] radv: separate the sample shading state between FS and
 graphics pipeline

Sample shading can be enabled inside the fragment shader and also
per-pipeline. Separate both cases to be able to enable sample shading
by only binding a FS.

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/amd/vulkan/radv_cmd_buffer.c | 10 +++++++++-
 src/amd/vulkan/radv_pipeline.c   | 10 ++--------
 2 files changed, 11 insertions(+), 9 deletions(-)

diff --git a/src/amd/vulkan/radv_cmd_buffer.c b/src/amd/vulkan/radv_cmd_buffer.c
index 4c5d7f463e01..c9d45bd73a1d 100644
--- a/src/amd/vulkan/radv_cmd_buffer.c
+++ b/src/amd/vulkan/radv_cmd_buffer.c
@@ -6250,7 +6250,12 @@ static void
 radv_bind_multisample_state(struct radv_cmd_buffer *cmd_buffer,
                             const struct radv_graphics_pipeline *pipeline)
 {
-   cmd_buffer->state.ms = pipeline->ms;
+   if (pipeline->ms.sample_shading_enable) {
+      cmd_buffer->state.ms.sample_shading_enable = true;
+      cmd_buffer->state.ms.min_sample_shading = pipeline->ms.min_sample_shading;
+   }
+
+   cmd_buffer->state.ms.uses_user_sample_locations = pipeline->ms.uses_user_sample_locations;
 }
 
 static void
@@ -6340,6 +6345,9 @@ radv_bind_fragment_shader(struct radv_cmd_buffer *cmd_buffer, const struct radv_
    if (radv_get_user_sgpr(ps, AC_UD_PS_NUM_SAMPLES)->sgpr_idx != -1) {
       cmd_buffer->state.dirty |= RADV_CMD_DIRTY_DYNAMIC_RASTERIZATION_SAMPLES;
    }
+
+   cmd_buffer->state.ms.sample_shading_enable = ps->info.ps.uses_sample_shading;
+   cmd_buffer->state.ms.min_sample_shading = 1.0f;
 }
 
 static void
diff --git a/src/amd/vulkan/radv_pipeline.c b/src/amd/vulkan/radv_pipeline.c
index a4b683804d25..a4b505a4e98d 100644
--- a/src/amd/vulkan/radv_pipeline.c
+++ b/src/amd/vulkan/radv_pipeline.c
@@ -476,15 +476,9 @@ radv_pipeline_init_multisample_state(const struct radv_device *device,
     *
     * Otherwise, sample shading is considered disabled."
     */
-   if (pipeline->base.shaders[MESA_SHADER_FRAGMENT]->info.ps.uses_sample_shading ||
-       (state->ms && state->ms->sample_shading_enable)) {
-      if (pipeline->base.shaders[MESA_SHADER_FRAGMENT]->info.ps.uses_sample_shading) {
-         ms->min_sample_shading = 1.0f;
-      } else {
-         ms->min_sample_shading = state->ms->min_sample_shading;
-      }
-
+   if (state->ms && state->ms->sample_shading_enable) {
       ms->sample_shading_enable = true;
+      ms->min_sample_shading = state->ms->min_sample_shading;
    }
 
    pipeline->pa_sc_mode_cntl_1 =
-- 
GitLab

