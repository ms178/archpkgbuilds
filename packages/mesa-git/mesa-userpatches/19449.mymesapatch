From b9b6fb36b6e0ff6edc33c314202f24e474a21de9 Mon Sep 17 00:00:00 2001
From: Dylan Baker <dylan.c.baker@intel.com>
Date: Tue, 1 Nov 2022 12:40:21 -0700
Subject: [PATCH 01/14] util/glsl2spirv: fix type error in argument handling

args.Olib is set to `store_true`, which means it will always be `True`
or `False`, this means that the we always, unconditionally, add
`--keep-uncalled` to the command line.

fixes: 9786d9ef2abb45a4e832cf1347581e3ca3aae9f0
---
 src/util/glsl2spirv.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/util/glsl2spirv.py b/src/util/glsl2spirv.py
index f11bf612cb11..8b765c987eb5 100644
--- a/src/util/glsl2spirv.py
+++ b/src/util/glsl2spirv.py
@@ -129,7 +129,7 @@ def process_file(args):
 
         cmd_list = ["glslangValidator"]
 
-        if args.Olib is not None:
+        if args.Olib:
             cmd_list += ["--keep-uncalled"]
 
         if args.vn is not None:
-- 
GitLab


From 658e5775fbcc82059743b3893e7283f91b53f204 Mon Sep 17 00:00:00 2001
From: Dylan Baker <dylan.c.baker@intel.com>
Date: Tue, 1 Nov 2022 12:41:44 -0700
Subject: [PATCH 02/14] util/glsl2spirv: drop inconsistant use of io.open

in python3 (the only python we support) io.open is an alias of the
bulitin open function, so it's not getting us anything, and we're not
using it consistently.
---
 src/util/glsl2spirv.py | 6 ++----
 1 file changed, 2 insertions(+), 4 deletions(-)

diff --git a/src/util/glsl2spirv.py b/src/util/glsl2spirv.py
index 8b765c987eb5..78468a2737e7 100644
--- a/src/util/glsl2spirv.py
+++ b/src/util/glsl2spirv.py
@@ -1,4 +1,3 @@
-# encoding=utf-8
 # Copyright Â© 2022 Intel Corporation
 #
 # Permission is hereby granted, free of charge, to any person obtaining a
@@ -24,7 +23,6 @@
 
 import argparse
 import subprocess
-import io
 import os
 
 class ShaderCompileError(RuntimeError):
@@ -109,7 +107,7 @@ def postprocess_file(args):
 
 
 def preprocess_file(args, origin_file):
-    with io.open(origin_file.name + ".copy", "w") as copy_file:
+    with open(origin_file.name + ".copy", "w") as copy_file:
         lines = origin_file.readlines()
 
         if args.create_entry is not None:
@@ -124,7 +122,7 @@ def preprocess_file(args, origin_file):
 
 
 def process_file(args):
-    with io.open(args.input, "r") as infile:
+    with open(args.input, "r") as infile:
         copy_file = preprocess_file(args, infile)
 
         cmd_list = ["glslangValidator"]
-- 
GitLab


From bbc64255e0442aae2d86e8bca6105f9ed5b87d97 Mon Sep 17 00:00:00 2001
From: Dylan Baker <dylan.c.baker@intel.com>
Date: Tue, 1 Nov 2022 12:47:21 -0700
Subject: [PATCH 03/14] util/glsl2spirv: let argparse actually enforce the
 restrictions we've set

---
 src/util/glsl2spirv.py | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

diff --git a/src/util/glsl2spirv.py b/src/util/glsl2spirv.py
index 78468a2737e7..ceb4daea80a2 100644
--- a/src/util/glsl2spirv.py
+++ b/src/util/glsl2spirv.py
@@ -40,7 +40,8 @@ def get_args():
 
     parser.add_argument('--glsl-version',
                         dest="glsl_ver",
-                        help="{100 | 110 | 120 | 130 | 140 | 150 | 300es | 310es | 320es | 330 | 400 | 410 | 420 | 430 | 440 | 450 | 460} set GLSL version, overrides #version in shader sources. Default is 460.")
+                        choices=['100', '110', '120', '130', '140', '150', '300es', '310es', '330', '400', '410', '420', '430', '440', '450', '460'],
+                        help="Override GLSL #version delcaration in source.")
 
     parser.add_argument("-Olib",
                         action='store_true',
@@ -56,7 +57,8 @@ def get_args():
 
     parser.add_argument("--stage",
                         default="vert",
-                        help="Uses specified stage rather than parsing the file extension choices for <stage> are vert, tesc, tese, geom, frag, or comp.")
+                        choices=['vert', 'tesc', 'tese', 'geom', 'frag', 'comp'],
+                        help="Uses specified stage rather than parsing the file extension")
     args = parser.parse_args()
     return args
 
-- 
GitLab


From f2edfb8072092e881676813af9721d6e62e04b6e Mon Sep 17 00:00:00 2001
From: Dylan Baker <dylan.c.baker@intel.com>
Date: Tue, 1 Nov 2022 12:49:53 -0700
Subject: [PATCH 04/14] util/glsl2spirv: fix appending extra flags

The variable is called `extra`, but what's written is `extra - flags`,
and `flags` is undefined, so if the variable was ever passed there would
be an uncaught exception.

fixes: 9786d9ef2abb45a4e832cf1347581e3ca3aae9f0
---
 src/util/glsl2spirv.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/util/glsl2spirv.py b/src/util/glsl2spirv.py
index ceb4daea80a2..1e2a5dc6ab27 100644
--- a/src/util/glsl2spirv.py
+++ b/src/util/glsl2spirv.py
@@ -136,7 +136,7 @@ def process_file(args):
             cmd_list += ["--variable-name", args.vn]
 
         if args.extra is not None:
-            cmd_list.append(args.extra-flags)
+            cmd_list.append(args.extra)
 
         if args.create_entry is not None:
             cmd_list += ["--entry-point", args.create_entry]
-- 
GitLab


From c818d5b122d13879ff94c67d7e333e76c0d87ffd Mon Sep 17 00:00:00 2001
From: Dylan Baker <dylan.c.baker@intel.com>
Date: Tue, 1 Nov 2022 12:55:12 -0700
Subject: [PATCH 05/14] util/glsl2spriv: make --vn required

I'm not 100% sure whether it's right to make --vn required, or to avoid
the static conversioon, but this seems correct. Mypy (type checking
comming soon) points out that if --vn is None then the
convert_to_static_variable function will fail. Our one use of this sets
--vn, so there is no change there. Making --vn required
ensures that it will never be None, avoiding the problem.
---
 src/util/glsl2spirv.py | 1 +
 1 file changed, 1 insertion(+)

diff --git a/src/util/glsl2spirv.py b/src/util/glsl2spirv.py
index 1e2a5dc6ab27..0c320c85f63c 100644
--- a/src/util/glsl2spirv.py
+++ b/src/util/glsl2spirv.py
@@ -53,6 +53,7 @@ def get_args():
 
     parser.add_argument("--vn",
                         dest="vn",
+                        required=True,
                         help="Variable name. Creates a C header file that contains a uint32_t array.")
 
     parser.add_argument("--stage",
-- 
GitLab


From 54d9681fa528ef197fac2f3475c0d9127832643a Mon Sep 17 00:00:00 2001
From: Dylan Baker <dylan.c.baker@intel.com>
Date: Tue, 1 Nov 2022 12:58:19 -0700
Subject: [PATCH 06/14] util/glsl2spirv: add some error handling for unexpected
 code paths

We expect that conver_to_static_variable and overrride_version will find
and replace something, so let's fail loudly if they don't.
---
 src/util/glsl2spirv.py | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/src/util/glsl2spirv.py b/src/util/glsl2spirv.py
index 0c320c85f63c..55c56d7a3a11 100644
--- a/src/util/glsl2spirv.py
+++ b/src/util/glsl2spirv.py
@@ -86,6 +86,7 @@ def convert_to_static_variable(lines, varname):
         if l.find(varname) != -1:
             lines[idx] = "static " + lines[idx]
             return lines
+    raise RuntimeError(f'Did not find {varname}, this is unexpected')
 
 
 def override_version(lines, glsl_version):
@@ -93,6 +94,7 @@ def override_version(lines, glsl_version):
         if l.find('#version ') != -1:
             lines[idx] = "#version {}\n".format(glsl_version)
             return lines
+    raise RuntimeError('Did not find #version directive, this is unexpected')
 
 
 def postprocess_file(args):
-- 
GitLab


From 87aa4ff1fc25e680b087a21a8a9db67690a82924 Mon Sep 17 00:00:00 2001
From: Dylan Baker <dylan.c.baker@intel.com>
Date: Tue, 1 Nov 2022 12:59:06 -0700
Subject: [PATCH 07/14] util/glsl2spirv: add type annotations

Which are all clean
---
 src/util/glsl2spirv.py | 30 ++++++++++++++++++++++--------
 1 file changed, 22 insertions(+), 8 deletions(-)

diff --git a/src/util/glsl2spirv.py b/src/util/glsl2spirv.py
index 55c56d7a3a11..42f57b4a4bbd 100644
--- a/src/util/glsl2spirv.py
+++ b/src/util/glsl2spirv.py
@@ -21,15 +21,29 @@
 
 # Converts GLSL shader to SPIR-V library 
 
+from __future__ import annotations
 import argparse
 import subprocess
 import os
+import typing as T
+
+if T.TYPE_CHECKING:
+
+    class Arguments(T.Protocol):
+        input: str
+        output: str
+        create_entry: T.Optional[str]
+        glsl_ver: T.Optional[str]
+        Olib: bool
+        extra: T.Optional[str]
+        vn: str
+        stage: str
 
 class ShaderCompileError(RuntimeError):
     def __init__(self, *args):
         super(ShaderCompileError, self).__init__(*args)
 
-def get_args():
+def get_args() -> Arguments:
     parser = argparse.ArgumentParser()
     parser.add_argument('input', help="Name of input file.")
     parser.add_argument('output', help="Name of output file.")
@@ -64,7 +78,7 @@ def get_args():
     return args
 
 
-def create_include_guard(lines, filename):
+def create_include_guard(lines: T.List[str], filename: str) -> T.List[str]:
     filename = filename.replace('.', '_')
     upper_name = filename.upper()
 
@@ -81,7 +95,7 @@ def create_include_guard(lines, filename):
     return guard_head + lines + guard_tail
 
 
-def convert_to_static_variable(lines, varname):
+def convert_to_static_variable(lines: T.List[str], varname: str) -> T.List[str]:
     for idx, l in enumerate(lines):
         if l.find(varname) != -1:
             lines[idx] = "static " + lines[idx]
@@ -89,7 +103,7 @@ def convert_to_static_variable(lines, varname):
     raise RuntimeError(f'Did not find {varname}, this is unexpected')
 
 
-def override_version(lines, glsl_version):
+def override_version(lines: T.List[str], glsl_version: str) -> T.List[str]:
     for idx, l in enumerate(lines):
         if l.find('#version ') != -1:
             lines[idx] = "#version {}\n".format(glsl_version)
@@ -97,7 +111,7 @@ def override_version(lines, glsl_version):
     raise RuntimeError('Did not find #version directive, this is unexpected')
 
 
-def postprocess_file(args):
+def postprocess_file(args: Arguments) -> None:
     with open(args.output, "r") as r:
         lines = r.readlines()
 
@@ -111,7 +125,7 @@ def postprocess_file(args):
             w.writelines(lines)
 
 
-def preprocess_file(args, origin_file):
+def preprocess_file(args: Arguments, origin_file: T.TextIO) -> str:
     with open(origin_file.name + ".copy", "w") as copy_file:
         lines = origin_file.readlines()
 
@@ -126,7 +140,7 @@ def preprocess_file(args, origin_file):
         return copy_file.name
 
 
-def process_file(args):
+def process_file(args: Arguments) -> None:
     with open(args.input, "r") as infile:
         copy_file = preprocess_file(args, infile)
 
@@ -169,7 +183,7 @@ def process_file(args):
             os.remove(copy_file)
 
 
-def main():
+def main() -> None:
     args = get_args()
     process_file(args)
 
-- 
GitLab


From 64099ec44a63a0f3ab4c4144a6a166181e5f4692 Mon Sep 17 00:00:00 2001
From: Dylan Baker <dylan.c.baker@intel.com>
Date: Tue, 1 Nov 2022 13:00:26 -0700
Subject: [PATCH 08/14] util/glsl2spirv: close resources as soon as possible

---
 src/util/glsl2spirv.py | 66 +++++++++++++++++++++---------------------
 1 file changed, 33 insertions(+), 33 deletions(-)

diff --git a/src/util/glsl2spirv.py b/src/util/glsl2spirv.py
index 42f57b4a4bbd..220b1d7390f0 100644
--- a/src/util/glsl2spirv.py
+++ b/src/util/glsl2spirv.py
@@ -115,14 +115,14 @@ def postprocess_file(args: Arguments) -> None:
     with open(args.output, "r") as r:
         lines = r.readlines()
 
-        # glslangValidator creates a variable without the static modifier.
-        lines = convert_to_static_variable(lines, args.vn)
+    # glslangValidator creates a variable without the static modifier.
+    lines = convert_to_static_variable(lines, args.vn)
 
-        # '#pragma once' is unstandardised.
-        lines = create_include_guard(lines, os.path.basename(r.name))
+    # '#pragma once' is unstandardised.
+    lines = create_include_guard(lines, os.path.basename(r.name))
 
-        with open(args.output, "w") as w:
-            w.writelines(lines)
+    with open(args.output, "w") as w:
+        w.writelines(lines)
 
 
 def preprocess_file(args: Arguments, origin_file: T.TextIO) -> str:
@@ -137,50 +137,50 @@ def preprocess_file(args: Arguments, origin_file: T.TextIO) -> str:
 
         copy_file.writelines(lines)
 
-        return copy_file.name
+    return copy_file.name
 
 
 def process_file(args: Arguments) -> None:
     with open(args.input, "r") as infile:
         copy_file = preprocess_file(args, infile)
 
-        cmd_list = ["glslangValidator"]
+    cmd_list = ["glslangValidator"]
 
-        if args.Olib:
-            cmd_list += ["--keep-uncalled"]
+    if args.Olib:
+        cmd_list += ["--keep-uncalled"]
 
-        if args.vn is not None:
-            cmd_list += ["--variable-name", args.vn]
+    if args.vn is not None:
+        cmd_list += ["--variable-name", args.vn]
 
-        if args.extra is not None:
-            cmd_list.append(args.extra)
+    if args.extra is not None:
+        cmd_list.append(args.extra)
 
-        if args.create_entry is not None:
-            cmd_list += ["--entry-point", args.create_entry]
+    if args.create_entry is not None:
+        cmd_list += ["--entry-point", args.create_entry]
 
-        cmd_list.append("-V")
-        cmd_list += ["-o", args.output]
-        cmd_list += ["-S", args.stage]
+    cmd_list.append("-V")
+    cmd_list += ["-o", args.output]
+    cmd_list += ["-S", args.stage]
 
-        cmd_list.append(copy_file)
+    cmd_list.append(copy_file)
 
-        with subprocess.Popen(" ".join(cmd_list),
-                              shell = True,
-                              stdout = subprocess.PIPE,
-                              stderr = subprocess.PIPE,
-                              stdin = subprocess.PIPE) as proc:
+    with subprocess.Popen(" ".join(cmd_list),
+                          shell = True,
+                          stdout = subprocess.PIPE,
+                          stderr = subprocess.PIPE,
+                          stdin = subprocess.PIPE) as proc:
 
-            out, err = proc.communicate(timeout=30)
+        out, err = proc.communicate(timeout=30)
 
-            if proc.returncode != 0:
-                message = out.decode('utf-8') + '\n' + err.decode('utf-8')
-                raise ShaderCompileError(message.strip())
+    if proc.returncode != 0:
+        message = out.decode('utf-8') + '\n' + err.decode('utf-8')
+        raise ShaderCompileError(message.strip())
 
-            if args.vn is not None:
-                postprocess_file(args)
+    if args.vn is not None:
+        postprocess_file(args)
 
-        if args.create_entry is not None:
-            os.remove(copy_file)
+    if args.create_entry is not None:
+        os.remove(copy_file)
 
 
 def main() -> None:
-- 
GitLab


From 138f98e810b55043156a2a735dcf1428eb04e7be Mon Sep 17 00:00:00 2001
From: Dylan Baker <dylan.c.baker@intel.com>
Date: Tue, 1 Nov 2022 13:02:41 -0700
Subject: [PATCH 09/14] util/glsl2spirv: simplify subprocess handling

We just want error checking, subprocess.run(check=True) does that with
less code.
---
 src/util/glsl2spirv.py | 15 +--------------
 1 file changed, 1 insertion(+), 14 deletions(-)

diff --git a/src/util/glsl2spirv.py b/src/util/glsl2spirv.py
index 220b1d7390f0..f38f2e3339fd 100644
--- a/src/util/glsl2spirv.py
+++ b/src/util/glsl2spirv.py
@@ -39,9 +39,6 @@ if T.TYPE_CHECKING:
         vn: str
         stage: str
 
-class ShaderCompileError(RuntimeError):
-    def __init__(self, *args):
-        super(ShaderCompileError, self).__init__(*args)
 
 def get_args() -> Arguments:
     parser = argparse.ArgumentParser()
@@ -164,17 +161,7 @@ def process_file(args: Arguments) -> None:
 
     cmd_list.append(copy_file)
 
-    with subprocess.Popen(" ".join(cmd_list),
-                          shell = True,
-                          stdout = subprocess.PIPE,
-                          stderr = subprocess.PIPE,
-                          stdin = subprocess.PIPE) as proc:
-
-        out, err = proc.communicate(timeout=30)
-
-    if proc.returncode != 0:
-        message = out.decode('utf-8') + '\n' + err.decode('utf-8')
-        raise ShaderCompileError(message.strip())
+    subprocess.run(cmd_list, stdout=subprocess.DEVNULL, check=True)
 
     if args.vn is not None:
         postprocess_file(args)
-- 
GitLab


From 66f42cf24172b2238ba4fa88cce2e75c9dcb24f6 Mon Sep 17 00:00:00 2001
From: Dylan Baker <dylan.c.baker@intel.com>
Date: Tue, 1 Nov 2022 13:28:18 -0700
Subject: [PATCH 10/14] util/glsl2spirv: use if `x in str` instead of
 `str.find`

The latter is only idiomatically used when a start and/or stop position
is required.
---
 src/util/glsl2spirv.py | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/src/util/glsl2spirv.py b/src/util/glsl2spirv.py
index f38f2e3339fd..d87a5367dc8e 100644
--- a/src/util/glsl2spirv.py
+++ b/src/util/glsl2spirv.py
@@ -85,7 +85,7 @@ def create_include_guard(lines: T.List[str], filename: str) -> T.List[str]:
 
     # remove '#pragma once'
     for idx, l in enumerate(lines):
-        if l.find('#pragma once') != -1:
+        if '#pragma once' in l:
             lines.pop(idx)
             break
 
@@ -94,7 +94,7 @@ def create_include_guard(lines: T.List[str], filename: str) -> T.List[str]:
 
 def convert_to_static_variable(lines: T.List[str], varname: str) -> T.List[str]:
     for idx, l in enumerate(lines):
-        if l.find(varname) != -1:
+        if varname in l:
             lines[idx] = "static " + lines[idx]
             return lines
     raise RuntimeError(f'Did not find {varname}, this is unexpected')
@@ -102,7 +102,7 @@ def convert_to_static_variable(lines: T.List[str], varname: str) -> T.List[str]:
 
 def override_version(lines: T.List[str], glsl_version: str) -> T.List[str]:
     for idx, l in enumerate(lines):
-        if l.find('#version ') != -1:
+        if '#version ' in l:
             lines[idx] = "#version {}\n".format(glsl_version)
             return lines
     raise RuntimeError('Did not find #version directive, this is unexpected')
-- 
GitLab


From d039a87fe71bc14974bb808326704e9a31f78a72 Mon Sep 17 00:00:00 2001
From: Dylan Baker <dylan.c.baker@intel.com>
Date: Tue, 1 Nov 2022 13:29:21 -0700
Subject: [PATCH 11/14] util/glsl2spirv: use f-strings

Which are both faster and easier to read
---
 src/util/glsl2spirv.py | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)

diff --git a/src/util/glsl2spirv.py b/src/util/glsl2spirv.py
index d87a5367dc8e..aa4445b5d48f 100644
--- a/src/util/glsl2spirv.py
+++ b/src/util/glsl2spirv.py
@@ -79,9 +79,9 @@ def create_include_guard(lines: T.List[str], filename: str) -> T.List[str]:
     filename = filename.replace('.', '_')
     upper_name = filename.upper()
 
-    guard_head = ["#ifndef {}\n".format(upper_name),
-                  "#define {}\n".format(upper_name)]
-    guard_tail = ["\n#endif // {}\n".format(upper_name)]
+    guard_head = [f"#ifndef {upper_name}\n",
+                  f"#define {upper_name}\n"]
+    guard_tail = [f"\n#endif // {upper_name}\n"]
 
     # remove '#pragma once'
     for idx, l in enumerate(lines):
@@ -95,7 +95,7 @@ def create_include_guard(lines: T.List[str], filename: str) -> T.List[str]:
 def convert_to_static_variable(lines: T.List[str], varname: str) -> T.List[str]:
     for idx, l in enumerate(lines):
         if varname in l:
-            lines[idx] = "static " + lines[idx]
+            lines[idx] = f"static {l}"
             return lines
     raise RuntimeError(f'Did not find {varname}, this is unexpected')
 
@@ -103,7 +103,7 @@ def convert_to_static_variable(lines: T.List[str], varname: str) -> T.List[str]:
 def override_version(lines: T.List[str], glsl_version: str) -> T.List[str]:
     for idx, l in enumerate(lines):
         if '#version ' in l:
-            lines[idx] = "#version {}\n".format(glsl_version)
+            lines[idx] = f"#version {glsl_version}\n"
             return lines
     raise RuntimeError('Did not find #version directive, this is unexpected')
 
@@ -127,7 +127,7 @@ def preprocess_file(args: Arguments, origin_file: T.TextIO) -> str:
         lines = origin_file.readlines()
 
         if args.create_entry is not None:
-            lines.append("\nvoid {}()".format(args.create_entry) + "{}\n")
+            lines.append(f"\nvoid {args.create_entry}() {{}}\n")
 
         if args.glsl_ver is not None:
             override_version(lines, args.glsl_ver)
-- 
GitLab


From 296d40aaff610385ae3a9504de118de78698d455 Mon Sep 17 00:00:00 2001
From: Dylan Baker <dylan.c.baker@intel.com>
Date: Tue, 1 Nov 2022 13:29:48 -0700
Subject: [PATCH 12/14] util/glsl2spirv: cleanup list extension

- consistantly use list.extend instead of list +=, which has gotcahs
- condense list extension calls when possible
---
 src/util/glsl2spirv.py | 19 ++++++++++---------
 1 file changed, 10 insertions(+), 9 deletions(-)

diff --git a/src/util/glsl2spirv.py b/src/util/glsl2spirv.py
index aa4445b5d48f..7b7fe60dd12a 100644
--- a/src/util/glsl2spirv.py
+++ b/src/util/glsl2spirv.py
@@ -144,22 +144,23 @@ def process_file(args: Arguments) -> None:
     cmd_list = ["glslangValidator"]
 
     if args.Olib:
-        cmd_list += ["--keep-uncalled"]
+        cmd_list.append("--keep-uncalled")
 
     if args.vn is not None:
-        cmd_list += ["--variable-name", args.vn]
+        cmd_list.extend(["--variable-name", args.vn])
 
     if args.extra is not None:
         cmd_list.append(args.extra)
 
     if args.create_entry is not None:
-        cmd_list += ["--entry-point", args.create_entry]
-
-    cmd_list.append("-V")
-    cmd_list += ["-o", args.output]
-    cmd_list += ["-S", args.stage]
-
-    cmd_list.append(copy_file)
+        cmd_list.extend(["--entry-point", args.create_entry])
+
+    cmd_list.extend([
+        '-V',
+        '-o', args.output,
+        '-S', args.stage,
+        copy_file,
+    ])
 
     subprocess.run(cmd_list, stdout=subprocess.DEVNULL, check=True)
 
-- 
GitLab


From 09d202dbbf2e3e1a478e8b1e173a0bde345ee3bd Mon Sep 17 00:00:00 2001
From: Dylan Baker <dylan.c.baker@intel.com>
Date: Tue, 1 Nov 2022 13:35:24 -0700
Subject: [PATCH 13/14] meson: prog_glslang should always be for the build
 machine

It doesn't produce different code when compiled for the host machine,
and this avoids needing two copies and possibly a host machine emulator
in cross compilation settings
---
 meson.build | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/meson.build b/meson.build
index 6289f11afd0b..68c82f630b07 100644
--- a/meson.build
+++ b/meson.build
@@ -684,8 +684,7 @@ if vdpau_drivers_path == ''
   vdpau_drivers_path = join_paths(get_option('libdir'), 'vdpau')
 endif
 
-if with_vulkan_overlay_layer or with_aco_tests or with_amd_vk
-  prog_glslang = find_program('glslangValidator')
+  prog_glslang = find_program('glslangValidator', native : true)
   if run_command(prog_glslang, [ '--quiet', '--version' ], check : false).returncode() == 0
     glslang_quiet = ['--quiet']
   else
-- 
GitLab


From 43267f37a22060c743484cccf6559f223645c5f3 Mon Sep 17 00:00:00 2001
From: Dylan Baker <dylan.c.baker@intel.com>
Date: Tue, 1 Nov 2022 13:37:06 -0700
Subject: [PATCH 14/14] util/glsl2spirv: pass path to glslangValidator into the
 script

This allows users to override the location of glslang using normal meson
mechanisms.
---
 meson.build                  | 1 +
 src/intel/vulkan/meson.build | 1 +
 src/util/glsl2spirv.py       | 4 +++-
 3 files changed, 5 insertions(+), 1 deletion(-)

diff --git a/meson.build b/meson.build
index 68c82f630b07..2f68f722ca5f 100644
--- a/meson.build
+++ b/meson.build
@@ -684,6 +684,7 @@ if vdpau_drivers_path == ''
   vdpau_drivers_path = join_paths(get_option('libdir'), 'vdpau')
 endif
 
+if with_vulkan_overlay_layer or with_aco_tests or with_amd_vk or with_intel_vk
   prog_glslang = find_program('glslangValidator', native : true)
   if run_command(prog_glslang, [ '--quiet', '--version' ], check : false).returncode() == 0
     glslang_quiet = ['--quiet']
diff --git a/src/intel/vulkan/meson.build b/src/intel/vulkan/meson.build
index f71018815b79..95993eedc1b1 100644
--- a/src/intel/vulkan/meson.build
+++ b/src/intel/vulkan/meson.build
@@ -49,6 +49,7 @@ float64_spv_h = custom_target(
   output : 'float64_spv.h',
   command : [
     prog_python, '@INPUT@', '@OUTPUT@',
+    prog_glslang,
     '--create-entry', 'main',
     '--vn', 'float64_spv_source',
     '--glsl-version', '450',
diff --git a/src/util/glsl2spirv.py b/src/util/glsl2spirv.py
index 7b7fe60dd12a..1aae2e4239be 100644
--- a/src/util/glsl2spirv.py
+++ b/src/util/glsl2spirv.py
@@ -32,6 +32,7 @@ if T.TYPE_CHECKING:
     class Arguments(T.Protocol):
         input: str
         output: str
+        glslang: str
         create_entry: T.Optional[str]
         glsl_ver: T.Optional[str]
         Olib: bool
@@ -44,6 +45,7 @@ def get_args() -> Arguments:
     parser = argparse.ArgumentParser()
     parser.add_argument('input', help="Name of input file.")
     parser.add_argument('output', help="Name of output file.")
+    parser.add_argument('glslang', help="path to glsllangValidator")
 
     parser.add_argument("--create-entry",
                         dest="create_entry",
@@ -141,7 +143,7 @@ def process_file(args: Arguments) -> None:
     with open(args.input, "r") as infile:
         copy_file = preprocess_file(args, infile)
 
-    cmd_list = ["glslangValidator"]
+    cmd_list = [args.glslang]
 
     if args.Olib:
         cmd_list.append("--keep-uncalled")
-- 
GitLab

