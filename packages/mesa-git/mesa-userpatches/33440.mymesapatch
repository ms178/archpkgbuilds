From 48ed1426cfedb003655e426afa0f59d39aa5f05b Mon Sep 17 00:00:00 2001
From: Qiang Yu <yuq825@gmail.com>
Date: Thu, 6 Feb 2025 10:01:50 +0800
Subject: [PATCH 1/3] radeonsi: fix has_non_uniform_tex_access info

Fixes: f859436b557 ("radeonsi: add has_non_uniform_tex_access shader info")
---
 src/gallium/drivers/radeonsi/si_shader_info.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/gallium/drivers/radeonsi/si_shader_info.c b/src/gallium/drivers/radeonsi/si_shader_info.c
index b539f1fa3ebcc..78b0c50cc96ab 100644
--- a/src/gallium/drivers/radeonsi/si_shader_info.c
+++ b/src/gallium/drivers/radeonsi/si_shader_info.c
@@ -308,7 +308,7 @@ static void scan_instruction(const struct nir_shader *nir, struct si_shader_info
             info->uses_indirect_descriptor = true;
       }
 
-      info->has_non_uniform_tex_access =
+      info->has_non_uniform_tex_access |=
          tex->texture_non_uniform || tex->sampler_non_uniform;
 
       info->has_shadow_comparison |= tex->is_shadow;
-- 
GitLab


From 30bbb0770015dfb0cd29502e146139ec3494bf95 Mon Sep 17 00:00:00 2001
From: Qiang Yu <yuq825@gmail.com>
Date: Fri, 7 Feb 2025 09:29:12 +0800
Subject: [PATCH 2/3] radeonsi,util: add more usage for
 AMD_FORCE_SHADER_USE_ACO

To be able to change a bunch of shaders to use aco. Used to
find problem shader when use aco quickly instead of one by
one when too many shaders.
---
 src/gallium/drivers/radeonsi/si_pipe.c        | 85 ++++++++++++++++---
 src/gallium/drivers/radeonsi/si_pipe.h        |  5 +-
 src/gallium/drivers/radeonsi/si_shader_info.c |  9 +-
 src/util/mesa-blake3.c                        |  2 +-
 src/util/mesa-blake3.h                        |  1 +
 5 files changed, 85 insertions(+), 17 deletions(-)

diff --git a/src/gallium/drivers/radeonsi/si_pipe.c b/src/gallium/drivers/radeonsi/si_pipe.c
index 73aaf1bac95cd..a0055b1eed40f 100644
--- a/src/gallium/drivers/radeonsi/si_pipe.c
+++ b/src/gallium/drivers/radeonsi/si_pipe.c
@@ -1075,6 +1075,7 @@ void si_destroy_screen(struct pipe_screen *pscreen)
    util_vertex_state_cache_deinit(&sscreen->vertex_state_cache);
 
    sscreen->ws->destroy(sscreen->ws);
+   FREE(sscreen->use_aco_shader_blakes);
    FREE(sscreen->nir_options);
    FREE(sscreen);
 }
@@ -1159,6 +1160,79 @@ static bool si_is_parallel_shader_compilation_finished(struct pipe_screen *scree
    return util_queue_fence_is_signalled(&sel->ready);
 }
 
+static void si_setup_force_shader_use_aco(struct si_screen *sscreen, bool support_aco)
+{
+   /* Usage:
+    *   1. shader type: vs|tcs|tes|gs|ps|cs, specify a class of shaders to use aco
+    *   2. shader blake: specify a single shader blake directly to use aco
+    *   3. filename: specify a file which contains shader blakes in lines
+    */
+
+   sscreen->use_aco_shader_type = MESA_SHADER_NONE;
+
+   if (sscreen->use_aco || !support_aco)
+      return;
+
+   const char *option = debug_get_option("AMD_FORCE_SHADER_USE_ACO", NULL);
+   if (!option)
+      return;
+
+   if (!strcmp("vs", option)) {
+      sscreen->use_aco_shader_type = MESA_SHADER_VERTEX;
+      return;
+   } else if (!strcmp("tcs", option)) {
+      sscreen->use_aco_shader_type = MESA_SHADER_TESS_CTRL;
+      return;
+   } else if (!strcmp("tes", option)) {
+      sscreen->use_aco_shader_type = MESA_SHADER_TESS_EVAL;
+      return;
+   } else if (!strcmp("gs", option)) {
+      sscreen->use_aco_shader_type = MESA_SHADER_GEOMETRY;
+      return;
+   } else if (!strcmp("ps", option)) {
+      sscreen->use_aco_shader_type = MESA_SHADER_FRAGMENT;
+      return;
+   } else if (!strcmp("cs", option)) {
+      sscreen->use_aco_shader_type = MESA_SHADER_COMPUTE;
+      return;
+   }
+
+   blake3_hash blake;
+   if (_mesa_blake3_from_printed_string(blake, option)) {
+      sscreen->use_aco_shader_blakes = MALLOC(sizeof(blake));
+      memcpy(sscreen->use_aco_shader_blakes[0], blake, sizeof(blake));
+      sscreen->num_use_aco_shader_blakes = 1;
+      return;
+   }
+
+   FILE *f = fopen(option, "r");
+   if (!f) {
+      fprintf(stderr, "radeonsi: invalid AMD_FORCE_SHADER_USE_ACO value\n");
+      return;
+   }
+
+   unsigned max_size = 16 * sizeof(blake3_hash);
+   sscreen->use_aco_shader_blakes = MALLOC(max_size);
+
+   char line[1024];
+   while (fgets(line, sizeof(line), f)) {
+      if (sscreen->num_use_aco_shader_blakes * sizeof(blake3_hash) >= max_size) {
+         sscreen->use_aco_shader_blakes = REALLOC(
+            sscreen->use_aco_shader_blakes, max_size, max_size * 2);
+         max_size *= 2;
+      }
+
+      if (line[BLAKE3_PRINTED_LEN] == '\n')
+         line[BLAKE3_PRINTED_LEN] = 0;
+
+      if (_mesa_blake3_from_printed_string(
+             sscreen->use_aco_shader_blakes[sscreen->num_use_aco_shader_blakes], line))
+         sscreen->num_use_aco_shader_blakes++;
+   }
+
+   fclose(f);
+}
+
 static struct pipe_screen *radeonsi_screen_create_impl(struct radeon_winsys *ws,
                                                        const struct pipe_screen_config *config)
 {
@@ -1226,16 +1300,7 @@ static struct pipe_screen *radeonsi_screen_create_impl(struct radeon_winsys *ws,
       return NULL;
    }
 
-   if (!sscreen->use_aco && support_aco) {
-      const char *shader_blake = debug_get_option("AMD_FORCE_SHADER_USE_ACO", NULL);
-      if (shader_blake) {
-         sscreen->force_shader_use_aco =
-            _mesa_blake3_from_printed_string(sscreen->use_aco_shader_blake, shader_blake);
-
-         if (!sscreen->force_shader_use_aco)
-            fprintf(stderr, "radeonsi: invalid AMD_SHADER_FORCE_ACO value\n");
-      }
-   }
+   si_setup_force_shader_use_aco(sscreen, support_aco);
 
    if ((sscreen->debug_flags & DBG(TMZ)) &&
        !sscreen->info.has_tmz_support) {
diff --git a/src/gallium/drivers/radeonsi/si_pipe.h b/src/gallium/drivers/radeonsi/si_pipe.h
index e4c4aa2367c8e..967e207ea6dd2 100644
--- a/src/gallium/drivers/radeonsi/si_pipe.h
+++ b/src/gallium/drivers/radeonsi/si_pipe.h
@@ -534,8 +534,9 @@ struct si_screen {
    bool use_aco;
 
    /* Force a single shader to use ACO, debug usage. */
-   bool force_shader_use_aco;
-   blake3_hash use_aco_shader_blake;
+   blake3_hash *use_aco_shader_blakes;
+   unsigned num_use_aco_shader_blakes;
+   enum pipe_shader_type use_aco_shader_type;
 
    struct {
 #define OPT_BOOL(name, dflt, description) bool name : 1;
diff --git a/src/gallium/drivers/radeonsi/si_shader_info.c b/src/gallium/drivers/radeonsi/si_shader_info.c
index 78b0c50cc96ab..770d4aeb713e1 100644
--- a/src/gallium/drivers/radeonsi/si_shader_info.c
+++ b/src/gallium/drivers/radeonsi/si_shader_info.c
@@ -483,11 +483,12 @@ static void scan_instruction(const struct nir_shader *nir, struct si_shader_info
 void si_nir_scan_shader(struct si_screen *sscreen, struct nir_shader *nir,
                         struct si_shader_info *info, bool colors_lowered)
 {
-   bool force_use_aco = false;
-   if (sscreen->force_shader_use_aco) {
-      if (!memcmp(sscreen->use_aco_shader_blake, nir->info.source_blake3,
-                  sizeof(sscreen->use_aco_shader_blake))) {
+   bool force_use_aco = sscreen->use_aco_shader_type == nir->info.stage;
+   for (unsigned i = 0; i < sscreen->num_use_aco_shader_blakes; i++) {
+      if (!memcmp(sscreen->use_aco_shader_blakes[i], nir->info.source_blake3,
+                  sizeof(blake3_hash))) {
          force_use_aco = true;
+         break;
       }
    }
 
diff --git a/src/util/mesa-blake3.c b/src/util/mesa-blake3.c
index 0f89f2da8a85c..b5f34d83ae78a 100644
--- a/src/util/mesa-blake3.c
+++ b/src/util/mesa-blake3.c
@@ -73,7 +73,7 @@ _mesa_blake3_print(FILE *f, const blake3_hash blake3)
 bool
 _mesa_blake3_from_printed_string(blake3_hash blake3, const char *printed)
 {
-   unsigned expected_len = BLAKE3_OUT_LEN32 * 12 - 2;
+   unsigned expected_len = BLAKE3_PRINTED_LEN;
    if (strlen(printed) != expected_len)
       return false;
 
diff --git a/src/util/mesa-blake3.h b/src/util/mesa-blake3.h
index 504cad8911f2f..8c2ae78911fb6 100644
--- a/src/util/mesa-blake3.h
+++ b/src/util/mesa-blake3.h
@@ -35,6 +35,7 @@ extern "C" {
 #define mesa_blake3 blake3_hasher
 #define BLAKE3_OUT_LEN32 (BLAKE3_OUT_LEN / 4)
 #define BLAKE3_HEX_LEN (2 * BLAKE3_OUT_LEN + 1)
+#define BLAKE3_PRINTED_LEN (BLAKE3_OUT_LEN32 * 12 - 2)
 
 typedef uint8_t blake3_hash[BLAKE3_OUT_LEN];
 
-- 
GitLab


From 7c89d5db4f82a5af7e0b7c180ea054849a37b884 Mon Sep 17 00:00:00 2001
From: Qiang Yu <yuq825@gmail.com>
Date: Fri, 7 Feb 2025 14:18:16 +0800
Subject: [PATCH 3/3] radeonsi: fix GravityMark corruption when use aco

aco may use smem load for ssbo when possible.

Closes: https://gitlab.freedesktop.org/mesa/mesa/-/issues/12518
Cc: mesa-stable
---
 src/gallium/drivers/radeonsi/si_barrier.c | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/src/gallium/drivers/radeonsi/si_barrier.c b/src/gallium/drivers/radeonsi/si_barrier.c
index 4951fd84b8326..555d0dcd3ac19 100644
--- a/src/gallium/drivers/radeonsi/si_barrier.c
+++ b/src/gallium/drivers/radeonsi/si_barrier.c
@@ -677,6 +677,11 @@ static void si_memory_barrier(struct pipe_context *ctx, unsigned flags)
                 PIPE_BARRIER_IMAGE | PIPE_BARRIER_STREAMOUT_BUFFER | PIPE_BARRIER_GLOBAL_BUFFER))
       sctx->barrier_flags |= SI_BARRIER_INV_VMEM;
 
+   /* Unlike LLVM, ACO may use SMEM for SSBOs and global access. */
+   if (sctx->screen->use_aco &&
+       (flags & (PIPE_BARRIER_SHADER_BUFFER | PIPE_BARRIER_GLOBAL_BUFFER)))
+      sctx->barrier_flags |= SI_BARRIER_INV_SMEM;
+
    if (flags & (PIPE_BARRIER_INDEX_BUFFER | PIPE_BARRIER_INDIRECT_BUFFER))
       sctx->barrier_flags |= SI_BARRIER_PFP_SYNC_ME;
 
-- 
GitLab

