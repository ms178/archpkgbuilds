From 618e23c5379412542deb4f98cc1861e0e7a9643a Mon Sep 17 00:00:00 2001
From: Emma Anholt <emma@anholt.net>
Date: Wed, 11 Oct 2023 08:59:33 -0700
Subject: [PATCH 01/14] dri: Fix a pasteo in dri2_from_names().

Fixes: 433ca3127a3b ("st/dri: replace format conversion functions with single mapping table")
---
 src/gallium/frontends/dri/dri2.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/gallium/frontends/dri/dri2.c b/src/gallium/frontends/dri/dri2.c
index a018ef704378..c2b9b730724e 100644
--- a/src/gallium/frontends/dri/dri2.c
+++ b/src/gallium/frontends/dri/dri2.c
@@ -1651,7 +1651,7 @@ dri2_from_names(__DRIscreen *screen, int width, int height, int fourcc,
 
    img->dri_components = map->dri_components;
    img->dri_fourcc = map->dri_fourcc;
-   img->dri_format = map->pipe_format;
+   img->dri_format = map->dri_format;
 
    return img;
 }
-- 
GitLab


From cf766db28ef1523faaad2ee128226e18677abfba Mon Sep 17 00:00:00 2001
From: Emma Anholt <emma@anholt.net>
Date: Wed, 11 Oct 2023 09:00:13 -0700
Subject: [PATCH 02/14] dri: Store the pipe format in DRIimages.

We store the DRI_IMAGE_FORMAT, but we often have to translate it back.
---
 src/gallium/frontends/dri/dri2.c        | 5 +++++
 src/gallium/frontends/dri/dri_helpers.c | 4 +++-
 src/gallium/frontends/dri/dri_screen.h  | 1 +
 3 files changed, 9 insertions(+), 1 deletion(-)

diff --git a/src/gallium/frontends/dri/dri2.c b/src/gallium/frontends/dri/dri2.c
index c2b9b730724e..43d3517c2165 100644
--- a/src/gallium/frontends/dri/dri2.c
+++ b/src/gallium/frontends/dri/dri2.c
@@ -1139,6 +1139,7 @@ dri2_create_image_from_name(__DRIscreen *_screen,
 
    img->dri_components = map->dri_components;
    img->dri_fourcc = map->dri_fourcc;
+   img->format = map->pipe_format;
    img->dri_format = map->dri_format;
 
    return img;
@@ -1226,6 +1227,7 @@ dri2_create_image_from_fd(__DRIscreen *_screen,
 
    img->dri_components = map->dri_components;
    img->dri_fourcc = fourcc;
+   img->format = map->pipe_format;
    img->dri_format = map->dri_format;
    img->imported_dmabuf = true;
 
@@ -1313,6 +1315,7 @@ dri2_create_image_common(__DRIscreen *_screen,
 
    img->level = 0;
    img->layer = 0;
+   img->format = map->pipe_format;
    img->dri_format = format;
    img->dri_fourcc = map->dri_fourcc;
    img->dri_components = 0;
@@ -1580,6 +1583,7 @@ dri2_dup_image(__DRIimage *image, void *loaderPrivate)
    pipe_resource_reference(&img->texture, image->texture);
    img->level = image->level;
    img->layer = image->layer;
+   img->format = image->format;
    img->dri_format = image->dri_format;
    img->internal_format = image->internal_format;
    /* This should be 0 for sub images, but dup is also used for base images. */
@@ -1651,6 +1655,7 @@ dri2_from_names(__DRIscreen *screen, int width, int height, int fourcc,
 
    img->dri_components = map->dri_components;
    img->dri_fourcc = map->dri_fourcc;
+   img->format = map->pipe_format;
    img->dri_format = map->dri_format;
 
    return img;
diff --git a/src/gallium/frontends/dri/dri_helpers.c b/src/gallium/frontends/dri/dri_helpers.c
index 8608da084db9..848448c78d05 100644
--- a/src/gallium/frontends/dri/dri_helpers.c
+++ b/src/gallium/frontends/dri/dri_helpers.c
@@ -333,6 +333,7 @@ dri2_create_image_from_renderbuffer2(__DRIcontext *context,
       return NULL;
    }
 
+   img->format = rb->Format;
    img->dri_format = driGLFormatToImageFormat(rb->Format);
    img->internal_format = rb->InternalFormat;
    img->loader_private = loaderPrivate;
@@ -442,7 +443,8 @@ dri2_create_from_texture(__DRIcontext *context, int target, unsigned texture,
    img->level = level;
    img->layer = depth;
    img->in_fence_fd = -1;
-   img->dri_format = driGLFormatToImageFormat(obj->Image[face][level]->TexFormat);
+   img->format = obj->Image[face][level]->TexFormat;
+   img->dri_format = driGLFormatToImageFormat(img->format);
    img->internal_format = obj->Image[face][level]->InternalFormat;
 
    img->loader_private = loaderPrivate;
diff --git a/src/gallium/frontends/dri/dri_screen.h b/src/gallium/frontends/dri/dri_screen.h
index b35d623c926a..4cbe2abf9d02 100644
--- a/src/gallium/frontends/dri/dri_screen.h
+++ b/src/gallium/frontends/dri/dri_screen.h
@@ -174,6 +174,7 @@ struct __DRIimageRec {
    struct pipe_resource *texture;
    unsigned level;
    unsigned layer;
+   enum pipe_format format;
    uint32_t dri_format;
    uint32_t dri_fourcc;
    uint32_t dri_components;
-- 
GitLab


From 69556f30d4f89c69019700635700a52ea34d4371 Mon Sep 17 00:00:00 2001
From: Emma Anholt <emma@anholt.net>
Date: Wed, 11 Oct 2023 09:05:28 -0700
Subject: [PATCH 03/14] dri: Make the common dri2_get_mapping_by_dri_format
 take a pipe format.

A step in deleting DRI_IMAGE_FORMAT.
---
 src/gallium/frontends/dri/dri2.c        | 17 +++++++++++++----
 src/gallium/frontends/dri/dri_helpers.c | 10 +++++-----
 src/gallium/frontends/dri/dri_helpers.h |  2 +-
 3 files changed, 19 insertions(+), 10 deletions(-)

diff --git a/src/gallium/frontends/dri/dri2.c b/src/gallium/frontends/dri/dri2.c
index 43d3517c2165..3cd13b2c2612 100644
--- a/src/gallium/frontends/dri/dri2.c
+++ b/src/gallium/frontends/dri/dri2.c
@@ -1111,12 +1111,21 @@ dri2_create_image_from_winsys(__DRIscreen *_screen,
    return img;
 }
 
+static const struct dri2_format_mapping *
+dri2_get_mapping_by_dri_format(int format)
+{
+   enum pipe_format pf = dri2_get_pipe_format_for_dri_format(format);
+   if (pf == PIPE_FORMAT_NONE)
+      return NULL;
+   return dri2_get_mapping_by_format(pf);
+}
+
 static __DRIimage *
 dri2_create_image_from_name(__DRIscreen *_screen,
                             int width, int height, int format,
                             int name, int pitch, void *loaderPrivate)
 {
-   const struct dri2_format_mapping *map = dri2_get_mapping_by_format(format);
+   const struct dri2_format_mapping *map = dri2_get_mapping_by_dri_format(format);
    struct winsys_handle whandle;
    __DRIimage *img;
 
@@ -1246,7 +1255,7 @@ dri2_create_image_common(__DRIscreen *_screen,
                          const unsigned count,
                          void *loaderPrivate)
 {
-   const struct dri2_format_mapping *map = dri2_get_mapping_by_format(format);
+   const struct dri2_format_mapping *map = dri2_get_mapping_by_dri_format(format);
    struct dri_screen *screen = dri_screen(_screen);
    struct pipe_screen *pscreen = screen->base.screen;
    __DRIimage *img;
@@ -1384,7 +1393,7 @@ dri2_query_image_common(__DRIimage *image, int attrib, int *value)
       } else {
          const struct dri2_format_mapping *map;
 
-         map = dri2_get_mapping_by_format(image->dri_format);
+         map = dri2_get_mapping_by_format(image->format);
          if (!map)
             return false;
 
@@ -1947,7 +1956,7 @@ dri2_map_image(__DRIcontext *context, __DRIimage *image,
       return NULL;
 
    unsigned plane = image->plane;
-   if (plane >= dri2_get_mapping_by_format(image->dri_format)->nplanes)
+   if (plane >= dri2_get_mapping_by_format(image->format)->nplanes)
       return NULL;
 
    /* Wait for glthread to finish because we can't use pipe_context from
diff --git a/src/gallium/frontends/dri/dri_helpers.c b/src/gallium/frontends/dri/dri_helpers.c
index 848448c78d05..2ef89fe616d0 100644
--- a/src/gallium/frontends/dri/dri_helpers.c
+++ b/src/gallium/frontends/dri/dri_helpers.c
@@ -346,7 +346,7 @@ dri2_create_image_from_renderbuffer2(__DRIcontext *context,
     * it's in a shareable state. Do this now while we still have the access to
     * the context.
     */
-   if (dri2_get_mapping_by_format(img->dri_format))
+   if (dri2_get_mapping_by_format(img->format))
       p_ctx->flush_resource(p_ctx, tex);
 
    ctx->Shared->HasExternallySharedImages = true;
@@ -456,7 +456,7 @@ dri2_create_from_texture(__DRIcontext *context, int target, unsigned texture,
     * it's in a shareable state. Do this now while we still have the access to
     * the context.
     */
-   if (dri2_get_mapping_by_format(img->dri_format))
+   if (dri2_get_mapping_by_format(img->format))
       p_ctx->flush_resource(p_ctx, tex);
 
    ctx->Shared->HasExternallySharedImages = true;
@@ -697,13 +697,13 @@ dri2_get_mapping_by_fourcc(int fourcc)
 }
 
 const struct dri2_format_mapping *
-dri2_get_mapping_by_format(int format)
+dri2_get_mapping_by_format(enum pipe_format format)
 {
-   if (format == __DRI_IMAGE_FORMAT_NONE)
+   if (format == PIPE_FORMAT_NONE)
       return NULL;
 
    for (unsigned i = 0; i < ARRAY_SIZE(dri2_format_table); i++) {
-      if (dri2_format_table[i].dri_format == format)
+      if (dri2_format_table[i].pipe_format == format)
          return &dri2_format_table[i];
    }
 
diff --git a/src/gallium/frontends/dri/dri_helpers.h b/src/gallium/frontends/dri/dri_helpers.h
index a0226987680a..3a14a5560fe1 100644
--- a/src/gallium/frontends/dri/dri_helpers.h
+++ b/src/gallium/frontends/dri/dri_helpers.h
@@ -47,7 +47,7 @@ const struct dri2_format_mapping *
 dri2_get_mapping_by_fourcc(int fourcc);
 
 const struct dri2_format_mapping *
-dri2_get_mapping_by_format(int format);
+dri2_get_mapping_by_format(enum pipe_format format);
 
 enum pipe_format
 dri2_get_pipe_format_for_dri_format(int format);
-- 
GitLab


From ab5b4063ea37dcb05e0addea2385252628642d4a Mon Sep 17 00:00:00 2001
From: Emma Anholt <emma@anholt.net>
Date: Wed, 11 Oct 2023 09:10:36 -0700
Subject: [PATCH 04/14] dri: Drop driImageFormatToGLFormat.

The map already has the pipe_format (aka mesa_format), no need to look up.
---
 src/gallium/frontends/dri/dri_screen.c |  3 +--
 src/gallium/frontends/dri/dri_util.c   | 10 ----------
 src/gallium/frontends/dri/dri_util.h   |  3 ---
 3 files changed, 1 insertion(+), 15 deletions(-)

diff --git a/src/gallium/frontends/dri/dri_screen.c b/src/gallium/frontends/dri/dri_screen.c
index 733b38a28de9..a2cc3234652b 100644
--- a/src/gallium/frontends/dri/dri_screen.c
+++ b/src/gallium/frontends/dri/dri_screen.c
@@ -811,8 +811,7 @@ dri_get_egl_image(struct pipe_frontend_screen *fscreen,
       /* Guess sized internal format for dma-bufs. Could be used
        * by EXT_EGL_image_storage.
        */
-      mesa_format mesa_format = driImageFormatToGLFormat(map->dri_format);
-      stimg->internalformat = driGLFormatToSizedInternalGLFormat(mesa_format);
+      stimg->internalformat = driGLFormatToSizedInternalGLFormat(map->pipe_format);
    } else {
       stimg->internalformat = img->internal_format;
    }
diff --git a/src/gallium/frontends/dri/dri_util.c b/src/gallium/frontends/dri/dri_util.c
index b27dee35f603..a62a4669bf2c 100644
--- a/src/gallium/frontends/dri/dri_util.c
+++ b/src/gallium/frontends/dri/dri_util.c
@@ -1099,16 +1099,6 @@ driGLFormatToSizedInternalGLFormat(mesa_format format)
    return GL_NONE;
 }
 
-mesa_format
-driImageFormatToGLFormat(uint32_t image_format)
-{
-   for (size_t i = 0; i < ARRAY_SIZE(format_mapping); i++)
-      if (format_mapping[i].image_format == image_format)
-         return format_mapping[i].mesa_format;
-
-   return MESA_FORMAT_NONE;
-}
-
 /** Image driver interface */
 const __DRIimageDriverExtension driImageDriverExtension = {
     .base = { __DRI_IMAGE_DRIVER, 1 },
diff --git a/src/gallium/frontends/dri/dri_util.h b/src/gallium/frontends/dri/dri_util.h
index a358487f0069..aeef11a2685c 100644
--- a/src/gallium/frontends/dri/dri_util.h
+++ b/src/gallium/frontends/dri/dri_util.h
@@ -123,9 +123,6 @@ driGLFormatToImageFormat(mesa_format format);
 extern uint32_t
 driGLFormatToSizedInternalGLFormat(mesa_format format);
 
-extern mesa_format
-driImageFormatToGLFormat(uint32_t image_format);
-
 extern const __DRIimageDriverExtension driImageDriverExtension;
 
 #endif /* _DRI_UTIL_H_ */
-- 
GitLab


From 3ac440af6ec7dcaf964c20a94ee00d9b771927ee Mon Sep 17 00:00:00 2001
From: Emma Anholt <emma@anholt.net>
Date: Wed, 11 Oct 2023 09:18:50 -0700
Subject: [PATCH 05/14] dri: Use the common dri2 format mapping instead of
 driGLFormatToImageFormat().

This means that we don't try to map L8 to DRI_IMAGE_FORMAT_R8 (and
L8A8->R8G8) any more, but we shouldn't be doing that because a map on the
other side would turn that into R8G instead of L8.  Still passes
dEQP-EGL.functional.image.api.create_image.*, which is what I think the
L8->R8 mapping was introducd for.
---
 src/gallium/frontends/dri/dri_helpers.c | 16 ++++++++++++----
 src/gallium/frontends/dri/dri_util.c    | 10 ----------
 src/gallium/frontends/dri/dri_util.h    |  3 ---
 3 files changed, 12 insertions(+), 17 deletions(-)

diff --git a/src/gallium/frontends/dri/dri_helpers.c b/src/gallium/frontends/dri/dri_helpers.c
index 2ef89fe616d0..06e59271dab2 100644
--- a/src/gallium/frontends/dri/dri_helpers.c
+++ b/src/gallium/frontends/dri/dri_helpers.c
@@ -334,7 +334,6 @@ dri2_create_image_from_renderbuffer2(__DRIcontext *context,
    }
 
    img->format = rb->Format;
-   img->dri_format = driGLFormatToImageFormat(rb->Format);
    img->internal_format = rb->InternalFormat;
    img->loader_private = loaderPrivate;
    img->screen = dri_ctx->screen;
@@ -346,8 +345,13 @@ dri2_create_image_from_renderbuffer2(__DRIcontext *context,
     * it's in a shareable state. Do this now while we still have the access to
     * the context.
     */
-   if (dri2_get_mapping_by_format(img->format))
+   const struct dri2_format_mapping *map = dri2_get_mapping_by_format(img->format);
+   if (map) {
+      img->dri_format = map->dri_format;
       p_ctx->flush_resource(p_ctx, tex);
+   } else {
+      img->dri_format = __DRI_IMAGE_FORMAT_NONE;
+   }
 
    ctx->Shared->HasExternallySharedImages = true;
    *error = __DRI_IMAGE_ERROR_SUCCESS;
@@ -444,7 +448,6 @@ dri2_create_from_texture(__DRIcontext *context, int target, unsigned texture,
    img->layer = depth;
    img->in_fence_fd = -1;
    img->format = obj->Image[face][level]->TexFormat;
-   img->dri_format = driGLFormatToImageFormat(img->format);
    img->internal_format = obj->Image[face][level]->InternalFormat;
 
    img->loader_private = loaderPrivate;
@@ -456,8 +459,13 @@ dri2_create_from_texture(__DRIcontext *context, int target, unsigned texture,
     * it's in a shareable state. Do this now while we still have the access to
     * the context.
     */
-   if (dri2_get_mapping_by_format(img->format))
+   const struct dri2_format_mapping *map = dri2_get_mapping_by_format(img->format);
+   if (map) {
+      img->dri_format = map->dri_format;
       p_ctx->flush_resource(p_ctx, tex);
+   } else {
+      img->dri_format = __DRI_IMAGE_FORMAT_NONE;
+   }
 
    ctx->Shared->HasExternallySharedImages = true;
    *error = __DRI_IMAGE_ERROR_SUCCESS;
diff --git a/src/gallium/frontends/dri/dri_util.c b/src/gallium/frontends/dri/dri_util.c
index a62a4669bf2c..a3475539fbdd 100644
--- a/src/gallium/frontends/dri/dri_util.c
+++ b/src/gallium/frontends/dri/dri_util.c
@@ -1079,16 +1079,6 @@ static const struct {
    },
 };
 
-uint32_t
-driGLFormatToImageFormat(mesa_format format)
-{
-   for (size_t i = 0; i < ARRAY_SIZE(format_mapping); i++)
-      if (format_mapping[i].mesa_format == format)
-         return format_mapping[i].image_format;
-
-   return __DRI_IMAGE_FORMAT_NONE;
-}
-
 uint32_t
 driGLFormatToSizedInternalGLFormat(mesa_format format)
 {
diff --git a/src/gallium/frontends/dri/dri_util.h b/src/gallium/frontends/dri/dri_util.h
index aeef11a2685c..6b6f4e18a5fe 100644
--- a/src/gallium/frontends/dri/dri_util.h
+++ b/src/gallium/frontends/dri/dri_util.h
@@ -117,9 +117,6 @@ driCreateContextAttribs(__DRIscreen *psp, int api,
                         unsigned *error,
                         void *data);
 
-extern uint32_t
-driGLFormatToImageFormat(mesa_format format);
-
 extern uint32_t
 driGLFormatToSizedInternalGLFormat(mesa_format format);
 
-- 
GitLab


From dd736a00f6fd0f2039a18100a9f624d49a0a4429 Mon Sep 17 00:00:00 2001
From: Emma Anholt <emma@anholt.net>
Date: Wed, 11 Oct 2023 09:22:23 -0700
Subject: [PATCH 06/14] dri: Drop the __DRI_IMAGE_FORMATs from dri_util's
 format_mapping.

Now those are only accessed through the more thorough dri2_format_mapping
table.
---
 src/gallium/frontends/dri/dri_util.c | 29 ----------------------------
 1 file changed, 29 deletions(-)

diff --git a/src/gallium/frontends/dri/dri_util.c b/src/gallium/frontends/dri/dri_util.c
index a3475539fbdd..b27358511275 100644
--- a/src/gallium/frontends/dri/dri_util.c
+++ b/src/gallium/frontends/dri/dri_util.c
@@ -929,151 +929,122 @@ const __DRI2flushControlExtension dri2FlushControlExtension = {
  * __DRI_IMAGE_FORMAT_R8 which maps to both MESA_FORMAT_{R,L}_UNORM8
  */
 static const struct {
-   uint32_t    image_format;
    mesa_format mesa_format;
    GLenum internal_format;
 } format_mapping[] = {
    {
-      .image_format    = __DRI_IMAGE_FORMAT_RGB565,
       .mesa_format     =        MESA_FORMAT_B5G6R5_UNORM,
       .internal_format =        GL_RGB565,
    },
    {
-      .image_format    = __DRI_IMAGE_FORMAT_ARGB1555,
       .mesa_format     =        MESA_FORMAT_B5G5R5A1_UNORM,
       .internal_format =        GL_RGB5_A1,
    },
    {
-      .image_format    = __DRI_IMAGE_FORMAT_ABGR1555,
       .mesa_format     =        MESA_FORMAT_R5G5B5A1_UNORM,
       .internal_format =        GL_RGB5_A1,
    },
    {
-      .image_format    = __DRI_IMAGE_FORMAT_XRGB8888,
       .mesa_format     =        MESA_FORMAT_B8G8R8X8_UNORM,
       .internal_format =        GL_RGB8,
    },
    {
-      .image_format    = __DRI_IMAGE_FORMAT_ABGR16161616F,
       .mesa_format     =        MESA_FORMAT_RGBA_FLOAT16,
       .internal_format =        GL_RGBA16F,
    },
    {
-      .image_format    = __DRI_IMAGE_FORMAT_XBGR16161616F,
       .mesa_format     =        MESA_FORMAT_RGBX_FLOAT16,
       .internal_format =        GL_RGB16F,
    },
    {
-      .image_format    = __DRI_IMAGE_FORMAT_ABGR16161616,
       .mesa_format     =        MESA_FORMAT_RGBA_UNORM16,
       .internal_format =        GL_RGBA16,
    },
    {
-      .image_format    = __DRI_IMAGE_FORMAT_XBGR16161616,
       .mesa_format     =        MESA_FORMAT_RGBX_UNORM16,
       .internal_format =        GL_RGB16,
    },
    {
-      .image_format    = __DRI_IMAGE_FORMAT_ARGB2101010,
       .mesa_format     =        MESA_FORMAT_B10G10R10A2_UNORM,
       .internal_format =        GL_RGB10_A2,
    },
    {
-      .image_format    = __DRI_IMAGE_FORMAT_XRGB2101010,
       .mesa_format     =        MESA_FORMAT_B10G10R10X2_UNORM,
       .internal_format =        GL_RGB10,
    },
    {
-      .image_format    = __DRI_IMAGE_FORMAT_ABGR2101010,
       .mesa_format     =        MESA_FORMAT_R10G10B10A2_UNORM,
       .internal_format =        GL_RGB10_A2,
    },
    {
-      .image_format    = __DRI_IMAGE_FORMAT_XBGR2101010,
       .mesa_format     =        MESA_FORMAT_R10G10B10X2_UNORM,
       .internal_format =        GL_RGB10,
    },
    {
-      .image_format    = __DRI_IMAGE_FORMAT_ARGB8888,
       .mesa_format     =        MESA_FORMAT_B8G8R8A8_UNORM,
       .internal_format =        GL_RGBA8,
    },
    {
-      .image_format    = __DRI_IMAGE_FORMAT_ABGR8888,
       .mesa_format     =        MESA_FORMAT_R8G8B8A8_UNORM,
       .internal_format =        GL_RGBA8,
    },
    {
-      .image_format    = __DRI_IMAGE_FORMAT_XBGR8888,
       .mesa_format     =        MESA_FORMAT_R8G8B8X8_UNORM,
       .internal_format =        GL_RGB8,
    },
    {
-      .image_format    = __DRI_IMAGE_FORMAT_R8,
       .mesa_format     =        MESA_FORMAT_R_UNORM8,
       .internal_format =        GL_R8,
    },
    {
-      .image_format    = __DRI_IMAGE_FORMAT_R8,
       .mesa_format     =        MESA_FORMAT_L_UNORM8,
       .internal_format =        GL_R8,
    },
 #if UTIL_ARCH_LITTLE_ENDIAN
    {
-      .image_format    = __DRI_IMAGE_FORMAT_GR88,
       .mesa_format     =        MESA_FORMAT_RG_UNORM8,
       .internal_format =        GL_RG8,
    },
    {
-      .image_format    = __DRI_IMAGE_FORMAT_GR88,
       .mesa_format     =        MESA_FORMAT_LA_UNORM8,
       .internal_format =        GL_RG8,
    },
 #endif
    {
-      .image_format    = __DRI_IMAGE_FORMAT_SABGR8,
       .mesa_format     =        MESA_FORMAT_R8G8B8A8_SRGB,
       .internal_format =        GL_SRGB8_ALPHA8,
    },
    {
-      .image_format    = __DRI_IMAGE_FORMAT_SARGB8,
       .mesa_format     =        MESA_FORMAT_B8G8R8A8_SRGB,
       .internal_format =        GL_SRGB8_ALPHA8,
    },
    {
-      .image_format = __DRI_IMAGE_FORMAT_SXRGB8,
       .mesa_format  =           MESA_FORMAT_B8G8R8X8_SRGB,
       .internal_format =        GL_SRGB8,
    },
    {
-      .image_format    = __DRI_IMAGE_FORMAT_R16,
       .mesa_format     =        MESA_FORMAT_R_UNORM16,
       .internal_format =        GL_R16,
    },
    {
-      .image_format    = __DRI_IMAGE_FORMAT_R16,
       .mesa_format     =        MESA_FORMAT_L_UNORM16,
       .internal_format =        GL_R16,
    },
 #if UTIL_ARCH_LITTLE_ENDIAN
    {
-      .image_format    = __DRI_IMAGE_FORMAT_GR1616,
       .mesa_format     =        MESA_FORMAT_RG_UNORM16,
       .internal_format =        GL_RG16,
    },
    {
-      .image_format    = __DRI_IMAGE_FORMAT_GR1616,
       .mesa_format     =        MESA_FORMAT_LA_UNORM16,
       .internal_format =        GL_RG16,
    },
 #endif
    {
-      .image_format    = __DRI_IMAGE_FORMAT_ARGB4444,
       .mesa_format     =        MESA_FORMAT_B4G4R4A4_UNORM,
       .internal_format =        GL_RGBA4,
    },
    {
-      .image_format    = __DRI_IMAGE_FORMAT_ABGR4444,
       .mesa_format     =        MESA_FORMAT_R4G4B4A4_UNORM,
       .internal_format =        GL_RGBA4,
    },
-- 
GitLab


From a12aca0f8fa5ef3103091d09d11fe4ff09c0b602 Mon Sep 17 00:00:00 2001
From: Emma Anholt <emma@anholt.net>
Date: Wed, 11 Oct 2023 09:33:18 -0700
Subject: [PATCH 07/14] dri2: Move the sized GL format mapping into
 dri2_format_mapping.

One less format table to forget to keep updated as we introduce formats we
export/import.
---
 src/gallium/frontends/dri/dri2.c        |   8 ++
 src/gallium/frontends/dri/dri_helpers.c | 102 +++++++++---------
 src/gallium/frontends/dri/dri_helpers.h |   5 +
 src/gallium/frontends/dri/dri_screen.c  |   2 +-
 src/gallium/frontends/dri/dri_util.c    | 136 ------------------------
 src/gallium/frontends/dri/dri_util.h    |   3 -
 6 files changed, 65 insertions(+), 191 deletions(-)

diff --git a/src/gallium/frontends/dri/dri2.c b/src/gallium/frontends/dri/dri2.c
index 3cd13b2c2612..509781bdf80f 100644
--- a/src/gallium/frontends/dri/dri2.c
+++ b/src/gallium/frontends/dri/dri2.c
@@ -863,6 +863,7 @@ static const struct dri2_format_mapping r8_b8_g8_mapping = {
    __DRI_IMAGE_FORMAT_NONE,
    __DRI_IMAGE_COMPONENTS_Y_U_V,
    PIPE_FORMAT_R8_B8_G8_420_UNORM,
+   GL_NONE,
    3,
    { { 0, 0, 0, __DRI_IMAGE_FORMAT_R8 },
      { 2, 1, 1, __DRI_IMAGE_FORMAT_R8 },
@@ -874,6 +875,7 @@ static const struct dri2_format_mapping r8_g8_b8_mapping = {
    __DRI_IMAGE_FORMAT_NONE,
    __DRI_IMAGE_COMPONENTS_Y_U_V,
    PIPE_FORMAT_R8_G8_B8_420_UNORM,
+   GL_NONE,
    3,
    { { 0, 0, 0, __DRI_IMAGE_FORMAT_R8 },
      { 1, 1, 1, __DRI_IMAGE_FORMAT_R8 },
@@ -885,6 +887,7 @@ static const struct dri2_format_mapping r8_g8b8_mapping = {
    __DRI_IMAGE_FORMAT_NONE,
    __DRI_IMAGE_COMPONENTS_Y_UV,
    PIPE_FORMAT_R8_G8B8_420_UNORM,
+   GL_NONE,
    2,
    { { 0, 0, 0, __DRI_IMAGE_FORMAT_R8 },
      { 1, 1, 1, __DRI_IMAGE_FORMAT_GR88 } }
@@ -895,6 +898,7 @@ static const struct dri2_format_mapping r8_b8g8_mapping = {
    __DRI_IMAGE_FORMAT_NONE,
    __DRI_IMAGE_COMPONENTS_Y_UV,
    PIPE_FORMAT_R8_B8G8_420_UNORM,
+   GL_NONE,
    2,
    { { 0, 0, 0, __DRI_IMAGE_FORMAT_R8 },
      { 1, 1, 1, __DRI_IMAGE_FORMAT_GR88 } }
@@ -905,6 +909,7 @@ static const struct dri2_format_mapping r8g8_r8b8_mapping = {
    __DRI_IMAGE_FORMAT_NONE,
    __DRI_IMAGE_COMPONENTS_Y_XUXV,
    PIPE_FORMAT_R8G8_R8B8_UNORM, 2,
+   GL_NONE,
    { { 0, 0, 0, __DRI_IMAGE_FORMAT_GR88 },
      { 0, 1, 0, __DRI_IMAGE_FORMAT_ARGB8888 } }
 };
@@ -914,6 +919,7 @@ static const struct dri2_format_mapping r8b8_r8g8_mapping = {
    __DRI_IMAGE_FORMAT_NONE,
    __DRI_IMAGE_COMPONENTS_Y_XUXV,
    PIPE_FORMAT_R8B8_R8G8_UNORM, 2,
+   GL_NONE,
    { { 0, 0, 0, __DRI_IMAGE_FORMAT_GR88 },
      { 0, 1, 0, __DRI_IMAGE_FORMAT_ARGB8888 } }
 };
@@ -923,6 +929,7 @@ static const struct dri2_format_mapping b8r8_g8r8_mapping = {
    __DRI_IMAGE_FORMAT_NONE,
    __DRI_IMAGE_COMPONENTS_Y_XUXV,
    PIPE_FORMAT_B8R8_G8R8_UNORM, 2,
+   GL_NONE,
    { { 0, 0, 0, __DRI_IMAGE_FORMAT_GR88 },
      { 0, 1, 0, __DRI_IMAGE_FORMAT_ABGR8888 } }
 };
@@ -932,6 +939,7 @@ static const struct dri2_format_mapping g8r8_b8r8_mapping = {
    __DRI_IMAGE_FORMAT_NONE,
    __DRI_IMAGE_COMPONENTS_Y_XUXV,
    PIPE_FORMAT_G8R8_B8R8_UNORM, 2,
+   GL_NONE,
    { { 0, 0, 0, __DRI_IMAGE_FORMAT_GR88 },
      { 0, 1, 0, __DRI_IMAGE_FORMAT_ABGR8888 } }
 };
diff --git a/src/gallium/frontends/dri/dri_helpers.c b/src/gallium/frontends/dri/dri_helpers.c
index 06e59271dab2..3861cd29c499 100644
--- a/src/gallium/frontends/dri/dri_helpers.c
+++ b/src/gallium/frontends/dri/dri_helpers.c
@@ -474,164 +474,164 @@ dri2_create_from_texture(__DRIcontext *context, int target, unsigned texture,
 
 static const struct dri2_format_mapping dri2_format_table[] = {
       { DRM_FORMAT_ABGR16161616F, __DRI_IMAGE_FORMAT_ABGR16161616F,
-        __DRI_IMAGE_COMPONENTS_RGBA,      PIPE_FORMAT_R16G16B16A16_FLOAT, 1,
+        __DRI_IMAGE_COMPONENTS_RGBA,      PIPE_FORMAT_R16G16B16A16_FLOAT, GL_RGBA16F, 1,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_ABGR16161616F } } },
       { DRM_FORMAT_XBGR16161616F, __DRI_IMAGE_FORMAT_XBGR16161616F,
-        __DRI_IMAGE_COMPONENTS_RGB,       PIPE_FORMAT_R16G16B16X16_FLOAT, 1,
+        __DRI_IMAGE_COMPONENTS_RGB,       PIPE_FORMAT_R16G16B16X16_FLOAT, GL_RGB16F, 1,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_XBGR16161616F } } },
       { DRM_FORMAT_ABGR16161616, __DRI_IMAGE_FORMAT_ABGR16161616,
-        __DRI_IMAGE_COMPONENTS_RGBA,      PIPE_FORMAT_R16G16B16A16_UNORM, 1,
+        __DRI_IMAGE_COMPONENTS_RGBA,      PIPE_FORMAT_R16G16B16A16_UNORM, GL_RGBA16, 1,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_ABGR16161616 } } },
       { DRM_FORMAT_XBGR16161616, __DRI_IMAGE_FORMAT_XBGR16161616,
-        __DRI_IMAGE_COMPONENTS_RGB,      PIPE_FORMAT_R16G16B16X16_UNORM, 1,
+        __DRI_IMAGE_COMPONENTS_RGB,      PIPE_FORMAT_R16G16B16X16_UNORM, GL_RGB16, 1,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_XBGR16161616 } } },
       { DRM_FORMAT_ARGB2101010,   __DRI_IMAGE_FORMAT_ARGB2101010,
-        __DRI_IMAGE_COMPONENTS_RGBA,      PIPE_FORMAT_B10G10R10A2_UNORM, 1,
+        __DRI_IMAGE_COMPONENTS_RGBA,      PIPE_FORMAT_B10G10R10A2_UNORM, GL_RGB10_A2, 1,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_ARGB2101010 } } },
       { DRM_FORMAT_XRGB2101010,   __DRI_IMAGE_FORMAT_XRGB2101010,
-        __DRI_IMAGE_COMPONENTS_RGB,       PIPE_FORMAT_B10G10R10X2_UNORM, 1,
+        __DRI_IMAGE_COMPONENTS_RGB,       PIPE_FORMAT_B10G10R10X2_UNORM, GL_RGB10, 1,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_XRGB2101010 } } },
       { DRM_FORMAT_ABGR2101010,   __DRI_IMAGE_FORMAT_ABGR2101010,
-        __DRI_IMAGE_COMPONENTS_RGBA,      PIPE_FORMAT_R10G10B10A2_UNORM, 1,
+        __DRI_IMAGE_COMPONENTS_RGBA,      PIPE_FORMAT_R10G10B10A2_UNORM, GL_RGB10_A2, 1,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_ABGR2101010 } } },
       { DRM_FORMAT_XBGR2101010,   __DRI_IMAGE_FORMAT_XBGR2101010,
-        __DRI_IMAGE_COMPONENTS_RGB,       PIPE_FORMAT_R10G10B10X2_UNORM, 1,
+        __DRI_IMAGE_COMPONENTS_RGB,       PIPE_FORMAT_R10G10B10X2_UNORM, GL_RGB10, 1,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_XBGR2101010 } } },
       { DRM_FORMAT_ARGB8888,      __DRI_IMAGE_FORMAT_ARGB8888,
-        __DRI_IMAGE_COMPONENTS_RGBA,      PIPE_FORMAT_BGRA8888_UNORM, 1,
+        __DRI_IMAGE_COMPONENTS_RGBA,      PIPE_FORMAT_BGRA8888_UNORM, GL_RGBA8, 1,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_ARGB8888 } } },
       { DRM_FORMAT_ABGR8888,      __DRI_IMAGE_FORMAT_ABGR8888,
-        __DRI_IMAGE_COMPONENTS_RGBA,      PIPE_FORMAT_RGBA8888_UNORM, 1,
+        __DRI_IMAGE_COMPONENTS_RGBA,      PIPE_FORMAT_RGBA8888_UNORM, GL_RGBA8, 1,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_ABGR8888 } } },
       { __DRI_IMAGE_FOURCC_SARGB8888,     __DRI_IMAGE_FORMAT_SARGB8,
-        __DRI_IMAGE_COMPONENTS_RGBA,      PIPE_FORMAT_BGRA8888_SRGB, 1,
+        __DRI_IMAGE_COMPONENTS_RGBA,      PIPE_FORMAT_BGRA8888_SRGB, GL_SRGB8_ALPHA8, 1,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_SARGB8 } } },
       { DRM_FORMAT_XRGB8888,      __DRI_IMAGE_FORMAT_XRGB8888,
-        __DRI_IMAGE_COMPONENTS_RGB,       PIPE_FORMAT_BGRX8888_UNORM, 1,
+        __DRI_IMAGE_COMPONENTS_RGB,       PIPE_FORMAT_BGRX8888_UNORM, GL_RGB8, 1,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_XRGB8888 } } },
       { DRM_FORMAT_XBGR8888,      __DRI_IMAGE_FORMAT_XBGR8888,
-        __DRI_IMAGE_COMPONENTS_RGB,       PIPE_FORMAT_RGBX8888_UNORM, 1,
+        __DRI_IMAGE_COMPONENTS_RGB,       PIPE_FORMAT_RGBX8888_UNORM, GL_RGB8, 1,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_XBGR8888 } } },
       { DRM_FORMAT_ARGB1555,      __DRI_IMAGE_FORMAT_ARGB1555,
-        __DRI_IMAGE_COMPONENTS_RGBA,      PIPE_FORMAT_B5G5R5A1_UNORM, 1,
+        __DRI_IMAGE_COMPONENTS_RGBA,      PIPE_FORMAT_B5G5R5A1_UNORM, GL_RGB5_A1, 1,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_ARGB1555 } } },
       { DRM_FORMAT_ABGR1555,      __DRI_IMAGE_FORMAT_ABGR1555,
-        __DRI_IMAGE_COMPONENTS_RGBA,      PIPE_FORMAT_R5G5B5A1_UNORM, 1,
+        __DRI_IMAGE_COMPONENTS_RGBA,      PIPE_FORMAT_R5G5B5A1_UNORM, GL_RGB5_A1, 1,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_ABGR1555 } } },
       { DRM_FORMAT_ARGB4444,      __DRI_IMAGE_FORMAT_ARGB4444,
-        __DRI_IMAGE_COMPONENTS_RGBA,      PIPE_FORMAT_B4G4R4A4_UNORM, 1,
+        __DRI_IMAGE_COMPONENTS_RGBA,      PIPE_FORMAT_B4G4R4A4_UNORM, GL_RGBA4, 1,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_ARGB4444 } } },
       { DRM_FORMAT_ABGR4444,      __DRI_IMAGE_FORMAT_ABGR4444,
-        __DRI_IMAGE_COMPONENTS_RGBA,      PIPE_FORMAT_R4G4B4A4_UNORM, 1,
+        __DRI_IMAGE_COMPONENTS_RGBA,      PIPE_FORMAT_R4G4B4A4_UNORM, GL_RGBA4, 1,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_ABGR4444 } } },
       { DRM_FORMAT_RGB565,        __DRI_IMAGE_FORMAT_RGB565,
-        __DRI_IMAGE_COMPONENTS_RGB,       PIPE_FORMAT_B5G6R5_UNORM, 1,
+        __DRI_IMAGE_COMPONENTS_RGB,       PIPE_FORMAT_B5G6R5_UNORM, GL_RGB565, 1,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_RGB565 } } },
       { DRM_FORMAT_R8,            __DRI_IMAGE_FORMAT_R8,
-        __DRI_IMAGE_COMPONENTS_R,         PIPE_FORMAT_R8_UNORM, 1,
+        __DRI_IMAGE_COMPONENTS_R,         PIPE_FORMAT_R8_UNORM, GL_R8, 1,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_R8 } } },
       { DRM_FORMAT_R16,           __DRI_IMAGE_FORMAT_R16,
-        __DRI_IMAGE_COMPONENTS_R,         PIPE_FORMAT_R16_UNORM, 1,
+        __DRI_IMAGE_COMPONENTS_R,         PIPE_FORMAT_R16_UNORM, GL_R16, 1,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_R16 } } },
       { DRM_FORMAT_GR88,          __DRI_IMAGE_FORMAT_GR88,
-        __DRI_IMAGE_COMPONENTS_RG,        PIPE_FORMAT_RG88_UNORM, 1,
+        __DRI_IMAGE_COMPONENTS_RG,        PIPE_FORMAT_RG88_UNORM, GL_RG8, 1,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_GR88 } } },
       { DRM_FORMAT_GR1616,        __DRI_IMAGE_FORMAT_GR1616,
-        __DRI_IMAGE_COMPONENTS_RG,        PIPE_FORMAT_RG1616_UNORM, 1,
+        __DRI_IMAGE_COMPONENTS_RG,        PIPE_FORMAT_RG1616_UNORM, GL_RG16, 1,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_GR1616 } } },
 
       { DRM_FORMAT_YUV410, __DRI_IMAGE_FORMAT_NONE,
-        __DRI_IMAGE_COMPONENTS_Y_U_V,     PIPE_FORMAT_IYUV, 3,
+        __DRI_IMAGE_COMPONENTS_Y_U_V,     PIPE_FORMAT_IYUV, GL_NONE, 3,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_R8 },
           { 1, 2, 2, __DRI_IMAGE_FORMAT_R8 },
           { 2, 2, 2, __DRI_IMAGE_FORMAT_R8 } } },
       { DRM_FORMAT_YUV411, __DRI_IMAGE_FORMAT_NONE,
-        __DRI_IMAGE_COMPONENTS_Y_U_V,     PIPE_FORMAT_IYUV, 3,
+        __DRI_IMAGE_COMPONENTS_Y_U_V,     PIPE_FORMAT_IYUV, GL_NONE, 3,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_R8 },
           { 1, 2, 0, __DRI_IMAGE_FORMAT_R8 },
           { 2, 2, 0, __DRI_IMAGE_FORMAT_R8 } } },
       { DRM_FORMAT_YUV420,        __DRI_IMAGE_FORMAT_NONE,
-        __DRI_IMAGE_COMPONENTS_Y_U_V,     PIPE_FORMAT_IYUV, 3,
+        __DRI_IMAGE_COMPONENTS_Y_U_V,     PIPE_FORMAT_IYUV, GL_NONE, 3,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_R8 },
           { 1, 1, 1, __DRI_IMAGE_FORMAT_R8 },
           { 2, 1, 1, __DRI_IMAGE_FORMAT_R8 } } },
       { DRM_FORMAT_YUV422,        __DRI_IMAGE_FORMAT_NONE,
-        __DRI_IMAGE_COMPONENTS_Y_U_V,     PIPE_FORMAT_IYUV, 3,
+        __DRI_IMAGE_COMPONENTS_Y_U_V,     PIPE_FORMAT_IYUV, GL_NONE, 3,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_R8 },
           { 1, 1, 0, __DRI_IMAGE_FORMAT_R8 },
           { 2, 1, 0, __DRI_IMAGE_FORMAT_R8 } } },
       { DRM_FORMAT_YUV444,        __DRI_IMAGE_FORMAT_NONE,
-        __DRI_IMAGE_COMPONENTS_Y_U_V,     PIPE_FORMAT_IYUV, 3,
+        __DRI_IMAGE_COMPONENTS_Y_U_V,     PIPE_FORMAT_IYUV, GL_NONE, 3,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_R8 },
           { 1, 0, 0, __DRI_IMAGE_FORMAT_R8 },
           { 2, 0, 0, __DRI_IMAGE_FORMAT_R8 } } },
 
       { DRM_FORMAT_YVU410,        __DRI_IMAGE_FORMAT_NONE,
-        __DRI_IMAGE_COMPONENTS_Y_U_V,     PIPE_FORMAT_IYUV, 3,
+        __DRI_IMAGE_COMPONENTS_Y_U_V,     PIPE_FORMAT_IYUV, GL_NONE, 3,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_R8 },
           { 2, 2, 2, __DRI_IMAGE_FORMAT_R8 },
           { 1, 2, 2, __DRI_IMAGE_FORMAT_R8 } } },
       { DRM_FORMAT_YVU411,        __DRI_IMAGE_FORMAT_NONE,
-        __DRI_IMAGE_COMPONENTS_Y_U_V,     PIPE_FORMAT_IYUV, 3,
+        __DRI_IMAGE_COMPONENTS_Y_U_V,     PIPE_FORMAT_IYUV, GL_NONE, 3,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_R8 },
           { 2, 2, 0, __DRI_IMAGE_FORMAT_R8 },
           { 1, 2, 0, __DRI_IMAGE_FORMAT_R8 } } },
       { DRM_FORMAT_YVU420,        __DRI_IMAGE_FORMAT_NONE,
-        __DRI_IMAGE_COMPONENTS_Y_U_V,     PIPE_FORMAT_IYUV, 3,
+        __DRI_IMAGE_COMPONENTS_Y_U_V,     PIPE_FORMAT_IYUV, GL_NONE, 3,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_R8 },
           { 2, 1, 1, __DRI_IMAGE_FORMAT_R8 },
           { 1, 1, 1, __DRI_IMAGE_FORMAT_R8 } } },
       { DRM_FORMAT_YVU422,        __DRI_IMAGE_FORMAT_NONE,
-        __DRI_IMAGE_COMPONENTS_Y_U_V,     PIPE_FORMAT_IYUV, 3,
+        __DRI_IMAGE_COMPONENTS_Y_U_V,     PIPE_FORMAT_IYUV, GL_NONE, 3,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_R8 },
           { 2, 1, 0, __DRI_IMAGE_FORMAT_R8 },
           { 1, 1, 0, __DRI_IMAGE_FORMAT_R8 } } },
       { DRM_FORMAT_YVU444,        __DRI_IMAGE_FORMAT_NONE,
-        __DRI_IMAGE_COMPONENTS_Y_U_V,     PIPE_FORMAT_IYUV, 3,
+        __DRI_IMAGE_COMPONENTS_Y_U_V,     PIPE_FORMAT_IYUV, GL_NONE, 3,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_R8 },
           { 2, 0, 0, __DRI_IMAGE_FORMAT_R8 },
           { 1, 0, 0, __DRI_IMAGE_FORMAT_R8 } } },
 
       { DRM_FORMAT_NV12,          __DRI_IMAGE_FORMAT_NONE,
-        __DRI_IMAGE_COMPONENTS_Y_UV,      PIPE_FORMAT_NV12, 2,
+        __DRI_IMAGE_COMPONENTS_Y_UV,      PIPE_FORMAT_NV12, GL_NONE, 2,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_R8 },
           { 1, 1, 1, __DRI_IMAGE_FORMAT_GR88 } } },
       { DRM_FORMAT_NV21,          __DRI_IMAGE_FORMAT_NONE,
-        __DRI_IMAGE_COMPONENTS_Y_UV,      PIPE_FORMAT_NV21, 2,
+        __DRI_IMAGE_COMPONENTS_Y_UV,      PIPE_FORMAT_NV21, GL_NONE, 2,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_R8 },
           { 1, 1, 1, __DRI_IMAGE_FORMAT_GR88 } } },
 
       { DRM_FORMAT_P010,          __DRI_IMAGE_FORMAT_NONE,
-        __DRI_IMAGE_COMPONENTS_Y_UV,      PIPE_FORMAT_P010, 2,
+        __DRI_IMAGE_COMPONENTS_Y_UV,      PIPE_FORMAT_P010, GL_NONE, 2,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_R16 },
           { 1, 1, 1, __DRI_IMAGE_FORMAT_GR1616 } } },
       { DRM_FORMAT_P012,          __DRI_IMAGE_FORMAT_NONE,
-        __DRI_IMAGE_COMPONENTS_Y_UV,      PIPE_FORMAT_P012, 2,
+        __DRI_IMAGE_COMPONENTS_Y_UV,      PIPE_FORMAT_P012, GL_NONE, 2,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_R16 },
           { 1, 1, 1, __DRI_IMAGE_FORMAT_GR1616 } } },
       { DRM_FORMAT_P016,          __DRI_IMAGE_FORMAT_NONE,
-        __DRI_IMAGE_COMPONENTS_Y_UV,      PIPE_FORMAT_P016, 2,
+        __DRI_IMAGE_COMPONENTS_Y_UV,      PIPE_FORMAT_P016, GL_NONE, 2,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_R16 },
           { 1, 1, 1, __DRI_IMAGE_FORMAT_GR1616 } } },
       { DRM_FORMAT_P030,          __DRI_IMAGE_FORMAT_NONE,
-        __DRI_IMAGE_COMPONENTS_Y_UV,      PIPE_FORMAT_P030, 2,
+        __DRI_IMAGE_COMPONENTS_Y_UV,      PIPE_FORMAT_P030, GL_NONE, 2,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_R16 },
           { 1, 1, 1, __DRI_IMAGE_FORMAT_GR1616 } } },
 
       { DRM_FORMAT_NV16,          __DRI_IMAGE_FORMAT_NONE,
-        __DRI_IMAGE_COMPONENTS_Y_UV,      PIPE_FORMAT_NV12, 2,
+        __DRI_IMAGE_COMPONENTS_Y_UV,      PIPE_FORMAT_NV12, GL_NONE, 2,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_R8 },
           { 1, 1, 0, __DRI_IMAGE_FORMAT_GR88 } } },
 
       { DRM_FORMAT_AYUV,      __DRI_IMAGE_FORMAT_ABGR8888,
-        __DRI_IMAGE_COMPONENTS_AYUV,      PIPE_FORMAT_AYUV, 1,
+        __DRI_IMAGE_COMPONENTS_AYUV,      PIPE_FORMAT_AYUV, GL_NONE, 1,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_ABGR8888 } } },
       { DRM_FORMAT_XYUV8888,      __DRI_IMAGE_FORMAT_XBGR8888,
-        __DRI_IMAGE_COMPONENTS_XYUV,      PIPE_FORMAT_XYUV, 1,
+        __DRI_IMAGE_COMPONENTS_XYUV,      PIPE_FORMAT_XYUV, GL_NONE, 1,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_XBGR8888 } } },
 
       { DRM_FORMAT_Y410,          __DRI_IMAGE_FORMAT_ABGR2101010,
-        __DRI_IMAGE_COMPONENTS_AYUV,      PIPE_FORMAT_Y410, 1,
+        __DRI_IMAGE_COMPONENTS_AYUV,      PIPE_FORMAT_Y410, GL_NONE, 1,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_ABGR2101010 } } },
 
       /* Y412 is an unusual format.  It has the same layout as Y416 (i.e.,
@@ -640,10 +640,10 @@ static const struct dri2_format_mapping dri2_format_table[] = {
        * to these bits.
        */
       { DRM_FORMAT_Y412,          __DRI_IMAGE_FORMAT_ABGR16161616,
-        __DRI_IMAGE_COMPONENTS_AYUV,      PIPE_FORMAT_Y412, 1,
+        __DRI_IMAGE_COMPONENTS_AYUV,      PIPE_FORMAT_Y412, GL_NONE, 1,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_ABGR16161616 } } },
       { DRM_FORMAT_Y416,          __DRI_IMAGE_FORMAT_ABGR16161616,
-        __DRI_IMAGE_COMPONENTS_AYUV,      PIPE_FORMAT_Y416, 1,
+        __DRI_IMAGE_COMPONENTS_AYUV,      PIPE_FORMAT_Y416, GL_NONE, 1,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_ABGR16161616 } } },
 
       /* For YUYV and UYVY buffers, we set up two overlapping DRI images
@@ -655,19 +655,19 @@ static const struct dri2_format_mapping dri2_format_table[] = {
        * components correctly when sampling from plane 0, and interpolate
        * U and V correctly when sampling from plane 1. */
       { DRM_FORMAT_YUYV,          __DRI_IMAGE_FORMAT_NONE,
-        __DRI_IMAGE_COMPONENTS_Y_XUXV,    PIPE_FORMAT_YUYV, 2,
+        __DRI_IMAGE_COMPONENTS_Y_XUXV,    PIPE_FORMAT_YUYV, GL_NONE, 2,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_GR88 },
           { 0, 1, 0, __DRI_IMAGE_FORMAT_ARGB8888 } } },
       { DRM_FORMAT_YVYU,          __DRI_IMAGE_FORMAT_NONE,
-        __DRI_IMAGE_COMPONENTS_Y_XUXV,    PIPE_FORMAT_YVYU, 2,
+        __DRI_IMAGE_COMPONENTS_Y_XUXV,    PIPE_FORMAT_YVYU, GL_NONE, 2,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_GR88 },
           { 0, 1, 0, __DRI_IMAGE_FORMAT_ARGB8888 } } },
       { DRM_FORMAT_UYVY,          __DRI_IMAGE_FORMAT_NONE,
-        __DRI_IMAGE_COMPONENTS_Y_UXVX,    PIPE_FORMAT_UYVY, 2,
+        __DRI_IMAGE_COMPONENTS_Y_UXVX,    PIPE_FORMAT_UYVY, GL_NONE, 2,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_GR88 },
           { 0, 1, 0, __DRI_IMAGE_FORMAT_ABGR8888 } } },
       { DRM_FORMAT_VYUY,          __DRI_IMAGE_FORMAT_NONE,
-        __DRI_IMAGE_COMPONENTS_Y_UXVX,    PIPE_FORMAT_VYUY, 2,
+        __DRI_IMAGE_COMPONENTS_Y_UXVX,    PIPE_FORMAT_VYUY, GL_NONE, 2,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_GR88 },
           { 0, 1, 0, __DRI_IMAGE_FORMAT_ABGR8888 } } },
 
@@ -675,7 +675,7 @@ static const struct dri2_format_mapping dri2_format_table[] = {
        * formats.
        */
       { DRM_FORMAT_Y210,          __DRI_IMAGE_FORMAT_NONE,
-        __DRI_IMAGE_COMPONENTS_Y_XUXV,    PIPE_FORMAT_Y210, 2,
+        __DRI_IMAGE_COMPONENTS_Y_XUXV,    PIPE_FORMAT_Y210, GL_NONE, 2,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_GR1616 },
           { 0, 1, 0, __DRI_IMAGE_FORMAT_ABGR16161616 } } },
       /* Y212 is an unusual format.  It has the same layout as Y216 (i.e.,
@@ -684,11 +684,11 @@ static const struct dri2_format_mapping dri2_format_table[] = {
        * to these bits.
        */
       { DRM_FORMAT_Y212,          __DRI_IMAGE_FORMAT_NONE,
-        __DRI_IMAGE_COMPONENTS_Y_XUXV,    PIPE_FORMAT_Y212, 2,
+        __DRI_IMAGE_COMPONENTS_Y_XUXV,    PIPE_FORMAT_Y212, GL_NONE, 2,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_GR1616 },
           { 0, 1, 0, __DRI_IMAGE_FORMAT_ABGR16161616 } } },
       { DRM_FORMAT_Y216,          __DRI_IMAGE_FORMAT_NONE,
-        __DRI_IMAGE_COMPONENTS_Y_XUXV,    PIPE_FORMAT_Y216, 2,
+        __DRI_IMAGE_COMPONENTS_Y_XUXV,    PIPE_FORMAT_Y216, GL_NONE, 2,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_GR1616 },
           { 0, 1, 0, __DRI_IMAGE_FORMAT_ABGR16161616 } } },
 };
diff --git a/src/gallium/frontends/dri/dri_helpers.h b/src/gallium/frontends/dri/dri_helpers.h
index 3a14a5560fe1..59029204eb5e 100644
--- a/src/gallium/frontends/dri/dri_helpers.h
+++ b/src/gallium/frontends/dri/dri_helpers.h
@@ -32,6 +32,11 @@ struct dri2_format_mapping {
    int dri_format; /* image format */
    int dri_components;
    enum pipe_format pipe_format;
+   /* The corresponding sized GLformat to set on a renderbuffer imported with
+    * this format.  GL_NONE if we don't have an appropriate one (such as for YUV
+    * image formats).
+    */
+   uint32_t gl_format;
    int nplanes;
    struct {
       int buffer_index;
diff --git a/src/gallium/frontends/dri/dri_screen.c b/src/gallium/frontends/dri/dri_screen.c
index a2cc3234652b..6891d1c14f91 100644
--- a/src/gallium/frontends/dri/dri_screen.c
+++ b/src/gallium/frontends/dri/dri_screen.c
@@ -811,7 +811,7 @@ dri_get_egl_image(struct pipe_frontend_screen *fscreen,
       /* Guess sized internal format for dma-bufs. Could be used
        * by EXT_EGL_image_storage.
        */
-      stimg->internalformat = driGLFormatToSizedInternalGLFormat(map->pipe_format);
+      stimg->internalformat = map->gl_format;
    } else {
       stimg->internalformat = img->internal_format;
    }
diff --git a/src/gallium/frontends/dri/dri_util.c b/src/gallium/frontends/dri/dri_util.c
index b27358511275..8e2380fa4ab8 100644
--- a/src/gallium/frontends/dri/dri_util.c
+++ b/src/gallium/frontends/dri/dri_util.c
@@ -924,142 +924,6 @@ const __DRI2flushControlExtension dri2FlushControlExtension = {
    .base = { __DRI2_FLUSH_CONTROL, 1 }
 };
 
-/*
- * Note: the first match is returned, which is important for formats like
- * __DRI_IMAGE_FORMAT_R8 which maps to both MESA_FORMAT_{R,L}_UNORM8
- */
-static const struct {
-   mesa_format mesa_format;
-   GLenum internal_format;
-} format_mapping[] = {
-   {
-      .mesa_format     =        MESA_FORMAT_B5G6R5_UNORM,
-      .internal_format =        GL_RGB565,
-   },
-   {
-      .mesa_format     =        MESA_FORMAT_B5G5R5A1_UNORM,
-      .internal_format =        GL_RGB5_A1,
-   },
-   {
-      .mesa_format     =        MESA_FORMAT_R5G5B5A1_UNORM,
-      .internal_format =        GL_RGB5_A1,
-   },
-   {
-      .mesa_format     =        MESA_FORMAT_B8G8R8X8_UNORM,
-      .internal_format =        GL_RGB8,
-   },
-   {
-      .mesa_format     =        MESA_FORMAT_RGBA_FLOAT16,
-      .internal_format =        GL_RGBA16F,
-   },
-   {
-      .mesa_format     =        MESA_FORMAT_RGBX_FLOAT16,
-      .internal_format =        GL_RGB16F,
-   },
-   {
-      .mesa_format     =        MESA_FORMAT_RGBA_UNORM16,
-      .internal_format =        GL_RGBA16,
-   },
-   {
-      .mesa_format     =        MESA_FORMAT_RGBX_UNORM16,
-      .internal_format =        GL_RGB16,
-   },
-   {
-      .mesa_format     =        MESA_FORMAT_B10G10R10A2_UNORM,
-      .internal_format =        GL_RGB10_A2,
-   },
-   {
-      .mesa_format     =        MESA_FORMAT_B10G10R10X2_UNORM,
-      .internal_format =        GL_RGB10,
-   },
-   {
-      .mesa_format     =        MESA_FORMAT_R10G10B10A2_UNORM,
-      .internal_format =        GL_RGB10_A2,
-   },
-   {
-      .mesa_format     =        MESA_FORMAT_R10G10B10X2_UNORM,
-      .internal_format =        GL_RGB10,
-   },
-   {
-      .mesa_format     =        MESA_FORMAT_B8G8R8A8_UNORM,
-      .internal_format =        GL_RGBA8,
-   },
-   {
-      .mesa_format     =        MESA_FORMAT_R8G8B8A8_UNORM,
-      .internal_format =        GL_RGBA8,
-   },
-   {
-      .mesa_format     =        MESA_FORMAT_R8G8B8X8_UNORM,
-      .internal_format =        GL_RGB8,
-   },
-   {
-      .mesa_format     =        MESA_FORMAT_R_UNORM8,
-      .internal_format =        GL_R8,
-   },
-   {
-      .mesa_format     =        MESA_FORMAT_L_UNORM8,
-      .internal_format =        GL_R8,
-   },
-#if UTIL_ARCH_LITTLE_ENDIAN
-   {
-      .mesa_format     =        MESA_FORMAT_RG_UNORM8,
-      .internal_format =        GL_RG8,
-   },
-   {
-      .mesa_format     =        MESA_FORMAT_LA_UNORM8,
-      .internal_format =        GL_RG8,
-   },
-#endif
-   {
-      .mesa_format     =        MESA_FORMAT_R8G8B8A8_SRGB,
-      .internal_format =        GL_SRGB8_ALPHA8,
-   },
-   {
-      .mesa_format     =        MESA_FORMAT_B8G8R8A8_SRGB,
-      .internal_format =        GL_SRGB8_ALPHA8,
-   },
-   {
-      .mesa_format  =           MESA_FORMAT_B8G8R8X8_SRGB,
-      .internal_format =        GL_SRGB8,
-   },
-   {
-      .mesa_format     =        MESA_FORMAT_R_UNORM16,
-      .internal_format =        GL_R16,
-   },
-   {
-      .mesa_format     =        MESA_FORMAT_L_UNORM16,
-      .internal_format =        GL_R16,
-   },
-#if UTIL_ARCH_LITTLE_ENDIAN
-   {
-      .mesa_format     =        MESA_FORMAT_RG_UNORM16,
-      .internal_format =        GL_RG16,
-   },
-   {
-      .mesa_format     =        MESA_FORMAT_LA_UNORM16,
-      .internal_format =        GL_RG16,
-   },
-#endif
-   {
-      .mesa_format     =        MESA_FORMAT_B4G4R4A4_UNORM,
-      .internal_format =        GL_RGBA4,
-   },
-   {
-      .mesa_format     =        MESA_FORMAT_R4G4B4A4_UNORM,
-      .internal_format =        GL_RGBA4,
-   },
-};
-
-uint32_t
-driGLFormatToSizedInternalGLFormat(mesa_format format)
-{
-   for (size_t i = 0; i < ARRAY_SIZE(format_mapping); i++)
-      if (format_mapping[i].mesa_format == format)
-         return format_mapping[i].internal_format;
-
-   return GL_NONE;
-}
-
 /** Image driver interface */
 const __DRIimageDriverExtension driImageDriverExtension = {
     .base = { __DRI_IMAGE_DRIVER, 1 },
diff --git a/src/gallium/frontends/dri/dri_util.h b/src/gallium/frontends/dri/dri_util.h
index 6b6f4e18a5fe..af1583a718ab 100644
--- a/src/gallium/frontends/dri/dri_util.h
+++ b/src/gallium/frontends/dri/dri_util.h
@@ -117,9 +117,6 @@ driCreateContextAttribs(__DRIscreen *psp, int api,
                         unsigned *error,
                         void *data);
 
-extern uint32_t
-driGLFormatToSizedInternalGLFormat(mesa_format format);
-
 extern const __DRIimageDriverExtension driImageDriverExtension;
 
 #endif /* _DRI_UTIL_H_ */
-- 
GitLab


From b32e89c738a525dc4ea9e99b90e2959d6a2019f8 Mon Sep 17 00:00:00 2001
From: Emma Anholt <emma@anholt.net>
Date: Wed, 11 Oct 2023 10:32:07 -0700
Subject: [PATCH 08/14] dri: Drop a bunch of redundant version checks from the
 image ext.

Since loader <-> driver is version locked, we don't need to check version
before dereferencing the struct since we know it'll always be big enough.
---
 src/egl/drivers/dri2/egl_dri2.c         | 22 +++++++---------------
 src/egl/drivers/dri2/egl_dri2.h         |  3 +--
 src/egl/drivers/dri2/platform_android.c |  6 ++----
 src/glx/dri3_glx.c                      |  2 +-
 src/loader/loader_dri3_helper.c         |  7 ++-----
 src/loader/loader_dri_helper.c          |  5 ++---
 6 files changed, 15 insertions(+), 30 deletions(-)

diff --git a/src/egl/drivers/dri2/egl_dri2.c b/src/egl/drivers/dri2/egl_dri2.c
index 44cdc4f17c7a..a6bf7b5d1b0b 100644
--- a/src/egl/drivers/dri2/egl_dri2.c
+++ b/src/egl/drivers/dri2/egl_dri2.c
@@ -910,8 +910,7 @@ dri2_setup_screen(_EGLDisplay *disp)
    disp->Extensions.KHR_reusable_sync = EGL_TRUE;
 
    if (dri2_dpy->image) {
-      if (dri2_dpy->image->base.version >= 10 &&
-          dri2_dpy->image->getCapabilities != NULL) {
+      if (dri2_dpy->image->getCapabilities != NULL) {
          int capabilities;
 
          capabilities =
@@ -936,8 +935,7 @@ dri2_setup_screen(_EGLDisplay *disp)
          disp->Extensions.KHR_gl_texture_3D_image = EGL_TRUE;
 
 #ifdef HAVE_LIBDRM
-      if (dri2_dpy->image->base.version >= 8 &&
-          dri2_dpy->image->createImageFromDmaBufs) {
+      if (dri2_dpy->image->createImageFromDmaBufs) {
          disp->Extensions.EXT_image_dma_buf_import = EGL_TRUE;
          disp->Extensions.EXT_image_dma_buf_import_modifiers = EGL_TRUE;
       }
@@ -2189,8 +2187,7 @@ dri2_create_image_khr_renderbuffer(_EGLDisplay *disp, _EGLContext *ctx,
       return EGL_NO_IMAGE_KHR;
    }
 
-   if (dri2_dpy->image->base.version >= 17 &&
-       dri2_dpy->image->createImageFromRenderbuffer2) {
+   if (dri2_dpy->image->createImageFromRenderbuffer2) {
       unsigned error = ~0;
 
       dri_image = dri2_dpy->image->createImageFromRenderbuffer2(
@@ -2697,8 +2694,7 @@ dri2_query_dma_buf_formats(_EGLDisplay *disp, EGLint max, EGLint *formats,
       goto fail;
    }
 
-   if (dri2_dpy->image->base.version < 15 ||
-       dri2_dpy->image->queryDmaBufFormats == NULL)
+   if (dri2_dpy->image->queryDmaBufFormats == NULL)
       goto fail;
 
    if (!dri2_dpy->image->queryDmaBufFormats(dri2_dpy->dri_screen_render_gpu,
@@ -2745,8 +2741,7 @@ dri2_query_dma_buf_modifiers(_EGLDisplay *disp, EGLint format, EGLint max,
       return dri2_egl_error_unlock(dri2_dpy, EGL_BAD_PARAMETER,
                                    "invalid modifiers array");
 
-   if (dri2_dpy->image->base.version < 15 ||
-       dri2_dpy->image->queryDmaBufModifiers == NULL) {
+   if (dri2_dpy->image->queryDmaBufModifiers == NULL) {
       mtx_unlock(&dri2_dpy->lock);
       return EGL_FALSE;
    }
@@ -2826,8 +2821,7 @@ dri2_create_image_dma_buf(_EGLDisplay *disp, _EGLContext *ctx,
    }
 
    if (attrs.ProtectedContent) {
-      if (dri2_dpy->image->base.version < 18 ||
-          dri2_dpy->image->createImageFromDmaBufs3 == NULL) {
+      if (dri2_dpy->image->createImageFromDmaBufs3 == NULL) {
          _eglError(EGL_BAD_MATCH, "unsupported protected_content attribute");
          return EGL_NO_IMAGE_KHR;
       }
@@ -2843,8 +2837,7 @@ dri2_create_image_dma_buf(_EGLDisplay *disp, _EGLContext *ctx,
          attrs.ProtectedContent ? __DRI_IMAGE_PROTECTED_CONTENT_FLAG : 0,
          &error, NULL);
    } else if (has_modifier) {
-      if (dri2_dpy->image->base.version < 15 ||
-          dri2_dpy->image->createImageFromDmaBufs2 == NULL) {
+      if (dri2_dpy->image->createImageFromDmaBufs2 == NULL) {
          _eglError(EGL_BAD_MATCH, "unsupported dma_buf format modifier");
          return EGL_NO_IMAGE_KHR;
       }
@@ -3205,7 +3198,6 @@ dri2_bind_wayland_display_wl(_EGLDisplay *disp, struct wl_display *wl_dpy)
 
    if (drmGetCap(dri2_dpy->fd_render_gpu, DRM_CAP_PRIME, &cap) == 0 &&
        cap == (DRM_PRIME_CAP_IMPORT | DRM_PRIME_CAP_EXPORT) &&
-       dri2_dpy->image->base.version >= 7 &&
        dri2_dpy->image->createImageFromFds != NULL)
       flags |= WAYLAND_DRM_PRIME;
 
diff --git a/src/egl/drivers/dri2/egl_dri2.h b/src/egl/drivers/dri2/egl_dri2.h
index 8b2f88b83907..a1e956afeb90 100644
--- a/src/egl/drivers/dri2/egl_dri2.h
+++ b/src/egl/drivers/dri2/egl_dri2.h
@@ -626,8 +626,7 @@ dri2_set_WL_bind_wayland_display(_EGLDisplay *disp)
    struct dri2_egl_display *dri2_dpy = dri2_egl_display(disp);
 
    if (dri2_dpy->device_name && dri2_dpy->image) {
-      if (dri2_dpy->image->base.version >= 10 &&
-          dri2_dpy->image->getCapabilities != NULL) {
+      if (dri2_dpy->image->getCapabilities != NULL) {
          int capabilities;
 
          capabilities =
diff --git a/src/egl/drivers/dri2/platform_android.c b/src/egl/drivers/dri2/platform_android.c
index b0b327036fe6..304aecaed011 100644
--- a/src/egl/drivers/dri2/platform_android.c
+++ b/src/egl/drivers/dri2/platform_android.c
@@ -416,8 +416,7 @@ droid_create_image_from_buffer_info(struct dri2_egl_display *dri2_dpy,
 {
    unsigned error;
 
-   if (dri2_dpy->image->base.version >= 15 &&
-       dri2_dpy->image->createImageFromDmaBufs2 != NULL) {
+   if (dri2_dpy->image->createImageFromDmaBufs2 != NULL) {
       return dri2_dpy->image->createImageFromDmaBufs2(
          dri2_dpy->dri_screen_render_gpu, buf_info->width, buf_info->height,
          buf_info->drm_fourcc, buf_info->modifier, buf_info->fds,
@@ -472,8 +471,7 @@ handle_in_fence_fd(struct dri2_egl_surface *dri2_surf, __DRIimage *img)
 
    validate_fence_fd(dri2_surf->in_fence_fd);
 
-   if (dri2_dpy->image->base.version >= 21 &&
-       dri2_dpy->image->setInFenceFd != NULL) {
+   if (dri2_dpy->image->setInFenceFd != NULL) {
       dri2_dpy->image->setInFenceFd(img, dri2_surf->in_fence_fd);
    } else {
       sync_wait(dri2_surf->in_fence_fd, -1);
diff --git a/src/glx/dri3_glx.c b/src/glx/dri3_glx.c
index a1c9fb56696f..8710d2337e02 100644
--- a/src/glx/dri3_glx.c
+++ b/src/glx/dri3_glx.c
@@ -884,7 +884,7 @@ dri3_create_screen(int screen, struct glx_display * priv)
 
    dri3_bind_extensions(psc, priv, driverName);
 
-   if (!psc->image || psc->image->base.version < 7 || !psc->image->createImageFromFds) {
+   if (!psc->image || !psc->image->createImageFromFds) {
       ErrorMessageF("Version 7 or imageFromFds image extension not found\n");
       goto handle_error;
    }
diff --git a/src/loader/loader_dri3_helper.c b/src/loader/loader_dri3_helper.c
index 32135770e9db..ae0cfb8e2dd8 100644
--- a/src/loader/loader_dri3_helper.c
+++ b/src/loader/loader_dri3_helper.c
@@ -144,8 +144,7 @@ dri3_get_red_mask_for_depth(struct loader_dri3_drawable *draw, int depth)
  */
 static bool loader_dri3_have_image_blit(const struct loader_dri3_drawable *draw)
 {
-   return draw->ext->image->base.version >= 9 &&
-      draw->ext->image->blitImage != NULL;
+   return draw->ext->image->blitImage != NULL;
 }
 
 /**
@@ -1469,7 +1468,6 @@ dri3_alloc_render_buffer(struct loader_dri3_drawable *draw, unsigned int format,
    if (draw->dri_screen_render_gpu == draw->dri_screen_display_gpu) {
 #ifdef HAVE_DRI3_MODIFIERS
       if (draw->multiplanes_available &&
-          draw->ext->image->base.version >= 15 &&
           draw->ext->image->queryDmaBufModifiers &&
           draw->ext->image->createImageWithModifiers) {
          xcb_dri3_get_supported_modifiers_cookie_t mod_cookie;
@@ -1625,7 +1623,7 @@ dri3_alloc_render_buffer(struct loader_dri3_drawable *draw, unsigned int format,
       /* The linear buffer was created in the display GPU's vram, so we
        * need to make it visible to render GPU
        */
-      if (draw->ext->image->base.version >= 20)
+      if (draw->ext->image->createImageFromFds2 != NULL)
          buffer->linear_buffer =
             draw->ext->image->createImageFromFds2(draw->dri_screen_render_gpu,
                                                   width,
@@ -1981,7 +1979,6 @@ dri3_get_pixmap_buffer(__DRIdrawable *driDrawable, unsigned int format,
                           fence_fd);
 #ifdef HAVE_DRI3_MODIFIERS
    if (draw->multiplanes_available &&
-       draw->ext->image->base.version >= 15 &&
        draw->ext->image->createImageFromDmaBufs2) {
       xcb_dri3_buffers_from_pixmap_cookie_t bps_cookie;
       xcb_dri3_buffers_from_pixmap_reply_t *bps_reply;
diff --git a/src/loader/loader_dri_helper.c b/src/loader/loader_dri_helper.c
index f1afce47b929..39533b944c55 100644
--- a/src/loader/loader_dri_helper.c
+++ b/src/loader/loader_dri_helper.c
@@ -38,8 +38,7 @@ __DRIimage *loader_dri_create_image(__DRIscreen *screen,
                                     unsigned int modifiers_count,
                                     void *loaderPrivate)
 {
-   if (modifiers && modifiers_count > 0 &&
-       image->base.version > 14 && image->createImageWithModifiers) {
+   if (modifiers && modifiers_count > 0 && image->createImageWithModifiers) {
       bool has_valid_modifier = false;
       int i;
 
@@ -58,7 +57,7 @@ __DRIimage *loader_dri_create_image(__DRIscreen *screen,
       if (!has_valid_modifier)
          return NULL;
 
-      if (image->base.version >= 19 && image->createImageWithModifiers2)
+      if (image->createImageWithModifiers2)
          return image->createImageWithModifiers2(screen, width, height,
                                                  dri_format, modifiers,
                                                  modifiers_count, dri_usage,
-- 
GitLab


From f0d7ccfb618c2d817dbe9149ee181771a2b5b29f Mon Sep 17 00:00:00 2001
From: Emma Anholt <emma@anholt.net>
Date: Wed, 11 Oct 2023 10:35:56 -0700
Subject: [PATCH 09/14] dri: Drop old createImageWithModifiers().

... and rename createImageWithModifiers2 to be it.  We don't need to
maintain the old function and struct layout, because we're version locked
between loader and driver.
---
 include/GL/internal/dri_interface.h | 49 +++++++++--------------------
 src/gallium/frontends/dri/dri2.c    | 16 ----------
 src/loader/loader_dri_helper.c      | 13 +++-----
 3 files changed, 19 insertions(+), 59 deletions(-)

diff --git a/include/GL/internal/dri_interface.h b/include/GL/internal/dri_interface.h
index 45f9e77e973a..f62d14746832 100644
--- a/include/GL/internal/dri_interface.h
+++ b/include/GL/internal/dri_interface.h
@@ -1583,29 +1583,6 @@ struct __DRIimageExtensionRec {
    void (*unmapImage)(__DRIcontext *context, __DRIimage *image, void *data);
 
 
-   /**
-    * Creates an image with implementation's favorite modifiers.
-    *
-    * This acts like createImage except there is a list of modifiers passed in
-    * which the implementation may selectively use to create the DRIimage. The
-    * result should be the implementation selects one modifier (perhaps it would
-    * hold on to a few and later pick).
-    *
-    * The created image should be destroyed with destroyImage().
-    *
-    * Returns the new DRIimage. The chosen modifier can be obtained later on
-    * and passed back to things like the kernel's AddFB2 interface.
-    *
-    * \sa __DRIimageRec::createImage
-    *
-    * \since 14
-    */
-   __DRIimage *(*createImageWithModifiers)(__DRIscreen *screen,
-                                           int width, int height, int format,
-                                           const uint64_t *modifiers,
-                                           const unsigned int modifier_count,
-                                           void *loaderPrivate);
-
    /*
     * Like createImageFromDmaBufs, but takes also format modifiers.
     *
@@ -1721,26 +1698,30 @@ struct __DRIimageExtensionRec {
                                           void *loaderPrivate);
 
    /**
-    * Creates an image with implementation's favorite modifiers and the
-    * provided usage flags.
+    * Creates an image with implementation's favorite modifiers and the provided
+    * usage flags.
     *
-    * This acts like createImageWithModifiers except usage is also specified.
+    * This acts like createImage except there is a list of modifiers passed in
+    * which the implementation may selectively use to create the DRIimage. The
+    * result should be the implementation selects one modifier (perhaps it would
+    * hold on to a few and later pick).  The use may also change which modifier
+    * gets chosen.
     *
     * The created image should be destroyed with destroyImage().
     *
-    * Returns the new DRIimage. The chosen modifier can be obtained later on
-    * and passed back to things like the kernel's AddFB2 interface.
+    * Returns the new DRIimage. The chosen modifier can be obtained later on and
+    * passed back to things like the kernel's AddFB2 interface.
     *
     * \sa __DRIimageRec::createImage
     *
     * \since 19
     */
-   __DRIimage *(*createImageWithModifiers2)(__DRIscreen *screen,
-                                            int width, int height, int format,
-                                            const uint64_t *modifiers,
-                                            const unsigned int modifier_count,
-                                            unsigned int use,
-                                            void *loaderPrivate);
+   __DRIimage *(*createImageWithModifiers)(__DRIscreen *screen,
+                                           int width, int height, int format,
+                                           const uint64_t *modifiers,
+                                           const unsigned int modifier_count,
+                                           unsigned int use,
+                                           void *loaderPrivate);
 
    /**
     * Like createImageFromFds, but with an added flag parameter.
diff --git a/src/gallium/frontends/dri/dri2.c b/src/gallium/frontends/dri/dri2.c
index 509781bdf80f..33d90cf8292f 100644
--- a/src/gallium/frontends/dri/dri2.c
+++ b/src/gallium/frontends/dri/dri2.c
@@ -1356,18 +1356,6 @@ dri2_create_image(__DRIscreen *_screen,
 
 static __DRIimage *
 dri2_create_image_with_modifiers(__DRIscreen *dri_screen,
-                                 int width, int height, int format,
-                                 const uint64_t *modifiers,
-                                 const unsigned count,
-                                 void *loaderPrivate)
-{
-   return dri2_create_image_common(dri_screen, width, height, format,
-                                   __DRI_IMAGE_USE_SHARE, modifiers, count,
-                                   loaderPrivate);
-}
-
-static __DRIimage *
-dri2_create_image_with_modifiers2(__DRIscreen *dri_screen,
                                  int width, int height, int format,
                                  const uint64_t *modifiers,
                                  const unsigned count, unsigned int use,
@@ -2043,7 +2031,6 @@ static const __DRIimageExtension dri2ImageExtensionTempl = {
     .queryDmaBufModifiers         = NULL,
     .queryDmaBufFormatModifierAttribs = NULL,
     .createImageFromRenderbuffer2 = dri2_create_image_from_renderbuffer2,
-    .createImageWithModifiers2    = NULL,
 };
 
 const __DRIimageExtension driVkImageExtension = {
@@ -2073,7 +2060,6 @@ const __DRIimageExtension driVkImageExtension = {
     .queryDmaBufModifiers         = dri2_query_dma_buf_modifiers,
     .queryDmaBufFormatModifierAttribs = dri2_query_dma_buf_format_modifier_attribs,
     .createImageFromRenderbuffer2 = dri2_create_image_from_renderbuffer2,
-    .createImageWithModifiers2    = dri2_create_image_with_modifiers2,
 };
 
 const __DRIimageExtension driVkImageExtensionSw = {
@@ -2328,8 +2314,6 @@ dri2_init_screen_extensions(struct dri_screen *screen,
    if (pscreen->resource_create_with_modifiers) {
       screen->image_extension.createImageWithModifiers =
          dri2_create_image_with_modifiers;
-      screen->image_extension.createImageWithModifiers2 =
-         dri2_create_image_with_modifiers2;
    }
 
    if (pscreen->get_param(pscreen, PIPE_CAP_NATIVE_FENCE_FD)) {
diff --git a/src/loader/loader_dri_helper.c b/src/loader/loader_dri_helper.c
index 39533b944c55..d3825d6fdaf7 100644
--- a/src/loader/loader_dri_helper.c
+++ b/src/loader/loader_dri_helper.c
@@ -57,15 +57,10 @@ __DRIimage *loader_dri_create_image(__DRIscreen *screen,
       if (!has_valid_modifier)
          return NULL;
 
-      if (image->createImageWithModifiers2)
-         return image->createImageWithModifiers2(screen, width, height,
-                                                 dri_format, modifiers,
-                                                 modifiers_count, dri_usage,
-                                                 loaderPrivate);
-      else
-         return image->createImageWithModifiers(screen, width, height,
-                                                dri_format, modifiers,
-                                                modifiers_count, loaderPrivate);
+      return image->createImageWithModifiers(screen, width, height,
+                                             dri_format, modifiers,
+                                             modifiers_count, dri_usage,
+                                             loaderPrivate);
    }
 
    /* No modifier given or fallback to the legacy createImage allowed */
-- 
GitLab


From 8cf9d33ebe403087e97aa4e198eca93bdbf4fb3d Mon Sep 17 00:00:00 2001
From: Emma Anholt <emma@anholt.net>
Date: Wed, 11 Oct 2023 10:43:01 -0700
Subject: [PATCH 10/14] dri: Drop old createImageFromFds().

and rename createImageFromFds2() to be it.  We don't need to maintain the
old function and struct layout, because we're version locked between
loader and driver.
---
 include/GL/internal/dri_interface.h     | 26 ++++++-------------
 src/egl/drivers/dri2/egl_dri2.c         |  2 +-
 src/egl/drivers/dri2/platform_wayland.c |  2 +-
 src/gallium/frontends/dri/dri2.c        | 14 -----------
 src/gallium/frontends/dri/kopper.c      |  2 +-
 src/gbm/backends/dri/gbm_dri.c          |  1 +
 src/loader/loader_dri3_helper.c         | 33 +++++++++----------------
 7 files changed, 22 insertions(+), 58 deletions(-)

diff --git a/include/GL/internal/dri_interface.h b/include/GL/internal/dri_interface.h
index f62d14746832..b199396925be 100644
--- a/include/GL/internal/dri_interface.h
+++ b/include/GL/internal/dri_interface.h
@@ -1504,16 +1504,6 @@ struct __DRIimageExtensionRec {
                                          int level,
                                          unsigned *error,
                                          void *loaderPrivate);
-   /**
-    * Like createImageFromNames, but takes a prime fd instead.
-    *
-    * \since 7
-    */
-   __DRIimage *(*createImageFromFds)(__DRIscreen *screen,
-                                     int width, int height, int fourcc,
-                                     int *fds, int num_fds,
-                                     int *strides, int *offsets,
-                                     void *loaderPrivate);
 
    /**
     * Like createImageFromFds, but takes additional attributes.
@@ -1724,18 +1714,16 @@ struct __DRIimageExtensionRec {
                                            void *loaderPrivate);
 
    /**
-    * Like createImageFromFds, but with an added flag parameter.
+    * Like createImageFromNames, but takes an array of dmabuf fds instead.
     *
     * See __DRI_IMAGE_*_FLAG for valid definitions of flags.
-    *
-    * \since 20
     */
-   __DRIimage *(*createImageFromFds2)(__DRIscreen *screen,
-                                      int width, int height, int fourcc,
-                                      int *fds, int num_fds,
-                                      uint32_t flags,
-                                      int *strides, int *offsets,
-                                      void *loaderPrivate);
+   __DRIimage *(*createImageFromFds)(__DRIscreen *screen,
+                                     int width, int height, int fourcc,
+                                     int *fds, int num_fds,
+                                     uint32_t flags,
+                                     int *strides, int *offsets,
+                                     void *loaderPrivate);
 
    /**
     * Set an in-fence-fd on the image.  If a fence-fd is already set
diff --git a/src/egl/drivers/dri2/egl_dri2.c b/src/egl/drivers/dri2/egl_dri2.c
index a6bf7b5d1b0b..54e730a15d1d 100644
--- a/src/egl/drivers/dri2/egl_dri2.c
+++ b/src/egl/drivers/dri2/egl_dri2.c
@@ -3145,7 +3145,7 @@ dri2_wl_reference_buffer(void *user_data, uint32_t name, int fd,
    else
       img = dri2_dpy->image->createImageFromFds(
          dri2_dpy->dri_screen_render_gpu, buffer->width, buffer->height,
-         buffer->format, &fd, 1, buffer->stride, buffer->offset, NULL);
+         buffer->format, &fd, 1, 0, buffer->stride, buffer->offset, NULL);
 
    if (img == NULL)
       return;
diff --git a/src/egl/drivers/dri2/platform_wayland.c b/src/egl/drivers/dri2/platform_wayland.c
index 0ec48da30942..7a19d44d7aea 100644
--- a/src/egl/drivers/dri2/platform_wayland.c
+++ b/src/egl/drivers/dri2/platform_wayland.c
@@ -1189,7 +1189,7 @@ get_back_bo(struct dri2_egl_surface *dri2_surf)
                dri2_dpy->dri_screen_render_gpu, dri2_surf->base.Width,
                dri2_surf->base.Height,
                loader_image_format_to_fourcc(linear_dri_image_format),
-               &buffer_fds[0], num_planes, &strides[0], &offsets[0],
+               &buffer_fds[0], num_planes, 0, &strides[0], &offsets[0],
                dri2_surf->back);
             for (i = 0; i < num_planes; ++i) {
                if (buffer_fds[i] != -1)
diff --git a/src/gallium/frontends/dri/dri2.c b/src/gallium/frontends/dri/dri2.c
index 33d90cf8292f..6cbef9a3e800 100644
--- a/src/gallium/frontends/dri/dri2.c
+++ b/src/gallium/frontends/dri/dri2.c
@@ -1707,16 +1707,6 @@ dri2_from_planar(__DRIimage *image, int plane, void *loaderPrivate)
 
 static __DRIimage *
 dri2_from_fds(__DRIscreen *screen, int width, int height, int fourcc,
-              int *fds, int num_fds, int *strides, int *offsets,
-              void *loaderPrivate)
-{
-   return dri2_create_image_from_fd(screen, width, height, fourcc,
-                                   DRM_FORMAT_MOD_INVALID, fds, num_fds,
-                                   strides, offsets, 0, NULL, loaderPrivate);
-}
-
-static __DRIimage *
-dri2_from_fds2(__DRIscreen *screen, int width, int height, int fourcc,
               int *fds, int num_fds, uint32_t flags, int *strides,
               int *offsets, void *loaderPrivate)
 {
@@ -2018,7 +2008,6 @@ static const __DRIimageExtension dri2ImageExtensionTempl = {
     .fromPlanar                   = dri2_from_planar,
     .createImageFromTexture       = dri2_create_from_texture,
     .createImageFromFds           = NULL,
-    .createImageFromFds2          = NULL,
     .createImageFromDmaBufs       = NULL,
     .blitImage                    = dri2_blit_image,
     .getCapabilities              = dri2_get_capabilities,
@@ -2047,7 +2036,6 @@ const __DRIimageExtension driVkImageExtension = {
     .fromPlanar                   = dri2_from_planar,
     .createImageFromTexture       = dri2_create_from_texture,
     .createImageFromFds           = dri2_from_fds,
-    .createImageFromFds2          = dri2_from_fds2,
     .createImageFromDmaBufs       = dri2_from_dma_bufs,
     .blitImage                    = dri2_blit_image,
     .getCapabilities              = dri2_get_capabilities,
@@ -2076,7 +2064,6 @@ const __DRIimageExtension driVkImageExtensionSw = {
     .fromPlanar                   = dri2_from_planar,
     .createImageFromTexture       = dri2_create_from_texture,
     .createImageFromFds           = dri2_from_fds,
-    .createImageFromFds2          = dri2_from_fds2,
     .blitImage                    = dri2_blit_image,
     .getCapabilities              = dri2_get_capabilities,
     .mapImage                     = dri2_map_image,
@@ -2322,7 +2309,6 @@ dri2_init_screen_extensions(struct dri_screen *screen,
 
    if (pscreen->get_param(pscreen, PIPE_CAP_DMABUF) & DRM_PRIME_CAP_IMPORT) {
       screen->image_extension.createImageFromFds = dri2_from_fds;
-      screen->image_extension.createImageFromFds2 = dri2_from_fds2;
       screen->image_extension.createImageFromDmaBufs = dri2_from_dma_bufs;
       screen->image_extension.createImageFromDmaBufs2 = dri2_from_dma_bufs2;
       screen->image_extension.createImageFromDmaBufs3 = dri2_from_dma_bufs3;
diff --git a/src/gallium/frontends/dri/kopper.c b/src/gallium/frontends/dri/kopper.c
index 34b2567a88bc..0a52a68d9fdd 100644
--- a/src/gallium/frontends/dri/kopper.c
+++ b/src/gallium/frontends/dri/kopper.c
@@ -343,7 +343,7 @@ dri3_create_image(xcb_connection_t *c,
                                             bp_reply->height,
                                             image_format_to_fourcc(format),
                                             fds, 1,
-                                            &stride, &offset, loaderPrivate);
+                                            0, &stride, &offset, loaderPrivate);
    close(fds[0]);
    if (!image_planar)
       return NULL;
diff --git a/src/gbm/backends/dri/gbm_dri.c b/src/gbm/backends/dri/gbm_dri.c
index 91fcc1fd29f8..b7dc0d57229a 100644
--- a/src/gbm/backends/dri/gbm_dri.c
+++ b/src/gbm/backends/dri/gbm_dri.c
@@ -874,6 +874,7 @@ gbm_dri_bo_import(struct gbm_device *gbm,
                                              fd_data->height,
                                              fourcc,
                                              &fd_data->fd, 1,
+                                             0,
                                              &stride, &offset,
                                              NULL);
       if (image == NULL) {
diff --git a/src/loader/loader_dri3_helper.c b/src/loader/loader_dri3_helper.c
index ae0cfb8e2dd8..092ac81123e7 100644
--- a/src/loader/loader_dri3_helper.c
+++ b/src/loader/loader_dri3_helper.c
@@ -1623,27 +1623,16 @@ dri3_alloc_render_buffer(struct loader_dri3_drawable *draw, unsigned int format,
       /* The linear buffer was created in the display GPU's vram, so we
        * need to make it visible to render GPU
        */
-      if (draw->ext->image->createImageFromFds2 != NULL)
-         buffer->linear_buffer =
-            draw->ext->image->createImageFromFds2(draw->dri_screen_render_gpu,
-                                                  width,
-                                                  height,
-                                                  loader_image_format_to_fourcc(format),
-                                                  &buffer_fds[0], num_planes,
-                                                  __DRI_IMAGE_PRIME_LINEAR_BUFFER,
-                                                  &buffer->strides[0],
-                                                  &buffer->offsets[0],
-                                                  buffer);
-      else
-         buffer->linear_buffer =
-            draw->ext->image->createImageFromFds(draw->dri_screen_render_gpu,
-                                                 width,
-                                                 height,
-                                                 loader_image_format_to_fourcc(format),
-                                                 &buffer_fds[0], num_planes,
-                                                 &buffer->strides[0],
-                                                 &buffer->offsets[0],
-                                                 buffer);
+      buffer->linear_buffer =
+         draw->ext->image->createImageFromFds(draw->dri_screen_render_gpu,
+                                              width,
+                                              height,
+                                              loader_image_format_to_fourcc(format),
+                                              &buffer_fds[0], num_planes,
+                                              __DRI_IMAGE_PRIME_LINEAR_BUFFER,
+                                              &buffer->strides[0],
+                                              &buffer->offsets[0],
+                                              buffer);
       if (!buffer->linear_buffer)
          goto no_buffer_attrib;
 
@@ -1866,7 +1855,7 @@ loader_dri3_create_image(xcb_connection_t *c,
                                             bp_reply->height,
                                             loader_image_format_to_fourcc(format),
                                             fds, 1,
-                                            &stride, &offset, loaderPrivate);
+                                            0, &stride, &offset, loaderPrivate);
    close(fds[0]);
    if (!image_planar)
       return NULL;
-- 
GitLab


From 7f1009f6c86bdb3012a99a2d57eb1cff86356db2 Mon Sep 17 00:00:00 2001
From: Emma Anholt <emma@anholt.net>
Date: Wed, 11 Oct 2023 10:51:27 -0700
Subject: [PATCH 11/14] dri: Drop old createImageFromDmaBuf{,2}().

... and rename createImageFromDmaBuf3() to be it.  We don't need to
maintain the old function and struct layout, because we're version locked
between loader and driver.  This really cleans up the egl_dri2.c call for
it, and I also get to drop a version check where the multibuffers check
already implies it.
---
 include/GL/internal/dri_interface.h     | 70 ++++++-------------------
 src/egl/drivers/dri2/egl_dri2.c         | 48 +++++------------
 src/egl/drivers/dri2/platform_android.c | 19 ++-----
 src/gallium/frontends/dri/dri2.c        | 68 +-----------------------
 src/gallium/frontends/dri/kopper.c      |  4 +-
 src/gbm/backends/dri/gbm_dri.c          | 24 ++++-----
 src/loader/loader_dri3_helper.c         | 21 ++++----
 src/util/u_gralloc/u_gralloc_cros_api.c |  2 +-
 8 files changed, 60 insertions(+), 196 deletions(-)

diff --git a/include/GL/internal/dri_interface.h b/include/GL/internal/dri_interface.h
index b199396925be..c51fe896804f 100644
--- a/include/GL/internal/dri_interface.h
+++ b/include/GL/internal/dri_interface.h
@@ -1413,7 +1413,7 @@ enum __DRIChromaSiting {
 #define __BLIT_FLAG_FINISH		0x0002
 
 /**
- * Flags for createImageFromDmaBufs3 and createImageFromFds2
+ * Flags for createImageFromDmaBufs
  */
 #define __DRI_IMAGE_PROTECTED_CONTENT_FLAG 0x00000001
 #define __DRI_IMAGE_PRIME_LINEAR_BUFFER    0x00000002
@@ -1505,24 +1505,6 @@ struct __DRIimageExtensionRec {
                                          unsigned *error,
                                          void *loaderPrivate);
 
-   /**
-    * Like createImageFromFds, but takes additional attributes.
-    *
-    * For EGL_EXT_image_dma_buf_import.
-    *
-    * \since 8
-    */
-   __DRIimage *(*createImageFromDmaBufs)(__DRIscreen *screen,
-                                         int width, int height, int fourcc,
-                                         int *fds, int num_fds,
-                                         int *strides, int *offsets,
-                                         enum __DRIYUVColorSpace color_space,
-                                         enum __DRISampleRange sample_range,
-                                         enum __DRIChromaSiting horiz_siting,
-                                         enum __DRIChromaSiting vert_siting,
-                                         unsigned *error,
-                                         void *loaderPrivate);
-
    /**
     * Blit a part of a __DRIimage to another and flushes
     *
@@ -1572,26 +1554,6 @@ struct __DRIimageExtensionRec {
     */
    void (*unmapImage)(__DRIcontext *context, __DRIimage *image, void *data);
 
-
-   /*
-    * Like createImageFromDmaBufs, but takes also format modifiers.
-    *
-    * For EGL_EXT_image_dma_buf_import_modifiers.
-    *
-    * \since 15
-    */
-   __DRIimage *(*createImageFromDmaBufs2)(__DRIscreen *screen,
-                                          int width, int height, int fourcc,
-                                          uint64_t modifier,
-                                          int *fds, int num_fds,
-                                          int *strides, int *offsets,
-                                          enum __DRIYUVColorSpace color_space,
-                                          enum __DRISampleRange sample_range,
-                                          enum __DRIChromaSiting horiz_siting,
-                                          enum __DRIChromaSiting vert_siting,
-                                          unsigned *error,
-                                          void *loaderPrivate);
-
    /*
     * dmabuf format query to support EGL_EXT_image_dma_buf_import_modifiers.
     *
@@ -1667,25 +1629,23 @@ struct __DRIimageExtensionRec {
                                                 void *loaderPrivate,
                                                 unsigned *error);
 
-   /*
-    * Like createImageFromDmaBufs2, but with an added flags parameter.
+   /**
+    * Like createImageFromFds, but takes additional attributes.
     *
     * See __DRI_IMAGE_*_FLAG for valid definitions of flags.
-    *
-    * \since 18
     */
-   __DRIimage *(*createImageFromDmaBufs3)(__DRIscreen *screen,
-                                          int width, int height, int fourcc,
-                                          uint64_t modifier,
-                                          int *fds, int num_fds,
-                                          int *strides, int *offsets,
-                                          enum __DRIYUVColorSpace color_space,
-                                          enum __DRISampleRange sample_range,
-                                          enum __DRIChromaSiting horiz_siting,
-                                          enum __DRIChromaSiting vert_siting,
-                                          uint32_t flags,
-                                          unsigned *error,
-                                          void *loaderPrivate);
+   __DRIimage *(*createImageFromDmaBufs)(__DRIscreen *screen,
+                                         int width, int height, int fourcc,
+                                         uint64_t modifier,
+                                         int *fds, int num_fds,
+                                         int *strides, int *offsets,
+                                         enum __DRIYUVColorSpace color_space,
+                                         enum __DRISampleRange sample_range,
+                                         enum __DRIChromaSiting horiz_siting,
+                                         enum __DRIChromaSiting vert_siting,
+                                         uint32_t flags,
+                                         unsigned *error,
+                                         void *loaderPrivate);
 
    /**
     * Creates an image with implementation's favorite modifiers and the provided
diff --git a/src/egl/drivers/dri2/egl_dri2.c b/src/egl/drivers/dri2/egl_dri2.c
index 54e730a15d1d..96ce84fad7d4 100644
--- a/src/egl/drivers/dri2/egl_dri2.c
+++ b/src/egl/drivers/dri2/egl_dri2.c
@@ -2820,41 +2820,19 @@ dri2_create_image_dma_buf(_EGLDisplay *disp, _EGLContext *ctx,
       has_modifier = true;
    }
 
-   if (attrs.ProtectedContent) {
-      if (dri2_dpy->image->createImageFromDmaBufs3 == NULL) {
-         _eglError(EGL_BAD_MATCH, "unsupported protected_content attribute");
-         return EGL_NO_IMAGE_KHR;
-      }
-      if (!has_modifier)
-         modifier = DRM_FORMAT_MOD_INVALID;
-
-      dri_image = dri2_dpy->image->createImageFromDmaBufs3(
-         dri2_dpy->dri_screen_render_gpu, attrs.Width, attrs.Height,
-         attrs.DMABufFourCC.Value, modifier, fds, num_fds, pitches, offsets,
-         attrs.DMABufYuvColorSpaceHint.Value, attrs.DMABufSampleRangeHint.Value,
-         attrs.DMABufChromaHorizontalSiting.Value,
-         attrs.DMABufChromaVerticalSiting.Value,
-         attrs.ProtectedContent ? __DRI_IMAGE_PROTECTED_CONTENT_FLAG : 0,
-         &error, NULL);
-   } else if (has_modifier) {
-      if (dri2_dpy->image->createImageFromDmaBufs2 == NULL) {
-         _eglError(EGL_BAD_MATCH, "unsupported dma_buf format modifier");
-         return EGL_NO_IMAGE_KHR;
-      }
-      dri_image = dri2_dpy->image->createImageFromDmaBufs2(
-         dri2_dpy->dri_screen_render_gpu, attrs.Width, attrs.Height,
-         attrs.DMABufFourCC.Value, modifier, fds, num_fds, pitches, offsets,
-         attrs.DMABufYuvColorSpaceHint.Value, attrs.DMABufSampleRangeHint.Value,
-         attrs.DMABufChromaHorizontalSiting.Value,
-         attrs.DMABufChromaVerticalSiting.Value, &error, NULL);
-   } else {
-      dri_image = dri2_dpy->image->createImageFromDmaBufs(
-         dri2_dpy->dri_screen_render_gpu, attrs.Width, attrs.Height,
-         attrs.DMABufFourCC.Value, fds, num_fds, pitches, offsets,
-         attrs.DMABufYuvColorSpaceHint.Value, attrs.DMABufSampleRangeHint.Value,
-         attrs.DMABufChromaHorizontalSiting.Value,
-         attrs.DMABufChromaVerticalSiting.Value, &error, NULL);
-   }
+   if (!has_modifier)
+      modifier = DRM_FORMAT_MOD_INVALID;
+
+   uint32_t flags = 0;
+   if (attrs.ProtectedContent)
+      flags |= __DRI_IMAGE_PROTECTED_CONTENT_FLAG;
+
+   dri_image = dri2_dpy->image->createImageFromDmaBufs(
+      dri2_dpy->dri_screen_render_gpu, attrs.Width, attrs.Height,
+      attrs.DMABufFourCC.Value, modifier, fds, num_fds, pitches, offsets,
+      attrs.DMABufYuvColorSpaceHint.Value, attrs.DMABufSampleRangeHint.Value,
+      attrs.DMABufChromaHorizontalSiting.Value,
+      attrs.DMABufChromaVerticalSiting.Value, flags, &error, NULL);
 
    egl_error = egl_error_from_dri_image_error(error);
    if (egl_error != EGL_SUCCESS)
diff --git a/src/egl/drivers/dri2/platform_android.c b/src/egl/drivers/dri2/platform_android.c
index 304aecaed011..976ea901caca 100644
--- a/src/egl/drivers/dri2/platform_android.c
+++ b/src/egl/drivers/dri2/platform_android.c
@@ -353,7 +353,7 @@ native_window_buffer_get_buffer_info(struct dri2_egl_display *dri2_dpy,
 /* More recent CrOS gralloc has a perform op that fills out the struct below
  * with canonical information about the buffer and its modifier, planes,
  * offsets and strides.  If we have this, we can skip straight to
- * createImageFromDmaBufs2() and avoid all the guessing and recalculations.
+ * createImageFromDmaBufs() and avoid all the guessing and recalculations.
  * This also gives us the modifier and plane offsets/strides for multiplanar
  * compressed buffers (eg Intel CCS buffers) in order to make that work in
  * Android.
@@ -416,21 +416,12 @@ droid_create_image_from_buffer_info(struct dri2_egl_display *dri2_dpy,
 {
    unsigned error;
 
-   if (dri2_dpy->image->createImageFromDmaBufs2 != NULL) {
-      return dri2_dpy->image->createImageFromDmaBufs2(
-         dri2_dpy->dri_screen_render_gpu, buf_info->width, buf_info->height,
-         buf_info->drm_fourcc, buf_info->modifier, buf_info->fds,
-         buf_info->num_planes, buf_info->pitches, buf_info->offsets,
-         buf_info->yuv_color_space, buf_info->sample_range,
-         buf_info->horizontal_siting, buf_info->vertical_siting, &error, priv);
-   }
-
    return dri2_dpy->image->createImageFromDmaBufs(
       dri2_dpy->dri_screen_render_gpu, buf_info->width, buf_info->height,
-      buf_info->drm_fourcc, buf_info->fds, buf_info->num_planes,
-      buf_info->pitches, buf_info->offsets, buf_info->yuv_color_space,
-      buf_info->sample_range, buf_info->horizontal_siting,
-      buf_info->vertical_siting, &error, priv);
+      buf_info->drm_fourcc, buf_info->modifier, buf_info->fds,
+      buf_info->num_planes, buf_info->pitches, buf_info->offsets,
+      buf_info->yuv_color_space, buf_info->sample_range,
+      buf_info->horizontal_siting, buf_info->vertical_siting, 0, &error, priv);
 }
 
 static __DRIimage *
diff --git a/src/gallium/frontends/dri/dri2.c b/src/gallium/frontends/dri/dri2.c
index 6cbef9a3e800..ab7405d8d6f4 100644
--- a/src/gallium/frontends/dri/dri2.c
+++ b/src/gallium/frontends/dri/dri2.c
@@ -1786,76 +1786,18 @@ dri2_query_dma_buf_format_modifier_attribs(__DRIscreen *_screen,
 static __DRIimage *
 dri2_from_dma_bufs(__DRIscreen *screen,
                    int width, int height, int fourcc,
-                   int *fds, int num_fds,
+                   uint64_t modifier, int *fds, int num_fds,
                    int *strides, int *offsets,
                    enum __DRIYUVColorSpace yuv_color_space,
                    enum __DRISampleRange sample_range,
                    enum __DRIChromaSiting horizontal_siting,
                    enum __DRIChromaSiting vertical_siting,
+                   uint32_t flags,
                    unsigned *error,
                    void *loaderPrivate)
 {
    __DRIimage *img;
 
-   img = dri2_create_image_from_fd(screen, width, height, fourcc,
-                                   DRM_FORMAT_MOD_INVALID, fds, num_fds,
-                                   strides, offsets, 0, error, loaderPrivate);
-   if (img == NULL)
-      return NULL;
-
-   img->yuv_color_space = yuv_color_space;
-   img->sample_range = sample_range;
-   img->horizontal_siting = horizontal_siting;
-   img->vertical_siting = vertical_siting;
-
-   *error = __DRI_IMAGE_ERROR_SUCCESS;
-   return img;
-}
-
-static __DRIimage *
-dri2_from_dma_bufs2(__DRIscreen *screen,
-                    int width, int height, int fourcc,
-                    uint64_t modifier, int *fds, int num_fds,
-                    int *strides, int *offsets,
-                    enum __DRIYUVColorSpace yuv_color_space,
-                    enum __DRISampleRange sample_range,
-                    enum __DRIChromaSiting horizontal_siting,
-                    enum __DRIChromaSiting vertical_siting,
-                    unsigned *error,
-                    void *loaderPrivate)
-{
-   __DRIimage *img;
-
-   img = dri2_create_image_from_fd(screen, width, height, fourcc,
-                                   modifier, fds, num_fds, strides, offsets,
-                                   0, error, loaderPrivate);
-   if (img == NULL)
-      return NULL;
-
-   img->yuv_color_space = yuv_color_space;
-   img->sample_range = sample_range;
-   img->horizontal_siting = horizontal_siting;
-   img->vertical_siting = vertical_siting;
-
-   *error = __DRI_IMAGE_ERROR_SUCCESS;
-   return img;
-}
-
-static __DRIimage *
-dri2_from_dma_bufs3(__DRIscreen *screen,
-                    int width, int height, int fourcc,
-                    uint64_t modifier, int *fds, int num_fds,
-                    int *strides, int *offsets,
-                    enum __DRIYUVColorSpace yuv_color_space,
-                    enum __DRISampleRange sample_range,
-                    enum __DRIChromaSiting horizontal_siting,
-                    enum __DRIChromaSiting vertical_siting,
-                    uint32_t flags,
-                    unsigned *error,
-                    void *loaderPrivate)
-{
-   __DRIimage *img;
-
    img = dri2_create_image_from_fd(screen, width, height, fourcc,
                                    modifier, fds, num_fds, strides, offsets,
                                    (flags & __DRI_IMAGE_PROTECTED_CONTENT_FLAG) ?
@@ -2014,8 +1956,6 @@ static const __DRIimageExtension dri2ImageExtensionTempl = {
     .mapImage                     = dri2_map_image,
     .unmapImage                   = dri2_unmap_image,
     .createImageWithModifiers     = NULL,
-    .createImageFromDmaBufs2      = NULL,
-    .createImageFromDmaBufs3      = NULL,
     .queryDmaBufFormats           = NULL,
     .queryDmaBufModifiers         = NULL,
     .queryDmaBufFormatModifierAttribs = NULL,
@@ -2042,8 +1982,6 @@ const __DRIimageExtension driVkImageExtension = {
     .mapImage                     = dri2_map_image,
     .unmapImage                   = dri2_unmap_image,
     .createImageWithModifiers     = dri2_create_image_with_modifiers,
-    .createImageFromDmaBufs2      = dri2_from_dma_bufs2,
-    .createImageFromDmaBufs3      = dri2_from_dma_bufs3,
     .queryDmaBufFormats           = dri2_query_dma_buf_formats,
     .queryDmaBufModifiers         = dri2_query_dma_buf_modifiers,
     .queryDmaBufFormatModifierAttribs = dri2_query_dma_buf_format_modifier_attribs,
@@ -2310,8 +2248,6 @@ dri2_init_screen_extensions(struct dri_screen *screen,
    if (pscreen->get_param(pscreen, PIPE_CAP_DMABUF) & DRM_PRIME_CAP_IMPORT) {
       screen->image_extension.createImageFromFds = dri2_from_fds;
       screen->image_extension.createImageFromDmaBufs = dri2_from_dma_bufs;
-      screen->image_extension.createImageFromDmaBufs2 = dri2_from_dma_bufs2;
-      screen->image_extension.createImageFromDmaBufs3 = dri2_from_dma_bufs3;
       screen->image_extension.queryDmaBufFormats =
          dri2_query_dma_buf_formats;
       screen->image_extension.queryDmaBufModifiers =
diff --git a/src/gallium/frontends/dri/kopper.c b/src/gallium/frontends/dri/kopper.c
index 0a52a68d9fdd..d7a84c9ef752 100644
--- a/src/gallium/frontends/dri/kopper.c
+++ b/src/gallium/frontends/dri/kopper.c
@@ -297,7 +297,7 @@ dri3_create_image_from_buffers(xcb_connection_t *c,
       offsets[i] = offsets_in[i];
    }
 
-   ret = image->createImageFromDmaBufs2(opaque_dri_screen(screen),
+   ret = image->createImageFromDmaBufs(opaque_dri_screen(screen),
                                         bp_reply->width,
                                         bp_reply->height,
                                         image_format_to_fourcc(format),
@@ -305,7 +305,7 @@ dri3_create_image_from_buffers(xcb_connection_t *c,
                                         fds, bp_reply->nfd,
                                         strides, offsets,
                                         0, 0, 0, 0, /* UNDEFINED */
-                                        &error, loaderPrivate);
+                                        0, &error, loaderPrivate);
 
    for (i = 0; i < bp_reply->nfd; i++)
       close(fds[i]);
diff --git a/src/gbm/backends/dri/gbm_dri.c b/src/gbm/backends/dri/gbm_dri.c
index b7dc0d57229a..5f411b6675d7 100644
--- a/src/gbm/backends/dri/gbm_dri.c
+++ b/src/gbm/backends/dri/gbm_dri.c
@@ -891,26 +891,26 @@ gbm_dri_bo_import(struct gbm_device *gbm,
       unsigned int error;
       int fourcc;
 
-      /* Import with modifier requires createImageFromDmaBufs2 */
-      if (dri->image->createImageFromDmaBufs2 == NULL) {
+      /* Import with modifier requires createImageFromDmaBufs */
+      if (dri->image->createImageFromDmaBufs == NULL) {
          errno = ENOSYS;
          return NULL;
       }
 
       /* GBM's GBM_FORMAT_* tokens are a strict superset of the DRI FourCC
-       * tokens accepted by createImageFromDmaBufs2, except for not supporting
+       * tokens accepted by createImageFromDmaBufs, except for not supporting
        * the sARGB format. */
       fourcc = gbm_core.v0.format_canonicalize(fd_data->format);
 
-      image = dri->image->createImageFromDmaBufs2(dri->screen, fd_data->width,
-                                                  fd_data->height, fourcc,
-                                                  fd_data->modifier,
-                                                  fd_data->fds,
-                                                  fd_data->num_fds,
-                                                  fd_data->strides,
-                                                  fd_data->offsets,
-                                                  0, 0, 0, 0,
-                                                  &error, NULL);
+      image = dri->image->createImageFromDmaBufs(dri->screen, fd_data->width,
+                                                 fd_data->height, fourcc,
+                                                 fd_data->modifier,
+                                                 fd_data->fds,
+                                                 fd_data->num_fds,
+                                                 fd_data->strides,
+                                                 fd_data->offsets,
+                                                 0, 0, 0, 0,
+                                                 0, &error, NULL);
       if (image == NULL) {
          errno = ENOSYS;
          return NULL;
diff --git a/src/loader/loader_dri3_helper.c b/src/loader/loader_dri3_helper.c
index 092ac81123e7..87c4f6a78b42 100644
--- a/src/loader/loader_dri3_helper.c
+++ b/src/loader/loader_dri3_helper.c
@@ -1897,15 +1897,15 @@ loader_dri3_create_image_from_buffers(xcb_connection_t *c,
       offsets[i] = offsets_in[i];
    }
 
-   ret = image->createImageFromDmaBufs2(dri_screen,
-                                        bp_reply->width,
-                                        bp_reply->height,
-                                        loader_image_format_to_fourcc(format),
-                                        bp_reply->modifier,
-                                        fds, bp_reply->nfd,
-                                        strides, offsets,
-                                        0, 0, 0, 0, /* UNDEFINED */
-                                        &error, loaderPrivate);
+   ret = image->createImageFromDmaBufs(dri_screen,
+                                       bp_reply->width,
+                                       bp_reply->height,
+                                       loader_image_format_to_fourcc(format),
+                                       bp_reply->modifier,
+                                       fds, bp_reply->nfd,
+                                       strides, offsets,
+                                       0, 0, 0, 0, /* UNDEFINED */
+                                       0, &error, loaderPrivate);
 
    for (i = 0; i < bp_reply->nfd; i++)
       close(fds[i]);
@@ -1967,8 +1967,7 @@ dri3_get_pixmap_buffer(__DRIdrawable *driDrawable, unsigned int format,
                           false,
                           fence_fd);
 #ifdef HAVE_DRI3_MODIFIERS
-   if (draw->multiplanes_available &&
-       draw->ext->image->createImageFromDmaBufs2) {
+   if (draw->multiplanes_available) {
       xcb_dri3_buffers_from_pixmap_cookie_t bps_cookie;
       xcb_dri3_buffers_from_pixmap_reply_t *bps_reply;
 
diff --git a/src/util/u_gralloc/u_gralloc_cros_api.c b/src/util/u_gralloc/u_gralloc_cros_api.c
index a94e7fee7247..da2d38c460e9 100644
--- a/src/util/u_gralloc/u_gralloc_cros_api.c
+++ b/src/util/u_gralloc/u_gralloc_cros_api.c
@@ -19,7 +19,7 @@
 /* More recent CrOS gralloc has a perform op that fills out the struct below
  * with canonical information about the buffer and its modifier, planes,
  * offsets and strides.  If we have this, we can skip straight to
- * createImageFromDmaBufs2() and avoid all the guessing and recalculations.
+ * createImageFromDmaBufs() and avoid all the guessing and recalculations.
  * This also gives us the modifier and plane offsets/strides for multiplanar
  * compressed buffers (eg Intel CCS buffers) in order to make that work in
  * Android.
-- 
GitLab
