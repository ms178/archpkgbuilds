From 395cd35b28bfc1d1aae8237e28f10e1549399285 Mon Sep 17 00:00:00 2001
From: Lionel Landwerlin <lionel.g.landwerlin@intel.com>
Date: Tue, 12 Jul 2022 11:08:36 +0300
Subject: [PATCH 1/2] util/dyn_array: add a pop_ptr_or_null() helper to protect
 against empty arrays

Signed-off-by: Lionel Landwerlin <lionel.g.landwerlin@intel.com>
Cc: mesa-stable
Closes: https://gitlab.freedesktop.org/mesa/mesa/-/issues/6843
---
 src/util/u_dynarray.h | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/src/util/u_dynarray.h b/src/util/u_dynarray.h
index 6f91b8208921..8e296fd74f5d 100644
--- a/src/util/u_dynarray.h
+++ b/src/util/u_dynarray.h
@@ -176,6 +176,9 @@ util_dynarray_trim(struct util_dynarray *buf)
 #define util_dynarray_top(buf, type) *util_dynarray_top_ptr(buf, type)
 #define util_dynarray_pop_ptr(buf, type) (type*)((char*)(buf)->data + ((buf)->size -= sizeof(type)))
 #define util_dynarray_pop(buf, type) *util_dynarray_pop_ptr(buf, type)
+#define util_dynarray_pop_ptr_or_null(buf, type) (type*)(((buf)->size == 0) ? \
+                                                         NULL :         \
+                                                         ((char*)(buf)->data + ((buf)->size -= sizeof(type))))
 #define util_dynarray_contains(buf, type) ((buf)->size >= sizeof(type))
 #define util_dynarray_element(buf, type, idx) ((type*)(buf)->data + (idx))
 #define util_dynarray_begin(buf) ((buf)->data)
-- 
GitLab


From e597da19989ed26f20bda69f6d6b75c06a5f6380 Mon Sep 17 00:00:00 2001
From: Lionel Landwerlin <lionel.g.landwerlin@intel.com>
Date: Tue, 12 Jul 2022 17:47:44 +0300
Subject: [PATCH 2/2] vulkan/runtime: protect against empty array

Signed-off-by: Lionel Landwerlin <lionel.g.landwerlin@intel.com>
Cc: mesa-stable
Closes: https://gitlab.freedesktop.org/mesa/mesa/-/issues/6843
---
 src/util/u_dynarray.h               |  2 +-
 src/vulkan/runtime/vk_debug_utils.c | 16 ++++++++--------
 2 files changed, 9 insertions(+), 9 deletions(-)

diff --git a/src/util/u_dynarray.h b/src/util/u_dynarray.h
index 8e296fd74f5d..ff45666d43be 100644
--- a/src/util/u_dynarray.h
+++ b/src/util/u_dynarray.h
@@ -178,7 +178,7 @@ util_dynarray_trim(struct util_dynarray *buf)
 #define util_dynarray_pop(buf, type) *util_dynarray_pop_ptr(buf, type)
 #define util_dynarray_pop_ptr_or_null(buf, type) (type*)(((buf)->size == 0) ? \
                                                          NULL :         \
-                                                         ((char*)(buf)->data + ((buf)->size -= sizeof(type))))
+                                                         util_dynarray_pop_ptr(buf, type))
 #define util_dynarray_contains(buf, type) ((buf)->size >= sizeof(type))
 #define util_dynarray_element(buf, type, idx) ((type*)(buf)->data + (idx))
 #define util_dynarray_begin(buf) ((buf)->data)
diff --git a/src/vulkan/runtime/vk_debug_utils.c b/src/vulkan/runtime/vk_debug_utils.c
index cd798af11040..54057740fcc0 100644
--- a/src/vulkan/runtime/vk_debug_utils.c
+++ b/src/vulkan/runtime/vk_debug_utils.c
@@ -195,7 +195,7 @@ vk_common_CmdBeginDebugUtilsLabelEXT(
     * should remove it first.
     */
    if (!command_buffer->region_begin)
-      (void)util_dynarray_pop(&command_buffer->labels, VkDebugUtilsLabelEXT);
+      util_dynarray_pop_ptr_or_null(&command_buffer->labels, VkDebugUtilsLabelEXT);
 
    util_dynarray_append(&command_buffer->labels, VkDebugUtilsLabelEXT,
                         *pLabelInfo);
@@ -211,9 +211,9 @@ vk_common_CmdEndDebugUtilsLabelEXT(VkCommandBuffer _commandBuffer)
     * should remove it first.
     */
    if (!command_buffer->region_begin)
-      (void)util_dynarray_pop(&command_buffer->labels, VkDebugUtilsLabelEXT);
+      util_dynarray_pop_ptr_or_null(&command_buffer->labels, VkDebugUtilsLabelEXT);
 
-   (void)util_dynarray_pop(&command_buffer->labels, VkDebugUtilsLabelEXT);
+   util_dynarray_pop_ptr_or_null(&command_buffer->labels, VkDebugUtilsLabelEXT);
    command_buffer->region_begin = true;
 }
 
@@ -228,7 +228,7 @@ vk_common_CmdInsertDebugUtilsLabelEXT(
     * should remove it first.
     */
    if (!command_buffer->region_begin)
-      (void)util_dynarray_pop(&command_buffer->labels, VkDebugUtilsLabelEXT);
+      util_dynarray_pop_ptr_or_null(&command_buffer->labels, VkDebugUtilsLabelEXT);
 
    util_dynarray_append(&command_buffer->labels, VkDebugUtilsLabelEXT,
                         *pLabelInfo);
@@ -246,7 +246,7 @@ vk_common_QueueBeginDebugUtilsLabelEXT(
     * should remove it first.
     */
    if (!queue->region_begin)
-      (void)util_dynarray_pop(&queue->labels, VkDebugUtilsLabelEXT);
+      util_dynarray_pop_ptr_or_null(&queue->labels, VkDebugUtilsLabelEXT);
 
    util_dynarray_append(&queue->labels, VkDebugUtilsLabelEXT, *pLabelInfo);
    queue->region_begin = true;
@@ -261,9 +261,9 @@ vk_common_QueueEndDebugUtilsLabelEXT(VkQueue _queue)
     * should remove it first.
     */
    if (!queue->region_begin)
-      (void)util_dynarray_pop(&queue->labels, VkDebugUtilsLabelEXT);
+      util_dynarray_pop_ptr_or_null(&queue->labels, VkDebugUtilsLabelEXT);
 
-   (void)util_dynarray_pop(&queue->labels, VkDebugUtilsLabelEXT);
+   util_dynarray_pop_ptr_or_null(&queue->labels, VkDebugUtilsLabelEXT);
    queue->region_begin = true;
 }
 
@@ -278,7 +278,7 @@ vk_common_QueueInsertDebugUtilsLabelEXT(
     * should remove it first.
     */
    if (!queue->region_begin)
-      (void)util_dynarray_pop(&queue->labels, VkDebugUtilsLabelEXT);
+      util_dynarray_pop_ptr_or_null(&queue->labels, VkDebugUtilsLabelEXT);
 
    util_dynarray_append(&queue->labels, VkDebugUtilsLabelEXT, *pLabelInfo);
    queue->region_begin = false;
-- 
GitLab

