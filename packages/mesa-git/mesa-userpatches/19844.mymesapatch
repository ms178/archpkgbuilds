From 777d4c22a4112f024dbb4d2808cc9fb81ee65ec8 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Thu, 17 Nov 2022 11:15:56 -0500
Subject: [PATCH 1/3] mesa: remove ctx->Extensions.EXT_pixel_buffer_object

to get rid of the fail path in get_buffer_target.
---
 src/mesa/main/bufferobj.c        | 3 ---
 src/mesa/main/consts_exts.h      | 1 -
 src/mesa/main/extensions.c       | 1 -
 src/mesa/main/extensions_table.h | 6 +++---
 src/mesa/main/get.c              | 1 -
 src/mesa/main/get_hash_params.py | 4 ++--
 src/mesa/main/version.c          | 1 -
 7 files changed, 5 insertions(+), 12 deletions(-)

diff --git a/src/mesa/main/bufferobj.c b/src/mesa/main/bufferobj.c
index bb41c51420fd..3948141ea112 100644
--- a/src/mesa/main/bufferobj.c
+++ b/src/mesa/main/bufferobj.c
@@ -670,11 +670,8 @@ get_buffer_target(struct gl_context *ctx, GLenum target)
       switch (target) {
       case GL_ARRAY_BUFFER:
       case GL_ELEMENT_ARRAY_BUFFER:
-         break;
       case GL_PIXEL_PACK_BUFFER:
       case GL_PIXEL_UNPACK_BUFFER:
-         if (!ctx->Extensions.EXT_pixel_buffer_object)
-            return NULL;
          break;
       default:
          return NULL;
diff --git a/src/mesa/main/consts_exts.h b/src/mesa/main/consts_exts.h
index ea008792d44f..42ff9032305b 100644
--- a/src/mesa/main/consts_exts.h
+++ b/src/mesa/main/consts_exts.h
@@ -178,7 +178,6 @@ struct gl_extensions
    GLboolean EXT_memory_object_win32;
    GLboolean EXT_multisampled_render_to_texture;
    GLboolean EXT_packed_float;
-   GLboolean EXT_pixel_buffer_object;
    GLboolean EXT_provoking_vertex;
    GLboolean EXT_render_snorm;
    GLboolean EXT_semaphore;
diff --git a/src/mesa/main/extensions.c b/src/mesa/main/extensions.c
index 84fdcf893941..6fdc1f2d6c8f 100644
--- a/src/mesa/main/extensions.c
+++ b/src/mesa/main/extensions.c
@@ -283,7 +283,6 @@ _mesa_init_extensions(struct gl_extensions *extensions)
 
    extensions->EXT_EGL_image_storage = GL_TRUE;
    extensions->EXT_gpu_program_parameters = GL_TRUE;
-   extensions->EXT_pixel_buffer_object = GL_TRUE;
    extensions->EXT_provoking_vertex = GL_TRUE;
    extensions->EXT_stencil_two_side = GL_TRUE;
    extensions->EXT_texture_env_dot3 = GL_TRUE;
diff --git a/src/mesa/main/extensions_table.h b/src/mesa/main/extensions_table.h
index 307b5d3bc1db..07b1442d89fe 100644
--- a/src/mesa/main/extensions_table.h
+++ b/src/mesa/main/extensions_table.h
@@ -102,7 +102,7 @@ EXT(ARB_occlusion_query                     , ARB_occlusion_query
 EXT(ARB_occlusion_query2                    , ARB_occlusion_query2                   , GLL, GLC,  x ,  x , 2003)
 EXT(ARB_parallel_shader_compile             , dummy_true                             , GLL, GLC,  x ,  x , 2015)
 EXT(ARB_pipeline_statistics_query           , ARB_pipeline_statistics_query          , GLL, GLC,  x ,  x , 2014)
-EXT(ARB_pixel_buffer_object                 , EXT_pixel_buffer_object                , GLL, GLC,  x ,  x , 2004)
+EXT(ARB_pixel_buffer_object                 , dummy_true                             , GLL, GLC,  x ,  x , 2004)
 EXT(ARB_point_parameters                    , dummy_true                             , GLL,  x ,  x ,  x , 1997)
 EXT(ARB_point_sprite                        , dummy_true                             , GLL, GLC,  x ,  x , 2003)
 EXT(ARB_polygon_offset_clamp                , ARB_polygon_offset_clamp               , GLL, GLC,  x ,  x , 2017)
@@ -271,7 +271,7 @@ EXT(EXT_occlusion_query_boolean             , ARB_occlusion_query2
 EXT(EXT_packed_depth_stencil                , dummy_true                             , GLL, GLC,  x ,  x , 2005)
 EXT(EXT_packed_float                        , EXT_packed_float                       , GLL, GLC,  x ,  x , 2004)
 EXT(EXT_packed_pixels                       , dummy_true                             , GLL,  x ,  x ,  x , 1997)
-EXT(EXT_pixel_buffer_object                 , EXT_pixel_buffer_object                , GLL, GLC,  x ,  x , 2004)
+EXT(EXT_pixel_buffer_object                 , dummy_true                             , GLL, GLC,  x ,  x , 2004)
 EXT(EXT_point_parameters                    , dummy_true                             , GLL,  x ,  x ,  x , 1997)
 EXT(EXT_polygon_offset_clamp                , ARB_polygon_offset_clamp               , GLL, GLC, ES1, ES2, 2014)
 EXT(EXT_primitive_bounding_box              , OES_primitive_bounding_box             ,  x ,  x ,  x ,  31, 2014)
@@ -409,7 +409,7 @@ EXT(NV_image_formats                        , dummy_true
 EXT(NV_light_max_exponent                   , dummy_true                             , GLL,  x ,  x ,  x , 1999)
 EXT(NV_pack_subimage                        , dummy_true                             ,  x ,  x ,  x , ES2, 2009)
 EXT(NV_packed_depth_stencil                 , dummy_true                             , GLL, GLC,  x ,  x , 2000)
-EXT(NV_pixel_buffer_object                  , EXT_pixel_buffer_object                ,  x ,  x ,  x , ES2, 2012)
+EXT(NV_pixel_buffer_object                  , dummy_true                             ,  x ,  x ,  x , ES2, 2012)
 EXT(NV_primitive_restart                    , NV_primitive_restart                   , GLL,  x ,  x ,  x , 2002)
 EXT(NV_read_buffer                          , dummy_true                             ,  x ,  x ,  x , ES2, 2011)
 EXT(NV_read_depth                           , dummy_true                             ,  x ,  x ,  x , ES2, 2011)
diff --git a/src/mesa/main/get.c b/src/mesa/main/get.c
index ae61a189a98a..20b1cc03b243 100644
--- a/src/mesa/main/get.c
+++ b/src/mesa/main/get.c
@@ -542,7 +542,6 @@ EXTRA_EXT(ARB_sync);
 EXTRA_EXT(ARB_vertex_shader);
 EXTRA_EXT(EXT_transform_feedback);
 EXTRA_EXT(ARB_transform_feedback3);
-EXTRA_EXT(EXT_pixel_buffer_object);
 EXTRA_EXT(ARB_vertex_program);
 EXTRA_EXT2(ARB_vertex_program, ARB_fragment_program);
 EXTRA_EXT(ARB_color_buffer_float);
diff --git a/src/mesa/main/get_hash_params.py b/src/mesa/main/get_hash_params.py
index e1ee26e0847f..089cfaad0e02 100644
--- a/src/mesa/main/get_hash_params.py
+++ b/src/mesa/main/get_hash_params.py
@@ -393,8 +393,8 @@ descriptor=[
   [ "ALPHA_TO_COVERAGE_DITHER_MODE_NV", "CONTEXT_ENUM(Multisample.SampleAlphaToCoverageDitherControl ), NO_EXTRA" ],
 
 # GL_EXT_pixel_buffer_object
-  [ "PIXEL_PACK_BUFFER_BINDING_EXT", "LOC_CUSTOM, TYPE_INT, 0, extra_EXT_pixel_buffer_object" ],
-  [ "PIXEL_UNPACK_BUFFER_BINDING_EXT", "LOC_CUSTOM, TYPE_INT, 0, extra_EXT_pixel_buffer_object" ],
+  [ "PIXEL_PACK_BUFFER_BINDING_EXT", "LOC_CUSTOM, TYPE_INT, 0, NO_EXTRA" ],
+  [ "PIXEL_UNPACK_BUFFER_BINDING_EXT", "LOC_CUSTOM, TYPE_INT, 0, NO_EXTRA" ],
 
 # GL_ARB_framebuffer_object or GL_EXT_framebuffer_multisample or GL_EXT_multisampled_render_to_texture
   [ "MAX_SAMPLES", "CONTEXT_INT(Const.MaxSamples), extra_ARB_framebuffer_object_or_EXT_framebuffer_multisample_or_EXT_multisampled_render_to_texture" ],
diff --git a/src/mesa/main/version.c b/src/mesa/main/version.c
index a564b8cf1f96..05e8a119f1fa 100644
--- a/src/mesa/main/version.c
+++ b/src/mesa/main/version.c
@@ -261,7 +261,6 @@ compute_version(const struct gl_extensions *extensions,
                          extensions->EXT_blend_equation_separate &&
                          extensions->EXT_stencil_two_side);
    const bool ver_2_1 = (ver_2_0 &&
-                         extensions->EXT_pixel_buffer_object &&
                          extensions->EXT_texture_sRGB);
    /* We lie about the minimum number of color attachments. Strictly, OpenGL
     * 3.0 requires 8, whereas OpenGL ES requires 4. OpenGL ES 3.0 class
-- 
GitLab


From cd306d140749ac14a22f89bbf6f6a9411c0cb592 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Thu, 17 Nov 2022 12:02:16 -0500
Subject: [PATCH 2/3] mesa: add no_error support into get_buffer_target()

---
 src/mesa/main/bufferobj.c | 64 +++++++++++++++++++++------------------
 1 file changed, 34 insertions(+), 30 deletions(-)

diff --git a/src/mesa/main/bufferobj.c b/src/mesa/main/bufferobj.c
index 3948141ea112..b21328596fdf 100644
--- a/src/mesa/main/bufferobj.c
+++ b/src/mesa/main/bufferobj.c
@@ -662,11 +662,11 @@ static struct gl_buffer_object DummyBufferObject = {
  * \return   pointer to pointer to the buffer object bound to \c target in the
  *           specified context or \c NULL if \c target is invalid.
  */
-static inline struct gl_buffer_object **
-get_buffer_target(struct gl_context *ctx, GLenum target)
+static ALWAYS_INLINE struct gl_buffer_object **
+get_buffer_target(struct gl_context *ctx, GLenum target, bool no_error)
 {
    /* Other targets are only supported in desktop OpenGL and OpenGL ES 3.0. */
-   if (!_mesa_is_desktop_gl(ctx) && !_mesa_is_gles3(ctx)) {
+   if (!no_error && !_mesa_is_desktop_gl(ctx) && !_mesa_is_gles3(ctx)) {
       switch (target) {
       case GL_ARRAY_BUFFER:
       case GL_ELEMENT_ARRAY_BUFFER:
@@ -692,58 +692,61 @@ get_buffer_target(struct gl_context *ctx, GLenum target)
    case GL_COPY_WRITE_BUFFER:
       return &ctx->CopyWriteBuffer;
    case GL_QUERY_BUFFER:
-      if (_mesa_has_ARB_query_buffer_object(ctx))
+      if (no_error || _mesa_has_ARB_query_buffer_object(ctx))
          return &ctx->QueryBuffer;
       break;
    case GL_DRAW_INDIRECT_BUFFER:
-      if ((_mesa_is_desktop_gl(ctx) && ctx->Extensions.ARB_draw_indirect) ||
+      if (no_error ||
+          (_mesa_is_desktop_gl(ctx) && ctx->Extensions.ARB_draw_indirect) ||
            _mesa_is_gles31(ctx)) {
          return &ctx->DrawIndirectBuffer;
       }
       break;
    case GL_PARAMETER_BUFFER_ARB:
-      if (_mesa_has_ARB_indirect_parameters(ctx)) {
+      if (no_error || _mesa_has_ARB_indirect_parameters(ctx)) {
          return &ctx->ParameterBuffer;
       }
       break;
    case GL_DISPATCH_INDIRECT_BUFFER:
-      if (_mesa_has_compute_shaders(ctx)) {
+      if (no_error || _mesa_has_compute_shaders(ctx)) {
          return &ctx->DispatchIndirectBuffer;
       }
       break;
    case GL_TRANSFORM_FEEDBACK_BUFFER:
-      if (ctx->Extensions.EXT_transform_feedback) {
+      if (no_error || ctx->Extensions.EXT_transform_feedback) {
          return &ctx->TransformFeedback.CurrentBuffer;
       }
       break;
    case GL_TEXTURE_BUFFER:
-      if (_mesa_has_ARB_texture_buffer_object(ctx) ||
+      if (no_error ||
+          _mesa_has_ARB_texture_buffer_object(ctx) ||
           _mesa_has_OES_texture_buffer(ctx)) {
          return &ctx->Texture.BufferObject;
       }
       break;
    case GL_UNIFORM_BUFFER:
-      if (ctx->Extensions.ARB_uniform_buffer_object) {
+      if (no_error || ctx->Extensions.ARB_uniform_buffer_object) {
          return &ctx->UniformBuffer;
       }
       break;
    case GL_SHADER_STORAGE_BUFFER:
-      if (ctx->Extensions.ARB_shader_storage_buffer_object || _mesa_is_gles31(ctx)) {
+      if (no_error ||
+          ctx->Extensions.ARB_shader_storage_buffer_object ||
+          _mesa_is_gles31(ctx)) {
          return &ctx->ShaderStorageBuffer;
       }
       break;
    case GL_ATOMIC_COUNTER_BUFFER:
-      if (ctx->Extensions.ARB_shader_atomic_counters || _mesa_is_gles31(ctx)) {
+      if (no_error ||
+          ctx->Extensions.ARB_shader_atomic_counters || _mesa_is_gles31(ctx)) {
          return &ctx->AtomicBuffer;
       }
       break;
    case GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD:
-      if (ctx->Extensions.AMD_pinned_memory) {
+      if (no_error || ctx->Extensions.AMD_pinned_memory) {
          return &ctx->ExternalVirtualMemoryBuffer;
       }
       break;
-   default:
-      return NULL;
    }
    return NULL;
 }
@@ -761,7 +764,7 @@ static inline struct gl_buffer_object *
 get_buffer(struct gl_context *ctx, const char *func, GLenum target,
            GLenum error)
 {
-   struct gl_buffer_object **bufObj = get_buffer_target(ctx, target);
+   struct gl_buffer_object **bufObj = get_buffer_target(ctx, target, false);
 
    if (!bufObj) {
       _mesa_error(ctx, GL_INVALID_ENUM, "%s(target)", func);
@@ -1535,7 +1538,7 @@ _mesa_BindBuffer_no_error(GLenum target, GLuint buffer)
 {
    GET_CURRENT_CONTEXT(ctx);
 
-   struct gl_buffer_object **bindTarget = get_buffer_target(ctx, target);
+   struct gl_buffer_object **bindTarget = get_buffer_target(ctx, target, true);
    bind_buffer_object(ctx, bindTarget, buffer, true);
 }
 
@@ -1550,7 +1553,7 @@ _mesa_BindBuffer(GLenum target, GLuint buffer)
                   _mesa_enum_to_string(target), buffer);
    }
 
-   struct gl_buffer_object **bindTarget = get_buffer_target(ctx, target);
+   struct gl_buffer_object **bindTarget = get_buffer_target(ctx, target, false);
    if (!bindTarget) {
       _mesa_error(ctx, GL_INVALID_ENUM, "glBindBufferARB(target %s)",
                   _mesa_enum_to_string(target));
@@ -1565,7 +1568,7 @@ _mesa_InternalBindElementBuffer(struct gl_context *ctx,
                                 struct gl_buffer_object *buf)
 {
    struct gl_buffer_object **bindTarget =
-      get_buffer_target(ctx, GL_ELEMENT_ARRAY_BUFFER);
+      get_buffer_target(ctx, GL_ELEMENT_ARRAY_BUFFER, false);
 
    /* Move the buffer reference from the parameter to the bind point. */
    _mesa_reference_buffer_object(ctx, bindTarget, NULL);
@@ -2246,7 +2249,8 @@ inlined_buffer_storage(GLenum target, GLuint buffer, GLsizeiptr size,
       }
    } else {
       if (no_error) {
-         struct gl_buffer_object **bufObjPtr = get_buffer_target(ctx, target);
+         struct gl_buffer_object **bufObjPtr =
+            get_buffer_target(ctx, target, true);
          bufObj = *bufObjPtr;
       } else {
          bufObj = get_buffer(ctx, func, target, GL_INVALID_OPERATION);
@@ -2473,7 +2477,7 @@ _mesa_BufferData_no_error(GLenum target, GLsizeiptr size, const GLvoid *data,
 {
    GET_CURRENT_CONTEXT(ctx);
 
-   struct gl_buffer_object **bufObj = get_buffer_target(ctx, target);
+   struct gl_buffer_object **bufObj = get_buffer_target(ctx, target, true);
    buffer_data_no_error(ctx, *bufObj, target, size, data, usage,
                         "glBufferData");
 }
@@ -2622,7 +2626,7 @@ buffer_sub_data(GLenum target, GLuint buffer, GLintptr offset,
       }
    } else {
       if (no_error) {
-         struct gl_buffer_object **bufObjPtr = get_buffer_target(ctx, target);
+         struct gl_buffer_object **bufObjPtr = get_buffer_target(ctx, target, true);
          bufObj = *bufObjPtr;
       } else {
          bufObj = get_buffer(ctx, func, target, GL_INVALID_OPERATION);
@@ -2853,7 +2857,7 @@ _mesa_ClearBufferData_no_error(GLenum target, GLenum internalformat,
 {
    GET_CURRENT_CONTEXT(ctx);
 
-   struct gl_buffer_object **bufObj = get_buffer_target(ctx, target);
+   struct gl_buffer_object **bufObj = get_buffer_target(ctx, target, true);
    clear_buffer_sub_data_no_error(ctx, *bufObj, internalformat, 0,
                                   (*bufObj)->Size, format, type, data,
                                   "glClearBufferData", false);
@@ -2931,7 +2935,7 @@ _mesa_ClearBufferSubData_no_error(GLenum target, GLenum internalformat,
 {
    GET_CURRENT_CONTEXT(ctx);
 
-   struct gl_buffer_object **bufObj = get_buffer_target(ctx, target);
+   struct gl_buffer_object **bufObj = get_buffer_target(ctx, target, true);
    clear_buffer_sub_data_no_error(ctx, *bufObj, internalformat, offset, size,
                                   format, type, data, "glClearBufferSubData",
                                   true);
@@ -3076,7 +3080,7 @@ GLboolean GLAPIENTRY
 _mesa_UnmapBuffer_no_error(GLenum target)
 {
    GET_CURRENT_CONTEXT(ctx);
-   struct gl_buffer_object **bufObjPtr = get_buffer_target(ctx, target);
+   struct gl_buffer_object **bufObjPtr = get_buffer_target(ctx, target, true);
    struct gl_buffer_object *bufObj = *bufObjPtr;
 
    return unmap_buffer(ctx, bufObj);
@@ -3422,10 +3426,10 @@ _mesa_CopyBufferSubData_no_error(GLenum readTarget, GLenum writeTarget,
 {
    GET_CURRENT_CONTEXT(ctx);
 
-   struct gl_buffer_object **src_ptr = get_buffer_target(ctx, readTarget);
+   struct gl_buffer_object **src_ptr = get_buffer_target(ctx, readTarget, true);
    struct gl_buffer_object *src = *src_ptr;
 
-   struct gl_buffer_object **dst_ptr = get_buffer_target(ctx, writeTarget);
+   struct gl_buffer_object **dst_ptr = get_buffer_target(ctx, writeTarget, true);
    struct gl_buffer_object *dst = *dst_ptr;
 
    bufferobj_copy_subdata(ctx, src, dst, readOffset, writeOffset,
@@ -3754,7 +3758,7 @@ _mesa_MapBufferRange_no_error(GLenum target, GLintptr offset,
 {
    GET_CURRENT_CONTEXT(ctx);
 
-   struct gl_buffer_object **bufObjPtr = get_buffer_target(ctx, target);
+   struct gl_buffer_object **bufObjPtr = get_buffer_target(ctx, target, true);
    struct gl_buffer_object *bufObj = *bufObjPtr;
 
    return map_buffer_range(ctx, bufObj, offset, length, access,
@@ -3882,7 +3886,7 @@ _mesa_MapBuffer_no_error(GLenum target, GLenum access)
    GLbitfield accessFlags;
    get_map_buffer_access_flags(ctx, access, &accessFlags);
 
-   struct gl_buffer_object **bufObjPtr = get_buffer_target(ctx, target);
+   struct gl_buffer_object **bufObjPtr = get_buffer_target(ctx, target, true);
    struct gl_buffer_object *bufObj = *bufObjPtr;
 
    return map_buffer_range(ctx, bufObj, 0, bufObj->Size, accessFlags,
@@ -4037,7 +4041,7 @@ _mesa_FlushMappedBufferRange_no_error(GLenum target, GLintptr offset,
                                       GLsizeiptr length)
 {
    GET_CURRENT_CONTEXT(ctx);
-   struct gl_buffer_object **bufObjPtr = get_buffer_target(ctx, target);
+   struct gl_buffer_object **bufObjPtr = get_buffer_target(ctx, target, true);
    struct gl_buffer_object *bufObj = *bufObjPtr;
 
    _mesa_bufferobj_flush_mapped_range(ctx, offset, length, bufObj,
-- 
GitLab


From 79cc83da2e3226d3d8f9195b0d47e5d3ec562df0 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Fri, 18 Nov 2022 05:13:42 -0500
Subject: [PATCH 3/3] mesa: add unlikely() and adjust error handling in
 BindBuffer

---
 src/mesa/main/bufferobj.c | 17 ++++++++---------
 1 file changed, 8 insertions(+), 9 deletions(-)

diff --git a/src/mesa/main/bufferobj.c b/src/mesa/main/bufferobj.c
index b21328596fdf..bdc8c10f7397 100644
--- a/src/mesa/main/bufferobj.c
+++ b/src/mesa/main/bufferobj.c
@@ -1296,20 +1296,19 @@ handle_bind_buffer_gen(struct gl_context *ctx,
 {
    struct gl_buffer_object *buf = *buf_handle;
 
-   if (!no_error && !buf && (ctx->API == API_OPENGL_CORE)) {
+   if (unlikely(!no_error && !buf && (ctx->API == API_OPENGL_CORE))) {
       _mesa_error(ctx, GL_INVALID_OPERATION, "%s(non-gen name)", caller);
       return false;
    }
 
-   if (!buf || buf == &DummyBufferObject) {
+   if (unlikely(!buf || buf == &DummyBufferObject)) {
       /* If this is a new buffer object id, or one which was generated but
        * never used before, allocate a buffer object now.
        */
       *buf_handle = new_gl_buffer_object(ctx, buffer);
-      if (!*buf_handle) {
-         if (!no_error)
-            _mesa_error(ctx, GL_OUT_OF_MEMORY, "%s", caller);
-	 return false;
+      if (!no_error && !*buf_handle) {
+         _mesa_error(ctx, GL_OUT_OF_MEMORY, "%s", caller);
+         return false;
       }
       _mesa_HashLockMaybeLocked(ctx->Shared->BufferObjects,
                                 ctx->BufferObjectsLocked);
@@ -1363,13 +1362,13 @@ bind_buffer_object(struct gl_context *ctx,
    /* Get pointer to old buffer object (to be unbound) */
    oldBufObj = *bindTarget;
    GLuint old_name = oldBufObj && !oldBufObj->DeletePending ? oldBufObj->Name : 0;
-   if (old_name == buffer)
+   if (unlikely(old_name == buffer))
       return;   /* rebinding the same buffer object- no change */
 
    newBufObj = _mesa_lookup_bufferobj(ctx, buffer);
    /* Get a new buffer object if it hasn't been created. */
-   if (!handle_bind_buffer_gen(ctx, buffer, &newBufObj, "glBindBuffer",
-                               no_error))
+   if (unlikely(!handle_bind_buffer_gen(ctx, buffer, &newBufObj, "glBindBuffer",
+                                        no_error)))
       return;
 
    /* At this point, the compiler should deduce that newBufObj is non-NULL if
-- 
GitLab

