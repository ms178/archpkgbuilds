From 9fced76914550d9d6dd9813c1d72f09f3a569767 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Timur=20Krist=C3=B3f?= <timur.kristof@gmail.com>
Date: Mon, 26 Feb 2024 14:35:48 +0100
Subject: [PATCH 1/5] nir/divergence_analysis: Add mode enum instead of bool
 for vertex divergence.

---
 src/compiler/nir/nir_divergence_analysis.c | 38 ++++++++++++++--------
 1 file changed, 25 insertions(+), 13 deletions(-)

diff --git a/src/compiler/nir/nir_divergence_analysis.c b/src/compiler/nir/nir_divergence_analysis.c
index b5f96e0b1c1ee..fac15975a110e 100644
--- a/src/compiler/nir/nir_divergence_analysis.c
+++ b/src/compiler/nir/nir_divergence_analysis.c
@@ -36,9 +36,11 @@
  * ACM, 2013, 35 (4), pp.13:1-13:36. <10.1145/2523815>. <hal-00909072v2>
  */
 
-struct divergence_state {
-   const gl_shader_stage stage;
-   nir_shader *shader;
+enum divergence_mode {
+   /* The default mode.
+    * Examines divergence between different invocations of the same subgroup.
+    */
+   divergence_mode_subgroup,
 
    /* Whether the caller requested vertex divergence (meaning between vertices
     * of the same primitive) instead of subgroup invocation divergence
@@ -47,7 +49,13 @@ struct divergence_state {
     * because vertices of the same primitive can be processed by different
     * subgroups.
     */
-   bool vertex_divergence;
+   divergence_mode_vertex,
+};
+
+struct divergence_state {
+   const gl_shader_stage stage;
+   enum divergence_mode mode;
+   nir_shader *shader;
 
    /** current control flow state */
    /* True if some loop-active invocations might take a different control-flow path.
@@ -98,7 +106,9 @@ visit_intrinsic(nir_intrinsic_instr *instr, struct divergence_state *state)
    nir_divergence_options options =
       state->shader->options->divergence_analysis_options;
    gl_shader_stage stage = state->stage;
+   const bool vertex_divergence = state->mode == divergence_mode_vertex;
    bool is_divergent = false;
+
    switch (instr->intrinsic) {
    case nir_intrinsic_shader_clock:
    case nir_intrinsic_ballot:
@@ -117,7 +127,7 @@ visit_intrinsic(nir_intrinsic_instr *instr, struct divergence_state *state)
        * subgroups, so subgroup ops are always divergent between vertices of
        * the same primitive.
        */
-      is_divergent = state->vertex_divergence;
+      is_divergent = vertex_divergence;
       break;
 
    /* Intrinsics which are always uniform */
@@ -258,7 +268,7 @@ visit_intrinsic(nir_intrinsic_instr *instr, struct divergence_state *state)
          is_divergent |= !(options & nir_divergence_single_prim_per_subgroup);
       } else if (stage == MESA_SHADER_TESS_EVAL) {
          /* Patch input loads are uniform between vertices of the same primitive. */
-         if (state->vertex_divergence)
+         if (vertex_divergence)
             is_divergent = false;
          else
             is_divergent |= !(options & nir_divergence_single_patch_per_tes_subgroup);
@@ -332,19 +342,19 @@ visit_intrinsic(nir_intrinsic_instr *instr, struct divergence_state *state)
       is_divergent |= !(options & nir_divergence_single_prim_per_subgroup);
       break;
    case nir_intrinsic_load_instance_id:
-      is_divergent = !state->vertex_divergence;
+      is_divergent = !vertex_divergence;
       break;
    case nir_intrinsic_load_primitive_id:
       if (stage == MESA_SHADER_FRAGMENT)
          is_divergent = !(options & nir_divergence_single_prim_per_subgroup);
       else if (stage == MESA_SHADER_TESS_CTRL)
-         is_divergent = !state->vertex_divergence &&
+         is_divergent = !vertex_divergence &&
                         !(options & nir_divergence_single_patch_per_tcs_subgroup);
       else if (stage == MESA_SHADER_TESS_EVAL)
-         is_divergent = !state->vertex_divergence &&
+         is_divergent = !vertex_divergence &&
                         !(options & nir_divergence_single_patch_per_tes_subgroup);
       else if (stage == MESA_SHADER_GEOMETRY || stage == MESA_SHADER_VERTEX)
-         is_divergent = !state->vertex_divergence;
+         is_divergent = !vertex_divergence;
       else if (stage == MESA_SHADER_ANY_HIT ||
                stage == MESA_SHADER_CLOSEST_HIT ||
                stage == MESA_SHADER_INTERSECTION)
@@ -382,13 +392,13 @@ visit_intrinsic(nir_intrinsic_instr *instr, struct divergence_state *state)
           * vertices of the same primitive because they may be in
           * different subgroups.
           */
-         is_divergent = state->vertex_divergence;
+         is_divergent = vertex_divergence;
          break;
       }
       FALLTHROUGH;
    case nir_intrinsic_inclusive_scan: {
       nir_op op = nir_intrinsic_reduction_op(instr);
-      is_divergent = instr->src[0].ssa->divergent || state->vertex_divergence;
+      is_divergent = instr->src[0].ssa->divergent || vertex_divergence;
       if (op != nir_op_umin && op != nir_op_imin && op != nir_op_fmin &&
           op != nir_op_umax && op != nir_op_imax && op != nir_op_fmax &&
           op != nir_op_iand && op != nir_op_ior)
@@ -1123,6 +1133,7 @@ nir_divergence_analysis(nir_shader *shader)
 
    struct divergence_state state = {
       .stage = shader->info.stage,
+      .mode = divergence_mode_subgroup,
       .shader = shader,
       .divergent_loop_cf = false,
       .divergent_loop_continue = false,
@@ -1144,8 +1155,8 @@ nir_vertex_divergence_analysis(nir_shader *shader)
 
    struct divergence_state state = {
       .stage = shader->info.stage,
+      .mode = divergence_mode_vertex,
       .shader = shader,
-      .vertex_divergence = true,
       .first_visit = true,
    };
 
@@ -1170,6 +1181,7 @@ nir_update_instr_divergence(nir_shader *shader, nir_instr *instr)
    }
 
    struct divergence_state state = {
+      .mode = divergence_mode_subgroup,
       .stage = shader->info.stage,
       .shader = shader,
       .first_visit = true,
-- 
GitLab


From 0e46e7ecbb1e3fa704cc58f30cf99a5db38f8445 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Timur=20Krist=C3=B3f?= <timur.kristof@gmail.com>
Date: Thu, 7 Mar 2024 14:36:52 +0100
Subject: [PATCH 2/5] nir/divergence_analysis: Extract
 any_intrin_srcs_divergent function.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Timur Kristóf <timur.kristof@gmail.com>
---
 src/compiler/nir/nir_divergence_analysis.c | 21 ++++++++++++++-------
 1 file changed, 14 insertions(+), 7 deletions(-)

diff --git a/src/compiler/nir/nir_divergence_analysis.c b/src/compiler/nir/nir_divergence_analysis.c
index fac15975a110e..23c3e808c990a 100644
--- a/src/compiler/nir/nir_divergence_analysis.c
+++ b/src/compiler/nir/nir_divergence_analysis.c
@@ -94,6 +94,19 @@ visit_alu(nir_alu_instr *instr, struct divergence_state *state)
    return false;
 }
 
+static bool
+any_intrin_srcs_divergent(nir_intrinsic_instr *intrin)
+{
+   const unsigned num_srcs = nir_intrinsic_infos[intrin->intrinsic].num_srcs;
+
+   for (unsigned i = 0; i < num_srcs; i++) {
+      if (intrin->src[i].ssa->divergent)
+         return true;
+   }
+
+   return false;
+}
+
 static bool
 visit_intrinsic(nir_intrinsic_instr *instr, struct divergence_state *state)
 {
@@ -510,13 +523,7 @@ visit_intrinsic(nir_intrinsic_instr *instr, struct divergence_state *state)
    case nir_intrinsic_resource_intel:
    case nir_intrinsic_load_reg:
    case nir_intrinsic_load_reg_indirect: {
-      unsigned num_srcs = nir_intrinsic_infos[instr->intrinsic].num_srcs;
-      for (unsigned i = 0; i < num_srcs; i++) {
-         if (instr->src[i].ssa->divergent) {
-            is_divergent = true;
-            break;
-         }
-      }
+      is_divergent = any_intrin_srcs_divergent(instr);
       break;
    }
 
-- 
GitLab


From 35bcbe734fefb993d95a6905c310f090f73e9c43 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Timur=20Krist=C3=B3f?= <timur.kristof@gmail.com>
Date: Mon, 26 Feb 2024 15:19:56 +0100
Subject: [PATCH 3/5] nir: Add nir_workgroup_divergence_analysis.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Computes divergence between invocations of the same workgroup.
(As opposed to between invocations of the same subgroup.)
This uses the same divergent field in nir_def and nir_loop
as the regular divergence pass.

Signed-off-by: Timur Kristóf <timur.kristof@gmail.com>
---
 src/compiler/nir/nir.h                     |  1 +
 src/compiler/nir/nir_divergence_analysis.c | 90 ++++++++++++++++------
 2 files changed, 69 insertions(+), 22 deletions(-)

diff --git a/src/compiler/nir/nir.h b/src/compiler/nir/nir.h
index 6053764b7716c..ddbd3987bd088 100644
--- a/src/compiler/nir/nir.h
+++ b/src/compiler/nir/nir.h
@@ -6256,6 +6256,7 @@ void nir_convert_loop_to_lcssa(nir_loop *loop);
 bool nir_convert_to_lcssa(nir_shader *shader, bool skip_invariants, bool skip_bool_invariants);
 void nir_divergence_analysis(nir_shader *shader);
 void nir_vertex_divergence_analysis(nir_shader *shader);
+void nir_workgroup_divergence_analysis(nir_shader *shader);
 bool nir_update_instr_divergence(nir_shader *shader, nir_instr *instr);
 bool nir_has_divergent_loop(nir_shader *shader);
 
diff --git a/src/compiler/nir/nir_divergence_analysis.c b/src/compiler/nir/nir_divergence_analysis.c
index 23c3e808c990a..8a0152acc5e67 100644
--- a/src/compiler/nir/nir_divergence_analysis.c
+++ b/src/compiler/nir/nir_divergence_analysis.c
@@ -50,6 +50,12 @@ enum divergence_mode {
     * subgroups.
     */
    divergence_mode_vertex,
+
+   /* Examines divergence between different invocations of the same workgroup.
+    * A definition is considered workgroup-uniform when all invocations within
+    * the workgroup have the same value, and workgroup-divergent otherwise.
+    */
+   divergence_mode_workgroup,
 };
 
 struct divergence_state {
@@ -120,27 +126,40 @@ visit_intrinsic(nir_intrinsic_instr *instr, struct divergence_state *state)
       state->shader->options->divergence_analysis_options;
    gl_shader_stage stage = state->stage;
    const bool vertex_divergence = state->mode == divergence_mode_vertex;
+   const bool workgroup_divergence = state->mode == divergence_mode_workgroup;
    bool is_divergent = false;
 
    switch (instr->intrinsic) {
-   case nir_intrinsic_shader_clock:
-   case nir_intrinsic_ballot:
-   case nir_intrinsic_ballot_relaxed:
    case nir_intrinsic_as_uniform:
    case nir_intrinsic_read_invocation:
    case nir_intrinsic_read_first_invocation:
+   case nir_intrinsic_first_invocation:
+   case nir_intrinsic_last_invocation:
+      if (workgroup_divergence) {
+         /* These intrinsics are only divergent within a workgroup
+          * when any of their sources are divergent.
+          */
+         is_divergent = any_intrin_srcs_divergent(instr);
+         break;
+      }
+      FALLTHROUGH;
+
+   case nir_intrinsic_ballot:
+   case nir_intrinsic_ballot_relaxed:
    case nir_intrinsic_vote_any:
    case nir_intrinsic_vote_all:
    case nir_intrinsic_vote_feq:
    case nir_intrinsic_vote_ieq:
-   case nir_intrinsic_first_invocation:
-   case nir_intrinsic_last_invocation:
    case nir_intrinsic_load_subgroup_id:
+   case nir_intrinsic_shader_clock:
       /* VS/TES/GS invocations of the same primitive can be in different
        * subgroups, so subgroup ops are always divergent between vertices of
        * the same primitive.
+       *
+       * These are also workgroup-divergent, because a workgroup may
+       * contain multiple subgroups.
        */
-      is_divergent = vertex_divergence;
+      is_divergent = vertex_divergence || workgroup_divergence;
       break;
 
    /* Intrinsics which are always uniform */
@@ -272,19 +291,19 @@ visit_intrinsic(nir_intrinsic_instr *instr, struct divergence_state *state)
       is_divergent = !(options & nir_divergence_shader_record_ptr_uniform);
       break;
    case nir_intrinsic_load_frag_shading_rate:
-      is_divergent = !(options & nir_divergence_single_frag_shading_rate_per_subgroup);
+      is_divergent = !(options & nir_divergence_single_frag_shading_rate_per_subgroup) || workgroup_divergence;
       break;
    case nir_intrinsic_load_input:
       is_divergent = instr->src[0].ssa->divergent;
 
       if (stage == MESA_SHADER_FRAGMENT) {
-         is_divergent |= !(options & nir_divergence_single_prim_per_subgroup);
+         is_divergent |= !(options & nir_divergence_single_prim_per_subgroup) || workgroup_divergence;
       } else if (stage == MESA_SHADER_TESS_EVAL) {
          /* Patch input loads are uniform between vertices of the same primitive. */
          if (vertex_divergence)
             is_divergent = false;
          else
-            is_divergent |= !(options & nir_divergence_single_patch_per_tes_subgroup);
+            is_divergent |= !(options & nir_divergence_single_patch_per_tes_subgroup) || workgroup_divergence;
       } else {
          is_divergent = true;
       }
@@ -293,22 +312,22 @@ visit_intrinsic(nir_intrinsic_instr *instr, struct divergence_state *state)
       is_divergent = instr->src[0].ssa->divergent ||
                      instr->src[1].ssa->divergent;
       if (stage == MESA_SHADER_TESS_CTRL)
-         is_divergent |= !(options & nir_divergence_single_patch_per_tcs_subgroup);
+         is_divergent |= !(options & nir_divergence_single_patch_per_tcs_subgroup) || workgroup_divergence;
       if (stage == MESA_SHADER_TESS_EVAL)
-         is_divergent |= !(options & nir_divergence_single_patch_per_tes_subgroup);
+         is_divergent |= !(options & nir_divergence_single_patch_per_tes_subgroup) || workgroup_divergence;
       else
          is_divergent = true;
       break;
    case nir_intrinsic_load_input_vertex:
       is_divergent = instr->src[1].ssa->divergent;
       assert(stage == MESA_SHADER_FRAGMENT);
-      is_divergent |= !(options & nir_divergence_single_prim_per_subgroup);
+      is_divergent |= !(options & nir_divergence_single_prim_per_subgroup) || workgroup_divergence;
       break;
    case nir_intrinsic_load_output:
       is_divergent = instr->src[0].ssa->divergent;
       switch (stage) {
       case MESA_SHADER_TESS_CTRL:
-         is_divergent |= !(options & nir_divergence_single_patch_per_tcs_subgroup);
+         is_divergent |= !(options & nir_divergence_single_patch_per_tcs_subgroup) || workgroup_divergence;
          break;
       case MESA_SHADER_FRAGMENT:
          is_divergent = true;
@@ -329,7 +348,7 @@ visit_intrinsic(nir_intrinsic_instr *instr, struct divergence_state *state)
       is_divergent = instr->src[0].ssa->divergent ||
                      instr->src[1].ssa->divergent ||
                      (stage == MESA_SHADER_TESS_CTRL &&
-                      !(options & nir_divergence_single_patch_per_tcs_subgroup));
+                      (!(options & nir_divergence_single_patch_per_tcs_subgroup) || workgroup_divergence));
       break;
    case nir_intrinsic_load_per_primitive_output:
       /* NV_mesh_shader only (EXT_mesh_shader does not allow loading outputs). */
@@ -340,24 +359,29 @@ visit_intrinsic(nir_intrinsic_instr *instr, struct divergence_state *state)
    case nir_intrinsic_load_layer_id:
    case nir_intrinsic_load_front_face:
       assert(stage == MESA_SHADER_FRAGMENT);
-      is_divergent = !(options & nir_divergence_single_prim_per_subgroup);
+      is_divergent = !(options & nir_divergence_single_prim_per_subgroup) || workgroup_divergence;
       break;
    case nir_intrinsic_load_view_index:
       assert(stage != MESA_SHADER_COMPUTE && stage != MESA_SHADER_KERNEL);
       if (options & nir_divergence_view_index_uniform)
          is_divergent = false;
       else if (stage == MESA_SHADER_FRAGMENT)
-         is_divergent = !(options & nir_divergence_single_prim_per_subgroup);
+         is_divergent = !(options & nir_divergence_single_prim_per_subgroup) || workgroup_divergence;
       break;
    case nir_intrinsic_load_fs_input_interp_deltas:
       assert(stage == MESA_SHADER_FRAGMENT);
       is_divergent = instr->src[0].ssa->divergent;
-      is_divergent |= !(options & nir_divergence_single_prim_per_subgroup);
+      is_divergent |= !(options & nir_divergence_single_prim_per_subgroup) || workgroup_divergence;
       break;
    case nir_intrinsic_load_instance_id:
       is_divergent = !vertex_divergence;
       break;
    case nir_intrinsic_load_primitive_id:
+      if (workgroup_divergence) {
+         is_divergent = true;
+         break;
+      }
+
       if (stage == MESA_SHADER_FRAGMENT)
          is_divergent = !(options & nir_divergence_single_prim_per_subgroup);
       else if (stage == MESA_SHADER_TESS_CTRL)
@@ -378,9 +402,9 @@ visit_intrinsic(nir_intrinsic_instr *instr, struct divergence_state *state)
    case nir_intrinsic_load_tess_level_inner:
    case nir_intrinsic_load_tess_level_outer:
       if (stage == MESA_SHADER_TESS_CTRL)
-         is_divergent = !(options & nir_divergence_single_patch_per_tcs_subgroup);
+         is_divergent = !(options & nir_divergence_single_patch_per_tcs_subgroup) || workgroup_divergence;
       else if (stage == MESA_SHADER_TESS_EVAL)
-         is_divergent = !(options & nir_divergence_single_patch_per_tes_subgroup);
+         is_divergent = !(options & nir_divergence_single_patch_per_tes_subgroup) || workgroup_divergence;
       else
          unreachable("Invalid stage for load_primitive_tess_level_*");
       break;
@@ -389,7 +413,7 @@ visit_intrinsic(nir_intrinsic_instr *instr, struct divergence_state *state)
    case nir_intrinsic_load_workgroup_id:
    case nir_intrinsic_load_workgroup_id_zero_base:
       assert(gl_shader_stage_uses_workgroup(stage));
-      if (stage == MESA_SHADER_COMPUTE)
+      if (stage == MESA_SHADER_COMPUTE && !workgroup_divergence)
          is_divergent |= (options & nir_divergence_multiple_workgroup_per_compute_subgroup);
       break;
 
@@ -404,14 +428,17 @@ visit_intrinsic(nir_intrinsic_instr *instr, struct divergence_state *state)
           * This is uniform within a subgroup, but divergent between
           * vertices of the same primitive because they may be in
           * different subgroups.
+          *
+          * Also consider them workgroup-divergent because not all
+          * subgroups within a workgroup may be full.
           */
-         is_divergent = vertex_divergence;
+         is_divergent = vertex_divergence || workgroup_divergence;
          break;
       }
       FALLTHROUGH;
    case nir_intrinsic_inclusive_scan: {
       nir_op op = nir_intrinsic_reduction_op(instr);
-      is_divergent = instr->src[0].ssa->divergent || vertex_divergence;
+      is_divergent = instr->src[0].ssa->divergent || vertex_divergence || workgroup_divergence;
       if (op != nir_op_umin && op != nir_op_imin && op != nir_op_fmin &&
           op != nir_op_umax && op != nir_op_imax && op != nir_op_fmax &&
           op != nir_op_iand && op != nir_op_ior)
@@ -1170,6 +1197,25 @@ nir_vertex_divergence_analysis(nir_shader *shader)
    visit_cf_list(&nir_shader_get_entrypoint(shader)->body, &state);
 }
 
+/* Compute divergence between invocations of the same workgroup. This uses
+ * the same divergent field in nir_def and nir_loop as the regular divergence
+ * pass.
+ */
+void
+nir_workgroup_divergence_analysis(nir_shader *shader)
+{
+   shader->info.divergence_analysis_run = false;
+
+   struct divergence_state state = {
+      .stage = shader->info.stage,
+      .shader = shader,
+      .mode = divergence_mode_workgroup,
+      .first_visit = true,
+   };
+
+   visit_cf_list(&nir_shader_get_entrypoint(shader)->body, &state);
+}
+
 bool
 nir_update_instr_divergence(nir_shader *shader, nir_instr *instr)
 {
-- 
GitLab


From 331412b8a6ed664a6b5fed81adc1027fb1f95e65 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Timur=20Krist=C3=B3f?= <timur.kristof@gmail.com>
Date: Mon, 26 Feb 2024 16:20:50 +0100
Subject: [PATCH 4/5] ac/nir/ngg: Remember if a mesh shader has non-API waves.

---
 src/amd/common/ac_nir_lower_ngg.c | 13 +++++++++----
 1 file changed, 9 insertions(+), 4 deletions(-)

diff --git a/src/amd/common/ac_nir_lower_ngg.c b/src/amd/common/ac_nir_lower_ngg.c
index b71cfcb5080c1..99a82a470b60c 100644
--- a/src/amd/common/ac_nir_lower_ngg.c
+++ b/src/amd/common/ac_nir_lower_ngg.c
@@ -216,6 +216,8 @@ typedef struct
    nir_variable *primitive_count_var;
    nir_variable *vertex_count_var;
 
+   /* True if the shader has waves that don't execute the API shader at all. */
+   bool has_non_api_waves;
    /* True if the lowering needs to insert the layer output. */
    bool insert_layer_output;
    /* True if cull flags are used */
@@ -4667,12 +4669,15 @@ handle_smaller_ms_api_workgroup(nir_builder *b,
     *    barrier on the extra waves.
     */
    assert(s->hw_workgroup_size % s->wave_size == 0);
-   bool scan_barriers = ALIGN(s->api_workgroup_size, s->wave_size) < s->hw_workgroup_size;
-   bool can_shrink_barriers = s->api_workgroup_size <= s->wave_size;
+   const unsigned num_api_waves = DIV_ROUND_UP(s->api_workgroup_size, s->wave_size);
+   const unsigned num_hw_waves = DIV_ROUND_UP(s->hw_workgroup_size, s->wave_size);
+   const bool scan_barriers = num_api_waves < num_hw_waves;
+   const bool can_shrink_barriers = s->api_workgroup_size <= s->wave_size;
+
    bool need_additional_barriers = scan_barriers && !can_shrink_barriers;
+   const unsigned api_waves_in_flight_addr = s->layout.lds.workgroup_info_addr + lds_ms_num_api_waves;
 
-   unsigned api_waves_in_flight_addr = s->layout.lds.workgroup_info_addr + lds_ms_num_api_waves;
-   unsigned num_api_waves = DIV_ROUND_UP(s->api_workgroup_size, s->wave_size);
+   s->has_non_api_waves = scan_barriers;
 
    /* Scan the shader for workgroup barriers. */
    if (scan_barriers) {
-- 
GitLab


From 1c4a1659d8b596c1a0ccff339f786fcdaf476152 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Timur=20Krist=C3=B3f?= <timur.kristof@gmail.com>
Date: Mon, 26 Feb 2024 15:35:56 +0100
Subject: [PATCH 5/5] ac/nir/ngg: Use workgroup divergence analysis for mesh
 output counts.

---
 src/amd/common/ac_nir_lower_ngg.c | 33 +++++++++++++++++++++++--------
 1 file changed, 25 insertions(+), 8 deletions(-)

diff --git a/src/amd/common/ac_nir_lower_ngg.c b/src/amd/common/ac_nir_lower_ngg.c
index 99a82a470b60c..a2cc1dd55a1e4 100644
--- a/src/amd/common/ac_nir_lower_ngg.c
+++ b/src/amd/common/ac_nir_lower_ngg.c
@@ -222,6 +222,8 @@ typedef struct
    bool insert_layer_output;
    /* True if cull flags are used */
    bool uses_cull_flags;
+   /* True if the output vertex and primitive counts are workgroup-uniform. */
+   bool output_counts_workgroup_uniform;
 
    struct {
       /* Bitmask of components used: 4 bits per slot, 1 bit per component. */
@@ -4026,6 +4028,10 @@ lower_ms_set_vertex_and_primitive_count(nir_builder *b,
                                         nir_intrinsic_instr *intrin,
                                         lower_ngg_ms_state *s)
 {
+   /* Remember if the output vertex and primitive counts are both workgroup-uniform. */
+   s->output_counts_workgroup_uniform =
+      !intrin->src[0].ssa->divergent && !intrin->src[1].ssa->divergent;
+
    /* If either the number of vertices or primitives is zero, set both of them to zero. */
    nir_def *num_vtx = nir_read_first_invocation(b, intrin->src[0].ssa);
    nir_def *num_prm = nir_read_first_invocation(b, intrin->src[1].ssa);
@@ -4235,21 +4241,30 @@ set_ms_final_output_counts(nir_builder *b,
    nir_def *num_prm = nir_load_var(b, s->primitive_count_var);
    nir_def *num_vtx = nir_load_var(b, s->vertex_count_var);
 
-   if (s->hw_workgroup_size <= s->wave_size) {
-      /* Single-wave mesh shader workgroup. */
+   const bool one_subgroup = s->hw_workgroup_size <= s->wave_size;
+
+   if (one_subgroup || (s->output_counts_workgroup_uniform && !s->has_non_api_waves)) {
+      /* Shortcut for the following two use cases:
+       * - When the output counts are known to be workgroup-uniform
+           and all waves execute the API shader,
+       * - When we know the mesh shader only has one subgroup.
+       */
+      nir_if *if_wave_0 = NULL;
+      if (!one_subgroup)
+         if_wave_0 = nir_push_if(b, nir_ieq_imm(b, nir_load_subgroup_id(b), 0));
+
       alloc_vertices_and_primitives(b, num_vtx, num_prm);
+
+      if (!one_subgroup)
+         nir_pop_if(b, if_wave_0);
+
       *out_num_prm = num_prm;
       *out_num_vtx = num_vtx;
       return;
    }
 
-   /* Multi-wave mesh shader workgroup:
+   /* Multi-wave mesh shader workgroup with workgroup-divergent output counts:
     * We need to use LDS to distribute the correct values to the other waves.
-    *
-    * TODO:
-    * If we can prove that the values are workgroup-uniform, we can skip this
-    * and just use whatever the current wave has. However, NIR divergence analysis
-    * currently doesn't support this.
     */
 
    nir_def *zero = nir_imm_int(b, 0);
@@ -4967,6 +4982,8 @@ ac_nir_lower_ngg_ms(nir_shader *shader,
                                  shader->info.workgroup_size[1] *
                                  shader->info.workgroup_size[2];
 
+   nir_workgroup_divergence_analysis(shader);
+
    lower_ngg_ms_state state = {
       .layout = layout,
       .wave_size = wave_size,
-- 
GitLab

