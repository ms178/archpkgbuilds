From 862641bd6b15782f3621b55277b7ccaa6ac0070d Mon Sep 17 00:00:00 2001
From: Georg Lehmann <dadschoorse@gmail.com>
Date: Sat, 8 Jun 2024 20:18:12 +0200
Subject: [PATCH 1/6] aco/operands: add type info for ALU instructions

---
 src/amd/compiler/aco_ir.cpp       |   95 ++
 src/amd/compiler/aco_ir.h         |    7 +
 src/amd/compiler/aco_opcodes.py   | 1423 +++++++++++++++--------------
 src/amd/compiler/aco_opcodes_h.py |   11 +-
 src/amd/compiler/aco_validate.cpp |   40 +-
 5 files changed, 867 insertions(+), 709 deletions(-)

diff --git a/src/amd/compiler/aco_ir.cpp b/src/amd/compiler/aco_ir.cpp
index b51e30cd2ee15..36a1ff80a8cc1 100644
--- a/src/amd/compiler/aco_ir.cpp
+++ b/src/amd/compiler/aco_ir.cpp
@@ -833,6 +833,101 @@ get_operand_size(aco_ptr<Instruction>& instr, unsigned index)
       return 0;
 }
 
+aco_type
+get_operand_type(Instruction* instr, unsigned index)
+{
+   assert(index < 4);
+   if (instr->opcode == aco_opcode::v_fma_mix_f32 || instr->opcode == aco_opcode::v_fma_mixlo_f16 ||
+       instr->opcode == aco_opcode::v_fma_mixhi_f16)
+      return instr->valu().opsel_hi[index] ? type_f16 : type_f32;
+   return (aco_type)((instr_info.operands[(int)instr->opcode] >> (index * 8)) & 0x7f);
+}
+
+aco_type
+get_definition_type(enum amd_gfx_level gfx_level, Instruction* instr, unsigned index)
+{
+   assert(index < 4);
+   uint32_t packed = instr_info.definitions[(int)instr->opcode];
+   /* Before GFX10 v_cmpx also writes VCC. */
+   if (instr->isVOPC() && packed == type_exec && gfx_level < GFX10)
+      packed = type_vcc | (type_exec << 8);
+   return (aco_type)((packed >> (index * 8)) & 0x7f);
+}
+
+unsigned
+type_get_constant_size(aco_type t)
+{
+   switch (t) {
+   case type_invalid:
+   case type_pk_f32:
+   case type_u128:
+   case type_f8:
+   case type_bf8:
+   case type_pk_f8:
+   case type_pk_bf8:
+   case type_pk4_f8:
+   case type_pk4_bf8:
+   case type_vcc:
+   case type_exec:
+   case type_exec_lo:
+   case type_m0:
+   case type_scc: return 0;
+   case type_imm:
+   case type_u16: /* uses 32bit inline contants. */
+   case type_pk_u16:
+   case type_u32:
+   case type_f32: return 32;
+   case type_pk_f16:
+   case type_pk_bf16:
+   case type_f16:
+   case type_bf16: return 16;
+   case type_i64:
+   case type_u64:
+   case type_f64: return 64;
+   }
+   return 0;
+}
+
+unsigned
+type_get_bytes(aco_type t)
+{
+   switch (t) {
+   case type_invalid:
+   case type_vcc:
+   case type_exec:
+   case type_exec_lo:
+   case type_m0:
+   case type_scc:
+   case type_imm: return 0;
+   case type_f8:
+   case type_bf8: return 1;
+   case type_pk_f8:
+   case type_pk_bf8:
+   case type_f16:
+   case type_bf16:
+   case type_u16: return 2;
+   case type_pk4_f8:
+   case type_pk4_bf8:
+   case type_pk_f16:
+   case type_pk_bf16:
+   case type_pk_u16:
+   case type_u32:
+   case type_f32: return 4;
+   case type_pk_f32:
+   case type_i64:
+   case type_u64:
+   case type_f64: return 8;
+   case type_u128: return 16;
+   }
+   return 0;
+}
+
+unsigned
+type_get_dwords(aco_type t)
+{
+   return DIV_ROUND_UP(type_get_bytes(t), 4);
+}
+
 bool
 needs_exec_mask(const Instruction* instr)
 {
diff --git a/src/amd/compiler/aco_ir.h b/src/amd/compiler/aco_ir.h
index aa3c4bb996c7c..6e73a401d1ed9 100644
--- a/src/amd/compiler/aco_ir.h
+++ b/src/amd/compiler/aco_ir.h
@@ -1767,6 +1767,13 @@ unsigned get_vopd_opy_start(const Instruction* instr);
 
 unsigned get_operand_size(aco_ptr<Instruction>& instr, unsigned index);
 
+aco_type get_operand_type(Instruction* instr, unsigned index);
+aco_type get_definition_type(enum amd_gfx_level gfx_level, Instruction* instr, unsigned index);
+
+unsigned type_get_constant_size(aco_type t);
+unsigned type_get_bytes(aco_type t);
+unsigned type_get_dwords(aco_type t);
+
 bool should_form_clause(const Instruction* a, const Instruction* b);
 
 enum vmem_type : uint8_t {
diff --git a/src/amd/compiler/aco_opcodes.py b/src/amd/compiler/aco_opcodes.py
index 816c59464dd3d..e918af60b7698 100644
--- a/src/amd/compiler/aco_opcodes.py
+++ b/src/amd/compiler/aco_opcodes.py
@@ -272,12 +272,61 @@ class Instruction(object):
         self.operand_size = 32
 
 
-# Matches PhysReg
-VCC = 106
-M0 = 124
-EXEC_LO = 126
-EXEC = 127 # Some instructins only write lo, so use exec_hi encoding here
-SCC = 253
+class OperandType(IntEnum):
+   type_invalid = 0
+   type_vcc = auto()
+   type_m0 = auto()
+   type_exec_lo = auto()
+   type_exec = auto()
+   type_scc = auto()
+   type_imm = auto()
+   type_u16 = auto()
+   type_u32 = auto()
+   type_u64 = auto()
+   type_u128 = auto()
+   type_i64 = auto()
+   type_f8 = auto()
+   type_f16 = auto()
+   type_f32 = auto()
+   type_f64 = auto()
+   type_bf8 = auto()
+   type_bf16 = auto()
+   type_pk_f8 = auto()
+   type_pk4_f8 = auto()
+   type_pk_f16 = auto()
+   type_pk_f32 = auto()
+   type_pk_u16 = auto()
+   type_pk_bf8 = auto()
+   type_pk4_bf8 = auto()
+   type_pk_bf16 = auto()
+
+
+VCC = OperandType.type_vcc
+M0 = OperandType.type_m0
+EXEC_LO = OperandType.type_exec_lo
+EXEC = OperandType.type_exec
+SCC = OperandType.type_scc
+IMM = OperandType.type_imm
+U16 = OperandType.type_u16
+U32 = OperandType.type_u32
+U64 = OperandType.type_u64
+U128 = OperandType.type_u128
+I64 = OperandType.type_i64
+F8 = OperandType.type_f8
+F16 = OperandType.type_f16
+F32 = OperandType.type_f32
+F64 = OperandType.type_f64
+BF8 = OperandType.type_bf8
+BF16 = OperandType.type_bf16
+PkU16 = OperandType.type_pk_u16
+PkF8 = OperandType.type_pk_f8
+Pk4F8 = OperandType.type_pk4_f8
+PkF16 = OperandType.type_pk_f16
+PkF32 = OperandType.type_pk_f32
+PkBF8 = OperandType.type_pk_bf8
+Pk4BF8 = OperandType.type_pk4_bf8
+PkBF16 = OperandType.type_pk_bf16
+
 
 def src(op1 = 0, op2 = 0, op3 = 0, op4 = 0):
    return op1 | (op2 << 8) | (op3 << 16) | (op4 << 24)
@@ -439,85 +488,85 @@ insn("p_shader_cycles_hi_lo_hi")
 
 # SOP2 instructions: 2 scalar inputs, 1 scalar output (+optional scc)
 SOP2 = {
-   ("s_add_u32",            dst(1, SCC), src(1, 1), op(0x00)),
-   ("s_sub_u32",            dst(1, SCC), src(1, 1), op(0x01)),
-   ("s_add_i32",            dst(1, SCC), src(1, 1), op(0x02)),
-   ("s_sub_i32",            dst(1, SCC), src(1, 1), op(0x03)),
-   ("s_addc_u32",           dst(1, SCC), src(1, 1, SCC), op(0x04)),
-   ("s_subb_u32",           dst(1, SCC), src(1, 1, SCC), op(0x05)),
-   ("s_min_i32",            dst(1, SCC), src(1, 1), op(0x06, gfx11=0x12)),
-   ("s_min_u32",            dst(1, SCC), src(1, 1), op(0x07, gfx11=0x13)),
-   ("s_max_i32",            dst(1, SCC), src(1, 1), op(0x08, gfx11=0x14)),
-   ("s_max_u32",            dst(1, SCC), src(1, 1), op(0x09, gfx11=0x15)),
-   ("s_cselect_b32",        dst(1), src(1, 1, SCC), op(0x0a, gfx11=0x30)),
-   ("s_cselect_b64",        dst(2), src(2, 2, SCC), op(0x0b, gfx11=0x31)),
-   ("s_and_b32",            dst(1, SCC), src(1, 1), op(0x0e, gfx8=0x0c, gfx10=0x0e, gfx11=0x16)),
-   ("s_and_b64",            dst(2, SCC), src(2, 2), op(0x0f, gfx8=0x0d, gfx10=0x0f, gfx11=0x17)),
-   ("s_or_b32",             dst(1, SCC), src(1, 1), op(0x10, gfx8=0x0e, gfx10=0x10, gfx11=0x18)),
-   ("s_or_b64",             dst(2, SCC), src(2, 2), op(0x11, gfx8=0x0f, gfx10=0x11, gfx11=0x19)),
-   ("s_xor_b32",            dst(1, SCC), src(1, 1), op(0x12, gfx8=0x10, gfx10=0x12, gfx11=0x1a)),
-   ("s_xor_b64",            dst(2, SCC), src(2, 2), op(0x13, gfx8=0x11, gfx10=0x13, gfx11=0x1b)),
-   ("s_andn2_b32",          dst(1, SCC), src(1, 1), op(0x14, gfx8=0x12, gfx10=0x14, gfx11=0x22)), #s_and_not1_b32 in GFX11
-   ("s_andn2_b64",          dst(2, SCC), src(2, 2), op(0x15, gfx8=0x13, gfx10=0x15, gfx11=0x23)), #s_and_not1_b64 in GFX11
-   ("s_orn2_b32",           dst(1, SCC), src(1, 1), op(0x16, gfx8=0x14, gfx10=0x16, gfx11=0x24)), #s_or_not1_b32 in GFX11
-   ("s_orn2_b64",           dst(2, SCC), src(2, 2), op(0x17, gfx8=0x15, gfx10=0x17, gfx11=0x25)), #s_or_not1_b64 in GFX11
-   ("s_nand_b32",           dst(1, SCC), src(1, 1), op(0x18, gfx8=0x16, gfx10=0x18, gfx11=0x1c)),
-   ("s_nand_b64",           dst(2, SCC), src(2, 2), op(0x19, gfx8=0x17, gfx10=0x19, gfx11=0x1d)),
-   ("s_nor_b32",            dst(1, SCC), src(1, 1), op(0x1a, gfx8=0x18, gfx10=0x1a, gfx11=0x1e)),
-   ("s_nor_b64",            dst(2, SCC), src(2, 2), op(0x1b, gfx8=0x19, gfx10=0x1b, gfx11=0x1f)),
-   ("s_xnor_b32",           dst(1, SCC), src(1, 1), op(0x1c, gfx8=0x1a, gfx10=0x1c, gfx11=0x20)),
-   ("s_xnor_b64",           dst(2, SCC), src(2, 2), op(0x1d, gfx8=0x1b, gfx10=0x1d, gfx11=0x21)),
-   ("s_lshl_b32",           dst(1, SCC), src(1, 1), op(0x1e, gfx8=0x1c, gfx10=0x1e, gfx11=0x08)),
-   ("s_lshl_b64",           dst(2, SCC), src(2, 1), op(0x1f, gfx8=0x1d, gfx10=0x1f, gfx11=0x09)),
-   ("s_lshr_b32",           dst(1, SCC), src(1, 1), op(0x20, gfx8=0x1e, gfx10=0x20, gfx11=0x0a)),
-   ("s_lshr_b64",           dst(2, SCC), src(2, 1), op(0x21, gfx8=0x1f, gfx10=0x21, gfx11=0x0b)),
-   ("s_ashr_i32",           dst(1, SCC), src(1, 1), op(0x22, gfx8=0x20, gfx10=0x22, gfx11=0x0c)),
-   ("s_ashr_i64",           dst(2, SCC), src(2, 1), op(0x23, gfx8=0x21, gfx10=0x23, gfx11=0x0d)),
-   ("s_bfm_b32",            dst(1), src(1, 1), op(0x24, gfx8=0x22, gfx10=0x24, gfx11=0x2a)),
-   ("s_bfm_b64",            dst(2), src(1, 1), op(0x25, gfx8=0x23, gfx10=0x25, gfx11=0x2b)),
-   ("s_mul_i32",            dst(1), src(1, 1), op(0x26, gfx8=0x24, gfx10=0x26, gfx11=0x2c)),
-   ("s_bfe_u32",            dst(1, SCC), src(1, 1), op(0x27, gfx8=0x25, gfx10=0x27, gfx11=0x26)),
-   ("s_bfe_i32",            dst(1, SCC), src(1, 1), op(0x28, gfx8=0x26, gfx10=0x28, gfx11=0x27)),
-   ("s_bfe_u64",            dst(2, SCC), src(2, 1), op(0x29, gfx8=0x27, gfx10=0x29, gfx11=0x28)),
-   ("s_bfe_i64",            dst(2, SCC), src(2, 1), op(0x2a, gfx8=0x28, gfx10=0x2a, gfx11=0x29)),
-   ("s_cbranch_g_fork",     dst(), src(), op(0x2b, gfx8=0x29, gfx10=-1), InstrClass.Branch),
-   ("s_absdiff_i32",        dst(1, SCC), src(1, 1), op(0x2c, gfx8=0x2a, gfx10=0x2c, gfx11=0x06)),
-   ("s_rfe_restore_b64",    dst(), src(), op(gfx8=0x2b, gfx10=-1), InstrClass.Branch),
-   ("s_lshl1_add_u32",      dst(1, SCC), src(1, 1), op(gfx9=0x2e, gfx11=0x0e)),
-   ("s_lshl2_add_u32",      dst(1, SCC), src(1, 1), op(gfx9=0x2f, gfx11=0x0f)),
-   ("s_lshl3_add_u32",      dst(1, SCC), src(1, 1), op(gfx9=0x30, gfx11=0x10)),
-   ("s_lshl4_add_u32",      dst(1, SCC), src(1, 1), op(gfx9=0x31, gfx11=0x11)),
-   ("s_pack_ll_b32_b16",    dst(1), src(1, 1), op(gfx9=0x32)),
-   ("s_pack_lh_b32_b16",    dst(1), src(1, 1), op(gfx9=0x33)),
-   ("s_pack_hh_b32_b16",    dst(1), src(1, 1), op(gfx9=0x34)),
-   ("s_pack_hl_b32_b16",    dst(1), src(1, 1), op(gfx11=0x35)),
-   ("s_mul_hi_u32",         dst(1), src(1, 1), op(gfx9=0x2c, gfx10=0x35, gfx11=0x2d)),
-   ("s_mul_hi_i32",         dst(1), src(1, 1), op(gfx9=0x2d, gfx10=0x36, gfx11=0x2e)),
-   ("s_add_f32",            dst(1), src(1, 1), op(gfx11=0x40), InstrClass.SFPU),
-   ("s_sub_f32",            dst(1), src(1, 1), op(gfx11=0x41), InstrClass.SFPU),
-   ("s_min_f32",            dst(1), src(1, 1), op(gfx11=0x42), InstrClass.SFPU),
-   ("s_max_f32",            dst(1), src(1, 1), op(gfx11=0x43), InstrClass.SFPU),
-   ("s_mul_f32",            dst(1), src(1, 1), op(gfx11=0x44), InstrClass.SFPU),
-   ("s_fmaak_f32",          dst(1), src(1, 1, 1), op(gfx11=0x45), InstrClass.SFPU),
-   ("s_fmamk_f32",          dst(1), src(1, 1, 1), op(gfx11=0x46), InstrClass.SFPU),
-   ("s_fmac_f32",           dst(1), src(1, 1, 1), op(gfx11=0x47), InstrClass.SFPU),
-   ("s_cvt_pk_rtz_f16_f32", dst(1), src(1, 1), op(gfx11=0x48), InstrClass.SFPU),
-   ("s_add_f16",            dst(1), src(1, 1), op(gfx11=0x49), InstrClass.SFPU),
-   ("s_sub_f16",            dst(1), src(1, 1), op(gfx11=0x4a), InstrClass.SFPU),
-   ("s_min_f16",            dst(1), src(1, 1), op(gfx11=0x4b), InstrClass.SFPU),
-   ("s_max_f16",            dst(1), src(1, 1), op(gfx11=0x4c), InstrClass.SFPU),
-   ("s_mul_f16",            dst(1), src(1, 1), op(gfx11=0x4d), InstrClass.SFPU),
-   ("s_fmac_f16",           dst(1), src(1, 1, 1), op(gfx11=0x4e), InstrClass.SFPU),
-   ("s_minimum_f32",        dst(1), src(1, 1), op(gfx12=0x4f), InstrClass.SFPU),
-   ("s_maximum_f32",        dst(1), src(1, 1), op(gfx12=0x50), InstrClass.SFPU),
-   ("s_minimum_f16",        dst(1), src(1, 1), op(gfx12=0x51), InstrClass.SFPU),
-   ("s_maximum_f16",        dst(1), src(1, 1), op(gfx12=0x52), InstrClass.SFPU),
-   ("s_add_u64",            dst(2), src(2, 2), op(gfx12=0x53)),
-   ("s_sub_u64",            dst(2), src(2, 2), op(gfx12=0x54)),
-   ("s_mul_u64",            dst(2), src(2, 2), op(gfx12=0x55)),
+   ("s_add_u32",            dst(U32, SCC), src(U32, U32), op(0x00)),
+   ("s_sub_u32",            dst(U32, SCC), src(U32, U32), op(0x01)),
+   ("s_add_i32",            dst(U32, SCC), src(U32, U32), op(0x02)),
+   ("s_sub_i32",            dst(U32, SCC), src(U32, U32), op(0x03)),
+   ("s_addc_u32",           dst(U32, SCC), src(U32, U32, SCC), op(0x04)),
+   ("s_subb_u32",           dst(U32, SCC), src(U32, U32, SCC), op(0x05)),
+   ("s_min_i32",            dst(U32, SCC), src(U32, U32), op(0x06, gfx11=0x12)),
+   ("s_min_u32",            dst(U32, SCC), src(U32, U32), op(0x07, gfx11=0x13)),
+   ("s_max_i32",            dst(U32, SCC), src(U32, U32), op(0x08, gfx11=0x14)),
+   ("s_max_u32",            dst(U32, SCC), src(U32, U32), op(0x09, gfx11=0x15)),
+   ("s_cselect_b32",        dst(U32),      src(U32, U32, SCC), op(0x0a, gfx11=0x30)),
+   ("s_cselect_b64",        dst(U64),      src(U64, U64, SCC), op(0x0b, gfx11=0x31)),
+   ("s_and_b32",            dst(U32, SCC), src(U32, U32), op(0x0e, gfx8=0x0c, gfx10=0x0e, gfx11=0x16)),
+   ("s_and_b64",            dst(U64, SCC), src(U64, U64), op(0x0f, gfx8=0x0d, gfx10=0x0f, gfx11=0x17)),
+   ("s_or_b32",             dst(U32, SCC), src(U32, U32), op(0x10, gfx8=0x0e, gfx10=0x10, gfx11=0x18)),
+   ("s_or_b64",             dst(U64, SCC), src(U64, U64), op(0x11, gfx8=0x0f, gfx10=0x11, gfx11=0x19)),
+   ("s_xor_b32",            dst(U32, SCC), src(U32, U32), op(0x12, gfx8=0x10, gfx10=0x12, gfx11=0x1a)),
+   ("s_xor_b64",            dst(U64, SCC), src(U64, U64), op(0x13, gfx8=0x11, gfx10=0x13, gfx11=0x1b)),
+   ("s_andn2_b32",          dst(U32, SCC), src(U32, U32), op(0x14, gfx8=0x12, gfx10=0x14, gfx11=0x22)), #s_and_not1_b32 in GFX11
+   ("s_andn2_b64",          dst(U64, SCC), src(U64, U64), op(0x15, gfx8=0x13, gfx10=0x15, gfx11=0x23)), #s_and_not1_b64 in GFX11
+   ("s_orn2_b32",           dst(U32, SCC), src(U32, U32), op(0x16, gfx8=0x14, gfx10=0x16, gfx11=0x24)), #s_or_not1_b32 in GFX11
+   ("s_orn2_b64",           dst(U64, SCC), src(U64, U64), op(0x17, gfx8=0x15, gfx10=0x17, gfx11=0x25)), #s_or_not1_b64 in GFX11
+   ("s_nand_b32",           dst(U32, SCC), src(U32, U32), op(0x18, gfx8=0x16, gfx10=0x18, gfx11=0x1c)),
+   ("s_nand_b64",           dst(U64, SCC), src(U64, U64), op(0x19, gfx8=0x17, gfx10=0x19, gfx11=0x1d)),
+   ("s_nor_b32",            dst(U32, SCC), src(U32, U32), op(0x1a, gfx8=0x18, gfx10=0x1a, gfx11=0x1e)),
+   ("s_nor_b64",            dst(U64, SCC), src(U64, U64), op(0x1b, gfx8=0x19, gfx10=0x1b, gfx11=0x1f)),
+   ("s_xnor_b32",           dst(U32, SCC), src(U32, U32), op(0x1c, gfx8=0x1a, gfx10=0x1c, gfx11=0x20)),
+   ("s_xnor_b64",           dst(U64, SCC), src(U64, U64), op(0x1d, gfx8=0x1b, gfx10=0x1d, gfx11=0x21)),
+   ("s_lshl_b32",           dst(U32, SCC), src(U32, U32), op(0x1e, gfx8=0x1c, gfx10=0x1e, gfx11=0x08)),
+   ("s_lshl_b64",           dst(U64, SCC), src(U64, U32), op(0x1f, gfx8=0x1d, gfx10=0x1f, gfx11=0x09)),
+   ("s_lshr_b32",           dst(U32, SCC), src(U32, U32), op(0x20, gfx8=0x1e, gfx10=0x20, gfx11=0x0a)),
+   ("s_lshr_b64",           dst(U64, SCC), src(U64, U32), op(0x21, gfx8=0x1f, gfx10=0x21, gfx11=0x0b)),
+   ("s_ashr_i32",           dst(U32, SCC), src(U32, U32), op(0x22, gfx8=0x20, gfx10=0x22, gfx11=0x0c)),
+   ("s_ashr_i64",           dst(I64, SCC), src(I64, U32), op(0x23, gfx8=0x21, gfx10=0x23, gfx11=0x0d)),
+   ("s_bfm_b32",            dst(U32),      src(U32, U32), op(0x24, gfx8=0x22, gfx10=0x24, gfx11=0x2a)),
+   ("s_bfm_b64",            dst(U64),      src(U32, U32), op(0x25, gfx8=0x23, gfx10=0x25, gfx11=0x2b)),
+   ("s_mul_i32",            dst(U32),      src(U32, U32), op(0x26, gfx8=0x24, gfx10=0x26, gfx11=0x2c)),
+   ("s_bfe_u32",            dst(U32, SCC), src(U32, U32), op(0x27, gfx8=0x25, gfx10=0x27, gfx11=0x26)),
+   ("s_bfe_i32",            dst(U32, SCC), src(U32, U32), op(0x28, gfx8=0x26, gfx10=0x28, gfx11=0x27)),
+   ("s_bfe_u64",            dst(U64, SCC), src(U64, U32), op(0x29, gfx8=0x27, gfx10=0x29, gfx11=0x28)),
+   ("s_bfe_i64",            dst(I64, SCC), src(I64, U32), op(0x2a, gfx8=0x28, gfx10=0x2a, gfx11=0x29)),
+   ("s_cbranch_g_fork",     dst(),         src(), op(0x2b, gfx8=0x29, gfx10=-1), InstrClass.Branch),
+   ("s_absdiff_i32",        dst(U32, SCC), src(U32, U32), op(0x2c, gfx8=0x2a, gfx10=0x2c, gfx11=0x06)),
+   ("s_rfe_restore_b64",    dst(),         src(), op(gfx8=0x2b, gfx10=-1), InstrClass.Branch),
+   ("s_lshl1_add_u32",      dst(U32, SCC), src(U32, U32), op(gfx9=0x2e, gfx11=0x0e)),
+   ("s_lshl2_add_u32",      dst(U32, SCC), src(U32, U32), op(gfx9=0x2f, gfx11=0x0f)),
+   ("s_lshl3_add_u32",      dst(U32, SCC), src(U32, U32), op(gfx9=0x30, gfx11=0x10)),
+   ("s_lshl4_add_u32",      dst(U32, SCC), src(U32, U32), op(gfx9=0x31, gfx11=0x11)),
+   ("s_pack_ll_b32_b16",    dst(U32),      src(U32, U32), op(gfx9=0x32)),
+   ("s_pack_lh_b32_b16",    dst(U32),      src(U32, U32), op(gfx9=0x33)),
+   ("s_pack_hh_b32_b16",    dst(U32),      src(U32, U32), op(gfx9=0x34)),
+   ("s_pack_hl_b32_b16",    dst(U32),      src(U32, U32), op(gfx11=0x35)),
+   ("s_mul_hi_u32",         dst(U32),      src(U32, U32), op(gfx9=0x2c, gfx10=0x35, gfx11=0x2d)),
+   ("s_mul_hi_i32",         dst(U32),      src(U32, U32), op(gfx9=0x2d, gfx10=0x36, gfx11=0x2e)),
+   ("s_add_f32",            dst(F32),      src(F32, F32), op(gfx11=0x40), InstrClass.SFPU),
+   ("s_sub_f32",            dst(F32),      src(F32, F32), op(gfx11=0x41), InstrClass.SFPU),
+   ("s_min_f32",            dst(F32),      src(F32, F32), op(gfx11=0x42), InstrClass.SFPU),
+   ("s_max_f32",            dst(F32),      src(F32, F32), op(gfx11=0x43), InstrClass.SFPU),
+   ("s_mul_f32",            dst(F32),      src(F32, F32), op(gfx11=0x44), InstrClass.SFPU),
+   ("s_fmaak_f32",          dst(F32),      src(F32, F32, IMM), op(gfx11=0x45), InstrClass.SFPU),
+   ("s_fmamk_f32",          dst(F32),      src(F32, F32, IMM), op(gfx11=0x46), InstrClass.SFPU),
+   ("s_fmac_f32",           dst(F32),      src(F32, F32, F32), op(gfx11=0x47), InstrClass.SFPU),
+   ("s_cvt_pk_rtz_f16_f32", dst(PkF16),    src(F32, F32), op(gfx11=0x48), InstrClass.SFPU),
+   ("s_add_f16",            dst(F16),      src(F16, F16), op(gfx11=0x49), InstrClass.SFPU),
+   ("s_sub_f16",            dst(F16),      src(F16, F16), op(gfx11=0x4a), InstrClass.SFPU),
+   ("s_min_f16",            dst(F16),      src(F16, F16), op(gfx11=0x4b), InstrClass.SFPU),
+   ("s_max_f16",            dst(F16),      src(F16, F16), op(gfx11=0x4c), InstrClass.SFPU),
+   ("s_mul_f16",            dst(F16),      src(F16, F16), op(gfx11=0x4d), InstrClass.SFPU),
+   ("s_fmac_f16",           dst(F16),      src(F16, F16, F16), op(gfx11=0x4e), InstrClass.SFPU),
+   ("s_minimum_f32",        dst(F32),      src(F32, F32), op(gfx12=0x4f), InstrClass.SFPU),
+   ("s_maximum_f32",        dst(F32),      src(F32, F32), op(gfx12=0x50), InstrClass.SFPU),
+   ("s_minimum_f16",        dst(F16),      src(F16, F16), op(gfx12=0x51), InstrClass.SFPU),
+   ("s_maximum_f16",        dst(F16),      src(F16, F16), op(gfx12=0x52), InstrClass.SFPU),
+   ("s_add_u64",            dst(U64),      src(U64, U64), op(gfx12=0x53)),
+   ("s_sub_u64",            dst(U64),      src(U64, U64), op(gfx12=0x54)),
+   ("s_mul_u64",            dst(U64),      src(U64, U64), op(gfx12=0x55)),
    # actually a pseudo-instruction. it's lowered to SALU during assembly though, so it's useful to identify it as a SOP2.
-   ("p_constaddr_addlo",    dst(1, SCC), src(1, 1, 1), op(-1)),
-   ("p_resumeaddr_addlo",   dst(1, SCC), src(1, 1, 1), op(-1)),
+   ("p_constaddr_addlo",    dst(U32, SCC), src(U32, U32, U32), op(-1)),
+   ("p_resumeaddr_addlo",   dst(U32, SCC), src(U32, U32, U32), op(-1)),
 }
 for (name, defs, ops, num, cls) in default_class(SOP2, InstrClass.Salu):
     insn(name, num, Format.SOP2, cls, definitions = defs, operands = ops)
@@ -525,34 +574,34 @@ for (name, defs, ops, num, cls) in default_class(SOP2, InstrClass.Salu):
 
 # SOPK instructions: 0 input (+ imm), 1 output + optional scc
 SOPK = {
-   ("s_movk_i32",             dst(1), src(), op(0x00)),
-   ("s_version",              dst(), src(), op(gfx10=0x01)),
-   ("s_cmovk_i32",            dst(1), src(1, SCC), op(0x02, gfx8=0x01, gfx10=0x02)),
-   ("s_cmpk_eq_i32",          dst(SCC), src(1), op(0x03, gfx8=0x02, gfx10=0x03, gfx12=-1)),
-   ("s_cmpk_lg_i32",          dst(SCC), src(1), op(0x04, gfx8=0x03, gfx10=0x04, gfx12=-1)),
-   ("s_cmpk_gt_i32",          dst(SCC), src(1), op(0x05, gfx8=0x04, gfx10=0x05, gfx12=-1)),
-   ("s_cmpk_ge_i32",          dst(SCC), src(1), op(0x06, gfx8=0x05, gfx10=0x06, gfx12=-1)),
-   ("s_cmpk_lt_i32",          dst(SCC), src(1), op(0x07, gfx8=0x06, gfx10=0x07, gfx12=-1)),
-   ("s_cmpk_le_i32",          dst(SCC), src(1), op(0x08, gfx8=0x07, gfx10=0x08, gfx12=-1)),
-   ("s_cmpk_eq_u32",          dst(SCC), src(1), op(0x09, gfx8=0x08, gfx10=0x09, gfx12=-1)),
-   ("s_cmpk_lg_u32",          dst(SCC), src(1), op(0x0a, gfx8=0x09, gfx10=0x0a, gfx12=-1)),
-   ("s_cmpk_gt_u32",          dst(SCC), src(1), op(0x0b, gfx8=0x0a, gfx10=0x0b, gfx12=-1)),
-   ("s_cmpk_ge_u32",          dst(SCC), src(1), op(0x0c, gfx8=0x0b, gfx10=0x0c, gfx12=-1)),
-   ("s_cmpk_lt_u32",          dst(SCC), src(1), op(0x0d, gfx8=0x0c, gfx10=0x0d, gfx12=-1)),
-   ("s_cmpk_le_u32",          dst(SCC), src(1), op(0x0e, gfx8=0x0d, gfx10=0x0e, gfx12=-1)),
-   ("s_addk_i32",             dst(1, SCC), src(1), op(0x0f, gfx8=0x0e, gfx10=0x0f)),
-   ("s_mulk_i32",             dst(1), src(1), op(0x10, gfx8=0x0f, gfx10=0x10)),
-   ("s_cbranch_i_fork",       dst(), src(), op(0x11, gfx8=0x10, gfx10=-1), InstrClass.Branch),
-   ("s_getreg_b32",           dst(1), src(), op(0x12, gfx8=0x11, gfx10=0x12, gfx11=0x11)),
-   ("s_setreg_b32",           dst(), src(1), op(0x13, gfx8=0x12, gfx10=0x13, gfx11=0x12)),
-   ("s_setreg_imm32_b32",     dst(), src(1), op(0x15, gfx8=0x14, gfx10=0x15, gfx11=0x13)), # requires 32bit literal
-   ("s_call_b64",             dst(2), src(), op(gfx8=0x15, gfx10=0x16, gfx11=0x14), InstrClass.Branch),
-   ("s_waitcnt_vscnt",        dst(), src(1), op(gfx10=0x17, gfx11=0x18, gfx12=-1), InstrClass.Waitcnt),
-   ("s_waitcnt_vmcnt",        dst(), src(1), op(gfx10=0x18, gfx11=0x19, gfx12=-1), InstrClass.Waitcnt),
-   ("s_waitcnt_expcnt",       dst(), src(1), op(gfx10=0x19, gfx11=0x1a, gfx12=-1), InstrClass.Waitcnt),
-   ("s_waitcnt_lgkmcnt",      dst(), src(1), op(gfx10=0x1a, gfx11=0x1b, gfx12=-1), InstrClass.Waitcnt),
-   ("s_subvector_loop_begin", dst(), src(), op(gfx10=0x1b, gfx11=0x16, gfx12=-1), InstrClass.Branch),
-   ("s_subvector_loop_end",   dst(), src(), op(gfx10=0x1c, gfx11=0x17, gfx12=-1), InstrClass.Branch),
+   ("s_movk_i32",             dst(U32),      src(), op(0x00)),
+   ("s_version",              dst(),         src(), op(gfx10=0x01)),
+   ("s_cmovk_i32",            dst(U32),      src(U32, SCC), op(0x02, gfx8=0x01, gfx10=0x02)),
+   ("s_cmpk_eq_i32",          dst(SCC),      src(U32), op(0x03, gfx8=0x02, gfx10=0x03, gfx12=-1)),
+   ("s_cmpk_lg_i32",          dst(SCC),      src(U32), op(0x04, gfx8=0x03, gfx10=0x04, gfx12=-1)),
+   ("s_cmpk_gt_i32",          dst(SCC),      src(U32), op(0x05, gfx8=0x04, gfx10=0x05, gfx12=-1)),
+   ("s_cmpk_ge_i32",          dst(SCC),      src(U32), op(0x06, gfx8=0x05, gfx10=0x06, gfx12=-1)),
+   ("s_cmpk_lt_i32",          dst(SCC),      src(U32), op(0x07, gfx8=0x06, gfx10=0x07, gfx12=-1)),
+   ("s_cmpk_le_i32",          dst(SCC),      src(U32), op(0x08, gfx8=0x07, gfx10=0x08, gfx12=-1)),
+   ("s_cmpk_eq_u32",          dst(SCC),      src(U32), op(0x09, gfx8=0x08, gfx10=0x09, gfx12=-1)),
+   ("s_cmpk_lg_u32",          dst(SCC),      src(U32), op(0x0a, gfx8=0x09, gfx10=0x0a, gfx12=-1)),
+   ("s_cmpk_gt_u32",          dst(SCC),      src(U32), op(0x0b, gfx8=0x0a, gfx10=0x0b, gfx12=-1)),
+   ("s_cmpk_ge_u32",          dst(SCC),      src(U32), op(0x0c, gfx8=0x0b, gfx10=0x0c, gfx12=-1)),
+   ("s_cmpk_lt_u32",          dst(SCC),      src(U32), op(0x0d, gfx8=0x0c, gfx10=0x0d, gfx12=-1)),
+   ("s_cmpk_le_u32",          dst(SCC),      src(U32), op(0x0e, gfx8=0x0d, gfx10=0x0e, gfx12=-1)),
+   ("s_addk_i32",             dst(U32, SCC), src(U32), op(0x0f, gfx8=0x0e, gfx10=0x0f)),
+   ("s_mulk_i32",             dst(U32),      src(U32), op(0x10, gfx8=0x0f, gfx10=0x10)),
+   ("s_cbranch_i_fork",       dst(),         src(), op(0x11, gfx8=0x10, gfx10=-1), InstrClass.Branch),
+   ("s_getreg_b32",           dst(U32),      src(), op(0x12, gfx8=0x11, gfx10=0x12, gfx11=0x11)),
+   ("s_setreg_b32",           dst(),         src(U32), op(0x13, gfx8=0x12, gfx10=0x13, gfx11=0x12)),
+   ("s_setreg_imm32_b32",     dst(),         src(IMM), op(0x15, gfx8=0x14, gfx10=0x15, gfx11=0x13)), # requires 32bit literal
+   ("s_call_b64",             dst(U64),      src(), op(gfx8=0x15, gfx10=0x16, gfx11=0x14), InstrClass.Branch),
+   ("s_waitcnt_vscnt",        dst(),         src(U32), op(gfx10=0x17, gfx11=0x18, gfx12=-1), InstrClass.Waitcnt),
+   ("s_waitcnt_vmcnt",        dst(),         src(U32), op(gfx10=0x18, gfx11=0x19, gfx12=-1), InstrClass.Waitcnt),
+   ("s_waitcnt_expcnt",       dst(),         src(U32), op(gfx10=0x19, gfx11=0x1a, gfx12=-1), InstrClass.Waitcnt),
+   ("s_waitcnt_lgkmcnt",      dst(),         src(U32), op(gfx10=0x1a, gfx11=0x1b, gfx12=-1), InstrClass.Waitcnt),
+   ("s_subvector_loop_begin", dst(),         src(), op(gfx10=0x1b, gfx11=0x16, gfx12=-1), InstrClass.Branch),
+   ("s_subvector_loop_end",   dst(),         src(), op(gfx10=0x1c, gfx11=0x17, gfx12=-1), InstrClass.Branch),
 }
 for (name, defs, ops, num, cls) in default_class(SOPK, InstrClass.Salu):
    insn(name, num, Format.SOPK, cls, definitions = defs, operands = ops)
@@ -560,102 +609,102 @@ for (name, defs, ops, num, cls) in default_class(SOPK, InstrClass.Salu):
 
 # SOP1 instructions: 1 input, 1 output (+optional SCC)
 SOP1 = {
-   ("s_mov_b32",                dst(1), src(1), op(0x03, gfx8=0x00, gfx10=0x03, gfx11=0x00)),
-   ("s_mov_b64",                dst(2), src(2), op(0x04, gfx8=0x01, gfx10=0x04, gfx11=0x01)),
-   ("s_cmov_b32",               dst(1), src(1, 1, SCC), op(0x05, gfx8=0x02, gfx10=0x05, gfx11=0x02)),
-   ("s_cmov_b64",               dst(2), src(2, 2, SCC), op(0x06, gfx8=0x03, gfx10=0x06, gfx11=0x03)),
-   ("s_not_b32",                dst(1, SCC), src(1), op(0x07, gfx8=0x04, gfx10=0x07, gfx11=0x1e)),
-   ("s_not_b64",                dst(2, SCC), src(2), op(0x08, gfx8=0x05, gfx10=0x08, gfx11=0x1f)),
-   ("s_wqm_b32",                dst(1, SCC), src(1), op(0x09, gfx8=0x06, gfx10=0x09, gfx11=0x1c)),
-   ("s_wqm_b64",                dst(2, SCC), src(2), op(0x0a, gfx8=0x07, gfx10=0x0a, gfx11=0x1d)),
-   ("s_brev_b32",               dst(1), src(1), op(0x0b, gfx8=0x08, gfx10=0x0b, gfx11=0x04)),
-   ("s_brev_b64",               dst(2), src(2), op(0x0c, gfx8=0x09, gfx10=0x0c, gfx11=0x05)),
-   ("s_bcnt0_i32_b32",          dst(1, SCC), src(1), op(0x0d, gfx8=0x0a, gfx10=0x0d, gfx11=0x16)),
-   ("s_bcnt0_i32_b64",          dst(1, SCC), src(2), op(0x0e, gfx8=0x0b, gfx10=0x0e, gfx11=0x17)),
-   ("s_bcnt1_i32_b32",          dst(1, SCC), src(1), op(0x0f, gfx8=0x0c, gfx10=0x0f, gfx11=0x18)),
-   ("s_bcnt1_i32_b64",          dst(1, SCC), src(2), op(0x10, gfx8=0x0d, gfx10=0x10, gfx11=0x19)),
-   ("s_ff0_i32_b32",            dst(1), src(1), op(0x11, gfx8=0x0e, gfx10=0x11, gfx11=-1)),
-   ("s_ff0_i32_b64",            dst(1), src(2), op(0x12, gfx8=0x0f, gfx10=0x12, gfx11=-1)),
-   ("s_ff1_i32_b32",            dst(1), src(1), op(0x13, gfx8=0x10, gfx10=0x13, gfx11=0x08)), #s_ctz_i32_b32 in GFX11
-   ("s_ff1_i32_b64",            dst(1), src(2), op(0x14, gfx8=0x11, gfx10=0x14, gfx11=0x09)), #s_ctz_i32_b64 in GFX11
-   ("s_flbit_i32_b32",          dst(1), src(1), op(0x15, gfx8=0x12, gfx10=0x15, gfx11=0x0a)), #s_clz_i32_u32 in GFX11
-   ("s_flbit_i32_b64",          dst(1), src(2), op(0x16, gfx8=0x13, gfx10=0x16, gfx11=0x0b)), #s_clz_i32_u64 in GFX11
-   ("s_flbit_i32",              dst(1), src(1), op(0x17, gfx8=0x14, gfx10=0x17, gfx11=0x0c)), #s_cls_i32 in GFX11
-   ("s_flbit_i32_i64",          dst(1), src(2), op(0x18, gfx8=0x15, gfx10=0x18, gfx11=0x0d)), #s_cls_i32_i64 in GFX11
-   ("s_sext_i32_i8",            dst(1), src(1), op(0x19, gfx8=0x16, gfx10=0x19, gfx11=0x0e)),
-   ("s_sext_i32_i16",           dst(1), src(1), op(0x1a, gfx8=0x17, gfx10=0x1a, gfx11=0x0f)),
-   ("s_bitset0_b32",            dst(1), src(1, 1), op(0x1b, gfx8=0x18, gfx10=0x1b, gfx11=0x10)),
-   ("s_bitset0_b64",            dst(2), src(1, 2), op(0x1c, gfx8=0x19, gfx10=0x1c, gfx11=0x11)),
-   ("s_bitset1_b32",            dst(1), src(1, 1), op(0x1d, gfx8=0x1a, gfx10=0x1d, gfx11=0x12)),
-   ("s_bitset1_b64",            dst(2), src(1, 2), op(0x1e, gfx8=0x1b, gfx10=0x1e, gfx11=0x13)),
-   ("s_getpc_b64",              dst(2), src(), op(0x1f, gfx8=0x1c, gfx10=0x1f, gfx11=0x47)),
-   ("s_setpc_b64",              dst(), src(2), op(0x20, gfx8=0x1d, gfx10=0x20, gfx11=0x48), InstrClass.Branch),
-   ("s_swappc_b64",             dst(2), src(2), op(0x21, gfx8=0x1e, gfx10=0x21, gfx11=0x49), InstrClass.Branch),
-   ("s_rfe_b64",                dst(), src(2), op(0x22, gfx8=0x1f, gfx10=0x22, gfx11=0x4a), InstrClass.Branch),
-   ("s_and_saveexec_b64",       dst(2, SCC, EXEC), src(2, EXEC), op(0x24, gfx8=0x20, gfx10=0x24, gfx11=0x21)),
-   ("s_or_saveexec_b64",        dst(2, SCC, EXEC), src(2, EXEC), op(0x25, gfx8=0x21, gfx10=0x25, gfx11=0x23)),
-   ("s_xor_saveexec_b64",       dst(2, SCC, EXEC), src(2, EXEC), op(0x26, gfx8=0x22, gfx10=0x26, gfx11=0x25)),
-   ("s_andn2_saveexec_b64",     dst(2, SCC, EXEC), src(2, EXEC), op(0x27, gfx8=0x23, gfx10=0x27, gfx11=0x31)), #s_and_not1_saveexec_b64 in GFX11
-   ("s_orn2_saveexec_b64",      dst(2, SCC, EXEC), src(2, EXEC), op(0x28, gfx8=0x24, gfx10=0x28, gfx11=0x33)), #s_or_not1_saveexec_b64 in GFX11
-   ("s_nand_saveexec_b64",      dst(2, SCC, EXEC), src(2, EXEC), op(0x29, gfx8=0x25, gfx10=0x29, gfx11=0x27)),
-   ("s_nor_saveexec_b64",       dst(2, SCC, EXEC), src(2, EXEC), op(0x2a, gfx8=0x26, gfx10=0x2a, gfx11=0x29)),
-   ("s_xnor_saveexec_b64",      dst(2, SCC, EXEC), src(2, EXEC), op(0x2b, gfx8=0x27, gfx10=0x2b)),
-   ("s_quadmask_b32",           dst(1, SCC), src(1), op(0x2c, gfx8=0x28, gfx10=0x2c, gfx11=0x1a)),
-   ("s_quadmask_b64",           dst(2, SCC), src(2), op(0x2d, gfx8=0x29, gfx10=0x2d, gfx11=0x1b)), # Always writes 0 to the second SGPR
-   ("s_movrels_b32",            dst(1), src(1, M0), op(0x2e, gfx8=0x2a, gfx10=0x2e, gfx11=0x40)),
-   ("s_movrels_b64",            dst(2), src(2, M0), op(0x2f, gfx8=0x2b, gfx10=0x2f, gfx11=0x41)),
-   ("s_movreld_b32",            dst(1), src(1, M0), op(0x30, gfx8=0x2c, gfx10=0x30, gfx11=0x42)),
-   ("s_movreld_b64",            dst(2), src(2, M0), op(0x31, gfx8=0x2d, gfx10=0x31, gfx11=0x43)),
-   ("s_cbranch_join",           dst(), src(), op(0x32, gfx8=0x2e, gfx10=-1), InstrClass.Branch),
-   ("s_abs_i32",                dst(1, SCC), src(1), op(0x34, gfx8=0x30, gfx10=0x34, gfx11=0x15)),
-   ("s_mov_fed_b32",            dst(), src(), op(0x35, gfx8=-1, gfx10=0x35, gfx11=-1)),
-   ("s_set_gpr_idx_idx",        dst(M0), src(1, M0), op(gfx8=0x32, gfx10=-1)),
-   ("s_andn1_saveexec_b64",     dst(2, SCC, EXEC), src(2, EXEC), op(gfx9=0x33, gfx10=0x37, gfx11=0x2d)), #s_and_not0_savexec_b64 in GFX11
-   ("s_orn1_saveexec_b64",      dst(2, SCC, EXEC), src(2, EXEC), op(gfx9=0x34, gfx10=0x38, gfx11=0x2f)), #s_or_not0_savexec_b64 in GFX11
-   ("s_andn1_wrexec_b64",       dst(2, SCC, EXEC), src(2, EXEC), op(gfx9=0x35, gfx10=0x39, gfx11=0x35)), #s_and_not0_wrexec_b64 in GFX11
-   ("s_andn2_wrexec_b64",       dst(2, SCC, EXEC), src(2, EXEC), op(gfx9=0x36, gfx10=0x3a, gfx11=0x37)), #s_and_not1_wrexec_b64 in GFX11
-   ("s_bitreplicate_b64_b32",   dst(2), src(1), op(gfx9=0x37, gfx10=0x3b, gfx11=0x14)),
-   ("s_and_saveexec_b32",       dst(1, SCC, EXEC_LO), src(1, EXEC_LO), op(gfx10=0x3c, gfx11=0x20)),
-   ("s_or_saveexec_b32",        dst(1, SCC, EXEC_LO), src(1, EXEC_LO), op(gfx10=0x3d, gfx11=0x22)),
-   ("s_xor_saveexec_b32",       dst(1, SCC, EXEC_LO), src(1, EXEC_LO), op(gfx10=0x3e, gfx11=0x24)),
-   ("s_andn2_saveexec_b32",     dst(1, SCC, EXEC_LO), src(1, EXEC_LO), op(gfx10=0x3f, gfx11=0x30)), #s_and_not1_saveexec_b32 in GFX11
-   ("s_orn2_saveexec_b32",      dst(1, SCC, EXEC_LO), src(1, EXEC_LO), op(gfx10=0x40, gfx11=0x32)), #s_or_not1_saveexec_b32 in GFX11
-   ("s_nand_saveexec_b32",      dst(1, SCC, EXEC_LO), src(1, EXEC_LO), op(gfx10=0x41, gfx11=0x26)),
-   ("s_nor_saveexec_b32",       dst(1, SCC, EXEC_LO), src(1, EXEC_LO), op(gfx10=0x42, gfx11=0x28)),
-   ("s_xnor_saveexec_b32",      dst(1, SCC, EXEC_LO), src(1, EXEC_LO), op(gfx10=0x43, gfx11=0x2a)),
-   ("s_andn1_saveexec_b32",     dst(1, SCC, EXEC_LO), src(1, EXEC_LO), op(gfx10=0x44, gfx11=0x2c)), #s_and_not0_savexec_b32 in GFX11
-   ("s_orn1_saveexec_b32",      dst(1, SCC, EXEC_LO), src(1, EXEC_LO), op(gfx10=0x45, gfx11=0x2e)), #s_or_not0_savexec_b32 in GFX11
-   ("s_andn1_wrexec_b32",       dst(1, SCC, EXEC_LO), src(1, EXEC_LO), op(gfx10=0x46, gfx11=0x34)), #s_and_not0_wrexec_b32 in GFX11
-   ("s_andn2_wrexec_b32",       dst(1, SCC, EXEC_LO), src(1, EXEC_LO), op(gfx10=0x47, gfx11=0x36)), #s_and_not1_wrexec_b32 in GFX11
-   ("s_movrelsd_2_b32",         dst(1), src(1, M0), op(gfx10=0x49, gfx11=0x44)),
-   ("s_sendmsg_rtn_b32",        dst(1), src(1), op(gfx11=0x4c)),
-   ("s_sendmsg_rtn_b64",        dst(2), src(1), op(gfx11=0x4d)),
-   ("s_ceil_f32",               dst(1), src(1), op(gfx11=0x60), InstrClass.SFPU),
-   ("s_floor_f32",              dst(1), src(1), op(gfx11=0x61), InstrClass.SFPU),
-   ("s_trunc_f32",              dst(1), src(1), op(gfx11=0x62), InstrClass.SFPU),
-   ("s_rndne_f32",              dst(1), src(1), op(gfx11=0x63), InstrClass.SFPU),
-   ("s_cvt_f32_i32",            dst(1), src(1), op(gfx11=0x64), InstrClass.SFPU),
-   ("s_cvt_f32_u32",            dst(1), src(1), op(gfx11=0x65), InstrClass.SFPU),
-   ("s_cvt_i32_f32",            dst(1), src(1), op(gfx11=0x66), InstrClass.SFPU),
-   ("s_cvt_u32_f32",            dst(1), src(1), op(gfx11=0x67), InstrClass.SFPU),
-   ("s_cvt_f16_f32",            dst(1), src(1), op(gfx11=0x68), InstrClass.SFPU),
-   ("s_cvt_f32_f16",            dst(1), src(1), op(gfx11=0x69), InstrClass.SFPU),
-   ("s_cvt_hi_f32_f16",         dst(1), src(1), op(gfx11=0x6a), InstrClass.SFPU),
-   ("s_ceil_f16",               dst(1), src(1), op(gfx11=0x6b), InstrClass.SFPU),
-   ("s_floor_f16",              dst(1), src(1), op(gfx11=0x6c), InstrClass.SFPU),
-   ("s_trunc_f16",              dst(1), src(1), op(gfx11=0x6d), InstrClass.SFPU),
-   ("s_rndne_f16",              dst(1), src(1), op(gfx11=0x6e), InstrClass.SFPU),
-   ("s_barrier_signal",         dst(), src(1), op(gfx12=0x4e), InstrClass.Barrier),
-   ("s_barrier_signal_isfirst", dst(SCC), src(1), op(gfx12=0x4f), InstrClass.Barrier),
-   ("s_get_barrier_state",      dst(1), src(1), op(gfx12=0x50), InstrClass.Barrier),
-   ("s_barrier_init",           dst(), src(1), op(gfx12=0x51), InstrClass.Barrier),
-   ("s_barrier_join",           dst(), src(1), op(gfx12=0x52), InstrClass.Barrier),
-   ("s_wakeup_barrier",         dst(), src(1), op(gfx12=0x57), InstrClass.Barrier),
-   ("s_sleep_var",              dst(), src(1), op(gfx12=0x58)),
+   ("s_mov_b32",                dst(U32),               src(U32), op(0x03, gfx8=0x00, gfx10=0x03, gfx11=0x00)),
+   ("s_mov_b64",                dst(U64),               src(U64), op(0x04, gfx8=0x01, gfx10=0x04, gfx11=0x01)),
+   ("s_cmov_b32",               dst(U32),               src(U32, U32, SCC), op(0x05, gfx8=0x02, gfx10=0x05, gfx11=0x02)),
+   ("s_cmov_b64",               dst(U64),               src(U64, U64, SCC), op(0x06, gfx8=0x03, gfx10=0x06, gfx11=0x03)),
+   ("s_not_b32",                dst(U32, SCC),          src(U32), op(0x07, gfx8=0x04, gfx10=0x07, gfx11=0x1e)),
+   ("s_not_b64",                dst(U64, SCC),          src(U64), op(0x08, gfx8=0x05, gfx10=0x08, gfx11=0x1f)),
+   ("s_wqm_b32",                dst(U32, SCC),          src(U32), op(0x09, gfx8=0x06, gfx10=0x09, gfx11=0x1c)),
+   ("s_wqm_b64",                dst(U64, SCC),          src(U64), op(0x0a, gfx8=0x07, gfx10=0x0a, gfx11=0x1d)),
+   ("s_brev_b32",               dst(U32),               src(U32), op(0x0b, gfx8=0x08, gfx10=0x0b, gfx11=0x04)),
+   ("s_brev_b64",               dst(U64),               src(U64), op(0x0c, gfx8=0x09, gfx10=0x0c, gfx11=0x05)),
+   ("s_bcnt0_i32_b32",          dst(U32, SCC),          src(U32), op(0x0d, gfx8=0x0a, gfx10=0x0d, gfx11=0x16)),
+   ("s_bcnt0_i32_b64",          dst(U32, SCC),          src(U64), op(0x0e, gfx8=0x0b, gfx10=0x0e, gfx11=0x17)),
+   ("s_bcnt1_i32_b32",          dst(U32, SCC),          src(U32), op(0x0f, gfx8=0x0c, gfx10=0x0f, gfx11=0x18)),
+   ("s_bcnt1_i32_b64",          dst(U32, SCC),          src(U64), op(0x10, gfx8=0x0d, gfx10=0x10, gfx11=0x19)),
+   ("s_ff0_i32_b32",            dst(U32),               src(U32), op(0x11, gfx8=0x0e, gfx10=0x11, gfx11=-1)),
+   ("s_ff0_i32_b64",            dst(U32),               src(U64), op(0x12, gfx8=0x0f, gfx10=0x12, gfx11=-1)),
+   ("s_ff1_i32_b32",            dst(U32),               src(U32), op(0x13, gfx8=0x10, gfx10=0x13, gfx11=0x08)), #s_ctz_i32_b32 in GFX11
+   ("s_ff1_i32_b64",            dst(U32),               src(U64), op(0x14, gfx8=0x11, gfx10=0x14, gfx11=0x09)), #s_ctz_i32_b64 in GFX11
+   ("s_flbit_i32_b32",          dst(U32),               src(U32), op(0x15, gfx8=0x12, gfx10=0x15, gfx11=0x0a)), #s_clz_i32_u32 in GFX11
+   ("s_flbit_i32_b64",          dst(U32),               src(U64), op(0x16, gfx8=0x13, gfx10=0x16, gfx11=0x0b)), #s_clz_i32_u64 in GFX11
+   ("s_flbit_i32",              dst(U32),               src(U32), op(0x17, gfx8=0x14, gfx10=0x17, gfx11=0x0c)), #s_cls_i32 in GFX11
+   ("s_flbit_i32_i64",          dst(U32),               src(I64), op(0x18, gfx8=0x15, gfx10=0x18, gfx11=0x0d)), #s_cls_i32_i64 in GFX11
+   ("s_sext_i32_i8",            dst(U32),               src(U32), op(0x19, gfx8=0x16, gfx10=0x19, gfx11=0x0e)),
+   ("s_sext_i32_i16",           dst(U32),               src(U32), op(0x1a, gfx8=0x17, gfx10=0x1a, gfx11=0x0f)),
+   ("s_bitset0_b32",            dst(U32),               src(U32, U32), op(0x1b, gfx8=0x18, gfx10=0x1b, gfx11=0x10)),
+   ("s_bitset0_b64",            dst(U64),               src(U32, 2), op(0x1c, gfx8=0x19, gfx10=0x1c, gfx11=0x11)),
+   ("s_bitset1_b32",            dst(U32),               src(U32, U32), op(0x1d, gfx8=0x1a, gfx10=0x1d, gfx11=0x12)),
+   ("s_bitset1_b64",            dst(U64),               src(U32, 2), op(0x1e, gfx8=0x1b, gfx10=0x1e, gfx11=0x13)),
+   ("s_getpc_b64",              dst(U64),               src(), op(0x1f, gfx8=0x1c, gfx10=0x1f, gfx11=0x47)),
+   ("s_setpc_b64",              dst(),                  src(U64), op(0x20, gfx8=0x1d, gfx10=0x20, gfx11=0x48), InstrClass.Branch),
+   ("s_swappc_b64",             dst(U64),               src(U64), op(0x21, gfx8=0x1e, gfx10=0x21, gfx11=0x49), InstrClass.Branch),
+   ("s_rfe_b64",                dst(),                  src(U64), op(0x22, gfx8=0x1f, gfx10=0x22, gfx11=0x4a), InstrClass.Branch),
+   ("s_and_saveexec_b64",       dst(U64, SCC, EXEC),    src(U64, EXEC), op(0x24, gfx8=0x20, gfx10=0x24, gfx11=0x21)),
+   ("s_or_saveexec_b64",        dst(U64, SCC, EXEC),    src(U64, EXEC), op(0x25, gfx8=0x21, gfx10=0x25, gfx11=0x23)),
+   ("s_xor_saveexec_b64",       dst(U64, SCC, EXEC),    src(U64, EXEC), op(0x26, gfx8=0x22, gfx10=0x26, gfx11=0x25)),
+   ("s_andn2_saveexec_b64",     dst(U64, SCC, EXEC),    src(U64, EXEC), op(0x27, gfx8=0x23, gfx10=0x27, gfx11=0x31)), #s_and_not1_saveexec_b64 in GFX11
+   ("s_orn2_saveexec_b64",      dst(U64, SCC, EXEC),    src(U64, EXEC), op(0x28, gfx8=0x24, gfx10=0x28, gfx11=0x33)), #s_or_not1_saveexec_b64 in GFX11
+   ("s_nand_saveexec_b64",      dst(U64, SCC, EXEC),    src(U64, EXEC), op(0x29, gfx8=0x25, gfx10=0x29, gfx11=0x27)),
+   ("s_nor_saveexec_b64",       dst(U64, SCC, EXEC),    src(U64, EXEC), op(0x2a, gfx8=0x26, gfx10=0x2a, gfx11=0x29)),
+   ("s_xnor_saveexec_b64",      dst(U64, SCC, EXEC),    src(U64, EXEC), op(0x2b, gfx8=0x27, gfx10=0x2b)),
+   ("s_quadmask_b32",           dst(U32, SCC),          src(U32), op(0x2c, gfx8=0x28, gfx10=0x2c, gfx11=0x1a)),
+   ("s_quadmask_b64",           dst(U64, SCC),          src(U64), op(0x2d, gfx8=0x29, gfx10=0x2d, gfx11=0x1b)), # Always writes 0 to the second SGPR
+   ("s_movrels_b32",            dst(U32),               src(U32, M0), op(0x2e, gfx8=0x2a, gfx10=0x2e, gfx11=0x40)),
+   ("s_movrels_b64",            dst(U64),               src(U64, M0), op(0x2f, gfx8=0x2b, gfx10=0x2f, gfx11=0x41)),
+   ("s_movreld_b32",            dst(U32),               src(U32, M0), op(0x30, gfx8=0x2c, gfx10=0x30, gfx11=0x42)),
+   ("s_movreld_b64",            dst(U64),               src(U64, M0), op(0x31, gfx8=0x2d, gfx10=0x31, gfx11=0x43)),
+   ("s_cbranch_join",           dst(),                  src(), op(0x32, gfx8=0x2e, gfx10=-1), InstrClass.Branch),
+   ("s_abs_i32",                dst(U32, SCC),          src(U32), op(0x34, gfx8=0x30, gfx10=0x34, gfx11=0x15)),
+   ("s_mov_fed_b32",            dst(),                  src(), op(0x35, gfx8=-1, gfx10=0x35, gfx11=-1)),
+   ("s_set_gpr_idx_idx",        dst(M0),                src(U32, M0), op(gfx8=0x32, gfx10=-1)),
+   ("s_andn1_saveexec_b64",     dst(U64, SCC, EXEC),    src(U64, EXEC), op(gfx9=0x33, gfx10=0x37, gfx11=0x2d)), #s_and_not0_savexec_b64 in GFX11
+   ("s_orn1_saveexec_b64",      dst(U64, SCC, EXEC),    src(U64, EXEC), op(gfx9=0x34, gfx10=0x38, gfx11=0x2f)), #s_or_not0_savexec_b64 in GFX11
+   ("s_andn1_wrexec_b64",       dst(U64, SCC, EXEC),    src(U64, EXEC), op(gfx9=0x35, gfx10=0x39, gfx11=0x35)), #s_and_not0_wrexec_b64 in GFX11
+   ("s_andn2_wrexec_b64",       dst(U64, SCC, EXEC),    src(U64, EXEC), op(gfx9=0x36, gfx10=0x3a, gfx11=0x37)), #s_and_not1_wrexec_b64 in GFX11
+   ("s_bitreplicate_b64_b32",   dst(U64),               src(U32), op(gfx9=0x37, gfx10=0x3b, gfx11=0x14)),
+   ("s_and_saveexec_b32",       dst(U32, SCC, EXEC_LO), src(U32, EXEC_LO), op(gfx10=0x3c, gfx11=0x20)),
+   ("s_or_saveexec_b32",        dst(U32, SCC, EXEC_LO), src(U32, EXEC_LO), op(gfx10=0x3d, gfx11=0x22)),
+   ("s_xor_saveexec_b32",       dst(U32, SCC, EXEC_LO), src(U32, EXEC_LO), op(gfx10=0x3e, gfx11=0x24)),
+   ("s_andn2_saveexec_b32",     dst(U32, SCC, EXEC_LO), src(U32, EXEC_LO), op(gfx10=0x3f, gfx11=0x30)), #s_and_not1_saveexec_b32 in GFX11
+   ("s_orn2_saveexec_b32",      dst(U32, SCC, EXEC_LO), src(U32, EXEC_LO), op(gfx10=0x40, gfx11=0x32)), #s_or_not1_saveexec_b32 in GFX11
+   ("s_nand_saveexec_b32",      dst(U32, SCC, EXEC_LO), src(U32, EXEC_LO), op(gfx10=0x41, gfx11=0x26)),
+   ("s_nor_saveexec_b32",       dst(U32, SCC, EXEC_LO), src(U32, EXEC_LO), op(gfx10=0x42, gfx11=0x28)),
+   ("s_xnor_saveexec_b32",      dst(U32, SCC, EXEC_LO), src(U32, EXEC_LO), op(gfx10=0x43, gfx11=0x2a)),
+   ("s_andn1_saveexec_b32",     dst(U32, SCC, EXEC_LO), src(U32, EXEC_LO), op(gfx10=0x44, gfx11=0x2c)), #s_and_not0_savexec_b32 in GFX11
+   ("s_orn1_saveexec_b32",      dst(U32, SCC, EXEC_LO), src(U32, EXEC_LO), op(gfx10=0x45, gfx11=0x2e)), #s_or_not0_savexec_b32 in GFX11
+   ("s_andn1_wrexec_b32",       dst(U32, SCC, EXEC_LO), src(U32, EXEC_LO), op(gfx10=0x46, gfx11=0x34)), #s_and_not0_wrexec_b32 in GFX11
+   ("s_andn2_wrexec_b32",       dst(U32, SCC, EXEC_LO), src(U32, EXEC_LO), op(gfx10=0x47, gfx11=0x36)), #s_and_not1_wrexec_b32 in GFX11
+   ("s_movrelsd_2_b32",         dst(U32),               src(U32, M0), op(gfx10=0x49, gfx11=0x44)),
+   ("s_sendmsg_rtn_b32",        dst(U32),               src(U32), op(gfx11=0x4c)),
+   ("s_sendmsg_rtn_b64",        dst(U64),               src(U32), op(gfx11=0x4d)),
+   ("s_ceil_f32",               dst(F32),               src(F32), op(gfx11=0x60), InstrClass.SFPU),
+   ("s_floor_f32",              dst(F32),               src(F32), op(gfx11=0x61), InstrClass.SFPU),
+   ("s_trunc_f32",              dst(F32),               src(F32), op(gfx11=0x62), InstrClass.SFPU),
+   ("s_rndne_f32",              dst(F32),               src(F32), op(gfx11=0x63), InstrClass.SFPU),
+   ("s_cvt_f32_i32",            dst(F32),               src(U32), op(gfx11=0x64), InstrClass.SFPU),
+   ("s_cvt_f32_u32",            dst(F32),               src(U32), op(gfx11=0x65), InstrClass.SFPU),
+   ("s_cvt_i32_f32",            dst(U32),               src(F32), op(gfx11=0x66), InstrClass.SFPU),
+   ("s_cvt_u32_f32",            dst(U32),               src(F32), op(gfx11=0x67), InstrClass.SFPU),
+   ("s_cvt_f16_f32",            dst(F16),               src(F32), op(gfx11=0x68), InstrClass.SFPU),
+   ("s_cvt_f32_f16",            dst(F32),               src(F16), op(gfx11=0x69), InstrClass.SFPU),
+   ("s_cvt_hi_f32_f16",         dst(F32),               src(PkF16), op(gfx11=0x6a), InstrClass.SFPU),
+   ("s_ceil_f16",               dst(F16),               src(F16), op(gfx11=0x6b), InstrClass.SFPU),
+   ("s_floor_f16",              dst(F16),               src(F16), op(gfx11=0x6c), InstrClass.SFPU),
+   ("s_trunc_f16",              dst(F16),               src(F16), op(gfx11=0x6d), InstrClass.SFPU),
+   ("s_rndne_f16",              dst(F16),               src(F16), op(gfx11=0x6e), InstrClass.SFPU),
+   ("s_barrier_signal",         dst(),                  src(U32), op(gfx12=0x4e), InstrClass.Barrier),
+   ("s_barrier_signal_isfirst", dst(SCC),               src(U32), op(gfx12=0x4f), InstrClass.Barrier),
+   ("s_get_barrier_state",      dst(U32),               src(U32), op(gfx12=0x50), InstrClass.Barrier),
+   ("s_barrier_init",           dst(),                  src(U32), op(gfx12=0x51), InstrClass.Barrier),
+   ("s_barrier_join",           dst(),                  src(U32), op(gfx12=0x52), InstrClass.Barrier),
+   ("s_wakeup_barrier",         dst(),                  src(U32), op(gfx12=0x57), InstrClass.Barrier),
+   ("s_sleep_var",              dst(),                  src(U32), op(gfx12=0x58)),
    # actually a pseudo-instruction. it's lowered to SALU during assembly though, so it's useful to identify it as a SOP1.
-   ("p_constaddr_getpc",        dst(2), src(1), op(-1)),
-   ("p_resumeaddr_getpc",       dst(2), src(1), op(-1)),
-   ("p_load_symbol",            dst(1), src(1), op(-1)),
+   ("p_constaddr_getpc",        dst(U64),               src(U32), op(-1)),
+   ("p_resumeaddr_getpc",       dst(U64),               src(U32), op(-1)),
+   ("p_load_symbol",            dst(U32),               src(U32), op(-1)),
 }
 for (name, defs, ops, num, cls) in default_class(SOP1, InstrClass.Salu):
    insn(name, num, Format.SOP1, cls, definitions = defs, operands = ops)
@@ -663,54 +712,54 @@ for (name, defs, ops, num, cls) in default_class(SOP1, InstrClass.Salu):
 
 # SOPC instructions: 2 inputs and 0 outputs (+SCC)
 SOPC = {
-   ("s_cmp_eq_i32",     dst(SCC), src(1, 1), op(0x00)),
-   ("s_cmp_lg_i32",     dst(SCC), src(1, 1), op(0x01)),
-   ("s_cmp_gt_i32",     dst(SCC), src(1, 1), op(0x02)),
-   ("s_cmp_ge_i32",     dst(SCC), src(1, 1), op(0x03)),
-   ("s_cmp_lt_i32",     dst(SCC), src(1, 1), op(0x04)),
-   ("s_cmp_le_i32",     dst(SCC), src(1, 1), op(0x05)),
-   ("s_cmp_eq_u32",     dst(SCC), src(1, 1), op(0x06)),
-   ("s_cmp_lg_u32",     dst(SCC), src(1, 1), op(0x07)),
-   ("s_cmp_gt_u32",     dst(SCC), src(1, 1), op(0x08)),
-   ("s_cmp_ge_u32",     dst(SCC), src(1, 1), op(0x09)),
-   ("s_cmp_lt_u32",     dst(SCC), src(1, 1), op(0x0a)),
-   ("s_cmp_le_u32",     dst(SCC), src(1, 1), op(0x0b)),
-   ("s_bitcmp0_b32",    dst(SCC), src(1, 1), op(0x0c)),
-   ("s_bitcmp1_b32",    dst(SCC), src(1, 1), op(0x0d)),
-   ("s_bitcmp0_b64",    dst(SCC), src(2, 1), op(0x0e)),
-   ("s_bitcmp1_b64",    dst(SCC), src(2, 1), op(0x0f)),
-   ("s_setvskip",       dst(), src(1, 1), op(0x10, gfx10=-1)),
-   ("s_set_gpr_idx_on", dst(M0), src(1, 1, M0), op(gfx8=0x11, gfx10=-1)),
-   ("s_cmp_eq_u64",     dst(SCC), src(2, 2), op(gfx8=0x12, gfx11=0x10)),
-   ("s_cmp_lg_u64",     dst(SCC), src(2, 2), op(gfx8=0x13, gfx11=0x11)),
-   ("s_cmp_lt_f32",     dst(SCC), src(1, 1), op(gfx11=0x41), InstrClass.SFPU),
-   ("s_cmp_eq_f32",     dst(SCC), src(1, 1), op(gfx11=0x42), InstrClass.SFPU),
-   ("s_cmp_le_f32",     dst(SCC), src(1, 1), op(gfx11=0x43), InstrClass.SFPU),
-   ("s_cmp_gt_f32",     dst(SCC), src(1, 1), op(gfx11=0x44), InstrClass.SFPU),
-   ("s_cmp_lg_f32",     dst(SCC), src(1, 1), op(gfx11=0x45), InstrClass.SFPU),
-   ("s_cmp_ge_f32",     dst(SCC), src(1, 1), op(gfx11=0x46), InstrClass.SFPU),
-   ("s_cmp_o_f32",      dst(SCC), src(1, 1), op(gfx11=0x47), InstrClass.SFPU),
-   ("s_cmp_u_f32",      dst(SCC), src(1, 1), op(gfx11=0x48), InstrClass.SFPU),
-   ("s_cmp_nge_f32",    dst(SCC), src(1, 1), op(gfx11=0x49), InstrClass.SFPU),
-   ("s_cmp_nlg_f32",    dst(SCC), src(1, 1), op(gfx11=0x4a), InstrClass.SFPU),
-   ("s_cmp_ngt_f32",    dst(SCC), src(1, 1), op(gfx11=0x4b), InstrClass.SFPU),
-   ("s_cmp_nle_f32",    dst(SCC), src(1, 1), op(gfx11=0x4c), InstrClass.SFPU),
-   ("s_cmp_neq_f32",    dst(SCC), src(1, 1), op(gfx11=0x4d), InstrClass.SFPU),
-   ("s_cmp_nlt_f32",    dst(SCC), src(1, 1), op(gfx11=0x4e), InstrClass.SFPU),
-   ("s_cmp_lt_f16",     dst(SCC), src(1, 1), op(gfx11=0x51), InstrClass.SFPU),
-   ("s_cmp_eq_f16",     dst(SCC), src(1, 1), op(gfx11=0x52), InstrClass.SFPU),
-   ("s_cmp_le_f16",     dst(SCC), src(1, 1), op(gfx11=0x53), InstrClass.SFPU),
-   ("s_cmp_gt_f16",     dst(SCC), src(1, 1), op(gfx11=0x54), InstrClass.SFPU),
-   ("s_cmp_lg_f16",     dst(SCC), src(1, 1), op(gfx11=0x55), InstrClass.SFPU),
-   ("s_cmp_ge_f16",     dst(SCC), src(1, 1), op(gfx11=0x56), InstrClass.SFPU),
-   ("s_cmp_o_f16",      dst(SCC), src(1, 1), op(gfx11=0x57), InstrClass.SFPU),
-   ("s_cmp_u_f16",      dst(SCC), src(1, 1), op(gfx11=0x58), InstrClass.SFPU),
-   ("s_cmp_nge_f16",    dst(SCC), src(1, 1), op(gfx11=0x59), InstrClass.SFPU),
-   ("s_cmp_nlg_f16",    dst(SCC), src(1, 1), op(gfx11=0x5a), InstrClass.SFPU),
-   ("s_cmp_ngt_f16",    dst(SCC), src(1, 1), op(gfx11=0x5b), InstrClass.SFPU),
-   ("s_cmp_nle_f16",    dst(SCC), src(1, 1), op(gfx11=0x5c), InstrClass.SFPU),
-   ("s_cmp_neq_f16",    dst(SCC), src(1, 1), op(gfx11=0x5d), InstrClass.SFPU),
-   ("s_cmp_nlt_f16",    dst(SCC), src(1, 1), op(gfx11=0x5e), InstrClass.SFPU),
+   ("s_cmp_eq_i32",     dst(SCC), src(U32, U32), op(0x00)),
+   ("s_cmp_lg_i32",     dst(SCC), src(U32, U32), op(0x01)),
+   ("s_cmp_gt_i32",     dst(SCC), src(U32, U32), op(0x02)),
+   ("s_cmp_ge_i32",     dst(SCC), src(U32, U32), op(0x03)),
+   ("s_cmp_lt_i32",     dst(SCC), src(U32, U32), op(0x04)),
+   ("s_cmp_le_i32",     dst(SCC), src(U32, U32), op(0x05)),
+   ("s_cmp_eq_u32",     dst(SCC), src(U32, U32), op(0x06)),
+   ("s_cmp_lg_u32",     dst(SCC), src(U32, U32), op(0x07)),
+   ("s_cmp_gt_u32",     dst(SCC), src(U32, U32), op(0x08)),
+   ("s_cmp_ge_u32",     dst(SCC), src(U32, U32), op(0x09)),
+   ("s_cmp_lt_u32",     dst(SCC), src(U32, U32), op(0x0a)),
+   ("s_cmp_le_u32",     dst(SCC), src(U32, U32), op(0x0b)),
+   ("s_bitcmp0_b32",    dst(SCC), src(U32, U32), op(0x0c)),
+   ("s_bitcmp1_b32",    dst(SCC), src(U32, U32), op(0x0d)),
+   ("s_bitcmp0_b64",    dst(SCC), src(U64, U32), op(0x0e)),
+   ("s_bitcmp1_b64",    dst(SCC), src(U64, U32), op(0x0f)),
+   ("s_setvskip",       dst(),    src(U32, U32), op(0x10, gfx10=-1)),
+   ("s_set_gpr_idx_on", dst(M0),  src(U32, U32, M0), op(gfx8=0x11, gfx10=-1)),
+   ("s_cmp_eq_u64",     dst(SCC), src(U64, U64), op(gfx8=0x12, gfx11=0x10)),
+   ("s_cmp_lg_u64",     dst(SCC), src(U64, U64), op(gfx8=0x13, gfx11=0x11)),
+   ("s_cmp_lt_f32",     dst(SCC), src(F32, F32), op(gfx11=0x41), InstrClass.SFPU),
+   ("s_cmp_eq_f32",     dst(SCC), src(F32, F32), op(gfx11=0x42), InstrClass.SFPU),
+   ("s_cmp_le_f32",     dst(SCC), src(F32, F32), op(gfx11=0x43), InstrClass.SFPU),
+   ("s_cmp_gt_f32",     dst(SCC), src(F32, F32), op(gfx11=0x44), InstrClass.SFPU),
+   ("s_cmp_lg_f32",     dst(SCC), src(F32, F32), op(gfx11=0x45), InstrClass.SFPU),
+   ("s_cmp_ge_f32",     dst(SCC), src(F32, F32), op(gfx11=0x46), InstrClass.SFPU),
+   ("s_cmp_o_f32",      dst(SCC), src(F32, F32), op(gfx11=0x47), InstrClass.SFPU),
+   ("s_cmp_u_f32",      dst(SCC), src(F32, F32), op(gfx11=0x48), InstrClass.SFPU),
+   ("s_cmp_nge_f32",    dst(SCC), src(F32, F32), op(gfx11=0x49), InstrClass.SFPU),
+   ("s_cmp_nlg_f32",    dst(SCC), src(F32, F32), op(gfx11=0x4a), InstrClass.SFPU),
+   ("s_cmp_ngt_f32",    dst(SCC), src(F32, F32), op(gfx11=0x4b), InstrClass.SFPU),
+   ("s_cmp_nle_f32",    dst(SCC), src(F32, F32), op(gfx11=0x4c), InstrClass.SFPU),
+   ("s_cmp_neq_f32",    dst(SCC), src(F32, F32), op(gfx11=0x4d), InstrClass.SFPU),
+   ("s_cmp_nlt_f32",    dst(SCC), src(F32, F32), op(gfx11=0x4e), InstrClass.SFPU),
+   ("s_cmp_lt_f16",     dst(SCC), src(F16, F16), op(gfx11=0x51), InstrClass.SFPU),
+   ("s_cmp_eq_f16",     dst(SCC), src(F16, F16), op(gfx11=0x52), InstrClass.SFPU),
+   ("s_cmp_le_f16",     dst(SCC), src(F16, F16), op(gfx11=0x53), InstrClass.SFPU),
+   ("s_cmp_gt_f16",     dst(SCC), src(F16, F16), op(gfx11=0x54), InstrClass.SFPU),
+   ("s_cmp_lg_f16",     dst(SCC), src(F16, F16), op(gfx11=0x55), InstrClass.SFPU),
+   ("s_cmp_ge_f16",     dst(SCC), src(F16, F16), op(gfx11=0x56), InstrClass.SFPU),
+   ("s_cmp_o_f16",      dst(SCC), src(F16, F16), op(gfx11=0x57), InstrClass.SFPU),
+   ("s_cmp_u_f16",      dst(SCC), src(F16, F16), op(gfx11=0x58), InstrClass.SFPU),
+   ("s_cmp_nge_f16",    dst(SCC), src(F16, F16), op(gfx11=0x59), InstrClass.SFPU),
+   ("s_cmp_nlg_f16",    dst(SCC), src(F16, F16), op(gfx11=0x5a), InstrClass.SFPU),
+   ("s_cmp_ngt_f16",    dst(SCC), src(F16, F16), op(gfx11=0x5b), InstrClass.SFPU),
+   ("s_cmp_nle_f16",    dst(SCC), src(F16, F16), op(gfx11=0x5c), InstrClass.SFPU),
+   ("s_cmp_neq_f16",    dst(SCC), src(F16, F16), op(gfx11=0x5d), InstrClass.SFPU),
+   ("s_cmp_nlt_f16",    dst(SCC), src(F16, F16), op(gfx11=0x5e), InstrClass.SFPU),
 }
 for (name, defs, ops, num, cls) in default_class(SOPC, InstrClass.Salu):
    insn(name, num, Format.SOPC, cls, definitions = defs, operands = ops)
@@ -888,87 +937,87 @@ for (name, num) in SMEM:
 # VOP2 instructions: 2 inputs, 1 output (+ optional vcc)
 # TODO: misses some GFX6_7 opcodes which were shifted to VOP3 in GFX8
 VOP2 = {
-   ("v_cndmask_b32",       True, False, dst(1), src(1, 1, VCC), op(0x00, gfx10=0x01)),
-   ("v_readlane_b32",      False, False, dst(1), src(1, 1), op(0x01, gfx8=-1)),
-   ("v_writelane_b32",     False, False, dst(1), src(1, 1, 1), op(0x02, gfx8=-1)),
-   ("v_add_f32",           True, True, dst(1), src(1, 1), op(0x03, gfx8=0x01, gfx10=0x03)),
-   ("v_sub_f32",           True, True, dst(1), src(1, 1), op(0x04, gfx8=0x02, gfx10=0x04)),
-   ("v_subrev_f32",        True, True, dst(1), src(1, 1), op(0x05, gfx8=0x03, gfx10=0x05)),
-   ("v_mac_legacy_f32",    True, True, dst(1), src(1, 1, 1), op(0x06, gfx8=-1, gfx10=0x06, gfx11=-1)), #GFX6,7,10
-   ("v_fmac_legacy_f32",   True, True, dst(1), src(1, 1, 1), op(gfx10=0x06, gfx12=-1)), #GFX10.3+, v_fmac_dx9_zero_f32 in GFX11
-   ("v_mul_legacy_f32",    True, True, dst(1), src(1, 1), op(0x07, gfx8=0x04, gfx10=0x07)), #v_mul_dx9_zero_f32 in GFX11
-   ("v_mul_f32",           True, True, dst(1), src(1, 1), op(0x08, gfx8=0x05, gfx10=0x08)),
-   ("v_mul_i32_i24",       False, False, dst(1), src(1, 1), op(0x09, gfx8=0x06, gfx10=0x09)),
-   ("v_mul_hi_i32_i24",    False, False, dst(1), src(1, 1), op(0x0a, gfx8=0x07, gfx10=0x0a)),
-   ("v_mul_u32_u24",       False, False, dst(1), src(1, 1), op(0x0b, gfx8=0x08, gfx10=0x0b)),
-   ("v_mul_hi_u32_u24",    False, False, dst(1), src(1, 1), op(0x0c, gfx8=0x09, gfx10=0x0c)),
-   ("v_dot4c_i32_i8",      False, False, dst(1), src(1, 1, 1), op(gfx9=0x39, gfx10=0x0d, gfx11=-1)),
-   ("v_min_legacy_f32",    True, True, dst(1), src(1, 1), op(0x0d, gfx8=-1)),
-   ("v_max_legacy_f32",    True, True, dst(1), src(1, 1), op(0x0e, gfx8=-1)),
-   ("v_min_f32",           True, True, dst(1), src(1, 1), op(0x0f, gfx8=0x0a, gfx10=0x0f, gfx12=0x15)), #called v_min_num_f32 in GFX12
-   ("v_max_f32",           True, True, dst(1), src(1, 1), op(0x10, gfx8=0x0b, gfx10=0x10, gfx12=0x16)), #called v_max_num_f32 in GFX12
-   ("v_min_i32",           False, False, dst(1), src(1, 1), op(0x11, gfx8=0x0c, gfx10=0x11)),
-   ("v_max_i32",           False, False, dst(1), src(1, 1), op(0x12, gfx8=0x0d, gfx10=0x12)),
-   ("v_min_u32",           False, False, dst(1), src(1, 1), op(0x13, gfx8=0x0e, gfx10=0x13)),
-   ("v_max_u32",           False, False, dst(1), src(1, 1), op(0x14, gfx8=0x0f, gfx10=0x14)),
-   ("v_lshr_b32",          False, False, dst(1), src(1, 1), op(0x15, gfx8=-1)),
-   ("v_lshrrev_b32",       False, False, dst(1), src(1, 1), op(0x16, gfx8=0x10, gfx10=0x16, gfx11=0x19)),
-   ("v_ashr_i32",          False, False, dst(1), src(1, 1), op(0x17, gfx8=-1)),
-   ("v_ashrrev_i32",       False, False, dst(1), src(1, 1), op(0x18, gfx8=0x11, gfx10=0x18, gfx11=0x1a)),
-   ("v_lshl_b32",          False, False, dst(1), src(1, 1), op(0x19, gfx8=-1)),
-   ("v_lshlrev_b32",       False, False, dst(1), src(1, 1), op(0x1a, gfx8=0x12, gfx10=0x1a, gfx11=0x18)),
-   ("v_and_b32",           False, False, dst(1), src(1, 1), op(0x1b, gfx8=0x13, gfx10=0x1b)),
-   ("v_or_b32",            False, False, dst(1), src(1, 1), op(0x1c, gfx8=0x14, gfx10=0x1c)),
-   ("v_xor_b32",           False, False, dst(1), src(1, 1), op(0x1d, gfx8=0x15, gfx10=0x1d)),
-   ("v_xnor_b32",          False, False, dst(1), src(1, 1), op(gfx10=0x1e)),
-   ("v_mac_f32",           True, True, dst(1), src(1, 1, 1), op(0x1f, gfx8=0x16, gfx10=0x1f, gfx11=-1)),
-   ("v_madmk_f32",         False, False, dst(1), src(1, 1, 1), op(0x20, gfx8=0x17, gfx10=0x20, gfx11=-1)),
-   ("v_madak_f32",         False, False, dst(1), src(1, 1, 1), op(0x21, gfx8=0x18, gfx10=0x21, gfx11=-1)),
-   ("v_mbcnt_hi_u32_b32",  False, False, dst(1), src(1, 1), op(0x24, gfx8=-1)),
-   ("v_add_co_u32",        False, False, dst(1, VCC), src(1, 1), op(0x25, gfx8=0x19, gfx10=-1)), # VOP3B only in RDNA
-   ("v_sub_co_u32",        False, False, dst(1, VCC), src(1, 1), op(0x26, gfx8=0x1a, gfx10=-1)), # VOP3B only in RDNA
-   ("v_subrev_co_u32",     False, False, dst(1, VCC), src(1, 1), op(0x27, gfx8=0x1b, gfx10=-1)), # VOP3B only in RDNA
-   ("v_addc_co_u32",       False, False, dst(1, VCC), src(1, 1, VCC), op(0x28, gfx8=0x1c, gfx10=0x28, gfx11=0x20)), # v_add_co_ci_u32 in RDNA
-   ("v_subb_co_u32",       False, False, dst(1, VCC), src(1, 1, VCC), op(0x29, gfx8=0x1d, gfx10=0x29, gfx11=0x21)), # v_sub_co_ci_u32 in RDNA
-   ("v_subbrev_co_u32",    False, False, dst(1, VCC), src(1, 1, VCC), op(0x2a, gfx8=0x1e, gfx10=0x2a, gfx11=0x22)), # v_subrev_co_ci_u32 in RDNA
-   ("v_fmac_f32",          True, True, dst(1), src(1, 1, 1), op(gfx10=0x2b)),
-   ("v_fmamk_f32",         False, False, dst(1), src(1, 1, 1), op(gfx10=0x2c)),
-   ("v_fmaak_f32",         False, False, dst(1), src(1, 1, 1), op(gfx10=0x2d)),
-   ("v_cvt_pkrtz_f16_f32", True, False, dst(1), src(1, 1), op(0x2f, gfx8=-1, gfx10=0x2f)), #v_cvt_pk_rtz_f16_f32 in GFX11
-   ("v_add_f16",           True, True, dst(1), src(1, 1), op(gfx8=0x1f, gfx10=0x32)),
-   ("v_sub_f16",           True, True, dst(1), src(1, 1), op(gfx8=0x20, gfx10=0x33)),
-   ("v_subrev_f16",        True, True, dst(1), src(1, 1), op(gfx8=0x21, gfx10=0x34)),
-   ("v_mul_f16",           True, True, dst(1), src(1, 1), op(gfx8=0x22, gfx10=0x35)),
-   ("v_mac_f16",           True, True, dst(1), src(1, 1, 1), op(gfx8=0x23, gfx10=-1)),
-   ("v_madmk_f16",         False, False, dst(1), src(1, 1, 1), op(gfx8=0x24, gfx10=-1)),
-   ("v_madak_f16",         False, False, dst(1), src(1, 1, 1), op(gfx8=0x25, gfx10=-1)),
-   ("v_add_u16",           False, False, dst(1), src(1, 1), op(gfx8=0x26, gfx10=-1)),
-   ("v_sub_u16",           False, False, dst(1), src(1, 1), op(gfx8=0x27, gfx10=-1)),
-   ("v_subrev_u16",        False, False, dst(1), src(1, 1), op(gfx8=0x28, gfx10=-1)),
-   ("v_mul_lo_u16",        False, False, dst(1), src(1, 1), op(gfx8=0x29, gfx10=-1)),
-   ("v_lshlrev_b16",       False, False, dst(1), src(1, 1), op(gfx8=0x2a, gfx10=-1)),
-   ("v_lshrrev_b16",       False, False, dst(1), src(1, 1), op(gfx8=0x2b, gfx10=-1)),
-   ("v_ashrrev_i16",       False, False, dst(1), src(1, 1), op(gfx8=0x2c, gfx10=-1)),
-   ("v_max_f16",           True, True, dst(1), src(1, 1), op(gfx8=0x2d, gfx10=0x39, gfx12=0x31)), #called v_max_num_f16 in GFX12
-   ("v_min_f16",           True, True, dst(1), src(1, 1), op(gfx8=0x2e, gfx10=0x3a, gfx12=0x30)), #called v_min_num_f16 in GFX12
-   ("v_max_u16",           False, False, dst(1), src(1, 1), op(gfx8=0x2f, gfx10=-1)),
-   ("v_max_i16",           False, False, dst(1), src(1, 1), op(gfx8=0x30, gfx10=-1)),
-   ("v_min_u16",           False, False, dst(1), src(1, 1), op(gfx8=0x31, gfx10=-1)),
-   ("v_min_i16",           False, False, dst(1), src(1, 1), op(gfx8=0x32, gfx10=-1)),
-   ("v_ldexp_f16",         False, True, dst(1), src(1, 1), op(gfx8=0x33, gfx10=0x3b)),
-   ("v_add_u32",           False, False, dst(1), src(1, 1), op(gfx9=0x34, gfx10=0x25)), # called v_add_nc_u32 in RDNA
-   ("v_sub_u32",           False, False, dst(1), src(1, 1), op(gfx9=0x35, gfx10=0x26)), # called v_sub_nc_u32 in RDNA
-   ("v_subrev_u32",        False, False, dst(1), src(1, 1), op(gfx9=0x36, gfx10=0x27)), # called v_subrev_nc_u32 in RDNA
-   ("v_fmac_f16",          True, True, dst(1), src(1, 1, 1), op(gfx10=0x36)),
-   ("v_fmamk_f16",         False, False, dst(1), src(1, 1, 1), op(gfx10=0x37)),
-   ("v_fmaak_f16",         False, False, dst(1), src(1, 1, 1), op(gfx10=0x38)),
-   ("v_pk_fmac_f16",       False, False, dst(1), src(1, 1, 1), op(gfx10=0x3c)),
-   ("v_dot2c_f32_f16",     False, False, dst(1), src(1, 1, 1), op(gfx9=0x37, gfx10=0x02, gfx12=-1)), #v_dot2acc_f32_f16 in GFX11
-   ("v_add_f64",           True, True, dst(2), src(2, 2), op(gfx12=0x02), InstrClass.ValuDoubleAdd),
-   ("v_mul_f64",           True, True, dst(2), src(2, 2), op(gfx12=0x06), InstrClass.ValuDoubleAdd),
-   ("v_lshlrev_b64",       False, False, dst(2), src(1, 2), op(gfx12=0x1f), InstrClass.Valu64),
-   ("v_min_f64",           True, True, dst(2), src(2, 2), op(gfx12=0x0d), InstrClass.ValuDoubleAdd),
-   ("v_max_f64",           True, True, dst(2), src(2, 2), op(gfx12=0x0e), InstrClass.ValuDoubleAdd),
+   ("v_cndmask_b32",       True,  False, dst(U32),      src(U32, U32, VCC), op(0x00, gfx10=0x01)),
+   ("v_readlane_b32",      False, False, dst(U32),      src(U32, U32), op(0x01, gfx8=-1)),
+   ("v_writelane_b32",     False, False, dst(U32),      src(U32, U32, U32), op(0x02, gfx8=-1)),
+   ("v_add_f32",           True,  True,  dst(F32),      src(F32, F32), op(0x03, gfx8=0x01, gfx10=0x03)),
+   ("v_sub_f32",           True,  True,  dst(F32),      src(F32, F32), op(0x04, gfx8=0x02, gfx10=0x04)),
+   ("v_subrev_f32",        True,  True,  dst(F32),      src(F32, F32), op(0x05, gfx8=0x03, gfx10=0x05)),
+   ("v_mac_legacy_f32",    True,  True,  dst(F32),      src(F32, F32, F32), op(0x06, gfx8=-1, gfx10=0x06, gfx11=-1)), #GFX6,7,10
+   ("v_fmac_legacy_f32",   True,  True,  dst(F32),      src(F32, F32, F32), op(gfx10=0x06, gfx12=-1)), #GFX10.3+, v_fmac_dx9_zero_f32 in GFX11
+   ("v_mul_legacy_f32",    True,  True,  dst(F32),      src(F32, F32), op(0x07, gfx8=0x04, gfx10=0x07)), #v_mul_dx9_zero_f32 in GFX11
+   ("v_mul_f32",           True,  True,  dst(F32),      src(F32, F32), op(0x08, gfx8=0x05, gfx10=0x08)),
+   ("v_mul_i32_i24",       False, False, dst(U32),      src(U32, U32), op(0x09, gfx8=0x06, gfx10=0x09)),
+   ("v_mul_hi_i32_i24",    False, False, dst(U32),      src(U32, U32), op(0x0a, gfx8=0x07, gfx10=0x0a)),
+   ("v_mul_u32_u24",       False, False, dst(U32),      src(U32, U32), op(0x0b, gfx8=0x08, gfx10=0x0b)),
+   ("v_mul_hi_u32_u24",    False, False, dst(U32),      src(U32, U32), op(0x0c, gfx8=0x09, gfx10=0x0c)),
+   ("v_dot4c_i32_i8",      False, False, dst(U32),      src(PkU16, PkU16, U32), op(gfx9=0x39, gfx10=0x0d, gfx11=-1)),
+   ("v_min_legacy_f32",    True,  True,  dst(F32),      src(F32, F32), op(0x0d, gfx8=-1)),
+   ("v_max_legacy_f32",    True,  True,  dst(F32),      src(F32, F32), op(0x0e, gfx8=-1)),
+   ("v_min_f32",           True,  True,  dst(F32),      src(F32, F32), op(0x0f, gfx8=0x0a, gfx10=0x0f, gfx12=0x15)), #called v_min_num_f32 in GFX12
+   ("v_max_f32",           True,  True,  dst(F32),      src(F32, F32), op(0x10, gfx8=0x0b, gfx10=0x10, gfx12=0x16)), #called v_max_num_f32 in GFX12
+   ("v_min_i32",           False, False, dst(U32),      src(U32, U32), op(0x11, gfx8=0x0c, gfx10=0x11)),
+   ("v_max_i32",           False, False, dst(U32),      src(U32, U32), op(0x12, gfx8=0x0d, gfx10=0x12)),
+   ("v_min_u32",           False, False, dst(U32),      src(U32, U32), op(0x13, gfx8=0x0e, gfx10=0x13)),
+   ("v_max_u32",           False, False, dst(U32),      src(U32, U32), op(0x14, gfx8=0x0f, gfx10=0x14)),
+   ("v_lshr_b32",          False, False, dst(U32),      src(U32, U32), op(0x15, gfx8=-1)),
+   ("v_lshrrev_b32",       False, False, dst(U32),      src(U32, U32), op(0x16, gfx8=0x10, gfx10=0x16, gfx11=0x19)),
+   ("v_ashr_i32",          False, False, dst(U32),      src(U32, U32), op(0x17, gfx8=-1)),
+   ("v_ashrrev_i32",       False, False, dst(U32),      src(U32, U32), op(0x18, gfx8=0x11, gfx10=0x18, gfx11=0x1a)),
+   ("v_lshl_b32",          False, False, dst(U32),      src(U32, U32), op(0x19, gfx8=-1)),
+   ("v_lshlrev_b32",       False, False, dst(U32),      src(U32, U32), op(0x1a, gfx8=0x12, gfx10=0x1a, gfx11=0x18)),
+   ("v_and_b32",           False, False, dst(U32),      src(U32, U32), op(0x1b, gfx8=0x13, gfx10=0x1b)),
+   ("v_or_b32",            False, False, dst(U32),      src(U32, U32), op(0x1c, gfx8=0x14, gfx10=0x1c)),
+   ("v_xor_b32",           False, False, dst(U32),      src(U32, U32), op(0x1d, gfx8=0x15, gfx10=0x1d)),
+   ("v_xnor_b32",          False, False, dst(U32),      src(U32, U32), op(gfx10=0x1e)),
+   ("v_mac_f32",           True,  True,  dst(F32),      src(F32, F32, F32), op(0x1f, gfx8=0x16, gfx10=0x1f, gfx11=-1)),
+   ("v_madmk_f32",         False, False, dst(F32),      src(F32, F32, IMM), op(0x20, gfx8=0x17, gfx10=0x20, gfx11=-1)),
+   ("v_madak_f32",         False, False, dst(F32),      src(F32, F32, IMM), op(0x21, gfx8=0x18, gfx10=0x21, gfx11=-1)),
+   ("v_mbcnt_hi_u32_b32",  False, False, dst(U32),      src(U32, U32), op(0x24, gfx8=-1)),
+   ("v_add_co_u32",        False, False, dst(U32, VCC), src(U32, U32), op(0x25, gfx8=0x19, gfx10=-1)), # VOP3B only in RDNA
+   ("v_sub_co_u32",        False, False, dst(U32, VCC), src(U32, U32), op(0x26, gfx8=0x1a, gfx10=-1)), # VOP3B only in RDNA
+   ("v_subrev_co_u32",     False, False, dst(U32, VCC), src(U32, U32), op(0x27, gfx8=0x1b, gfx10=-1)), # VOP3B only in RDNA
+   ("v_addc_co_u32",       False, False, dst(U32, VCC), src(U32, U32, VCC), op(0x28, gfx8=0x1c, gfx10=0x28, gfx11=0x20)), # v_add_co_ci_u32 in RDNA
+   ("v_subb_co_u32",       False, False, dst(U32, VCC), src(U32, U32, VCC), op(0x29, gfx8=0x1d, gfx10=0x29, gfx11=0x21)), # v_sub_co_ci_u32 in RDNA
+   ("v_subbrev_co_u32",    False, False, dst(U32, VCC), src(U32, U32, VCC), op(0x2a, gfx8=0x1e, gfx10=0x2a, gfx11=0x22)), # v_subrev_co_ci_u32 in RDNA
+   ("v_fmac_f32",          True,  True,  dst(F32),      src(F32, F32, F32), op(gfx10=0x2b)),
+   ("v_fmamk_f32",         False, False, dst(F32),      src(F32, F32, IMM), op(gfx10=0x2c)),
+   ("v_fmaak_f32",         False, False, dst(F32),      src(F32, F32, IMM), op(gfx10=0x2d)),
+   ("v_cvt_pkrtz_f16_f32", True,  False, dst(PkF16),    src(F32, F32), op(0x2f, gfx8=-1, gfx10=0x2f)), #v_cvt_pk_rtz_f16_f32 in GFX11
+   ("v_add_f16",           True,  True,  dst(F16),      src(F16, F16), op(gfx8=0x1f, gfx10=0x32)),
+   ("v_sub_f16",           True,  True,  dst(F16),      src(F16, F16), op(gfx8=0x20, gfx10=0x33)),
+   ("v_subrev_f16",        True,  True,  dst(F16),      src(F16, F16), op(gfx8=0x21, gfx10=0x34)),
+   ("v_mul_f16",           True,  True,  dst(F16),      src(F16, F16), op(gfx8=0x22, gfx10=0x35)),
+   ("v_mac_f16",           True,  True,  dst(F16),      src(F16, F16, F16), op(gfx8=0x23, gfx10=-1)),
+   ("v_madmk_f16",         False, False, dst(F16),      src(F16, F16, IMM), op(gfx8=0x24, gfx10=-1)),
+   ("v_madak_f16",         False, False, dst(F16),      src(F16, F16, IMM), op(gfx8=0x25, gfx10=-1)),
+   ("v_add_u16",           False, False, dst(U16),      src(U16, U16), op(gfx8=0x26, gfx10=-1)),
+   ("v_sub_u16",           False, False, dst(U16),      src(U16, U16), op(gfx8=0x27, gfx10=-1)),
+   ("v_subrev_u16",        False, False, dst(U16),      src(U16, U16), op(gfx8=0x28, gfx10=-1)),
+   ("v_mul_lo_u16",        False, False, dst(U16),      src(U16, U16), op(gfx8=0x29, gfx10=-1)),
+   ("v_lshlrev_b16",       False, False, dst(U16),      src(U16, U16), op(gfx8=0x2a, gfx10=-1)),
+   ("v_lshrrev_b16",       False, False, dst(U16),      src(U16, U16), op(gfx8=0x2b, gfx10=-1)),
+   ("v_ashrrev_i16",       False, False, dst(U16),      src(U16, U16), op(gfx8=0x2c, gfx10=-1)),
+   ("v_max_f16",           True,  True,  dst(F16),      src(F16, F16), op(gfx8=0x2d, gfx10=0x39, gfx12=0x31)), #called v_max_num_f16 in GFX12
+   ("v_min_f16",           True,  True,  dst(F16),      src(F16, F16), op(gfx8=0x2e, gfx10=0x3a, gfx12=0x30)), #called v_min_num_f16 in GFX12
+   ("v_max_u16",           False, False, dst(U16),      src(U16, U16), op(gfx8=0x2f, gfx10=-1)),
+   ("v_max_i16",           False, False, dst(U16),      src(U16, U16), op(gfx8=0x30, gfx10=-1)),
+   ("v_min_u16",           False, False, dst(U16),      src(U16, U16), op(gfx8=0x31, gfx10=-1)),
+   ("v_min_i16",           False, False, dst(U16),      src(U16, U16), op(gfx8=0x32, gfx10=-1)),
+   ("v_ldexp_f16",         False, True,  dst(F16),      src(F16, U16), op(gfx8=0x33, gfx10=0x3b)),
+   ("v_add_u32",           False, False, dst(U32),      src(U32, U32), op(gfx9=0x34, gfx10=0x25)), # called v_add_nc_u32 in RDNA
+   ("v_sub_u32",           False, False, dst(U32),      src(U32, U32), op(gfx9=0x35, gfx10=0x26)), # called v_sub_nc_u32 in RDNA
+   ("v_subrev_u32",        False, False, dst(U32),      src(U32, U32), op(gfx9=0x36, gfx10=0x27)), # called v_subrev_nc_u32 in RDNA
+   ("v_fmac_f16",          True,  True,  dst(F16),      src(F16, F16, F16), op(gfx10=0x36)),
+   ("v_fmamk_f16",         False, False, dst(F16),      src(F16, F16, IMM), op(gfx10=0x37)),
+   ("v_fmaak_f16",         False, False, dst(F16),      src(F16, F16, IMM), op(gfx10=0x38)),
+   ("v_pk_fmac_f16",       False, False, dst(PkF16),    src(PkF16, PkF16, PkF16), op(gfx10=0x3c)),
+   ("v_dot2c_f32_f16",     False, False, dst(F32),      src(PkF16, PkF16, F32), op(gfx9=0x37, gfx10=0x02, gfx12=-1)), #v_dot2acc_f32_f16 in GFX11
+   ("v_add_f64",           True,  True,  dst(F64),      src(F64, F64), op(gfx12=0x02), InstrClass.ValuDoubleAdd),
+   ("v_mul_f64",           True,  True,  dst(F64),      src(F64, F64), op(gfx12=0x06), InstrClass.ValuDoubleAdd),
+   ("v_lshlrev_b64",       False, False, dst(U64),      src(U32, U64), op(gfx12=0x1f), InstrClass.Valu64),
+   ("v_min_f64",           True,  True,  dst(F64),      src(F64, F64), op(gfx12=0x0d), InstrClass.ValuDoubleAdd),
+   ("v_max_f64",           True,  True,  dst(F64),      src(F64, F64), op(gfx12=0x0e), InstrClass.ValuDoubleAdd),
 }
 for (name, in_mod, out_mod, defs, ops, num, cls) in default_class(VOP2, InstrClass.Valu32):
    insn(name, num, Format.VOP2, cls, in_mod, out_mod, definitions = defs, operands = ops)
@@ -976,108 +1025,108 @@ for (name, in_mod, out_mod, defs, ops, num, cls) in default_class(VOP2, InstrCla
 
 # VOP1 instructions: instructions with 1 input and 1 output
 VOP1 = {
-   ("v_nop",                      False, False, dst(), src(), op(0x00)),
-   ("v_mov_b32",                  False, False, dst(1), src(1), op(0x01)),
-   ("v_readfirstlane_b32",        False, False, dst(1), src(1), op(0x02)),
-   ("v_cvt_i32_f64",              True, False, dst(1), src(2), op(0x03), InstrClass.ValuDoubleConvert),
-   ("v_cvt_f64_i32",              False, True, dst(2), src(1), op(0x04), InstrClass.ValuDoubleConvert),
-   ("v_cvt_f32_i32",              False, True, dst(1), src(1), op(0x05)),
-   ("v_cvt_f32_u32",              False, True, dst(1), src(1), op(0x06)),
-   ("v_cvt_u32_f32",              True, False, dst(1), src(1), op(0x07)),
-   ("v_cvt_i32_f32",              True, False, dst(1), src(1), op(0x08)),
-   ("v_cvt_f16_f32",              True, True, dst(1), src(1), op(0x0a)),
-   ("p_cvt_f16_f32_rtne",         True, True, dst(1), src(1), op(-1)),
-   ("v_cvt_f32_f16",              True, True, dst(1), src(1), op(0x0b)),
-   ("v_cvt_rpi_i32_f32",          True, False, dst(1), src(1), op(0x0c)), #v_cvt_nearest_i32_f32 in GFX11
-   ("v_cvt_flr_i32_f32",          True, False, dst(1), src(1), op(0x0d)),#v_cvt_floor_i32_f32 in GFX11
-   ("v_cvt_off_f32_i4",           False, True, dst(1), src(1), op(0x0e)),
-   ("v_cvt_f32_f64",              True, True, dst(1), src(2), op(0x0f), InstrClass.ValuDoubleConvert),
-   ("v_cvt_f64_f32",              True, True, dst(2), src(1), op(0x10), InstrClass.ValuDoubleConvert),
-   ("v_cvt_f32_ubyte0",           False, True, dst(1), src(1), op(0x11)),
-   ("v_cvt_f32_ubyte1",           False, True, dst(1), src(1), op(0x12)),
-   ("v_cvt_f32_ubyte2",           False, True, dst(1), src(1), op(0x13)),
-   ("v_cvt_f32_ubyte3",           False, True, dst(1), src(1), op(0x14)),
-   ("v_cvt_u32_f64",              True, False, dst(1), src(2), op(0x15), InstrClass.ValuDoubleConvert),
-   ("v_cvt_f64_u32",              False, True, dst(2), src(1), op(0x16), InstrClass.ValuDoubleConvert),
-   ("v_trunc_f64",                True, True, dst(2), src(2), op(gfx7=0x17), InstrClass.ValuDouble),
-   ("v_ceil_f64",                 True, True, dst(2), src(2), op(gfx7=0x18), InstrClass.ValuDouble),
-   ("v_rndne_f64",                True, True, dst(2), src(2), op(gfx7=0x19), InstrClass.ValuDouble),
-   ("v_floor_f64",                True, True, dst(2), src(2), op(gfx7=0x1a), InstrClass.ValuDouble),
-   ("v_pipeflush",                False, False, dst(), src(), op(gfx10=0x1b)),
-   ("v_fract_f32",                True, True, dst(1), src(1), op(0x20, gfx8=0x1b, gfx10=0x20)),
-   ("v_trunc_f32",                True, True, dst(1), src(1), op(0x21, gfx8=0x1c, gfx10=0x21)),
-   ("v_ceil_f32",                 True, True, dst(1), src(1), op(0x22, gfx8=0x1d, gfx10=0x22)),
-   ("v_rndne_f32",                True, True, dst(1), src(1), op(0x23, gfx8=0x1e, gfx10=0x23)),
-   ("v_floor_f32",                True, True, dst(1), src(1), op(0x24, gfx8=0x1f, gfx10=0x24)),
-   ("v_exp_f32",                  True, True, dst(1), src(1), op(0x25, gfx8=0x20, gfx10=0x25), InstrClass.ValuTranscendental32),
-   ("v_log_clamp_f32",            True, True, dst(1), src(1), op(0x26, gfx8=-1), InstrClass.ValuTranscendental32),
-   ("v_log_f32",                  True, True, dst(1), src(1), op(0x27, gfx8=0x21, gfx10=0x27), InstrClass.ValuTranscendental32),
-   ("v_rcp_clamp_f32",            True, True, dst(1), src(1), op(0x28, gfx8=-1), InstrClass.ValuTranscendental32),
-   ("v_rcp_legacy_f32",           True, True, dst(1), src(1), op(0x29, gfx8=-1), InstrClass.ValuTranscendental32),
-   ("v_rcp_f32",                  True, True, dst(1), src(1), op(0x2a, gfx8=0x22, gfx10=0x2a), InstrClass.ValuTranscendental32),
-   ("v_rcp_iflag_f32",            True, True, dst(1), src(1), op(0x2b, gfx8=0x23, gfx10=0x2b), InstrClass.ValuTranscendental32),
-   ("v_rsq_clamp_f32",            True, True, dst(1), src(1), op(0x2c, gfx8=-1), InstrClass.ValuTranscendental32),
-   ("v_rsq_legacy_f32",           True, True, dst(1), src(1), op(0x2d, gfx8=-1), InstrClass.ValuTranscendental32),
-   ("v_rsq_f32",                  True, True, dst(1), src(1), op(0x2e, gfx8=0x24, gfx10=0x2e), InstrClass.ValuTranscendental32),
-   ("v_rcp_f64",                  True, True, dst(2), src(2), op(0x2f, gfx8=0x25, gfx10=0x2f), InstrClass.ValuDoubleTranscendental),
-   ("v_rcp_clamp_f64",            True, True, dst(2), src(2), op(0x30, gfx8=-1), InstrClass.ValuDoubleTranscendental),
-   ("v_rsq_f64",                  True, True, dst(2), src(2), op(0x31, gfx8=0x26, gfx10=0x31), InstrClass.ValuDoubleTranscendental),
-   ("v_rsq_clamp_f64",            True, True, dst(2), src(2), op(0x32, gfx8=-1), InstrClass.ValuDoubleTranscendental),
-   ("v_sqrt_f32",                 True, True, dst(1), src(1), op(0x33, gfx8=0x27, gfx10=0x33), InstrClass.ValuTranscendental32),
-   ("v_sqrt_f64",                 True, True, dst(2), src(2), op(0x34, gfx8=0x28, gfx10=0x34), InstrClass.ValuDoubleTranscendental),
-   ("v_sin_f32",                  True, True, dst(1), src(1), op(0x35, gfx8=0x29, gfx10=0x35), InstrClass.ValuTranscendental32),
-   ("v_cos_f32",                  True, True, dst(1), src(1), op(0x36, gfx8=0x2a, gfx10=0x36), InstrClass.ValuTranscendental32),
-   ("v_not_b32",                  False, False, dst(1), src(1), op(0x37, gfx8=0x2b, gfx10=0x37)),
-   ("v_bfrev_b32",                False, False, dst(1), src(1), op(0x38, gfx8=0x2c, gfx10=0x38)),
-   ("v_ffbh_u32",                 False, False, dst(1), src(1), op(0x39, gfx8=0x2d, gfx10=0x39)), #v_clz_i32_u32 in GFX11
-   ("v_ffbl_b32",                 False, False, dst(1), src(1), op(0x3a, gfx8=0x2e, gfx10=0x3a)), #v_ctz_i32_b32 in GFX11
-   ("v_ffbh_i32",                 False, False, dst(1), src(1), op(0x3b, gfx8=0x2f, gfx10=0x3b)), #v_cls_i32 in GFX11
-   ("v_frexp_exp_i32_f64",        True, False, dst(1), src(2), op(0x3c, gfx8=0x30, gfx10=0x3c), InstrClass.ValuDouble),
-   ("v_frexp_mant_f64",           True, False, dst(2), src(2), op(0x3d, gfx8=0x31, gfx10=0x3d), InstrClass.ValuDouble),
-   ("v_fract_f64",                True, True, dst(2), src(2), op(0x3e, gfx8=0x32, gfx10=0x3e), InstrClass.ValuDouble),
-   ("v_frexp_exp_i32_f32",        True, False, dst(1), src(1), op(0x3f, gfx8=0x33, gfx10=0x3f)),
-   ("v_frexp_mant_f32",           True, False, dst(1), src(1), op(0x40, gfx8=0x34, gfx10=0x40)),
-   ("v_clrexcp",                  False, False, dst(), src(), op(0x41, gfx8=0x35, gfx10=0x41, gfx11=-1)),
-   ("v_movreld_b32",              False, False, dst(1), src(1, M0), op(0x42, gfx8=0x36, gfx9=-1, gfx10=0x42)),
-   ("v_movrels_b32",              False, False, dst(1), src(1, M0), op(0x43, gfx8=0x37, gfx9=-1, gfx10=0x43)),
-   ("v_movrelsd_b32",             False, False, dst(1), src(1, M0), op(0x44, gfx8=0x38, gfx9=-1, gfx10=0x44)),
-   ("v_movrelsd_2_b32",           False, False, dst(1), src(1, M0), op(gfx10=0x48)),
-   ("v_screen_partition_4se_b32", False, False, dst(1), src(1), op(gfx9=0x37, gfx10=-1)),
-   ("v_cvt_f16_u16",              False, True, dst(1), src(1), op(gfx8=0x39, gfx10=0x50)),
-   ("v_cvt_f16_i16",              False, True, dst(1), src(1), op(gfx8=0x3a, gfx10=0x51)),
-   ("v_cvt_u16_f16",              True, False, dst(1), src(1), op(gfx8=0x3b, gfx10=0x52)),
-   ("v_cvt_i16_f16",              True, False, dst(1), src(1), op(gfx8=0x3c, gfx10=0x53)),
-   ("v_rcp_f16",                  True, True, dst(1), src(1), op(gfx8=0x3d, gfx10=0x54), InstrClass.ValuTranscendental32),
-   ("v_sqrt_f16",                 True, True, dst(1), src(1), op(gfx8=0x3e, gfx10=0x55), InstrClass.ValuTranscendental32),
-   ("v_rsq_f16",                  True, True, dst(1), src(1), op(gfx8=0x3f, gfx10=0x56), InstrClass.ValuTranscendental32),
-   ("v_log_f16",                  True, True, dst(1), src(1), op(gfx8=0x40, gfx10=0x57), InstrClass.ValuTranscendental32),
-   ("v_exp_f16",                  True, True, dst(1), src(1), op(gfx8=0x41, gfx10=0x58), InstrClass.ValuTranscendental32),
-   ("v_frexp_mant_f16",           True, False, dst(1), src(1), op(gfx8=0x42, gfx10=0x59)),
-   ("v_frexp_exp_i16_f16",        True, False, dst(1), src(1), op(gfx8=0x43, gfx10=0x5a)),
-   ("v_floor_f16",                True, True, dst(1), src(1), op(gfx8=0x44, gfx10=0x5b)),
-   ("v_ceil_f16",                 True, True, dst(1), src(1), op(gfx8=0x45, gfx10=0x5c)),
-   ("v_trunc_f16",                True, True, dst(1), src(1), op(gfx8=0x46, gfx10=0x5d)),
-   ("v_rndne_f16",                True, True, dst(1), src(1), op(gfx8=0x47, gfx10=0x5e)),
-   ("v_fract_f16",                True, True, dst(1), src(1), op(gfx8=0x48, gfx10=0x5f)),
-   ("v_sin_f16",                  True, True, dst(1), src(1), op(gfx8=0x49, gfx10=0x60), InstrClass.ValuTranscendental32),
-   ("v_cos_f16",                  True, True, dst(1), src(1), op(gfx8=0x4a, gfx10=0x61), InstrClass.ValuTranscendental32),
-   ("v_exp_legacy_f32",           True, True, dst(1), src(1), op(gfx7=0x46, gfx8=0x4b, gfx10=-1), InstrClass.ValuTranscendental32),
-   ("v_log_legacy_f32",           True, True, dst(1), src(1), op(gfx7=0x45, gfx8=0x4c, gfx10=-1), InstrClass.ValuTranscendental32),
-   ("v_sat_pk_u8_i16",            False, False, dst(1), src(1), op(gfx9=0x4f, gfx10=0x62)),
-   ("v_cvt_norm_i16_f16",         True, False, dst(1), src(1), op(gfx9=0x4d, gfx10=0x63)),
-   ("v_cvt_norm_u16_f16",         True, False, dst(1), src(1), op(gfx9=0x4e, gfx10=0x64)),
-   ("v_swap_b32",                 False, False, dst(1, 1), src(1, 1), op(gfx9=0x51, gfx10=0x65)),
-   ("v_swaprel_b32",              False, False, dst(1, 1), src(1, 1, M0), op(gfx10=0x68)),
-   ("v_permlane64_b32",           False, False, dst(1), src(1), op(gfx11=0x67)), #cannot use VOP3
-   ("v_not_b16",                  False, False, dst(1), src(1), op(gfx11=0x69)),
-   ("v_cvt_i32_i16",              False, False, dst(1), src(1), op(gfx11=0x6a)),
-   ("v_cvt_u32_u16",              False, False, dst(1), src(1), op(gfx11=0x6b)),
-   ("v_mov_b16",                  True, False, dst(1), src(1), op(gfx11=0x1c)),
-   ("v_swap_b16",                 False, False, dst(1, 1), src(1, 1), op(gfx11=0x66)),
-   ("v_cvt_f32_fp8",              False, False, dst(1), src(1), op(gfx12=0x6c)),
-   ("v_cvt_f32_bf8",              False, False, dst(1), src(1), op(gfx12=0x6d)),
-   ("v_cvt_pk_f32_fp8",           False, False, dst(2), src(1), op(gfx12=0x6e)),
-   ("v_cvt_pk_f32_bf8",           False, False, dst(2), src(1), op(gfx12=0x6f)),
+   ("v_nop",                      False, False, dst(),    src(), op(0x00)),
+   ("v_mov_b32",                  False, False, dst(U32), src(U32), op(0x01)),
+   ("v_readfirstlane_b32",        False, False, dst(U32), src(U32), op(0x02)),
+   ("v_cvt_i32_f64",              True,  False, dst(U32), src(F64), op(0x03), InstrClass.ValuDoubleConvert),
+   ("v_cvt_f64_i32",              False, True,  dst(F64), src(U32), op(0x04), InstrClass.ValuDoubleConvert),
+   ("v_cvt_f32_i32",              False, True,  dst(F32), src(U32), op(0x05)),
+   ("v_cvt_f32_u32",              False, True,  dst(F32), src(U32), op(0x06)),
+   ("v_cvt_u32_f32",              True,  False, dst(U32), src(F32), op(0x07)),
+   ("v_cvt_i32_f32",              True,  False, dst(U32), src(F32), op(0x08)),
+   ("v_cvt_f16_f32",              True,  True,  dst(F16), src(F32), op(0x0a)),
+   ("p_cvt_f16_f32_rtne",         True,  True,  dst(F16), src(F32), op(-1)),
+   ("v_cvt_f32_f16",              True,  True,  dst(F32), src(F16), op(0x0b)),
+   ("v_cvt_rpi_i32_f32",          True,  False, dst(U32), src(F32), op(0x0c)), #v_cvt_nearest_i32_f32 in GFX11
+   ("v_cvt_flr_i32_f32",          True,  False, dst(U32), src(F32), op(0x0d)),#v_cvt_floor_i32_f32 in GFX11
+   ("v_cvt_off_f32_i4",           False, True,  dst(F32), src(U32), op(0x0e)),
+   ("v_cvt_f32_f64",              True,  True,  dst(F32), src(F64), op(0x0f), InstrClass.ValuDoubleConvert),
+   ("v_cvt_f64_f32",              True,  True,  dst(F64), src(F32), op(0x10), InstrClass.ValuDoubleConvert),
+   ("v_cvt_f32_ubyte0",           False, True,  dst(F32), src(U32), op(0x11)),
+   ("v_cvt_f32_ubyte1",           False, True,  dst(F32), src(U32), op(0x12)),
+   ("v_cvt_f32_ubyte2",           False, True,  dst(F32), src(U32), op(0x13)),
+   ("v_cvt_f32_ubyte3",           False, True,  dst(F32), src(U32), op(0x14)),
+   ("v_cvt_u32_f64",              True,  False, dst(U32), src(F64), op(0x15), InstrClass.ValuDoubleConvert),
+   ("v_cvt_f64_u32",              False, True,  dst(F64), src(U32), op(0x16), InstrClass.ValuDoubleConvert),
+   ("v_trunc_f64",                True,  True,  dst(F64), src(F64), op(gfx7=0x17), InstrClass.ValuDouble),
+   ("v_ceil_f64",                 True,  True,  dst(F64), src(F64), op(gfx7=0x18), InstrClass.ValuDouble),
+   ("v_rndne_f64",                True,  True,  dst(F64), src(F64), op(gfx7=0x19), InstrClass.ValuDouble),
+   ("v_floor_f64",                True,  True,  dst(F64), src(F64), op(gfx7=0x1a), InstrClass.ValuDouble),
+   ("v_pipeflush",                False, False, dst(),    src(), op(gfx10=0x1b)),
+   ("v_fract_f32",                True,  True,  dst(F32), src(F32), op(0x20, gfx8=0x1b, gfx10=0x20)),
+   ("v_trunc_f32",                True,  True,  dst(F32), src(F32), op(0x21, gfx8=0x1c, gfx10=0x21)),
+   ("v_ceil_f32",                 True,  True,  dst(F32), src(F32), op(0x22, gfx8=0x1d, gfx10=0x22)),
+   ("v_rndne_f32",                True,  True,  dst(F32), src(F32), op(0x23, gfx8=0x1e, gfx10=0x23)),
+   ("v_floor_f32",                True,  True,  dst(F32), src(F32), op(0x24, gfx8=0x1f, gfx10=0x24)),
+   ("v_exp_f32",                  True,  True,  dst(F32), src(F32), op(0x25, gfx8=0x20, gfx10=0x25), InstrClass.ValuTranscendental32),
+   ("v_log_clamp_f32",            True,  True,  dst(F32), src(F32), op(0x26, gfx8=-1), InstrClass.ValuTranscendental32),
+   ("v_log_f32",                  True,  True,  dst(F32), src(F32), op(0x27, gfx8=0x21, gfx10=0x27), InstrClass.ValuTranscendental32),
+   ("v_rcp_clamp_f32",            True,  True,  dst(F32), src(F32), op(0x28, gfx8=-1), InstrClass.ValuTranscendental32),
+   ("v_rcp_legacy_f32",           True,  True,  dst(F32), src(F32), op(0x29, gfx8=-1), InstrClass.ValuTranscendental32),
+   ("v_rcp_f32",                  True,  True,  dst(F32), src(F32), op(0x2a, gfx8=0x22, gfx10=0x2a), InstrClass.ValuTranscendental32),
+   ("v_rcp_iflag_f32",            True,  True,  dst(F32), src(F32), op(0x2b, gfx8=0x23, gfx10=0x2b), InstrClass.ValuTranscendental32),
+   ("v_rsq_clamp_f32",            True,  True,  dst(F32), src(F32), op(0x2c, gfx8=-1), InstrClass.ValuTranscendental32),
+   ("v_rsq_legacy_f32",           True,  True,  dst(F32), src(F32), op(0x2d, gfx8=-1), InstrClass.ValuTranscendental32),
+   ("v_rsq_f32",                  True,  True,  dst(F32), src(F32), op(0x2e, gfx8=0x24, gfx10=0x2e), InstrClass.ValuTranscendental32),
+   ("v_rcp_f64",                  True,  True,  dst(F64), src(F64), op(0x2f, gfx8=0x25, gfx10=0x2f), InstrClass.ValuDoubleTranscendental),
+   ("v_rcp_clamp_f64",            True,  True,  dst(F64), src(F64), op(0x30, gfx8=-1), InstrClass.ValuDoubleTranscendental),
+   ("v_rsq_f64",                  True,  True,  dst(F64), src(F64), op(0x31, gfx8=0x26, gfx10=0x31), InstrClass.ValuDoubleTranscendental),
+   ("v_rsq_clamp_f64",            True,  True,  dst(F64), src(F64), op(0x32, gfx8=-1), InstrClass.ValuDoubleTranscendental),
+   ("v_sqrt_f32",                 True,  True,  dst(F32), src(F32), op(0x33, gfx8=0x27, gfx10=0x33), InstrClass.ValuTranscendental32),
+   ("v_sqrt_f64",                 True,  True,  dst(F64), src(F64), op(0x34, gfx8=0x28, gfx10=0x34), InstrClass.ValuDoubleTranscendental),
+   ("v_sin_f32",                  True,  True,  dst(F32), src(F32), op(0x35, gfx8=0x29, gfx10=0x35), InstrClass.ValuTranscendental32),
+   ("v_cos_f32",                  True,  True,  dst(F32), src(F32), op(0x36, gfx8=0x2a, gfx10=0x36), InstrClass.ValuTranscendental32),
+   ("v_not_b32",                  False, False, dst(U32), src(U32), op(0x37, gfx8=0x2b, gfx10=0x37)),
+   ("v_bfrev_b32",                False, False, dst(U32), src(U32), op(0x38, gfx8=0x2c, gfx10=0x38)),
+   ("v_ffbh_u32",                 False, False, dst(U32), src(U32), op(0x39, gfx8=0x2d, gfx10=0x39)), #v_clz_i32_u32 in GFX11
+   ("v_ffbl_b32",                 False, False, dst(U32), src(U32), op(0x3a, gfx8=0x2e, gfx10=0x3a)), #v_ctz_i32_b32 in GFX11
+   ("v_ffbh_i32",                 False, False, dst(U32), src(U32), op(0x3b, gfx8=0x2f, gfx10=0x3b)), #v_cls_i32 in GFX11
+   ("v_frexp_exp_i32_f64",        True,  False, dst(U32), src(F64), op(0x3c, gfx8=0x30, gfx10=0x3c), InstrClass.ValuDouble),
+   ("v_frexp_mant_f64",           True,  False, dst(F64), src(F64), op(0x3d, gfx8=0x31, gfx10=0x3d), InstrClass.ValuDouble),
+   ("v_fract_f64",                True,  True,  dst(F64), src(F64), op(0x3e, gfx8=0x32, gfx10=0x3e), InstrClass.ValuDouble),
+   ("v_frexp_exp_i32_f32",        True,  False, dst(U32), src(F32), op(0x3f, gfx8=0x33, gfx10=0x3f)),
+   ("v_frexp_mant_f32",           True,  False, dst(F32), src(F32), op(0x40, gfx8=0x34, gfx10=0x40)),
+   ("v_clrexcp",                  False, False, dst(),  src(), op(0x41, gfx8=0x35, gfx10=0x41, gfx11=-1)),
+   ("v_movreld_b32",              False, False, dst(U32), src(U32, M0), op(0x42, gfx8=0x36, gfx9=-1, gfx10=0x42)),
+   ("v_movrels_b32",              False, False, dst(U32), src(U32, M0), op(0x43, gfx8=0x37, gfx9=-1, gfx10=0x43)),
+   ("v_movrelsd_b32",             False, False, dst(U32), src(U32, M0), op(0x44, gfx8=0x38, gfx9=-1, gfx10=0x44)),
+   ("v_movrelsd_2_b32",           False, False, dst(U32), src(U32, M0), op(gfx10=0x48)),
+   ("v_screen_partition_4se_b32", False, False, dst(U32), src(U32), op(gfx9=0x37, gfx10=-1)),
+   ("v_cvt_f16_u16",              False, True,  dst(F16), src(U16), op(gfx8=0x39, gfx10=0x50)),
+   ("v_cvt_f16_i16",              False, True,  dst(F16), src(U16), op(gfx8=0x3a, gfx10=0x51)),
+   ("v_cvt_u16_f16",              True,  False, dst(U16), src(F16), op(gfx8=0x3b, gfx10=0x52)),
+   ("v_cvt_i16_f16",              True,  False, dst(U16), src(F16), op(gfx8=0x3c, gfx10=0x53)),
+   ("v_rcp_f16",                  True,  True,  dst(F16), dst(F16), op(gfx8=0x3d, gfx10=0x54), InstrClass.ValuTranscendental32),
+   ("v_sqrt_f16",                 True,  True,  dst(F16), dst(F16), op(gfx8=0x3e, gfx10=0x55), InstrClass.ValuTranscendental32),
+   ("v_rsq_f16",                  True,  True,  dst(F16), dst(F16), op(gfx8=0x3f, gfx10=0x56), InstrClass.ValuTranscendental32),
+   ("v_log_f16",                  True,  True,  dst(F16), dst(F16), op(gfx8=0x40, gfx10=0x57), InstrClass.ValuTranscendental32),
+   ("v_exp_f16",                  True,  True,  dst(F16), dst(F16), op(gfx8=0x41, gfx10=0x58), InstrClass.ValuTranscendental32),
+   ("v_frexp_mant_f16",           True,  False, dst(F16), dst(F16), op(gfx8=0x42, gfx10=0x59)),
+   ("v_frexp_exp_i16_f16",        True,  False, dst(U16), dst(F16), op(gfx8=0x43, gfx10=0x5a)),
+   ("v_floor_f16",                True,  True,  dst(F16), dst(F16), op(gfx8=0x44, gfx10=0x5b)),
+   ("v_ceil_f16",                 True,  True,  dst(F16), dst(F16), op(gfx8=0x45, gfx10=0x5c)),
+   ("v_trunc_f16",                True,  True,  dst(F16), dst(F16), op(gfx8=0x46, gfx10=0x5d)),
+   ("v_rndne_f16",                True,  True,  dst(F16), dst(F16), op(gfx8=0x47, gfx10=0x5e)),
+   ("v_fract_f16",                True,  True,  dst(F16), dst(F16), op(gfx8=0x48, gfx10=0x5f)),
+   ("v_sin_f16",                  True,  True,  dst(F16), dst(F16), op(gfx8=0x49, gfx10=0x60), InstrClass.ValuTranscendental32),
+   ("v_cos_f16",                  True,  True,  dst(F16), dst(F16), op(gfx8=0x4a, gfx10=0x61), InstrClass.ValuTranscendental32),
+   ("v_exp_legacy_f32",           True,  True,  dst(F32), src(F32), op(gfx7=0x46, gfx8=0x4b, gfx10=-1), InstrClass.ValuTranscendental32),
+   ("v_log_legacy_f32",           True,  True,  dst(F32), src(F32), op(gfx7=0x45, gfx8=0x4c, gfx10=-1), InstrClass.ValuTranscendental32),
+   ("v_sat_pk_u8_i16",            False, False, dst(U16), src(U32), op(gfx9=0x4f, gfx10=0x62)),
+   ("v_cvt_norm_i16_f16",         True,  False, dst(U16), src(F16), op(gfx9=0x4d, gfx10=0x63)),
+   ("v_cvt_norm_u16_f16",         True,  False, dst(U16), src(F16), op(gfx9=0x4e, gfx10=0x64)),
+   ("v_swap_b32",                 False, False, dst(U32, U32), src(U32, U32), op(gfx9=0x51, gfx10=0x65)),
+   ("v_swaprel_b32",              False, False, dst(U32, U32), src(U32, U32, M0), op(gfx10=0x68)),
+   ("v_permlane64_b32",           False, False, dst(U32), src(U32), op(gfx11=0x67)), #cannot use VOP3
+   ("v_not_b16",                  False, False, dst(U16), src(U16), op(gfx11=0x69)),
+   ("v_cvt_i32_i16",              False, False, dst(U32), src(U16), op(gfx11=0x6a)),
+   ("v_cvt_u32_u16",              False, False, dst(U32), src(U16), op(gfx11=0x6b)),
+   ("v_mov_b16",                  True,  False, dst(U16), src(U16), op(gfx11=0x1c)),
+   ("v_swap_b16",                 False, False, dst(U16, U16), src(U16, U16), op(gfx11=0x66)),
+   ("v_cvt_f32_fp8",              False, False, dst(F32), src(F8), op(gfx12=0x6c)),
+   ("v_cvt_f32_bf8",              False, False, dst(F32), src(BF8), op(gfx12=0x6d)),
+   ("v_cvt_pk_f32_fp8",           False, False, dst(PkF32), src(PkF8), op(gfx12=0x6e)),
+   ("v_cvt_pk_f32_bf8",           False, False, dst(PkF32), src(PkBF8), op(gfx12=0x6f)),
 }
 for (name, in_mod, out_mod, defs, ops, num, cls) in default_class(VOP1, InstrClass.Valu32):
    insn(name, num, Format.VOP1, cls, in_mod, out_mod, definitions = defs, operands = ops)
@@ -1086,30 +1135,31 @@ for (name, in_mod, out_mod, defs, ops, num, cls) in default_class(VOP1, InstrCla
 # VOPC instructions:
 
 VOPC_CLASS = {
-   ("v_cmp_class_f32",  dst(VCC), src(1, 1), op(0x88, gfx8=0x10, gfx10=0x88, gfx11=0x7e)),
-   ("v_cmp_class_f16",  dst(VCC), src(1, 1), op(gfx8=0x14, gfx10=0x8f, gfx11=0x7d)),
-   ("v_cmpx_class_f32", dst(EXEC), src(1, 1), op(0x98, gfx8=0x11, gfx10=0x98, gfx11=0xfe)),
-   ("v_cmpx_class_f16", dst(EXEC), src(1, 1), op(gfx8=0x15, gfx10=0x9f, gfx11=0xfd)),
-   ("v_cmp_class_f64",  dst(VCC), src(2, 1), op(0xa8, gfx8=0x12, gfx10=0xa8, gfx11=0x7f), InstrClass.ValuDouble),
-   ("v_cmpx_class_f64", dst(EXEC), src(2, 1), op(0xb8, gfx8=0x13, gfx10=0xb8, gfx11=0xff), InstrClass.ValuDouble),
+   ("v_cmp_class_f32",  dst(VCC), src(F32, U32), op(0x88, gfx8=0x10, gfx10=0x88, gfx11=0x7e)),
+   ("v_cmp_class_f16",  dst(VCC), src(F16, U16), op(gfx8=0x14, gfx10=0x8f, gfx11=0x7d)),
+   ("v_cmpx_class_f32", dst(EXEC), src(F32, U32), op(0x98, gfx8=0x11, gfx10=0x98, gfx11=0xfe)),
+   ("v_cmpx_class_f16", dst(EXEC), src(F16, U16), op(gfx8=0x15, gfx10=0x9f, gfx11=0xfd)),
+   ("v_cmp_class_f64",  dst(VCC), src(F64, U32), op(0xa8, gfx8=0x12, gfx10=0xa8, gfx11=0x7f), InstrClass.ValuDouble),
+   ("v_cmpx_class_f64", dst(EXEC), src(F64, U32), op(0xb8, gfx8=0x13, gfx10=0xb8, gfx11=0xff), InstrClass.ValuDouble),
 }
 for (name, defs, ops, num, cls) in default_class(VOPC_CLASS, InstrClass.Valu32):
     insn(name, num, Format.VOPC, cls, True, False, definitions = defs, operands = ops)
 
 VopcDataType = collections.namedtuple('VopcDataTypeInfo',
-                                      ['kind', 'size', 'gfx6', 'gfx8', 'gfx10', 'gfx11'])
-
-#                  kind, size, gfx6, gfx8, gfx10,gfx11
-F16 = VopcDataType('f',  16,      0, 0x20, 0xc8, 0x00)
-F32 = VopcDataType('f',  32,   0x00, 0x40, 0x00, 0x10)
-F64 = VopcDataType('f',  64,   0x20, 0x60, 0x20, 0x20)
-I16 = VopcDataType('i',  16,      0, 0xa0, 0x88, 0x30)
-I32 = VopcDataType('i',  32,   0x80, 0xc0, 0x80, 0x40)
-I64 = VopcDataType('i',  64,   0xa0, 0xe0, 0xa0, 0x50)
-U16 = VopcDataType('u',  16,      0, 0xa8, 0xa8, 0x38)
-U32 = VopcDataType('u',  32,   0xc0, 0xc8, 0xc0, 0x48)
-U64 = VopcDataType('u',  64,   0xe0, 0xe8, 0xe0, 0x58)
-dtypes = [F16, F32, F64, I16, I32, I64, U16, U32, U64]
+                                      ['type', 'kind', 'size', 'gfx6', 'gfx8', 'gfx10', 'gfx11'])
+
+#               type, kind, size, gfx6, gfx8, gfx10,gfx11
+dtypes = [
+   VopcDataType(F16,  'f',  16,      0, 0x20, 0xc8, 0x00),
+   VopcDataType(F32,  'f',  32,   0x00, 0x40, 0x00, 0x10),
+   VopcDataType(F64,  'f',  64,   0x20, 0x60, 0x20, 0x20),
+   VopcDataType(U16,  'i',  16,      0, 0xa0, 0x88, 0x30),
+   VopcDataType(U32,  'i',  32,   0x80, 0xc0, 0x80, 0x40),
+   VopcDataType(I64,  'i',  64,   0xa0, 0xe0, 0xa0, 0x50),
+   VopcDataType(U16,  'u',  16,      0, 0xa8, 0xa8, 0x38),
+   VopcDataType(U32,  'u',  32,   0xc0, 0xc8, 0xc0, 0x48),
+   VopcDataType(U64,  'u',  64,   0xe0, 0xe8, 0xe0, 0x58),
+]
 
 COMPF = ["f", "lt", "eq", "le", "gt", "lg", "ge", "o", "u", "nge", "nlg", "ngt", "nle", "neq", "nlt", "tru"]
 COMPI = ["f", "lt", "eq", "le", "gt", "lg", "ge", "tru"]
@@ -1122,7 +1172,7 @@ for comp, dtype, cmps, cmpx in itertools.product(range(16), dtypes, range(1), ra
 
    gfx6 = comp | (cmpx<<4) | (cmps<<6) | dtype.gfx6
    gfx8 = comp | (cmpx<<4) | dtype.gfx8
-   if dtype == F16:
+   if dtype.type == F16:
       gfx10 = (comp & 0x7) | ((comp & 0x8) << 2) | (cmpx<<4) | dtype.gfx10
    else:
       gfx10 = comp | (cmpx<<4) | dtype.gfx10
@@ -1136,7 +1186,7 @@ for comp, dtype, cmps, cmpx in itertools.product(range(16), dtypes, range(1), ra
    if dtype.size == 16:
       gfx6 = -1
 
-   if dtype in [I16, U16] and comp in [0, 7]:
+   if dtype.type == U16 and comp in [0, 7]:
       gfx10 = -1
       gfx11 = -1
 
@@ -1146,56 +1196,57 @@ for comp, dtype, cmps, cmpx in itertools.product(range(16), dtypes, range(1), ra
       gfx12 = -1 if comp in [0, 15] else gfx11
 
    cls = InstrClass.Valu32
-   if dtype == F64:
+   if dtype.type == F64:
       cls = InstrClass.ValuDouble
-   elif dtype in [I64, U64]:
+   elif dtype.type in [I64, U64]:
       cls = InstrClass.Valu64
 
    enc = Opcode(gfx6, gfx6, gfx8, gfx8, gfx10, gfx11, gfx12)
    insn(name, enc, Format.VOPC, cls, dtype.kind == 'f', False,
         definitions = dst(EXEC if cmpx else VCC),
-        operands = src(2, 2) if dtype.size == 64 else src(1, 1))
+        operands = src(dtype.type, dtype.type))
 
 
 # VOPP instructions: packed 16bit instructions - 2 or 3 inputs and 1 output
 VOPP = {
-   ("v_pk_mad_i16",     False, dst(1), src(1, 1, 1), op(gfx9=0x00)),
-   ("v_pk_mul_lo_u16",  False, dst(1), src(1, 1), op(gfx9=0x01)),
-   ("v_pk_add_i16",     False, dst(1), src(1, 1), op(gfx9=0x02)),
-   ("v_pk_sub_i16",     False, dst(1), src(1, 1), op(gfx9=0x03)),
-   ("v_pk_lshlrev_b16", False, dst(1), src(1, 1), op(gfx9=0x04)),
-   ("v_pk_lshrrev_b16", False, dst(1), src(1, 1), op(gfx9=0x05)),
-   ("v_pk_ashrrev_i16", False, dst(1), src(1, 1), op(gfx9=0x06)),
-   ("v_pk_max_i16",     False, dst(1), src(1, 1), op(gfx9=0x07)),
-   ("v_pk_min_i16",     False, dst(1), src(1, 1), op(gfx9=0x08)),
-   ("v_pk_mad_u16",     False, dst(1), src(1, 1, 1), op(gfx9=0x09)),
-   ("v_pk_add_u16",     False, dst(1), src(1, 1), op(gfx9=0x0a)),
-   ("v_pk_sub_u16",     False, dst(1), src(1, 1), op(gfx9=0x0b)),
-   ("v_pk_max_u16",     False, dst(1), src(1, 1), op(gfx9=0x0c)),
-   ("v_pk_min_u16",     False, dst(1), src(1, 1), op(gfx9=0x0d)),
-   ("v_pk_fma_f16",     True, dst(1), src(1, 1, 1), op(gfx9=0x0e)),
-   ("v_pk_add_f16",     True, dst(1), src(1, 1), op(gfx9=0x0f)),
-   ("v_pk_mul_f16",     True, dst(1), src(1, 1), op(gfx9=0x10)),
-   ("v_pk_min_f16",     True, dst(1), src(1, 1), op(gfx9=0x11, gfx12=0x1b)), # called v_pk_min_num_f16 in GFX12
-   ("v_pk_max_f16",     True, dst(1), src(1, 1), op(gfx9=0x12, gfx12=0x1c)), # called v_pk_min_num_f16 in GFX12
-   ("v_pk_minimum_f16", True, dst(1), src(1, 1), op(gfx12=0x1d)),
-   ("v_pk_maximum_f16", True, dst(1), src(1, 1), op(gfx12=0x1e)),
-   ("v_fma_mix_f32",    True, dst(1), src(1, 1, 1), op(gfx9=0x20)), # v_mad_mix_f32 in VEGA ISA, v_fma_mix_f32 in RDNA ISA
-   ("v_fma_mixlo_f16",  True, dst(1), src(1, 1, 1), op(gfx9=0x21)), # v_mad_mixlo_f16 in VEGA ISA, v_fma_mixlo_f16 in RDNA ISA
-   ("v_fma_mixhi_f16",  True, dst(1), src(1, 1, 1), op(gfx9=0x22)), # v_mad_mixhi_f16 in VEGA ISA, v_fma_mixhi_f16 in RDNA ISA
-   ("v_dot2_i32_i16",      False, dst(1), src(1, 1, 1), op(gfx9=0x26, gfx10=0x14, gfx11=-1)),
-   ("v_dot2_u32_u16",      False, dst(1), src(1, 1, 1), op(gfx9=0x27, gfx10=0x15, gfx11=-1)),
-   ("v_dot4_i32_iu8",      False, dst(1), src(1, 1, 1), op(gfx11=0x16)),
-   ("v_dot4_i32_i8",       False, dst(1), src(1, 1, 1), op(gfx9=0x28, gfx10=0x16, gfx11=-1)),
-   ("v_dot4_u32_u8",       False, dst(1), src(1, 1, 1), op(gfx9=0x29, gfx10=0x17)),
-   ("v_dot8_i32_iu4",      False, dst(1), src(1, 1, 1), op(gfx11=0x18)),
-   ("v_dot8_u32_u4",       False, dst(1), src(1, 1, 1), op(gfx9=0x2b, gfx10=0x19)),
-   ("v_dot2_f32_f16",      False, dst(1), src(1, 1, 1), op(gfx9=0x23, gfx10=0x13)),
-   ("v_dot2_f32_bf16",     False, dst(1), src(1, 1, 1), op(gfx11=0x1a)),
-   ("v_dot4_f32_fp8_bf8",  False, dst(1), src(1, 1, 1), op(gfx12=0x24)),
-   ("v_dot4_f32_bf8_fp8",  False, dst(1), src(1, 1, 1), op(gfx12=0x25)),
-   ("v_dot4_f32_fp8_fp8",  False, dst(1), src(1, 1, 1), op(gfx12=0x26)),
-   ("v_dot4_f32_bf8_bf8",  False, dst(1), src(1, 1, 1), op(gfx12=0x27)),
+   ("v_pk_mad_i16",     False, dst(PkU16), src(PkU16, PkU16, PkU16), op(gfx9=0x00)),
+   ("v_pk_mul_lo_u16",  False, dst(PkU16), src(PkU16, PkU16), op(gfx9=0x01)),
+   ("v_pk_add_i16",     False, dst(PkU16), src(PkU16, PkU16), op(gfx9=0x02)),
+   ("v_pk_sub_i16",     False, dst(PkU16), src(PkU16, PkU16), op(gfx9=0x03)),
+   ("v_pk_lshlrev_b16", False, dst(PkU16), src(PkU16, PkU16), op(gfx9=0x04)),
+   ("v_pk_lshrrev_b16", False, dst(PkU16), src(PkU16, PkU16), op(gfx9=0x05)),
+   ("v_pk_ashrrev_i16", False, dst(PkU16), src(PkU16, PkU16), op(gfx9=0x06)),
+   ("v_pk_max_i16",     False, dst(PkU16), src(PkU16, PkU16), op(gfx9=0x07)),
+   ("v_pk_min_i16",     False, dst(PkU16), src(PkU16, PkU16), op(gfx9=0x08)),
+   ("v_pk_mad_u16",     False, dst(PkU16), src(PkU16, PkU16, PkU16), op(gfx9=0x09)),
+   ("v_pk_add_u16",     False, dst(PkU16), src(PkU16, PkU16), op(gfx9=0x0a)),
+   ("v_pk_sub_u16",     False, dst(PkU16), src(PkU16, PkU16), op(gfx9=0x0b)),
+   ("v_pk_max_u16",     False, dst(PkU16), src(PkU16, PkU16), op(gfx9=0x0c)),
+   ("v_pk_min_u16",     False, dst(PkU16), src(PkU16, PkU16), op(gfx9=0x0d)),
+   ("v_pk_fma_f16",     True, dst(PkF16), src(PkF16, PkF16, PkF16), op(gfx9=0x0e)),
+   ("v_pk_add_f16",     True, dst(PkF16), src(PkF16, PkF16), op(gfx9=0x0f)),
+   ("v_pk_mul_f16",     True, dst(PkF16), src(PkF16, PkF16), op(gfx9=0x10)),
+   ("v_pk_min_f16",     True, dst(PkF16), src(PkF16, PkF16), op(gfx9=0x11, gfx12=0x1b)), # called v_pk_min_num_f16 in GFX12
+   ("v_pk_max_f16",     True, dst(PkF16), src(PkF16, PkF16), op(gfx9=0x12, gfx12=0x1c)), # called v_pk_min_num_f16 in GFX12
+   ("v_pk_minimum_f16", True, dst(PkF16), src(PkF16, PkF16), op(gfx12=0x1d)),
+   ("v_pk_maximum_f16", True, dst(PkF16), src(PkF16, PkF16), op(gfx12=0x1e)),
+   ("v_fma_mix_f32",    True, dst(F32), src(F32, F32, F32), op(gfx9=0x20)), # v_mad_mix_f32 in VEGA ISA, v_fma_mix_f32 in RDNA ISA
+   ("v_fma_mixlo_f16",  True, dst(F16), src(F32, F32, F32), op(gfx9=0x21)), # v_mad_mixlo_f16 in VEGA ISA, v_fma_mixlo_f16 in RDNA ISA
+   ("v_fma_mixhi_f16",  True, dst(F16), src(F32, F32, F32), op(gfx9=0x22)), # v_mad_mixhi_f16 in VEGA ISA, v_fma_mixhi_f16 in RDNA ISA
+   ("v_dot2_i32_i16",      False, dst(U32), src(PkU16, PkU16, U32), op(gfx9=0x26, gfx10=0x14, gfx11=-1)),
+   ("v_dot2_u32_u16",      False, dst(U32), src(PkU16, PkU16, U32), op(gfx9=0x27, gfx10=0x15, gfx11=-1)),
+   ("v_dot4_i32_iu8",      False, dst(U32), src(PkU16, PkU16, U32), op(gfx11=0x16)),
+   ("v_dot4_i32_i8",       False, dst(U32), src(PkU16, PkU16, U32), op(gfx9=0x28, gfx10=0x16, gfx11=-1)),
+   ("v_dot4_u32_u8",       False, dst(U32), src(PkU16, PkU16, U32), op(gfx9=0x29, gfx10=0x17)),
+   ("v_dot8_i32_iu4",      False, dst(U32), src(PkU16, PkU16, U32), op(gfx11=0x18)),
+   ("v_dot8_i32_i4",       False, dst(U32), src(PkU16, PkU16, U32), op(gfx9=0x2a, gfx10=0x18, gfx11=-1)),
+   ("v_dot8_u32_u4",       False, dst(U32), src(PkU16, PkU16, U32), op(gfx9=0x2b, gfx10=0x19)),
+   ("v_dot2_f32_f16",      False, dst(F32), src(PkF16, PkF16, F32), op(gfx9=0x23, gfx10=0x13)),
+   ("v_dot2_f32_bf16",     False, dst(F32), src(PkBF16, PkBF16, F32), op(gfx11=0x1a)),
+   ("v_dot4_f32_fp8_bf8",  False, dst(F32), src(Pk4F8, Pk4BF8, F32), op(gfx12=0x24)),
+   ("v_dot4_f32_bf8_fp8",  False, dst(F32), src(Pk4BF8, Pk4F8, F32), op(gfx12=0x25)),
+   ("v_dot4_f32_fp8_fp8",  False, dst(F32), src(Pk4F8, Pk4F8, F32), op(gfx12=0x26)),
+   ("v_dot4_f32_bf8_bf8",  False, dst(F32), src(Pk4BF8, Pk4BF8, F32), op(gfx12=0x27)),
    ("v_wmma_f32_16x16x16_f16",       False, dst(), src(), op(gfx11=0x40), InstrClass.WMMA),
    ("v_wmma_f32_16x16x16_bf16",      False, dst(), src(), op(gfx11=0x41), InstrClass.WMMA),
    ("v_wmma_f16_16x16x16_f16",       False, dst(), src(), op(gfx11=0x42), InstrClass.WMMA),
@@ -1225,9 +1276,9 @@ for (name, modifiers, defs, ops, num, cls) in default_class(VOPP, InstrClass.Val
 
 # VINTRP (GFX6 - GFX10.3) instructions:
 VINTRP = {
-   ("v_interp_p1_f32",  dst(1), src(1, M0), op(0x00, gfx11=-1)),
-   ("v_interp_p2_f32",  dst(1), src(1, M0, 1), op(0x01, gfx11=-1)),
-   ("v_interp_mov_f32", dst(1), src(1, M0), op(0x02, gfx11=-1)),
+   ("v_interp_p1_f32",  dst(F32), src(F32, M0), op(0x00, gfx11=-1)),
+   ("v_interp_p2_f32",  dst(F32), src(F32, M0, F32), op(0x01, gfx11=-1)),
+   ("v_interp_mov_f32", dst(U32), src(U32, M0), op(0x02, gfx11=-1)),
 }
 for (name, defs, ops, num) in VINTRP:
    insn(name, num, Format.VINTRP, InstrClass.Valu32, definitions = defs, operands = ops)
@@ -1235,196 +1286,196 @@ for (name, defs, ops, num) in VINTRP:
 
 # VINTERP (GFX11+) instructions:
 VINTERP = {
-   ("v_interp_p10_f32_inreg",         op(gfx11=0x00)),
-   ("v_interp_p2_f32_inreg",          op(gfx11=0x01)),
-   ("v_interp_p10_f16_f32_inreg",     op(gfx11=0x02)),
-   ("v_interp_p2_f16_f32_inreg",      op(gfx11=0x03)),
-   ("v_interp_p10_rtz_f16_f32_inreg", op(gfx11=0x04)),
-   ("v_interp_p2_rtz_f16_f32_inreg",  op(gfx11=0x05)),
+   ("v_interp_p10_f32_inreg",         dst(F32), src(F32, F32, F32), op(gfx11=0x00)),
+   ("v_interp_p2_f32_inreg",          dst(F32), src(F32, F32, F32), op(gfx11=0x01)),
+   ("v_interp_p10_f16_f32_inreg",     dst(F32), src(F16, F32, F16), op(gfx11=0x02)),
+   ("v_interp_p2_f16_f32_inreg",      dst(F16), src(F16, F32, F32), op(gfx11=0x03)),
+   ("v_interp_p10_rtz_f16_f32_inreg", dst(F32), src(F16, F32, F16), op(gfx11=0x04)),
+   ("v_interp_p2_rtz_f16_f32_inreg",  dst(F16), src(F16, F32, F32), op(gfx11=0x05)),
 }
-for (name, num) in VINTERP:
-   insn(name, num, Format.VINTERP_INREG, InstrClass.Valu32, False, True, definitions = dst(1), operands = src(1, 1, 1))
+for (name, defs, ops, num) in VINTERP:
+   insn(name, num, Format.VINTERP_INREG, InstrClass.Valu32, False, True, definitions = defs, operands = ops)
 
 
 # VOP3 instructions: 3 inputs, 1 output
 # VOP3b instructions: have a unique scalar output, e.g. VOP2 with vcc out
 VOP3 = {
-   ("v_mad_legacy_f32",        True, True, dst(1), src(1, 1, 1), op(0x140, gfx8=0x1c0, gfx10=0x140, gfx11=-1)), # GFX6-GFX10
-   ("v_mad_f32",               True, True, dst(1), src(1, 1, 1), op(0x141, gfx8=0x1c1, gfx10=0x141, gfx11=-1)),
-   ("v_mad_i32_i24",           False, False, dst(1), src(1, 1, 1), op(0x142, gfx8=0x1c2, gfx10=0x142, gfx11=0x20a)),
-   ("v_mad_u32_u24",           False, False, dst(1), src(1, 1, 1), op(0x143, gfx8=0x1c3, gfx10=0x143, gfx11=0x20b)),
-   ("v_cubeid_f32",            True, True, dst(1), src(1, 1, 1), op(0x144, gfx8=0x1c4, gfx10=0x144, gfx11=0x20c)),
-   ("v_cubesc_f32",            True, True, dst(1), src(1, 1, 1), op(0x145, gfx8=0x1c5, gfx10=0x145, gfx11=0x20d)),
-   ("v_cubetc_f32",            True, True, dst(1), src(1, 1, 1), op(0x146, gfx8=0x1c6, gfx10=0x146, gfx11=0x20e)),
-   ("v_cubema_f32",            True, True, dst(1), src(1, 1, 1), op(0x147, gfx8=0x1c7, gfx10=0x147, gfx11=0x20f)),
-   ("v_bfe_u32",               False, False, dst(1), src(1, 1, 1), op(0x148, gfx8=0x1c8, gfx10=0x148, gfx11=0x210)),
-   ("v_bfe_i32",               False, False, dst(1), src(1, 1, 1), op(0x149, gfx8=0x1c9, gfx10=0x149, gfx11=0x211)),
-   ("v_bfi_b32",               False, False, dst(1), src(1, 1, 1), op(0x14a, gfx8=0x1ca, gfx10=0x14a, gfx11=0x212)),
-   ("v_fma_f32",               True, True, dst(1), src(1, 1, 1), op(0x14b, gfx8=0x1cb, gfx10=0x14b, gfx11=0x213), InstrClass.ValuFma),
-   ("v_fma_f64",               True, True, dst(2), src(2, 2, 2), op(0x14c, gfx8=0x1cc, gfx10=0x14c, gfx11=0x214), InstrClass.ValuDouble),
-   ("v_lerp_u8",               False, False, dst(1), src(1, 1, 1), op(0x14d, gfx8=0x1cd, gfx10=0x14d, gfx11=0x215)),
-   ("v_alignbit_b32",          False, False, dst(1), src(1, 1, 1), op(0x14e, gfx8=0x1ce, gfx10=0x14e, gfx11=0x216)),
-   ("v_alignbyte_b32",         False, False, dst(1), src(1, 1, 1), op(0x14f, gfx8=0x1cf, gfx10=0x14f, gfx11=0x217)),
-   ("v_mullit_f32",            True, True, dst(1), src(1, 1, 1), op(0x150, gfx8=-1, gfx10=0x150, gfx11=0x218)),
-   ("v_min3_f32",              True, True, dst(1), src(1, 1, 1), op(0x151, gfx8=0x1d0, gfx10=0x151, gfx11=0x219, gfx12=0x229)), # called v_min3_num_f32 in GFX12
-   ("v_min3_i32",              False, False, dst(1), src(1, 1, 1), op(0x152, gfx8=0x1d1, gfx10=0x152, gfx11=0x21a)),
-   ("v_min3_u32",              False, False, dst(1), src(1, 1, 1), op(0x153, gfx8=0x1d2, gfx10=0x153, gfx11=0x21b)),
-   ("v_max3_f32",              True, True, dst(1), src(1, 1, 1), op(0x154, gfx8=0x1d3, gfx10=0x154, gfx11=0x21c, gfx12=0x22a)), # called v_max3_num_f32 in GFX12
-   ("v_max3_i32",              False, False, dst(1), src(1, 1, 1), op(0x155, gfx8=0x1d4, gfx10=0x155, gfx11=0x21d)),
-   ("v_max3_u32",              False, False, dst(1), src(1, 1, 1), op(0x156, gfx8=0x1d5, gfx10=0x156, gfx11=0x21e)),
-   ("v_med3_f32",              True, True, dst(1), src(1, 1, 1), op(0x157, gfx8=0x1d6, gfx10=0x157, gfx11=0x21f, gfx12=0x231)), # called v_med3_num_f32 in GFX12
-   ("v_med3_i32",              False, False, dst(1), src(1, 1, 1), op(0x158, gfx8=0x1d7, gfx10=0x158, gfx11=0x220)),
-   ("v_med3_u32",              False, False, dst(1), src(1, 1, 1), op(0x159, gfx8=0x1d8, gfx10=0x159, gfx11=0x221)),
-   ("v_sad_u8",                False, False, dst(1), src(1, 1, 1), op(0x15a, gfx8=0x1d9, gfx10=0x15a, gfx11=0x222)),
-   ("v_sad_hi_u8",             False, False, dst(1), src(1, 1, 1), op(0x15b, gfx8=0x1da, gfx10=0x15b, gfx11=0x223)),
-   ("v_sad_u16",               False, False, dst(1), src(1, 1, 1), op(0x15c, gfx8=0x1db, gfx10=0x15c, gfx11=0x224)),
-   ("v_sad_u32",               False, False, dst(1), src(1, 1, 1), op(0x15d, gfx8=0x1dc, gfx10=0x15d, gfx11=0x225)),
-   ("v_cvt_pk_u8_f32",         True, False, dst(1), src(1, 1, 1), op(0x15e, gfx8=0x1dd, gfx10=0x15e, gfx11=0x226)),
-   ("v_div_fixup_f32",         True, True, dst(1), src(1, 1, 1), op(0x15f, gfx8=0x1de, gfx10=0x15f, gfx11=0x227)),
-   ("v_div_fixup_f64",         True, True, dst(2), src(2, 2, 2), op(0x160, gfx8=0x1df, gfx10=0x160, gfx11=0x228)),
-   ("v_lshl_b64",              False, False, dst(2), src(2, 1), op(0x161, gfx8=-1), InstrClass.Valu64),
-   ("v_lshr_b64",              False, False, dst(2), src(2, 1), op(0x162, gfx8=-1), InstrClass.Valu64),
-   ("v_ashr_i64",              False, False, dst(2), src(2, 1), op(0x163, gfx8=-1), InstrClass.Valu64),
-   ("v_add_f64_e64",           True, True, dst(2), src(2, 2), op(0x164, gfx8=0x280, gfx10=0x164, gfx11=0x327, gfx12=0x102), InstrClass.ValuDoubleAdd), # GFX12 is VOP2 opcode + 0x100
-   ("v_mul_f64_e64",           True, True, dst(2), src(2, 2), op(0x165, gfx8=0x281, gfx10=0x165, gfx11=0x328, gfx12=0x106), InstrClass.ValuDouble), # GFX12 is VOP2 opcode + 0x100
-   ("v_min_f64_e64",           True, True, dst(2), src(2, 2), op(0x166, gfx8=0x282, gfx10=0x166, gfx11=0x329, gfx12=0x10d), InstrClass.ValuDouble), # GFX12 is VOP2 opcode + 0x100
-   ("v_max_f64_e64",           True, True, dst(2), src(2, 2), op(0x167, gfx8=0x283, gfx10=0x167, gfx11=0x32a, gfx12=0x10e), InstrClass.ValuDouble), # GFX12 is VOP2 opcode + 0x100
-   ("v_ldexp_f64",             False, True, dst(2), src(2, 1), op(0x168, gfx8=0x284, gfx10=0x168, gfx11=0x32b), InstrClass.ValuDouble), # src1 can take input modifiers
-   ("v_mul_lo_u32",            False, False, dst(1), src(1, 1), op(0x169, gfx8=0x285, gfx10=0x169, gfx11=0x32c), InstrClass.ValuQuarterRate32),
-   ("v_mul_hi_u32",            False, False, dst(1), src(1, 1), op(0x16a, gfx8=0x286, gfx10=0x16a, gfx11=0x32d), InstrClass.ValuQuarterRate32),
-   ("v_mul_lo_i32",            False, False, dst(1), src(1, 1), op(0x16b, gfx8=0x285, gfx10=0x16b, gfx11=0x32c), InstrClass.ValuQuarterRate32), # identical to v_mul_lo_u32
-   ("v_mul_hi_i32",            False, False, dst(1), src(1, 1), op(0x16c, gfx8=0x287, gfx10=0x16c, gfx11=0x32e), InstrClass.ValuQuarterRate32),
-   ("v_div_scale_f32",         True, True, dst(1, VCC), src(1, 1, 1), op(0x16d, gfx8=0x1e0, gfx10=0x16d, gfx11=0x2fc)),
-   ("v_div_scale_f64",         True, True, dst(2, VCC), src(2, 2, 2), op(0x16e, gfx8=0x1e1, gfx10=0x16e, gfx11=0x2fd), InstrClass.ValuDouble),
-   ("v_div_fmas_f32",          True, True, dst(1), src(1, 1, 1, VCC), op(0x16f, gfx8=0x1e2, gfx10=0x16f, gfx11=0x237)),
-   ("v_div_fmas_f64",          True, True, dst(2), src(2, 2, 2, VCC), op(0x170, gfx8=0x1e3, gfx10=0x170, gfx11=0x238), InstrClass.ValuDouble),
-   ("v_msad_u8",               False, False, dst(1), src(1, 1, 1), op(0x171, gfx8=0x1e4, gfx10=0x171, gfx11=0x239)),
-   ("v_qsad_pk_u16_u8",        False, False, dst(2), src(2, 1, 2), op(0x172, gfx8=0x1e5, gfx10=0x172, gfx11=0x23a)),
-   ("v_mqsad_pk_u16_u8",       False, False, dst(2), src(2, 1, 2), op(0x173, gfx8=0x1e6, gfx10=0x173, gfx11=0x23b)),
-   ("v_trig_preop_f64",        False, False, dst(2), src(2, 2), op(0x174, gfx8=0x292, gfx10=0x174, gfx11=0x32f), InstrClass.ValuDouble),
-   ("v_mqsad_u32_u8",          False, False, dst(4), src(2, 1, 4), op(gfx7=0x175, gfx8=0x1e7, gfx10=0x175, gfx11=0x23d), InstrClass.ValuQuarterRate32),
-   ("v_mad_u64_u32",           False, False, dst(2, VCC), src(1, 1, 2), op(gfx7=0x176, gfx8=0x1e8, gfx10=0x176, gfx11=0x2fe), InstrClass.Valu64), # called v_mad_co_u64_u32 in GFX12
-   ("v_mad_i64_i32",           False, False, dst(2, VCC), src(1, 1, 2), op(gfx7=0x177, gfx8=0x1e9, gfx10=0x177, gfx11=0x2ff), InstrClass.Valu64), # called v_mad_co_i64_i32 in GFX12
-   ("v_mad_legacy_f16",        True, True, dst(1), src(1, 1, 1), op(gfx8=0x1ea, gfx10=-1)),
-   ("v_mad_legacy_u16",        False, False, dst(1), src(1, 1, 1), op(gfx8=0x1eb, gfx10=-1)),
-   ("v_mad_legacy_i16",        False, False, dst(1), src(1, 1, 1), op(gfx8=0x1ec, gfx10=-1)),
-   ("v_perm_b32",              False, False, dst(1), src(1, 1, 1), op(gfx8=0x1ed, gfx10=0x344, gfx11=0x244)),
-   ("v_fma_legacy_f16",        True, True, dst(1), src(1, 1, 1), op(gfx8=0x1ee, gfx10=-1), InstrClass.ValuFma),
-   ("v_div_fixup_legacy_f16",  True, True, dst(1), src(1, 1, 1), op(gfx8=0x1ef, gfx10=-1)),
-   ("v_cvt_pkaccum_u8_f32",    True, False, dst(1), src(1, 1, 1), op(0x12c, gfx8=0x1f0, gfx10=-1)),
-   ("v_mad_u32_u16",           False, False, dst(1), src(1, 1, 1), op(gfx9=0x1f1, gfx10=0x373, gfx11=0x259)),
-   ("v_mad_i32_i16",           False, False, dst(1), src(1, 1, 1), op(gfx9=0x1f2, gfx10=0x375, gfx11=0x25a)),
-   ("v_xad_u32",               False, False, dst(1), src(1, 1, 1), op(gfx9=0x1f3, gfx10=0x345, gfx11=0x245)),
-   ("v_min3_f16",              True, True, dst(1), src(1, 1, 1), op(gfx9=0x1f4, gfx10=0x351, gfx11=0x249, gfx12=0x22b)), # called v_min3_num_f16 in GFX12
-   ("v_min3_i16",              False, False, dst(1), src(1, 1, 1), op(gfx9=0x1f5, gfx10=0x352, gfx11=0x24a)),
-   ("v_min3_u16",              False, False, dst(1), src(1, 1, 1), op(gfx9=0x1f6, gfx10=0x353, gfx11=0x24b)),
-   ("v_max3_f16",              True, True, dst(1), src(1, 1, 1), op(gfx9=0x1f7, gfx10=0x354, gfx11=0x24c, gfx12=0x22c)), # called v_max3_num_f16 in GFX12
-   ("v_max3_i16",              False, False, dst(1), src(1, 1, 1), op(gfx9=0x1f8, gfx10=0x355, gfx11=0x24d)),
-   ("v_max3_u16",              False, False, dst(1), src(1, 1, 1), op(gfx9=0x1f9, gfx10=0x356, gfx11=0x24e)),
-   ("v_med3_f16",              True, True, dst(1), src(1, 1, 1), op(gfx9=0x1fa, gfx10=0x357, gfx11=0x24f, gfx12=0x232)), # called v_med3_num_f16 in GFX12
-   ("v_med3_i16",              False, False, dst(1), src(1, 1, 1), op(gfx9=0x1fb, gfx10=0x358, gfx11=0x250)),
-   ("v_med3_u16",              False, False, dst(1), src(1, 1, 1), op(gfx9=0x1fc, gfx10=0x359, gfx11=0x251)),
-   ("v_lshl_add_u32",          False, False, dst(1), src(1, 1, 1), op(gfx9=0x1fd, gfx10=0x346, gfx11=0x246)),
-   ("v_add_lshl_u32",          False, False, dst(1), src(1, 1, 1), op(gfx9=0x1fe, gfx10=0x347, gfx11=0x247)),
-   ("v_add3_u32",              False, False, dst(1), src(1, 1, 1), op(gfx9=0x1ff, gfx10=0x36d, gfx11=0x255)),
-   ("v_lshl_or_b32",           False, False, dst(1), src(1, 1, 1), op(gfx9=0x200, gfx10=0x36f, gfx11=0x256)),
-   ("v_and_or_b32",            False, False, dst(1), src(1, 1, 1), op(gfx9=0x201, gfx10=0x371, gfx11=0x257)),
-   ("v_or3_b32",               False, False, dst(1), src(1, 1, 1), op(gfx9=0x202, gfx10=0x372, gfx11=0x258)),
-   ("v_mad_f16",               True, True, dst(1), src(1, 1, 1), op(gfx9=0x203, gfx10=-1)),
-   ("v_mad_u16",               False, False, dst(1), src(1, 1, 1), op(gfx9=0x204, gfx10=0x340, gfx11=0x241)),
-   ("v_mad_i16",               False, False, dst(1), src(1, 1, 1), op(gfx9=0x205, gfx10=0x35e, gfx11=0x253)),
-   ("v_fma_f16",               True, True, dst(1), src(1, 1, 1), op(gfx9=0x206, gfx10=0x34b, gfx11=0x248)),
-   ("v_div_fixup_f16",         True, True, dst(1), src(1, 1, 1), op(gfx9=0x207, gfx10=0x35f, gfx11=0x254)),
-   ("v_interp_p1ll_f16",       True, True, dst(1), src(1, M0), op(gfx8=0x274, gfx10=0x342, gfx11=-1)),
-   ("v_interp_p1lv_f16",       True, True, dst(1), src(1, M0, 1), op(gfx8=0x275, gfx10=0x343, gfx11=-1)),
-   ("v_interp_p2_legacy_f16",  True, True, dst(1), src(1, M0, 1), op(gfx8=0x276, gfx10=-1)),
-   ("v_interp_p2_f16",         True, True, dst(1), src(1, M0, 1), op(gfx9=0x277, gfx10=0x35a, gfx11=-1)),
-   ("v_interp_p2_hi_f16",      True, True, dst(1), src(1, M0, 1), op(gfx9=0x277, gfx10=0x35a, gfx11=-1)),
-   ("v_ldexp_f32",             False, True, dst(1), src(1, 1), op(0x12b, gfx8=0x288, gfx10=0x362, gfx11=0x31c)),
-   ("v_readlane_b32_e64",      False, False, dst(1), src(1, 1), op(gfx8=0x289, gfx10=0x360)),
-   ("v_writelane_b32_e64",     False, False, dst(1), src(1, 1, 1), op(gfx8=0x28a, gfx10=0x361)),
-   ("v_bcnt_u32_b32",          False, False, dst(1), src(1, 1), op(0x122, gfx8=0x28b, gfx10=0x364, gfx11=0x31e)),
-   ("v_mbcnt_lo_u32_b32",      False, False, dst(1), src(1, 1), op(0x123, gfx8=0x28c, gfx10=0x365, gfx11=0x31f)),
-   ("v_mbcnt_hi_u32_b32_e64",  False, False, dst(1), src(1, 1), op(gfx8=0x28d, gfx10=0x366, gfx11=0x320)),
-   ("v_lshlrev_b64_e64",       False, False, dst(2), src(1, 2), op(gfx8=0x28f, gfx10=0x2ff, gfx11=0x33c, gfx12=0x11f), InstrClass.Valu64), # GFX12 is VOP2 opcode + 0x100
-   ("v_lshrrev_b64",           False, False, dst(2), src(1, 2), op(gfx8=0x290, gfx10=0x300, gfx11=0x33d), InstrClass.Valu64),
-   ("v_ashrrev_i64",           False, False, dst(2), src(1, 2), op(gfx8=0x291, gfx10=0x301, gfx11=0x33e), InstrClass.Valu64),
-   ("v_bfm_b32",               False, False, dst(1), src(1, 1), op(0x11e, gfx8=0x293, gfx10=0x363, gfx11=0x31d)),
-   ("v_cvt_pknorm_i16_f32",    True, False, dst(1), src(1, 1), op(0x12d, gfx8=0x294, gfx10=0x368, gfx11=0x321)),
-   ("v_cvt_pknorm_u16_f32",    True, False, dst(1), src(1, 1), op(0x12e, gfx8=0x295, gfx10=0x369, gfx11=0x322)),
-   ("v_cvt_pkrtz_f16_f32_e64", True, False, dst(1), src(1, 1), op(gfx8=0x296, gfx10=-1)),
-   ("v_cvt_pk_u16_u32",        False, False, dst(1), src(1, 1), op(0x130, gfx8=0x297, gfx10=0x36a, gfx11=0x323)),
-   ("v_cvt_pk_i16_i32",        False, False, dst(1), src(1, 1), op(0x131, gfx8=0x298, gfx10=0x36b, gfx11=0x324)),
-   ("v_cvt_pknorm_i16_f16",    True, False, dst(1), src(1, 1), op(gfx9=0x299, gfx10=0x312)), #v_cvt_pk_norm_i16_f32 in GFX11
-   ("v_cvt_pknorm_u16_f16",    True, False, dst(1), src(1, 1), op(gfx9=0x29a, gfx10=0x313)), #v_cvt_pk_norm_u16_f32 in GFX11
-   ("v_add_i32",               False, False, dst(1), src(1, 1), op(gfx9=0x29c, gfx10=0x37f, gfx11=0x326)),
-   ("v_sub_i32",               False, False, dst(1), src(1, 1), op(gfx9=0x29d, gfx10=0x376, gfx11=0x325)),
-   ("v_add_i16",               False, False, dst(1), src(1, 1), op(gfx9=0x29e, gfx10=0x30d)),
-   ("v_sub_i16",               False, False, dst(1), src(1, 1), op(gfx9=0x29f, gfx10=0x30e)),
-   ("v_pack_b32_f16",          True, False, dst(1), src(1, 1), op(gfx9=0x2a0, gfx10=0x311)),
-   ("v_xor3_b32",              False, False, dst(1), src(1, 1, 1), op(gfx10=0x178, gfx11=0x240)),
-   ("v_permlane16_b32",        False, False, dst(1), src(1, 1, 1), op(gfx10=0x377, gfx11=0x25b)),
-   ("v_permlanex16_b32",       False, False, dst(1), src(1, 1, 1), op(gfx10=0x378, gfx11=0x25c)),
-   ("v_add_co_u32_e64",        False, False, dst(1, VCC), src(1, 1), op(gfx10=0x30f, gfx11=0x300)),
-   ("v_sub_co_u32_e64",        False, False, dst(1, VCC), src(1, 1), op(gfx10=0x310, gfx11=0x301)),
-   ("v_subrev_co_u32_e64",     False, False, dst(1, VCC), src(1, 1), op(gfx10=0x319, gfx11=0x302)),
-   ("v_add_u16_e64",           False, False, dst(1), src(1, 1), op(gfx10=0x303)),
-   ("v_sub_u16_e64",           False, False, dst(1), src(1, 1), op(gfx10=0x304)),
-   ("v_mul_lo_u16_e64",        False, False, dst(1), src(1, 1), op(gfx10=0x305)),
-   ("v_max_u16_e64",           False, False, dst(1), src(1, 1), op(gfx10=0x309)),
-   ("v_max_i16_e64",           False, False, dst(1), src(1, 1), op(gfx10=0x30a)),
-   ("v_min_u16_e64",           False, False, dst(1), src(1, 1), op(gfx10=0x30b)),
-   ("v_min_i16_e64",           False, False, dst(1), src(1, 1), op(gfx10=0x30c)),
-   ("v_lshrrev_b16_e64",       False, False, dst(1), src(1, 1), op(gfx10=0x307, gfx11=0x339)),
-   ("v_ashrrev_i16_e64",       False, False, dst(1), src(1, 1), op(gfx10=0x308, gfx11=0x33a)),
-   ("v_lshlrev_b16_e64",       False, False, dst(1), src(1, 1), op(gfx10=0x314, gfx11=0x338)),
-   ("v_fma_legacy_f32",        True, True, dst(1), src(1, 1, 1), op(gfx10=0x140, gfx11=0x209), InstrClass.ValuFma), #GFX10.3+, v_fma_dx9_zero_f32 in GFX11
-   ("v_maxmin_f32",            True, True, dst(1), src(1, 1, 1), op(gfx11=0x25e, gfx12=0x269)), # called v_maxmin_num_f32 in GFX12
-   ("v_minmax_f32",            True, True, dst(1), src(1, 1, 1), op(gfx11=0x25f, gfx12=0x268)), # called v_minmax_num_f32 in GFX12
-   ("v_maxmin_f16",            True, True, dst(1), src(1, 1, 1), op(gfx11=0x260, gfx12=0x26b)), # called v_maxmin_num_f16 in GFX12
-   ("v_minmax_f16",            True, True, dst(1), src(1, 1, 1), op(gfx11=0x261, gfx12=0x26a)), # called v_minmax_num_f16 in GFX12
-   ("v_maxmin_u32",            False, False, dst(1), src(1, 1, 1), op(gfx11=0x262)),
-   ("v_minmax_u32",            False, False, dst(1), src(1, 1, 1), op(gfx11=0x263)),
-   ("v_maxmin_i32",            False, False, dst(1), src(1, 1, 1), op(gfx11=0x264)),
-   ("v_minmax_i32",            False, False, dst(1), src(1, 1, 1), op(gfx11=0x265)),
-   ("v_dot2_f16_f16",          False, False, dst(1), src(1, 1, 1), op(gfx11=0x266)),
-   ("v_dot2_bf16_bf16",        False, False, dst(1), src(1, 1, 1), op(gfx11=0x267)),
-   ("v_cvt_pk_i16_f32",        True, False, dst(1), src(1, 1), op(gfx11=0x306)),
-   ("v_cvt_pk_u16_f32",        True, False, dst(1), src(1, 1), op(gfx11=0x307)),
-   ("v_and_b16",               False, False, dst(1), src(1, 1), op(gfx11=0x362)),
-   ("v_or_b16",                False, False, dst(1), src(1, 1), op(gfx11=0x363)),
-   ("v_xor_b16",               False, False, dst(1), src(1, 1), op(gfx11=0x364)),
-   ("v_cndmask_b16",           True, False, dst(1), src(1, 1, VCC), op(gfx11=0x25d)),
-   ("v_minimum3_f32",          True, True, dst(1), src(1, 1, 1), op(gfx12=0x22d)),
-   ("v_maximum3_f32",          True, True, dst(1), src(1, 1, 1), op(gfx12=0x22e)),
-   ("v_minimum3_f16",          True, True, dst(1), src(1, 1, 1), op(gfx12=0x22f)),
-   ("v_maximum3_f16",          True, True, dst(1), src(1, 1, 1), op(gfx12=0x230)),
-   ("v_minimummaximum_f32",    True, True, dst(1), src(1, 1, 1), op(gfx12=0x26c)),
-   ("v_maximumminimum_f32",    True, True, dst(1), src(1, 1, 1), op(gfx12=0x26d)),
-   ("v_minimummaximum_f16",    True, True, dst(1), src(1, 1, 1), op(gfx12=0x26e)),
-   ("v_maximumminimum_f16",    True, True, dst(1), src(1, 1, 1), op(gfx12=0x26f)),
-   ("v_s_exp_f32",             True, True, dst(1), src(1), op(gfx12=0x280), InstrClass.ValuPseudoScalarTrans),
-   ("v_s_exp_f16",             True, True, dst(1), src(1), op(gfx12=0x281), InstrClass.ValuPseudoScalarTrans),
-   ("v_s_log_f32",             True, True, dst(1), src(1), op(gfx12=0x282), InstrClass.ValuPseudoScalarTrans),
-   ("v_s_log_f16",             True, True, dst(1), src(1), op(gfx12=0x283), InstrClass.ValuPseudoScalarTrans),
-   ("v_s_rcp_f32",             True, True, dst(1), src(1), op(gfx12=0x284), InstrClass.ValuPseudoScalarTrans),
-   ("v_s_rcp_f16",             True, True, dst(1), src(1), op(gfx12=0x285), InstrClass.ValuPseudoScalarTrans),
-   ("v_s_rsq_f32",             True, True, dst(1), src(1), op(gfx12=0x286), InstrClass.ValuPseudoScalarTrans),
-   ("v_s_rsq_f16",             True, True, dst(1), src(1), op(gfx12=0x287), InstrClass.ValuPseudoScalarTrans),
-   ("v_s_sqrt_f32",            True, True, dst(1), src(1), op(gfx12=0x288), InstrClass.ValuPseudoScalarTrans),
-   ("v_s_sqrt_f16",            True, True, dst(1), src(1), op(gfx12=0x289), InstrClass.ValuPseudoScalarTrans),
-   ("v_minimum_f64",           True, True, dst(1), src(1, 1), op(gfx12=0x341)),
-   ("v_maximum_f64",           True, True, dst(1), src(1, 1), op(gfx12=0x342)),
-   ("v_minimum_f32",           True, True, dst(1), src(1, 1), op(gfx12=0x365)),
-   ("v_maximum_f32",           True, True, dst(1), src(1, 1), op(gfx12=0x366)),
-   ("v_minimum_f16",           True, True, dst(1), src(1, 1), op(gfx12=0x367)),
-   ("v_maximum_f16",           True, True, dst(1), src(1, 1), op(gfx12=0x368)),
-   ("v_permlane16_var_b32",    False, False, dst(1), src(1, 1), op(gfx12=0x30f)),
-   ("v_permlanex16_var_b32",   False, False, dst(1), src(1, 1), op(gfx12=0x310)),
-   ("v_cvt_pk_fp8_f32",        True, False, dst(1), src(1, 1), op(gfx12=0x369)),
-   ("v_cvt_pk_bf8_f32",        True, False, dst(1), src(1, 1), op(gfx12=0x36a)),
-   ("v_cvt_sr_fp8_f32",        True, False, dst(1), src(1, 1), op(gfx12=0x36b)),
-   ("v_cvt_sr_bf8_f32",        True, False, dst(1), src(1, 1), op(gfx12=0x36c)),
+   ("v_mad_legacy_f32",        True, True, dst(F32), src(F32, F32, F32), op(0x140, gfx8=0x1c0, gfx10=0x140, gfx11=-1)), # GFX6-GFX10
+   ("v_mad_f32",               True, True, dst(F32), src(F32, F32, F32), op(0x141, gfx8=0x1c1, gfx10=0x141, gfx11=-1)),
+   ("v_mad_i32_i24",           False, False, dst(U32), src(U32, U32, U32), op(0x142, gfx8=0x1c2, gfx10=0x142, gfx11=0x20a)),
+   ("v_mad_u32_u24",           False, False, dst(U32), src(U32, U32, U32), op(0x143, gfx8=0x1c3, gfx10=0x143, gfx11=0x20b)),
+   ("v_cubeid_f32",            True, True, dst(F32), src(F32, F32, F32), op(0x144, gfx8=0x1c4, gfx10=0x144, gfx11=0x20c)),
+   ("v_cubesc_f32",            True, True, dst(F32), src(F32, F32, F32), op(0x145, gfx8=0x1c5, gfx10=0x145, gfx11=0x20d)),
+   ("v_cubetc_f32",            True, True, dst(F32), src(F32, F32, F32), op(0x146, gfx8=0x1c6, gfx10=0x146, gfx11=0x20e)),
+   ("v_cubema_f32",            True, True, dst(F32), src(F32, F32, F32), op(0x147, gfx8=0x1c7, gfx10=0x147, gfx11=0x20f)),
+   ("v_bfe_u32",               False, False, dst(U32), src(U32, U32, U32), op(0x148, gfx8=0x1c8, gfx10=0x148, gfx11=0x210)),
+   ("v_bfe_i32",               False, False, dst(U32), src(U32, U32, U32), op(0x149, gfx8=0x1c9, gfx10=0x149, gfx11=0x211)),
+   ("v_bfi_b32",               False, False, dst(U32), src(U32, U32, U32), op(0x14a, gfx8=0x1ca, gfx10=0x14a, gfx11=0x212)),
+   ("v_fma_f32",               True, True, dst(F32), src(F32, F32, F32), op(0x14b, gfx8=0x1cb, gfx10=0x14b, gfx11=0x213), InstrClass.ValuFma),
+   ("v_fma_f64",               True, True, dst(F64), src(F64, F64, F64), op(0x14c, gfx8=0x1cc, gfx10=0x14c, gfx11=0x214), InstrClass.ValuDouble),
+   ("v_lerp_u8",               False, False, dst(U32), src(U32, U32, U32), op(0x14d, gfx8=0x1cd, gfx10=0x14d, gfx11=0x215)),
+   ("v_alignbit_b32",          False, False, dst(U32), src(U32, U32, U16), op(0x14e, gfx8=0x1ce, gfx10=0x14e, gfx11=0x216)),
+   ("v_alignbyte_b32",         False, False, dst(U32), src(U32, U32, U16), op(0x14f, gfx8=0x1cf, gfx10=0x14f, gfx11=0x217)),
+   ("v_mullit_f32",            True, True, dst(F32), src(F32, F32, F32), op(0x150, gfx8=-1, gfx10=0x150, gfx11=0x218)),
+   ("v_min3_f32",              True, True, dst(F32), src(F32, F32, F32), op(0x151, gfx8=0x1d0, gfx10=0x151, gfx11=0x219, gfx12=0x229)), # called v_min3_num_f32 in GFX12
+   ("v_min3_i32",              False, False, dst(U32), src(U32, U32, U32), op(0x152, gfx8=0x1d1, gfx10=0x152, gfx11=0x21a)),
+   ("v_min3_u32",              False, False, dst(U32), src(U32, U32, U32), op(0x153, gfx8=0x1d2, gfx10=0x153, gfx11=0x21b)),
+   ("v_max3_f32",              True, True, dst(F32), src(F32, F32, F32), op(0x154, gfx8=0x1d3, gfx10=0x154, gfx11=0x21c, gfx12=0x22a)), # called v_max3_num_f32 in GFX12
+   ("v_max3_i32",              False, False, dst(U32), src(U32, U32, U32), op(0x155, gfx8=0x1d4, gfx10=0x155, gfx11=0x21d)),
+   ("v_max3_u32",              False, False, dst(U32), src(U32, U32, U32), op(0x156, gfx8=0x1d5, gfx10=0x156, gfx11=0x21e)),
+   ("v_med3_f32",              True, True, dst(F32), src(F32, F32, F32), op(0x157, gfx8=0x1d6, gfx10=0x157, gfx11=0x21f, gfx12=0x231)), # called v_med3_num_f32 in GFX12
+   ("v_med3_i32",              False, False, dst(U32), src(U32, U32, U32), op(0x158, gfx8=0x1d7, gfx10=0x158, gfx11=0x220)),
+   ("v_med3_u32",              False, False, dst(U32), src(U32, U32, U32), op(0x159, gfx8=0x1d8, gfx10=0x159, gfx11=0x221)),
+   ("v_sad_u8",                False, False, dst(U32), src(U32, U32, U32), op(0x15a, gfx8=0x1d9, gfx10=0x15a, gfx11=0x222)),
+   ("v_sad_hi_u8",             False, False, dst(U32), src(U32, U32, U32), op(0x15b, gfx8=0x1da, gfx10=0x15b, gfx11=0x223)),
+   ("v_sad_u16",               False, False, dst(U32), src(U32, U32, U32), op(0x15c, gfx8=0x1db, gfx10=0x15c, gfx11=0x224)),
+   ("v_sad_u32",               False, False, dst(U32), src(U32, U32, U32), op(0x15d, gfx8=0x1dc, gfx10=0x15d, gfx11=0x225)),
+   ("v_cvt_pk_u8_f32",         True, False, dst(U32), src(F32, U32, U32), op(0x15e, gfx8=0x1dd, gfx10=0x15e, gfx11=0x226)),
+   ("v_div_fixup_f32",         True, True, dst(F32), src(F32, F32, F32), op(0x15f, gfx8=0x1de, gfx10=0x15f, gfx11=0x227)),
+   ("v_div_fixup_f64",         True, True, dst(F64), src(F64, F64, F64), op(0x160, gfx8=0x1df, gfx10=0x160, gfx11=0x228)),
+   ("v_lshl_b64",              False, False, dst(U64), src(U64, U32), op(0x161, gfx8=-1), InstrClass.Valu64),
+   ("v_lshr_b64",              False, False, dst(U64), src(U64, U32), op(0x162, gfx8=-1), InstrClass.Valu64),
+   ("v_ashr_i64",              False, False, dst(I64), src(I64, U32), op(0x163, gfx8=-1), InstrClass.Valu64),
+   ("v_add_f64_e64",           True, True, dst(F64), src(F64, F64), op(0x164, gfx8=0x280, gfx10=0x164, gfx11=0x327, gfx12=0x102), InstrClass.ValuDoubleAdd), # GFX12 is VOP2 opcode + 0x100
+   ("v_mul_f64_e64",           True, True, dst(F64), src(F64, F64), op(0x165, gfx8=0x281, gfx10=0x165, gfx11=0x328, gfx12=0x106), InstrClass.ValuDouble), # GFX12 is VOP2 opcode + 0x100
+   ("v_min_f64_e64",           True, True, dst(F64), src(F64, F64), op(0x166, gfx8=0x282, gfx10=0x166, gfx11=0x329, gfx12=0x10d), InstrClass.ValuDouble), # GFX12 is VOP2 opcode + 0x100
+   ("v_max_f64_e64",           True, True, dst(F64), src(F64, F64), op(0x167, gfx8=0x283, gfx10=0x167, gfx11=0x32a, gfx12=0x10e), InstrClass.ValuDouble), # GFX12 is VOP2 opcode + 0x100
+   ("v_ldexp_f64",             False, True, dst(F64), src(F64, U32), op(0x168, gfx8=0x284, gfx10=0x168, gfx11=0x32b), InstrClass.ValuDouble), # src1 can take input modifiers
+   ("v_mul_lo_u32",            False, False, dst(U32), src(U32, U32), op(0x169, gfx8=0x285, gfx10=0x169, gfx11=0x32c), InstrClass.ValuQuarterRate32),
+   ("v_mul_hi_u32",            False, False, dst(U32), src(U32, U32), op(0x16a, gfx8=0x286, gfx10=0x16a, gfx11=0x32d), InstrClass.ValuQuarterRate32),
+   ("v_mul_lo_i32",            False, False, dst(U32), src(U32, U32), op(0x16b, gfx8=0x285, gfx10=0x16b, gfx11=0x32c), InstrClass.ValuQuarterRate32), # identical to v_mul_lo_u32
+   ("v_mul_hi_i32",            False, False, dst(U32), src(U32, U32), op(0x16c, gfx8=0x287, gfx10=0x16c, gfx11=0x32e), InstrClass.ValuQuarterRate32),
+   ("v_div_scale_f32",         True, True, dst(F32, VCC), src(F32, F32, F32), op(0x16d, gfx8=0x1e0, gfx10=0x16d, gfx11=0x2fc)),
+   ("v_div_scale_f64",         True, True, dst(F64, VCC), src(F64, F64, F64), op(0x16e, gfx8=0x1e1, gfx10=0x16e, gfx11=0x2fd), InstrClass.ValuDouble),
+   ("v_div_fmas_f32",          True, True, dst(F32), src(F32, F32, F32, VCC), op(0x16f, gfx8=0x1e2, gfx10=0x16f, gfx11=0x237)),
+   ("v_div_fmas_f64",          True, True, dst(F64), src(F64, F64, F64, VCC), op(0x170, gfx8=0x1e3, gfx10=0x170, gfx11=0x238), InstrClass.ValuDouble),
+   ("v_msad_u8",               False, False, dst(U32), src(U32, U32, U32), op(0x171, gfx8=0x1e4, gfx10=0x171, gfx11=0x239)),
+   ("v_qsad_pk_u16_u8",        False, False, dst(U64), src(U64, U32, U64), op(0x172, gfx8=0x1e5, gfx10=0x172, gfx11=0x23a)),
+   ("v_mqsad_pk_u16_u8",       False, False, dst(U64), src(U64, U32, U64), op(0x173, gfx8=0x1e6, gfx10=0x173, gfx11=0x23b)),
+   ("v_trig_preop_f64",        False, False, dst(F64), src(F64, U32), op(0x174, gfx8=0x292, gfx10=0x174, gfx11=0x32f), InstrClass.ValuDouble),
+   ("v_mqsad_u32_u8",          False, False, dst(U128), src(U64, U32, U128), op(gfx7=0x175, gfx8=0x1e7, gfx10=0x175, gfx11=0x23d), InstrClass.ValuQuarterRate32),
+   ("v_mad_u64_u32",           False, False, dst(U64, VCC), src(U32, U32, U64), op(gfx7=0x176, gfx8=0x1e8, gfx10=0x176, gfx11=0x2fe), InstrClass.Valu64), # called v_mad_co_u64_u32 in GFX12
+   ("v_mad_i64_i32",           False, False, dst(I64, VCC), src(U32, U32, I64), op(gfx7=0x177, gfx8=0x1e9, gfx10=0x177, gfx11=0x2ff), InstrClass.Valu64), # called v_mad_co_i64_i32 in GFX12
+   ("v_mad_legacy_f16",        True, True, dst(F16), src(F16, F16, F16), op(gfx8=0x1ea, gfx10=-1)),
+   ("v_mad_legacy_u16",        False, False, dst(U16), src(U16, U16, U16), op(gfx8=0x1eb, gfx10=-1)),
+   ("v_mad_legacy_i16",        False, False, dst(U16), src(U16, U16, U16), op(gfx8=0x1ec, gfx10=-1)),
+   ("v_perm_b32",              False, False, dst(U32), src(U32, U32, U32), op(gfx8=0x1ed, gfx10=0x344, gfx11=0x244)),
+   ("v_fma_legacy_f16",        True, True, dst(F16), src(F16, F16, F16), op(gfx8=0x1ee, gfx10=-1), InstrClass.ValuFma),
+   ("v_div_fixup_legacy_f16",  True, True, dst(F16), src(F16, F16, F16), op(gfx8=0x1ef, gfx10=-1)),
+   ("v_cvt_pkaccum_u8_f32",    True, False, dst(U32), src(F32, U32, U32), op(0x12c, gfx8=0x1f0, gfx10=-1)),
+   ("v_mad_u32_u16",           False, False, dst(U32), src(U16, U16, U32), op(gfx9=0x1f1, gfx10=0x373, gfx11=0x259)),
+   ("v_mad_i32_i16",           False, False, dst(U32), src(U16, U16, U32), op(gfx9=0x1f2, gfx10=0x375, gfx11=0x25a)),
+   ("v_xad_u32",               False, False, dst(U32), src(U32, U32, U32), op(gfx9=0x1f3, gfx10=0x345, gfx11=0x245)),
+   ("v_min3_f16",              True, True, dst(F16), src(F16, F16, F16), op(gfx9=0x1f4, gfx10=0x351, gfx11=0x249, gfx12=0x22b)), # called v_min3_num_f16 in GFX12
+   ("v_min3_i16",              False, False, dst(U16), src(U16, U16, U16), op(gfx9=0x1f5, gfx10=0x352, gfx11=0x24a)),
+   ("v_min3_u16",              False, False, dst(U16), src(U16, U16, U16), op(gfx9=0x1f6, gfx10=0x353, gfx11=0x24b)),
+   ("v_max3_f16",              True, True, dst(F16), src(F16, F16, F16), op(gfx9=0x1f7, gfx10=0x354, gfx11=0x24c, gfx12=0x22c)), # called v_max3_num_f16 in GFX12
+   ("v_max3_i16",              False, False, dst(U16), src(U16, U16, U16), op(gfx9=0x1f8, gfx10=0x355, gfx11=0x24d)),
+   ("v_max3_u16",              False, False, dst(U16), src(U16, U16, U16), op(gfx9=0x1f9, gfx10=0x356, gfx11=0x24e)),
+   ("v_med3_f16",              True, True, dst(F16), src(F16, F16, F16), op(gfx9=0x1fa, gfx10=0x357, gfx11=0x24f, gfx12=0x232)), # called v_med3_num_f16 in GFX12
+   ("v_med3_i16",              False, False, dst(U16), src(U16, U16, U16), op(gfx9=0x1fb, gfx10=0x358, gfx11=0x250)),
+   ("v_med3_u16",              False, False, dst(U16), src(U16, U16, U16), op(gfx9=0x1fc, gfx10=0x359, gfx11=0x251)),
+   ("v_lshl_add_u32",          False, False, dst(U32), src(U32, U32, U32), op(gfx9=0x1fd, gfx10=0x346, gfx11=0x246)),
+   ("v_add_lshl_u32",          False, False, dst(U32), src(U32, U32, U32), op(gfx9=0x1fe, gfx10=0x347, gfx11=0x247)),
+   ("v_add3_u32",              False, False, dst(U32), src(U32, U32, U32), op(gfx9=0x1ff, gfx10=0x36d, gfx11=0x255)),
+   ("v_lshl_or_b32",           False, False, dst(U32), src(U32, U32, U32), op(gfx9=0x200, gfx10=0x36f, gfx11=0x256)),
+   ("v_and_or_b32",            False, False, dst(U32), src(U32, U32, U32), op(gfx9=0x201, gfx10=0x371, gfx11=0x257)),
+   ("v_or3_b32",               False, False, dst(U32), src(U32, U32, U32), op(gfx9=0x202, gfx10=0x372, gfx11=0x258)),
+   ("v_mad_f16",               True, True, dst(F16), src(F16, F16, F16), op(gfx9=0x203, gfx10=-1)),
+   ("v_mad_u16",               False, False, dst(U16), src(U16, U16, U16), op(gfx9=0x204, gfx10=0x340, gfx11=0x241)),
+   ("v_mad_i16",               False, False, dst(U16), src(U16, U16, U16), op(gfx9=0x205, gfx10=0x35e, gfx11=0x253)),
+   ("v_fma_f16",               True, True, dst(F16), src(F16, F16, F16), op(gfx9=0x206, gfx10=0x34b, gfx11=0x248)),
+   ("v_div_fixup_f16",         True, True, dst(F16), src(F16, F16, F16), op(gfx9=0x207, gfx10=0x35f, gfx11=0x254)),
+   ("v_interp_p1ll_f16",       True, True, dst(F32), src(F32, M0), op(gfx8=0x274, gfx10=0x342, gfx11=-1)),
+   ("v_interp_p1lv_f16",       True, True, dst(F32), src(F32, M0, F16), op(gfx8=0x275, gfx10=0x343, gfx11=-1)),
+   ("v_interp_p2_legacy_f16",  True, True, dst(F16), src(F32, M0, F32), op(gfx8=0x276, gfx10=-1)),
+   ("v_interp_p2_f16",         True, True, dst(F16), src(F32, M0, F32), op(gfx9=0x277, gfx10=0x35a, gfx11=-1)),
+   ("v_interp_p2_hi_f16",      True, True, dst(F16), src(F32, M0, F32), op(gfx9=0x277, gfx10=0x35a, gfx11=-1)),
+   ("v_ldexp_f32",             False, True, dst(F32), src(F32, U32), op(0x12b, gfx8=0x288, gfx10=0x362, gfx11=0x31c)),
+   ("v_readlane_b32_e64",      False, False, dst(U32), src(U32, U32), op(gfx8=0x289, gfx10=0x360)),
+   ("v_writelane_b32_e64",     False, False, dst(U32), src(U32, U32, U32), op(gfx8=0x28a, gfx10=0x361)),
+   ("v_bcnt_u32_b32",          False, False, dst(U32), src(U32, U32), op(0x122, gfx8=0x28b, gfx10=0x364, gfx11=0x31e)),
+   ("v_mbcnt_lo_u32_b32",      False, False, dst(U32), src(U32, U32), op(0x123, gfx8=0x28c, gfx10=0x365, gfx11=0x31f)),
+   ("v_mbcnt_hi_u32_b32_e64",  False, False, dst(U32), src(U32, U32), op(gfx8=0x28d, gfx10=0x366, gfx11=0x320)),
+   ("v_lshlrev_b64_e64",       False, False, dst(U64), src(U32, U64), op(gfx8=0x28f, gfx10=0x2ff, gfx11=0x33c, gfx12=0x11f), InstrClass.Valu64), # GFX12 is VOP2 opcode + 0x100
+   ("v_lshrrev_b64",           False, False, dst(U64), src(U32, U64), op(gfx8=0x290, gfx10=0x300, gfx11=0x33d), InstrClass.Valu64),
+   ("v_ashrrev_i64",           False, False, dst(I64), src(U32, I64), op(gfx8=0x291, gfx10=0x301, gfx11=0x33e), InstrClass.Valu64),
+   ("v_bfm_b32",               False, False, dst(U32), src(U32, U32), op(0x11e, gfx8=0x293, gfx10=0x363, gfx11=0x31d)),
+   ("v_cvt_pknorm_i16_f32",    True, False, dst(PkU16), src(F32, F32), op(0x12d, gfx8=0x294, gfx10=0x368, gfx11=0x321)),
+   ("v_cvt_pknorm_u16_f32",    True, False, dst(PkU16), src(F32, F32), op(0x12e, gfx8=0x295, gfx10=0x369, gfx11=0x322)),
+   ("v_cvt_pkrtz_f16_f32_e64", True, False, dst(PkF16), src(F32, F32), op(gfx8=0x296, gfx10=-1)),
+   ("v_cvt_pk_u16_u32",        False, False, dst(PkU16), src(U32, U32), op(0x130, gfx8=0x297, gfx10=0x36a, gfx11=0x323)),
+   ("v_cvt_pk_i16_i32",        False, False, dst(PkU16), src(U32, U32), op(0x131, gfx8=0x298, gfx10=0x36b, gfx11=0x324)),
+   ("v_cvt_pknorm_i16_f16",    True, False, dst(PkU16), src(F16, F16), op(gfx9=0x299, gfx10=0x312)), #v_cvt_pk_norm_i16_f32 in GFX11
+   ("v_cvt_pknorm_u16_f16",    True, False, dst(PkU16), src(F16, F16), op(gfx9=0x29a, gfx10=0x313)), #v_cvt_pk_norm_u16_f32 in GFX11
+   ("v_add_i32",               False, False, dst(U32), src(U32, U32), op(gfx9=0x29c, gfx10=0x37f, gfx11=0x326)),
+   ("v_sub_i32",               False, False, dst(U32), src(U32, U32), op(gfx9=0x29d, gfx10=0x376, gfx11=0x325)),
+   ("v_add_i16",               False, False, dst(U16), src(U32, U32), op(gfx9=0x29e, gfx10=0x30d)),
+   ("v_sub_i16",               False, False, dst(U16), src(U32, U32), op(gfx9=0x29f, gfx10=0x30e)),
+   ("v_pack_b32_f16",          True, False, dst(PkF16), src(F16, F16), op(gfx9=0x2a0, gfx10=0x311)),
+   ("v_xor3_b32",              False, False, dst(U32), src(U32, U32, U32), op(gfx10=0x178, gfx11=0x240)),
+   ("v_permlane16_b32",        False, False, dst(U32), src(U32, U32, U32), op(gfx10=0x377, gfx11=0x25b)),
+   ("v_permlanex16_b32",       False, False, dst(U32), src(U32, U32, U32), op(gfx10=0x378, gfx11=0x25c)),
+   ("v_add_co_u32_e64",        False, False, dst(U32, VCC), src(U32, U32), op(gfx10=0x30f, gfx11=0x300)),
+   ("v_sub_co_u32_e64",        False, False, dst(U32, VCC), src(U32, U32), op(gfx10=0x310, gfx11=0x301)),
+   ("v_subrev_co_u32_e64",     False, False, dst(U32, VCC), src(U32, U32), op(gfx10=0x319, gfx11=0x302)),
+   ("v_add_u16_e64",           False, False, dst(U16), src(U16, U16), op(gfx10=0x303)),
+   ("v_sub_u16_e64",           False, False, dst(U16), src(U16, U16), op(gfx10=0x304)),
+   ("v_mul_lo_u16_e64",        False, False, dst(U16), src(U16, U16), op(gfx10=0x305)),
+   ("v_max_u16_e64",           False, False, dst(U16), src(U16, U16), op(gfx10=0x309)),
+   ("v_max_i16_e64",           False, False, dst(U16), src(U16, U16), op(gfx10=0x30a)),
+   ("v_min_u16_e64",           False, False, dst(U16), src(U16, U16), op(gfx10=0x30b)),
+   ("v_min_i16_e64",           False, False, dst(U16), src(U16, U16), op(gfx10=0x30c)),
+   ("v_lshrrev_b16_e64",       False, False, dst(U16), src(U16, U16), op(gfx10=0x307, gfx11=0x339)),
+   ("v_ashrrev_i16_e64",       False, False, dst(U16), src(U16, U16), op(gfx10=0x308, gfx11=0x33a)),
+   ("v_lshlrev_b16_e64",       False, False, dst(U16), src(U16, U16), op(gfx10=0x314, gfx11=0x338)),
+   ("v_fma_legacy_f32",        True, True, dst(F32), src(F32, F32, F32), op(gfx10=0x140, gfx11=0x209), InstrClass.ValuFma), #GFX10.3+, v_fma_dx9_zero_f32 in GFX11
+   ("v_maxmin_f32",            True, True, dst(F32), src(F32, F32, F32), op(gfx11=0x25e, gfx12=0x269)), # called v_maxmin_num_f32 in GFX12
+   ("v_minmax_f32",            True, True, dst(F32), src(F32, F32, F32), op(gfx11=0x25f, gfx12=0x268)), # called v_minmax_num_f32 in GFX12
+   ("v_maxmin_f16",            True, True, dst(F16), src(F16, F16, F16), op(gfx11=0x260, gfx12=0x26b)), # called v_maxmin_num_f16 in GFX12
+   ("v_minmax_f16",            True, True, dst(F16), src(F16, F16, F16), op(gfx11=0x261, gfx12=0x26a)), # called v_minmax_num_f16 in GFX12
+   ("v_maxmin_u32",            False, False, dst(U32), src(U32, U32, U32), op(gfx11=0x262)),
+   ("v_minmax_u32",            False, False, dst(U32), src(U32, U32, U32), op(gfx11=0x263)),
+   ("v_maxmin_i32",            False, False, dst(U32), src(U32, U32, U32), op(gfx11=0x264)),
+   ("v_minmax_i32",            False, False, dst(U32), src(U32, U32, U32), op(gfx11=0x265)),
+   ("v_dot2_f16_f16",          False, False, dst(F16), src(PkF16, PkF16, F16), op(gfx11=0x266)),
+   ("v_dot2_bf16_bf16",        False, False, dst(BF16), src(PkBF16, PkBF16, BF16), op(gfx11=0x267)),
+   ("v_cvt_pk_i16_f32",        True, False, dst(PkU16), src(F32, F32), op(gfx11=0x306)),
+   ("v_cvt_pk_u16_f32",        True, False, dst(PkU16), src(F32, F32), op(gfx11=0x307)),
+   ("v_and_b16",               False, False, dst(U16), src(U16, U16), op(gfx11=0x362)),
+   ("v_or_b16",                False, False, dst(U16), src(U16, U16), op(gfx11=0x363)),
+   ("v_xor_b16",               False, False, dst(U16), src(U16, U16), op(gfx11=0x364)),
+   ("v_cndmask_b16",           True, False, dst(U16), src(U16, U16, VCC), op(gfx11=0x25d)),
+   ("v_minimum3_f32",          True, True, dst(F32), src(F32, F32, F32), op(gfx12=0x22d)),
+   ("v_maximum3_f32",          True, True, dst(F32), src(F32, F32, F32), op(gfx12=0x22e)),
+   ("v_minimum3_f16",          True, True, dst(F16), src(F16, F16, F16), op(gfx12=0x22f)),
+   ("v_maximum3_f16",          True, True, dst(F16), src(F16, F16, F16), op(gfx12=0x230)),
+   ("v_minimummaximum_f32",    True, True, dst(F32), src(F32, F32, F32), op(gfx12=0x26c)),
+   ("v_maximumminimum_f32",    True, True, dst(F32), src(F32, F32, F32), op(gfx12=0x26d)),
+   ("v_minimummaximum_f16",    True, True, dst(F16), src(F16, F16, F16), op(gfx12=0x26e)),
+   ("v_maximumminimum_f16",    True, True, dst(F16), src(F16, F16, F16), op(gfx12=0x26f)),
+   ("v_s_exp_f32",             True, True, dst(F32), src(F32), op(gfx12=0x280), InstrClass.ValuPseudoScalarTrans),
+   ("v_s_exp_f16",             True, True, dst(F16), src(F16), op(gfx12=0x281), InstrClass.ValuPseudoScalarTrans),
+   ("v_s_log_f32",             True, True, dst(F32), src(F32), op(gfx12=0x282), InstrClass.ValuPseudoScalarTrans),
+   ("v_s_log_f16",             True, True, dst(F16), src(F16), op(gfx12=0x283), InstrClass.ValuPseudoScalarTrans),
+   ("v_s_rcp_f32",             True, True, dst(F32), src(F32), op(gfx12=0x284), InstrClass.ValuPseudoScalarTrans),
+   ("v_s_rcp_f16",             True, True, dst(F16), src(F16), op(gfx12=0x285), InstrClass.ValuPseudoScalarTrans),
+   ("v_s_rsq_f32",             True, True, dst(F32), src(F32), op(gfx12=0x286), InstrClass.ValuPseudoScalarTrans),
+   ("v_s_rsq_f16",             True, True, dst(F16), src(F16), op(gfx12=0x287), InstrClass.ValuPseudoScalarTrans),
+   ("v_s_sqrt_f32",            True, True, dst(F32), src(F32), op(gfx12=0x288), InstrClass.ValuPseudoScalarTrans),
+   ("v_s_sqrt_f16",            True, True, dst(F16), src(F16), op(gfx12=0x289), InstrClass.ValuPseudoScalarTrans),
+   ("v_minimum_f64",           True, True, dst(F64), src(F64, F64), op(gfx12=0x341)),
+   ("v_maximum_f64",           True, True, dst(F64), src(F64, F64), op(gfx12=0x342)),
+   ("v_minimum_f32",           True, True, dst(F32), src(F32, F32), op(gfx12=0x365)),
+   ("v_maximum_f32",           True, True, dst(F32), src(F32, F32), op(gfx12=0x366)),
+   ("v_minimum_f16",           True, True, dst(F16), src(F16, F16), op(gfx12=0x367)),
+   ("v_maximum_f16",           True, True, dst(F16), src(F16, F16), op(gfx12=0x368)),
+   ("v_permlane16_var_b32",    False, False, dst(U32), src(U32, U32), op(gfx12=0x30f)),
+   ("v_permlanex16_var_b32",   False, False, dst(U32), src(U32, U32), op(gfx12=0x310)),
+   ("v_cvt_pk_fp8_f32",        True, False, dst(PkF8), src(F32, F32), op(gfx12=0x369)),
+   ("v_cvt_pk_bf8_f32",        True, False, dst(PkBF8), src(F32, F32), op(gfx12=0x36a)),
+   ("v_cvt_sr_fp8_f32",        True, False, dst(F8), src(F32, U32), op(gfx12=0x36b)),
+   ("v_cvt_sr_bf8_f32",        True, False, dst(BF8), src(F32, U32), op(gfx12=0x36c)),
 }
 for (name, in_mod, out_mod, defs, ops, num, cls) in default_class(VOP3, InstrClass.Valu32):
    insn(name, num, Format.VOP3, cls, in_mod, out_mod, definitions = defs, operands = ops)
diff --git a/src/amd/compiler/aco_opcodes_h.py b/src/amd/compiler/aco_opcodes_h.py
index 5ade791cc06c3..279839a702b09 100644
--- a/src/amd/compiler/aco_opcodes_h.py
+++ b/src/amd/compiler/aco_opcodes_h.py
@@ -15,6 +15,13 @@ template = """\
 
 namespace aco {
 
+enum aco_type : uint8_t {
+% for e in OperandType:
+   ${e.name} = ${hex(e.value)},
+% endfor
+};
+
+
 enum class Format : uint16_t {
 % for e in Format:
    ${e.name} = ${hex(e.value)},
@@ -41,7 +48,7 @@ enum class aco_opcode : uint16_t {
 }
 #endif /* _ACO_OPCODES_ */"""
 
-from aco_opcodes import instructions, InstrClass, Format
+from aco_opcodes import instructions, InstrClass, Format, OperandType
 from mako.template import Template
 
-print(Template(template).render(instructions=instructions, InstrClass=InstrClass, Format=Format))
+print(Template(template).render(instructions=instructions, InstrClass=InstrClass, Format=Format, OperandType=OperandType))
diff --git a/src/amd/compiler/aco_validate.cpp b/src/amd/compiler/aco_validate.cpp
index 647d63b3d9b6d..a71eaabc9fbef 100644
--- a/src/amd/compiler/aco_validate.cpp
+++ b/src/amd/compiler/aco_validate.cpp
@@ -81,13 +81,9 @@ validate_ir(Program* program)
          unsigned pck_ops = instr_info.operands[(int)instr->opcode];
 
          if (pck_defs != 0) {
-            /* Before GFX10 v_cmpx also writes VCC. */
-            if (instr->isVOPC() && program->gfx_level < GFX10 && pck_defs == exec_hi)
-               pck_defs = vcc | (exec_hi << 8);
-
             for (unsigned i = 0; i < 4; i++) {
-               uint32_t def = (pck_defs >> (i * 8)) & 0xff;
-               if (def == 0) {
+               aco_type dtype =  get_definition_type(program->gfx_level, instr.get(), i);
+               if (dtype == type_invalid) {
                   check(i == instr->definitions.size(), "Too many definitions", instr.get());
                   break;
                } else {
@@ -96,24 +92,24 @@ validate_ir(Program* program)
                      break;
                }
 
-               if (def == m0) {
+               if (dtype == type_m0) {
                   check(instr->definitions[i].isFixed() && instr->definitions[i].physReg() == m0,
                         "Definition needs m0", instr.get());
-               } else if (def == scc) {
+               } else if (dtype == type_scc) {
                   check(instr->definitions[i].isFixed() && instr->definitions[i].physReg() == scc,
                         "Definition needs scc", instr.get());
-               } else if (def == exec_hi) {
+               } else if (dtype == type_exec) {
                   RegClass rc = instr->isSALU() ? s2 : program->lane_mask;
                   check(instr->definitions[i].isFixed() &&
                            instr->definitions[i].physReg() == exec &&
                            instr->definitions[i].regClass() == rc,
                         "Definition needs exec", instr.get());
-               } else if (def == exec_lo) {
+               } else if (dtype == type_exec_lo) {
                   check(instr->definitions[i].isFixed() &&
                            instr->definitions[i].physReg() == exec_lo &&
                            instr->definitions[i].regClass() == s1,
                         "Definition needs exec_lo", instr.get());
-               } else if (def == vcc) {
+               } else if (dtype == type_vcc) {
                   check(instr->definitions[i].regClass() == program->lane_mask,
                         "Definition has to be lane mask", instr.get());
                   check(!instr->definitions[i].isFixed() ||
@@ -121,16 +117,16 @@ validate_ir(Program* program)
                            instr->isSDWA(),
                         "Definition has to be vcc", instr.get());
                } else {
-                  check(instr->definitions[i].size() == def, "Definition has wrong size",
-                        instr.get());
+                  check(instr->definitions[i].size() == type_get_dwords(dtype),
+                        "Definition has wrong size", instr.get());
                }
             }
          }
 
          if (pck_ops != 0) {
             for (unsigned i = 0; i < 4; i++) {
-               uint32_t op = (pck_ops >> (i * 8)) & 0xff;
-               if (op == 0) {
+               aco_type otype = get_operand_type(instr.get(), i);
+               if (otype == type_invalid) {
                   check(i == instr->operands.size(), "Too many operands", instr.get());
                   break;
                } else {
@@ -139,30 +135,32 @@ validate_ir(Program* program)
                      break;
                }
 
-               if (op == m0) {
+               if (otype == type_m0) {
                   check(instr->operands[i].isFixed() && instr->operands[i].physReg() == m0,
                         "Operand needs m0", instr.get());
-               } else if (op == scc) {
+               } else if (otype == type_scc) {
                   check(instr->operands[i].isFixed() && instr->operands[i].physReg() == scc,
                         "Operand needs scc", instr.get());
-               } else if (op == exec_hi) {
+               } else if (otype == type_exec) {
                   RegClass rc = instr->isSALU() ? s2 : program->lane_mask;
                   check(instr->operands[i].isFixed() && instr->operands[i].physReg() == exec &&
                            instr->operands[i].hasRegClass() && instr->operands[i].regClass() == rc,
                         "Operand needs exec", instr.get());
-               } else if (op == exec_lo) {
+               } else if (otype == type_exec_lo) {
                   check(instr->operands[i].isFixed() && instr->operands[i].physReg() == exec_lo &&
                            instr->operands[i].hasRegClass() && instr->operands[i].regClass() == s1,
                         "Operand needs exec_lo", instr.get());
-               } else if (op == vcc) {
+               } else if (otype == type_vcc) {
                   check(instr->operands[i].hasRegClass() &&
                            instr->operands[i].regClass() == program->lane_mask,
                         "Operand has to be lane mask", instr.get());
                   check(!instr->operands[i].isFixed() || instr->operands[i].physReg() == vcc ||
                            instr->isVOP3(),
                         "Operand has to be vcc", instr.get());
+               } else if (otype == type_imm) {
+                  check(instr->operands[i].isLiteral(), "Operand must be literal", instr.get());
                } else {
-                  check(instr->operands[i].size() == op ||
+                  check(instr->operands[i].size() == type_get_dwords(otype) ||
                            (instr->operands[i].isFixed() && instr->operands[i].physReg() >= 128 &&
                             instr->operands[i].physReg() < 256),
                         "Operand has wrong size", instr.get());
-- 
GitLab


From b196724da31f913fdccf063cc4989fc2833506dd Mon Sep 17 00:00:00 2001
From: Georg Lehmann <dadschoorse@gmail.com>
Date: Tue, 11 Jun 2024 21:19:11 +0200
Subject: [PATCH 2/6] aco/opcodes: remove operand_size

---
 src/amd/compiler/aco_ir.cpp         |  9 +--------
 src/amd/compiler/aco_ir.h           |  2 --
 src/amd/compiler/aco_opcodes.py     | 27 ---------------------------
 src/amd/compiler/aco_opcodes_cpp.py |  5 -----
 4 files changed, 1 insertion(+), 42 deletions(-)

diff --git a/src/amd/compiler/aco_ir.cpp b/src/amd/compiler/aco_ir.cpp
index 36a1ff80a8cc1..acfa73dc31108 100644
--- a/src/amd/compiler/aco_ir.cpp
+++ b/src/amd/compiler/aco_ir.cpp
@@ -820,15 +820,8 @@ get_operand_size(aco_ptr<Instruction>& instr, unsigned index)
 {
    if (instr->isPseudo())
       return instr->operands[index].bytes() * 8u;
-   else if (instr->opcode == aco_opcode::v_mad_u64_u32 ||
-            instr->opcode == aco_opcode::v_mad_i64_i32)
-      return index == 2 ? 64 : 32;
-   else if (instr->opcode == aco_opcode::v_fma_mix_f32 ||
-            instr->opcode == aco_opcode::v_fma_mixlo_f16 ||
-            instr->opcode == aco_opcode::v_fma_mixhi_f16)
-      return instr->valu().opsel_hi[index] ? 16 : 32;
    else if (instr->isVALU() || instr->isSALU())
-      return instr_info.operand_size[(int)instr->opcode];
+      return type_get_constant_size(get_operand_type(instr.get(), index));
    else
       return 0;
 }
diff --git a/src/amd/compiler/aco_ir.h b/src/amd/compiler/aco_ir.h
index 6e73a401d1ed9..35e89245f496e 100644
--- a/src/amd/compiler/aco_ir.h
+++ b/src/amd/compiler/aco_ir.h
@@ -2265,8 +2265,6 @@ typedef struct {
    const std::bitset<static_cast<int>(aco_opcode::num_opcodes)> is_atomic;
    const char* name[static_cast<int>(aco_opcode::num_opcodes)];
    const aco::Format format[static_cast<int>(aco_opcode::num_opcodes)];
-   /* sizes used for input/output modifiers and constants */
-   const unsigned operand_size[static_cast<int>(aco_opcode::num_opcodes)];
    const instr_class classes[static_cast<int>(aco_opcode::num_opcodes)];
    const uint32_t definitions[static_cast<int>(aco_opcode::num_opcodes)];
    const uint32_t operands[static_cast<int>(aco_opcode::num_opcodes)];
diff --git a/src/amd/compiler/aco_opcodes.py b/src/amd/compiler/aco_opcodes.py
index e918af60b7698..92d041758ce28 100644
--- a/src/amd/compiler/aco_opcodes.py
+++ b/src/amd/compiler/aco_opcodes.py
@@ -244,33 +244,6 @@ class Instruction(object):
       self.definitions = definitions
       self.operands = operands
 
-      parts = name.replace('_e64', '').rsplit('_', 2)
-      op_dtype = parts[-1]
-
-      op_dtype_sizes = {'{}{}'.format(prefix, size) : size for prefix in 'biuf' for size in [64, 32, 24, 16]}
-      # inline constants are 32-bit for 16-bit integer/typeless instructions: https://reviews.llvm.org/D81841
-      op_dtype_sizes['b16'] = 32
-      op_dtype_sizes['i16'] = 32
-      op_dtype_sizes['u16'] = 32
-
-      # If we can't tell the operand size, default to 32.
-      self.operand_size = op_dtype_sizes.get(op_dtype, 32)
-
-      # exceptions for operands:
-      if 'qsad_' in name:
-        self.operand_size = 0
-      elif 'sad_' in name:
-        self.operand_size = 32
-      elif name in ['v_mad_u64_u32', 'v_mad_i64_i32']:
-        self.operand_size = 0
-      elif self.operand_size == 24:
-        self.operand_size = 32
-      elif op_dtype == 'u8' or op_dtype == 'i8':
-        self.operand_size = 32
-      elif name in ['v_cvt_f32_ubyte0', 'v_cvt_f32_ubyte1',
-                    'v_cvt_f32_ubyte2', 'v_cvt_f32_ubyte3']:
-        self.operand_size = 32
-
 
 class OperandType(IntEnum):
    type_invalid = 0
diff --git a/src/amd/compiler/aco_opcodes_cpp.py b/src/amd/compiler/aco_opcodes_cpp.py
index e972288f84042..8132cef78ec71 100644
--- a/src/amd/compiler/aco_opcodes_cpp.py
+++ b/src/amd/compiler/aco_opcodes_cpp.py
@@ -58,11 +58,6 @@ extern const aco::Info instr_info = {
       aco::Format::${str(instructions[name].format.name)},
       % endfor
    },
-   {
-      % for name in opcode_names:
-      ${instructions[name].operand_size},
-      % endfor
-   },
    {
       % for name in opcode_names:
       instr_class::${instructions[name].cls.value},
-- 
GitLab


From afed39d9da5c6140d017d3d5e58355d1357634cb Mon Sep 17 00:00:00 2001
From: Georg Lehmann <dadschoorse@gmail.com>
Date: Wed, 12 Jun 2024 13:30:51 +0200
Subject: [PATCH 3/6] aco/opcodes: use types for imod/omod

---
 src/amd/compiler/aco_opcodes.py | 905 ++++++++++++++++----------------
 1 file changed, 456 insertions(+), 449 deletions(-)

diff --git a/src/amd/compiler/aco_opcodes.py b/src/amd/compiler/aco_opcodes.py
index 92d041758ce28..0c20c58e74bd4 100644
--- a/src/amd/compiler/aco_opcodes.py
+++ b/src/amd/compiler/aco_opcodes.py
@@ -223,12 +223,10 @@ class Instruction(object):
    """Class that represents all the information we have about the opcode
    NOTE: this must be kept in sync with aco_op_info
    """
-   def __init__(self, name, opcode, format, input_mod, output_mod, is_atomic, cls, definitions, operands):
+   def __init__(self, name, opcode, format, is_atomic, cls, definitions, operands):
       assert isinstance(name, str)
       assert isinstance(opcode, Opcode)
       assert isinstance(format, Format)
-      assert isinstance(input_mod, bool)
-      assert isinstance(output_mod, bool)
       assert isinstance(definitions, int)
       assert isinstance(operands, int)
       assert opcode.gfx6 == -1 or opcode.gfx7 == -1 or opcode.gfx6 == opcode.gfx7
@@ -236,8 +234,8 @@ class Instruction(object):
 
       self.name = name
       self.op = opcode
-      self.input_mod = "1" if input_mod else "0"
-      self.output_mod = "1" if output_mod else "0"
+      self.input_mod = "1" if (operands & 0x80808080) != 0 else "0"
+      self.output_mod = "1" if (definitions & 0x80808080) != 0 else "0"
       self.is_atomic = "1" if is_atomic else "0"
       self.format = format
       self.cls = cls
@@ -274,6 +272,15 @@ class OperandType(IntEnum):
    type_pk_bf16 = auto()
 
 
+def mods(src_def):
+   return src_def | 0x80
+
+def noMods(src_def):
+   return src_def & 0x7f7f7f7f
+
+def hasMods(src_def):
+   return withoutMods(src_def) != src_def
+
 VCC = OperandType.type_vcc
 M0 = OperandType.type_m0
 EXEC_LO = OperandType.type_exec_lo
@@ -286,19 +293,19 @@ U64 = OperandType.type_u64
 U128 = OperandType.type_u128
 I64 = OperandType.type_i64
 F8 = OperandType.type_f8
-F16 = OperandType.type_f16
-F32 = OperandType.type_f32
-F64 = OperandType.type_f64
+F16 = mods(OperandType.type_f16)
+F32 = mods(OperandType.type_f32)
+F64 = mods(OperandType.type_f64)
 BF8 = OperandType.type_bf8
-BF16 = OperandType.type_bf16
+BF16 = mods(OperandType.type_bf16)
 PkU16 = OperandType.type_pk_u16
 PkF8 = OperandType.type_pk_f8
 Pk4F8 = OperandType.type_pk4_f8
-PkF16 = OperandType.type_pk_f16
+PkF16 = mods(OperandType.type_pk_f16)
 PkF32 = OperandType.type_pk_f32
 PkBF8 = OperandType.type_pk_bf8
 Pk4BF8 = OperandType.type_pk4_bf8
-PkBF16 = OperandType.type_pk_bf16
+PkBF16 = mods(OperandType.type_pk_bf16)
 
 
 def src(op1 = 0, op2 = 0, op3 = 0, op4 = 0):
@@ -327,9 +334,9 @@ def op(*args, **kwargs):
 # global dictionary of instructions
 instructions = {}
 
-def insn(name, opcode = Opcode(), format = Format.PSEUDO, cls = InstrClass.Other, input_mod = False, output_mod = False, is_atomic = False, definitions = 0, operands = 0):
+def insn(name, opcode = Opcode(), format = Format.PSEUDO, cls = InstrClass.Other, is_atomic = False, definitions = 0, operands = 0):
    assert name not in instructions
-   instructions[name] = Instruction(name, opcode, format, input_mod, output_mod, is_atomic, cls, definitions, operands)
+   instructions[name] = Instruction(name, opcode, format, is_atomic, cls, definitions, operands)
 
 def default_class(instructions, cls):
    for i in instructions:
@@ -542,7 +549,7 @@ SOP2 = {
    ("p_resumeaddr_addlo",   dst(U32, SCC), src(U32, U32, U32), op(-1)),
 }
 for (name, defs, ops, num, cls) in default_class(SOP2, InstrClass.Salu):
-    insn(name, num, Format.SOP2, cls, definitions = defs, operands = ops)
+    insn(name, num, Format.SOP2, cls, definitions = noMods(defs), operands = noMods(ops))
 
 
 # SOPK instructions: 0 input (+ imm), 1 output + optional scc
@@ -577,7 +584,7 @@ SOPK = {
    ("s_subvector_loop_end",   dst(),         src(), op(gfx10=0x1c, gfx11=0x17, gfx12=-1), InstrClass.Branch),
 }
 for (name, defs, ops, num, cls) in default_class(SOPK, InstrClass.Salu):
-   insn(name, num, Format.SOPK, cls, definitions = defs, operands = ops)
+   insn(name, num, Format.SOPK, cls, definitions = noMods(defs), operands = noMods(ops))
 
 
 # SOP1 instructions: 1 input, 1 output (+optional SCC)
@@ -680,7 +687,7 @@ SOP1 = {
    ("p_load_symbol",            dst(U32),               src(U32), op(-1)),
 }
 for (name, defs, ops, num, cls) in default_class(SOP1, InstrClass.Salu):
-   insn(name, num, Format.SOP1, cls, definitions = defs, operands = ops)
+   insn(name, num, Format.SOP1, cls, definitions = noMods(defs), operands = noMods(ops))
 
 
 # SOPC instructions: 2 inputs and 0 outputs (+SCC)
@@ -735,7 +742,7 @@ SOPC = {
    ("s_cmp_nlt_f16",    dst(SCC), src(F16, F16), op(gfx11=0x5e), InstrClass.SFPU),
 }
 for (name, defs, ops, num, cls) in default_class(SOPC, InstrClass.Salu):
-   insn(name, num, Format.SOPC, cls, definitions = defs, operands = ops)
+   insn(name, num, Format.SOPC, cls, definitions = noMods(defs), operands = noMods(ops))
 
 
 # SOPP instructions: 0 inputs (+optional scc/vcc), 0 outputs
@@ -795,7 +802,7 @@ SOPP = {
    ("s_wait_storecnt_dscnt",      dst(), src(), op(gfx12=0x49), InstrClass.Waitcnt),
 }
 for (name, defs, ops, num, cls) in default_class(SOPP, InstrClass.Salu):
-   insn(name, num, Format.SOPP, cls, definitions = defs, operands = ops)
+   insn(name, num, Format.SOPP, cls, definitions = noMods(defs), operands = noMods(ops))
 
 
 # SMEM instructions: sbase input (2 sgpr), potentially 2 offset inputs, 1 sdata input/output
@@ -910,199 +917,199 @@ for (name, num) in SMEM:
 # VOP2 instructions: 2 inputs, 1 output (+ optional vcc)
 # TODO: misses some GFX6_7 opcodes which were shifted to VOP3 in GFX8
 VOP2 = {
-   ("v_cndmask_b32",       True,  False, dst(U32),      src(U32, U32, VCC), op(0x00, gfx10=0x01)),
-   ("v_readlane_b32",      False, False, dst(U32),      src(U32, U32), op(0x01, gfx8=-1)),
-   ("v_writelane_b32",     False, False, dst(U32),      src(U32, U32, U32), op(0x02, gfx8=-1)),
-   ("v_add_f32",           True,  True,  dst(F32),      src(F32, F32), op(0x03, gfx8=0x01, gfx10=0x03)),
-   ("v_sub_f32",           True,  True,  dst(F32),      src(F32, F32), op(0x04, gfx8=0x02, gfx10=0x04)),
-   ("v_subrev_f32",        True,  True,  dst(F32),      src(F32, F32), op(0x05, gfx8=0x03, gfx10=0x05)),
-   ("v_mac_legacy_f32",    True,  True,  dst(F32),      src(F32, F32, F32), op(0x06, gfx8=-1, gfx10=0x06, gfx11=-1)), #GFX6,7,10
-   ("v_fmac_legacy_f32",   True,  True,  dst(F32),      src(F32, F32, F32), op(gfx10=0x06, gfx12=-1)), #GFX10.3+, v_fmac_dx9_zero_f32 in GFX11
-   ("v_mul_legacy_f32",    True,  True,  dst(F32),      src(F32, F32), op(0x07, gfx8=0x04, gfx10=0x07)), #v_mul_dx9_zero_f32 in GFX11
-   ("v_mul_f32",           True,  True,  dst(F32),      src(F32, F32), op(0x08, gfx8=0x05, gfx10=0x08)),
-   ("v_mul_i32_i24",       False, False, dst(U32),      src(U32, U32), op(0x09, gfx8=0x06, gfx10=0x09)),
-   ("v_mul_hi_i32_i24",    False, False, dst(U32),      src(U32, U32), op(0x0a, gfx8=0x07, gfx10=0x0a)),
-   ("v_mul_u32_u24",       False, False, dst(U32),      src(U32, U32), op(0x0b, gfx8=0x08, gfx10=0x0b)),
-   ("v_mul_hi_u32_u24",    False, False, dst(U32),      src(U32, U32), op(0x0c, gfx8=0x09, gfx10=0x0c)),
-   ("v_dot4c_i32_i8",      False, False, dst(U32),      src(PkU16, PkU16, U32), op(gfx9=0x39, gfx10=0x0d, gfx11=-1)),
-   ("v_min_legacy_f32",    True,  True,  dst(F32),      src(F32, F32), op(0x0d, gfx8=-1)),
-   ("v_max_legacy_f32",    True,  True,  dst(F32),      src(F32, F32), op(0x0e, gfx8=-1)),
-   ("v_min_f32",           True,  True,  dst(F32),      src(F32, F32), op(0x0f, gfx8=0x0a, gfx10=0x0f, gfx12=0x15)), #called v_min_num_f32 in GFX12
-   ("v_max_f32",           True,  True,  dst(F32),      src(F32, F32), op(0x10, gfx8=0x0b, gfx10=0x10, gfx12=0x16)), #called v_max_num_f32 in GFX12
-   ("v_min_i32",           False, False, dst(U32),      src(U32, U32), op(0x11, gfx8=0x0c, gfx10=0x11)),
-   ("v_max_i32",           False, False, dst(U32),      src(U32, U32), op(0x12, gfx8=0x0d, gfx10=0x12)),
-   ("v_min_u32",           False, False, dst(U32),      src(U32, U32), op(0x13, gfx8=0x0e, gfx10=0x13)),
-   ("v_max_u32",           False, False, dst(U32),      src(U32, U32), op(0x14, gfx8=0x0f, gfx10=0x14)),
-   ("v_lshr_b32",          False, False, dst(U32),      src(U32, U32), op(0x15, gfx8=-1)),
-   ("v_lshrrev_b32",       False, False, dst(U32),      src(U32, U32), op(0x16, gfx8=0x10, gfx10=0x16, gfx11=0x19)),
-   ("v_ashr_i32",          False, False, dst(U32),      src(U32, U32), op(0x17, gfx8=-1)),
-   ("v_ashrrev_i32",       False, False, dst(U32),      src(U32, U32), op(0x18, gfx8=0x11, gfx10=0x18, gfx11=0x1a)),
-   ("v_lshl_b32",          False, False, dst(U32),      src(U32, U32), op(0x19, gfx8=-1)),
-   ("v_lshlrev_b32",       False, False, dst(U32),      src(U32, U32), op(0x1a, gfx8=0x12, gfx10=0x1a, gfx11=0x18)),
-   ("v_and_b32",           False, False, dst(U32),      src(U32, U32), op(0x1b, gfx8=0x13, gfx10=0x1b)),
-   ("v_or_b32",            False, False, dst(U32),      src(U32, U32), op(0x1c, gfx8=0x14, gfx10=0x1c)),
-   ("v_xor_b32",           False, False, dst(U32),      src(U32, U32), op(0x1d, gfx8=0x15, gfx10=0x1d)),
-   ("v_xnor_b32",          False, False, dst(U32),      src(U32, U32), op(gfx10=0x1e)),
-   ("v_mac_f32",           True,  True,  dst(F32),      src(F32, F32, F32), op(0x1f, gfx8=0x16, gfx10=0x1f, gfx11=-1)),
-   ("v_madmk_f32",         False, False, dst(F32),      src(F32, F32, IMM), op(0x20, gfx8=0x17, gfx10=0x20, gfx11=-1)),
-   ("v_madak_f32",         False, False, dst(F32),      src(F32, F32, IMM), op(0x21, gfx8=0x18, gfx10=0x21, gfx11=-1)),
-   ("v_mbcnt_hi_u32_b32",  False, False, dst(U32),      src(U32, U32), op(0x24, gfx8=-1)),
-   ("v_add_co_u32",        False, False, dst(U32, VCC), src(U32, U32), op(0x25, gfx8=0x19, gfx10=-1)), # VOP3B only in RDNA
-   ("v_sub_co_u32",        False, False, dst(U32, VCC), src(U32, U32), op(0x26, gfx8=0x1a, gfx10=-1)), # VOP3B only in RDNA
-   ("v_subrev_co_u32",     False, False, dst(U32, VCC), src(U32, U32), op(0x27, gfx8=0x1b, gfx10=-1)), # VOP3B only in RDNA
-   ("v_addc_co_u32",       False, False, dst(U32, VCC), src(U32, U32, VCC), op(0x28, gfx8=0x1c, gfx10=0x28, gfx11=0x20)), # v_add_co_ci_u32 in RDNA
-   ("v_subb_co_u32",       False, False, dst(U32, VCC), src(U32, U32, VCC), op(0x29, gfx8=0x1d, gfx10=0x29, gfx11=0x21)), # v_sub_co_ci_u32 in RDNA
-   ("v_subbrev_co_u32",    False, False, dst(U32, VCC), src(U32, U32, VCC), op(0x2a, gfx8=0x1e, gfx10=0x2a, gfx11=0x22)), # v_subrev_co_ci_u32 in RDNA
-   ("v_fmac_f32",          True,  True,  dst(F32),      src(F32, F32, F32), op(gfx10=0x2b)),
-   ("v_fmamk_f32",         False, False, dst(F32),      src(F32, F32, IMM), op(gfx10=0x2c)),
-   ("v_fmaak_f32",         False, False, dst(F32),      src(F32, F32, IMM), op(gfx10=0x2d)),
-   ("v_cvt_pkrtz_f16_f32", True,  False, dst(PkF16),    src(F32, F32), op(0x2f, gfx8=-1, gfx10=0x2f)), #v_cvt_pk_rtz_f16_f32 in GFX11
-   ("v_add_f16",           True,  True,  dst(F16),      src(F16, F16), op(gfx8=0x1f, gfx10=0x32)),
-   ("v_sub_f16",           True,  True,  dst(F16),      src(F16, F16), op(gfx8=0x20, gfx10=0x33)),
-   ("v_subrev_f16",        True,  True,  dst(F16),      src(F16, F16), op(gfx8=0x21, gfx10=0x34)),
-   ("v_mul_f16",           True,  True,  dst(F16),      src(F16, F16), op(gfx8=0x22, gfx10=0x35)),
-   ("v_mac_f16",           True,  True,  dst(F16),      src(F16, F16, F16), op(gfx8=0x23, gfx10=-1)),
-   ("v_madmk_f16",         False, False, dst(F16),      src(F16, F16, IMM), op(gfx8=0x24, gfx10=-1)),
-   ("v_madak_f16",         False, False, dst(F16),      src(F16, F16, IMM), op(gfx8=0x25, gfx10=-1)),
-   ("v_add_u16",           False, False, dst(U16),      src(U16, U16), op(gfx8=0x26, gfx10=-1)),
-   ("v_sub_u16",           False, False, dst(U16),      src(U16, U16), op(gfx8=0x27, gfx10=-1)),
-   ("v_subrev_u16",        False, False, dst(U16),      src(U16, U16), op(gfx8=0x28, gfx10=-1)),
-   ("v_mul_lo_u16",        False, False, dst(U16),      src(U16, U16), op(gfx8=0x29, gfx10=-1)),
-   ("v_lshlrev_b16",       False, False, dst(U16),      src(U16, U16), op(gfx8=0x2a, gfx10=-1)),
-   ("v_lshrrev_b16",       False, False, dst(U16),      src(U16, U16), op(gfx8=0x2b, gfx10=-1)),
-   ("v_ashrrev_i16",       False, False, dst(U16),      src(U16, U16), op(gfx8=0x2c, gfx10=-1)),
-   ("v_max_f16",           True,  True,  dst(F16),      src(F16, F16), op(gfx8=0x2d, gfx10=0x39, gfx12=0x31)), #called v_max_num_f16 in GFX12
-   ("v_min_f16",           True,  True,  dst(F16),      src(F16, F16), op(gfx8=0x2e, gfx10=0x3a, gfx12=0x30)), #called v_min_num_f16 in GFX12
-   ("v_max_u16",           False, False, dst(U16),      src(U16, U16), op(gfx8=0x2f, gfx10=-1)),
-   ("v_max_i16",           False, False, dst(U16),      src(U16, U16), op(gfx8=0x30, gfx10=-1)),
-   ("v_min_u16",           False, False, dst(U16),      src(U16, U16), op(gfx8=0x31, gfx10=-1)),
-   ("v_min_i16",           False, False, dst(U16),      src(U16, U16), op(gfx8=0x32, gfx10=-1)),
-   ("v_ldexp_f16",         False, True,  dst(F16),      src(F16, U16), op(gfx8=0x33, gfx10=0x3b)),
-   ("v_add_u32",           False, False, dst(U32),      src(U32, U32), op(gfx9=0x34, gfx10=0x25)), # called v_add_nc_u32 in RDNA
-   ("v_sub_u32",           False, False, dst(U32),      src(U32, U32), op(gfx9=0x35, gfx10=0x26)), # called v_sub_nc_u32 in RDNA
-   ("v_subrev_u32",        False, False, dst(U32),      src(U32, U32), op(gfx9=0x36, gfx10=0x27)), # called v_subrev_nc_u32 in RDNA
-   ("v_fmac_f16",          True,  True,  dst(F16),      src(F16, F16, F16), op(gfx10=0x36)),
-   ("v_fmamk_f16",         False, False, dst(F16),      src(F16, F16, IMM), op(gfx10=0x37)),
-   ("v_fmaak_f16",         False, False, dst(F16),      src(F16, F16, IMM), op(gfx10=0x38)),
-   ("v_pk_fmac_f16",       False, False, dst(PkF16),    src(PkF16, PkF16, PkF16), op(gfx10=0x3c)),
-   ("v_dot2c_f32_f16",     False, False, dst(F32),      src(PkF16, PkF16, F32), op(gfx9=0x37, gfx10=0x02, gfx12=-1)), #v_dot2acc_f32_f16 in GFX11
-   ("v_add_f64",           True,  True,  dst(F64),      src(F64, F64), op(gfx12=0x02), InstrClass.ValuDoubleAdd),
-   ("v_mul_f64",           True,  True,  dst(F64),      src(F64, F64), op(gfx12=0x06), InstrClass.ValuDoubleAdd),
-   ("v_lshlrev_b64",       False, False, dst(U64),      src(U32, U64), op(gfx12=0x1f), InstrClass.Valu64),
-   ("v_min_f64",           True,  True,  dst(F64),      src(F64, F64), op(gfx12=0x0d), InstrClass.ValuDoubleAdd),
-   ("v_max_f64",           True,  True,  dst(F64),      src(F64, F64), op(gfx12=0x0e), InstrClass.ValuDoubleAdd),
+   ("v_cndmask_b32",       dst(U32),      src(mods(U32), mods(U32), VCC), op(0x00, gfx10=0x01)),
+   ("v_readlane_b32",      dst(U32),      src(U32, U32), op(0x01, gfx8=-1)),
+   ("v_writelane_b32",     dst(U32),      src(U32, U32, U32), op(0x02, gfx8=-1)),
+   ("v_add_f32",           dst(F32),      src(F32, F32), op(0x03, gfx8=0x01, gfx10=0x03)),
+   ("v_sub_f32",           dst(F32),      src(F32, F32), op(0x04, gfx8=0x02, gfx10=0x04)),
+   ("v_subrev_f32",        dst(F32),      src(F32, F32), op(0x05, gfx8=0x03, gfx10=0x05)),
+   ("v_mac_legacy_f32",    dst(F32),      src(F32, F32, F32), op(0x06, gfx8=-1, gfx10=0x06, gfx11=-1)), #GFX6,7,10
+   ("v_fmac_legacy_f32",   dst(F32),      src(F32, F32, F32), op(gfx10=0x06, gfx12=-1)), #GFX10.3+, v_fmac_dx9_zero_f32 in GFX11
+   ("v_mul_legacy_f32",    dst(F32),      src(F32, F32), op(0x07, gfx8=0x04, gfx10=0x07)), #v_mul_dx9_zero_f32 in GFX11
+   ("v_mul_f32",           dst(F32),      src(F32, F32), op(0x08, gfx8=0x05, gfx10=0x08)),
+   ("v_mul_i32_i24",       dst(U32),      src(U32, U32), op(0x09, gfx8=0x06, gfx10=0x09)),
+   ("v_mul_hi_i32_i24",    dst(U32),      src(U32, U32), op(0x0a, gfx8=0x07, gfx10=0x0a)),
+   ("v_mul_u32_u24",       dst(U32),      src(U32, U32), op(0x0b, gfx8=0x08, gfx10=0x0b)),
+   ("v_mul_hi_u32_u24",    dst(U32),      src(U32, U32), op(0x0c, gfx8=0x09, gfx10=0x0c)),
+   ("v_dot4c_i32_i8",      dst(U32),      src(PkU16, PkU16, U32), op(gfx9=0x39, gfx10=0x0d, gfx11=-1)),
+   ("v_min_legacy_f32",    dst(F32),      src(F32, F32), op(0x0d, gfx8=-1)),
+   ("v_max_legacy_f32",    dst(F32),      src(F32, F32), op(0x0e, gfx8=-1)),
+   ("v_min_f32",           dst(F32),      src(F32, F32), op(0x0f, gfx8=0x0a, gfx10=0x0f, gfx12=0x15)), #called v_min_num_f32 in GFX12
+   ("v_max_f32",           dst(F32),      src(F32, F32), op(0x10, gfx8=0x0b, gfx10=0x10, gfx12=0x16)), #called v_max_num_f32 in GFX12
+   ("v_min_i32",           dst(U32),      src(U32, U32), op(0x11, gfx8=0x0c, gfx10=0x11)),
+   ("v_max_i32",           dst(U32),      src(U32, U32), op(0x12, gfx8=0x0d, gfx10=0x12)),
+   ("v_min_u32",           dst(U32),      src(U32, U32), op(0x13, gfx8=0x0e, gfx10=0x13)),
+   ("v_max_u32",           dst(U32),      src(U32, U32), op(0x14, gfx8=0x0f, gfx10=0x14)),
+   ("v_lshr_b32",          dst(U32),      src(U32, U32), op(0x15, gfx8=-1)),
+   ("v_lshrrev_b32",       dst(U32),      src(U32, U32), op(0x16, gfx8=0x10, gfx10=0x16, gfx11=0x19)),
+   ("v_ashr_i32",          dst(U32),      src(U32, U32), op(0x17, gfx8=-1)),
+   ("v_ashrrev_i32",       dst(U32),      src(U32, U32), op(0x18, gfx8=0x11, gfx10=0x18, gfx11=0x1a)),
+   ("v_lshl_b32",          dst(U32),      src(U32, U32), op(0x19, gfx8=-1)),
+   ("v_lshlrev_b32",       dst(U32),      src(U32, U32), op(0x1a, gfx8=0x12, gfx10=0x1a, gfx11=0x18)),
+   ("v_and_b32",           dst(U32),      src(U32, U32), op(0x1b, gfx8=0x13, gfx10=0x1b)),
+   ("v_or_b32",            dst(U32),      src(U32, U32), op(0x1c, gfx8=0x14, gfx10=0x1c)),
+   ("v_xor_b32",           dst(U32),      src(U32, U32), op(0x1d, gfx8=0x15, gfx10=0x1d)),
+   ("v_xnor_b32",          dst(U32),      src(U32, U32), op(gfx10=0x1e)),
+   ("v_mac_f32",           dst(F32),      src(F32, F32, F32), op(0x1f, gfx8=0x16, gfx10=0x1f, gfx11=-1)),
+   ("v_madmk_f32",         dst(noMods(F32)), noMods(src(F32, F32, IMM)), op(0x20, gfx8=0x17, gfx10=0x20, gfx11=-1)),
+   ("v_madak_f32",         dst(noMods(F32)), noMods(src(F32, F32, IMM)), op(0x21, gfx8=0x18, gfx10=0x21, gfx11=-1)),
+   ("v_mbcnt_hi_u32_b32",  dst(U32),      src(U32, U32), op(0x24, gfx8=-1)),
+   ("v_add_co_u32",        dst(U32, VCC), src(U32, U32), op(0x25, gfx8=0x19, gfx10=-1)), # VOP3B only in RDNA
+   ("v_sub_co_u32",        dst(U32, VCC), src(U32, U32), op(0x26, gfx8=0x1a, gfx10=-1)), # VOP3B only in RDNA
+   ("v_subrev_co_u32",     dst(U32, VCC), src(U32, U32), op(0x27, gfx8=0x1b, gfx10=-1)), # VOP3B only in RDNA
+   ("v_addc_co_u32",       dst(U32, VCC), src(U32, U32, VCC), op(0x28, gfx8=0x1c, gfx10=0x28, gfx11=0x20)), # v_add_co_ci_u32 in RDNA
+   ("v_subb_co_u32",       dst(U32, VCC), src(U32, U32, VCC), op(0x29, gfx8=0x1d, gfx10=0x29, gfx11=0x21)), # v_sub_co_ci_u32 in RDNA
+   ("v_subbrev_co_u32",    dst(U32, VCC), src(U32, U32, VCC), op(0x2a, gfx8=0x1e, gfx10=0x2a, gfx11=0x22)), # v_subrev_co_ci_u32 in RDNA
+   ("v_fmac_f32",          dst(F32),      src(F32, F32, F32), op(gfx10=0x2b)),
+   ("v_fmamk_f32",         dst(noMods(F32)), noMods(src(F32, F32, IMM)), op(gfx10=0x2c)),
+   ("v_fmaak_f32",         dst(noMods(F32)), noMods(src(F32, F32, IMM)), op(gfx10=0x2d)),
+   ("v_cvt_pkrtz_f16_f32", dst(noMods(PkF16)), src(F32, F32), op(0x2f, gfx8=-1, gfx10=0x2f)), #v_cvt_pk_rtz_f16_f32 in GFX11
+   ("v_add_f16",           dst(F16),      src(F16, F16), op(gfx8=0x1f, gfx10=0x32)),
+   ("v_sub_f16",           dst(F16),      src(F16, F16), op(gfx8=0x20, gfx10=0x33)),
+   ("v_subrev_f16",        dst(F16),      src(F16, F16), op(gfx8=0x21, gfx10=0x34)),
+   ("v_mul_f16",           dst(F16),      src(F16, F16), op(gfx8=0x22, gfx10=0x35)),
+   ("v_mac_f16",           dst(F16),      src(F16, F16, F16), op(gfx8=0x23, gfx10=-1)),
+   ("v_madmk_f16",         dst(noMods(F16)), noMods(src(F16, F16, IMM)), op(gfx8=0x24, gfx10=-1)),
+   ("v_madak_f16",         dst(noMods(F16)), noMods(src(F16, F16, IMM)), op(gfx8=0x25, gfx10=-1)),
+   ("v_add_u16",           dst(U16),      src(U16, U16), op(gfx8=0x26, gfx10=-1)),
+   ("v_sub_u16",           dst(U16),      src(U16, U16), op(gfx8=0x27, gfx10=-1)),
+   ("v_subrev_u16",        dst(U16),      src(U16, U16), op(gfx8=0x28, gfx10=-1)),
+   ("v_mul_lo_u16",        dst(U16),      src(U16, U16), op(gfx8=0x29, gfx10=-1)),
+   ("v_lshlrev_b16",       dst(U16),      src(U16, U16), op(gfx8=0x2a, gfx10=-1)),
+   ("v_lshrrev_b16",       dst(U16),      src(U16, U16), op(gfx8=0x2b, gfx10=-1)),
+   ("v_ashrrev_i16",       dst(U16),      src(U16, U16), op(gfx8=0x2c, gfx10=-1)),
+   ("v_max_f16",           dst(F16),      src(F16, F16), op(gfx8=0x2d, gfx10=0x39, gfx12=0x31)), #called v_max_num_f16 in GFX12
+   ("v_min_f16",           dst(F16),      src(F16, F16), op(gfx8=0x2e, gfx10=0x3a, gfx12=0x30)), #called v_min_num_f16 in GFX12
+   ("v_max_u16",           dst(U16),      src(U16, U16), op(gfx8=0x2f, gfx10=-1)),
+   ("v_max_i16",           dst(U16),      src(U16, U16), op(gfx8=0x30, gfx10=-1)),
+   ("v_min_u16",           dst(U16),      src(U16, U16), op(gfx8=0x31, gfx10=-1)),
+   ("v_min_i16",           dst(U16),      src(U16, U16), op(gfx8=0x32, gfx10=-1)),
+   ("v_ldexp_f16",         dst(F16),      src(noMods(F16), U16), op(gfx8=0x33, gfx10=0x3b)),
+   ("v_add_u32",           dst(U32),      src(U32, U32), op(gfx9=0x34, gfx10=0x25)), # called v_add_nc_u32 in RDNA
+   ("v_sub_u32",           dst(U32),      src(U32, U32), op(gfx9=0x35, gfx10=0x26)), # called v_sub_nc_u32 in RDNA
+   ("v_subrev_u32",        dst(U32),      src(U32, U32), op(gfx9=0x36, gfx10=0x27)), # called v_subrev_nc_u32 in RDNA
+   ("v_fmac_f16",          dst(F16),      src(F16, F16, F16), op(gfx10=0x36)),
+   ("v_fmamk_f16",         dst(noMods(F16)), noMods(src(F16, F16, IMM)), op(gfx10=0x37)),
+   ("v_fmaak_f16",         dst(noMods(F16)), noMods(src(F16, F16, IMM)), op(gfx10=0x38)),
+   ("v_pk_fmac_f16",       dst(noMods(PkF16)), noMods(src(PkF16, PkF16, PkF16)), op(gfx10=0x3c)),
+   ("v_dot2c_f32_f16",     dst(noMods(F32)), noMods(src(PkF16, PkF16, F32)), op(gfx9=0x37, gfx10=0x02, gfx12=-1)), #v_dot2acc_f32_f16 in GFX11
+   ("v_add_f64",           dst(F64),      src(F64, F64), op(gfx12=0x02), InstrClass.ValuDoubleAdd),
+   ("v_mul_f64",           dst(F64),      src(F64, F64), op(gfx12=0x06), InstrClass.ValuDoubleAdd),
+   ("v_lshlrev_b64",       dst(U64),      src(U32, U64), op(gfx12=0x1f), InstrClass.Valu64),
+   ("v_min_f64",           dst(F64),      src(F64, F64), op(gfx12=0x0d), InstrClass.ValuDoubleAdd),
+   ("v_max_f64",           dst(F64),      src(F64, F64), op(gfx12=0x0e), InstrClass.ValuDoubleAdd),
 }
-for (name, in_mod, out_mod, defs, ops, num, cls) in default_class(VOP2, InstrClass.Valu32):
-   insn(name, num, Format.VOP2, cls, in_mod, out_mod, definitions = defs, operands = ops)
+for (name, defs, ops, num, cls) in default_class(VOP2, InstrClass.Valu32):
+   insn(name, num, Format.VOP2, cls, definitions = defs, operands = ops)
 
 
 # VOP1 instructions: instructions with 1 input and 1 output
 VOP1 = {
-   ("v_nop",                      False, False, dst(),    src(), op(0x00)),
-   ("v_mov_b32",                  False, False, dst(U32), src(U32), op(0x01)),
-   ("v_readfirstlane_b32",        False, False, dst(U32), src(U32), op(0x02)),
-   ("v_cvt_i32_f64",              True,  False, dst(U32), src(F64), op(0x03), InstrClass.ValuDoubleConvert),
-   ("v_cvt_f64_i32",              False, True,  dst(F64), src(U32), op(0x04), InstrClass.ValuDoubleConvert),
-   ("v_cvt_f32_i32",              False, True,  dst(F32), src(U32), op(0x05)),
-   ("v_cvt_f32_u32",              False, True,  dst(F32), src(U32), op(0x06)),
-   ("v_cvt_u32_f32",              True,  False, dst(U32), src(F32), op(0x07)),
-   ("v_cvt_i32_f32",              True,  False, dst(U32), src(F32), op(0x08)),
-   ("v_cvt_f16_f32",              True,  True,  dst(F16), src(F32), op(0x0a)),
-   ("p_cvt_f16_f32_rtne",         True,  True,  dst(F16), src(F32), op(-1)),
-   ("v_cvt_f32_f16",              True,  True,  dst(F32), src(F16), op(0x0b)),
-   ("v_cvt_rpi_i32_f32",          True,  False, dst(U32), src(F32), op(0x0c)), #v_cvt_nearest_i32_f32 in GFX11
-   ("v_cvt_flr_i32_f32",          True,  False, dst(U32), src(F32), op(0x0d)),#v_cvt_floor_i32_f32 in GFX11
-   ("v_cvt_off_f32_i4",           False, True,  dst(F32), src(U32), op(0x0e)),
-   ("v_cvt_f32_f64",              True,  True,  dst(F32), src(F64), op(0x0f), InstrClass.ValuDoubleConvert),
-   ("v_cvt_f64_f32",              True,  True,  dst(F64), src(F32), op(0x10), InstrClass.ValuDoubleConvert),
-   ("v_cvt_f32_ubyte0",           False, True,  dst(F32), src(U32), op(0x11)),
-   ("v_cvt_f32_ubyte1",           False, True,  dst(F32), src(U32), op(0x12)),
-   ("v_cvt_f32_ubyte2",           False, True,  dst(F32), src(U32), op(0x13)),
-   ("v_cvt_f32_ubyte3",           False, True,  dst(F32), src(U32), op(0x14)),
-   ("v_cvt_u32_f64",              True,  False, dst(U32), src(F64), op(0x15), InstrClass.ValuDoubleConvert),
-   ("v_cvt_f64_u32",              False, True,  dst(F64), src(U32), op(0x16), InstrClass.ValuDoubleConvert),
-   ("v_trunc_f64",                True,  True,  dst(F64), src(F64), op(gfx7=0x17), InstrClass.ValuDouble),
-   ("v_ceil_f64",                 True,  True,  dst(F64), src(F64), op(gfx7=0x18), InstrClass.ValuDouble),
-   ("v_rndne_f64",                True,  True,  dst(F64), src(F64), op(gfx7=0x19), InstrClass.ValuDouble),
-   ("v_floor_f64",                True,  True,  dst(F64), src(F64), op(gfx7=0x1a), InstrClass.ValuDouble),
-   ("v_pipeflush",                False, False, dst(),    src(), op(gfx10=0x1b)),
-   ("v_fract_f32",                True,  True,  dst(F32), src(F32), op(0x20, gfx8=0x1b, gfx10=0x20)),
-   ("v_trunc_f32",                True,  True,  dst(F32), src(F32), op(0x21, gfx8=0x1c, gfx10=0x21)),
-   ("v_ceil_f32",                 True,  True,  dst(F32), src(F32), op(0x22, gfx8=0x1d, gfx10=0x22)),
-   ("v_rndne_f32",                True,  True,  dst(F32), src(F32), op(0x23, gfx8=0x1e, gfx10=0x23)),
-   ("v_floor_f32",                True,  True,  dst(F32), src(F32), op(0x24, gfx8=0x1f, gfx10=0x24)),
-   ("v_exp_f32",                  True,  True,  dst(F32), src(F32), op(0x25, gfx8=0x20, gfx10=0x25), InstrClass.ValuTranscendental32),
-   ("v_log_clamp_f32",            True,  True,  dst(F32), src(F32), op(0x26, gfx8=-1), InstrClass.ValuTranscendental32),
-   ("v_log_f32",                  True,  True,  dst(F32), src(F32), op(0x27, gfx8=0x21, gfx10=0x27), InstrClass.ValuTranscendental32),
-   ("v_rcp_clamp_f32",            True,  True,  dst(F32), src(F32), op(0x28, gfx8=-1), InstrClass.ValuTranscendental32),
-   ("v_rcp_legacy_f32",           True,  True,  dst(F32), src(F32), op(0x29, gfx8=-1), InstrClass.ValuTranscendental32),
-   ("v_rcp_f32",                  True,  True,  dst(F32), src(F32), op(0x2a, gfx8=0x22, gfx10=0x2a), InstrClass.ValuTranscendental32),
-   ("v_rcp_iflag_f32",            True,  True,  dst(F32), src(F32), op(0x2b, gfx8=0x23, gfx10=0x2b), InstrClass.ValuTranscendental32),
-   ("v_rsq_clamp_f32",            True,  True,  dst(F32), src(F32), op(0x2c, gfx8=-1), InstrClass.ValuTranscendental32),
-   ("v_rsq_legacy_f32",           True,  True,  dst(F32), src(F32), op(0x2d, gfx8=-1), InstrClass.ValuTranscendental32),
-   ("v_rsq_f32",                  True,  True,  dst(F32), src(F32), op(0x2e, gfx8=0x24, gfx10=0x2e), InstrClass.ValuTranscendental32),
-   ("v_rcp_f64",                  True,  True,  dst(F64), src(F64), op(0x2f, gfx8=0x25, gfx10=0x2f), InstrClass.ValuDoubleTranscendental),
-   ("v_rcp_clamp_f64",            True,  True,  dst(F64), src(F64), op(0x30, gfx8=-1), InstrClass.ValuDoubleTranscendental),
-   ("v_rsq_f64",                  True,  True,  dst(F64), src(F64), op(0x31, gfx8=0x26, gfx10=0x31), InstrClass.ValuDoubleTranscendental),
-   ("v_rsq_clamp_f64",            True,  True,  dst(F64), src(F64), op(0x32, gfx8=-1), InstrClass.ValuDoubleTranscendental),
-   ("v_sqrt_f32",                 True,  True,  dst(F32), src(F32), op(0x33, gfx8=0x27, gfx10=0x33), InstrClass.ValuTranscendental32),
-   ("v_sqrt_f64",                 True,  True,  dst(F64), src(F64), op(0x34, gfx8=0x28, gfx10=0x34), InstrClass.ValuDoubleTranscendental),
-   ("v_sin_f32",                  True,  True,  dst(F32), src(F32), op(0x35, gfx8=0x29, gfx10=0x35), InstrClass.ValuTranscendental32),
-   ("v_cos_f32",                  True,  True,  dst(F32), src(F32), op(0x36, gfx8=0x2a, gfx10=0x36), InstrClass.ValuTranscendental32),
-   ("v_not_b32",                  False, False, dst(U32), src(U32), op(0x37, gfx8=0x2b, gfx10=0x37)),
-   ("v_bfrev_b32",                False, False, dst(U32), src(U32), op(0x38, gfx8=0x2c, gfx10=0x38)),
-   ("v_ffbh_u32",                 False, False, dst(U32), src(U32), op(0x39, gfx8=0x2d, gfx10=0x39)), #v_clz_i32_u32 in GFX11
-   ("v_ffbl_b32",                 False, False, dst(U32), src(U32), op(0x3a, gfx8=0x2e, gfx10=0x3a)), #v_ctz_i32_b32 in GFX11
-   ("v_ffbh_i32",                 False, False, dst(U32), src(U32), op(0x3b, gfx8=0x2f, gfx10=0x3b)), #v_cls_i32 in GFX11
-   ("v_frexp_exp_i32_f64",        True,  False, dst(U32), src(F64), op(0x3c, gfx8=0x30, gfx10=0x3c), InstrClass.ValuDouble),
-   ("v_frexp_mant_f64",           True,  False, dst(F64), src(F64), op(0x3d, gfx8=0x31, gfx10=0x3d), InstrClass.ValuDouble),
-   ("v_fract_f64",                True,  True,  dst(F64), src(F64), op(0x3e, gfx8=0x32, gfx10=0x3e), InstrClass.ValuDouble),
-   ("v_frexp_exp_i32_f32",        True,  False, dst(U32), src(F32), op(0x3f, gfx8=0x33, gfx10=0x3f)),
-   ("v_frexp_mant_f32",           True,  False, dst(F32), src(F32), op(0x40, gfx8=0x34, gfx10=0x40)),
-   ("v_clrexcp",                  False, False, dst(),  src(), op(0x41, gfx8=0x35, gfx10=0x41, gfx11=-1)),
-   ("v_movreld_b32",              False, False, dst(U32), src(U32, M0), op(0x42, gfx8=0x36, gfx9=-1, gfx10=0x42)),
-   ("v_movrels_b32",              False, False, dst(U32), src(U32, M0), op(0x43, gfx8=0x37, gfx9=-1, gfx10=0x43)),
-   ("v_movrelsd_b32",             False, False, dst(U32), src(U32, M0), op(0x44, gfx8=0x38, gfx9=-1, gfx10=0x44)),
-   ("v_movrelsd_2_b32",           False, False, dst(U32), src(U32, M0), op(gfx10=0x48)),
-   ("v_screen_partition_4se_b32", False, False, dst(U32), src(U32), op(gfx9=0x37, gfx10=-1)),
-   ("v_cvt_f16_u16",              False, True,  dst(F16), src(U16), op(gfx8=0x39, gfx10=0x50)),
-   ("v_cvt_f16_i16",              False, True,  dst(F16), src(U16), op(gfx8=0x3a, gfx10=0x51)),
-   ("v_cvt_u16_f16",              True,  False, dst(U16), src(F16), op(gfx8=0x3b, gfx10=0x52)),
-   ("v_cvt_i16_f16",              True,  False, dst(U16), src(F16), op(gfx8=0x3c, gfx10=0x53)),
-   ("v_rcp_f16",                  True,  True,  dst(F16), dst(F16), op(gfx8=0x3d, gfx10=0x54), InstrClass.ValuTranscendental32),
-   ("v_sqrt_f16",                 True,  True,  dst(F16), dst(F16), op(gfx8=0x3e, gfx10=0x55), InstrClass.ValuTranscendental32),
-   ("v_rsq_f16",                  True,  True,  dst(F16), dst(F16), op(gfx8=0x3f, gfx10=0x56), InstrClass.ValuTranscendental32),
-   ("v_log_f16",                  True,  True,  dst(F16), dst(F16), op(gfx8=0x40, gfx10=0x57), InstrClass.ValuTranscendental32),
-   ("v_exp_f16",                  True,  True,  dst(F16), dst(F16), op(gfx8=0x41, gfx10=0x58), InstrClass.ValuTranscendental32),
-   ("v_frexp_mant_f16",           True,  False, dst(F16), dst(F16), op(gfx8=0x42, gfx10=0x59)),
-   ("v_frexp_exp_i16_f16",        True,  False, dst(U16), dst(F16), op(gfx8=0x43, gfx10=0x5a)),
-   ("v_floor_f16",                True,  True,  dst(F16), dst(F16), op(gfx8=0x44, gfx10=0x5b)),
-   ("v_ceil_f16",                 True,  True,  dst(F16), dst(F16), op(gfx8=0x45, gfx10=0x5c)),
-   ("v_trunc_f16",                True,  True,  dst(F16), dst(F16), op(gfx8=0x46, gfx10=0x5d)),
-   ("v_rndne_f16",                True,  True,  dst(F16), dst(F16), op(gfx8=0x47, gfx10=0x5e)),
-   ("v_fract_f16",                True,  True,  dst(F16), dst(F16), op(gfx8=0x48, gfx10=0x5f)),
-   ("v_sin_f16",                  True,  True,  dst(F16), dst(F16), op(gfx8=0x49, gfx10=0x60), InstrClass.ValuTranscendental32),
-   ("v_cos_f16",                  True,  True,  dst(F16), dst(F16), op(gfx8=0x4a, gfx10=0x61), InstrClass.ValuTranscendental32),
-   ("v_exp_legacy_f32",           True,  True,  dst(F32), src(F32), op(gfx7=0x46, gfx8=0x4b, gfx10=-1), InstrClass.ValuTranscendental32),
-   ("v_log_legacy_f32",           True,  True,  dst(F32), src(F32), op(gfx7=0x45, gfx8=0x4c, gfx10=-1), InstrClass.ValuTranscendental32),
-   ("v_sat_pk_u8_i16",            False, False, dst(U16), src(U32), op(gfx9=0x4f, gfx10=0x62)),
-   ("v_cvt_norm_i16_f16",         True,  False, dst(U16), src(F16), op(gfx9=0x4d, gfx10=0x63)),
-   ("v_cvt_norm_u16_f16",         True,  False, dst(U16), src(F16), op(gfx9=0x4e, gfx10=0x64)),
-   ("v_swap_b32",                 False, False, dst(U32, U32), src(U32, U32), op(gfx9=0x51, gfx10=0x65)),
-   ("v_swaprel_b32",              False, False, dst(U32, U32), src(U32, U32, M0), op(gfx10=0x68)),
-   ("v_permlane64_b32",           False, False, dst(U32), src(U32), op(gfx11=0x67)), #cannot use VOP3
-   ("v_not_b16",                  False, False, dst(U16), src(U16), op(gfx11=0x69)),
-   ("v_cvt_i32_i16",              False, False, dst(U32), src(U16), op(gfx11=0x6a)),
-   ("v_cvt_u32_u16",              False, False, dst(U32), src(U16), op(gfx11=0x6b)),
-   ("v_mov_b16",                  True,  False, dst(U16), src(U16), op(gfx11=0x1c)),
-   ("v_swap_b16",                 False, False, dst(U16, U16), src(U16, U16), op(gfx11=0x66)),
-   ("v_cvt_f32_fp8",              False, False, dst(F32), src(F8), op(gfx12=0x6c)),
-   ("v_cvt_f32_bf8",              False, False, dst(F32), src(BF8), op(gfx12=0x6d)),
-   ("v_cvt_pk_f32_fp8",           False, False, dst(PkF32), src(PkF8), op(gfx12=0x6e)),
-   ("v_cvt_pk_f32_bf8",           False, False, dst(PkF32), src(PkBF8), op(gfx12=0x6f)),
+   ("v_nop",                      dst(),    src(), op(0x00)),
+   ("v_mov_b32",                  dst(U32), src(U32), op(0x01)),
+   ("v_readfirstlane_b32",        dst(U32), src(U32), op(0x02)),
+   ("v_cvt_i32_f64",              dst(U32), src(F64), op(0x03), InstrClass.ValuDoubleConvert),
+   ("v_cvt_f64_i32",              dst(F64), src(U32), op(0x04), InstrClass.ValuDoubleConvert),
+   ("v_cvt_f32_i32",              dst(F32), src(U32), op(0x05)),
+   ("v_cvt_f32_u32",              dst(F32), src(U32), op(0x06)),
+   ("v_cvt_u32_f32",              dst(U32), src(F32), op(0x07)),
+   ("v_cvt_i32_f32",              dst(U32), src(F32), op(0x08)),
+   ("v_cvt_f16_f32",              dst(F16), src(F32), op(0x0a)),
+   ("p_cvt_f16_f32_rtne",         dst(F16), src(F32), op(-1)),
+   ("v_cvt_f32_f16",              dst(F32), src(F16), op(0x0b)),
+   ("v_cvt_rpi_i32_f32",          dst(U32), src(F32), op(0x0c)), #v_cvt_nearest_i32_f32 in GFX11
+   ("v_cvt_flr_i32_f32",          dst(U32), src(F32), op(0x0d)),#v_cvt_floor_i32_f32 in GFX11
+   ("v_cvt_off_f32_i4",           dst(F32), src(U32), op(0x0e)),
+   ("v_cvt_f32_f64",              dst(F32), src(F64), op(0x0f), InstrClass.ValuDoubleConvert),
+   ("v_cvt_f64_f32",              dst(F64), src(F32), op(0x10), InstrClass.ValuDoubleConvert),
+   ("v_cvt_f32_ubyte0",           dst(F32), src(U32), op(0x11)),
+   ("v_cvt_f32_ubyte1",           dst(F32), src(U32), op(0x12)),
+   ("v_cvt_f32_ubyte2",           dst(F32), src(U32), op(0x13)),
+   ("v_cvt_f32_ubyte3",           dst(F32), src(U32), op(0x14)),
+   ("v_cvt_u32_f64",              dst(U32), src(F64), op(0x15), InstrClass.ValuDoubleConvert),
+   ("v_cvt_f64_u32",              dst(F64), src(U32), op(0x16), InstrClass.ValuDoubleConvert),
+   ("v_trunc_f64",                dst(F64), src(F64), op(gfx7=0x17), InstrClass.ValuDouble),
+   ("v_ceil_f64",                 dst(F64), src(F64), op(gfx7=0x18), InstrClass.ValuDouble),
+   ("v_rndne_f64",                dst(F64), src(F64), op(gfx7=0x19), InstrClass.ValuDouble),
+   ("v_floor_f64",                dst(F64), src(F64), op(gfx7=0x1a), InstrClass.ValuDouble),
+   ("v_pipeflush",                dst(),    src(), op(gfx10=0x1b)),
+   ("v_fract_f32",                dst(F32), src(F32), op(0x20, gfx8=0x1b, gfx10=0x20)),
+   ("v_trunc_f32",                dst(F32), src(F32), op(0x21, gfx8=0x1c, gfx10=0x21)),
+   ("v_ceil_f32",                 dst(F32), src(F32), op(0x22, gfx8=0x1d, gfx10=0x22)),
+   ("v_rndne_f32",                dst(F32), src(F32), op(0x23, gfx8=0x1e, gfx10=0x23)),
+   ("v_floor_f32",                dst(F32), src(F32), op(0x24, gfx8=0x1f, gfx10=0x24)),
+   ("v_exp_f32",                  dst(F32), src(F32), op(0x25, gfx8=0x20, gfx10=0x25), InstrClass.ValuTranscendental32),
+   ("v_log_clamp_f32",            dst(F32), src(F32), op(0x26, gfx8=-1), InstrClass.ValuTranscendental32),
+   ("v_log_f32",                  dst(F32), src(F32), op(0x27, gfx8=0x21, gfx10=0x27), InstrClass.ValuTranscendental32),
+   ("v_rcp_clamp_f32",            dst(F32), src(F32), op(0x28, gfx8=-1), InstrClass.ValuTranscendental32),
+   ("v_rcp_legacy_f32",           dst(F32), src(F32), op(0x29, gfx8=-1), InstrClass.ValuTranscendental32),
+   ("v_rcp_f32",                  dst(F32), src(F32), op(0x2a, gfx8=0x22, gfx10=0x2a), InstrClass.ValuTranscendental32),
+   ("v_rcp_iflag_f32",            dst(F32), src(F32), op(0x2b, gfx8=0x23, gfx10=0x2b), InstrClass.ValuTranscendental32),
+   ("v_rsq_clamp_f32",            dst(F32), src(F32), op(0x2c, gfx8=-1), InstrClass.ValuTranscendental32),
+   ("v_rsq_legacy_f32",           dst(F32), src(F32), op(0x2d, gfx8=-1), InstrClass.ValuTranscendental32),
+   ("v_rsq_f32",                  dst(F32), src(F32), op(0x2e, gfx8=0x24, gfx10=0x2e), InstrClass.ValuTranscendental32),
+   ("v_rcp_f64",                  dst(F64), src(F64), op(0x2f, gfx8=0x25, gfx10=0x2f), InstrClass.ValuDoubleTranscendental),
+   ("v_rcp_clamp_f64",            dst(F64), src(F64), op(0x30, gfx8=-1), InstrClass.ValuDoubleTranscendental),
+   ("v_rsq_f64",                  dst(F64), src(F64), op(0x31, gfx8=0x26, gfx10=0x31), InstrClass.ValuDoubleTranscendental),
+   ("v_rsq_clamp_f64",            dst(F64), src(F64), op(0x32, gfx8=-1), InstrClass.ValuDoubleTranscendental),
+   ("v_sqrt_f32",                 dst(F32), src(F32), op(0x33, gfx8=0x27, gfx10=0x33), InstrClass.ValuTranscendental32),
+   ("v_sqrt_f64",                 dst(F64), src(F64), op(0x34, gfx8=0x28, gfx10=0x34), InstrClass.ValuDoubleTranscendental),
+   ("v_sin_f32",                  dst(F32), src(F32), op(0x35, gfx8=0x29, gfx10=0x35), InstrClass.ValuTranscendental32),
+   ("v_cos_f32",                  dst(F32), src(F32), op(0x36, gfx8=0x2a, gfx10=0x36), InstrClass.ValuTranscendental32),
+   ("v_not_b32",                  dst(U32), src(U32), op(0x37, gfx8=0x2b, gfx10=0x37)),
+   ("v_bfrev_b32",                dst(U32), src(U32), op(0x38, gfx8=0x2c, gfx10=0x38)),
+   ("v_ffbh_u32",                 dst(U32), src(U32), op(0x39, gfx8=0x2d, gfx10=0x39)), #v_clz_i32_u32 in GFX11
+   ("v_ffbl_b32",                 dst(U32), src(U32), op(0x3a, gfx8=0x2e, gfx10=0x3a)), #v_ctz_i32_b32 in GFX11
+   ("v_ffbh_i32",                 dst(U32), src(U32), op(0x3b, gfx8=0x2f, gfx10=0x3b)), #v_cls_i32 in GFX11
+   ("v_frexp_exp_i32_f64",        dst(U32), src(F64), op(0x3c, gfx8=0x30, gfx10=0x3c), InstrClass.ValuDouble),
+   ("v_frexp_mant_f64",           dst(noMods(F64)), src(F64), op(0x3d, gfx8=0x31, gfx10=0x3d), InstrClass.ValuDouble),
+   ("v_fract_f64",                dst(F64), src(F64), op(0x3e, gfx8=0x32, gfx10=0x3e), InstrClass.ValuDouble),
+   ("v_frexp_exp_i32_f32",        dst(U32), src(F32), op(0x3f, gfx8=0x33, gfx10=0x3f)),
+   ("v_frexp_mant_f32",           dst(noMods(F32)), src(F32), op(0x40, gfx8=0x34, gfx10=0x40)),
+   ("v_clrexcp",                  dst(),  src(), op(0x41, gfx8=0x35, gfx10=0x41, gfx11=-1)),
+   ("v_movreld_b32",              dst(U32), src(U32, M0), op(0x42, gfx8=0x36, gfx9=-1, gfx10=0x42)),
+   ("v_movrels_b32",              dst(U32), src(U32, M0), op(0x43, gfx8=0x37, gfx9=-1, gfx10=0x43)),
+   ("v_movrelsd_b32",             dst(U32), src(U32, M0), op(0x44, gfx8=0x38, gfx9=-1, gfx10=0x44)),
+   ("v_movrelsd_2_b32",           dst(U32), src(U32, M0), op(gfx10=0x48)),
+   ("v_screen_partition_4se_b32", dst(U32), src(U32), op(gfx9=0x37, gfx10=-1)),
+   ("v_cvt_f16_u16",              dst(F16), src(U16), op(gfx8=0x39, gfx10=0x50)),
+   ("v_cvt_f16_i16",              dst(F16), src(U16), op(gfx8=0x3a, gfx10=0x51)),
+   ("v_cvt_u16_f16",              dst(U16), src(F16), op(gfx8=0x3b, gfx10=0x52)),
+   ("v_cvt_i16_f16",              dst(U16), src(F16), op(gfx8=0x3c, gfx10=0x53)),
+   ("v_rcp_f16",                  dst(F16), dst(F16), op(gfx8=0x3d, gfx10=0x54), InstrClass.ValuTranscendental32),
+   ("v_sqrt_f16",                 dst(F16), dst(F16), op(gfx8=0x3e, gfx10=0x55), InstrClass.ValuTranscendental32),
+   ("v_rsq_f16",                  dst(F16), dst(F16), op(gfx8=0x3f, gfx10=0x56), InstrClass.ValuTranscendental32),
+   ("v_log_f16",                  dst(F16), dst(F16), op(gfx8=0x40, gfx10=0x57), InstrClass.ValuTranscendental32),
+   ("v_exp_f16",                  dst(F16), dst(F16), op(gfx8=0x41, gfx10=0x58), InstrClass.ValuTranscendental32),
+   ("v_frexp_mant_f16",           dst(noMods(F16)), dst(F16), op(gfx8=0x42, gfx10=0x59)),
+   ("v_frexp_exp_i16_f16",        dst(U16), dst(F16), op(gfx8=0x43, gfx10=0x5a)),
+   ("v_floor_f16",                dst(F16), dst(F16), op(gfx8=0x44, gfx10=0x5b)),
+   ("v_ceil_f16",                 dst(F16), dst(F16), op(gfx8=0x45, gfx10=0x5c)),
+   ("v_trunc_f16",                dst(F16), dst(F16), op(gfx8=0x46, gfx10=0x5d)),
+   ("v_rndne_f16",                dst(F16), dst(F16), op(gfx8=0x47, gfx10=0x5e)),
+   ("v_fract_f16",                dst(F16), dst(F16), op(gfx8=0x48, gfx10=0x5f)),
+   ("v_sin_f16",                  dst(F16), dst(F16), op(gfx8=0x49, gfx10=0x60), InstrClass.ValuTranscendental32),
+   ("v_cos_f16",                  dst(F16), dst(F16), op(gfx8=0x4a, gfx10=0x61), InstrClass.ValuTranscendental32),
+   ("v_exp_legacy_f32",           dst(F32), src(F32), op(gfx7=0x46, gfx8=0x4b, gfx10=-1), InstrClass.ValuTranscendental32),
+   ("v_log_legacy_f32",           dst(F32), src(F32), op(gfx7=0x45, gfx8=0x4c, gfx10=-1), InstrClass.ValuTranscendental32),
+   ("v_sat_pk_u8_i16",            dst(U16), src(U32), op(gfx9=0x4f, gfx10=0x62)),
+   ("v_cvt_norm_i16_f16",         dst(U16), src(F16), op(gfx9=0x4d, gfx10=0x63)),
+   ("v_cvt_norm_u16_f16",         dst(U16), src(F16), op(gfx9=0x4e, gfx10=0x64)),
+   ("v_swap_b32",                 dst(U32, U32), src(U32, U32), op(gfx9=0x51, gfx10=0x65)),
+   ("v_swaprel_b32",              dst(U32, U32), src(U32, U32, M0), op(gfx10=0x68)),
+   ("v_permlane64_b32",           dst(U32), src(U32), op(gfx11=0x67)), #cannot use VOP3
+   ("v_not_b16",                  dst(U16), src(U16), op(gfx11=0x69)),
+   ("v_cvt_i32_i16",              dst(U32), src(U16), op(gfx11=0x6a)),
+   ("v_cvt_u32_u16",              dst(U32), src(U16), op(gfx11=0x6b)),
+   ("v_mov_b16",                  dst(U16), src(mods(U16)), op(gfx11=0x1c)),
+   ("v_swap_b16",                 dst(U16, U16), src(U16, U16), op(gfx11=0x66)),
+   ("v_cvt_f32_fp8",              dst(noMods(F32)), src(F8), op(gfx12=0x6c)),
+   ("v_cvt_f32_bf8",              dst(noMods(F32)), src(BF8), op(gfx12=0x6d)),
+   ("v_cvt_pk_f32_fp8",           dst(PkF32), src(PkF8), op(gfx12=0x6e)),
+   ("v_cvt_pk_f32_bf8",           dst(PkF32), src(PkBF8), op(gfx12=0x6f)),
 }
-for (name, in_mod, out_mod, defs, ops, num, cls) in default_class(VOP1, InstrClass.Valu32):
-   insn(name, num, Format.VOP1, cls, in_mod, out_mod, definitions = defs, operands = ops)
+for (name, defs, ops, num, cls) in default_class(VOP1, InstrClass.Valu32):
+   insn(name, num, Format.VOP1, cls, definitions = defs, operands = ops)
 
 
 # VOPC instructions:
@@ -1116,7 +1123,7 @@ VOPC_CLASS = {
    ("v_cmpx_class_f64", dst(EXEC), src(F64, U32), op(0xb8, gfx8=0x13, gfx10=0xb8, gfx11=0xff), InstrClass.ValuDouble),
 }
 for (name, defs, ops, num, cls) in default_class(VOPC_CLASS, InstrClass.Valu32):
-    insn(name, num, Format.VOPC, cls, True, False, definitions = defs, operands = ops)
+    insn(name, num, Format.VOPC, cls, definitions = defs, operands = ops)
 
 VopcDataType = collections.namedtuple('VopcDataTypeInfo',
                                       ['type', 'kind', 'size', 'gfx6', 'gfx8', 'gfx10', 'gfx11'])
@@ -1175,76 +1182,76 @@ for comp, dtype, cmps, cmpx in itertools.product(range(16), dtypes, range(1), ra
       cls = InstrClass.Valu64
 
    enc = Opcode(gfx6, gfx6, gfx8, gfx8, gfx10, gfx11, gfx12)
-   insn(name, enc, Format.VOPC, cls, dtype.kind == 'f', False,
+   insn(name, enc, Format.VOPC, cls,
         definitions = dst(EXEC if cmpx else VCC),
         operands = src(dtype.type, dtype.type))
 
 
 # VOPP instructions: packed 16bit instructions - 2 or 3 inputs and 1 output
 VOPP = {
-   ("v_pk_mad_i16",     False, dst(PkU16), src(PkU16, PkU16, PkU16), op(gfx9=0x00)),
-   ("v_pk_mul_lo_u16",  False, dst(PkU16), src(PkU16, PkU16), op(gfx9=0x01)),
-   ("v_pk_add_i16",     False, dst(PkU16), src(PkU16, PkU16), op(gfx9=0x02)),
-   ("v_pk_sub_i16",     False, dst(PkU16), src(PkU16, PkU16), op(gfx9=0x03)),
-   ("v_pk_lshlrev_b16", False, dst(PkU16), src(PkU16, PkU16), op(gfx9=0x04)),
-   ("v_pk_lshrrev_b16", False, dst(PkU16), src(PkU16, PkU16), op(gfx9=0x05)),
-   ("v_pk_ashrrev_i16", False, dst(PkU16), src(PkU16, PkU16), op(gfx9=0x06)),
-   ("v_pk_max_i16",     False, dst(PkU16), src(PkU16, PkU16), op(gfx9=0x07)),
-   ("v_pk_min_i16",     False, dst(PkU16), src(PkU16, PkU16), op(gfx9=0x08)),
-   ("v_pk_mad_u16",     False, dst(PkU16), src(PkU16, PkU16, PkU16), op(gfx9=0x09)),
-   ("v_pk_add_u16",     False, dst(PkU16), src(PkU16, PkU16), op(gfx9=0x0a)),
-   ("v_pk_sub_u16",     False, dst(PkU16), src(PkU16, PkU16), op(gfx9=0x0b)),
-   ("v_pk_max_u16",     False, dst(PkU16), src(PkU16, PkU16), op(gfx9=0x0c)),
-   ("v_pk_min_u16",     False, dst(PkU16), src(PkU16, PkU16), op(gfx9=0x0d)),
-   ("v_pk_fma_f16",     True, dst(PkF16), src(PkF16, PkF16, PkF16), op(gfx9=0x0e)),
-   ("v_pk_add_f16",     True, dst(PkF16), src(PkF16, PkF16), op(gfx9=0x0f)),
-   ("v_pk_mul_f16",     True, dst(PkF16), src(PkF16, PkF16), op(gfx9=0x10)),
-   ("v_pk_min_f16",     True, dst(PkF16), src(PkF16, PkF16), op(gfx9=0x11, gfx12=0x1b)), # called v_pk_min_num_f16 in GFX12
-   ("v_pk_max_f16",     True, dst(PkF16), src(PkF16, PkF16), op(gfx9=0x12, gfx12=0x1c)), # called v_pk_min_num_f16 in GFX12
-   ("v_pk_minimum_f16", True, dst(PkF16), src(PkF16, PkF16), op(gfx12=0x1d)),
-   ("v_pk_maximum_f16", True, dst(PkF16), src(PkF16, PkF16), op(gfx12=0x1e)),
-   ("v_fma_mix_f32",    True, dst(F32), src(F32, F32, F32), op(gfx9=0x20)), # v_mad_mix_f32 in VEGA ISA, v_fma_mix_f32 in RDNA ISA
-   ("v_fma_mixlo_f16",  True, dst(F16), src(F32, F32, F32), op(gfx9=0x21)), # v_mad_mixlo_f16 in VEGA ISA, v_fma_mixlo_f16 in RDNA ISA
-   ("v_fma_mixhi_f16",  True, dst(F16), src(F32, F32, F32), op(gfx9=0x22)), # v_mad_mixhi_f16 in VEGA ISA, v_fma_mixhi_f16 in RDNA ISA
-   ("v_dot2_i32_i16",      False, dst(U32), src(PkU16, PkU16, U32), op(gfx9=0x26, gfx10=0x14, gfx11=-1)),
-   ("v_dot2_u32_u16",      False, dst(U32), src(PkU16, PkU16, U32), op(gfx9=0x27, gfx10=0x15, gfx11=-1)),
-   ("v_dot4_i32_iu8",      False, dst(U32), src(PkU16, PkU16, U32), op(gfx11=0x16)),
-   ("v_dot4_i32_i8",       False, dst(U32), src(PkU16, PkU16, U32), op(gfx9=0x28, gfx10=0x16, gfx11=-1)),
-   ("v_dot4_u32_u8",       False, dst(U32), src(PkU16, PkU16, U32), op(gfx9=0x29, gfx10=0x17)),
-   ("v_dot8_i32_iu4",      False, dst(U32), src(PkU16, PkU16, U32), op(gfx11=0x18)),
-   ("v_dot8_i32_i4",       False, dst(U32), src(PkU16, PkU16, U32), op(gfx9=0x2a, gfx10=0x18, gfx11=-1)),
-   ("v_dot8_u32_u4",       False, dst(U32), src(PkU16, PkU16, U32), op(gfx9=0x2b, gfx10=0x19)),
-   ("v_dot2_f32_f16",      False, dst(F32), src(PkF16, PkF16, F32), op(gfx9=0x23, gfx10=0x13)),
-   ("v_dot2_f32_bf16",     False, dst(F32), src(PkBF16, PkBF16, F32), op(gfx11=0x1a)),
-   ("v_dot4_f32_fp8_bf8",  False, dst(F32), src(Pk4F8, Pk4BF8, F32), op(gfx12=0x24)),
-   ("v_dot4_f32_bf8_fp8",  False, dst(F32), src(Pk4BF8, Pk4F8, F32), op(gfx12=0x25)),
-   ("v_dot4_f32_fp8_fp8",  False, dst(F32), src(Pk4F8, Pk4F8, F32), op(gfx12=0x26)),
-   ("v_dot4_f32_bf8_bf8",  False, dst(F32), src(Pk4BF8, Pk4BF8, F32), op(gfx12=0x27)),
-   ("v_wmma_f32_16x16x16_f16",       False, dst(), src(), op(gfx11=0x40), InstrClass.WMMA),
-   ("v_wmma_f32_16x16x16_bf16",      False, dst(), src(), op(gfx11=0x41), InstrClass.WMMA),
-   ("v_wmma_f16_16x16x16_f16",       False, dst(), src(), op(gfx11=0x42), InstrClass.WMMA),
-   ("v_wmma_bf16_16x16x16_bf16",     False, dst(), src(), op(gfx11=0x43), InstrClass.WMMA),
-   ("v_wmma_i32_16x16x16_iu8",       False, dst(), src(), op(gfx11=0x44), InstrClass.WMMA),
-   ("v_wmma_i32_16x16x16_iu4",       False, dst(), src(), op(gfx11=0x45), InstrClass.WMMA),
-   ("v_wmma_f32_16x16x16_fp8_fp8",   False, dst(), src(), op(gfx12=0x46), InstrClass.WMMA),
-   ("v_wmma_f32_16x16x16_fp8_bf8",   False, dst(), src(), op(gfx12=0x47), InstrClass.WMMA),
-   ("v_wmma_f32_16x16x16_bf8_fp8",   False, dst(), src(), op(gfx12=0x48), InstrClass.WMMA),
-   ("v_wmma_f32_16x16x16_bf8_bf8",   False, dst(), src(), op(gfx12=0x49), InstrClass.WMMA),
-   ("v_wmma_i32_16x16x32_iu4",       False, dst(), src(), op(gfx12=0x4a), InstrClass.WMMA),
-   ("v_swmmac_f32_16x16x32_f16",     False, dst(), src(), op(gfx12=0x50), InstrClass.WMMA),
-   ("v_swmmac_f32_16x16x32_bf16",    False, dst(), src(), op(gfx12=0x51), InstrClass.WMMA),
-   ("v_swmmac_f16_16x16x32_f16",     False, dst(), src(), op(gfx12=0x52), InstrClass.WMMA),
-   ("v_swmmac_bf16_16x16x32_bf16",   False, dst(), src(), op(gfx12=0x53), InstrClass.WMMA),
-   ("v_swmmac_i32_16x16x32_iu8",     False, dst(), src(), op(gfx12=0x54), InstrClass.WMMA),
-   ("v_swmmac_i32_16x16x32_iu4",     False, dst(), src(), op(gfx12=0x55), InstrClass.WMMA),
-   ("v_swmmac_i32_16x16x64_iu4",     False, dst(), src(), op(gfx12=0x56), InstrClass.WMMA),
-   ("v_swmmac_f32_16x16x32_fp8_fp8", False, dst(), src(), op(gfx12=0x57), InstrClass.WMMA),
-   ("v_swmmac_f32_16x16x32_fp8_bf8", False, dst(), src(), op(gfx12=0x58), InstrClass.WMMA),
-   ("v_swmmac_f32_16x16x32_bf8_fp8", False, dst(), src(), op(gfx12=0x59), InstrClass.WMMA),
-   ("v_swmmac_f32_16x16x32_bf8_bf8", False, dst(), src(), op(gfx12=0x5a), InstrClass.WMMA),
+   ("v_pk_mad_i16",     dst(PkU16), src(PkU16, PkU16, PkU16), op(gfx9=0x00)),
+   ("v_pk_mul_lo_u16",  dst(PkU16), src(PkU16, PkU16), op(gfx9=0x01)),
+   ("v_pk_add_i16",     dst(PkU16), src(PkU16, PkU16), op(gfx9=0x02)),
+   ("v_pk_sub_i16",     dst(PkU16), src(PkU16, PkU16), op(gfx9=0x03)),
+   ("v_pk_lshlrev_b16", dst(PkU16), src(PkU16, PkU16), op(gfx9=0x04)),
+   ("v_pk_lshrrev_b16", dst(PkU16), src(PkU16, PkU16), op(gfx9=0x05)),
+   ("v_pk_ashrrev_i16", dst(PkU16), src(PkU16, PkU16), op(gfx9=0x06)),
+   ("v_pk_max_i16",     dst(PkU16), src(PkU16, PkU16), op(gfx9=0x07)),
+   ("v_pk_min_i16",     dst(PkU16), src(PkU16, PkU16), op(gfx9=0x08)),
+   ("v_pk_mad_u16",     dst(PkU16), src(PkU16, PkU16, PkU16), op(gfx9=0x09)),
+   ("v_pk_add_u16",     dst(PkU16), src(PkU16, PkU16), op(gfx9=0x0a)),
+   ("v_pk_sub_u16",     dst(PkU16), src(PkU16, PkU16), op(gfx9=0x0b)),
+   ("v_pk_max_u16",     dst(PkU16), src(PkU16, PkU16), op(gfx9=0x0c)),
+   ("v_pk_min_u16",     dst(PkU16), src(PkU16, PkU16), op(gfx9=0x0d)),
+   ("v_pk_fma_f16",     dst(PkF16), src(PkF16, PkF16, PkF16), op(gfx9=0x0e)),
+   ("v_pk_add_f16",     dst(PkF16), src(PkF16, PkF16), op(gfx9=0x0f)),
+   ("v_pk_mul_f16",     dst(PkF16), src(PkF16, PkF16), op(gfx9=0x10)),
+   ("v_pk_min_f16",     dst(PkF16), src(PkF16, PkF16), op(gfx9=0x11, gfx12=0x1b)), # called v_pk_min_num_f16 in GFX12
+   ("v_pk_max_f16",     dst(PkF16), src(PkF16, PkF16), op(gfx9=0x12, gfx12=0x1c)), # called v_pk_min_num_f16 in GFX12
+   ("v_pk_minimum_f16", dst(PkF16), src(PkF16, PkF16), op(gfx12=0x1d)),
+   ("v_pk_maximum_f16", dst(PkF16), src(PkF16, PkF16), op(gfx12=0x1e)),
+   ("v_fma_mix_f32",    dst(F32), src(F32, F32, F32), op(gfx9=0x20)), # v_mad_mix_f32 in VEGA ISA, v_fma_mix_f32 in RDNA ISA
+   ("v_fma_mixlo_f16",  dst(F16), src(F32, F32, F32), op(gfx9=0x21)), # v_mad_mixlo_f16 in VEGA ISA, v_fma_mixlo_f16 in RDNA ISA
+   ("v_fma_mixhi_f16",  dst(F16), src(F32, F32, F32), op(gfx9=0x22)), # v_mad_mixhi_f16 in VEGA ISA, v_fma_mixhi_f16 in RDNA ISA
+   ("v_dot2_i32_i16",      dst(U32), src(PkU16, PkU16, U32), op(gfx9=0x26, gfx10=0x14, gfx11=-1)),
+   ("v_dot2_u32_u16",      dst(U32), src(PkU16, PkU16, U32), op(gfx9=0x27, gfx10=0x15, gfx11=-1)),
+   ("v_dot4_i32_iu8",      dst(U32), src(PkU16, PkU16, U32), op(gfx11=0x16)),
+   ("v_dot4_i32_i8",       dst(U32), src(PkU16, PkU16, U32), op(gfx9=0x28, gfx10=0x16, gfx11=-1)),
+   ("v_dot4_u32_u8",       dst(U32), src(PkU16, PkU16, U32), op(gfx9=0x29, gfx10=0x17)),
+   ("v_dot8_i32_iu4",      dst(U32), src(PkU16, PkU16, U32), op(gfx11=0x18)),
+   ("v_dot8_i32_i4",       dst(U32), src(PkU16, PkU16, U32), op(gfx9=0x2a, gfx10=0x18, gfx11=-1)),
+   ("v_dot8_u32_u4",       dst(U32), src(PkU16, PkU16, U32), op(gfx9=0x2b, gfx10=0x19)),
+   ("v_dot2_f32_f16",      dst(noMods(F32)), noMods(src(PkF16, PkF16, F32)), op(gfx9=0x23, gfx10=0x13)),
+   ("v_dot2_f32_bf16",     dst(noMods(F32)), noMods(src(PkBF16, PkBF16, F32)), op(gfx11=0x1a)),
+   ("v_dot4_f32_fp8_bf8",  dst(noMods(F32)), noMods(src(Pk4F8, Pk4BF8, F32)), op(gfx12=0x24)),
+   ("v_dot4_f32_bf8_fp8",  dst(noMods(F32)), noMods(src(Pk4BF8, Pk4F8, F32)), op(gfx12=0x25)),
+   ("v_dot4_f32_fp8_fp8",  dst(noMods(F32)), noMods(src(Pk4F8, Pk4F8, F32)), op(gfx12=0x26)),
+   ("v_dot4_f32_bf8_bf8",  dst(noMods(F32)), noMods(src(Pk4BF8, Pk4BF8, F32)), op(gfx12=0x27)),
+   ("v_wmma_f32_16x16x16_f16",       dst(), src(), op(gfx11=0x40), InstrClass.WMMA),
+   ("v_wmma_f32_16x16x16_bf16",      dst(), src(), op(gfx11=0x41), InstrClass.WMMA),
+   ("v_wmma_f16_16x16x16_f16",       dst(), src(), op(gfx11=0x42), InstrClass.WMMA),
+   ("v_wmma_bf16_16x16x16_bf16",     dst(), src(), op(gfx11=0x43), InstrClass.WMMA),
+   ("v_wmma_i32_16x16x16_iu8",       dst(), src(), op(gfx11=0x44), InstrClass.WMMA),
+   ("v_wmma_i32_16x16x16_iu4",       dst(), src(), op(gfx11=0x45), InstrClass.WMMA),
+   ("v_wmma_f32_16x16x16_fp8_fp8",   dst(), src(), op(gfx12=0x46), InstrClass.WMMA),
+   ("v_wmma_f32_16x16x16_fp8_bf8",   dst(), src(), op(gfx12=0x47), InstrClass.WMMA),
+   ("v_wmma_f32_16x16x16_bf8_fp8",   dst(), src(), op(gfx12=0x48), InstrClass.WMMA),
+   ("v_wmma_f32_16x16x16_bf8_bf8",   dst(), src(), op(gfx12=0x49), InstrClass.WMMA),
+   ("v_wmma_i32_16x16x32_iu4",       dst(), src(), op(gfx12=0x4a), InstrClass.WMMA),
+   ("v_swmmac_f32_16x16x32_f16",     dst(), src(), op(gfx12=0x50), InstrClass.WMMA),
+   ("v_swmmac_f32_16x16x32_bf16",    dst(), src(), op(gfx12=0x51), InstrClass.WMMA),
+   ("v_swmmac_f16_16x16x32_f16",     dst(), src(), op(gfx12=0x52), InstrClass.WMMA),
+   ("v_swmmac_bf16_16x16x32_bf16",   dst(), src(), op(gfx12=0x53), InstrClass.WMMA),
+   ("v_swmmac_i32_16x16x32_iu8",     dst(), src(), op(gfx12=0x54), InstrClass.WMMA),
+   ("v_swmmac_i32_16x16x32_iu4",     dst(), src(), op(gfx12=0x55), InstrClass.WMMA),
+   ("v_swmmac_i32_16x16x64_iu4",     dst(), src(), op(gfx12=0x56), InstrClass.WMMA),
+   ("v_swmmac_f32_16x16x32_fp8_fp8", dst(), src(), op(gfx12=0x57), InstrClass.WMMA),
+   ("v_swmmac_f32_16x16x32_fp8_bf8", dst(), src(), op(gfx12=0x58), InstrClass.WMMA),
+   ("v_swmmac_f32_16x16x32_bf8_fp8", dst(), src(), op(gfx12=0x59), InstrClass.WMMA),
+   ("v_swmmac_f32_16x16x32_bf8_bf8", dst(), src(), op(gfx12=0x5a), InstrClass.WMMA),
 }
-for (name, modifiers, defs, ops, num, cls) in default_class(VOPP, InstrClass.Valu32):
-   insn(name, num, Format.VOP3P, cls, modifiers, modifiers, definitions = defs, operands = ops)
+for (name, defs, ops, num, cls) in default_class(VOPP, InstrClass.Valu32):
+   insn(name, num, Format.VOP3P, cls, definitions = defs, operands = ops)
 
 
 # VINTRP (GFX6 - GFX10.3) instructions:
@@ -1254,7 +1261,7 @@ VINTRP = {
    ("v_interp_mov_f32", dst(U32), src(U32, M0), op(0x02, gfx11=-1)),
 }
 for (name, defs, ops, num) in VINTRP:
-   insn(name, num, Format.VINTRP, InstrClass.Valu32, definitions = defs, operands = ops)
+   insn(name, num, Format.VINTRP, InstrClass.Valu32, definitions = noMods(defs), operands = noMods(ops))
 
 
 # VINTERP (GFX11+) instructions:
@@ -1267,191 +1274,191 @@ VINTERP = {
    ("v_interp_p2_rtz_f16_f32_inreg",  dst(F16), src(F16, F32, F32), op(gfx11=0x05)),
 }
 for (name, defs, ops, num) in VINTERP:
-   insn(name, num, Format.VINTERP_INREG, InstrClass.Valu32, False, True, definitions = defs, operands = ops)
+   insn(name, num, Format.VINTERP_INREG, InstrClass.Valu32, definitions = defs, operands = noMods(ops))
 
 
 # VOP3 instructions: 3 inputs, 1 output
 # VOP3b instructions: have a unique scalar output, e.g. VOP2 with vcc out
 VOP3 = {
-   ("v_mad_legacy_f32",        True, True, dst(F32), src(F32, F32, F32), op(0x140, gfx8=0x1c0, gfx10=0x140, gfx11=-1)), # GFX6-GFX10
-   ("v_mad_f32",               True, True, dst(F32), src(F32, F32, F32), op(0x141, gfx8=0x1c1, gfx10=0x141, gfx11=-1)),
-   ("v_mad_i32_i24",           False, False, dst(U32), src(U32, U32, U32), op(0x142, gfx8=0x1c2, gfx10=0x142, gfx11=0x20a)),
-   ("v_mad_u32_u24",           False, False, dst(U32), src(U32, U32, U32), op(0x143, gfx8=0x1c3, gfx10=0x143, gfx11=0x20b)),
-   ("v_cubeid_f32",            True, True, dst(F32), src(F32, F32, F32), op(0x144, gfx8=0x1c4, gfx10=0x144, gfx11=0x20c)),
-   ("v_cubesc_f32",            True, True, dst(F32), src(F32, F32, F32), op(0x145, gfx8=0x1c5, gfx10=0x145, gfx11=0x20d)),
-   ("v_cubetc_f32",            True, True, dst(F32), src(F32, F32, F32), op(0x146, gfx8=0x1c6, gfx10=0x146, gfx11=0x20e)),
-   ("v_cubema_f32",            True, True, dst(F32), src(F32, F32, F32), op(0x147, gfx8=0x1c7, gfx10=0x147, gfx11=0x20f)),
-   ("v_bfe_u32",               False, False, dst(U32), src(U32, U32, U32), op(0x148, gfx8=0x1c8, gfx10=0x148, gfx11=0x210)),
-   ("v_bfe_i32",               False, False, dst(U32), src(U32, U32, U32), op(0x149, gfx8=0x1c9, gfx10=0x149, gfx11=0x211)),
-   ("v_bfi_b32",               False, False, dst(U32), src(U32, U32, U32), op(0x14a, gfx8=0x1ca, gfx10=0x14a, gfx11=0x212)),
-   ("v_fma_f32",               True, True, dst(F32), src(F32, F32, F32), op(0x14b, gfx8=0x1cb, gfx10=0x14b, gfx11=0x213), InstrClass.ValuFma),
-   ("v_fma_f64",               True, True, dst(F64), src(F64, F64, F64), op(0x14c, gfx8=0x1cc, gfx10=0x14c, gfx11=0x214), InstrClass.ValuDouble),
-   ("v_lerp_u8",               False, False, dst(U32), src(U32, U32, U32), op(0x14d, gfx8=0x1cd, gfx10=0x14d, gfx11=0x215)),
-   ("v_alignbit_b32",          False, False, dst(U32), src(U32, U32, U16), op(0x14e, gfx8=0x1ce, gfx10=0x14e, gfx11=0x216)),
-   ("v_alignbyte_b32",         False, False, dst(U32), src(U32, U32, U16), op(0x14f, gfx8=0x1cf, gfx10=0x14f, gfx11=0x217)),
-   ("v_mullit_f32",            True, True, dst(F32), src(F32, F32, F32), op(0x150, gfx8=-1, gfx10=0x150, gfx11=0x218)),
-   ("v_min3_f32",              True, True, dst(F32), src(F32, F32, F32), op(0x151, gfx8=0x1d0, gfx10=0x151, gfx11=0x219, gfx12=0x229)), # called v_min3_num_f32 in GFX12
-   ("v_min3_i32",              False, False, dst(U32), src(U32, U32, U32), op(0x152, gfx8=0x1d1, gfx10=0x152, gfx11=0x21a)),
-   ("v_min3_u32",              False, False, dst(U32), src(U32, U32, U32), op(0x153, gfx8=0x1d2, gfx10=0x153, gfx11=0x21b)),
-   ("v_max3_f32",              True, True, dst(F32), src(F32, F32, F32), op(0x154, gfx8=0x1d3, gfx10=0x154, gfx11=0x21c, gfx12=0x22a)), # called v_max3_num_f32 in GFX12
-   ("v_max3_i32",              False, False, dst(U32), src(U32, U32, U32), op(0x155, gfx8=0x1d4, gfx10=0x155, gfx11=0x21d)),
-   ("v_max3_u32",              False, False, dst(U32), src(U32, U32, U32), op(0x156, gfx8=0x1d5, gfx10=0x156, gfx11=0x21e)),
-   ("v_med3_f32",              True, True, dst(F32), src(F32, F32, F32), op(0x157, gfx8=0x1d6, gfx10=0x157, gfx11=0x21f, gfx12=0x231)), # called v_med3_num_f32 in GFX12
-   ("v_med3_i32",              False, False, dst(U32), src(U32, U32, U32), op(0x158, gfx8=0x1d7, gfx10=0x158, gfx11=0x220)),
-   ("v_med3_u32",              False, False, dst(U32), src(U32, U32, U32), op(0x159, gfx8=0x1d8, gfx10=0x159, gfx11=0x221)),
-   ("v_sad_u8",                False, False, dst(U32), src(U32, U32, U32), op(0x15a, gfx8=0x1d9, gfx10=0x15a, gfx11=0x222)),
-   ("v_sad_hi_u8",             False, False, dst(U32), src(U32, U32, U32), op(0x15b, gfx8=0x1da, gfx10=0x15b, gfx11=0x223)),
-   ("v_sad_u16",               False, False, dst(U32), src(U32, U32, U32), op(0x15c, gfx8=0x1db, gfx10=0x15c, gfx11=0x224)),
-   ("v_sad_u32",               False, False, dst(U32), src(U32, U32, U32), op(0x15d, gfx8=0x1dc, gfx10=0x15d, gfx11=0x225)),
-   ("v_cvt_pk_u8_f32",         True, False, dst(U32), src(F32, U32, U32), op(0x15e, gfx8=0x1dd, gfx10=0x15e, gfx11=0x226)),
-   ("v_div_fixup_f32",         True, True, dst(F32), src(F32, F32, F32), op(0x15f, gfx8=0x1de, gfx10=0x15f, gfx11=0x227)),
-   ("v_div_fixup_f64",         True, True, dst(F64), src(F64, F64, F64), op(0x160, gfx8=0x1df, gfx10=0x160, gfx11=0x228)),
-   ("v_lshl_b64",              False, False, dst(U64), src(U64, U32), op(0x161, gfx8=-1), InstrClass.Valu64),
-   ("v_lshr_b64",              False, False, dst(U64), src(U64, U32), op(0x162, gfx8=-1), InstrClass.Valu64),
-   ("v_ashr_i64",              False, False, dst(I64), src(I64, U32), op(0x163, gfx8=-1), InstrClass.Valu64),
-   ("v_add_f64_e64",           True, True, dst(F64), src(F64, F64), op(0x164, gfx8=0x280, gfx10=0x164, gfx11=0x327, gfx12=0x102), InstrClass.ValuDoubleAdd), # GFX12 is VOP2 opcode + 0x100
-   ("v_mul_f64_e64",           True, True, dst(F64), src(F64, F64), op(0x165, gfx8=0x281, gfx10=0x165, gfx11=0x328, gfx12=0x106), InstrClass.ValuDouble), # GFX12 is VOP2 opcode + 0x100
-   ("v_min_f64_e64",           True, True, dst(F64), src(F64, F64), op(0x166, gfx8=0x282, gfx10=0x166, gfx11=0x329, gfx12=0x10d), InstrClass.ValuDouble), # GFX12 is VOP2 opcode + 0x100
-   ("v_max_f64_e64",           True, True, dst(F64), src(F64, F64), op(0x167, gfx8=0x283, gfx10=0x167, gfx11=0x32a, gfx12=0x10e), InstrClass.ValuDouble), # GFX12 is VOP2 opcode + 0x100
-   ("v_ldexp_f64",             False, True, dst(F64), src(F64, U32), op(0x168, gfx8=0x284, gfx10=0x168, gfx11=0x32b), InstrClass.ValuDouble), # src1 can take input modifiers
-   ("v_mul_lo_u32",            False, False, dst(U32), src(U32, U32), op(0x169, gfx8=0x285, gfx10=0x169, gfx11=0x32c), InstrClass.ValuQuarterRate32),
-   ("v_mul_hi_u32",            False, False, dst(U32), src(U32, U32), op(0x16a, gfx8=0x286, gfx10=0x16a, gfx11=0x32d), InstrClass.ValuQuarterRate32),
-   ("v_mul_lo_i32",            False, False, dst(U32), src(U32, U32), op(0x16b, gfx8=0x285, gfx10=0x16b, gfx11=0x32c), InstrClass.ValuQuarterRate32), # identical to v_mul_lo_u32
-   ("v_mul_hi_i32",            False, False, dst(U32), src(U32, U32), op(0x16c, gfx8=0x287, gfx10=0x16c, gfx11=0x32e), InstrClass.ValuQuarterRate32),
-   ("v_div_scale_f32",         True, True, dst(F32, VCC), src(F32, F32, F32), op(0x16d, gfx8=0x1e0, gfx10=0x16d, gfx11=0x2fc)),
-   ("v_div_scale_f64",         True, True, dst(F64, VCC), src(F64, F64, F64), op(0x16e, gfx8=0x1e1, gfx10=0x16e, gfx11=0x2fd), InstrClass.ValuDouble),
-   ("v_div_fmas_f32",          True, True, dst(F32), src(F32, F32, F32, VCC), op(0x16f, gfx8=0x1e2, gfx10=0x16f, gfx11=0x237)),
-   ("v_div_fmas_f64",          True, True, dst(F64), src(F64, F64, F64, VCC), op(0x170, gfx8=0x1e3, gfx10=0x170, gfx11=0x238), InstrClass.ValuDouble),
-   ("v_msad_u8",               False, False, dst(U32), src(U32, U32, U32), op(0x171, gfx8=0x1e4, gfx10=0x171, gfx11=0x239)),
-   ("v_qsad_pk_u16_u8",        False, False, dst(U64), src(U64, U32, U64), op(0x172, gfx8=0x1e5, gfx10=0x172, gfx11=0x23a)),
-   ("v_mqsad_pk_u16_u8",       False, False, dst(U64), src(U64, U32, U64), op(0x173, gfx8=0x1e6, gfx10=0x173, gfx11=0x23b)),
-   ("v_trig_preop_f64",        False, False, dst(F64), src(F64, U32), op(0x174, gfx8=0x292, gfx10=0x174, gfx11=0x32f), InstrClass.ValuDouble),
-   ("v_mqsad_u32_u8",          False, False, dst(U128), src(U64, U32, U128), op(gfx7=0x175, gfx8=0x1e7, gfx10=0x175, gfx11=0x23d), InstrClass.ValuQuarterRate32),
-   ("v_mad_u64_u32",           False, False, dst(U64, VCC), src(U32, U32, U64), op(gfx7=0x176, gfx8=0x1e8, gfx10=0x176, gfx11=0x2fe), InstrClass.Valu64), # called v_mad_co_u64_u32 in GFX12
-   ("v_mad_i64_i32",           False, False, dst(I64, VCC), src(U32, U32, I64), op(gfx7=0x177, gfx8=0x1e9, gfx10=0x177, gfx11=0x2ff), InstrClass.Valu64), # called v_mad_co_i64_i32 in GFX12
-   ("v_mad_legacy_f16",        True, True, dst(F16), src(F16, F16, F16), op(gfx8=0x1ea, gfx10=-1)),
-   ("v_mad_legacy_u16",        False, False, dst(U16), src(U16, U16, U16), op(gfx8=0x1eb, gfx10=-1)),
-   ("v_mad_legacy_i16",        False, False, dst(U16), src(U16, U16, U16), op(gfx8=0x1ec, gfx10=-1)),
-   ("v_perm_b32",              False, False, dst(U32), src(U32, U32, U32), op(gfx8=0x1ed, gfx10=0x344, gfx11=0x244)),
-   ("v_fma_legacy_f16",        True, True, dst(F16), src(F16, F16, F16), op(gfx8=0x1ee, gfx10=-1), InstrClass.ValuFma),
-   ("v_div_fixup_legacy_f16",  True, True, dst(F16), src(F16, F16, F16), op(gfx8=0x1ef, gfx10=-1)),
-   ("v_cvt_pkaccum_u8_f32",    True, False, dst(U32), src(F32, U32, U32), op(0x12c, gfx8=0x1f0, gfx10=-1)),
-   ("v_mad_u32_u16",           False, False, dst(U32), src(U16, U16, U32), op(gfx9=0x1f1, gfx10=0x373, gfx11=0x259)),
-   ("v_mad_i32_i16",           False, False, dst(U32), src(U16, U16, U32), op(gfx9=0x1f2, gfx10=0x375, gfx11=0x25a)),
-   ("v_xad_u32",               False, False, dst(U32), src(U32, U32, U32), op(gfx9=0x1f3, gfx10=0x345, gfx11=0x245)),
-   ("v_min3_f16",              True, True, dst(F16), src(F16, F16, F16), op(gfx9=0x1f4, gfx10=0x351, gfx11=0x249, gfx12=0x22b)), # called v_min3_num_f16 in GFX12
-   ("v_min3_i16",              False, False, dst(U16), src(U16, U16, U16), op(gfx9=0x1f5, gfx10=0x352, gfx11=0x24a)),
-   ("v_min3_u16",              False, False, dst(U16), src(U16, U16, U16), op(gfx9=0x1f6, gfx10=0x353, gfx11=0x24b)),
-   ("v_max3_f16",              True, True, dst(F16), src(F16, F16, F16), op(gfx9=0x1f7, gfx10=0x354, gfx11=0x24c, gfx12=0x22c)), # called v_max3_num_f16 in GFX12
-   ("v_max3_i16",              False, False, dst(U16), src(U16, U16, U16), op(gfx9=0x1f8, gfx10=0x355, gfx11=0x24d)),
-   ("v_max3_u16",              False, False, dst(U16), src(U16, U16, U16), op(gfx9=0x1f9, gfx10=0x356, gfx11=0x24e)),
-   ("v_med3_f16",              True, True, dst(F16), src(F16, F16, F16), op(gfx9=0x1fa, gfx10=0x357, gfx11=0x24f, gfx12=0x232)), # called v_med3_num_f16 in GFX12
-   ("v_med3_i16",              False, False, dst(U16), src(U16, U16, U16), op(gfx9=0x1fb, gfx10=0x358, gfx11=0x250)),
-   ("v_med3_u16",              False, False, dst(U16), src(U16, U16, U16), op(gfx9=0x1fc, gfx10=0x359, gfx11=0x251)),
-   ("v_lshl_add_u32",          False, False, dst(U32), src(U32, U32, U32), op(gfx9=0x1fd, gfx10=0x346, gfx11=0x246)),
-   ("v_add_lshl_u32",          False, False, dst(U32), src(U32, U32, U32), op(gfx9=0x1fe, gfx10=0x347, gfx11=0x247)),
-   ("v_add3_u32",              False, False, dst(U32), src(U32, U32, U32), op(gfx9=0x1ff, gfx10=0x36d, gfx11=0x255)),
-   ("v_lshl_or_b32",           False, False, dst(U32), src(U32, U32, U32), op(gfx9=0x200, gfx10=0x36f, gfx11=0x256)),
-   ("v_and_or_b32",            False, False, dst(U32), src(U32, U32, U32), op(gfx9=0x201, gfx10=0x371, gfx11=0x257)),
-   ("v_or3_b32",               False, False, dst(U32), src(U32, U32, U32), op(gfx9=0x202, gfx10=0x372, gfx11=0x258)),
-   ("v_mad_f16",               True, True, dst(F16), src(F16, F16, F16), op(gfx9=0x203, gfx10=-1)),
-   ("v_mad_u16",               False, False, dst(U16), src(U16, U16, U16), op(gfx9=0x204, gfx10=0x340, gfx11=0x241)),
-   ("v_mad_i16",               False, False, dst(U16), src(U16, U16, U16), op(gfx9=0x205, gfx10=0x35e, gfx11=0x253)),
-   ("v_fma_f16",               True, True, dst(F16), src(F16, F16, F16), op(gfx9=0x206, gfx10=0x34b, gfx11=0x248)),
-   ("v_div_fixup_f16",         True, True, dst(F16), src(F16, F16, F16), op(gfx9=0x207, gfx10=0x35f, gfx11=0x254)),
-   ("v_interp_p1ll_f16",       True, True, dst(F32), src(F32, M0), op(gfx8=0x274, gfx10=0x342, gfx11=-1)),
-   ("v_interp_p1lv_f16",       True, True, dst(F32), src(F32, M0, F16), op(gfx8=0x275, gfx10=0x343, gfx11=-1)),
-   ("v_interp_p2_legacy_f16",  True, True, dst(F16), src(F32, M0, F32), op(gfx8=0x276, gfx10=-1)),
-   ("v_interp_p2_f16",         True, True, dst(F16), src(F32, M0, F32), op(gfx9=0x277, gfx10=0x35a, gfx11=-1)),
-   ("v_interp_p2_hi_f16",      True, True, dst(F16), src(F32, M0, F32), op(gfx9=0x277, gfx10=0x35a, gfx11=-1)),
-   ("v_ldexp_f32",             False, True, dst(F32), src(F32, U32), op(0x12b, gfx8=0x288, gfx10=0x362, gfx11=0x31c)),
-   ("v_readlane_b32_e64",      False, False, dst(U32), src(U32, U32), op(gfx8=0x289, gfx10=0x360)),
-   ("v_writelane_b32_e64",     False, False, dst(U32), src(U32, U32, U32), op(gfx8=0x28a, gfx10=0x361)),
-   ("v_bcnt_u32_b32",          False, False, dst(U32), src(U32, U32), op(0x122, gfx8=0x28b, gfx10=0x364, gfx11=0x31e)),
-   ("v_mbcnt_lo_u32_b32",      False, False, dst(U32), src(U32, U32), op(0x123, gfx8=0x28c, gfx10=0x365, gfx11=0x31f)),
-   ("v_mbcnt_hi_u32_b32_e64",  False, False, dst(U32), src(U32, U32), op(gfx8=0x28d, gfx10=0x366, gfx11=0x320)),
-   ("v_lshlrev_b64_e64",       False, False, dst(U64), src(U32, U64), op(gfx8=0x28f, gfx10=0x2ff, gfx11=0x33c, gfx12=0x11f), InstrClass.Valu64), # GFX12 is VOP2 opcode + 0x100
-   ("v_lshrrev_b64",           False, False, dst(U64), src(U32, U64), op(gfx8=0x290, gfx10=0x300, gfx11=0x33d), InstrClass.Valu64),
-   ("v_ashrrev_i64",           False, False, dst(I64), src(U32, I64), op(gfx8=0x291, gfx10=0x301, gfx11=0x33e), InstrClass.Valu64),
-   ("v_bfm_b32",               False, False, dst(U32), src(U32, U32), op(0x11e, gfx8=0x293, gfx10=0x363, gfx11=0x31d)),
-   ("v_cvt_pknorm_i16_f32",    True, False, dst(PkU16), src(F32, F32), op(0x12d, gfx8=0x294, gfx10=0x368, gfx11=0x321)),
-   ("v_cvt_pknorm_u16_f32",    True, False, dst(PkU16), src(F32, F32), op(0x12e, gfx8=0x295, gfx10=0x369, gfx11=0x322)),
-   ("v_cvt_pkrtz_f16_f32_e64", True, False, dst(PkF16), src(F32, F32), op(gfx8=0x296, gfx10=-1)),
-   ("v_cvt_pk_u16_u32",        False, False, dst(PkU16), src(U32, U32), op(0x130, gfx8=0x297, gfx10=0x36a, gfx11=0x323)),
-   ("v_cvt_pk_i16_i32",        False, False, dst(PkU16), src(U32, U32), op(0x131, gfx8=0x298, gfx10=0x36b, gfx11=0x324)),
-   ("v_cvt_pknorm_i16_f16",    True, False, dst(PkU16), src(F16, F16), op(gfx9=0x299, gfx10=0x312)), #v_cvt_pk_norm_i16_f32 in GFX11
-   ("v_cvt_pknorm_u16_f16",    True, False, dst(PkU16), src(F16, F16), op(gfx9=0x29a, gfx10=0x313)), #v_cvt_pk_norm_u16_f32 in GFX11
-   ("v_add_i32",               False, False, dst(U32), src(U32, U32), op(gfx9=0x29c, gfx10=0x37f, gfx11=0x326)),
-   ("v_sub_i32",               False, False, dst(U32), src(U32, U32), op(gfx9=0x29d, gfx10=0x376, gfx11=0x325)),
-   ("v_add_i16",               False, False, dst(U16), src(U32, U32), op(gfx9=0x29e, gfx10=0x30d)),
-   ("v_sub_i16",               False, False, dst(U16), src(U32, U32), op(gfx9=0x29f, gfx10=0x30e)),
-   ("v_pack_b32_f16",          True, False, dst(PkF16), src(F16, F16), op(gfx9=0x2a0, gfx10=0x311)),
-   ("v_xor3_b32",              False, False, dst(U32), src(U32, U32, U32), op(gfx10=0x178, gfx11=0x240)),
-   ("v_permlane16_b32",        False, False, dst(U32), src(U32, U32, U32), op(gfx10=0x377, gfx11=0x25b)),
-   ("v_permlanex16_b32",       False, False, dst(U32), src(U32, U32, U32), op(gfx10=0x378, gfx11=0x25c)),
-   ("v_add_co_u32_e64",        False, False, dst(U32, VCC), src(U32, U32), op(gfx10=0x30f, gfx11=0x300)),
-   ("v_sub_co_u32_e64",        False, False, dst(U32, VCC), src(U32, U32), op(gfx10=0x310, gfx11=0x301)),
-   ("v_subrev_co_u32_e64",     False, False, dst(U32, VCC), src(U32, U32), op(gfx10=0x319, gfx11=0x302)),
-   ("v_add_u16_e64",           False, False, dst(U16), src(U16, U16), op(gfx10=0x303)),
-   ("v_sub_u16_e64",           False, False, dst(U16), src(U16, U16), op(gfx10=0x304)),
-   ("v_mul_lo_u16_e64",        False, False, dst(U16), src(U16, U16), op(gfx10=0x305)),
-   ("v_max_u16_e64",           False, False, dst(U16), src(U16, U16), op(gfx10=0x309)),
-   ("v_max_i16_e64",           False, False, dst(U16), src(U16, U16), op(gfx10=0x30a)),
-   ("v_min_u16_e64",           False, False, dst(U16), src(U16, U16), op(gfx10=0x30b)),
-   ("v_min_i16_e64",           False, False, dst(U16), src(U16, U16), op(gfx10=0x30c)),
-   ("v_lshrrev_b16_e64",       False, False, dst(U16), src(U16, U16), op(gfx10=0x307, gfx11=0x339)),
-   ("v_ashrrev_i16_e64",       False, False, dst(U16), src(U16, U16), op(gfx10=0x308, gfx11=0x33a)),
-   ("v_lshlrev_b16_e64",       False, False, dst(U16), src(U16, U16), op(gfx10=0x314, gfx11=0x338)),
-   ("v_fma_legacy_f32",        True, True, dst(F32), src(F32, F32, F32), op(gfx10=0x140, gfx11=0x209), InstrClass.ValuFma), #GFX10.3+, v_fma_dx9_zero_f32 in GFX11
-   ("v_maxmin_f32",            True, True, dst(F32), src(F32, F32, F32), op(gfx11=0x25e, gfx12=0x269)), # called v_maxmin_num_f32 in GFX12
-   ("v_minmax_f32",            True, True, dst(F32), src(F32, F32, F32), op(gfx11=0x25f, gfx12=0x268)), # called v_minmax_num_f32 in GFX12
-   ("v_maxmin_f16",            True, True, dst(F16), src(F16, F16, F16), op(gfx11=0x260, gfx12=0x26b)), # called v_maxmin_num_f16 in GFX12
-   ("v_minmax_f16",            True, True, dst(F16), src(F16, F16, F16), op(gfx11=0x261, gfx12=0x26a)), # called v_minmax_num_f16 in GFX12
-   ("v_maxmin_u32",            False, False, dst(U32), src(U32, U32, U32), op(gfx11=0x262)),
-   ("v_minmax_u32",            False, False, dst(U32), src(U32, U32, U32), op(gfx11=0x263)),
-   ("v_maxmin_i32",            False, False, dst(U32), src(U32, U32, U32), op(gfx11=0x264)),
-   ("v_minmax_i32",            False, False, dst(U32), src(U32, U32, U32), op(gfx11=0x265)),
-   ("v_dot2_f16_f16",          False, False, dst(F16), src(PkF16, PkF16, F16), op(gfx11=0x266)),
-   ("v_dot2_bf16_bf16",        False, False, dst(BF16), src(PkBF16, PkBF16, BF16), op(gfx11=0x267)),
-   ("v_cvt_pk_i16_f32",        True, False, dst(PkU16), src(F32, F32), op(gfx11=0x306)),
-   ("v_cvt_pk_u16_f32",        True, False, dst(PkU16), src(F32, F32), op(gfx11=0x307)),
-   ("v_and_b16",               False, False, dst(U16), src(U16, U16), op(gfx11=0x362)),
-   ("v_or_b16",                False, False, dst(U16), src(U16, U16), op(gfx11=0x363)),
-   ("v_xor_b16",               False, False, dst(U16), src(U16, U16), op(gfx11=0x364)),
-   ("v_cndmask_b16",           True, False, dst(U16), src(U16, U16, VCC), op(gfx11=0x25d)),
-   ("v_minimum3_f32",          True, True, dst(F32), src(F32, F32, F32), op(gfx12=0x22d)),
-   ("v_maximum3_f32",          True, True, dst(F32), src(F32, F32, F32), op(gfx12=0x22e)),
-   ("v_minimum3_f16",          True, True, dst(F16), src(F16, F16, F16), op(gfx12=0x22f)),
-   ("v_maximum3_f16",          True, True, dst(F16), src(F16, F16, F16), op(gfx12=0x230)),
-   ("v_minimummaximum_f32",    True, True, dst(F32), src(F32, F32, F32), op(gfx12=0x26c)),
-   ("v_maximumminimum_f32",    True, True, dst(F32), src(F32, F32, F32), op(gfx12=0x26d)),
-   ("v_minimummaximum_f16",    True, True, dst(F16), src(F16, F16, F16), op(gfx12=0x26e)),
-   ("v_maximumminimum_f16",    True, True, dst(F16), src(F16, F16, F16), op(gfx12=0x26f)),
-   ("v_s_exp_f32",             True, True, dst(F32), src(F32), op(gfx12=0x280), InstrClass.ValuPseudoScalarTrans),
-   ("v_s_exp_f16",             True, True, dst(F16), src(F16), op(gfx12=0x281), InstrClass.ValuPseudoScalarTrans),
-   ("v_s_log_f32",             True, True, dst(F32), src(F32), op(gfx12=0x282), InstrClass.ValuPseudoScalarTrans),
-   ("v_s_log_f16",             True, True, dst(F16), src(F16), op(gfx12=0x283), InstrClass.ValuPseudoScalarTrans),
-   ("v_s_rcp_f32",             True, True, dst(F32), src(F32), op(gfx12=0x284), InstrClass.ValuPseudoScalarTrans),
-   ("v_s_rcp_f16",             True, True, dst(F16), src(F16), op(gfx12=0x285), InstrClass.ValuPseudoScalarTrans),
-   ("v_s_rsq_f32",             True, True, dst(F32), src(F32), op(gfx12=0x286), InstrClass.ValuPseudoScalarTrans),
-   ("v_s_rsq_f16",             True, True, dst(F16), src(F16), op(gfx12=0x287), InstrClass.ValuPseudoScalarTrans),
-   ("v_s_sqrt_f32",            True, True, dst(F32), src(F32), op(gfx12=0x288), InstrClass.ValuPseudoScalarTrans),
-   ("v_s_sqrt_f16",            True, True, dst(F16), src(F16), op(gfx12=0x289), InstrClass.ValuPseudoScalarTrans),
-   ("v_minimum_f64",           True, True, dst(F64), src(F64, F64), op(gfx12=0x341)),
-   ("v_maximum_f64",           True, True, dst(F64), src(F64, F64), op(gfx12=0x342)),
-   ("v_minimum_f32",           True, True, dst(F32), src(F32, F32), op(gfx12=0x365)),
-   ("v_maximum_f32",           True, True, dst(F32), src(F32, F32), op(gfx12=0x366)),
-   ("v_minimum_f16",           True, True, dst(F16), src(F16, F16), op(gfx12=0x367)),
-   ("v_maximum_f16",           True, True, dst(F16), src(F16, F16), op(gfx12=0x368)),
-   ("v_permlane16_var_b32",    False, False, dst(U32), src(U32, U32), op(gfx12=0x30f)),
-   ("v_permlanex16_var_b32",   False, False, dst(U32), src(U32, U32), op(gfx12=0x310)),
-   ("v_cvt_pk_fp8_f32",        True, False, dst(PkF8), src(F32, F32), op(gfx12=0x369)),
-   ("v_cvt_pk_bf8_f32",        True, False, dst(PkBF8), src(F32, F32), op(gfx12=0x36a)),
-   ("v_cvt_sr_fp8_f32",        True, False, dst(F8), src(F32, U32), op(gfx12=0x36b)),
-   ("v_cvt_sr_bf8_f32",        True, False, dst(BF8), src(F32, U32), op(gfx12=0x36c)),
+   ("v_mad_legacy_f32",        dst(F32), src(F32, F32, F32), op(0x140, gfx8=0x1c0, gfx10=0x140, gfx11=-1)), # GFX6-GFX10
+   ("v_mad_f32",               dst(F32), src(F32, F32, F32), op(0x141, gfx8=0x1c1, gfx10=0x141, gfx11=-1)),
+   ("v_mad_i32_i24",           dst(U32), src(U32, U32, U32), op(0x142, gfx8=0x1c2, gfx10=0x142, gfx11=0x20a)),
+   ("v_mad_u32_u24",           dst(U32), src(U32, U32, U32), op(0x143, gfx8=0x1c3, gfx10=0x143, gfx11=0x20b)),
+   ("v_cubeid_f32",            dst(F32), src(F32, F32, F32), op(0x144, gfx8=0x1c4, gfx10=0x144, gfx11=0x20c)),
+   ("v_cubesc_f32",            dst(F32), src(F32, F32, F32), op(0x145, gfx8=0x1c5, gfx10=0x145, gfx11=0x20d)),
+   ("v_cubetc_f32",            dst(F32), src(F32, F32, F32), op(0x146, gfx8=0x1c6, gfx10=0x146, gfx11=0x20e)),
+   ("v_cubema_f32",            dst(F32), src(F32, F32, F32), op(0x147, gfx8=0x1c7, gfx10=0x147, gfx11=0x20f)),
+   ("v_bfe_u32",               dst(U32), src(U32, U32, U32), op(0x148, gfx8=0x1c8, gfx10=0x148, gfx11=0x210)),
+   ("v_bfe_i32",               dst(U32), src(U32, U32, U32), op(0x149, gfx8=0x1c9, gfx10=0x149, gfx11=0x211)),
+   ("v_bfi_b32",               dst(U32), src(U32, U32, U32), op(0x14a, gfx8=0x1ca, gfx10=0x14a, gfx11=0x212)),
+   ("v_fma_f32",               dst(F32), src(F32, F32, F32), op(0x14b, gfx8=0x1cb, gfx10=0x14b, gfx11=0x213), InstrClass.ValuFma),
+   ("v_fma_f64",               dst(F64), src(F64, F64, F64), op(0x14c, gfx8=0x1cc, gfx10=0x14c, gfx11=0x214), InstrClass.ValuDouble),
+   ("v_lerp_u8",               dst(U32), src(U32, U32, U32), op(0x14d, gfx8=0x1cd, gfx10=0x14d, gfx11=0x215)),
+   ("v_alignbit_b32",          dst(U32), src(U32, U32, U16), op(0x14e, gfx8=0x1ce, gfx10=0x14e, gfx11=0x216)),
+   ("v_alignbyte_b32",         dst(U32), src(U32, U32, U16), op(0x14f, gfx8=0x1cf, gfx10=0x14f, gfx11=0x217)),
+   ("v_mullit_f32",            dst(F32), src(F32, F32, F32), op(0x150, gfx8=-1, gfx10=0x150, gfx11=0x218)),
+   ("v_min3_f32",              dst(F32), src(F32, F32, F32), op(0x151, gfx8=0x1d0, gfx10=0x151, gfx11=0x219, gfx12=0x229)), # called v_min3_num_f32 in GFX12
+   ("v_min3_i32",              dst(U32), src(U32, U32, U32), op(0x152, gfx8=0x1d1, gfx10=0x152, gfx11=0x21a)),
+   ("v_min3_u32",              dst(U32), src(U32, U32, U32), op(0x153, gfx8=0x1d2, gfx10=0x153, gfx11=0x21b)),
+   ("v_max3_f32",              dst(F32), src(F32, F32, F32), op(0x154, gfx8=0x1d3, gfx10=0x154, gfx11=0x21c, gfx12=0x22a)), # called v_max3_num_f32 in GFX12
+   ("v_max3_i32",              dst(U32), src(U32, U32, U32), op(0x155, gfx8=0x1d4, gfx10=0x155, gfx11=0x21d)),
+   ("v_max3_u32",              dst(U32), src(U32, U32, U32), op(0x156, gfx8=0x1d5, gfx10=0x156, gfx11=0x21e)),
+   ("v_med3_f32",              dst(F32), src(F32, F32, F32), op(0x157, gfx8=0x1d6, gfx10=0x157, gfx11=0x21f, gfx12=0x231)), # called v_med3_num_f32 in GFX12
+   ("v_med3_i32",              dst(U32), src(U32, U32, U32), op(0x158, gfx8=0x1d7, gfx10=0x158, gfx11=0x220)),
+   ("v_med3_u32",              dst(U32), src(U32, U32, U32), op(0x159, gfx8=0x1d8, gfx10=0x159, gfx11=0x221)),
+   ("v_sad_u8",                dst(U32), src(U32, U32, U32), op(0x15a, gfx8=0x1d9, gfx10=0x15a, gfx11=0x222)),
+   ("v_sad_hi_u8",             dst(U32), src(U32, U32, U32), op(0x15b, gfx8=0x1da, gfx10=0x15b, gfx11=0x223)),
+   ("v_sad_u16",               dst(U32), src(U32, U32, U32), op(0x15c, gfx8=0x1db, gfx10=0x15c, gfx11=0x224)),
+   ("v_sad_u32",               dst(U32), src(U32, U32, U32), op(0x15d, gfx8=0x1dc, gfx10=0x15d, gfx11=0x225)),
+   ("v_cvt_pk_u8_f32",         dst(U32), src(F32, U32, U32), op(0x15e, gfx8=0x1dd, gfx10=0x15e, gfx11=0x226)),
+   ("v_div_fixup_f32",         dst(F32), src(F32, F32, F32), op(0x15f, gfx8=0x1de, gfx10=0x15f, gfx11=0x227)),
+   ("v_div_fixup_f64",         dst(F64), src(F64, F64, F64), op(0x160, gfx8=0x1df, gfx10=0x160, gfx11=0x228)),
+   ("v_lshl_b64",              dst(U64), src(U64, U32), op(0x161, gfx8=-1), InstrClass.Valu64),
+   ("v_lshr_b64",              dst(U64), src(U64, U32), op(0x162, gfx8=-1), InstrClass.Valu64),
+   ("v_ashr_i64",              dst(I64), src(I64, U32), op(0x163, gfx8=-1), InstrClass.Valu64),
+   ("v_add_f64_e64",           dst(F64), src(F64, F64), op(0x164, gfx8=0x280, gfx10=0x164, gfx11=0x327, gfx12=0x102), InstrClass.ValuDoubleAdd), # GFX12 is VOP2 opcode + 0x100
+   ("v_mul_f64_e64",           dst(F64), src(F64, F64), op(0x165, gfx8=0x281, gfx10=0x165, gfx11=0x328, gfx12=0x106), InstrClass.ValuDouble), # GFX12 is VOP2 opcode + 0x100
+   ("v_min_f64_e64",           dst(F64), src(F64, F64), op(0x166, gfx8=0x282, gfx10=0x166, gfx11=0x329, gfx12=0x10d), InstrClass.ValuDouble), # GFX12 is VOP2 opcode + 0x100
+   ("v_max_f64_e64",           dst(F64), src(F64, F64), op(0x167, gfx8=0x283, gfx10=0x167, gfx11=0x32a, gfx12=0x10e), InstrClass.ValuDouble), # GFX12 is VOP2 opcode + 0x100
+   ("v_ldexp_f64",             dst(F64), src(noMods(F64), U32), op(0x168, gfx8=0x284, gfx10=0x168, gfx11=0x32b), InstrClass.ValuDouble), # src1 can take input modifiers
+   ("v_mul_lo_u32",            dst(U32), src(U32, U32), op(0x169, gfx8=0x285, gfx10=0x169, gfx11=0x32c), InstrClass.ValuQuarterRate32),
+   ("v_mul_hi_u32",            dst(U32), src(U32, U32), op(0x16a, gfx8=0x286, gfx10=0x16a, gfx11=0x32d), InstrClass.ValuQuarterRate32),
+   ("v_mul_lo_i32",            dst(U32), src(U32, U32), op(0x16b, gfx8=0x285, gfx10=0x16b, gfx11=0x32c), InstrClass.ValuQuarterRate32), # identical to v_mul_lo_u32
+   ("v_mul_hi_i32",            dst(U32), src(U32, U32), op(0x16c, gfx8=0x287, gfx10=0x16c, gfx11=0x32e), InstrClass.ValuQuarterRate32),
+   ("v_div_scale_f32",         dst(F32, VCC), src(F32, F32, F32), op(0x16d, gfx8=0x1e0, gfx10=0x16d, gfx11=0x2fc)),
+   ("v_div_scale_f64",         dst(F64, VCC), src(F64, F64, F64), op(0x16e, gfx8=0x1e1, gfx10=0x16e, gfx11=0x2fd), InstrClass.ValuDouble),
+   ("v_div_fmas_f32",          dst(F32), src(F32, F32, F32, VCC), op(0x16f, gfx8=0x1e2, gfx10=0x16f, gfx11=0x237)),
+   ("v_div_fmas_f64",          dst(F64), src(F64, F64, F64, VCC), op(0x170, gfx8=0x1e3, gfx10=0x170, gfx11=0x238), InstrClass.ValuDouble),
+   ("v_msad_u8",               dst(U32), src(U32, U32, U32), op(0x171, gfx8=0x1e4, gfx10=0x171, gfx11=0x239)),
+   ("v_qsad_pk_u16_u8",        dst(U64), src(U64, U32, U64), op(0x172, gfx8=0x1e5, gfx10=0x172, gfx11=0x23a)),
+   ("v_mqsad_pk_u16_u8",       dst(U64), src(U64, U32, U64), op(0x173, gfx8=0x1e6, gfx10=0x173, gfx11=0x23b)),
+   ("v_trig_preop_f64",        dst(noMods(F64)), src(noMods(F64), U32), op(0x174, gfx8=0x292, gfx10=0x174, gfx11=0x32f), InstrClass.ValuDouble),
+   ("v_mqsad_u32_u8",          dst(U128), src(U64, U32, U128), op(gfx7=0x175, gfx8=0x1e7, gfx10=0x175, gfx11=0x23d), InstrClass.ValuQuarterRate32),
+   ("v_mad_u64_u32",           dst(U64, VCC), src(U32, U32, U64), op(gfx7=0x176, gfx8=0x1e8, gfx10=0x176, gfx11=0x2fe), InstrClass.Valu64), # called v_mad_co_u64_u32 in GFX12
+   ("v_mad_i64_i32",           dst(I64, VCC), src(U32, U32, I64), op(gfx7=0x177, gfx8=0x1e9, gfx10=0x177, gfx11=0x2ff), InstrClass.Valu64), # called v_mad_co_i64_i32 in GFX12
+   ("v_mad_legacy_f16",        dst(F16), src(F16, F16, F16), op(gfx8=0x1ea, gfx10=-1)),
+   ("v_mad_legacy_u16",        dst(U16), src(U16, U16, U16), op(gfx8=0x1eb, gfx10=-1)),
+   ("v_mad_legacy_i16",        dst(U16), src(U16, U16, U16), op(gfx8=0x1ec, gfx10=-1)),
+   ("v_perm_b32",              dst(U32), src(U32, U32, U32), op(gfx8=0x1ed, gfx10=0x344, gfx11=0x244)),
+   ("v_fma_legacy_f16",        dst(F16), src(F16, F16, F16), op(gfx8=0x1ee, gfx10=-1), InstrClass.ValuFma),
+   ("v_div_fixup_legacy_f16",  dst(F16), src(F16, F16, F16), op(gfx8=0x1ef, gfx10=-1)),
+   ("v_cvt_pkaccum_u8_f32",    dst(U32), src(F32, U32, U32), op(0x12c, gfx8=0x1f0, gfx10=-1)),
+   ("v_mad_u32_u16",           dst(U32), src(U16, U16, U32), op(gfx9=0x1f1, gfx10=0x373, gfx11=0x259)),
+   ("v_mad_i32_i16",           dst(U32), src(U16, U16, U32), op(gfx9=0x1f2, gfx10=0x375, gfx11=0x25a)),
+   ("v_xad_u32",               dst(U32), src(U32, U32, U32), op(gfx9=0x1f3, gfx10=0x345, gfx11=0x245)),
+   ("v_min3_f16",              dst(F16), src(F16, F16, F16), op(gfx9=0x1f4, gfx10=0x351, gfx11=0x249, gfx12=0x22b)), # called v_min3_num_f16 in GFX12
+   ("v_min3_i16",              dst(U16), src(U16, U16, U16), op(gfx9=0x1f5, gfx10=0x352, gfx11=0x24a)),
+   ("v_min3_u16",              dst(U16), src(U16, U16, U16), op(gfx9=0x1f6, gfx10=0x353, gfx11=0x24b)),
+   ("v_max3_f16",              dst(F16), src(F16, F16, F16), op(gfx9=0x1f7, gfx10=0x354, gfx11=0x24c, gfx12=0x22c)), # called v_max3_num_f16 in GFX12
+   ("v_max3_i16",              dst(U16), src(U16, U16, U16), op(gfx9=0x1f8, gfx10=0x355, gfx11=0x24d)),
+   ("v_max3_u16",              dst(U16), src(U16, U16, U16), op(gfx9=0x1f9, gfx10=0x356, gfx11=0x24e)),
+   ("v_med3_f16",              dst(F16), src(F16, F16, F16), op(gfx9=0x1fa, gfx10=0x357, gfx11=0x24f, gfx12=0x232)), # called v_med3_num_f16 in GFX12
+   ("v_med3_i16",              dst(U16), src(U16, U16, U16), op(gfx9=0x1fb, gfx10=0x358, gfx11=0x250)),
+   ("v_med3_u16",              dst(U16), src(U16, U16, U16), op(gfx9=0x1fc, gfx10=0x359, gfx11=0x251)),
+   ("v_lshl_add_u32",          dst(U32), src(U32, U32, U32), op(gfx9=0x1fd, gfx10=0x346, gfx11=0x246)),
+   ("v_add_lshl_u32",          dst(U32), src(U32, U32, U32), op(gfx9=0x1fe, gfx10=0x347, gfx11=0x247)),
+   ("v_add3_u32",              dst(U32), src(U32, U32, U32), op(gfx9=0x1ff, gfx10=0x36d, gfx11=0x255)),
+   ("v_lshl_or_b32",           dst(U32), src(U32, U32, U32), op(gfx9=0x200, gfx10=0x36f, gfx11=0x256)),
+   ("v_and_or_b32",            dst(U32), src(U32, U32, U32), op(gfx9=0x201, gfx10=0x371, gfx11=0x257)),
+   ("v_or3_b32",               dst(U32), src(U32, U32, U32), op(gfx9=0x202, gfx10=0x372, gfx11=0x258)),
+   ("v_mad_f16",               dst(F16), src(F16, F16, F16), op(gfx9=0x203, gfx10=-1)),
+   ("v_mad_u16",               dst(U16), src(U16, U16, U16), op(gfx9=0x204, gfx10=0x340, gfx11=0x241)),
+   ("v_mad_i16",               dst(U16), src(U16, U16, U16), op(gfx9=0x205, gfx10=0x35e, gfx11=0x253)),
+   ("v_fma_f16",               dst(F16), src(F16, F16, F16), op(gfx9=0x206, gfx10=0x34b, gfx11=0x248)),
+   ("v_div_fixup_f16",         dst(F16), src(F16, F16, F16), op(gfx9=0x207, gfx10=0x35f, gfx11=0x254)),
+   ("v_interp_p1ll_f16",       dst(F32), src(F32, M0), op(gfx8=0x274, gfx10=0x342, gfx11=-1)),
+   ("v_interp_p1lv_f16",       dst(F32), src(F32, M0, F16), op(gfx8=0x275, gfx10=0x343, gfx11=-1)),
+   ("v_interp_p2_legacy_f16",  dst(F16), src(F32, M0, F32), op(gfx8=0x276, gfx10=-1)),
+   ("v_interp_p2_f16",         dst(F16), src(F32, M0, F32), op(gfx9=0x277, gfx10=0x35a, gfx11=-1)),
+   ("v_interp_p2_hi_f16",      dst(F16), src(F32, M0, F32), op(gfx9=0x277, gfx10=0x35a, gfx11=-1)),
+   ("v_ldexp_f32",             dst(F32), src(noMods(F32), U32), op(0x12b, gfx8=0x288, gfx10=0x362, gfx11=0x31c)),
+   ("v_readlane_b32_e64",      dst(U32), src(U32, U32), op(gfx8=0x289, gfx10=0x360)),
+   ("v_writelane_b32_e64",     dst(U32), src(U32, U32, U32), op(gfx8=0x28a, gfx10=0x361)),
+   ("v_bcnt_u32_b32",          dst(U32), src(U32, U32), op(0x122, gfx8=0x28b, gfx10=0x364, gfx11=0x31e)),
+   ("v_mbcnt_lo_u32_b32",      dst(U32), src(U32, U32), op(0x123, gfx8=0x28c, gfx10=0x365, gfx11=0x31f)),
+   ("v_mbcnt_hi_u32_b32_e64",  dst(U32), src(U32, U32), op(gfx8=0x28d, gfx10=0x366, gfx11=0x320)),
+   ("v_lshlrev_b64_e64",       dst(U64), src(U32, U64), op(gfx8=0x28f, gfx10=0x2ff, gfx11=0x33c, gfx12=0x11f), InstrClass.Valu64), # GFX12 is VOP2 opcode + 0x100
+   ("v_lshrrev_b64",           dst(U64), src(U32, U64), op(gfx8=0x290, gfx10=0x300, gfx11=0x33d), InstrClass.Valu64),
+   ("v_ashrrev_i64",           dst(I64), src(U32, I64), op(gfx8=0x291, gfx10=0x301, gfx11=0x33e), InstrClass.Valu64),
+   ("v_bfm_b32",               dst(U32), src(U32, U32), op(0x11e, gfx8=0x293, gfx10=0x363, gfx11=0x31d)),
+   ("v_cvt_pknorm_i16_f32",    dst(PkU16), src(F32, F32), op(0x12d, gfx8=0x294, gfx10=0x368, gfx11=0x321)),
+   ("v_cvt_pknorm_u16_f32",    dst(PkU16), src(F32, F32), op(0x12e, gfx8=0x295, gfx10=0x369, gfx11=0x322)),
+   ("v_cvt_pkrtz_f16_f32_e64", dst(noMods(PkF16)), src(F32, F32), op(gfx8=0x296, gfx10=-1)),
+   ("v_cvt_pk_u16_u32",        dst(PkU16), src(U32, U32), op(0x130, gfx8=0x297, gfx10=0x36a, gfx11=0x323)),
+   ("v_cvt_pk_i16_i32",        dst(PkU16), src(U32, U32), op(0x131, gfx8=0x298, gfx10=0x36b, gfx11=0x324)),
+   ("v_cvt_pknorm_i16_f16",    dst(PkU16), src(F16, F16), op(gfx9=0x299, gfx10=0x312)), #v_cvt_pk_norm_i16_f32 in GFX11
+   ("v_cvt_pknorm_u16_f16",    dst(PkU16), src(F16, F16), op(gfx9=0x29a, gfx10=0x313)), #v_cvt_pk_norm_u16_f32 in GFX11
+   ("v_add_i32",               dst(U32), src(U32, U32), op(gfx9=0x29c, gfx10=0x37f, gfx11=0x326)),
+   ("v_sub_i32",               dst(U32), src(U32, U32), op(gfx9=0x29d, gfx10=0x376, gfx11=0x325)),
+   ("v_add_i16",               dst(U16), src(U32, U32), op(gfx9=0x29e, gfx10=0x30d)),
+   ("v_sub_i16",               dst(U16), src(U32, U32), op(gfx9=0x29f, gfx10=0x30e)),
+   ("v_pack_b32_f16",          dst(noMods(PkF16)), src(F16, F16), op(gfx9=0x2a0, gfx10=0x311)),
+   ("v_xor3_b32",              dst(U32), src(U32, U32, U32), op(gfx10=0x178, gfx11=0x240)),
+   ("v_permlane16_b32",        dst(U32), src(U32, U32, U32), op(gfx10=0x377, gfx11=0x25b)),
+   ("v_permlanex16_b32",       dst(U32), src(U32, U32, U32), op(gfx10=0x378, gfx11=0x25c)),
+   ("v_add_co_u32_e64",        dst(U32, VCC), src(U32, U32), op(gfx10=0x30f, gfx11=0x300)),
+   ("v_sub_co_u32_e64",        dst(U32, VCC), src(U32, U32), op(gfx10=0x310, gfx11=0x301)),
+   ("v_subrev_co_u32_e64",     dst(U32, VCC), src(U32, U32), op(gfx10=0x319, gfx11=0x302)),
+   ("v_add_u16_e64",           dst(U16), src(U16, U16), op(gfx10=0x303)),
+   ("v_sub_u16_e64",           dst(U16), src(U16, U16), op(gfx10=0x304)),
+   ("v_mul_lo_u16_e64",        dst(U16), src(U16, U16), op(gfx10=0x305)),
+   ("v_max_u16_e64",           dst(U16), src(U16, U16), op(gfx10=0x309)),
+   ("v_max_i16_e64",           dst(U16), src(U16, U16), op(gfx10=0x30a)),
+   ("v_min_u16_e64",           dst(U16), src(U16, U16), op(gfx10=0x30b)),
+   ("v_min_i16_e64",           dst(U16), src(U16, U16), op(gfx10=0x30c)),
+   ("v_lshrrev_b16_e64",       dst(U16), src(U16, U16), op(gfx10=0x307, gfx11=0x339)),
+   ("v_ashrrev_i16_e64",       dst(U16), src(U16, U16), op(gfx10=0x308, gfx11=0x33a)),
+   ("v_lshlrev_b16_e64",       dst(U16), src(U16, U16), op(gfx10=0x314, gfx11=0x338)),
+   ("v_fma_legacy_f32",        dst(F32), src(F32, F32, F32), op(gfx10=0x140, gfx11=0x209), InstrClass.ValuFma), #GFX10.3+, v_fma_dx9_zero_f32 in GFX11
+   ("v_maxmin_f32",            dst(F32), src(F32, F32, F32), op(gfx11=0x25e, gfx12=0x269)), # called v_maxmin_num_f32 in GFX12
+   ("v_minmax_f32",            dst(F32), src(F32, F32, F32), op(gfx11=0x25f, gfx12=0x268)), # called v_minmax_num_f32 in GFX12
+   ("v_maxmin_f16",            dst(F16), src(F16, F16, F16), op(gfx11=0x260, gfx12=0x26b)), # called v_maxmin_num_f16 in GFX12
+   ("v_minmax_f16",            dst(F16), src(F16, F16, F16), op(gfx11=0x261, gfx12=0x26a)), # called v_minmax_num_f16 in GFX12
+   ("v_maxmin_u32",            dst(U32), src(U32, U32, U32), op(gfx11=0x262)),
+   ("v_minmax_u32",            dst(U32), src(U32, U32, U32), op(gfx11=0x263)),
+   ("v_maxmin_i32",            dst(U32), src(U32, U32, U32), op(gfx11=0x264)),
+   ("v_minmax_i32",            dst(U32), src(U32, U32, U32), op(gfx11=0x265)),
+   ("v_dot2_f16_f16",          dst(noMods(F16)), noMods(src(PkF16, PkF16, F16)), op(gfx11=0x266)),
+   ("v_dot2_bf16_bf16",        dst(noMods(BF16)), noMods(src(PkBF16, PkBF16, BF16)), op(gfx11=0x267)),
+   ("v_cvt_pk_i16_f32",        dst(PkU16), src(F32, F32), op(gfx11=0x306)),
+   ("v_cvt_pk_u16_f32",        dst(PkU16), src(F32, F32), op(gfx11=0x307)),
+   ("v_and_b16",               dst(U16), src(U16, U16), op(gfx11=0x362)),
+   ("v_or_b16",                dst(U16), src(U16, U16), op(gfx11=0x363)),
+   ("v_xor_b16",               dst(U16), src(U16, U16), op(gfx11=0x364)),
+   ("v_cndmask_b16",           dst(U16), src(mods(U16), mods(U16), VCC), op(gfx11=0x25d)),
+   ("v_minimum3_f32",          dst(F32), src(F32, F32, F32), op(gfx12=0x22d)),
+   ("v_maximum3_f32",          dst(F32), src(F32, F32, F32), op(gfx12=0x22e)),
+   ("v_minimum3_f16",          dst(F16), src(F16, F16, F16), op(gfx12=0x22f)),
+   ("v_maximum3_f16",          dst(F16), src(F16, F16, F16), op(gfx12=0x230)),
+   ("v_minimummaximum_f32",    dst(F32), src(F32, F32, F32), op(gfx12=0x26c)),
+   ("v_maximumminimum_f32",    dst(F32), src(F32, F32, F32), op(gfx12=0x26d)),
+   ("v_minimummaximum_f16",    dst(F16), src(F16, F16, F16), op(gfx12=0x26e)),
+   ("v_maximumminimum_f16",    dst(F16), src(F16, F16, F16), op(gfx12=0x26f)),
+   ("v_s_exp_f32",             dst(F32), src(F32), op(gfx12=0x280), InstrClass.ValuPseudoScalarTrans),
+   ("v_s_exp_f16",             dst(F16), src(F16), op(gfx12=0x281), InstrClass.ValuPseudoScalarTrans),
+   ("v_s_log_f32",             dst(F32), src(F32), op(gfx12=0x282), InstrClass.ValuPseudoScalarTrans),
+   ("v_s_log_f16",             dst(F16), src(F16), op(gfx12=0x283), InstrClass.ValuPseudoScalarTrans),
+   ("v_s_rcp_f32",             dst(F32), src(F32), op(gfx12=0x284), InstrClass.ValuPseudoScalarTrans),
+   ("v_s_rcp_f16",             dst(F16), src(F16), op(gfx12=0x285), InstrClass.ValuPseudoScalarTrans),
+   ("v_s_rsq_f32",             dst(F32), src(F32), op(gfx12=0x286), InstrClass.ValuPseudoScalarTrans),
+   ("v_s_rsq_f16",             dst(F16), src(F16), op(gfx12=0x287), InstrClass.ValuPseudoScalarTrans),
+   ("v_s_sqrt_f32",            dst(F32), src(F32), op(gfx12=0x288), InstrClass.ValuPseudoScalarTrans),
+   ("v_s_sqrt_f16",            dst(F16), src(F16), op(gfx12=0x289), InstrClass.ValuPseudoScalarTrans),
+   ("v_minimum_f64",           dst(F64), src(F64, F64), op(gfx12=0x341)),
+   ("v_maximum_f64",           dst(F64), src(F64, F64), op(gfx12=0x342)),
+   ("v_minimum_f32",           dst(F32), src(F32, F32), op(gfx12=0x365)),
+   ("v_maximum_f32",           dst(F32), src(F32, F32), op(gfx12=0x366)),
+   ("v_minimum_f16",           dst(F16), src(F16, F16), op(gfx12=0x367)),
+   ("v_maximum_f16",           dst(F16), src(F16, F16), op(gfx12=0x368)),
+   ("v_permlane16_var_b32",    dst(U32), src(U32, U32), op(gfx12=0x30f)),
+   ("v_permlanex16_var_b32",   dst(U32), src(U32, U32), op(gfx12=0x310)),
+   ("v_cvt_pk_fp8_f32",        dst(PkF8), src(F32, F32), op(gfx12=0x369)),
+   ("v_cvt_pk_bf8_f32",        dst(PkBF8), src(F32, F32), op(gfx12=0x36a)),
+   ("v_cvt_sr_fp8_f32",        dst(F8), src(F32, U32), op(gfx12=0x36b)),
+   ("v_cvt_sr_bf8_f32",        dst(BF8), src(F32, U32), op(gfx12=0x36c)),
 }
-for (name, in_mod, out_mod, defs, ops, num, cls) in default_class(VOP3, InstrClass.Valu32):
-   insn(name, num, Format.VOP3, cls, in_mod, out_mod, definitions = defs, operands = ops)
+for (name, defs, ops, num, cls) in default_class(VOP3, InstrClass.Valu32):
+   insn(name, num, Format.VOP3, cls, definitions = defs, operands = ops)
 
 
 VOPD = {
-- 
GitLab


From 8260a1a0fa41985add265e29c6d65c773176bf0d Mon Sep 17 00:00:00 2001
From: Georg Lehmann <dadschoorse@gmail.com>
Date: Wed, 12 Jun 2024 13:37:33 +0200
Subject: [PATCH 4/6] aco: add can_use_output_modifiers helper

---
 src/amd/compiler/aco_ir.cpp        | 6 ++++++
 src/amd/compiler/aco_ir.h          | 1 +
 src/amd/compiler/aco_optimizer.cpp | 6 +++---
 3 files changed, 10 insertions(+), 3 deletions(-)

diff --git a/src/amd/compiler/aco_ir.cpp b/src/amd/compiler/aco_ir.cpp
index acfa73dc31108..f691c50aa095c 100644
--- a/src/amd/compiler/aco_ir.cpp
+++ b/src/amd/compiler/aco_ir.cpp
@@ -513,6 +513,12 @@ can_use_input_modifiers(amd_gfx_level gfx_level, aco_opcode op, int idx)
    return instr_info.can_use_input_modifiers[(int)op];
 }
 
+bool
+can_use_output_modifiers(aco_opcode op)
+{
+   return instr_info.can_use_output_modifiers[(int)op];
+}
+
 bool
 can_use_opsel(amd_gfx_level gfx_level, aco_opcode op, int idx)
 {
diff --git a/src/amd/compiler/aco_ir.h b/src/amd/compiler/aco_ir.h
index 35e89245f496e..17cab72541996 100644
--- a/src/amd/compiler/aco_ir.h
+++ b/src/amd/compiler/aco_ir.h
@@ -1734,6 +1734,7 @@ is_dead(const std::vector<uint16_t>& uses, const Instruction* instr)
 }
 
 bool can_use_input_modifiers(amd_gfx_level gfx_level, aco_opcode op, int idx);
+bool can_use_output_modifiers(aco_opcode op);
 bool can_use_opsel(amd_gfx_level gfx_level, aco_opcode op, int idx);
 bool instr_is_16bit(amd_gfx_level gfx_level, aco_opcode op);
 uint8_t get_gfx11_true16_mask(aco_opcode op);
diff --git a/src/amd/compiler/aco_optimizer.cpp b/src/amd/compiler/aco_optimizer.cpp
index a34e074cb9233..400b52ddd66ba 100644
--- a/src/amd/compiler/aco_optimizer.cpp
+++ b/src/amd/compiler/aco_optimizer.cpp
@@ -1586,7 +1586,7 @@ label_instruction(opt_ctx& ctx, aco_ptr<Instruction>& instr)
    }
 
    if (instr->isVALU() || instr->isVINTRP()) {
-      if (instr_info.can_use_output_modifiers[(int)instr->opcode] || instr->isVINTRP() ||
+      if (can_use_output_modifiers(instr->opcode) || instr->isVINTRP() ||
           instr->opcode == aco_opcode::v_cndmask_b32) {
          bool canonicalized = true;
          if (!does_fp_op_flush_denorms(ctx, instr->opcode)) {
@@ -3351,7 +3351,7 @@ bool
 apply_omod_clamp(opt_ctx& ctx, aco_ptr<Instruction>& instr)
 {
    if (instr->definitions.empty() || ctx.uses[instr->definitions[0].tempId()] != 1 ||
-       !instr_info.can_use_output_modifiers[(int)instr->opcode])
+       !can_use_output_modifiers(instr->opcode))
       return false;
 
    bool can_vop3 = can_use_VOP3(ctx, instr);
@@ -3677,7 +3677,7 @@ combine_vop3p(opt_ctx& ctx, aco_ptr<Instruction>& instr)
        !vop3p->opsel_lo[1] && !vop3p->opsel_hi[1]) {
 
       ssa_info& info = ctx.info[instr->operands[0].tempId()];
-      if (info.is_vop3p() && instr_info.can_use_output_modifiers[(int)info.instr->opcode]) {
+      if (info.is_vop3p() && can_use_output_modifiers(info.instr->opcode)) {
          VALU_instruction* candidate = &ctx.info[instr->operands[0].tempId()].instr->valu();
          candidate->clamp = true;
          propagate_swizzles(candidate, vop3p->opsel_lo[0], vop3p->opsel_hi[0]);
-- 
GitLab


From d1c08896f420cc64f8908fc694d67a8b5b50d28d Mon Sep 17 00:00:00 2001
From: Georg Lehmann <dadschoorse@gmail.com>
Date: Wed, 12 Jun 2024 13:40:50 +0200
Subject: [PATCH 5/6] aco: remove input/output bitsets

---
 src/amd/compiler/aco_ir.cpp         | 8 ++------
 src/amd/compiler/aco_ir.h           | 2 --
 src/amd/compiler/aco_opcodes.py     | 8 +++-----
 src/amd/compiler/aco_opcodes_cpp.py | 4 ----
 4 files changed, 5 insertions(+), 17 deletions(-)

diff --git a/src/amd/compiler/aco_ir.cpp b/src/amd/compiler/aco_ir.cpp
index f691c50aa095c..c57e07923d048 100644
--- a/src/amd/compiler/aco_ir.cpp
+++ b/src/amd/compiler/aco_ir.cpp
@@ -506,17 +506,13 @@ can_use_input_modifiers(amd_gfx_level gfx_level, aco_opcode op, int idx)
    if (op == aco_opcode::v_mov_b32)
       return gfx_level >= GFX10;
 
-   if (op == aco_opcode::v_ldexp_f16 || op == aco_opcode::v_ldexp_f32 ||
-       op == aco_opcode::v_ldexp_f64)
-      return idx == 0;
-
-   return instr_info.can_use_input_modifiers[(int)op];
+   return (instr_info.operands[(int)op] >> (idx * 8)) & 0x80;
 }
 
 bool
 can_use_output_modifiers(aco_opcode op)
 {
-   return instr_info.can_use_output_modifiers[(int)op];
+   return instr_info.definitions[(int)op] & 0x80;
 }
 
 bool
diff --git a/src/amd/compiler/aco_ir.h b/src/amd/compiler/aco_ir.h
index 17cab72541996..3d6600c5b6070 100644
--- a/src/amd/compiler/aco_ir.h
+++ b/src/amd/compiler/aco_ir.h
@@ -2261,8 +2261,6 @@ typedef struct {
    const int16_t opcode_gfx10[static_cast<int>(aco_opcode::num_opcodes)];
    const int16_t opcode_gfx11[static_cast<int>(aco_opcode::num_opcodes)];
    const int16_t opcode_gfx12[static_cast<int>(aco_opcode::num_opcodes)];
-   const std::bitset<static_cast<int>(aco_opcode::num_opcodes)> can_use_input_modifiers;
-   const std::bitset<static_cast<int>(aco_opcode::num_opcodes)> can_use_output_modifiers;
    const std::bitset<static_cast<int>(aco_opcode::num_opcodes)> is_atomic;
    const char* name[static_cast<int>(aco_opcode::num_opcodes)];
    const aco::Format format[static_cast<int>(aco_opcode::num_opcodes)];
diff --git a/src/amd/compiler/aco_opcodes.py b/src/amd/compiler/aco_opcodes.py
index 0c20c58e74bd4..7c2072953834e 100644
--- a/src/amd/compiler/aco_opcodes.py
+++ b/src/amd/compiler/aco_opcodes.py
@@ -234,8 +234,6 @@ class Instruction(object):
 
       self.name = name
       self.op = opcode
-      self.input_mod = "1" if (operands & 0x80808080) != 0 else "0"
-      self.output_mod = "1" if (definitions & 0x80808080) != 0 else "0"
       self.is_atomic = "1" if is_atomic else "0"
       self.format = format
       self.cls = cls
@@ -984,7 +982,7 @@ VOP2 = {
    ("v_max_i16",           dst(U16),      src(U16, U16), op(gfx8=0x30, gfx10=-1)),
    ("v_min_u16",           dst(U16),      src(U16, U16), op(gfx8=0x31, gfx10=-1)),
    ("v_min_i16",           dst(U16),      src(U16, U16), op(gfx8=0x32, gfx10=-1)),
-   ("v_ldexp_f16",         dst(F16),      src(noMods(F16), U16), op(gfx8=0x33, gfx10=0x3b)),
+   ("v_ldexp_f16",         dst(F16),      src(F16, U16), op(gfx8=0x33, gfx10=0x3b)),
    ("v_add_u32",           dst(U32),      src(U32, U32), op(gfx9=0x34, gfx10=0x25)), # called v_add_nc_u32 in RDNA
    ("v_sub_u32",           dst(U32),      src(U32, U32), op(gfx9=0x35, gfx10=0x26)), # called v_sub_nc_u32 in RDNA
    ("v_subrev_u32",        dst(U32),      src(U32, U32), op(gfx9=0x36, gfx10=0x27)), # called v_subrev_nc_u32 in RDNA
@@ -1320,7 +1318,7 @@ VOP3 = {
    ("v_mul_f64_e64",           dst(F64), src(F64, F64), op(0x165, gfx8=0x281, gfx10=0x165, gfx11=0x328, gfx12=0x106), InstrClass.ValuDouble), # GFX12 is VOP2 opcode + 0x100
    ("v_min_f64_e64",           dst(F64), src(F64, F64), op(0x166, gfx8=0x282, gfx10=0x166, gfx11=0x329, gfx12=0x10d), InstrClass.ValuDouble), # GFX12 is VOP2 opcode + 0x100
    ("v_max_f64_e64",           dst(F64), src(F64, F64), op(0x167, gfx8=0x283, gfx10=0x167, gfx11=0x32a, gfx12=0x10e), InstrClass.ValuDouble), # GFX12 is VOP2 opcode + 0x100
-   ("v_ldexp_f64",             dst(F64), src(noMods(F64), U32), op(0x168, gfx8=0x284, gfx10=0x168, gfx11=0x32b), InstrClass.ValuDouble), # src1 can take input modifiers
+   ("v_ldexp_f64",             dst(F64), src(F64, U32), op(0x168, gfx8=0x284, gfx10=0x168, gfx11=0x32b), InstrClass.ValuDouble), # src1 can take input modifiers
    ("v_mul_lo_u32",            dst(U32), src(U32, U32), op(0x169, gfx8=0x285, gfx10=0x169, gfx11=0x32c), InstrClass.ValuQuarterRate32),
    ("v_mul_hi_u32",            dst(U32), src(U32, U32), op(0x16a, gfx8=0x286, gfx10=0x16a, gfx11=0x32d), InstrClass.ValuQuarterRate32),
    ("v_mul_lo_i32",            dst(U32), src(U32, U32), op(0x16b, gfx8=0x285, gfx10=0x16b, gfx11=0x32c), InstrClass.ValuQuarterRate32), # identical to v_mul_lo_u32
@@ -1371,7 +1369,7 @@ VOP3 = {
    ("v_interp_p2_legacy_f16",  dst(F16), src(F32, M0, F32), op(gfx8=0x276, gfx10=-1)),
    ("v_interp_p2_f16",         dst(F16), src(F32, M0, F32), op(gfx9=0x277, gfx10=0x35a, gfx11=-1)),
    ("v_interp_p2_hi_f16",      dst(F16), src(F32, M0, F32), op(gfx9=0x277, gfx10=0x35a, gfx11=-1)),
-   ("v_ldexp_f32",             dst(F32), src(noMods(F32), U32), op(0x12b, gfx8=0x288, gfx10=0x362, gfx11=0x31c)),
+   ("v_ldexp_f32",             dst(F32), src(F32, U32), op(0x12b, gfx8=0x288, gfx10=0x362, gfx11=0x31c)),
    ("v_readlane_b32_e64",      dst(U32), src(U32, U32), op(gfx8=0x289, gfx10=0x360)),
    ("v_writelane_b32_e64",     dst(U32), src(U32, U32, U32), op(gfx8=0x28a, gfx10=0x361)),
    ("v_bcnt_u32_b32",          dst(U32), src(U32, U32), op(0x122, gfx8=0x28b, gfx10=0x364, gfx11=0x31e)),
diff --git a/src/amd/compiler/aco_opcodes_cpp.py b/src/amd/compiler/aco_opcodes_cpp.py
index 8132cef78ec71..ceedfc6d0aa5b 100644
--- a/src/amd/compiler/aco_opcodes_cpp.py
+++ b/src/amd/compiler/aco_opcodes_cpp.py
@@ -14,8 +14,6 @@ namespace aco {
 
 <%
 opcode_names = sorted(instructions.keys())
-can_use_input_modifiers = "".join([instructions[name].input_mod for name in reversed(opcode_names)])
-can_use_output_modifiers = "".join([instructions[name].output_mod for name in reversed(opcode_names)])
 is_atomic = "".join([instructions[name].is_atomic for name in reversed(opcode_names)])
 %>
 
@@ -45,8 +43,6 @@ extern const aco::Info instr_info = {
       ${instructions[name].op.gfx12},
       % endfor
    },
-   std::bitset<${len(opcode_names)}>("${can_use_input_modifiers}"),
-   std::bitset<${len(opcode_names)}>("${can_use_output_modifiers}"),
    std::bitset<${len(opcode_names)}>("${is_atomic}"),
    {
       % for name in opcode_names:
-- 
GitLab


From 7efae523fe7b88411f0d8182a18f87207d213650 Mon Sep 17 00:00:00 2001
From: Georg Lehmann <dadschoorse@gmail.com>
Date: Wed, 12 Jun 2024 14:11:28 +0200
Subject: [PATCH 6/6] aco/optimizer: use type to determine if vop3p can use
 opsel_hi

---
 src/amd/compiler/aco_ir.cpp        | 34 ++++++++++++++++++++++++++++++
 src/amd/compiler/aco_ir.h          |  1 +
 src/amd/compiler/aco_optimizer.cpp |  7 +-----
 3 files changed, 36 insertions(+), 6 deletions(-)

diff --git a/src/amd/compiler/aco_ir.cpp b/src/amd/compiler/aco_ir.cpp
index c57e07923d048..261442ca86997 100644
--- a/src/amd/compiler/aco_ir.cpp
+++ b/src/amd/compiler/aco_ir.cpp
@@ -923,6 +923,40 @@ type_get_dwords(aco_type t)
    return DIV_ROUND_UP(type_get_bytes(t), 4);
 }
 
+unsigned
+type_get_vector_size(aco_type t)
+{
+   switch (t) {
+   case type_invalid:
+   case type_vcc:
+   case type_exec:
+   case type_exec_lo:
+   case type_m0:
+   case type_scc:
+   case type_imm: return 0;
+   case type_f8:
+   case type_bf8:
+   case type_f16:
+   case type_bf16:
+   case type_u16:
+   case type_u32:
+   case type_f32:
+   case type_i64:
+   case type_u64:
+   case type_f64:
+   case type_u128: return 1;
+   case type_pk_f8:
+   case type_pk_bf8:
+   case type_pk_f16:
+   case type_pk_bf16:
+   case type_pk_u16:
+   case type_pk_f32: return 2;
+   case type_pk4_f8:
+   case type_pk4_bf8: return 4;
+   }
+   return 0;
+}
+
 bool
 needs_exec_mask(const Instruction* instr)
 {
diff --git a/src/amd/compiler/aco_ir.h b/src/amd/compiler/aco_ir.h
index 3d6600c5b6070..7a87a8b3368d9 100644
--- a/src/amd/compiler/aco_ir.h
+++ b/src/amd/compiler/aco_ir.h
@@ -1774,6 +1774,7 @@ aco_type get_definition_type(enum amd_gfx_level gfx_level, Instruction* instr, u
 unsigned type_get_constant_size(aco_type t);
 unsigned type_get_bytes(aco_type t);
 unsigned type_get_dwords(aco_type t);
+unsigned type_get_vector_size(aco_type t);
 
 bool should_form_clause(const Instruction* a, const Instruction* b);
 
diff --git a/src/amd/compiler/aco_optimizer.cpp b/src/amd/compiler/aco_optimizer.cpp
index 400b52ddd66ba..364838f5d2232 100644
--- a/src/amd/compiler/aco_optimizer.cpp
+++ b/src/amd/compiler/aco_optimizer.cpp
@@ -893,12 +893,7 @@ propagate_constants_vop3p(opt_ctx& ctx, aco_ptr<Instruction>& instr, ssa_info& i
    }
 
    /* The accumulation operand of dot product instructions ignores opsel. */
-   bool cannot_use_opsel =
-      (instr->opcode == aco_opcode::v_dot4_i32_i8 || instr->opcode == aco_opcode::v_dot2_i32_i16 ||
-       instr->opcode == aco_opcode::v_dot4_i32_iu8 || instr->opcode == aco_opcode::v_dot4_u32_u8 ||
-       instr->opcode == aco_opcode::v_dot2_u32_u16) &&
-      i == 2;
-   if (cannot_use_opsel)
+   if (type_get_vector_size(get_operand_type(instr.get(), i)) < 2)
       return;
 
    /* try to fold inline constants */
-- 
GitLab

