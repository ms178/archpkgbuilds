From dbb677476c099e45017d7b32b77f33de6b555e4d Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Thu, 4 May 2023 15:29:39 +0200
Subject: [PATCH] vulkan/pipeline_cache: fix possible ref_cnt race when
 inserting objects

Should be an atomic read, otherwise it's possible to hit the assertion.

Found with Granite during the multi-threaded pipeline cache pre-warm on
startup.

Fixes: cbab396f549 ("vulkan/pipeline_cache: replace raw data objects on cache insertion of real objects")
Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/vulkan/runtime/vk_pipeline_cache.c | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/src/vulkan/runtime/vk_pipeline_cache.c b/src/vulkan/runtime/vk_pipeline_cache.c
index d9d8695297a2..b3a864253726 100644
--- a/src/vulkan/runtime/vk_pipeline_cache.c
+++ b/src/vulkan/runtime/vk_pipeline_cache.c
@@ -271,7 +271,8 @@ vk_pipeline_cache_insert_object(struct vk_pipeline_cache *cache,
        if (found_object->ops != object->ops) {
           /* The found object in the cache isn't fully formed. Replace it. */
           assert(found_object->ops == &vk_raw_data_cache_object_ops);
-          assert(found_object->ref_cnt == 1 && object->ref_cnt == 1);
+          assert(p_atomic_read(&found_object->ref_cnt) == 1 &&
+                 p_atomic_read(&object->ref_cnt) == 1);
           entry->key = object;
           object = found_object;
        }
-- 
GitLab

