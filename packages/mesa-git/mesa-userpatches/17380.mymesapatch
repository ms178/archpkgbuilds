From cfc9bd6eb9284bdede6af9389a346a52774fb06b Mon Sep 17 00:00:00 2001
From: Adam Jackson <ajax@redhat.com>
Date: Wed, 6 Jul 2022 14:52:38 -0400
Subject: [PATCH] mesa: Implement EXT_separate_depth_stencil

This trivial extension just relaxes the GLES3-only requirement that
depth and stencil attachments must be the same image.
---
 docs/relnotes/new_features.txt   |  1 +
 src/mesa/main/extensions_table.h |  1 +
 src/mesa/main/fbobject.c         | 20 --------------------
 3 files changed, 2 insertions(+), 20 deletions(-)

diff --git a/docs/relnotes/new_features.txt b/docs/relnotes/new_features.txt
index b1a31c6e6919..cafb67b45fef 100644
--- a/docs/relnotes/new_features.txt
+++ b/docs/relnotes/new_features.txt
@@ -9,3 +9,4 @@ VK_EXT_primitives_generated_query on RADV
 VK_EXT_non_seamless_cube_map on RADV, ANV
 VK_EXT_border_color_swizzle on lavapipe, ANV, turnip, RADV
 VK_EXT_shader_module_identifier on RADV
+GL_EXT_separate_depth_stencil for all GLES3 drivers
diff --git a/src/mesa/main/extensions_table.h b/src/mesa/main/extensions_table.h
index 74cec475c990..5dd6e7604d1b 100644
--- a/src/mesa/main/extensions_table.h
+++ b/src/mesa/main/extensions_table.h
@@ -285,6 +285,7 @@ EXT(EXT_secondary_color                     , dummy_true
 EXT(EXT_semaphore                           , EXT_semaphore                          , GLL, GLC,  x , ES2, 2017)
 EXT(EXT_semaphore_fd                        , EXT_semaphore_fd                       , GLL, GLC,  x , ES2, 2017)
 EXT(EXT_semaphore_win32                     , EXT_semaphore_win32                    , GLL, GLC,  x , ES2, 2017)
+EXT(EXT_separate_depth_stencil              , dummy_true                             ,  x ,  x ,  x ,  30, 2022)
 EXT(EXT_separate_shader_objects             , dummy_true                             ,  x ,  x ,  x , ES2, 2013)
 EXT(EXT_separate_specular_color             , dummy_true                             , GLL,  x ,  x ,  x , 1997)
 EXT(EXT_shader_framebuffer_fetch            , EXT_shader_framebuffer_fetch           , GLL, GLC,  x , ES2, 2013)
diff --git a/src/mesa/main/fbobject.c b/src/mesa/main/fbobject.c
index 48df6d7c4dea..b912abfb694f 100644
--- a/src/mesa/main/fbobject.c
+++ b/src/mesa/main/fbobject.c
@@ -1274,8 +1274,6 @@ _mesa_test_framebuffer_completeness(struct gl_context *ctx,
    GLuint max_layer_count = 0, att_layer_count;
    bool is_layered = false;
    GLenum layer_tex_target = 0;
-   bool has_depth_attachment = false;
-   bool has_stencil_attachment = false;
 
    assert(_mesa_is_user_fbo(fb));
 
@@ -1318,8 +1316,6 @@ _mesa_test_framebuffer_completeness(struct gl_context *ctx,
             fb->_Status = GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT;
             fbo_incomplete(ctx, "depth attachment incomplete", -1);
             return;
-         } else if (att->Type != GL_NONE) {
-            has_depth_attachment = true;
          }
       }
       else if (i == -1) {
@@ -1329,8 +1325,6 @@ _mesa_test_framebuffer_completeness(struct gl_context *ctx,
             fb->_Status = GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT;
             fbo_incomplete(ctx, "stencil attachment incomplete", -1);
             return;
-         } else if (att->Type != GL_NONE) {
-            has_stencil_attachment = true;
          }
       }
       else {
@@ -1669,20 +1663,6 @@ _mesa_test_framebuffer_completeness(struct gl_context *ctx,
       }
    }
 
-   /* The OpenGL ES3 spec, in chapter 9.4. FRAMEBUFFER COMPLETENESS, says:
-    *
-    *    "Depth and stencil attachments, if present, are the same image."
-    *
-    * This restriction is not present in the OpenGL ES2 spec.
-    */
-   if (_mesa_is_gles3(ctx) &&
-       has_stencil_attachment && has_depth_attachment &&
-       !_mesa_has_depthstencil_combined(fb)) {
-      fb->_Status = GL_FRAMEBUFFER_UNSUPPORTED;
-      fbo_incomplete(ctx, "Depth and stencil attachments must be the same image", -1);
-      return;
-   }
-
    /* Provisionally set status = COMPLETE ... */
    fb->_Status = GL_FRAMEBUFFER_COMPLETE_EXT;
 
-- 
GitLab

