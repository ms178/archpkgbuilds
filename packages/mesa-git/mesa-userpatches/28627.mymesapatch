From 8d1d8735b2618841a4104c6fc10ed8ad25c95875 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Daniel=20Sch=C3=BCrmann?= <daniel@schuermann.dev>
Date: Fri, 5 Apr 2024 17:00:33 +0200
Subject: [PATCH 1/4] nir/divergence: separately indicate whether loops have
 divergent continues or breaks

bool nir_loop_is_divergent(nir_loop *)
 replaces the previous loop->divergent indicator.
---
 src/broadcom/compiler/nir_to_vir.c         |  2 +-
 src/compiler/nir/nir.c                     |  3 ++-
 src/compiler/nir/nir.h                     | 16 +++++++++++++++-
 src/compiler/nir/nir_divergence_analysis.c | 12 ++++++------
 src/compiler/nir/nir_serialize.c           |  6 ++++--
 src/nouveau/compiler/nak_nir_lower_cf.c    |  6 ++++--
 6 files changed, 32 insertions(+), 13 deletions(-)

diff --git a/src/broadcom/compiler/nir_to_vir.c b/src/broadcom/compiler/nir_to_vir.c
index ff98e4b59612b..daa454513cb7e 100644
--- a/src/broadcom/compiler/nir_to_vir.c
+++ b/src/broadcom/compiler/nir_to_vir.c
@@ -4503,7 +4503,7 @@ ntq_emit_loop(struct v3d_compile *c, nir_loop *loop)
         struct qblock *save_loop_cont_block = c->loop_cont_block;
         struct qblock *save_loop_break_block = c->loop_break_block;
 
-        if (vir_in_nonuniform_control_flow(c) || loop->divergent) {
+        if (vir_in_nonuniform_control_flow(c) || nir_loop_is_divergent(loop)) {
                 ntq_emit_nonuniform_loop(c, loop);
         } else {
                 ntq_emit_uniform_loop(c, loop);
diff --git a/src/compiler/nir/nir.c b/src/compiler/nir/nir.c
index ee594af44fa19..ff252f15627c7 100644
--- a/src/compiler/nir/nir.c
+++ b/src/compiler/nir/nir.c
@@ -644,7 +644,8 @@ nir_loop_create(nir_shader *shader)
 
    cf_init(&loop->cf_node, nir_cf_node_loop);
    /* Assume that loops are divergent until proven otherwise */
-   loop->divergent = true;
+   loop->divergent_break = true;
+   loop->divergent_continue = true;
 
    nir_block *body = nir_block_create(shader);
    exec_list_make_empty(&loop->body);
diff --git a/src/compiler/nir/nir.h b/src/compiler/nir/nir.h
index 4ea6ee3d6cc29..3584a651813f0 100644
--- a/src/compiler/nir/nir.h
+++ b/src/compiler/nir/nir.h
@@ -3214,9 +3214,23 @@ typedef struct {
    nir_loop_info *info;
    nir_loop_control control;
    bool partially_unrolled;
-   bool divergent;
+
+   /**
+    * Whether some loop-active invocations might take a different control-flow path:
+    * divergent_continue indicates that a continue statement might be taken by
+    * only some of the loop-active invocations. A subsequent break is always
+    * considered divergent.
+    */
+   bool divergent_continue;
+   bool divergent_break;
 } nir_loop;
 
+static inline bool
+nir_loop_is_divergent(nir_loop *loop)
+{
+   return loop->divergent_continue || loop->divergent_break;
+}
+
 /**
  * Various bits of metadata that can may be created or required by
  * optimization and analysis passes
diff --git a/src/compiler/nir/nir_divergence_analysis.c b/src/compiler/nir/nir_divergence_analysis.c
index 870ae307fbac6..22a19a061d837 100644
--- a/src/compiler/nir/nir_divergence_analysis.c
+++ b/src/compiler/nir/nir_divergence_analysis.c
@@ -1092,7 +1092,8 @@ visit_loop(nir_loop *loop, struct divergence_state *state)
       progress |= visit_loop_exit_phi(phi, loop_state.divergent_loop_break);
    }
 
-   loop->divergent = (loop_state.divergent_loop_break || loop_state.divergent_loop_continue);
+   loop->divergent_continue = loop_state.divergent_loop_continue;
+   loop->divergent_break = loop_state.divergent_loop_break;
 
    return progress;
 }
@@ -1186,15 +1187,14 @@ nir_update_instr_divergence(nir_shader *shader, nir_instr *instr)
 bool
 nir_has_divergent_loop(nir_shader *shader)
 {
-   bool divergent_loop = false;
    nir_function_impl *func = nir_shader_get_entrypoint(shader);
 
    foreach_list_typed(nir_cf_node, node, node, &func->body) {
-      if (node->type == nir_cf_node_loop && nir_cf_node_as_loop(node)->divergent) {
-         divergent_loop = true;
-         break;
+      if (node->type == nir_cf_node_loop) {
+         if (nir_loop_is_divergent(nir_cf_node_as_loop(node)))
+            return true;
       }
    }
 
-   return divergent_loop;
+   return false;
 }
diff --git a/src/compiler/nir/nir_serialize.c b/src/compiler/nir/nir_serialize.c
index 0f92961fa98de..42b67ab947e48 100644
--- a/src/compiler/nir/nir_serialize.c
+++ b/src/compiler/nir/nir_serialize.c
@@ -1760,7 +1760,8 @@ static void
 write_loop(write_ctx *ctx, nir_loop *loop)
 {
    blob_write_uint8(ctx->blob, loop->control);
-   blob_write_uint8(ctx->blob, loop->divergent);
+   blob_write_uint8(ctx->blob, loop->divergent_continue);
+   blob_write_uint8(ctx->blob, loop->divergent_break);
    bool has_continue_construct = nir_loop_has_continue_construct(loop);
    blob_write_uint8(ctx->blob, has_continue_construct);
 
@@ -1778,7 +1779,8 @@ read_loop(read_ctx *ctx, struct exec_list *cf_list)
    nir_cf_node_insert_end(cf_list, &loop->cf_node);
 
    loop->control = blob_read_uint8(ctx->blob);
-   loop->divergent = blob_read_uint8(ctx->blob);
+   loop->divergent_continue = blob_read_uint8(ctx->blob);
+   loop->divergent_break = blob_read_uint8(ctx->blob);
    bool has_continue_construct = blob_read_uint8(ctx->blob);
 
    read_cf_list(ctx, &loop->body);
diff --git a/src/nouveau/compiler/nak_nir_lower_cf.c b/src/nouveau/compiler/nak_nir_lower_cf.c
index 2319a1c5fdf0f..05c1ec6b20bc7 100644
--- a/src/nouveau/compiler/nak_nir_lower_cf.c
+++ b/src/nouveau/compiler/nak_nir_lower_cf.c
@@ -331,14 +331,16 @@ lower_cf_list(nir_builder *b, nir_def *esc_reg, struct scope *parent_scope,
           * while avoiding an extra sync for the loop break is tricky at best.
           */
          struct scope break_scope = push_scope(b, SCOPE_TYPE_LOOP_BREAK,
-                                               parent_scope, loop->divergent,
+                                               parent_scope,
+                                               nir_loop_is_divergent(loop),
                                                break_block);
 
          nir_goto(b, head_block);
          push_block(b, head_block);
 
          struct scope cont_scope = push_scope(b, SCOPE_TYPE_LOOP_CONT,
-                                              &break_scope, loop->divergent,
+                                              &break_scope,
+                                              nir_loop_is_divergent(loop),
                                               cont_block);
 
          lower_cf_list(b, esc_reg, &cont_scope, &loop->body);
-- 
GitLab


From 4cb69d77b076eebf1c7ff7cfc34b825f39b3f9a9 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Daniel=20Sch=C3=BCrmann?= <daniel@schuermann.dev>
Date: Fri, 5 Apr 2024 17:02:46 +0200
Subject: [PATCH 2/4] nir/divergence: change nir_has_divergent_loop() to return
 true only for divergent breaks
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

The important information is whether a loop has a uniform number
of iterations.

Reviewed-by: Marek Olšák <marek.olsak@amd.com>
---
 src/compiler/nir/nir_divergence_analysis.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/compiler/nir/nir_divergence_analysis.c b/src/compiler/nir/nir_divergence_analysis.c
index 22a19a061d837..deff1e539bf3d 100644
--- a/src/compiler/nir/nir_divergence_analysis.c
+++ b/src/compiler/nir/nir_divergence_analysis.c
@@ -1191,7 +1191,7 @@ nir_has_divergent_loop(nir_shader *shader)
 
    foreach_list_typed(nir_cf_node, node, node, &func->body) {
       if (node->type == nir_cf_node_loop) {
-         if (nir_loop_is_divergent(nir_cf_node_as_loop(node)))
+         if (nir_cf_node_as_loop(node)->divergent_break)
             return true;
       }
    }
-- 
GitLab


From 756d8346768868633bcdc71d00c39640404f53df Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Daniel=20Sch=C3=BCrmann?= <daniel@schuermann.dev>
Date: Fri, 5 Apr 2024 17:26:00 +0200
Subject: [PATCH 3/4] nir/divergence: add ability to update phi divergence on
 loop headers and exits

---
 src/compiler/nir/nir_divergence_analysis.c | 20 ++++++++++++++------
 1 file changed, 14 insertions(+), 6 deletions(-)

diff --git a/src/compiler/nir/nir_divergence_analysis.c b/src/compiler/nir/nir_divergence_analysis.c
index deff1e539bf3d..0886dca7247e4 100644
--- a/src/compiler/nir/nir_divergence_analysis.c
+++ b/src/compiler/nir/nir_divergence_analysis.c
@@ -1165,13 +1165,21 @@ nir_update_instr_divergence(nir_shader *shader, nir_instr *instr)
 
    if (instr->type == nir_instr_type_phi) {
       nir_cf_node *prev = nir_cf_node_prev(&instr->block->cf_node);
-      /* can only update gamma/if phis */
-      if (!prev || prev->type != nir_cf_node_if)
-         return false;
-
-      nir_if *nif = nir_cf_node_as_if(prev);
+      nir_phi_instr *phi = nir_instr_as_phi(instr);
+
+      if (!prev) {
+         nir_loop *loop = nir_cf_node_as_loop(instr->block->cf_node.parent);
+         nir_block *preheader = nir_cf_node_cf_tree_prev(&loop->cf_node);
+         visit_loop_header_phi(phi, preheader, loop->divergent_continue);
+      } else if (prev->type == nir_cf_node_if) {
+         nir_if *nif = nir_cf_node_as_if(prev);
+         visit_if_merge_phi(phi, nir_src_is_divergent(nif->condition));
+      } else {
+         assert(prev->type == nir_cf_node_loop);
+         nir_loop *loop = nir_cf_node_as_loop(prev);
+         visit_loop_exit_phi(phi, loop->divergent_break);
+      }
 
-      visit_if_merge_phi(nir_instr_as_phi(instr), nir_src_is_divergent(nif->condition));
       return true;
    }
 
-- 
GitLab


From 5cdd64557fde7cf2c0e5c72a42d70d199f72a193 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Daniel=20Sch=C3=BCrmann?= <daniel@schuermann.dev>
Date: Fri, 8 Mar 2024 15:44:42 +0100
Subject: [PATCH 4/4] nir/divergence_analysis: handle loop continue constructs

---
 src/compiler/nir/nir_divergence_analysis.c | 13 ++++++++++++-
 1 file changed, 12 insertions(+), 1 deletion(-)

diff --git a/src/compiler/nir/nir_divergence_analysis.c b/src/compiler/nir/nir_divergence_analysis.c
index 0886dca7247e4..b98dc8f814ac5 100644
--- a/src/compiler/nir/nir_divergence_analysis.c
+++ b/src/compiler/nir/nir_divergence_analysis.c
@@ -1043,7 +1043,6 @@ visit_if(nir_if *if_stmt, struct divergence_state *state)
 static bool
 visit_loop(nir_loop *loop, struct divergence_state *state)
 {
-   assert(!nir_loop_has_continue_construct(loop));
    bool progress = false;
    nir_block *loop_header = nir_loop_first_block(loop);
    nir_block *loop_preheader = nir_block_cf_tree_prev(loop_header);
@@ -1075,6 +1074,18 @@ visit_loop(nir_loop *loop, struct divergence_state *state)
       progress |= visit_cf_list(&loop->body, &loop_state);
       repeat = false;
 
+      if (nir_loop_has_continue_construct(loop)) {
+         /* Handle the phis at the loop continue construct which merge
+          * all loop-carried values.
+          */
+         nir_foreach_phi(phi, nir_loop_first_continue_block(loop)) {
+            progress |= visit_loop_header_phi(phi, NULL,
+                                              loop_state.divergent_loop_continue);
+         }
+
+         progress |= visit_cf_list(&loop->continue_list, &loop_state);
+      }
+
       /* revisit loop header phis to see if something has changed */
       nir_foreach_phi(phi, loop_header) {
          repeat |= visit_loop_header_phi(phi, loop_preheader,
-- 
GitLab

