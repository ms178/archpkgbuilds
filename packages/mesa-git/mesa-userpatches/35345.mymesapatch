From 30e9e266ba236a843e3ecfc75847c8e9566483d6 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Mon, 2 Jun 2025 13:13:49 -0400
Subject: [PATCH 1/4] ac/nir: don't produce vectorized 8-bit and 16-bit LDS
 loads/stores

They were initially 32-bit stores packed by ALU opcodes, but the vectorizer
converted them back to 16 bits. No clue why it did that.

Before:
    ds_store_b16 v43, v18 offset:20                                                    ; D87C0014 0000122B
    ds_store_b16 v43, v19 offset:22                                                    ; D87C0016 0000132B
    ds_store_b16 v43, v20 offset:24                                                    ; D87C0018 0000142B
    ds_store_b16 v43, v21 offset:26                                                    ; D87C001A 0000152B

After:
    ds_store_2addr_b32 v39, v22, v23 offset0:5 offset1:6
---
 src/amd/common/nir/ac_nir.c | 10 +++++++---
 1 file changed, 7 insertions(+), 3 deletions(-)

diff --git a/src/amd/common/nir/ac_nir.c b/src/amd/common/nir/ac_nir.c
index 642f73b339e78..585c71757d915 100644
--- a/src/amd/common/nir/ac_nir.c
+++ b/src/amd/common/nir/ac_nir.c
@@ -608,10 +608,14 @@ ac_nir_mem_vectorize_callback(unsigned align_mul, unsigned align_offset, unsigne
    if (!is_shared) {
       return (align % (bit_size / 8u)) == 0 && num_components <= NIR_MAX_VEC_COMPONENTS;
    } else {
-      if (bit_size >= 32 && num_components == 3) {
-         /* AMD hardware can't do 3-component loads except for 96-bit loads. */
+      /* AMD hw doesn't support multi-component 8-bit and 16-bit LDS ops. */
+      if (bit_size <= 16 && num_components > 1)
+         return false;
+
+      /* AMD hardware can't do 3-component loads except for 96-bit loads. */
+      if (bit_size >= 32 && num_components == 3)
          return bit_size == 32 && align % 16 == 0;
-      }
+
       unsigned req = bit_size >= 32 ? bit_size * num_components : bit_size;
       if (req == 64 || req == 128) /* 64-bit and 128-bit loads can use ds_read2_b{32,64} */
          req /= 2u;
-- 
GitLab


From 53269cd6b1939bef7909012bb76acb05cbcc016a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Wed, 29 Jan 2025 21:55:12 -0500
Subject: [PATCH 2/4] ac/nir: rename force_center_interp_no_msaa to
 msaa_disabled

---
 src/amd/common/nir/ac_nir.h                |  9 ++++-----
 src/amd/common/nir/ac_nir_lower_ps_early.c | 17 ++++++++---------
 src/gallium/drivers/radeonsi/si_shader.c   |  8 ++++----
 3 files changed, 16 insertions(+), 18 deletions(-)

diff --git a/src/amd/common/nir/ac_nir.h b/src/amd/common/nir/ac_nir.h
index e78f43bfcafb4..9e7f9a8c67e98 100644
--- a/src/amd/common/nir/ac_nir.h
+++ b/src/amd/common/nir/ac_nir.h
@@ -269,7 +269,7 @@ ac_nir_lower_legacy_gs(nir_shader *nir,
  */
 typedef struct {
    /* System values. */
-   bool force_center_interp_no_msaa; /* true if MSAA is disabled, false may mean that the state is unknown */
+   bool msaa_disabled; /* true if MSAA is disabled, false may mean that the state is unknown */
    bool uses_vrs_coarse_shading;
    bool load_sample_positions_always_loads_current_ones;
    bool dynamic_rasterization_samples;
@@ -278,8 +278,7 @@ typedef struct {
    bool frag_coord_is_center; /* GL requirement for sample shading */
 
    /* frag_coord/pixel_coord:
-    *    allow_pixel_coord && (frag_coord_is_center || ps_iter_samples == 1 ||
-    *                          force_center_interp_no_msaa ||
+    *    allow_pixel_coord && (frag_coord_is_center || ps_iter_samples == 1 || msaa_disabled ||
     *                          the fractional part of frag_coord.xy isn't used):
     *       * frag_coord.xy is replaced by u2f(pixel_coord) + 0.5.
     *    else:
@@ -287,7 +286,7 @@ typedef struct {
     *       * ps_iter_samples == 0 means the state is unknown.
     *
     * barycentrics:
-    *    force_center_interp_no_msaa:
+    *    msaa_disabled:
     *       * All barycentrics including at_sample but excluding at_offset are changed to
     *         barycentric_pixel
     *    ps_iter_samples >= 2:
@@ -295,7 +294,7 @@ typedef struct {
     *       * barycentric_at_sample(sample_id) is replaced by barycentric_sample.
     *
     * sample_mask_in:
-    *    force_center_interp_no_msaa && !uses_vrs_coarse_shading:
+    *    msaa_disabled && !uses_vrs_coarse_shading:
     *       * sample_mask_in is replaced by b2i32(!helper_invocation)
     *    ps_iter_samples == 2, 4:
     *       * sample_mask_in is changed to (sample_mask_in & (ps_iter_mask << sample_id))
diff --git a/src/amd/common/nir/ac_nir_lower_ps_early.c b/src/amd/common/nir/ac_nir_lower_ps_early.c
index d084600f2ea25..695899e30f9ec 100644
--- a/src/amd/common/nir/ac_nir_lower_ps_early.c
+++ b/src/amd/common/nir/ac_nir_lower_ps_early.c
@@ -63,19 +63,19 @@ get_baryc_var(nir_builder *b, nir_intrinsic_op baryc_op, enum glsl_interp_mode m
    case nir_intrinsic_load_barycentric_centroid:
       if (mode == INTERP_MODE_NOPERSPECTIVE) {
          return get_baryc_var_common(b, s->options->ps_iter_samples > 1 ||
-                                     s->options->force_center_interp_no_msaa, &s->linear_centroid,
+                                     s->options->msaa_disabled, &s->linear_centroid,
                                      "linear_centroid");
       } else {
          return get_baryc_var_common(b, s->options->ps_iter_samples > 1 ||
-                                     s->options->force_center_interp_no_msaa, &s->persp_centroid,
+                                     s->options->msaa_disabled, &s->persp_centroid,
                                      "persp_centroid");
       }
    case nir_intrinsic_load_barycentric_sample:
       if (mode == INTERP_MODE_NOPERSPECTIVE) {
-         return get_baryc_var_common(b, s->options->force_center_interp_no_msaa, &s->linear_sample,
+         return get_baryc_var_common(b, s->options->msaa_disabled, &s->linear_sample,
                                      "linear_sample");
       } else {
-         return get_baryc_var_common(b, s->options->force_center_interp_no_msaa, &s->persp_sample,
+         return get_baryc_var_common(b, s->options->msaa_disabled, &s->persp_sample,
                                      "persp_sample");
       }
    default:
@@ -104,7 +104,7 @@ init_interp_param(nir_builder *b, lower_ps_early_state *s)
                       s->linear_center, s->linear_centroid);
    }
 
-   if (s->options->force_center_interp_no_msaa) {
+   if (s->options->msaa_disabled) {
       set_interp_vars(b, nir_load_barycentric_pixel(b, 32, .interp_mode = INTERP_MODE_SMOOTH),
                       s->persp_sample, s->persp_centroid);
       set_interp_vars(b, nir_load_barycentric_pixel(b, 32, .interp_mode = INTERP_MODE_NOPERSPECTIVE),
@@ -271,7 +271,7 @@ lower_ps_load_sample_mask_in(nir_builder *b, nir_intrinsic_instr *intrin, lower_
    /* Set ps_iter_samples=8 if full sample shading is enabled even for 2x and 4x MSAA
     * to get this fast path that fully replaces sample_mask_in with sample_id.
     */
-   if (s->options->force_center_interp_no_msaa && !s->options->uses_vrs_coarse_shading) {
+   if (s->options->msaa_disabled && !s->options->uses_vrs_coarse_shading) {
       replacement = nir_b2i32(b, nir_inot(b, get_load_helper_invocation(b->impl, s)));
    } else if (s->options->ps_iter_samples == 8) {
       replacement = nir_bcsel(b, get_load_helper_invocation(b->impl, s), nir_imm_int(b, 0),
@@ -412,7 +412,7 @@ lower_ps_intrinsic(nir_builder *b, nir_intrinsic_instr *intrin, void *state)
       unsigned mode = nir_intrinsic_interp_mode(intrin);
       nir_def *sample_id = intrin->src[0].ssa;
 
-      if (s->options->force_center_interp_no_msaa) {
+      if (s->options->msaa_disabled) {
          nir_def_replace(&intrin->def, nir_load_barycentric_pixel(b, 32, .interp_mode = mode));
          return true;
       }
@@ -571,8 +571,7 @@ ac_nir_lower_ps_early(nir_shader *nir, const ac_nir_lower_ps_early_options *opti
     * an even number?
     */
    state.use_fragcoord = !options->frag_coord_is_center && state.options->ps_iter_samples != 1 &&
-                         !state.options->force_center_interp_no_msaa &&
-                         state.uses_fragcoord_xy_as_float;
+                         !state.options->msaa_disabled && state.uses_fragcoord_xy_as_float;
 
    bool progress = nir_shader_intrinsics_pass(nir, lower_ps_intrinsic,
                                               nir_metadata_control_flow, &state);
diff --git a/src/gallium/drivers/radeonsi/si_shader.c b/src/gallium/drivers/radeonsi/si_shader.c
index 135775185ac28..748be11a594b3 100644
--- a/src/gallium/drivers/radeonsi/si_shader.c
+++ b/src/gallium/drivers/radeonsi/si_shader.c
@@ -1437,10 +1437,10 @@ static void run_pre_link_optimization_passes(struct si_nir_shader_ctx *ctx)
 
          /* This eliminates system values and unused shader output components. */
          ac_nir_lower_ps_early_options early_options = {
-            .force_center_interp_no_msaa = key->ps.part.prolog.force_persp_center_interp ||
-                                           key->ps.part.prolog.force_linear_center_interp ||
-                                           key->ps.part.prolog.force_samplemask_to_helper_invocation ||
-                                           key->ps.mono.interpolate_at_sample_force_center,
+            .msaa_disabled = key->ps.part.prolog.force_persp_center_interp ||
+                             key->ps.part.prolog.force_linear_center_interp ||
+                             key->ps.part.prolog.force_samplemask_to_helper_invocation ||
+                             key->ps.mono.interpolate_at_sample_force_center,
             .load_sample_positions_always_loads_current_ones = true,
             .force_front_face = key->ps.opt.force_front_face_input,
             .optimize_frag_coord = true,
-- 
GitLab


From 1d56be77120ca9507df1518114220cb9efb8016b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Wed, 29 Jan 2025 22:00:35 -0500
Subject: [PATCH 3/4] ac/nir: eliminate sample_id/sample_pos if MSAA is
 disabled

---
 src/amd/common/nir/ac_nir_lower_ps_early.c | 10 +++++++++-
 1 file changed, 9 insertions(+), 1 deletion(-)

diff --git a/src/amd/common/nir/ac_nir_lower_ps_early.c b/src/amd/common/nir/ac_nir_lower_ps_early.c
index 695899e30f9ec..78481a4338734 100644
--- a/src/amd/common/nir/ac_nir_lower_ps_early.c
+++ b/src/amd/common/nir/ac_nir_lower_ps_early.c
@@ -392,7 +392,9 @@ lower_ps_intrinsic(nir_builder *b, nir_intrinsic_instr *intrin, void *state)
       }
       break;
    case nir_intrinsic_load_sample_pos:
-      if (s->options->frag_coord_is_center) {
+      if (s->options->msaa_disabled) {
+         nir_def_replace(&intrin->def, nir_imm_vec2(b, 0.5, 0.5));
+      } else if (s->options->frag_coord_is_center) {
          /* We have to use the alternative way to get sample_pos. */
          nir_def *num_samples = s->options->load_sample_positions_always_loads_current_ones ?
                                    nir_undef(b, 1, 32) : nir_load_rasterization_samples_amd(b);
@@ -403,6 +405,12 @@ lower_ps_intrinsic(nir_builder *b, nir_intrinsic_instr *intrin, void *state)
          nir_def_replace(&intrin->def, nir_ffract(b, nir_channels(b, nir_load_frag_coord(b), 0x3)));
       }
       return true;
+   case nir_intrinsic_load_sample_id:
+      if (s->options->msaa_disabled) {
+         nir_def_replace(&intrin->def, nir_imm_int(b, 0));
+         return true;
+      }
+      return false;
    case nir_intrinsic_load_barycentric_at_offset:
       nir_def_replace(&intrin->def,
                       lower_load_barycentric_at_offset(b, intrin->src[0].ssa,
-- 
GitLab


From b05a3f27f994bd34343352d52bcc061ee5a4856b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Mon, 26 May 2025 06:51:35 -0400
Subject: [PATCH 4/4] ac/nir: use u_foreach_bit more

---
 src/amd/common/nir/ac_nir_lower_ngg.c     |  5 +----
 src/amd/common/nir/ac_nir_lower_ngg_gs.c  |  9 ++-------
 src/amd/common/nir/ac_nir_prerast_utils.c | 24 +++++------------------
 3 files changed, 8 insertions(+), 30 deletions(-)

diff --git a/src/amd/common/nir/ac_nir_lower_ngg.c b/src/amd/common/nir/ac_nir_lower_ngg.c
index fe1f0cca69c40..1c06aef1ae80c 100644
--- a/src/amd/common/nir/ac_nir_lower_ngg.c
+++ b/src/amd/common/nir/ac_nir_lower_ngg.c
@@ -896,10 +896,7 @@ clipdist_culling_es_part(nir_builder *b, lower_ngg_nogs_state *s,
       nir_def *clip_vertex = nir_load_var(b, clip_vertex_var);
 
       /* clip against user defined clip planes */
-      for (unsigned i = 0; i < 8; i++) {
-         if (!(s->options->user_clip_plane_enable_mask & BITFIELD_BIT(i)))
-            continue;
-
+      u_foreach_bit(i, s->options->user_clip_plane_enable_mask) {
          nir_def *plane = nir_load_user_clip_plane(b, .ucp_id = i);
          nir_def *dist = nir_fdot(b, clip_vertex, plane);
          add_clipdist_bit(b, dist, i, s->clipdist_neg_mask_var);
diff --git a/src/amd/common/nir/ac_nir_lower_ngg_gs.c b/src/amd/common/nir/ac_nir_lower_ngg_gs.c
index fa667e938a582..20dc0cdc39cd4 100644
--- a/src/amd/common/nir/ac_nir_lower_ngg_gs.c
+++ b/src/amd/common/nir/ac_nir_lower_ngg_gs.c
@@ -702,10 +702,8 @@ ngg_gs_build_streamout(nir_builder *b, lower_ngg_gs_state *s)
    nir_def *gen_prim[4] = {0};
    nir_def *export_seq[4] = {0};
    nir_def *out_vtx_primflag[4] = {0};
-   for (unsigned stream = 0; stream < 4; stream++) {
-      if (!(info->streams_written & BITFIELD_BIT(stream)))
-         continue;
 
+   u_foreach_bit(stream, info->streams_written) {
       out_vtx_primflag[stream] =
          ngg_gs_load_out_vtx_primflag(b, stream, tid_in_tg, out_vtx_lds_addr, max_vtxcnt, s);
 
@@ -756,10 +754,7 @@ ngg_gs_build_streamout(nir_builder *b, lower_ngg_gs_state *s)
                                    s->options->use_gfx12_xfb_intrinsic, s->lds_addr_gs_scratch, tid_in_tg,
                                    gen_prim, so_buffer, buffer_offsets, emit_prim);
 
-   for (unsigned stream = 0; stream < 4; stream++) {
-      if (!(info->streams_written & BITFIELD_BIT(stream)))
-         continue;
-
+   u_foreach_bit(stream, info->streams_written) {
       nir_def *can_emit = nir_ilt(b, export_seq[stream], emit_prim[stream]);
       nir_if *if_emit = nir_push_if(b, nir_iand(b, can_emit, prim_live[stream]));
       {
diff --git a/src/amd/common/nir/ac_nir_prerast_utils.c b/src/amd/common/nir/ac_nir_prerast_utils.c
index 491a1d14b11f7..e0735ebcd3b00 100644
--- a/src/amd/common/nir/ac_nir_prerast_utils.c
+++ b/src/amd/common/nir/ac_nir_prerast_utils.c
@@ -982,10 +982,8 @@ ac_nir_ngg_build_streamout_buffer_info(nir_builder *b,
     * num-vert-per-prim for writing correct amount of data to buffer.
     */
    nir_def *num_vert_per_prim = nir_load_num_vertices_per_primitive_amd(b);
-   for (unsigned buffer = 0; buffer < 4; buffer++) {
-      if (!(info->buffers_written & BITFIELD_BIT(buffer)))
-         continue;
 
+   u_foreach_bit(buffer, info->buffers_written) {
       assert(info->buffers[buffer].stride);
 
       prim_stride[buffer] =
@@ -1168,10 +1166,7 @@ ac_nir_ngg_build_streamout_buffer_info(nir_builder *b,
       nir_def *any_overflow = nir_imm_false(b);
       nir_def *overflow_amount[4] = {undef, undef, undef, undef};
 
-      for (unsigned buffer = 0; buffer < 4; buffer++) {
-         if (!(info->buffers_written & BITFIELD_BIT(buffer)))
-            continue;
-
+      u_foreach_bit(buffer, info->buffers_written) {
          nir_def *buffer_size = nir_channel(b, so_buffer_ret[buffer], 2);
 
          /* Only consider overflow for valid feedback buffers because
@@ -1237,10 +1232,7 @@ ac_nir_ngg_build_streamout_buffer_info(nir_builder *b,
       }
 
       /* Save to LDS for being accessed by other waves in this workgroup. */
-      for (unsigned stream = 0; stream < 4; stream++) {
-         if (!(info->streams_written & BITFIELD_BIT(stream)))
-            continue;
-
+      u_foreach_bit(stream, info->streams_written) {
          nir_store_shared(b, emit_prim[stream], scratch_base, .base = 16 + stream * 4);
       }
 
@@ -1264,19 +1256,13 @@ ac_nir_ngg_build_streamout_buffer_info(nir_builder *b,
                       .memory_modes = nir_var_mem_shared);
 
    /* Fetch the per-buffer offsets in all waves. */
-   for (unsigned buffer = 0; buffer < 4; buffer++) {
-      if (!(info->buffers_written & BITFIELD_BIT(buffer)))
-         continue;
-
+   u_foreach_bit(buffer, info->buffers_written) {
       buffer_offsets_ret[buffer] =
          nir_load_shared(b, 1, 32, scratch_base, .base = buffer * 4);
    }
 
    /* Fetch the per-stream emit prim in all waves. */
-   for (unsigned stream = 0; stream < 4; stream++) {
-      if (!(info->streams_written & BITFIELD_BIT(stream)))
-            continue;
-
+   u_foreach_bit(stream, info->streams_written) {
       emit_prim_ret[stream] =
          nir_load_shared(b, 1, 32, scratch_base, .base = 16 + stream * 4);
    }
-- 
GitLab

