From 96bf0b05339d954195d2307e6df82578aad46226 Mon Sep 17 00:00:00 2001
From: Georg Lehmann <dadschoorse@gmail.com>
Date: Thu, 8 Sep 2022 11:24:27 +0200
Subject: [PATCH 1/2] aco: Combine v_cvt_u32_f32 with insert to
 v_cvt_pk_u8_f32.

No Foz-DB difference on Navi21.

Foz-DB GFX11:
Totals from 746 (0.55% of 134913) affected shaders:
CodeSize: 8430248 -> 8416128 (-0.17%); split: -0.17%, +0.00%
Instrs: 1617202 -> 1614707 (-0.15%)
Latency: 13943398 -> 13934161 (-0.07%); split: -0.07%, +0.00%
InvThroughput: 2601620 -> 2596624 (-0.19%); split: -0.20%, +0.01%
Copies: 114346 -> 114334 (-0.01%); split: -0.01%, +0.00%
PreVGPRs: 48314 -> 48312 (-0.00%)

Signed-off-by: Georg Lehmann <dadschoorse@gmail.com>
---
 src/amd/compiler/aco_optimizer.cpp | 27 ++++++++++++++++++---------
 1 file changed, 18 insertions(+), 9 deletions(-)

diff --git a/src/amd/compiler/aco_optimizer.cpp b/src/amd/compiler/aco_optimizer.cpp
index 3c78e7eeefb8..3a58e9576fa0 100644
--- a/src/amd/compiler/aco_optimizer.cpp
+++ b/src/amd/compiler/aco_optimizer.cpp
@@ -609,15 +609,15 @@ can_apply_sgprs(opt_ctx& ctx, aco_ptr<Instruction>& instr)
 }
 
 void
-to_VOP3(opt_ctx& ctx, aco_ptr<Instruction>& instr)
+to_VOP3(opt_ctx& ctx, aco_ptr<Instruction>& instr, unsigned add_operands = 0)
 {
    if (instr->isVOP3())
       return;
 
    aco_ptr<Instruction> tmp = std::move(instr);
    Format format = asVOP3(tmp->format);
-   instr.reset(create_instruction<VOP3_instruction>(tmp->opcode, format, tmp->operands.size(),
-                                                    tmp->definitions.size()));
+   instr.reset(create_instruction<VOP3_instruction>(
+      tmp->opcode, format, tmp->operands.size() + add_operands, tmp->definitions.size()));
    std::copy(tmp->operands.cbegin(), tmp->operands.cend(), instr->operands.begin());
    for (unsigned i = 0; i < instr->definitions.size(); i++) {
       instr->definitions[i] = tmp->definitions[i];
@@ -3202,13 +3202,22 @@ apply_insert(opt_ctx& ctx, aco_ptr<Instruction>& instr)
    SubdwordSel sel = parse_insert(def_info.instr);
    assert(sel);
 
-   if (!can_use_SDWA(ctx.program->gfx_level, instr, true))
-      return false;
+   if (instr->opcode == aco_opcode::v_cvt_u32_f32 && !instr->usesModifiers() &&
+       !sel.sign_extend() && sel.size() == 1) {
+      to_VOP3(ctx, instr, 2);
+      instr->format = Format::VOP3;
+      instr->opcode = aco_opcode::v_cvt_pk_u8_f32;
+      instr->operands[1] = Operand::c32(sel.offset());
+      instr->operands[2] = Operand::zero();
+   } else {
+      if (!can_use_SDWA(ctx.program->gfx_level, instr, true))
+         return false;
 
-   to_SDWA(ctx, instr);
-   if (instr->sdwa().dst_sel.size() != 4)
-      return false;
-   static_cast<SDWA_instruction*>(instr.get())->dst_sel = sel;
+      to_SDWA(ctx, instr);
+      if (instr->sdwa().dst_sel.size() != 4)
+         return false;
+      static_cast<SDWA_instruction*>(instr.get())->dst_sel = sel;
+   }
 
    instr->definitions[0].swapTemp(def_info.instr->definitions[0]);
    ctx.info[instr->definitions[0].tempId()].label = 0;
-- 
GitLab


From 10cfa05b7902828ad6e24ed2b9a8f32a371a5330 Mon Sep 17 00:00:00 2001
From: Georg Lehmann <dadschoorse@gmail.com>
Date: Thu, 8 Sep 2022 14:01:47 +0200
Subject: [PATCH 2/2] aco: Combine v_or with v_cvt_pk_u8_f32.

This isn't as good as I would like. :(

Consider this pattern:
v1: %37 = v_cvt_pk_u8_f32 (kill)%28, 0, 0
v1: %39 = v_cvt_pk_u8_f32 (kill)%29, 1, 0
v1: %42 = v_cvt_pk_u8_f32 (kill)%30, 2, 0
v1: %44 = v_cvt_pk_u8_f32 (kill)%31, 3, 0
v1: %40 = v_or_b32 (kill)%39, (kill)%37
v1: %45 = v_or_b32 (kill)%44, (kill)%42
v1: %46 = v_or_b32 (kill)%45, (kill)%40

This patch only manages to reduce it to:
v1: %39 = v_cvt_pk_u8_f32 (kill)%29, 1, 0
v1: %44 = v_cvt_pk_u8_f32 (kill)%31, 3, 0
v1: %40 = v_cvt_pk_u8_f32 (kill)%28, 0, (kill)%39
v1: %45 = v_cvt_pk_u8_f32 (kill)%30, 2, (kill)%44
v1: %46 = v_or_b32 (kill)%45, (kill)%40

Optimal would be:
v1: %39 = v_cvt_pk_u8_f32 (kill)%28, 0, 0
v1: %40 = v_cvt_pk_u8_f32 (kill)%29, 1, (kill)%39
v1: %44 = v_cvt_pk_u8_f32 (kill)%30, 2, (kill)%40
v1: %46 = v_cvt_pk_u8_f32 (kill)%31, 3, (kill)%44

Foz-DB Navi21:
Totals from 149 (0.11% of 134913) affected shaders:
CodeSize: 1530372 -> 1526572 (-0.25%)
Instrs: 289256 -> 288781 (-0.16%)
Latency: 2890897 -> 2890902 (+0.00%); split: -0.00%, +0.00%
InvThroughput: 493173 -> 491943 (-0.25%)
VClause: 3984 -> 3976 (-0.20%)
Copies: 17283 -> 17285 (+0.01%)

Foz-DB GFX11:
Totals from 100 (0.07% of 134913) affected shaders:
CodeSize: 1310384 -> 1306968 (-0.26%)
Instrs: 246398 -> 245970 (-0.17%)
Latency: 2529240 -> 2529254 (+0.00%); split: -0.00%, +0.00%
InvThroughput: 448385 -> 447167 (-0.27%)

Signed-off-by: Georg Lehmann <dadschoorse@gmail.com>
---
 src/amd/compiler/aco_optimizer.cpp | 88 ++++++++++++++++++++++++++++--
 1 file changed, 82 insertions(+), 6 deletions(-)

diff --git a/src/amd/compiler/aco_optimizer.cpp b/src/amd/compiler/aco_optimizer.cpp
index 3a58e9576fa0..3297b8923434 100644
--- a/src/amd/compiler/aco_optimizer.cpp
+++ b/src/amd/compiler/aco_optimizer.cpp
@@ -2612,6 +2612,78 @@ combine_add_or_then_and_lshl(opt_ctx& ctx, aco_ptr<Instruction>& instr)
    return false;
 }
 
+unsigned
+get_nz_mask_sdwa(SubdwordSel sel)
+{
+   if (sel.sign_extend())
+      return 0xf;
+   else
+      return BITFIELD_MASK(sel.size()) << sel.offset();
+}
+
+/* mask that indicates which bytes are not 0. */
+unsigned
+get_nz_mask(opt_ctx& ctx, Operand op)
+{
+   if (op.isConstant()) {
+      unsigned non_zero_mask = 0;
+      uint32_t c = op.constantValue();
+      for (unsigned i = 0; i < 4; i++) {
+         if (c & (0xff << (i * 8)))
+            non_zero_mask |= 1 << i;
+      }
+      return non_zero_mask;
+   }
+
+   if (!op.isTemp() || op.bytes() != 4)
+      return 0xf;
+
+   ssa_info& info = ctx.info[op.tempId()];
+
+   if (info.is_extract()) {
+      return get_nz_mask_sdwa(parse_extract(info.instr));
+   } else if (info.label & instr_usedef_labels) {
+      if (info.instr->opcode == aco_opcode::v_cvt_pk_u8_f32 && info.instr->operands[1].isConstant())
+         return (1 << (info.instr->operands[1].constantValue() & 0x3)) |
+                get_nz_mask(ctx, info.instr->operands[2]);
+      else if (info.instr->isSDWA())
+         return get_nz_mask_sdwa(info.instr->sdwa().dst_sel);
+   }
+
+   return 0xf;
+}
+
+/* v_or_b32( v_cvt_pk_u8_f32(..., 0), v_cvt_pk_u8_f32(..., x)) -> v_cvt_pk_u8_f32(...,
+ * v_cvt_pk_u8_f32(..., x)) */
+bool
+combine_or_cvt_pk_u8_f32(opt_ctx& ctx, aco_ptr<Instruction>& instr)
+{
+   if (instr->isSDWA() || instr->isDPP())
+      return false;
+
+   if (get_nz_mask(ctx, instr->operands[0]) & get_nz_mask(ctx, instr->operands[1]))
+      return false;
+
+   for (unsigned i = 0; i < 2; i++) {
+      Instruction* pk_cvt = follow_operand(ctx, instr->operands[i]);
+
+      if (!pk_cvt || pk_cvt->opcode != aco_opcode::v_cvt_pk_u8_f32 ||
+          !pk_cvt->operands[2].constantEquals(0))
+         continue;
+
+      ctx.uses[pk_cvt->definitions[0].tempId()]--;
+      Operand operands[3] = {pk_cvt->operands[0], pk_cvt->operands[1], instr->operands[!i]};
+      create_vop3_for_op3(ctx, aco_opcode::v_cvt_pk_u8_f32, instr, operands, pk_cvt->vop3().neg,
+                          pk_cvt->vop3().abs, 0, 0, 0);
+      ctx.info[instr->definitions[0].tempId()].label = 0;
+      ctx.info[instr->definitions[0].tempId()].set_usedef(instr.get());
+
+      return true;
+   }
+
+   return false;
+}
+
 bool
 combine_minmax(opt_ctx& ctx, aco_ptr<Instruction>& instr, aco_opcode opposite, aco_opcode minmax3)
 {
@@ -3221,6 +3293,7 @@ apply_insert(opt_ctx& ctx, aco_ptr<Instruction>& instr)
 
    instr->definitions[0].swapTemp(def_info.instr->definitions[0]);
    ctx.info[instr->definitions[0].tempId()].label = 0;
+   ctx.info[instr->definitions[0].tempId()].set_usedef(instr.get());
    ctx.uses[def_info.instr->definitions[0].tempId()]--;
 
    return true;
@@ -4104,12 +4177,15 @@ combine_instruction(opt_ctx& ctx, aco_ptr<Instruction>& instr)
             return;
          }
       }
-   } else if (instr->opcode == aco_opcode::v_or_b32 && ctx.program->gfx_level >= GFX9) {
-      if (combine_three_valu_op(ctx, instr, aco_opcode::s_or_b32, aco_opcode::v_or3_b32, "012",
-                                1 | 2)) {
-      } else if (combine_three_valu_op(ctx, instr, aco_opcode::v_or_b32, aco_opcode::v_or3_b32,
-                                       "012", 1 | 2)) {
-      } else if (combine_add_or_then_and_lshl(ctx, instr)) {
+   } else if (instr->opcode == aco_opcode::v_or_b32) {
+      if (combine_or_cvt_pk_u8_f32(ctx, instr)) {
+      } else if (ctx.program->gfx_level >= GFX9) {
+         if (combine_three_valu_op(ctx, instr, aco_opcode::s_or_b32, aco_opcode::v_or3_b32, "012",
+                                   1 | 2)) {
+         } else if (combine_three_valu_op(ctx, instr, aco_opcode::v_or_b32, aco_opcode::v_or3_b32,
+                                          "012", 1 | 2)) {
+         } else if (combine_add_or_then_and_lshl(ctx, instr)) {
+         }
       }
    } else if (instr->opcode == aco_opcode::v_xor_b32 && ctx.program->gfx_level >= GFX10) {
       if (combine_three_valu_op(ctx, instr, aco_opcode::v_xor_b32, aco_opcode::v_xor3_b32, "012",
-- 
GitLab

