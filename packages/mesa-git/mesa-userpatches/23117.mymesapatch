From 20cd5cb7ee9c5a55fd8a9074c41d5ad179b89dc2 Mon Sep 17 00:00:00 2001
From: Chia-I Wu <olvaffe@gmail.com>
Date: Thu, 18 May 2023 10:58:35 -0700
Subject: [PATCH 1/5] ac/surface: add RADEON_SURF_2D_VIEW_COMPAT

It will be used for VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT.

Part-of: <https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/23117>
---
 src/amd/common/ac_surface.c | 9 +++++++--
 src/amd/common/ac_surface.h | 1 +
 2 files changed, 8 insertions(+), 2 deletions(-)

diff --git a/src/amd/common/ac_surface.c b/src/amd/common/ac_surface.c
index 6f5356c773d67..41436f9612508 100644
--- a/src/amd/common/ac_surface.c
+++ b/src/amd/common/ac_surface.c
@@ -1529,9 +1529,11 @@ static int gfx9_get_preferred_swizzle_mode(ADDR_HANDLE addrlib, const struct rad
          sin.preferredSwSet.sw_R = 1;
    }
 
-   if (info->gfx_level >= GFX10 && in->resourceType == ADDR_RSRC_TEX_3D && in->numSlices > 1) {
+   if (info->gfx_level >= GFX10 && in->resourceType == ADDR_RSRC_TEX_3D &&
+       in->numSlices > 1 && !in->flags.view3dAs2dArray) {
       /* 3D textures should use S swizzle modes for the best performance.
-       * THe only exception is 3D render targets, which prefer 64KB_D_X.
+       * The only exception is 3D render targets or 2D views of 3D, which
+       * prefer 64KB_D_X.
        *
        * 3D texture sampler performance with a very large 3D texture:
        *   ADDR_SW_64KB_R_X = 19 FPS (DCC on), 26 FPS (DCC off)
@@ -2217,6 +2219,9 @@ static int gfx9_compute_surface(struct ac_addrlib *addrlib, const struct radeon_
    AddrSurfInfoIn.flags.opt4space = 1;
    AddrSurfInfoIn.flags.prt = (surf->flags & RADEON_SURF_PRT) != 0;
 
+   if (config->is_3d && (surf->flags & RADEON_SURF_2D_VIEW_COMPAT))
+      AddrSurfInfoIn.flags.view3dAs2dArray = 1;
+
    AddrSurfInfoIn.numMipLevels = config->info.levels;
    AddrSurfInfoIn.numSamples = MAX2(1, config->info.samples);
    AddrSurfInfoIn.numFrags = AddrSurfInfoIn.numSamples;
diff --git a/src/amd/common/ac_surface.h b/src/amd/common/ac_surface.h
index 50764794947ac..46cb1679cd50c 100644
--- a/src/amd/common/ac_surface.h
+++ b/src/amd/common/ac_surface.h
@@ -75,6 +75,7 @@ enum radeon_micro_mode
  * gfx9_compute_surface(). */
 #define RADEON_SURF_NO_TEXTURE            (1ull << 34)
 #define RADEON_SURF_NO_STENCIL_ADJUST     (1ull << 35)
+#define RADEON_SURF_2D_VIEW_COMPAT        (1ull << 36)
 
 struct legacy_surf_level {
    uint32_t offset_256B;   /* divided by 256, the hw can only do 40-bit addresses */
-- 
GitLab


From 999f56f49a2edd7193537a7a16d1056563452cbb Mon Sep 17 00:00:00 2001
From: Chia-I Wu <olvaffe@gmail.com>
Date: Thu, 18 May 2023 16:07:25 -0700
Subject: [PATCH 2/5] radv: simplify image2DViewOf3D support

Translate VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT to
RADEON_SURF_2D_VIEW_COMPAT.  This way we can use
V_008F1C_SQ_RSRC_IMG_2D_ARRAY for 2D views of 3D images, rather than
using V_008F1C_SQ_RSRC_IMG_3D.

Part-of: <https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/23117>
---
 src/amd/vulkan/radv_formats.c |  4 ++++
 src/amd/vulkan/radv_image.c   | 42 ++++++++++++-----------------------
 2 files changed, 18 insertions(+), 28 deletions(-)

diff --git a/src/amd/vulkan/radv_formats.c b/src/amd/vulkan/radv_formats.c
index 1133cd3e432a8..198f6f47bca39 100644
--- a/src/amd/vulkan/radv_formats.c
+++ b/src/amd/vulkan/radv_formats.c
@@ -1471,6 +1471,10 @@ radv_get_image_format_properties(struct radv_physical_device *physical_device,
       if (physical_device->rad_info.gfx_level < GFX8)
          goto unsupported;
 
+      /* view3dAs2dArray and prt have conflicting tiling requirements */
+      if (info->flags & VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT)
+         goto unsupported;
+
       if (vk_format_get_plane_count(format) > 1 || info->type == VK_IMAGE_TYPE_1D ||
           info->tiling != VK_IMAGE_TILING_OPTIMAL || vk_format_is_depth_or_stencil(format))
          goto unsupported;
diff --git a/src/amd/vulkan/radv_image.c b/src/amd/vulkan/radv_image.c
index e46c5bab1c30d..7b712ba1c6c33 100644
--- a/src/amd/vulkan/radv_image.c
+++ b/src/amd/vulkan/radv_image.c
@@ -645,6 +645,9 @@ radv_get_surface_flags(struct radv_device *device, struct radv_image *image, uns
       flags |= RADEON_SURF_PRT | RADEON_SURF_NO_FMASK | RADEON_SURF_NO_HTILE | RADEON_SURF_DISABLE_DCC;
    }
 
+   if (pCreateInfo->flags & VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT)
+      flags |= RADEON_SURF_2D_VIEW_COMPAT;
+
    /* Disable DCC for VRS rate images because the hw can't handle compression. */
    if (pCreateInfo->usage & VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR)
       flags |= RADEON_SURF_VRS_RATE | RADEON_SURF_DISABLE_DCC;
@@ -1003,7 +1006,7 @@ gfx10_make_texture_descriptor(struct radv_device *device, struct radv_image *ima
                               VkImageViewType view_type, VkFormat vk_format, const VkComponentMapping *mapping,
                               unsigned first_level, unsigned last_level, unsigned first_layer, unsigned last_layer,
                               unsigned width, unsigned height, unsigned depth, float min_lod, uint32_t *state,
-                              uint32_t *fmask_state, VkImageCreateFlags img_create_flags,
+                              uint32_t *fmask_state, UNUSED VkImageCreateFlags img_create_flags,
                               const struct ac_surf_nbc_view *nbc_view, const VkImageViewSlicedCreateInfoEXT *sliced_3d)
 {
    const struct util_format_description *desc;
@@ -1027,13 +1030,8 @@ gfx10_make_texture_descriptor(struct radv_device *device, struct radv_image *ima
 
    radv_compose_swizzle(desc, mapping, swizzle);
 
-   if (img_create_flags & VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT) {
-      assert(image->vk.image_type == VK_IMAGE_TYPE_3D);
-      type = V_008F1C_SQ_RSRC_IMG_3D;
-   } else {
-      type = radv_tex_dim(image->vk.image_type, view_type, image->vk.array_layers, image->vk.samples, is_storage_image,
-                          device->physical_device->rad_info.gfx_level == GFX9);
-   }
+   type = radv_tex_dim(image->vk.image_type, view_type, image->vk.array_layers, image->vk.samples, is_storage_image,
+                       device->physical_device->rad_info.gfx_level == GFX9);
 
    if (type == V_008F1C_SQ_RSRC_IMG_1D_ARRAY) {
       height = 1;
@@ -1058,21 +1056,15 @@ gfx10_make_texture_descriptor(struct radv_device *device, struct radv_image *ima
     */
    state[4] =
       S_00A010_DEPTH(type == V_008F1C_SQ_RSRC_IMG_3D ? depth - 1 : last_layer) | S_00A010_BASE_ARRAY(first_layer);
+   /* ARRAY_PITCH is only meaningful for 3D images, 0 means SRV, 1 means UAV.
+    * In SRV mode, BASE_ARRAY is ignored and DEPTH is the last slice of mipmap level 0.
+    * In UAV mode, BASE_ARRAY is the first slice and DEPTH is the last slice of the bound level.
+    */
    state[5] = S_00A014_ARRAY_PITCH(0) | S_00A014_PERF_MOD(4);
    state[6] = 0;
    state[7] = 0;
 
-   if (img_create_flags & VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT) {
-      assert(type == V_008F1C_SQ_RSRC_IMG_3D);
-
-      /* ARRAY_PITCH is only meaningful for 3D images, 0 means SRV, 1 means UAV.
-       * In SRV mode, BASE_ARRAY is ignored and DEPTH is the last slice of mipmap level 0.
-       * In UAV mode, BASE_ARRAY is the first slice and DEPTH is the last slice of the bound level.
-       */
-      state[4] &= C_00A010_DEPTH;
-      state[4] |= S_00A010_DEPTH(!is_storage_image ? depth - 1 : u_minify(depth, first_level) - 1);
-      state[5] |= S_00A014_ARRAY_PITCH(is_storage_image);
-   } else if (sliced_3d) {
+   if (sliced_3d) {
       unsigned total = u_minify(depth, first_level);
 
       assert(type == V_008F1C_SQ_RSRC_IMG_3D && is_storage_image);
@@ -1172,7 +1164,7 @@ si_make_texture_descriptor(struct radv_device *device, struct radv_image *image,
                            VkImageViewType view_type, VkFormat vk_format, const VkComponentMapping *mapping,
                            unsigned first_level, unsigned last_level, unsigned first_layer, unsigned last_layer,
                            unsigned width, unsigned height, unsigned depth, float min_lod, uint32_t *state,
-                           uint32_t *fmask_state, VkImageCreateFlags img_create_flags)
+                           uint32_t *fmask_state, UNUSED VkImageCreateFlags img_create_flags)
 {
    const struct util_format_description *desc;
    enum pipe_swizzle swizzle[4];
@@ -1213,14 +1205,8 @@ si_make_texture_descriptor(struct radv_device *device, struct radv_image *image,
          data_format = V_008F14_IMG_DATA_FORMAT_S8_16;
    }
 
-   if (device->physical_device->rad_info.gfx_level == GFX9 &&
-       img_create_flags & VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT) {
-      assert(image->vk.image_type == VK_IMAGE_TYPE_3D);
-      type = V_008F1C_SQ_RSRC_IMG_3D;
-   } else {
-      type = radv_tex_dim(image->vk.image_type, view_type, image->vk.array_layers, image->vk.samples, is_storage_image,
-                          device->physical_device->rad_info.gfx_level == GFX9);
-   }
+   type = radv_tex_dim(image->vk.image_type, view_type, image->vk.array_layers, image->vk.samples, is_storage_image,
+                       device->physical_device->rad_info.gfx_level == GFX9);
 
    if (type == V_008F1C_SQ_RSRC_IMG_1D_ARRAY) {
       height = 1;
-- 
GitLab


From d9fd16e36274452d292c59a384afa0d8bbddb9ff Mon Sep 17 00:00:00 2001
From: Chia-I Wu <olvaffe@gmail.com>
Date: Thu, 29 Jun 2023 12:24:33 -0700
Subject: [PATCH 3/5] radv: stop passing img_create_flags to
 radv_image_view_init

It is unused.

Part-of: <https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/23117>
---
 src/amd/vulkan/meta/radv_meta_blit.c          |  4 +-
 src/amd/vulkan/meta/radv_meta_blit2d.c        |  2 +-
 src/amd/vulkan/meta/radv_meta_bufimage.c      |  1 -
 src/amd/vulkan/meta/radv_meta_clear.c         |  6 +--
 .../vulkan/meta/radv_meta_copy_vrs_htile.c    |  2 +-
 src/amd/vulkan/meta/radv_meta_decompress.c    |  6 +--
 src/amd/vulkan/meta/radv_meta_etc_decode.c    |  4 +-
 src/amd/vulkan/meta/radv_meta_fast_clear.c    |  6 +--
 src/amd/vulkan/meta/radv_meta_fmask_copy.c    |  4 +-
 src/amd/vulkan/meta/radv_meta_fmask_expand.c  |  2 +-
 src/amd/vulkan/meta/radv_meta_resolve.c       |  4 +-
 src/amd/vulkan/meta/radv_meta_resolve_cs.c    |  8 +--
 src/amd/vulkan/meta/radv_meta_resolve_fs.c    |  6 +--
 src/amd/vulkan/radv_cmd_buffer.c              |  2 +-
 src/amd/vulkan/radv_image.c                   | 50 +++++++++----------
 src/amd/vulkan/radv_private.h                 |  2 +-
 16 files changed, 52 insertions(+), 57 deletions(-)

diff --git a/src/amd/vulkan/meta/radv_meta_blit.c b/src/amd/vulkan/meta/radv_meta_blit.c
index cd7663223ebfb..fe595a870b91a 100644
--- a/src/amd/vulkan/meta/radv_meta_blit.c
+++ b/src/amd/vulkan/meta/radv_meta_blit.c
@@ -526,7 +526,7 @@ blit_image(struct radv_cmd_buffer *cmd_buffer, struct radv_image *src_image, VkI
                                                    .baseArrayLayer = dst_array_slice,
                                                    .layerCount = 1},
                            },
-                           0, NULL);
+                           NULL);
       radv_image_view_init(&src_iview, cmd_buffer->device,
                            &(VkImageViewCreateInfo){
                               .sType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO,
@@ -539,7 +539,7 @@ blit_image(struct radv_cmd_buffer *cmd_buffer, struct radv_image *src_image, VkI
                                                    .baseArrayLayer = src_array_slice,
                                                    .layerCount = 1},
                            },
-                           0, NULL);
+                           NULL);
       meta_emit_blit(cmd_buffer, src_image, &src_iview, src_image_layout, src_offset_0, src_offset_1, dst_image,
                      &dst_iview, dst_image_layout, dst_box, sampler);
 
diff --git a/src/amd/vulkan/meta/radv_meta_blit2d.c b/src/amd/vulkan/meta/radv_meta_blit2d.c
index 209902f68d076..5a5ea582a51ef 100644
--- a/src/amd/vulkan/meta/radv_meta_blit2d.c
+++ b/src/amd/vulkan/meta/radv_meta_blit2d.c
@@ -67,7 +67,7 @@ create_iview(struct radv_cmd_buffer *cmd_buffer, struct radv_meta_blit2d_surf *s
                                                 .baseArrayLayer = surf->layer,
                                                 .layerCount = 1},
                         },
-                        0, &(struct radv_image_view_extra_create_info){.disable_dcc_mrt = surf->disable_compression});
+                        &(struct radv_image_view_extra_create_info){.disable_dcc_mrt = surf->disable_compression});
 }
 
 static void
diff --git a/src/amd/vulkan/meta/radv_meta_bufimage.c b/src/amd/vulkan/meta/radv_meta_bufimage.c
index b5fe7cb17615f..a09dedccaf783 100644
--- a/src/amd/vulkan/meta/radv_meta_bufimage.c
+++ b/src/amd/vulkan/meta/radv_meta_bufimage.c
@@ -1076,7 +1076,6 @@ create_iview(struct radv_cmd_buffer *cmd_buffer, struct radv_meta_blit2d_surf *s
                                                 .baseArrayLayer = surf->layer,
                                                 .layerCount = 1},
                         },
-                        0,
                         &(struct radv_image_view_extra_create_info){
                            .disable_compression = surf->disable_compression,
                         });
diff --git a/src/amd/vulkan/meta/radv_meta_clear.c b/src/amd/vulkan/meta/radv_meta_clear.c
index f6849ddc3fd32..b411f6d7ac9d7 100644
--- a/src/amd/vulkan/meta/radv_meta_clear.c
+++ b/src/amd/vulkan/meta/radv_meta_clear.c
@@ -1290,7 +1290,7 @@ radv_clear_dcc_comp_to_single(struct radv_cmd_buffer *cmd_buffer, struct radv_im
                                                    .baseArrayLayer = range->baseArrayLayer,
                                                    .layerCount = layer_count},
                            },
-                           0, &(struct radv_image_view_extra_create_info){.disable_compression = true});
+                           &(struct radv_image_view_extra_create_info){.disable_compression = true});
 
       radv_meta_push_descriptor_set(cmd_buffer, VK_PIPELINE_BIND_POINT_COMPUTE,
                                     device->meta_state.clear_dcc_comp_to_single_p_layout, 0, 1,
@@ -1919,7 +1919,7 @@ radv_clear_image_layer(struct radv_cmd_buffer *cmd_buffer, struct radv_image *im
                                                 .baseArrayLayer = range->baseArrayLayer,
                                                 .layerCount = layer_count},
                         },
-                        0, NULL);
+                        NULL);
 
    VkClearAttachment clear_att = {
       .aspectMask = range->aspectMask,
@@ -1998,7 +1998,7 @@ radv_fast_clear_range(struct radv_cmd_buffer *cmd_buffer, struct radv_image *ima
                                  .layerCount = vk_image_subresource_layer_count(&image->vk, range),
                               },
                         },
-                        0, NULL);
+                        NULL);
 
    VkClearRect clear_rect = {
       .rect =
diff --git a/src/amd/vulkan/meta/radv_meta_copy_vrs_htile.c b/src/amd/vulkan/meta/radv_meta_copy_vrs_htile.c
index 6af3920dff226..61cacfc66900a 100644
--- a/src/amd/vulkan/meta/radv_meta_copy_vrs_htile.c
+++ b/src/amd/vulkan/meta/radv_meta_copy_vrs_htile.c
@@ -228,7 +228,7 @@ radv_copy_vrs_htile(struct radv_cmd_buffer *cmd_buffer, struct radv_image *vrs_i
                                                 .baseArrayLayer = 0,
                                                 .layerCount = 1},
                         },
-                        0, NULL);
+                        NULL);
 
    radv_meta_push_descriptor_set(
       cmd_buffer, VK_PIPELINE_BIND_POINT_COMPUTE, state->copy_vrs_htile_p_layout, 0, /* set */
diff --git a/src/amd/vulkan/meta/radv_meta_decompress.c b/src/amd/vulkan/meta/radv_meta_decompress.c
index df9e8d820a5bf..31b12b2dace84 100644
--- a/src/amd/vulkan/meta/radv_meta_decompress.c
+++ b/src/amd/vulkan/meta/radv_meta_decompress.c
@@ -408,7 +408,7 @@ radv_process_depth_image_layer(struct radv_cmd_buffer *cmd_buffer, struct radv_i
                                  .layerCount = 1,
                               },
                         },
-                        0, NULL);
+                        NULL);
 
    const VkRenderingAttachmentInfo depth_att = {
       .sType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO,
@@ -541,7 +541,7 @@ radv_expand_depth_stencil_compute(struct radv_cmd_buffer *cmd_buffer, struct rad
                                                       .baseArrayLayer = subresourceRange->baseArrayLayer + s,
                                                       .layerCount = 1},
                               },
-                              0, &(struct radv_image_view_extra_create_info){.enable_compression = true});
+                              &(struct radv_image_view_extra_create_info){.enable_compression = true});
          radv_image_view_init(&store_iview, cmd_buffer->device,
                               &(VkImageViewCreateInfo){
                                  .sType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO,
@@ -554,7 +554,7 @@ radv_expand_depth_stencil_compute(struct radv_cmd_buffer *cmd_buffer, struct rad
                                                       .baseArrayLayer = subresourceRange->baseArrayLayer + s,
                                                       .layerCount = 1},
                               },
-                              0, &(struct radv_image_view_extra_create_info){.disable_compression = true});
+                              &(struct radv_image_view_extra_create_info){.disable_compression = true});
 
          radv_meta_push_descriptor_set(
             cmd_buffer, VK_PIPELINE_BIND_POINT_COMPUTE, device->meta_state.expand_depth_stencil_compute_p_layout,
diff --git a/src/amd/vulkan/meta/radv_meta_etc_decode.c b/src/amd/vulkan/meta/radv_meta_etc_decode.c
index c4d1ec4d7dfb4..89b26545f1032 100644
--- a/src/amd/vulkan/meta/radv_meta_etc_decode.c
+++ b/src/amd/vulkan/meta/radv_meta_etc_decode.c
@@ -655,7 +655,7 @@ radv_meta_decode_etc(struct radv_cmd_buffer *cmd_buffer, struct radv_image *imag
                                  .layerCount = subresource->baseArrayLayer + subresource->layerCount,
                               },
                         },
-                        0, NULL);
+                        NULL);
 
    VkFormat store_format;
    switch (image->vk.format) {
@@ -690,7 +690,7 @@ radv_meta_decode_etc(struct radv_cmd_buffer *cmd_buffer, struct radv_image *imag
                                  .layerCount = subresource->baseArrayLayer + subresource->layerCount,
                               },
                         },
-                        0, NULL);
+                        NULL);
 
    decode_etc(cmd_buffer, &src_iview, &dst_iview, &(VkOffset3D){offset.x, offset.y, base_slice},
               &(VkExtent3D){extent.width, extent.height, slice_count});
diff --git a/src/amd/vulkan/meta/radv_meta_fast_clear.c b/src/amd/vulkan/meta/radv_meta_fast_clear.c
index 686a375fef6bd..28aa14b5bbc59 100644
--- a/src/amd/vulkan/meta/radv_meta_fast_clear.c
+++ b/src/amd/vulkan/meta/radv_meta_fast_clear.c
@@ -482,7 +482,7 @@ radv_process_color_image_layer(struct radv_cmd_buffer *cmd_buffer, struct radv_i
                                  .layerCount = 1,
                               },
                         },
-                        0, NULL);
+                        NULL);
 
    const VkRenderingAttachmentInfo color_att = {
       .sType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO,
@@ -728,7 +728,7 @@ radv_decompress_dcc_compute(struct radv_cmd_buffer *cmd_buffer, struct radv_imag
                                                       .baseArrayLayer = subresourceRange->baseArrayLayer + s,
                                                       .layerCount = 1},
                               },
-                              0, &(struct radv_image_view_extra_create_info){.enable_compression = true});
+                              &(struct radv_image_view_extra_create_info){.enable_compression = true});
          radv_image_view_init(&store_iview, cmd_buffer->device,
                               &(VkImageViewCreateInfo){
                                  .sType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO,
@@ -741,7 +741,7 @@ radv_decompress_dcc_compute(struct radv_cmd_buffer *cmd_buffer, struct radv_imag
                                                       .baseArrayLayer = subresourceRange->baseArrayLayer + s,
                                                       .layerCount = 1},
                               },
-                              0, &(struct radv_image_view_extra_create_info){.disable_compression = true});
+                              &(struct radv_image_view_extra_create_info){.disable_compression = true});
 
          radv_meta_push_descriptor_set(
             cmd_buffer, VK_PIPELINE_BIND_POINT_COMPUTE,
diff --git a/src/amd/vulkan/meta/radv_meta_fmask_copy.c b/src/amd/vulkan/meta/radv_meta_fmask_copy.c
index 0bae313345d54..910c328fe0761 100644
--- a/src/amd/vulkan/meta/radv_meta_fmask_copy.c
+++ b/src/amd/vulkan/meta/radv_meta_fmask_copy.c
@@ -301,7 +301,7 @@ radv_fmask_copy(struct radv_cmd_buffer *cmd_buffer, struct radv_meta_blit2d_surf
                                  .layerCount = 1,
                               },
                         },
-                        0, NULL);
+                        NULL);
 
    radv_image_view_init(&dst_iview, device,
                         &(VkImageViewCreateInfo){
@@ -318,7 +318,7 @@ radv_fmask_copy(struct radv_cmd_buffer *cmd_buffer, struct radv_meta_blit2d_surf
                                  .layerCount = 1,
                               },
                         },
-                        0, NULL);
+                        NULL);
 
    radv_meta_push_descriptor_set(cmd_buffer, VK_PIPELINE_BIND_POINT_COMPUTE,
                                  cmd_buffer->device->meta_state.fmask_copy.p_layout, 0, /* set */
diff --git a/src/amd/vulkan/meta/radv_meta_fmask_expand.c b/src/amd/vulkan/meta/radv_meta_fmask_expand.c
index a316a4ea493e8..5d3186777f5e0 100644
--- a/src/amd/vulkan/meta/radv_meta_fmask_expand.c
+++ b/src/amd/vulkan/meta/radv_meta_fmask_expand.c
@@ -109,7 +109,7 @@ radv_expand_fmask_image_inplace(struct radv_cmd_buffer *cmd_buffer, struct radv_
                                  .layerCount = layer_count,
                               },
                         },
-                        0, NULL);
+                        NULL);
 
    radv_meta_push_descriptor_set(cmd_buffer, VK_PIPELINE_BIND_POINT_COMPUTE,
                                  cmd_buffer->device->meta_state.fmask_expand.p_layout, 0, /* set */
diff --git a/src/amd/vulkan/meta/radv_meta_resolve.c b/src/amd/vulkan/meta/radv_meta_resolve.c
index 8d29538f9079b..a08e2e056e4c8 100644
--- a/src/amd/vulkan/meta/radv_meta_resolve.c
+++ b/src/amd/vulkan/meta/radv_meta_resolve.c
@@ -425,7 +425,7 @@ radv_meta_resolve_hardware_image(struct radv_cmd_buffer *cmd_buffer, struct radv
                                     .layerCount = 1,
                                  },
                            },
-                           0, NULL);
+                           NULL);
 
       struct radv_image_view dst_iview;
       radv_image_view_init(&dst_iview, cmd_buffer->device,
@@ -443,7 +443,7 @@ radv_meta_resolve_hardware_image(struct radv_cmd_buffer *cmd_buffer, struct radv
                                     .layerCount = 1,
                                  },
                            },
-                           0, NULL);
+                           NULL);
 
       const VkRenderingAttachmentInfo color_atts[2] = {
          {
diff --git a/src/amd/vulkan/meta/radv_meta_resolve_cs.c b/src/amd/vulkan/meta/radv_meta_resolve_cs.c
index c7315ec387ae0..2d0b902ce74f1 100644
--- a/src/amd/vulkan/meta/radv_meta_resolve_cs.c
+++ b/src/amd/vulkan/meta/radv_meta_resolve_cs.c
@@ -636,7 +636,7 @@ radv_meta_resolve_compute_image(struct radv_cmd_buffer *cmd_buffer, struct radv_
                                     .layerCount = 1,
                                  },
                            },
-                           0, NULL);
+                           NULL);
 
       struct radv_image_view dst_iview;
       radv_image_view_init(&dst_iview, cmd_buffer->device,
@@ -654,7 +654,7 @@ radv_meta_resolve_compute_image(struct radv_cmd_buffer *cmd_buffer, struct radv_
                                     .layerCount = 1,
                                  },
                            },
-                           0, NULL);
+                           NULL);
 
       emit_resolve(cmd_buffer, &src_iview, &dst_iview, &(VkOffset2D){srcOffset.x, srcOffset.y},
                    &(VkOffset2D){dstOffset.x, dstOffset.y}, &(VkExtent2D){extent.width, extent.height});
@@ -750,7 +750,7 @@ radv_depth_stencil_resolve_rendering_cs(struct radv_cmd_buffer *cmd_buffer, VkIm
                                  .layerCount = layer_count,
                               },
                         },
-                        0, NULL);
+                        NULL);
 
    struct radv_image_view tdst_iview;
    radv_image_view_init(&tdst_iview, cmd_buffer->device,
@@ -768,7 +768,7 @@ radv_depth_stencil_resolve_rendering_cs(struct radv_cmd_buffer *cmd_buffer, VkIm
                                  .layerCount = layer_count,
                               },
                         },
-                        0, NULL);
+                        NULL);
 
    emit_depth_stencil_resolve(cmd_buffer, &tsrc_iview, &tdst_iview, &resolve_area.offset,
                               &(VkExtent3D){resolve_area.extent.width, resolve_area.extent.height, layer_count},
diff --git a/src/amd/vulkan/meta/radv_meta_resolve_fs.c b/src/amd/vulkan/meta/radv_meta_resolve_fs.c
index 6ffc2843625bb..33777b5ef1341 100644
--- a/src/amd/vulkan/meta/radv_meta_resolve_fs.c
+++ b/src/amd/vulkan/meta/radv_meta_resolve_fs.c
@@ -769,7 +769,7 @@ radv_meta_resolve_fragment_image(struct radv_cmd_buffer *cmd_buffer, struct radv
                                     .layerCount = 1,
                                  },
                            },
-                           0, NULL);
+                           NULL);
 
       struct radv_image_view dst_iview;
       radv_image_view_init(&dst_iview, cmd_buffer->device,
@@ -787,7 +787,7 @@ radv_meta_resolve_fragment_image(struct radv_cmd_buffer *cmd_buffer, struct radv
                                     .layerCount = 1,
                                  },
                            },
-                           0, NULL);
+                           NULL);
 
       const VkRenderingAttachmentInfo color_att = {
          .sType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO,
@@ -948,7 +948,7 @@ radv_depth_stencil_resolve_rendering_fs(struct radv_cmd_buffer *cmd_buffer, VkIm
                                  .layerCount = 1,
                               },
                         },
-                        0, NULL);
+                        NULL);
 
    emit_depth_stencil_resolve(cmd_buffer, &tsrc_iview, dst_iview, &resolve_area.offset, &resolve_area.extent, aspects,
                               resolve_mode);
diff --git a/src/amd/vulkan/radv_cmd_buffer.c b/src/amd/vulkan/radv_cmd_buffer.c
index d146c0508dd13..8bfd5a6b3bd19 100644
--- a/src/amd/vulkan/radv_cmd_buffer.c
+++ b/src/amd/vulkan/radv_cmd_buffer.c
@@ -3478,7 +3478,7 @@ radv_emit_framebuffer_state(struct radv_cmd_buffer *cmd_buffer)
                                     .layerCount = 1,
                                  },
                            },
-                           0, NULL);
+                           NULL);
 
       radv_initialise_vrs_surface(image, htile_buffer, &ds);
 
diff --git a/src/amd/vulkan/radv_image.c b/src/amd/vulkan/radv_image.c
index 7b712ba1c6c33..c4d03d90a5d1a 100644
--- a/src/amd/vulkan/radv_image.c
+++ b/src/amd/vulkan/radv_image.c
@@ -1006,8 +1006,8 @@ gfx10_make_texture_descriptor(struct radv_device *device, struct radv_image *ima
                               VkImageViewType view_type, VkFormat vk_format, const VkComponentMapping *mapping,
                               unsigned first_level, unsigned last_level, unsigned first_layer, unsigned last_layer,
                               unsigned width, unsigned height, unsigned depth, float min_lod, uint32_t *state,
-                              uint32_t *fmask_state, UNUSED VkImageCreateFlags img_create_flags,
-                              const struct ac_surf_nbc_view *nbc_view, const VkImageViewSlicedCreateInfoEXT *sliced_3d)
+                              uint32_t *fmask_state, const struct ac_surf_nbc_view *nbc_view,
+                              const VkImageViewSlicedCreateInfoEXT *sliced_3d)
 {
    const struct util_format_description *desc;
    enum pipe_swizzle swizzle[4];
@@ -1164,7 +1164,7 @@ si_make_texture_descriptor(struct radv_device *device, struct radv_image *image,
                            VkImageViewType view_type, VkFormat vk_format, const VkComponentMapping *mapping,
                            unsigned first_level, unsigned last_level, unsigned first_layer, unsigned last_layer,
                            unsigned width, unsigned height, unsigned depth, float min_lod, uint32_t *state,
-                           uint32_t *fmask_state, UNUSED VkImageCreateFlags img_create_flags)
+                           uint32_t *fmask_state)
 {
    const struct util_format_description *desc;
    enum pipe_swizzle swizzle[4];
@@ -1359,17 +1359,17 @@ radv_make_texture_descriptor(struct radv_device *device, struct radv_image *imag
                              VkImageViewType view_type, VkFormat vk_format, const VkComponentMapping *mapping,
                              unsigned first_level, unsigned last_level, unsigned first_layer, unsigned last_layer,
                              unsigned width, unsigned height, unsigned depth, float min_lod, uint32_t *state,
-                             uint32_t *fmask_state, VkImageCreateFlags img_create_flags,
-                             const struct ac_surf_nbc_view *nbc_view, const VkImageViewSlicedCreateInfoEXT *sliced_3d)
+                             uint32_t *fmask_state, const struct ac_surf_nbc_view *nbc_view,
+                             const VkImageViewSlicedCreateInfoEXT *sliced_3d)
 {
    if (device->physical_device->rad_info.gfx_level >= GFX10) {
       gfx10_make_texture_descriptor(device, image, is_storage_image, view_type, vk_format, mapping, first_level,
                                     last_level, first_layer, last_layer, width, height, depth, min_lod, state,
-                                    fmask_state, img_create_flags, nbc_view, sliced_3d);
+                                    fmask_state, nbc_view, sliced_3d);
    } else {
       si_make_texture_descriptor(device, image, is_storage_image, view_type, vk_format, mapping, first_level,
-                                 last_level, first_layer, last_layer, width, height, depth, min_lod, state, fmask_state,
-                                 img_create_flags);
+                                 last_level, first_layer, last_layer, width, height, depth, min_lod, state,
+                                 fmask_state);
    }
 }
 
@@ -1384,7 +1384,7 @@ radv_query_opaque_metadata(struct radv_device *device, struct radv_image *image,
    radv_make_texture_descriptor(device, image, false, (VkImageViewType)image->vk.image_type, image->vk.format,
                                 &fixedmapping, 0, image->vk.mip_levels - 1, 0, image->vk.array_layers - 1,
                                 image->vk.extent.width, image->vk.extent.height, image->vk.extent.depth, 0.0f, desc,
-                                NULL, 0, NULL, NULL);
+                                NULL, NULL, NULL);
 
    si_set_mutable_tex_desc_fields(device, image, &image->planes[0].surface.u.legacy.level[0], 0, 0, 0,
                                   image->planes[0].surface.blk_w, false, false, false, false, desc, NULL);
@@ -1988,8 +1988,7 @@ static void
 radv_image_view_make_descriptor(struct radv_image_view *iview, struct radv_device *device, VkFormat vk_format,
                                 const VkComponentMapping *components, float min_lod, bool is_storage_image,
                                 bool disable_compression, bool enable_compression, unsigned plane_id,
-                                unsigned descriptor_plane_id, VkImageCreateFlags img_create_flags,
-                                const struct ac_surf_nbc_view *nbc_view,
+                                unsigned descriptor_plane_id, const struct ac_surf_nbc_view *nbc_view,
                                 const VkImageViewSlicedCreateInfoEXT *sliced_3d)
 {
    struct radv_image *image = iview->image;
@@ -2022,14 +2021,13 @@ radv_image_view_make_descriptor(struct radv_image_view *iview, struct radv_devic
       }
    }
 
-   radv_make_texture_descriptor(device, image, is_storage_image, iview->vk.view_type, vk_format, components, hw_level,
-                                hw_level + iview->vk.level_count - 1, first_layer,
-                                iview->vk.base_array_layer + iview->vk.layer_count - 1,
-                                vk_format_get_plane_width(image->vk.format, plane_id, iview->extent.width),
-                                vk_format_get_plane_height(image->vk.format, plane_id, iview->extent.height),
-                                iview->extent.depth, min_lod, descriptor->plane_descriptors[descriptor_plane_id],
-                                descriptor_plane_id || is_storage_image ? NULL : descriptor->fmask_descriptor,
-                                img_create_flags, nbc_view, sliced_3d);
+   radv_make_texture_descriptor(
+      device, image, is_storage_image, iview->vk.view_type, vk_format, components, hw_level,
+      hw_level + iview->vk.level_count - 1, first_layer, iview->vk.base_array_layer + iview->vk.layer_count - 1,
+      vk_format_get_plane_width(image->vk.format, plane_id, iview->extent.width),
+      vk_format_get_plane_height(image->vk.format, plane_id, iview->extent.height), iview->extent.depth, min_lod,
+      descriptor->plane_descriptors[descriptor_plane_id],
+      descriptor_plane_id || is_storage_image ? NULL : descriptor->fmask_descriptor, nbc_view, sliced_3d);
 
    const struct legacy_surf_level *base_level_info = NULL;
    if (device->physical_device->rad_info.gfx_level <= GFX9) {
@@ -2115,7 +2113,7 @@ radv_image_view_can_fast_clear(const struct radv_device *device, const struct ra
 
 void
 radv_image_view_init(struct radv_image_view *iview, struct radv_device *device,
-                     const VkImageViewCreateInfo *pCreateInfo, VkImageCreateFlags img_create_flags,
+                     const VkImageViewCreateInfo *pCreateInfo,
                      const struct radv_image_view_extra_create_info *extra_create_info)
 {
    RADV_FROM_HANDLE(radv_image, image, pCreateInfo->image);
@@ -2274,11 +2272,11 @@ radv_image_view_init(struct radv_image_view *iview, struct radv_device *device,
    for (unsigned i = 0; i < plane_count; ++i) {
       VkFormat format = vk_format_get_plane_format(iview->vk.view_format, i);
       radv_image_view_make_descriptor(iview, device, format, &pCreateInfo->components, min_lod, false,
-                                      disable_compression, enable_compression, iview->plane_id + i, i, img_create_flags,
-                                      &iview->nbc_view, NULL);
+                                      disable_compression, enable_compression, iview->plane_id + i, i, &iview->nbc_view,
+                                      NULL);
       radv_image_view_make_descriptor(iview, device, format, &pCreateInfo->components, min_lod, true,
-                                      disable_compression, enable_compression, iview->plane_id + i, i, img_create_flags,
-                                      &iview->nbc_view, sliced_3d);
+                                      disable_compression, enable_compression, iview->plane_id + i, i, &iview->nbc_view,
+                                      sliced_3d);
    }
 
    if (iview->vk.aspects & (VK_IMAGE_ASPECT_DEPTH_BIT | VK_IMAGE_ASPECT_STENCIL_BIT)) {
@@ -2572,7 +2570,6 @@ VKAPI_ATTR VkResult VKAPI_CALL
 radv_CreateImageView(VkDevice _device, const VkImageViewCreateInfo *pCreateInfo,
                      const VkAllocationCallbacks *pAllocator, VkImageView *pView)
 {
-   RADV_FROM_HANDLE(radv_image, image, pCreateInfo->image);
    RADV_FROM_HANDLE(radv_device, device, _device);
    struct radv_image_view *view;
 
@@ -2580,8 +2577,7 @@ radv_CreateImageView(VkDevice _device, const VkImageViewCreateInfo *pCreateInfo,
    if (view == NULL)
       return vk_error(device, VK_ERROR_OUT_OF_HOST_MEMORY);
 
-   radv_image_view_init(view, device, pCreateInfo, image->vk.create_flags,
-                        &(struct radv_image_view_extra_create_info){.from_client = true});
+   radv_image_view_init(view, device, pCreateInfo, &(struct radv_image_view_extra_create_info){.from_client = true});
 
    *pView = radv_image_view_to_handle(view);
 
diff --git a/src/amd/vulkan/radv_private.h b/src/amd/vulkan/radv_private.h
index a20629dde7382..e65148885da2e 100644
--- a/src/amd/vulkan/radv_private.h
+++ b/src/amd/vulkan/radv_private.h
@@ -2861,7 +2861,7 @@ struct radv_image_view_extra_create_info {
 };
 
 void radv_image_view_init(struct radv_image_view *view, struct radv_device *device,
-                          const VkImageViewCreateInfo *pCreateInfo, VkImageCreateFlags img_create_flags,
+                          const VkImageViewCreateInfo *pCreateInfo,
                           const struct radv_image_view_extra_create_info *extra_create_info);
 void radv_image_view_finish(struct radv_image_view *iview);
 
-- 
GitLab


From 24ed2883c707eed67f1c683476c28c2941f5f4af Mon Sep 17 00:00:00 2001
From: Chia-I Wu <olvaffe@gmail.com>
Date: Thu, 18 May 2023 16:28:53 -0700
Subject: [PATCH 4/5] radv: advertise sampler2DViewOf3D

GFX8 always supports sampler2DViewOf3D.  GFX9+ seems to work fine after
the switch to set RADEON_SURF_2D_VIEW_COMPAT.

Tested with dEQP-VK.pipeline.monolithic.image_2d_view_3d_image.* on
GFX8/GFX9/GFX10 APUs.

Part-of: <https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/23117>
---
 src/amd/vulkan/radv_physical_device.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/amd/vulkan/radv_physical_device.c b/src/amd/vulkan/radv_physical_device.c
index 384191dee2fe8..41350f7da8244 100644
--- a/src/amd/vulkan/radv_physical_device.c
+++ b/src/amd/vulkan/radv_physical_device.c
@@ -919,7 +919,7 @@ radv_physical_device_get_features(const struct radv_physical_device *pdevice, st
 
       /* VK_EXT_image_2d_view_of_3d  */
       .image2DViewOf3D = true,
-      .sampler2DViewOf3D = false,
+      .sampler2DViewOf3D = true,
 
       /* VK_INTEL_shader_integer_functions2 */
       .shaderIntegerFunctions2 = true,
-- 
GitLab


From 7b57223005c56d7798898872af76837c718916f4 Mon Sep 17 00:00:00 2001
From: Chia-I Wu <olvaffe@gmail.com>
Date: Fri, 30 Jun 2023 12:53:11 -0700
Subject: [PATCH 5/5] zink: do not set 2D_VIEW_COMPATIBLE_BIT for 3d sparse
 resources

radv does not support VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT and
VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT at the same time.
---
 src/gallium/drivers/zink/zink_resource.c | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/src/gallium/drivers/zink/zink_resource.c b/src/gallium/drivers/zink/zink_resource.c
index c1774b90f1d2a..b9de212f02dab 100644
--- a/src/gallium/drivers/zink/zink_resource.c
+++ b/src/gallium/drivers/zink/zink_resource.c
@@ -614,7 +614,8 @@ create_ici(struct zink_screen *screen, VkImageCreateInfo *ici, const struct pipe
    case PIPE_TEXTURE_3D:
       ici->imageType = VK_IMAGE_TYPE_3D;
       ici->flags |= VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT;
-      if (screen->info.have_EXT_image_2d_view_of_3d)
+      if (screen->info.have_EXT_image_2d_view_of_3d &&
+          !(templ->flags & PIPE_RESOURCE_FLAG_SPARSE))
          ici->flags |= VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT;
       break;
 
-- 
GitLab

