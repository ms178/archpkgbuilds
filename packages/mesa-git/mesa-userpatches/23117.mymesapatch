From acf7e5a84d3cf37fc8fcffe46e5e4ea38e052f6a Mon Sep 17 00:00:00 2001
From: Chia-I Wu <olvaffe@gmail.com>
Date: Thu, 18 May 2023 10:58:35 -0700
Subject: [PATCH 1/3] ac/surface: add RADEON_SURF_2D_VIEW_COMPAT

It will be used for VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT.
---
 src/amd/common/ac_surface.c | 9 +++++++--
 src/amd/common/ac_surface.h | 1 +
 2 files changed, 8 insertions(+), 2 deletions(-)

diff --git a/src/amd/common/ac_surface.c b/src/amd/common/ac_surface.c
index bcca610201b0..46f7ec2806c2 100644
--- a/src/amd/common/ac_surface.c
+++ b/src/amd/common/ac_surface.c
@@ -1486,9 +1486,11 @@ static int gfx9_get_preferred_swizzle_mode(ADDR_HANDLE addrlib, const struct rad
          sin.preferredSwSet.sw_R = 1;
    }
 
-   if (info->gfx_level >= GFX10 && in->resourceType == ADDR_RSRC_TEX_3D && in->numSlices > 1) {
+   if (info->gfx_level >= GFX10 && in->resourceType == ADDR_RSRC_TEX_3D &&
+       in->numSlices > 1 && !in->flags.view3dAs2dArray) {
       /* 3D textures should use S swizzle modes for the best performance.
-       * THe only exception is 3D render targets, which prefer 64KB_D_X.
+       * The only exception is 3D render targets or 2D views of 3D, which
+       * prefer 64KB_D_X.
        *
        * 3D texture sampler performance with a very large 3D texture:
        *   ADDR_SW_64KB_R_X = 19 FPS (DCC on), 26 FPS (DCC off)
@@ -2211,6 +2213,9 @@ static int gfx9_compute_surface(struct ac_addrlib *addrlib, const struct radeon_
    AddrSurfInfoIn.flags.opt4space = 1;
    AddrSurfInfoIn.flags.prt = (surf->flags & RADEON_SURF_PRT) != 0;
 
+   if (config->is_3d && (surf->flags & RADEON_SURF_2D_VIEW_COMPAT))
+      AddrSurfInfoIn.flags.view3dAs2dArray = 1;
+
    AddrSurfInfoIn.numMipLevels = config->info.levels;
    AddrSurfInfoIn.numSamples = MAX2(1, config->info.samples);
    AddrSurfInfoIn.numFrags = AddrSurfInfoIn.numSamples;
diff --git a/src/amd/common/ac_surface.h b/src/amd/common/ac_surface.h
index f96283a9c561..e2cdaa9a4a18 100644
--- a/src/amd/common/ac_surface.h
+++ b/src/amd/common/ac_surface.h
@@ -94,6 +94,7 @@ enum radeon_micro_mode
  * gfx9_compute_surface(). */
 #define RADEON_SURF_NO_TEXTURE            (1ull << 34)
 #define RADEON_SURF_NO_STENCIL_ADJUST     (1ull << 35)
+#define RADEON_SURF_2D_VIEW_COMPAT        (1ull << 36)
 
 struct legacy_surf_level {
    uint32_t offset_256B;   /* divided by 256, the hw can only do 40-bit addresses */
-- 
GitLab


From 82a151bd15ea6af305b2eea2f8ff1327fdff0e20 Mon Sep 17 00:00:00 2001
From: Chia-I Wu <olvaffe@gmail.com>
Date: Thu, 18 May 2023 16:07:25 -0700
Subject: [PATCH 2/3] radv: simplify image2DViewOf3D support

Translate VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT to
RADEON_SURF_2D_VIEW_COMPAT.  This way we can use
V_008F1C_SQ_RSRC_IMG_2D_ARRAY for 2D views of 3D images, rather than
using V_008F1C_SQ_RSRC_IMG_3D.
---
 src/amd/vulkan/radv_image.c | 34 +++++++++++-----------------------
 1 file changed, 11 insertions(+), 23 deletions(-)

diff --git a/src/amd/vulkan/radv_image.c b/src/amd/vulkan/radv_image.c
index bfe215dacfc6..799c691e29b9 100644
--- a/src/amd/vulkan/radv_image.c
+++ b/src/amd/vulkan/radv_image.c
@@ -673,6 +673,9 @@ radv_get_surface_flags(struct radv_device *device, struct radv_image *image, uns
          RADEON_SURF_PRT | RADEON_SURF_NO_FMASK | RADEON_SURF_NO_HTILE | RADEON_SURF_DISABLE_DCC;
    }
 
+   if (pCreateInfo->flags & VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT)
+      flags |= RADEON_SURF_2D_VIEW_COMPAT;
+
    /* Disable DCC for VRS rate images because the hw can't handle compression. */
    if (pCreateInfo->usage & VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR)
       flags |= RADEON_SURF_VRS_RATE | RADEON_SURF_DISABLE_DCC;
@@ -1019,7 +1022,7 @@ gfx10_make_texture_descriptor(struct radv_device *device, struct radv_image *ima
                               unsigned last_level, unsigned first_layer, unsigned last_layer,
                               unsigned width, unsigned height, unsigned depth, float min_lod,
                               uint32_t *state, uint32_t *fmask_state,
-                              VkImageCreateFlags img_create_flags,
+                              UNUSED VkImageCreateFlags img_create_flags,
                               const struct ac_surf_nbc_view *nbc_view,
                               const VkImageViewSlicedCreateInfoEXT *sliced_3d)
 {
@@ -1045,13 +1048,8 @@ gfx10_make_texture_descriptor(struct radv_device *device, struct radv_image *ima
 
    radv_compose_swizzle(desc, mapping, swizzle);
 
-   if (img_create_flags & VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT) {
-      assert(image->vk.image_type == VK_IMAGE_TYPE_3D);
-      type = V_008F1C_SQ_RSRC_IMG_3D;
-   } else {
-      type = radv_tex_dim(image->vk.image_type, view_type, image->vk.array_layers, image->vk.samples,
-                          is_storage_image, device->physical_device->rad_info.gfx_level == GFX9);
-   }
+   type = radv_tex_dim(image->vk.image_type, view_type, image->vk.array_layers, image->vk.samples,
+                       is_storage_image, device->physical_device->rad_info.gfx_level == GFX9);
 
    if (type == V_008F1C_SQ_RSRC_IMG_1D_ARRAY) {
       height = 1;
@@ -1085,16 +1083,12 @@ gfx10_make_texture_descriptor(struct radv_device *device, struct radv_image *ima
    state[6] = 0;
    state[7] = 0;
 
-   if (img_create_flags & VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT) {
-      assert(type == V_008F1C_SQ_RSRC_IMG_3D);
-
+   if (image->vk.image_type == VK_IMAGE_TYPE_3D && view_type != VK_IMAGE_VIEW_TYPE_3D) {
       /* ARRAY_PITCH is only meaningful for 3D images, 0 means SRV, 1 means UAV.
        * In SRV mode, BASE_ARRAY is ignored and DEPTH is the last slice of mipmap level 0.
        * In UAV mode, BASE_ARRAY is the first slice and DEPTH is the last slice of the bound level.
        */
-      state[4] &= C_00A010_DEPTH;
-      state[4] |= S_00A010_DEPTH(!is_storage_image ? depth - 1 : u_minify(depth, first_level) - 1);
-      state[5] |= S_00A014_ARRAY_PITCH(is_storage_image);
+      state[5] |= S_00A014_ARRAY_PITCH(1);
    } else if (sliced_3d) {
       unsigned total = u_minify(depth, first_level);
 
@@ -1199,7 +1193,7 @@ si_make_texture_descriptor(struct radv_device *device, struct radv_image *image,
                            unsigned last_level, unsigned first_layer, unsigned last_layer,
                            unsigned width, unsigned height, unsigned depth, float min_lod,
                            uint32_t *state, uint32_t *fmask_state,
-                           VkImageCreateFlags img_create_flags)
+                           UNUSED VkImageCreateFlags img_create_flags)
 {
    const struct util_format_description *desc;
    enum pipe_swizzle swizzle[4];
@@ -1242,14 +1236,8 @@ si_make_texture_descriptor(struct radv_device *device, struct radv_image *image,
          data_format = V_008F14_IMG_DATA_FORMAT_S8_16;
    }
 
-   if (device->physical_device->rad_info.gfx_level == GFX9 &&
-       img_create_flags & VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT) {
-      assert(image->vk.image_type == VK_IMAGE_TYPE_3D);
-      type = V_008F1C_SQ_RSRC_IMG_3D;
-   } else {
-      type = radv_tex_dim(image->vk.image_type, view_type, image->vk.array_layers, image->vk.samples,
-                          is_storage_image, device->physical_device->rad_info.gfx_level == GFX9);
-   }
+   type = radv_tex_dim(image->vk.image_type, view_type, image->vk.array_layers, image->vk.samples,
+                       is_storage_image, device->physical_device->rad_info.gfx_level == GFX9);
 
    if (type == V_008F1C_SQ_RSRC_IMG_1D_ARRAY) {
       height = 1;
-- 
GitLab


From 49d264a9e1be741e4fa2ced34126a82f2e7d9eb2 Mon Sep 17 00:00:00 2001
From: Chia-I Wu <olvaffe@gmail.com>
Date: Thu, 18 May 2023 16:28:53 -0700
Subject: [PATCH 3/3] radv: advertise sampler2DViewOf3D

GFX8 always supports sampler2DViewOf3D.  GFX9+ seems to work fine after
the switch to set RADEON_SURF_2D_VIEW_COMPAT.

Tested with dEQP-VK.pipeline.monolithic.image_2d_view_3d_image.* on
GFX8/GFX9/GFX10 APUs.
---
 src/amd/vulkan/radv_physical_device.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/amd/vulkan/radv_physical_device.c b/src/amd/vulkan/radv_physical_device.c
index 6c72d333f40b..abeb091e047d 100644
--- a/src/amd/vulkan/radv_physical_device.c
+++ b/src/amd/vulkan/radv_physical_device.c
@@ -946,7 +946,7 @@ radv_physical_device_get_features(const struct radv_physical_device *pdevice,
 
       /* VK_EXT_image_2d_view_of_3d  */
       .image2DViewOf3D = true,
-      .sampler2DViewOf3D = false,
+      .sampler2DViewOf3D = true,
 
       /* VK_INTEL_shader_integer_functions2 */
       .shaderIntegerFunctions2 = true,
-- 
GitLab

