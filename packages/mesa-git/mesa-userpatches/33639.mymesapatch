From c059ae9bb2166f6991be4948e1bb807b3fc76675 Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Thu, 20 Feb 2025 10:51:57 +0100
Subject: [PATCH 1/7] radv: skip FCE for comp-to-single fast clears with DCC
 MSAA

comp-to-single supports MSAA since a while and it's useless to perform
a fast clear eliminate for these fast color clears.

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/amd/vulkan/meta/radv_meta_fast_clear.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/amd/vulkan/meta/radv_meta_fast_clear.c b/src/amd/vulkan/meta/radv_meta_fast_clear.c
index 279bf795b77ee..2db318b9a0df7 100644
--- a/src/amd/vulkan/meta/radv_meta_fast_clear.c
+++ b/src/amd/vulkan/meta/radv_meta_fast_clear.c
@@ -442,7 +442,7 @@ radv_fast_clear_flush_image_inplace(struct radv_cmd_buffer *cmd_buffer, struct r
                                     const VkImageSubresourceRange *subresourceRange)
 {
    if (radv_image_has_fmask(image) && !image->tc_compatible_cmask) {
-      if (radv_image_has_dcc(image) && radv_image_has_cmask(image)) {
+      if (radv_image_has_dcc(image) && radv_image_has_cmask(image) && !image->support_comp_to_single) {
          /* MSAA images with DCC and CMASK might have been fast-cleared and might require a FCE but
           * FMASK_DECOMPRESS can't eliminate DCC fast clears.
           */
-- 
GitLab


From 9c37fc9ebf1f05638ba6d1ae57215472ea6b80a4 Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Thu, 20 Feb 2025 10:58:34 +0100
Subject: [PATCH 2/7] radv: simplify radv_fast_clear_flush_image_inplace()

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/amd/vulkan/meta/radv_meta_fast_clear.c | 18 ++++--------------
 1 file changed, 4 insertions(+), 14 deletions(-)

diff --git a/src/amd/vulkan/meta/radv_meta_fast_clear.c b/src/amd/vulkan/meta/radv_meta_fast_clear.c
index 2db318b9a0df7..c25d4ae661171 100644
--- a/src/amd/vulkan/meta/radv_meta_fast_clear.c
+++ b/src/amd/vulkan/meta/radv_meta_fast_clear.c
@@ -441,22 +441,12 @@ void
 radv_fast_clear_flush_image_inplace(struct radv_cmd_buffer *cmd_buffer, struct radv_image *image,
                                     const VkImageSubresourceRange *subresourceRange)
 {
-   if (radv_image_has_fmask(image) && !image->tc_compatible_cmask) {
-      if (radv_image_has_dcc(image) && radv_image_has_cmask(image) && !image->support_comp_to_single) {
-         /* MSAA images with DCC and CMASK might have been fast-cleared and might require a FCE but
-          * FMASK_DECOMPRESS can't eliminate DCC fast clears.
-          */
-         radv_fast_clear_eliminate(cmd_buffer, image, subresourceRange);
-      }
+   /* FCE is only required for color images that don't support comp-to-single fast clears. */
+   if (!image->support_comp_to_single)
+      radv_fast_clear_eliminate(cmd_buffer, image, subresourceRange);
 
+   if (radv_image_has_fmask(image) && !image->tc_compatible_cmask)
       radv_fmask_decompress(cmd_buffer, image, subresourceRange);
-   } else {
-      /* Skip fast clear eliminate for images that support comp-to-single fast clears. */
-      if (image->support_comp_to_single)
-         return;
-
-      radv_fast_clear_eliminate(cmd_buffer, image, subresourceRange);
-   }
 }
 
 static void
-- 
GitLab


From 021edddf7a86e209e5f33414fb229dfa2c007a25 Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Thu, 20 Feb 2025 11:45:53 +0100
Subject: [PATCH 3/7] radv: add radv_fmask_color_expand()

Similar to radv_fmask_decompress()/radv_fast_clear_eliminate() helpers.

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/amd/vulkan/meta/radv_meta.h              |  6 ++++--
 src/amd/vulkan/meta/radv_meta_fmask_expand.c | 18 +++++++++++++++---
 src/amd/vulkan/radv_cmd_buffer.c             |  6 +-----
 3 files changed, 20 insertions(+), 10 deletions(-)

diff --git a/src/amd/vulkan/meta/radv_meta.h b/src/amd/vulkan/meta/radv_meta.h
index f5685649ff8fe..7fbdac862dbbf 100644
--- a/src/amd/vulkan/meta/radv_meta.h
+++ b/src/amd/vulkan/meta/radv_meta.h
@@ -222,8 +222,10 @@ void radv_fast_clear_flush_image_inplace(struct radv_cmd_buffer *cmd_buffer, str
 void radv_decompress_dcc(struct radv_cmd_buffer *cmd_buffer, struct radv_image *image,
                          const VkImageSubresourceRange *subresourceRange);
 void radv_retile_dcc(struct radv_cmd_buffer *cmd_buffer, struct radv_image *image);
-void radv_expand_fmask_image_inplace(struct radv_cmd_buffer *cmd_buffer, struct radv_image *image,
-                                     const VkImageSubresourceRange *subresourceRange);
+
+void radv_fmask_color_expand(struct radv_cmd_buffer *cmd_buffer, struct radv_image *image,
+                             const VkImageSubresourceRange *subresourceRange);
+
 void radv_copy_vrs_htile(struct radv_cmd_buffer *cmd_buffer, struct radv_image_view *vrs_iview, const VkRect2D *rect,
                          struct radv_image *dst_image, uint64_t htile_va, bool read_htile_value);
 
diff --git a/src/amd/vulkan/meta/radv_meta_fmask_expand.c b/src/amd/vulkan/meta/radv_meta_fmask_expand.c
index a6ae95608e650..46321e26645e4 100644
--- a/src/amd/vulkan/meta/radv_meta_fmask_expand.c
+++ b/src/amd/vulkan/meta/radv_meta_fmask_expand.c
@@ -91,9 +91,9 @@ get_pipeline(struct radv_device *device, uint32_t samples_log2, VkPipeline *pipe
    return result;
 }
 
-void
-radv_expand_fmask_image_inplace(struct radv_cmd_buffer *cmd_buffer, struct radv_image *image,
-                                const VkImageSubresourceRange *subresourceRange)
+static void
+radv_process_color_image(struct radv_cmd_buffer *cmd_buffer, struct radv_image *image,
+                         const VkImageSubresourceRange *subresourceRange)
 {
    struct radv_device *device = radv_cmd_buffer_device(cmd_buffer);
    struct radv_meta_saved_state saved_state;
@@ -167,3 +167,15 @@ radv_expand_fmask_image_inplace(struct radv_cmd_buffer *cmd_buffer, struct radv_
    /* Re-initialize FMASK in fully expanded mode. */
    cmd_buffer->state.flush_bits |= radv_init_fmask(cmd_buffer, image, subresourceRange);
 }
+
+void
+radv_fmask_color_expand(struct radv_cmd_buffer *cmd_buffer, struct radv_image *image,
+                        const VkImageSubresourceRange *subresourceRange)
+{
+   struct radv_barrier_data barrier = {0};
+
+   barrier.layout_transitions.fmask_color_expand = 1;
+   radv_describe_layout_transition(cmd_buffer, &barrier);
+
+   radv_process_color_image(cmd_buffer, image, subresourceRange);
+}
diff --git a/src/amd/vulkan/radv_cmd_buffer.c b/src/amd/vulkan/radv_cmd_buffer.c
index f10ff8688517e..e75d20498a4fb 100644
--- a/src/amd/vulkan/radv_cmd_buffer.c
+++ b/src/amd/vulkan/radv_cmd_buffer.c
@@ -12640,11 +12640,7 @@ radv_handle_color_image_transition(struct radv_cmd_buffer *cmd_buffer, struct ra
    }
 
    if (dst_fmask_comp == RADV_FMASK_COMPRESSION_NONE) {
-      struct radv_barrier_data barrier = {0};
-      barrier.layout_transitions.fmask_color_expand = 1;
-      radv_describe_layout_transition(cmd_buffer, &barrier);
-
-      radv_expand_fmask_image_inplace(cmd_buffer, image, range);
+      radv_fmask_color_expand(cmd_buffer, image, range);
    }
 }
 
-- 
GitLab


From d57f43eaaef8e1abaea911a963eeede922aa5a8e Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Thu, 20 Feb 2025 12:04:15 +0100
Subject: [PATCH 4/7] radv: rework radv_handle_color_image_transition()

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/amd/vulkan/radv_cmd_buffer.c | 66 ++++++++++++++++----------------
 1 file changed, 33 insertions(+), 33 deletions(-)

diff --git a/src/amd/vulkan/radv_cmd_buffer.c b/src/amd/vulkan/radv_cmd_buffer.c
index e75d20498a4fb..c541e37db17b2 100644
--- a/src/amd/vulkan/radv_cmd_buffer.c
+++ b/src/amd/vulkan/radv_cmd_buffer.c
@@ -12578,7 +12578,8 @@ radv_handle_color_image_transition(struct radv_cmd_buffer *cmd_buffer, struct ra
                                    unsigned dst_queue_mask, const VkImageSubresourceRange *range)
 {
    struct radv_device *device = radv_cmd_buffer_device(cmd_buffer);
-   bool dcc_decompressed = false, fast_clear_flushed = false;
+   bool needs_dcc_decompress = false, needs_dcc_retile = false;
+   bool needs_fast_clear_flush = false, needs_fmask_color_expand = false;
 
    if (!radv_image_has_cmask(image) && !radv_image_has_fmask(image) && !radv_dcc_enabled(image, range->baseMipLevel))
       return;
@@ -12596,52 +12597,51 @@ radv_handle_color_image_transition(struct radv_cmd_buffer *cmd_buffer, struct ra
          cmd_buffer->state.flush_bits |= radv_init_dcc(cmd_buffer, image, range, 0xffffffffu);
       } else if (radv_layout_dcc_compressed(device, image, range->baseMipLevel, src_layout, src_queue_mask) &&
                  !radv_layout_dcc_compressed(device, image, range->baseMipLevel, dst_layout, dst_queue_mask)) {
-         radv_decompress_dcc(cmd_buffer, image, range);
-         dcc_decompressed = true;
-      } else if (radv_layout_can_fast_clear(device, image, range->baseMipLevel, src_layout, src_queue_mask) &&
-                 !radv_layout_can_fast_clear(device, image, range->baseMipLevel, dst_layout, dst_queue_mask)) {
-         radv_fast_clear_flush_image_inplace(cmd_buffer, image, range);
-         fast_clear_flushed = true;
+         needs_dcc_decompress = true;
       }
 
       if (radv_image_need_retile(cmd_buffer, image))
-         radv_retile_transition(cmd_buffer, image, src_layout, dst_layout, dst_queue_mask);
-   } else if (radv_image_has_cmask(image) || radv_image_has_fmask(image)) {
-      if (radv_layout_can_fast_clear(device, image, range->baseMipLevel, src_layout, src_queue_mask) &&
-          !radv_layout_can_fast_clear(device, image, range->baseMipLevel, dst_layout, dst_queue_mask)) {
-         radv_fast_clear_flush_image_inplace(cmd_buffer, image, range);
-         fast_clear_flushed = true;
-      }
+         needs_dcc_retile = true;
+   }
+
+   if (radv_layout_can_fast_clear(device, image, range->baseMipLevel, src_layout, src_queue_mask) &&
+       !radv_layout_can_fast_clear(device, image, range->baseMipLevel, dst_layout, dst_queue_mask)) {
+      needs_fast_clear_flush = true;
    }
 
-   /* MSAA color decompress. */
    const enum radv_fmask_compression src_fmask_comp =
       radv_layout_fmask_compression(device, image, src_layout, src_queue_mask);
    const enum radv_fmask_compression dst_fmask_comp =
       radv_layout_fmask_compression(device, image, dst_layout, dst_queue_mask);
-   if (src_fmask_comp <= dst_fmask_comp)
-      return;
 
-   if (src_fmask_comp == RADV_FMASK_COMPRESSION_FULL) {
-      if (radv_dcc_enabled(image, range->baseMipLevel) && !radv_image_use_dcc_image_stores(device, image) &&
-          !dcc_decompressed) {
-         /* A DCC decompress is required before expanding FMASK
-          * when DCC stores aren't supported to avoid being in
-          * a state where DCC is compressed and the main
-          * surface is uncompressed.
-          */
-         radv_decompress_dcc(cmd_buffer, image, range);
-      } else if (!fast_clear_flushed) {
-         /* A FMASK decompress is required before expanding
-          * FMASK.
-          */
-         radv_fast_clear_flush_image_inplace(cmd_buffer, image, range);
+   if (src_fmask_comp > dst_fmask_comp) {
+      if (src_fmask_comp == RADV_FMASK_COMPRESSION_FULL) {
+         if (radv_dcc_enabled(image, range->baseMipLevel) && !radv_image_use_dcc_image_stores(device, image)) {
+            /* A DCC decompress is required before expanding FMASK when DCC stores aren't supported to
+             * avoid being in a state where DCC is compressed and the main surface is uncompressed.
+             */
+            needs_dcc_decompress = true;
+         } else {
+            /* FMASK_DECOMPRESS is required before expanding FMASK. */
+            needs_fast_clear_flush = true;
+         }
       }
+
+      if (dst_fmask_comp == RADV_FMASK_COMPRESSION_NONE)
+         needs_fmask_color_expand = true;
    }
 
-   if (dst_fmask_comp == RADV_FMASK_COMPRESSION_NONE) {
-      radv_fmask_color_expand(cmd_buffer, image, range);
+   if (needs_dcc_decompress) {
+      radv_decompress_dcc(cmd_buffer, image, range);
+   } else if (needs_fast_clear_flush) {
+      radv_fast_clear_flush_image_inplace(cmd_buffer, image, range);
    }
+
+   if (needs_fmask_color_expand)
+      radv_fmask_color_expand(cmd_buffer, image, range);
+
+   if (needs_dcc_retile)
+      radv_retile_transition(cmd_buffer, image, src_layout, dst_layout, dst_queue_mask);
 }
 
 static void
-- 
GitLab


From c685aa67fda27986e188f1c06ea3ada8dfc2d9bc Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Thu, 20 Feb 2025 12:06:37 +0100
Subject: [PATCH 5/7] radv: inline radv_fast_clear_flush_image_inplace()

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/amd/vulkan/meta/radv_meta.h            |  6 ++++--
 src/amd/vulkan/meta/radv_meta_fast_clear.c | 16 ++--------------
 src/amd/vulkan/radv_cmd_buffer.c           |  7 ++++++-
 3 files changed, 12 insertions(+), 17 deletions(-)

diff --git a/src/amd/vulkan/meta/radv_meta.h b/src/amd/vulkan/meta/radv_meta.h
index 7fbdac862dbbf..fe9c96ea88ceb 100644
--- a/src/amd/vulkan/meta/radv_meta.h
+++ b/src/amd/vulkan/meta/radv_meta.h
@@ -217,12 +217,14 @@ void radv_meta_clear_image_cs(struct radv_cmd_buffer *cmd_buffer, struct radv_me
 void radv_expand_depth_stencil(struct radv_cmd_buffer *cmd_buffer, struct radv_image *image,
                                const VkImageSubresourceRange *subresourceRange,
                                struct radv_sample_locations_state *sample_locs);
-void radv_fast_clear_flush_image_inplace(struct radv_cmd_buffer *cmd_buffer, struct radv_image *image,
-                                         const VkImageSubresourceRange *subresourceRange);
 void radv_decompress_dcc(struct radv_cmd_buffer *cmd_buffer, struct radv_image *image,
                          const VkImageSubresourceRange *subresourceRange);
 void radv_retile_dcc(struct radv_cmd_buffer *cmd_buffer, struct radv_image *image);
 
+void radv_fast_clear_eliminate(struct radv_cmd_buffer *cmd_buffer, struct radv_image *image,
+                               const VkImageSubresourceRange *subresourceRange);
+void radv_fmask_decompress(struct radv_cmd_buffer *cmd_buffer, struct radv_image *image,
+                           const VkImageSubresourceRange *subresourceRange);
 void radv_fmask_color_expand(struct radv_cmd_buffer *cmd_buffer, struct radv_image *image,
                              const VkImageSubresourceRange *subresourceRange);
 
diff --git a/src/amd/vulkan/meta/radv_meta_fast_clear.c b/src/amd/vulkan/meta/radv_meta_fast_clear.c
index c25d4ae661171..f3823784fa236 100644
--- a/src/amd/vulkan/meta/radv_meta_fast_clear.c
+++ b/src/amd/vulkan/meta/radv_meta_fast_clear.c
@@ -413,7 +413,7 @@ radv_process_color_image(struct radv_cmd_buffer *cmd_buffer, struct radv_image *
       radv_update_dcc_metadata(cmd_buffer, image, subresourceRange, false);
 }
 
-static void
+void
 radv_fast_clear_eliminate(struct radv_cmd_buffer *cmd_buffer, struct radv_image *image,
                           const VkImageSubresourceRange *subresourceRange)
 {
@@ -425,7 +425,7 @@ radv_fast_clear_eliminate(struct radv_cmd_buffer *cmd_buffer, struct radv_image
    radv_process_color_image(cmd_buffer, image, subresourceRange, FAST_CLEAR_ELIMINATE);
 }
 
-static void
+void
 radv_fmask_decompress(struct radv_cmd_buffer *cmd_buffer, struct radv_image *image,
                       const VkImageSubresourceRange *subresourceRange)
 {
@@ -437,18 +437,6 @@ radv_fmask_decompress(struct radv_cmd_buffer *cmd_buffer, struct radv_image *ima
    radv_process_color_image(cmd_buffer, image, subresourceRange, FMASK_DECOMPRESS);
 }
 
-void
-radv_fast_clear_flush_image_inplace(struct radv_cmd_buffer *cmd_buffer, struct radv_image *image,
-                                    const VkImageSubresourceRange *subresourceRange)
-{
-   /* FCE is only required for color images that don't support comp-to-single fast clears. */
-   if (!image->support_comp_to_single)
-      radv_fast_clear_eliminate(cmd_buffer, image, subresourceRange);
-
-   if (radv_image_has_fmask(image) && !image->tc_compatible_cmask)
-      radv_fmask_decompress(cmd_buffer, image, subresourceRange);
-}
-
 static void
 radv_decompress_dcc_compute(struct radv_cmd_buffer *cmd_buffer, struct radv_image *image,
                             const VkImageSubresourceRange *subresourceRange)
diff --git a/src/amd/vulkan/radv_cmd_buffer.c b/src/amd/vulkan/radv_cmd_buffer.c
index c541e37db17b2..750257087f0cb 100644
--- a/src/amd/vulkan/radv_cmd_buffer.c
+++ b/src/amd/vulkan/radv_cmd_buffer.c
@@ -12634,7 +12634,12 @@ radv_handle_color_image_transition(struct radv_cmd_buffer *cmd_buffer, struct ra
    if (needs_dcc_decompress) {
       radv_decompress_dcc(cmd_buffer, image, range);
    } else if (needs_fast_clear_flush) {
-      radv_fast_clear_flush_image_inplace(cmd_buffer, image, range);
+      /* FCE is only required for color images that don't support comp-to-single fast clears. */
+      if (!image->support_comp_to_single)
+         radv_fast_clear_eliminate(cmd_buffer, image, range);
+
+      if (radv_image_has_fmask(image) && !image->tc_compatible_cmask)
+         radv_fmask_decompress(cmd_buffer, image, range);
    }
 
    if (needs_fmask_color_expand)
-- 
GitLab


From 091526d5971f6d68bba71732c307ab5958d582f9 Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Thu, 20 Feb 2025 12:16:14 +0100
Subject: [PATCH 6/7] radv: make sure to always decompress FMASK before
 expanding it

This is actually required even for TC-compatible CMASK images.

VKCTS coverage is missing.

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/amd/vulkan/radv_cmd_buffer.c | 21 +++++++++++++--------
 1 file changed, 13 insertions(+), 8 deletions(-)

diff --git a/src/amd/vulkan/radv_cmd_buffer.c b/src/amd/vulkan/radv_cmd_buffer.c
index 750257087f0cb..85597c1fa5a93 100644
--- a/src/amd/vulkan/radv_cmd_buffer.c
+++ b/src/amd/vulkan/radv_cmd_buffer.c
@@ -12579,7 +12579,7 @@ radv_handle_color_image_transition(struct radv_cmd_buffer *cmd_buffer, struct ra
 {
    struct radv_device *device = radv_cmd_buffer_device(cmd_buffer);
    bool needs_dcc_decompress = false, needs_dcc_retile = false;
-   bool needs_fast_clear_flush = false, needs_fmask_color_expand = false;
+   bool needs_fce = false, needs_fmask_decompress = false, needs_fmask_color_expand = false;
 
    if (!radv_image_has_cmask(image) && !radv_image_has_fmask(image) && !radv_dcc_enabled(image, range->baseMipLevel))
       return;
@@ -12606,7 +12606,13 @@ radv_handle_color_image_transition(struct radv_cmd_buffer *cmd_buffer, struct ra
 
    if (radv_layout_can_fast_clear(device, image, range->baseMipLevel, src_layout, src_queue_mask) &&
        !radv_layout_can_fast_clear(device, image, range->baseMipLevel, dst_layout, dst_queue_mask)) {
-      needs_fast_clear_flush = true;
+      /* FCE is only required for color images that don't support comp-to-single fast clears. */
+      if (!image->support_comp_to_single)
+         needs_fce = true;
+
+      /* FMASK_DECOMPRESS is only required for color images that don't support TC-compatible CMASK. */
+      if (radv_image_has_fmask(image) && !image->tc_compatible_cmask)
+         needs_fmask_decompress = true;
    }
 
    const enum radv_fmask_compression src_fmask_comp =
@@ -12622,8 +12628,8 @@ radv_handle_color_image_transition(struct radv_cmd_buffer *cmd_buffer, struct ra
              */
             needs_dcc_decompress = true;
          } else {
-            /* FMASK_DECOMPRESS is required before expanding FMASK. */
-            needs_fast_clear_flush = true;
+            /* FMASK_DECOMPRESS is always required before expanding FMASK. */
+            needs_fmask_decompress = true;
          }
       }
 
@@ -12633,12 +12639,11 @@ radv_handle_color_image_transition(struct radv_cmd_buffer *cmd_buffer, struct ra
 
    if (needs_dcc_decompress) {
       radv_decompress_dcc(cmd_buffer, image, range);
-   } else if (needs_fast_clear_flush) {
-      /* FCE is only required for color images that don't support comp-to-single fast clears. */
-      if (!image->support_comp_to_single)
+   } else if (needs_fce || needs_fmask_decompress) {
+      if (needs_fce)
          radv_fast_clear_eliminate(cmd_buffer, image, range);
 
-      if (radv_image_has_fmask(image) && !image->tc_compatible_cmask)
+      if (needs_fmask_decompress)
          radv_fmask_decompress(cmd_buffer, image, range);
    }
 
-- 
GitLab


From 8bd0db5ae3603bb4f0a607213d350e3d392e6304 Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Thu, 20 Feb 2025 12:25:29 +0100
Subject: [PATCH 7/7] radv: disable TC-compatible CMASK with
 {FMASK,DCC}_DECOMPRESS

Because if FMASK_COMPRESS_1FRAG_ONLY is set, the FMASK decompress
operation actually doesn't occur. Note that DCC_DECOMPRESS implicitly
decompresses FMASK.

This fixes an issue on GFX10-GFX10.3 which is uncovered by enabling
VK_EXT_sample_locations.

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/amd/vulkan/meta/radv_meta_fast_clear.c | 54 +++++++++++-----------
 src/amd/vulkan/radv_cmd_buffer.c           |  3 ++
 src/amd/vulkan/radv_image_view.c           |  1 +
 src/amd/vulkan/radv_image_view.h           |  2 +
 4 files changed, 33 insertions(+), 27 deletions(-)

diff --git a/src/amd/vulkan/meta/radv_meta_fast_clear.c b/src/amd/vulkan/meta/radv_meta_fast_clear.c
index f3823784fa236..76519a3c101c2 100644
--- a/src/amd/vulkan/meta/radv_meta_fast_clear.c
+++ b/src/amd/vulkan/meta/radv_meta_fast_clear.c
@@ -238,7 +238,7 @@ radv_emit_set_predication_state_from_image(struct radv_cmd_buffer *cmd_buffer, s
 
 static void
 radv_process_color_image_layer(struct radv_cmd_buffer *cmd_buffer, struct radv_image *image,
-                               const VkImageSubresourceRange *range, int level, int layer, bool flush_cb)
+                               const VkImageSubresourceRange *range, int level, int layer, enum radv_color_op op)
 {
    struct radv_device *device = radv_cmd_buffer_device(cmd_buffer);
    struct radv_image_view iview;
@@ -247,22 +247,28 @@ radv_process_color_image_layer(struct radv_cmd_buffer *cmd_buffer, struct radv_i
    width = u_minify(image->vk.extent.width, range->baseMipLevel + level);
    height = u_minify(image->vk.extent.height, range->baseMipLevel + level);
 
-   radv_image_view_init(&iview, device,
-                        &(VkImageViewCreateInfo){
-                           .sType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO,
-                           .image = radv_image_to_handle(image),
-                           .viewType = radv_meta_get_view_type(image),
-                           .format = image->vk.format,
-                           .subresourceRange =
-                              {
-                                 .aspectMask = VK_IMAGE_ASPECT_COLOR_BIT,
-                                 .baseMipLevel = range->baseMipLevel + level,
-                                 .levelCount = 1,
-                                 .baseArrayLayer = range->baseArrayLayer + layer,
-                                 .layerCount = 1,
-                              },
-                        },
-                        NULL);
+   /* TC-compatible CMASK must be disabled (ie. FMASK_COMPRESS_1FRAG_ONLY must be 0), otherwise the
+    * FMASK decompress operation doesn't happen (DCC_DECOMPRESS implicitly uses FMASK_DECOMPRESS).
+    */
+   const bool disable_tc_compat_cmask_mrt = op == FMASK_DECOMPRESS || op == DCC_DECOMPRESS;
+
+   radv_image_view_init(
+      &iview, device,
+      &(VkImageViewCreateInfo){
+         .sType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO,
+         .image = radv_image_to_handle(image),
+         .viewType = radv_meta_get_view_type(image),
+         .format = image->vk.format,
+         .subresourceRange =
+            {
+               .aspectMask = VK_IMAGE_ASPECT_COLOR_BIT,
+               .baseMipLevel = range->baseMipLevel + level,
+               .levelCount = 1,
+               .baseArrayLayer = range->baseArrayLayer + layer,
+               .layerCount = 1,
+            },
+      },
+      &(struct radv_image_view_extra_create_info){.disable_tc_compat_cmask_mrt = disable_tc_compat_cmask_mrt});
 
    const VkRenderingAttachmentInfo color_att = {
       .sType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO,
@@ -283,13 +289,14 @@ radv_process_color_image_layer(struct radv_cmd_buffer *cmd_buffer, struct radv_i
 
    radv_CmdBeginRendering(radv_cmd_buffer_to_handle(cmd_buffer), &rendering_info);
 
-   if (flush_cb)
+   /* Flushing CB is required before/after {FMASK,DCC}_DECOMPRESS. */
+   if (op == FMASK_DECOMPRESS || op == DCC_DECOMPRESS)
       cmd_buffer->state.flush_bits |= radv_dst_access_flush(cmd_buffer, VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT,
                                                             VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT, 0, image, range);
 
    radv_CmdDraw(radv_cmd_buffer_to_handle(cmd_buffer), 3, 1, 0, 0);
 
-   if (flush_cb)
+   if (op == FMASK_DECOMPRESS || op == DCC_DECOMPRESS)
       cmd_buffer->state.flush_bits |= radv_src_access_flush(cmd_buffer, VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT,
                                                             VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT, 0, image, range);
 
@@ -305,7 +312,6 @@ radv_process_color_image(struct radv_cmd_buffer *cmd_buffer, struct radv_image *
    struct radv_device *device = radv_cmd_buffer_device(cmd_buffer);
    struct radv_meta_saved_state saved_state;
    bool old_predicating = false;
-   bool flush_cb = false;
    uint64_t pred_offset;
    VkPipelineLayout layout;
    VkPipeline pipeline;
@@ -323,15 +329,9 @@ radv_process_color_image(struct radv_cmd_buffer *cmd_buffer, struct radv_image *
       break;
    case FMASK_DECOMPRESS:
       pred_offset = 0; /* FMASK_DECOMPRESS is never predicated. */
-
-      /* Flushing CB is required before and after FMASK_DECOMPRESS. */
-      flush_cb = true;
       break;
    case DCC_DECOMPRESS:
       pred_offset = image->dcc_pred_offset;
-
-      /* Flushing CB is required before and after DCC_DECOMPRESS. */
-      flush_cb = true;
       break;
    default:
       unreachable("Invalid color op");
@@ -381,7 +381,7 @@ radv_process_color_image(struct radv_cmd_buffer *cmd_buffer, struct radv_image *
                          });
 
       for (uint32_t s = 0; s < vk_image_subresource_layer_count(&image->vk, subresourceRange); s++) {
-         radv_process_color_image_layer(cmd_buffer, image, subresourceRange, l, s, flush_cb);
+         radv_process_color_image_layer(cmd_buffer, image, subresourceRange, l, s, op);
       }
    }
 
diff --git a/src/amd/vulkan/radv_cmd_buffer.c b/src/amd/vulkan/radv_cmd_buffer.c
index 85597c1fa5a93..67cf0aaf72335 100644
--- a/src/amd/vulkan/radv_cmd_buffer.c
+++ b/src/amd/vulkan/radv_cmd_buffer.c
@@ -3700,6 +3700,9 @@ radv_emit_fb_color_state(struct radv_cmd_buffer *cmd_buffer, int index, struct r
       cb_color_info &= C_028C70_COMPRESSION;
    }
 
+   if (pdev->info.gfx_level >= GFX8 && pdev->info.gfx_level < GFX11 && iview->disable_tc_compat_cmask_mrt)
+      cb_color_info &= C_028C70_FMASK_COMPRESS_1FRAG_ONLY;
+
    if (pdev->info.gfx_level >= GFX12) {
       radeon_set_context_reg(cmd_buffer->cs, R_028C60_CB_COLOR0_BASE + index * 0x24, cb->ac.cb_color_base);
       radeon_set_context_reg(cmd_buffer->cs, R_028C64_CB_COLOR0_VIEW + index * 0x24, cb->ac.cb_color_view);
diff --git a/src/amd/vulkan/radv_image_view.c b/src/amd/vulkan/radv_image_view.c
index 377cc8edb6f9a..80f0cf604b0d0 100644
--- a/src/amd/vulkan/radv_image_view.c
+++ b/src/amd/vulkan/radv_image_view.c
@@ -633,6 +633,7 @@ radv_image_view_init(struct radv_image_view *iview, struct radv_device *device,
 
    iview->support_fast_clear = radv_image_view_can_fast_clear(device, iview);
    iview->disable_dcc_mrt = extra_create_info ? extra_create_info->disable_dcc_mrt : false;
+   iview->disable_tc_compat_cmask_mrt = extra_create_info ? extra_create_info->disable_tc_compat_cmask_mrt : false;
 
    bool disable_compression = extra_create_info ? extra_create_info->disable_compression : false;
    bool enable_compression = extra_create_info ? extra_create_info->enable_compression : false;
diff --git a/src/amd/vulkan/radv_image_view.h b/src/amd/vulkan/radv_image_view.h
index 4a02abd57e5be..c19621c2d6b2b 100644
--- a/src/amd/vulkan/radv_image_view.h
+++ b/src/amd/vulkan/radv_image_view.h
@@ -36,6 +36,7 @@ struct radv_image_view {
    bool support_fast_clear;
 
    bool disable_dcc_mrt;
+   bool disable_tc_compat_cmask_mrt;
 
    union radv_descriptor descriptor;
 
@@ -54,6 +55,7 @@ struct radv_image_view_extra_create_info {
    bool disable_compression;
    bool enable_compression;
    bool disable_dcc_mrt;
+   bool disable_tc_compat_cmask_mrt;
    bool from_client; /**< Set only if this came from vkCreateImage */
 };
 
-- 
GitLab

