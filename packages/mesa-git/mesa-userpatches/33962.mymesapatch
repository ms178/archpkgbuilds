From 7e28d002a900ae0d8d3f96724ad82df2b264e319 Mon Sep 17 00:00:00 2001
From: Vitaliy Triang3l Kuzmin <triang3l@yandex.ru>
Date: Tue, 12 Aug 2025 01:59:23 +0300
Subject: [PATCH 1/4] radv,ac: GFX10 depth/stencil HTILE mipmap bug info
 variable

Signed-off-by: Vitaliy Triang3l Kuzmin <triang3l@yandex.ru>
---
 src/amd/common/ac_gpu_info.c | 4 ++++
 src/amd/common/ac_gpu_info.h | 1 +
 src/amd/vulkan/radv_image.c  | 4 ++--
 3 files changed, 7 insertions(+), 2 deletions(-)

diff --git a/src/amd/common/ac_gpu_info.c b/src/amd/common/ac_gpu_info.c
index e5cf7f8ba8308..3521a22114ec4 100644
--- a/src/amd/common/ac_gpu_info.c
+++ b/src/amd/common/ac_gpu_info.c
@@ -935,6 +935,9 @@ ac_query_gpu_info(int fd, void *dev_p, struct radeon_info *info,
 
    info->has_gfx9_scissor_bug = info->family == CHIP_VEGA10 || info->family == CHIP_RAVEN;
 
+   /* Stencil texturing with HTILE doesn't work with mipmapping on Navi10-14. */
+   info->has_htile_stencil_mipmap_bug = info->gfx_level == GFX10;
+
    info->has_tc_compat_zrange_bug = info->gfx_level >= GFX8 && info->gfx_level <= GFX9;
 
    info->has_small_prim_filter_sample_loc_bug =
@@ -1710,6 +1713,7 @@ void ac_print_gpu_info(const struct radeon_info *info, FILE *f)
    fprintf(f, "    has_out_of_order_rast = %u\n", info->has_out_of_order_rast);
    fprintf(f, "    cpdma_prefetch_writes_memory = %u\n", info->cpdma_prefetch_writes_memory);
    fprintf(f, "    has_gfx9_scissor_bug = %i\n", info->has_gfx9_scissor_bug);
+   fprintf(f, "    has_htile_stencil_mipmap_bug = %i\n", info->has_htile_stencil_mipmap_bug);
    fprintf(f, "    has_tc_compat_zrange_bug = %i\n", info->has_tc_compat_zrange_bug);
    fprintf(f, "    has_small_prim_filter_sample_loc_bug = %i\n", info->has_small_prim_filter_sample_loc_bug);
    fprintf(f, "    has_ls_vgpr_init_bug = %i\n", info->has_ls_vgpr_init_bug);
diff --git a/src/amd/common/ac_gpu_info.h b/src/amd/common/ac_gpu_info.h
index 4d1eef7e845c8..b13c2d0635949 100644
--- a/src/amd/common/ac_gpu_info.h
+++ b/src/amd/common/ac_gpu_info.h
@@ -96,6 +96,7 @@ struct radeon_info {
    bool has_accelerated_dot_product;
    bool cpdma_prefetch_writes_memory;
    bool has_gfx9_scissor_bug;
+   bool has_htile_stencil_mipmap_bug;
    bool has_tc_compat_zrange_bug;
    bool has_small_prim_filter_sample_loc_bug;
    bool has_ls_vgpr_init_bug;
diff --git a/src/amd/vulkan/radv_image.c b/src/amd/vulkan/radv_image.c
index a6dcfb4450713..218a3de1323d3 100644
--- a/src/amd/vulkan/radv_image.c
+++ b/src/amd/vulkan/radv_image.c
@@ -407,8 +407,8 @@ radv_use_htile_for_image(const struct radv_device *device, const struct radv_ima
     */
    bool use_htile_for_mips = image->vk.array_layers == 1 && pdev->info.gfx_level >= GFX10;
 
-   /* Stencil texturing with HTILE doesn't work with mipmapping on Navi10-14. */
-   if (pdev->info.gfx_level == GFX10 && image->vk.format == VK_FORMAT_D32_SFLOAT_S8_UINT && image->vk.mip_levels > 1)
+   if (pdev->info.has_htile_stencil_mipmap_bug && image->vk.format == VK_FORMAT_D32_SFLOAT_S8_UINT &&
+       image->vk.mip_levels > 1)
       return false;
 
    /* Do not enable HTILE for very small images because it seems less performant but make sure it's
-- 
GitLab


From e9955736ffc6e00fe6f3095d740df53f31cf9786 Mon Sep 17 00:00:00 2001
From: Vitaliy Triang3l Kuzmin <triang3l@yandex.ru>
Date: Tue, 12 Aug 2025 02:25:16 +0300
Subject: [PATCH 2/4] radv,ac: Split has_tc_compat_zrange_bug into Z and ZS,
 enable on GFX1013

Signed-off-by: Vitaliy Triang3l Kuzmin <triang3l@yandex.ru>
---
 src/amd/common/ac_gpu_info.c     | 39 ++++++++++++++++++++++++++++++--
 src/amd/common/ac_gpu_info.h     |  3 ++-
 src/amd/vulkan/radv_cmd_buffer.c |  6 ++---
 src/amd/vulkan/radv_image.c      |  2 +-
 src/amd/vulkan/radv_image.h      | 34 ++++++++++++++++++++++------
 5 files changed, 70 insertions(+), 14 deletions(-)

diff --git a/src/amd/common/ac_gpu_info.c b/src/amd/common/ac_gpu_info.c
index 3521a22114ec4..30acea23a02d6 100644
--- a/src/amd/common/ac_gpu_info.c
+++ b/src/amd/common/ac_gpu_info.c
@@ -938,7 +938,39 @@ ac_query_gpu_info(int fd, void *dev_p, struct radeon_info *info,
    /* Stencil texturing with HTILE doesn't work with mipmapping on Navi10-14. */
    info->has_htile_stencil_mipmap_bug = info->gfx_level == GFX10;
 
-   info->has_tc_compat_zrange_bug = info->gfx_level >= GFX8 && info->gfx_level <= GFX9;
+   /* When drawing to a clear tile in HTILE, if in late Z all samples covering the tile are killed,
+    * the tile stays clear. However, on the chips affected by this bug, the Z range in the tile is
+    * still modified in this case. This may change the clear value that TC reads will use for the
+    * tile.
+    *
+    * This bug can be reproduced by fast-clearing the depth to 0, and with ZRANGE_PRECISION = 1 (or,
+    * on the chips where has_cleared_htile_tc_z_overwrite_bug_without_stencil is true, with
+    * TILE_STENCIL_DISABLE = 1), drawing a primitive with depths greater than roughly 0.5 that
+    * covers some or all samples in a tile, with all of them killed (such as via `discard` in the
+    * fragment shader, or by alpha to coverage): after that, TC reads will be returning 1 rather
+    * than 0 for that tile. Specifically, this combination of clear depth, primitive depth and
+    * discarding is present in dEQP-VK.dynamic_state.*.discard.depth (with a depth-only image) as of
+    * the CTS commit 698abf5f6b7073562cc951617a58e5803c7ead3f.
+    *
+    * One possible workaround is to use the HTILE encoding with stencil (that stores the Z range as
+    * base and delta), with ZRANGE_PRECISION set to 0 or 1 depending on whether the depth was
+    * cleared to 0.0f or 1.0f respectively.
+    *
+    * If has_cleared_htile_tc_z_overwrite_bug_without_stencil is true, the TILE_STENCIL_DISABLE = 1
+    * HTILE encoding is affected by the bug.
+    * If has_cleared_htile_tc_z_overwrite_bug_with_stencil is true, the TILE_STENCIL_DISABLE = 0
+    * encoding is affected.
+    *
+    * See DepthStencilView::UpdateZRangePrecision in PAL.
+    *
+    * GFX1013 is not supported by PAL, but it's also affected like GFX8 according to the behavior of
+    * dEQP-VK.dynamic_state.*.discard.depth on the Mesa 25.1 codebase (which didn't have the
+    * workaround enabled on GFX1013).
+    */
+   info->has_cleared_htile_tc_z_overwrite_bug_without_stencil = info->gfx_level == GFX8 ||
+                                                                info->family == CHIP_GFX1013;
+   info->has_cleared_htile_tc_z_overwrite_bug_with_stencil =
+      info->has_cleared_htile_tc_z_overwrite_bug_without_stencil || info->gfx_level == GFX9;
 
    info->has_small_prim_filter_sample_loc_bug =
       (info->family >= CHIP_POLARIS10 && info->family <= CHIP_POLARIS12) ||
@@ -1714,7 +1746,10 @@ void ac_print_gpu_info(const struct radeon_info *info, FILE *f)
    fprintf(f, "    cpdma_prefetch_writes_memory = %u\n", info->cpdma_prefetch_writes_memory);
    fprintf(f, "    has_gfx9_scissor_bug = %i\n", info->has_gfx9_scissor_bug);
    fprintf(f, "    has_htile_stencil_mipmap_bug = %i\n", info->has_htile_stencil_mipmap_bug);
-   fprintf(f, "    has_tc_compat_zrange_bug = %i\n", info->has_tc_compat_zrange_bug);
+   fprintf(f, "    has_cleared_htile_tc_z_overwrite_bug_without_stencil = %i\n",
+           info->has_cleared_htile_tc_z_overwrite_bug_without_stencil);
+   fprintf(f, "    has_cleared_htile_tc_z_overwrite_bug_with_stencil = %i\n",
+           info->has_cleared_htile_tc_z_overwrite_bug_with_stencil);
    fprintf(f, "    has_small_prim_filter_sample_loc_bug = %i\n", info->has_small_prim_filter_sample_loc_bug);
    fprintf(f, "    has_ls_vgpr_init_bug = %i\n", info->has_ls_vgpr_init_bug);
    fprintf(f, "    has_pops_missed_overlap_bug = %i\n", info->has_pops_missed_overlap_bug);
diff --git a/src/amd/common/ac_gpu_info.h b/src/amd/common/ac_gpu_info.h
index b13c2d0635949..dd3cac0b98c4a 100644
--- a/src/amd/common/ac_gpu_info.h
+++ b/src/amd/common/ac_gpu_info.h
@@ -97,7 +97,8 @@ struct radeon_info {
    bool cpdma_prefetch_writes_memory;
    bool has_gfx9_scissor_bug;
    bool has_htile_stencil_mipmap_bug;
-   bool has_tc_compat_zrange_bug;
+   bool has_cleared_htile_tc_z_overwrite_bug_without_stencil;
+   bool has_cleared_htile_tc_z_overwrite_bug_with_stencil;
    bool has_small_prim_filter_sample_loc_bug;
    bool has_ls_vgpr_init_bug;
    bool has_pops_missed_overlap_bug;
diff --git a/src/amd/vulkan/radv_cmd_buffer.c b/src/amd/vulkan/radv_cmd_buffer.c
index 1153af624425f..4a79e0cea87df 100644
--- a/src/amd/vulkan/radv_cmd_buffer.c
+++ b/src/amd/vulkan/radv_cmd_buffer.c
@@ -4606,7 +4606,8 @@ radv_update_zrange_precision(struct radv_cmd_buffer *cmd_buffer, struct radv_ds_
    uint32_t db_z_info = ds->ac.db_z_info;
    uint32_t db_z_info_reg;
 
-   if (!pdev->info.has_tc_compat_zrange_bug || !radv_tc_compat_htile_enabled(image, iview->vk.base_mip_level))
+   if (!radv_image_has_tc_compat_zrange_metadata(device, image) ||
+       !radv_tc_compat_htile_enabled(image, iview->vk.base_mip_level))
       return;
 
    db_z_info &= C_028040_ZRANGE_PRECISION;
@@ -4964,10 +4965,9 @@ radv_set_tc_compat_zrange_metadata(struct radv_cmd_buffer *cmd_buffer, struct ra
                                    const VkImageSubresourceRange *range, uint32_t value)
 {
    struct radv_device *device = radv_cmd_buffer_device(cmd_buffer);
-   const struct radv_physical_device *pdev = radv_device_physical(device);
    struct radv_cmd_stream *cs = cmd_buffer->cs;
 
-   if (!pdev->info.has_tc_compat_zrange_bug)
+   if (!radv_image_has_tc_compat_zrange_metadata(device, image))
       return;
 
    uint64_t va = radv_get_tc_compat_zrange_va(image, range->baseMipLevel);
diff --git a/src/amd/vulkan/radv_image.c b/src/amd/vulkan/radv_image.c
index 218a3de1323d3..8ed2f0f23dbd1 100644
--- a/src/amd/vulkan/radv_image.c
+++ b/src/amd/vulkan/radv_image.c
@@ -884,7 +884,7 @@ radv_image_alloc_values(const struct radv_device *device, struct radv_image *ima
       image->size += 8 * image->vk.mip_levels;
    }
 
-   if (radv_image_is_tc_compat_htile(image) && pdev->info.has_tc_compat_zrange_bug) {
+   if (radv_image_has_tc_compat_zrange_metadata(device, image)) {
       /* Metadata for the TC-compatible HTILE hardware bug which
        * have to be fixed by updating ZRANGE_PRECISION when doing
        * fast depth clears to 0.0f.
diff --git a/src/amd/vulkan/radv_image.h b/src/amd/vulkan/radv_image.h
index cec3440d962a3..c71624be8de45 100644
--- a/src/amd/vulkan/radv_image.h
+++ b/src/amd/vulkan/radv_image.h
@@ -199,16 +199,36 @@ radv_tc_compat_htile_enabled(const struct radv_image *image, unsigned level)
 static inline bool
 radv_image_tile_stencil_disabled(const struct radv_device *device, const struct radv_image *image)
 {
+   if (vk_format_has_stencil(image->vk.format)) {
+      return false;
+   }
+
    const struct radv_physical_device *pdev = radv_device_physical(device);
 
-   if (pdev->info.gfx_level >= GFX9) {
-      return !vk_format_has_stencil(image->vk.format) && !radv_image_has_vrs_htile(device, image);
-   } else {
-      /* Due to a hw bug, TILE_STENCIL_DISABLE must be set to 0 for
-       * the TC-compat ZRANGE issue even if no stencil is used.
-       */
-      return !vk_format_has_stencil(image->vk.format) && !radv_image_is_tc_compat_htile(image);
+   if (pdev->info.has_cleared_htile_tc_z_overwrite_bug_without_stencil && radv_image_is_tc_compat_htile(image)) {
+      /* Need to use the base and delta Z encoding for the workaround. */
+      return false;
+   }
+
+   return !radv_image_has_vrs_htile(device, image);
+}
+
+/**
+ * Return whether the image requires setting ZRANGE_PRECISION based on the last depth clear value to work around the
+ * hardware bug that may cause the HTILE depth clear value used by the TC to be changed.
+ */
+static inline bool
+radv_image_has_tc_compat_zrange_metadata(const struct radv_device *device, const struct radv_image *image)
+{
+   if (!radv_image_is_tc_compat_htile(image)) {
+      return false;
    }
+
+   const struct radv_physical_device *pdev = radv_device_physical(device);
+
+   return radv_image_tile_stencil_disabled(device, image)
+             ? pdev->info.has_cleared_htile_tc_z_overwrite_bug_without_stencil
+             : pdev->info.has_cleared_htile_tc_z_overwrite_bug_with_stencil;
 }
 
 static inline bool
-- 
GitLab


From 2054451898b99510a0f894954b7e3acb493f043d Mon Sep 17 00:00:00 2001
From: Vitaliy Triang3l Kuzmin <triang3l@yandex.ru>
Date: Tue, 12 Aug 2025 02:47:11 +0300
Subject: [PATCH 3/4] radeonsi: Disable TC-compatible HTILE when bug
 workarounds don't work

Signed-off-by: Vitaliy Triang3l Kuzmin <triang3l@yandex.ru>
---
 src/gallium/drivers/radeonsi/si_texture.c | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/src/gallium/drivers/radeonsi/si_texture.c b/src/gallium/drivers/radeonsi/si_texture.c
index 6d6a01589f877..a0a1db3bbd689 100644
--- a/src/gallium/drivers/radeonsi/si_texture.c
+++ b/src/gallium/drivers/radeonsi/si_texture.c
@@ -254,7 +254,10 @@ static int si_init_surface(struct si_screen *sscreen, struct radeon_surf *surfac
              (ptex->bind & PIPE_BIND_SHARED) || is_imported) {
             flags |= RADEON_SURF_NO_HTILE;
          } else if (tc_compatible_htile &&
-                    (sscreen->info.gfx_level >= GFX9 || array_mode == RADEON_SURF_MODE_2D)) {
+                    (sscreen->info.gfx_level >= GFX9 || array_mode == RADEON_SURF_MODE_2D) &&
+                    !(sscreen->info.has_htile_stencil_mipmap_bug &&
+                      sscreen->info.has_cleared_htile_tc_z_overwrite_bug_without_stencil &&
+                      ptex->last_level > 0)) {
             /* TC-compatible HTILE only supports Z32_FLOAT.
              * GFX9 also supports Z16_UNORM.
              * On GFX8, promote Z16 to Z32. DB->CB copies will convert
-- 
GitLab


From f32efcfb29c217c3df29b730409f9f0a8f613efa Mon Sep 17 00:00:00 2001
From: Vitaliy Triang3l Kuzmin <triang3l@yandex.ru>
Date: Tue, 12 Aug 2025 02:59:54 +0300
Subject: [PATCH 4/4] radeonsi: Use GFX8 HTILE TC Z clear value workaround on
 GFX1013

Signed-off-by: Vitaliy Triang3l Kuzmin <triang3l@yandex.ru>
---
 src/gallium/drivers/radeonsi/si_texture.c | 33 ++++++++++++++---------
 1 file changed, 21 insertions(+), 12 deletions(-)

diff --git a/src/gallium/drivers/radeonsi/si_texture.c b/src/gallium/drivers/radeonsi/si_texture.c
index a0a1db3bbd689..f0d9863506a19 100644
--- a/src/gallium/drivers/radeonsi/si_texture.c
+++ b/src/gallium/drivers/radeonsi/si_texture.c
@@ -1183,23 +1183,32 @@ static struct si_texture *si_texture_create_object(struct pipe_screen *screen,
       if (sscreen->info.gfx_level >= GFX9) {
          tex->can_sample_z = true;
          tex->can_sample_s = true;
-
-         /* Stencil texturing with HTILE doesn't work
-          * with mipmapping on Navi10-14. */
-         if (sscreen->info.gfx_level == GFX10 && base->last_level > 0)
-            tex->htile_stencil_disabled = true;
       } else {
          tex->can_sample_z = !tex->surface.u.legacy.depth_adjusted;
          tex->can_sample_s = !tex->surface.u.legacy.stencil_adjusted;
+      }
+
+      const bool need_htile_stencil_mipmap_bug_workaround =
+         sscreen->info.has_htile_stencil_mipmap_bug && base->last_level > 0;
+      if (need_htile_stencil_mipmap_bug_workaround) {
+         tex->htile_stencil_disabled = true;
+      }
 
-         /* GFX8 must keep stencil enabled because it can't use Z-only TC-compatible
-          * HTILE because of a hw bug. This has only a small effect on performance
-          * because we lose a little bit of Z precision in order to make space for
-          * stencil in HTILE.
+      if (sscreen->info.has_cleared_htile_tc_z_overwrite_bug_without_stencil &&
+          (tex->surface.flags & RADEON_SURF_TC_COMPATIBLE_HTILE)) {
+         /* Must keep stencil enabled because the base and delta Z encoding is
+          * needed to work around the TC Z clear value bug by using
+          * ZRANGE_PRECISION.
+          *
+          * This has only a small effect on performance because we lose a little
+          * bit of Z precision in order to make space for stencil in HTILE.
+          *
+          * If this workaround can't be applied to this texture,
+          * RADEON_SURF_TC_COMPATIBLE_HTILE must not be set for it, hence the
+          * assertion.
           */
-         if (sscreen->info.gfx_level == GFX8 &&
-             tex->surface.flags & RADEON_SURF_TC_COMPATIBLE_HTILE)
-            tex->htile_stencil_disabled = false;
+         assert(!need_htile_stencil_mipmap_bug_workaround);
+         tex->htile_stencil_disabled = false;
       }
 
       tex->db_compatible = surface->flags & RADEON_SURF_ZBUFFER;
-- 
GitLab

