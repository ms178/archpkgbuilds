From 6b5092f3613e2942c56f63ad79f39fcdaa4e325f Mon Sep 17 00:00:00 2001
From: Tatsuyuki Ishi <ishitatsuyuki@gmail.com>
Date: Mon, 19 Jun 2023 11:31:34 +0900
Subject: [PATCH 1/2] util/blake3: Add blake3_hash typedef.

---
 src/util/mesa-blake3.c | 3 +--
 src/util/mesa-blake3.h | 6 ++++--
 2 files changed, 5 insertions(+), 4 deletions(-)

diff --git a/src/util/mesa-blake3.c b/src/util/mesa-blake3.c
index 7c4accb2507bf..83fc459c2626f 100644
--- a/src/util/mesa-blake3.c
+++ b/src/util/mesa-blake3.c
@@ -34,8 +34,7 @@ void _mesa_blake3_hex_to_blake3(unsigned char *buf, const char *hex)
   mesa_hex_to_bytes(buf, hex, BLAKE3_OUT_LEN);
 }
 
-void _mesa_blake3_compute(const void *data, size_t size,
-                          unsigned char result[BLAKE3_OUT_LEN])
+void _mesa_blake3_compute(const void *data, size_t size, blake3_hash result)
 {
   struct mesa_blake3 ctx;
   _mesa_blake3_init(&ctx);
diff --git a/src/util/mesa-blake3.h b/src/util/mesa-blake3.h
index 181d7221c866d..a0b53fd29f861 100644
--- a/src/util/mesa-blake3.h
+++ b/src/util/mesa-blake3.h
@@ -31,6 +31,8 @@ extern "C" {
 
 #define mesa_blake3 blake3_hasher
 
+typedef uint8_t blake3_hash[BLAKE3_OUT_LEN];
+
 static inline void
 _mesa_blake3_init(struct mesa_blake3 *ctx)
 {
@@ -44,7 +46,7 @@ _mesa_blake3_update(struct mesa_blake3 *ctx, const void *data, size_t size)
 }
 
 static inline void
-_mesa_blake3_final(struct mesa_blake3 *ctx, unsigned char result[BLAKE3_OUT_LEN])
+_mesa_blake3_final(struct mesa_blake3 *ctx, blake3_hash result)
 {
    blake3_hasher_finalize(ctx, result, BLAKE3_OUT_LEN);
 }
@@ -56,7 +58,7 @@ void
 _mesa_blake3_hex_to_blake3(unsigned char *buf, const char *hex);
 
 void
-_mesa_blake3_compute(const void *data, size_t size, unsigned char result[BLAKE3_OUT_LEN]);
+_mesa_blake3_compute(const void *data, size_t size, blake3_hash result);
 
 #ifdef __cplusplus
 } /* extern C */
-- 
GitLab


From 0fb854266dbbbb96a62273e6b9adaa85641d613a Mon Sep 17 00:00:00 2001
From: Tatsuyuki Ishi <ishitatsuyuki@gmail.com>
Date: Wed, 19 Apr 2023 14:43:47 +0900
Subject: [PATCH 2/2] vulkan: Migrate shader module hash to BLAKE3.

Shaders are the largest thing we hash now, so they benefit from a faster
hash.

Change the field name from `sha1` to `hash` to avoid tying the definition
to a particular algorithm. This doubles down as a precaution against
callers still assuming a 20-byte hash (in which case the compilation will
error out).
---
 src/amd/vulkan/radv_pipeline.c        |  2 +-
 src/vulkan/runtime/vk_pipeline.c      |  9 +++++----
 src/vulkan/runtime/vk_shader_module.c | 15 +++++++--------
 src/vulkan/runtime/vk_shader_module.h |  3 ++-
 4 files changed, 15 insertions(+), 14 deletions(-)

diff --git a/src/amd/vulkan/radv_pipeline.c b/src/amd/vulkan/radv_pipeline.c
index eae6ff9d10c65..786852e721291 100644
--- a/src/amd/vulkan/radv_pipeline.c
+++ b/src/amd/vulkan/radv_pipeline.c
@@ -1103,7 +1103,7 @@ radv_copy_shader_stage_create_info(struct radv_device *device, uint32_t stageCou
          vk_object_base_init(&device->vk, &new_module->base, VK_OBJECT_TYPE_SHADER_MODULE);
 
          new_module->nir = NULL;
-         memcpy(new_module->sha1, module->sha1, sizeof(module->sha1));
+         memcpy(new_module->hash, module->hash, sizeof(module->hash));
          new_module->size = module->size;
          memcpy(new_module->data, module->data, module->size);
 
diff --git a/src/vulkan/runtime/vk_pipeline.c b/src/vulkan/runtime/vk_pipeline.c
index 694354b30c478..812a6bfd125fb 100644
--- a/src/vulkan/runtime/vk_pipeline.c
+++ b/src/vulkan/runtime/vk_pipeline.c
@@ -32,6 +32,7 @@
 #include "nir_serialize.h"
 
 #include "util/mesa-sha1.h"
+#include "util/mesa-blake3.h"
 
 bool
 vk_pipeline_shader_stage_is_null(const VkPipelineShaderStageCreateInfo *info)
@@ -176,12 +177,12 @@ vk_pipeline_hash_shader_stage(const VkPipelineShaderStageCreateInfo *info,
    _mesa_sha1_update(&ctx, &info->stage, sizeof(info->stage));
 
    if (module) {
-      _mesa_sha1_update(&ctx, module->sha1, sizeof(module->sha1));
+      _mesa_sha1_update(&ctx, module->hash, sizeof(module->hash));
    } else if (minfo) {
-      unsigned char spirv_sha1[SHA1_DIGEST_LENGTH];
+      blake3_hash spirv_hash;
 
-      _mesa_sha1_compute(minfo->pCode, minfo->codeSize, spirv_sha1);
-      _mesa_sha1_update(&ctx, spirv_sha1, sizeof(spirv_sha1));
+      _mesa_blake3_compute(minfo->pCode, minfo->codeSize, spirv_hash);
+      _mesa_sha1_update(&ctx, spirv_hash, sizeof(spirv_hash));
    } else {
       /* It is legal to pass in arbitrary identifiers as long as they don't exceed
        * the limit. Shaders with bogus identifiers are more or less guaranteed to fail. */
diff --git a/src/vulkan/runtime/vk_shader_module.c b/src/vulkan/runtime/vk_shader_module.c
index 6f838ed948c36..556d4f0bf2a5a 100644
--- a/src/vulkan/runtime/vk_shader_module.c
+++ b/src/vulkan/runtime/vk_shader_module.c
@@ -23,7 +23,6 @@
 
 #include "vk_shader_module.h"
 
-#include "util/mesa-sha1.h"
 #include "vk_alloc.h"
 #include "vk_common_entrypoints.h"
 #include "vk_device.h"
@@ -43,7 +42,7 @@ void vk_shader_module_init(struct vk_device *device,
    module->size = create_info->codeSize;
    memcpy(module->data, create_info->pCode, module->size);
 
-   _mesa_sha1_compute(module->data, module->size, module->sha1);
+   _mesa_blake3_compute(module->data, module->size, module->hash);
 }
 
 VKAPI_ATTR VkResult VKAPI_CALL
@@ -71,7 +70,7 @@ vk_common_CreateShaderModule(VkDevice _device,
     return VK_SUCCESS;
 }
 
-const uint8_t vk_shaderModuleIdentifierAlgorithmUUID[VK_UUID_SIZE] = "MESA-SHA1";
+const uint8_t vk_shaderModuleIdentifierAlgorithmUUID[VK_UUID_SIZE] = "MESA-BLAKE3";
 
 VKAPI_ATTR void VKAPI_CALL
 vk_common_GetShaderModuleIdentifierEXT(VkDevice _device,
@@ -79,8 +78,8 @@ vk_common_GetShaderModuleIdentifierEXT(VkDevice _device,
                                        VkShaderModuleIdentifierEXT *pIdentifier)
 {
    VK_FROM_HANDLE(vk_shader_module, module, _module);
-   memcpy(pIdentifier->identifier, module->sha1, sizeof(module->sha1));
-   pIdentifier->identifierSize = sizeof(module->sha1);
+   memcpy(pIdentifier->identifier, module->hash, sizeof(module->hash));
+   pIdentifier->identifierSize = sizeof(module->hash);
 }
 
 VKAPI_ATTR void VKAPI_CALL
@@ -88,9 +87,9 @@ vk_common_GetShaderModuleCreateInfoIdentifierEXT(VkDevice _device,
                                                  const VkShaderModuleCreateInfo *pCreateInfo,
                                                  VkShaderModuleIdentifierEXT *pIdentifier)
 {
-   _mesa_sha1_compute(pCreateInfo->pCode, pCreateInfo->codeSize,
-                      pIdentifier->identifier);
-   pIdentifier->identifierSize = SHA1_DIGEST_LENGTH;
+   _mesa_blake3_compute(pCreateInfo->pCode, pCreateInfo->codeSize,
+                        pIdentifier->identifier);
+   pIdentifier->identifierSize = sizeof(blake3_hash);
 }
 
 VKAPI_ATTR void VKAPI_CALL
diff --git a/src/vulkan/runtime/vk_shader_module.h b/src/vulkan/runtime/vk_shader_module.h
index efb1d8c3865e4..c5c81cf37789b 100644
--- a/src/vulkan/runtime/vk_shader_module.h
+++ b/src/vulkan/runtime/vk_shader_module.h
@@ -26,6 +26,7 @@
 
 #include <vulkan/vulkan_core.h>
 
+#include "util/mesa-blake3.h"
 #include "compiler/shader_enums.h"
 #include "vk_object.h"
 
@@ -40,7 +41,7 @@ struct spirv_to_nir_options;
 struct vk_shader_module {
    struct vk_object_base base;
    struct nir_shader *nir;
-   unsigned char sha1[20];
+   blake3_hash hash;
    uint32_t size;
    char data[0];
 };
-- 
GitLab

