From f9115c825c51d4e7f41b6745e09934876108e9f9 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Timur=20Krist=C3=B3f?= <timur.kristof@gmail.com>
Date: Wed, 12 Jun 2024 14:00:01 +0200
Subject: [PATCH 1/4] ac/nir/tess: Only write tess factors that the TES reads.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Otherwise we would write to a memory location reserved
for another per-patch output.

Fixes: 2cf7f282df720b9bf80e8bfa6ffae0d7b51a09f5
Closes: https://gitlab.freedesktop.org/mesa/mesa/-/issues/11324
Signed-off-by: Timur Krist贸f <timur.kristof@gmail.com>
---
 src/amd/common/ac_nir_lower_tess_io_to_mem.c | 10 ++++++++--
 1 file changed, 8 insertions(+), 2 deletions(-)

diff --git a/src/amd/common/ac_nir_lower_tess_io_to_mem.c b/src/amd/common/ac_nir_lower_tess_io_to_mem.c
index 3a0acddc70b38..8d33503c9eef9 100644
--- a/src/amd/common/ac_nir_lower_tess_io_to_mem.c
+++ b/src/amd/common/ac_nir_lower_tess_io_to_mem.c
@@ -803,7 +803,13 @@ hs_store_tess_factors_for_tes(nir_builder *b, tess_levels tessfactors, lower_tes
    nir_def *offchip_offset = nir_load_ring_tess_offchip_offset_amd(b);
    nir_def *zero = nir_imm_int(b, 0);
 
-   if (st->tcs_tess_level_outer_mask) {
+   /* For linked shaders, we must only write the tess factors that the TES actually reads,
+    * otherwise we would write to a memory location reserved for another per-patch output.
+    */
+   const bool tes_reads_outer = st->tes_inputs_read & VARYING_BIT_TESS_LEVEL_OUTER;
+   const bool tes_reads_inner = st->tes_inputs_read & VARYING_BIT_TESS_LEVEL_INNER;
+
+   if (st->tcs_tess_level_outer_mask && tes_reads_outer) {
       const unsigned tf_outer_loc = hs_output_vram_map_io_location(b->shader, false, VARYING_SLOT_TESS_LEVEL_OUTER, st);
       nir_def *vmem_off_outer = hs_per_patch_output_vmem_offset(b, st, NULL, tf_outer_loc * 16);
 
@@ -813,7 +819,7 @@ hs_store_tess_factors_for_tes(nir_builder *b, tess_levels tessfactors, lower_tes
                            .access = ACCESS_COHERENT);
    }
 
-   if (tessfactors.inner && st->tcs_tess_level_inner_mask) {
+   if (tessfactors.inner && st->tcs_tess_level_inner_mask && tes_reads_inner) {
       const unsigned tf_inner_loc = hs_output_vram_map_io_location(b->shader, false, VARYING_SLOT_TESS_LEVEL_INNER, st);
       nir_def *vmem_off_inner = hs_per_patch_output_vmem_offset(b, st, NULL, tf_inner_loc * 16);
 
-- 
GitLab


From a407bbb4f95c21782e168dd468edf87f1fc89328 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Timur=20Krist=C3=B3f?= <timur.kristof@gmail.com>
Date: Sat, 15 Jun 2024 09:36:12 +0200
Subject: [PATCH 2/4] ac/nir/tess: Fix per-patch output LDS mapping.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

VARYING_SLOT_PATCH0 is greater than 64 so it is wrong to use it
with BITFIELD64_BIT. Check for VARYING_SLOT_TESS_LEVEL_* properly
when mapping output locations in LDS.

Fixes: c61eb5480674e922a512c036455b00f30c12037c
Signed-off-by: Timur Krist贸f <timur.kristof@gmail.com>
---
 src/amd/common/ac_nir_lower_tess_io_to_mem.c | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/src/amd/common/ac_nir_lower_tess_io_to_mem.c b/src/amd/common/ac_nir_lower_tess_io_to_mem.c
index 8d33503c9eef9..ab0a73c13e46c 100644
--- a/src/amd/common/ac_nir_lower_tess_io_to_mem.c
+++ b/src/amd/common/ac_nir_lower_tess_io_to_mem.c
@@ -348,14 +348,18 @@ hs_output_lds_map_io_location(nir_shader *shader,
 {
    if (!per_vertex) {
       const uint64_t tf_mask = tcs_lds_tf_out_mask(shader, st);
-      if (BITFIELD64_BIT(loc) & TESS_LVL_MASK)
+      if (loc == VARYING_SLOT_TESS_LEVEL_INNER || loc == VARYING_SLOT_TESS_LEVEL_OUTER) {
+         assert(tf_mask & BITFIELD64_BIT(loc));
          return util_bitcount64(tf_mask & BITFIELD64_MASK(loc));
+      }
 
       const uint32_t patch_out_mask = tcs_lds_per_patch_out_mask(shader);
+      assert(patch_out_mask & BITFIELD_BIT(loc - VARYING_SLOT_PATCH0));
       return util_bitcount64(tf_mask) +
              util_bitcount(patch_out_mask & BITFIELD_MASK(loc - VARYING_SLOT_PATCH0));
    } else {
       const uint64_t per_vertex_mask = tcs_lds_per_vtx_out_mask(shader);
+      assert(per_vertex_mask & BITFIELD64_BIT(loc));
       return util_bitcount64(per_vertex_mask & BITFIELD64_MASK(loc));
    }
 }
-- 
GitLab


From 106b0aa9c98b2c8dfd5ab7f55b860a7a15174781 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Timur=20Krist=C3=B3f?= <timur.kristof@gmail.com>
Date: Sat, 15 Jun 2024 09:37:26 +0200
Subject: [PATCH 3/4] ac/nir/tess: Fix per-patch output VRAM mapping.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

VARYING_SLOT_PATCH0 is greater than 64 so it is wrong to use it
with BITFIELD64_BIT. Check for VARYING_SLOT_TESS_LEVEL_* properly
when mapping output locations in VRAM.

Fixes: 2cf7f282df720b9bf80e8bfa6ffae0d7b51a09f5
Closes: https://gitlab.freedesktop.org/mesa/mesa/-/issues/11253
Signed-off-by: Timur Krist贸f <timur.kristof@gmail.com>
---
 src/amd/ci/angle-radv-stoney-aco-fails.txt   | 12 ------------
 src/amd/common/ac_nir_lower_tess_io_to_mem.c |  6 +++++-
 2 files changed, 5 insertions(+), 13 deletions(-)

diff --git a/src/amd/ci/angle-radv-stoney-aco-fails.txt b/src/amd/ci/angle-radv-stoney-aco-fails.txt
index 67e9539e539df..3a77ad51bbe86 100644
--- a/src/amd/ci/angle-radv-stoney-aco-fails.txt
+++ b/src/amd/ci/angle-radv-stoney-aco-fails.txt
@@ -42,15 +42,3 @@ dEQP-GLES31.functional.texture.specification.texstorage3d.format.depth32f_stenci
 multisample-dEQP-GLES31.functional.blend_equation_advanced.basic.multiply,Fail
 multisample-dEQP-GLES31.functional.blend_equation_advanced.basic.overlay,Fail
 multisample-dEQP-GLES31.functional.blend_equation_advanced.basic.screen,Fail
-
-# Regression from https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/29436
-# https://gitlab.freedesktop.org/mesa/mesa/-/issues/11253
-dEQP-GLES31.functional.tessellation.user_defined_io.per_patch_block_array.vertex_io_array_size_implicit.isolines,Fail
-dEQP-GLES31.functional.tessellation.user_defined_io.per_patch_block_array.vertex_io_array_size_implicit.quads,Fail
-dEQP-GLES31.functional.tessellation.user_defined_io.per_patch_block_array.vertex_io_array_size_implicit.triangles,Fail
-dEQP-GLES31.functional.tessellation.user_defined_io.per_patch_block_array.vertex_io_array_size_query.isolines,Fail
-dEQP-GLES31.functional.tessellation.user_defined_io.per_patch_block_array.vertex_io_array_size_query.quads,Fail
-dEQP-GLES31.functional.tessellation.user_defined_io.per_patch_block_array.vertex_io_array_size_query.triangles,Fail
-dEQP-GLES31.functional.tessellation.user_defined_io.per_patch_block_array.vertex_io_array_size_shader_builtin.isolines,Fail
-dEQP-GLES31.functional.tessellation.user_defined_io.per_patch_block_array.vertex_io_array_size_shader_builtin.quads,Fail
-dEQP-GLES31.functional.tessellation.user_defined_io.per_patch_block_array.vertex_io_array_size_shader_builtin.triangles,Fail
diff --git a/src/amd/common/ac_nir_lower_tess_io_to_mem.c b/src/amd/common/ac_nir_lower_tess_io_to_mem.c
index ab0a73c13e46c..5aff2de256b77 100644
--- a/src/amd/common/ac_nir_lower_tess_io_to_mem.c
+++ b/src/amd/common/ac_nir_lower_tess_io_to_mem.c
@@ -456,14 +456,18 @@ hs_output_vram_map_io_location(nir_shader *shader,
     */
    if (!per_vertex) {
       const uint64_t tf_mask = tcs_vram_tf_out_mask(shader, st);
-      if (BITFIELD64_BIT(loc) & TESS_LVL_MASK)
+      if (loc == VARYING_SLOT_TESS_LEVEL_INNER || loc == VARYING_SLOT_TESS_LEVEL_OUTER) {
+         assert(tf_mask & BITFIELD64_BIT(loc));
          return util_bitcount64(tf_mask & BITFIELD64_MASK(loc));
+      }
 
       const uint32_t patch_out_mask = tcs_vram_per_patch_out_mask(shader, st);
+      assert(patch_out_mask & BITFIELD_BIT(loc - VARYING_SLOT_PATCH0));
       return util_bitcount64(tf_mask) +
              util_bitcount(patch_out_mask & BITFIELD_MASK(loc - VARYING_SLOT_PATCH0));
    } else {
       const uint64_t per_vertex_mask = tcs_vram_per_vtx_out_mask(shader, st);
+      assert(per_vertex_mask & BITFIELD64_BIT(loc));
       return util_bitcount64(per_vertex_mask & BITFIELD64_MASK(loc));
    }
 }
-- 
GitLab


From e5214de20882d89e416e4173b309a1526ca4fca3 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Timur=20Krist=C3=B3f?= <timur.kristof@gmail.com>
Date: Sat, 15 Jun 2024 09:38:27 +0200
Subject: [PATCH 4/4] radv: Use number of TES inputs for TCS-TES linking.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This is to match what ac_nir_lower_tess_io_to_mem also does.
Doesn't address any known bug, but it's theoretically possible
that TCS outputs_written and TES inputs_read mismatch, so let's
be on the safe side here.

Fixes: be49b02f0517d38a9445039789eebe1e0f7dcc73
Signed-off-by: Timur Krist贸f <timur.kristof@gmail.com>
---
 src/amd/vulkan/radv_pipeline_graphics.c | 15 +++++++--------
 1 file changed, 7 insertions(+), 8 deletions(-)

diff --git a/src/amd/vulkan/radv_pipeline_graphics.c b/src/amd/vulkan/radv_pipeline_graphics.c
index c9eedf5a16b1e..3614bc13a4789 100644
--- a/src/amd/vulkan/radv_pipeline_graphics.c
+++ b/src/amd/vulkan/radv_pipeline_graphics.c
@@ -1379,18 +1379,17 @@ radv_link_tcs(const struct radv_device *device, struct radv_shader_stage *tcs_st
    merge_tess_info(&tes_stage->nir->info, &tcs_stage->nir->info);
 
    /* Count the number of per-vertex output slots we need to reserve for the TCS and TES. */
-   const uint64_t nir_mask = tcs_stage->nir->info.outputs_written & tes_stage->nir->info.inputs_read &
-                             ~(VARYING_BIT_TESS_LEVEL_OUTER | VARYING_BIT_TESS_LEVEL_INNER);
-   const uint64_t io_mask = radv_gather_unlinked_io_mask(nir_mask);
-   const unsigned num_reserved_outputs = util_bitcount64(io_mask);
+   const uint64_t per_vertex_mask =
+      tes_stage->nir->info.inputs_read & ~(VARYING_BIT_TESS_LEVEL_OUTER | VARYING_BIT_TESS_LEVEL_INNER);
+   const unsigned num_reserved_outputs = util_bitcount64(per_vertex_mask);
 
    /* Count the number of per-patch output slots we need to reserve for the TCS and TES.
     * This is necessary because we need it to determine the patch size in VRAM.
     */
-   const uint64_t patch_io_mask = radv_gather_unlinked_patch_io_mask(
-      tcs_stage->nir->info.outputs_written & tes_stage->nir->info.inputs_read,
-      tcs_stage->nir->info.patch_outputs_written & tes_stage->nir->info.patch_inputs_read);
-   const unsigned num_reserved_patch_outputs = util_bitcount64(patch_io_mask);
+   const uint64_t tess_lvl_mask =
+      tes_stage->nir->info.inputs_read & (VARYING_BIT_TESS_LEVEL_OUTER | VARYING_BIT_TESS_LEVEL_INNER);
+   const unsigned num_reserved_patch_outputs =
+      util_bitcount64(tess_lvl_mask) + util_bitcount64(tes_stage->nir->info.patch_inputs_read);
 
    tcs_stage->info.tcs.num_linked_outputs = num_reserved_outputs;
    tcs_stage->info.tcs.num_linked_patch_outputs = num_reserved_patch_outputs;
-- 
GitLab

