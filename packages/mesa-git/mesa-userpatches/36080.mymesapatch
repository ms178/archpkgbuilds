From 72c6d5fab3c34f177e4c353e098d388af0fa58c7 Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Thu, 10 Jul 2025 14:29:50 +0100
Subject: [PATCH 1/4] vtn: fix placement of barriers for
 MakeAvailable/MakeVisible

From Vulkan 1.4.321 spec:
The implicit availability operation is program-ordered between the barrier
or atomic and all other operations program-ordered before the barrier or
atomic.
...
The implicit visibility operation is program-ordered between the barrier
or atomic and all other operations program-ordered after the barrier or
atomic.

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
---
 src/compiler/spirv/spirv_to_nir.c | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/src/compiler/spirv/spirv_to_nir.c b/src/compiler/spirv/spirv_to_nir.c
index 9679ebda09135..0f37f1790c5fc 100644
--- a/src/compiler/spirv/spirv_to_nir.c
+++ b/src/compiler/spirv/spirv_to_nir.c
@@ -2958,11 +2958,11 @@ vtn_split_barrier_semantics(struct vtn_builder *b,
       *after |= SpvMemorySemanticsAcquireMask | storage_semantics;
    }
 
-   if (av_vis_semantics & SpvMemorySemanticsMakeVisibleMask)
-      *before |= SpvMemorySemanticsMakeVisibleMask | storage_semantics;
-
    if (av_vis_semantics & SpvMemorySemanticsMakeAvailableMask)
-      *after |= SpvMemorySemanticsMakeAvailableMask | storage_semantics;
+      *before |= SpvMemorySemanticsMakeAvailableMask | storage_semantics;
+
+   if (av_vis_semantics & SpvMemorySemanticsMakeVisibleMask)
+      *after |= SpvMemorySemanticsMakeVisibleMask | storage_semantics;
 }
 
 static nir_memory_semantics
-- 
GitLab


From d0ae0ddd16bdd6220c1c2848d4df9ccf756268f6 Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Tue, 8 Jul 2025 17:29:18 +0100
Subject: [PATCH 2/4] nir: don't move accesses across make visible/available
 barriers

Otherwise, the barrier would no longer affect the access.

nir_opt_dead_write_vars should be fine, since it's removing stores, not
moving them.

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
---
 src/compiler/nir/nir_opt_combine_stores.c       | 2 +-
 src/compiler/nir/nir_opt_copy_prop_vars.c       | 4 ++--
 src/compiler/nir/nir_opt_load_store_vectorize.c | 4 ++--
 3 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/src/compiler/nir/nir_opt_combine_stores.c b/src/compiler/nir/nir_opt_combine_stores.c
index dbaea2f1b9043..0e8a572c12c75 100644
--- a/src/compiler/nir/nir_opt_combine_stores.c
+++ b/src/compiler/nir/nir_opt_combine_stores.c
@@ -311,7 +311,7 @@ combine_stores_block(struct combine_stores_state *state, nir_block *block)
          break;
 
       case nir_intrinsic_barrier:
-         if (nir_intrinsic_memory_semantics(intrin) & NIR_MEMORY_RELEASE) {
+         if (nir_intrinsic_memory_semantics(intrin) & (NIR_MEMORY_RELEASE | NIR_MEMORY_MAKE_AVAILABLE)) {
             combine_stores_with_modes(state,
                                       nir_intrinsic_memory_modes(intrin));
          }
diff --git a/src/compiler/nir/nir_opt_copy_prop_vars.c b/src/compiler/nir/nir_opt_copy_prop_vars.c
index f5117328ea0cf..ba1abbba94e96 100644
--- a/src/compiler/nir/nir_opt_copy_prop_vars.c
+++ b/src/compiler/nir/nir_opt_copy_prop_vars.c
@@ -185,7 +185,7 @@ gather_vars_written(struct copy_prop_var_state *state,
          nir_intrinsic_instr *intrin = nir_instr_as_intrinsic(instr);
          switch (intrin->intrinsic) {
          case nir_intrinsic_barrier:
-            if (nir_intrinsic_memory_semantics(intrin) & NIR_MEMORY_ACQUIRE)
+            if (nir_intrinsic_memory_semantics(intrin) & (NIR_MEMORY_ACQUIRE | NIR_MEMORY_MAKE_VISIBLE))
                written->modes |= nir_intrinsic_memory_modes(intrin);
             break;
 
@@ -1027,7 +1027,7 @@ copy_prop_vars_block(struct copy_prop_var_state *state,
          if (debug)
             dump_instr(instr);
 
-         if (nir_intrinsic_memory_semantics(intrin) & NIR_MEMORY_ACQUIRE)
+         if (nir_intrinsic_memory_semantics(intrin) & (NIR_MEMORY_ACQUIRE | NIR_MEMORY_MAKE_VISIBLE))
             apply_barrier_for_modes(state, copies, nir_intrinsic_memory_modes(intrin));
          break;
 
diff --git a/src/compiler/nir/nir_opt_load_store_vectorize.c b/src/compiler/nir/nir_opt_load_store_vectorize.c
index 9838f062de50f..954a4fc724c09 100644
--- a/src/compiler/nir/nir_opt_load_store_vectorize.c
+++ b/src/compiler/nir/nir_opt_load_store_vectorize.c
@@ -1501,8 +1501,8 @@ handle_barrier(struct vectorize_ctx *ctx, bool *progress, nir_function_impl *imp
                                                        nir_var_mem_shared |
                                                        nir_var_mem_global |
                                                        nir_var_mem_task_payload);
-         acquire = nir_intrinsic_memory_semantics(intrin) & NIR_MEMORY_ACQUIRE;
-         release = nir_intrinsic_memory_semantics(intrin) & NIR_MEMORY_RELEASE;
+         acquire = nir_intrinsic_memory_semantics(intrin) & (NIR_MEMORY_ACQUIRE | NIR_MEMORY_MAKE_VISIBLE);
+         release = nir_intrinsic_memory_semantics(intrin) & (NIR_MEMORY_RELEASE | NIR_MEMORY_MAKE_AVAILABLE);
          switch (nir_intrinsic_memory_scope(intrin)) {
          case SCOPE_INVOCATION:
             /* a barier should never be required for correctness with these scopes */
-- 
GitLab


From 7fd6c1c4b09293b2ad407a59816e2b810e7657e8 Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Fri, 4 Jul 2025 15:47:43 +0100
Subject: [PATCH 3/4] vtn: remove acquire/release around make visible/available
 barriers

These are not necessary and can be expensive. I think they were added
because of a misunderstanding of the informative descriptions in the
Vulkan memory model, or because the memory model requires make
visible/available barriers to have these semantics.

Because we use these to implement MakePointerVisible/MakePointerAvailable,
we can skip that requirement in NIR.

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
---
 src/compiler/spirv/tests/avail_vis.cpp | 16 ++++++++--------
 src/compiler/spirv/vtn_variables.c     |  2 --
 2 files changed, 8 insertions(+), 10 deletions(-)

diff --git a/src/compiler/spirv/tests/avail_vis.cpp b/src/compiler/spirv/tests/avail_vis.cpp
index 6e5973039cba8..ca018221ca2e9 100644
--- a/src/compiler/spirv/tests/avail_vis.cpp
+++ b/src/compiler/spirv/tests/avail_vis.cpp
@@ -82,7 +82,7 @@ TEST_F(AvailabilityVisibility, opload_vis)
    nir_intrinsic_instr *intrinsic = find_intrinsic(nir_intrinsic_barrier, 0);
    ASSERT_NE(intrinsic, nullptr);
 
-   EXPECT_EQ(nir_intrinsic_memory_semantics(intrinsic), NIR_MEMORY_MAKE_VISIBLE | NIR_MEMORY_ACQUIRE);
+   EXPECT_EQ(nir_intrinsic_memory_semantics(intrinsic), NIR_MEMORY_MAKE_VISIBLE);
    EXPECT_NE(nir_intrinsic_memory_modes(intrinsic) & nir_var_mem_ssbo, 0);
    EXPECT_EQ(nir_intrinsic_memory_scope(intrinsic), SCOPE_DEVICE);
    EXPECT_EQ(nir_intrinsic_execution_scope(intrinsic), SCOPE_NONE);
@@ -146,7 +146,7 @@ TEST_F(AvailabilityVisibility, opstore_avail)
    nir_intrinsic_instr *intrinsic = find_intrinsic(nir_intrinsic_barrier, 0);
    ASSERT_NE(intrinsic, nullptr);
 
-   EXPECT_EQ(nir_intrinsic_memory_semantics(intrinsic), NIR_MEMORY_MAKE_AVAILABLE | NIR_MEMORY_RELEASE);
+   EXPECT_EQ(nir_intrinsic_memory_semantics(intrinsic), NIR_MEMORY_MAKE_AVAILABLE);
    EXPECT_NE(nir_intrinsic_memory_modes(intrinsic) & nir_var_mem_ssbo, 0);
    EXPECT_EQ(nir_intrinsic_memory_scope(intrinsic), SCOPE_DEVICE);
    EXPECT_EQ(nir_intrinsic_execution_scope(intrinsic), SCOPE_NONE);
@@ -212,12 +212,12 @@ TEST_F(AvailabilityVisibility, opcopymemory_visavail_both_combined)
    ASSERT_NE(first, nullptr);
    ASSERT_NE(second, nullptr);
 
-   EXPECT_EQ(nir_intrinsic_memory_semantics(first), NIR_MEMORY_MAKE_VISIBLE | NIR_MEMORY_ACQUIRE);
+   EXPECT_EQ(nir_intrinsic_memory_semantics(first), NIR_MEMORY_MAKE_VISIBLE);
    EXPECT_NE(nir_intrinsic_memory_modes(first) & nir_var_mem_ssbo, 0);
    EXPECT_EQ(nir_intrinsic_memory_scope(first), SCOPE_WORKGROUP);
    EXPECT_EQ(nir_intrinsic_execution_scope(first), SCOPE_NONE);
 
-   EXPECT_EQ(nir_intrinsic_memory_semantics(second), NIR_MEMORY_MAKE_AVAILABLE | NIR_MEMORY_RELEASE);
+   EXPECT_EQ(nir_intrinsic_memory_semantics(second), NIR_MEMORY_MAKE_AVAILABLE);
    EXPECT_NE(nir_intrinsic_memory_modes(second) & nir_var_mem_ssbo, 0);
    EXPECT_EQ(nir_intrinsic_memory_scope(second), SCOPE_DEVICE);
    EXPECT_EQ(nir_intrinsic_execution_scope(first), SCOPE_NONE);
@@ -284,12 +284,12 @@ TEST_F(AvailabilityVisibility, opcopymemory_visavail_both_separate)
    ASSERT_NE(first, nullptr);
    ASSERT_NE(second, nullptr);
 
-   EXPECT_EQ(nir_intrinsic_memory_semantics(first), NIR_MEMORY_MAKE_VISIBLE | NIR_MEMORY_ACQUIRE);
+   EXPECT_EQ(nir_intrinsic_memory_semantics(first), NIR_MEMORY_MAKE_VISIBLE);
    EXPECT_NE(nir_intrinsic_memory_modes(first) & nir_var_mem_ssbo, 0);
    EXPECT_EQ(nir_intrinsic_memory_scope(first), SCOPE_WORKGROUP);
    EXPECT_EQ(nir_intrinsic_execution_scope(first), SCOPE_NONE);
 
-   EXPECT_EQ(nir_intrinsic_memory_semantics(second), NIR_MEMORY_MAKE_AVAILABLE | NIR_MEMORY_RELEASE);
+   EXPECT_EQ(nir_intrinsic_memory_semantics(second), NIR_MEMORY_MAKE_AVAILABLE);
    EXPECT_NE(nir_intrinsic_memory_modes(second) & nir_var_mem_ssbo, 0);
    EXPECT_EQ(nir_intrinsic_memory_scope(second), SCOPE_DEVICE);
    EXPECT_EQ(nir_intrinsic_execution_scope(second), SCOPE_NONE);
@@ -352,7 +352,7 @@ TEST_F(AvailabilityVisibility, opcopymemory_avail)
    nir_intrinsic_instr *intrinsic = find_intrinsic(nir_intrinsic_barrier, 0);
    ASSERT_NE(intrinsic, nullptr);
 
-   EXPECT_EQ(nir_intrinsic_memory_semantics(intrinsic), NIR_MEMORY_MAKE_AVAILABLE | NIR_MEMORY_RELEASE);
+   EXPECT_EQ(nir_intrinsic_memory_semantics(intrinsic), NIR_MEMORY_MAKE_AVAILABLE);
    EXPECT_NE(nir_intrinsic_memory_modes(intrinsic) & nir_var_mem_ssbo, 0);
    EXPECT_EQ(nir_intrinsic_memory_scope(intrinsic), SCOPE_DEVICE);
    EXPECT_EQ(nir_intrinsic_execution_scope(intrinsic), SCOPE_NONE);
@@ -415,7 +415,7 @@ TEST_F(AvailabilityVisibility, opcopymemory_vis)
    nir_intrinsic_instr *intrinsic = find_intrinsic(nir_intrinsic_barrier, 0);
    ASSERT_NE(intrinsic, nullptr);
 
-   EXPECT_EQ(nir_intrinsic_memory_semantics(intrinsic), NIR_MEMORY_MAKE_VISIBLE | NIR_MEMORY_ACQUIRE);
+   EXPECT_EQ(nir_intrinsic_memory_semantics(intrinsic), NIR_MEMORY_MAKE_VISIBLE);
    EXPECT_NE(nir_intrinsic_memory_modes(intrinsic) & nir_var_mem_ssbo, 0);
    EXPECT_EQ(nir_intrinsic_memory_scope(intrinsic), SCOPE_WORKGROUP);
    EXPECT_EQ(nir_intrinsic_execution_scope(intrinsic), SCOPE_NONE);
diff --git a/src/compiler/spirv/vtn_variables.c b/src/compiler/spirv/vtn_variables.c
index b4f60e27339f4..8e46cfa9a582f 100644
--- a/src/compiler/spirv/vtn_variables.c
+++ b/src/compiler/spirv/vtn_variables.c
@@ -2617,7 +2617,6 @@ vtn_emit_make_visible_barrier(struct vtn_builder *b, SpvMemoryAccessMask access,
       return;
 
    vtn_emit_memory_barrier(b, scope, SpvMemorySemanticsMakeVisibleMask |
-                                     SpvMemorySemanticsAcquireMask |
                                      vtn_mode_to_memory_semantics(mode));
 }
 
@@ -2629,7 +2628,6 @@ vtn_emit_make_available_barrier(struct vtn_builder *b, SpvMemoryAccessMask acces
       return;
 
    vtn_emit_memory_barrier(b, scope, SpvMemorySemanticsMakeAvailableMask |
-                                     SpvMemorySemanticsReleaseMask |
                                      vtn_mode_to_memory_semantics(mode));
 }
 
-- 
GitLab


From 37ac96c3563501b8c4ade0fcad53adedb9bb2833 Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Fri, 4 Jul 2025 15:51:25 +0100
Subject: [PATCH 4/4] nir/lower_memory_model: remove empty lowered barriers

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
---
 src/compiler/nir/nir_lower_memory_model.c | 9 +++++++--
 1 file changed, 7 insertions(+), 2 deletions(-)

diff --git a/src/compiler/nir/nir_lower_memory_model.c b/src/compiler/nir/nir_lower_memory_model.c
index aa53766676be8..272958e24928c 100644
--- a/src/compiler/nir/nir_lower_memory_model.c
+++ b/src/compiler/nir/nir_lower_memory_model.c
@@ -112,6 +112,11 @@ visit_instr(nir_instr *instr, uint32_t *cur_modes, unsigned vis_avail_sem)
       unsigned semantics = nir_intrinsic_memory_semantics(intrin);
       nir_intrinsic_set_memory_semantics(
          intrin, semantics & ~vis_avail_sem);
+
+      if (nir_intrinsic_memory_semantics(intrin) == 0 &&
+          nir_intrinsic_execution_scope(intrin) <= SCOPE_INVOCATION)
+         nir_instr_remove(instr);
+
       return true;
    }
 
@@ -151,7 +156,7 @@ lower_make_visible(nir_cf_node *cf_node, uint32_t *cur_modes)
    switch (cf_node->type) {
    case nir_cf_node_block: {
       nir_block *block = nir_cf_node_as_block(cf_node);
-      nir_foreach_instr(instr, block)
+      nir_foreach_instr_safe(instr, block)
          progress |= visit_instr(instr, cur_modes, NIR_MEMORY_MAKE_VISIBLE);
       break;
    }
@@ -191,7 +196,7 @@ lower_make_available(nir_cf_node *cf_node, uint32_t *cur_modes)
    switch (cf_node->type) {
    case nir_cf_node_block: {
       nir_block *block = nir_cf_node_as_block(cf_node);
-      nir_foreach_instr_reverse(instr, block)
+      nir_foreach_instr_reverse_safe(instr, block)
          progress |= visit_instr(instr, cur_modes, NIR_MEMORY_MAKE_AVAILABLE);
       break;
    }
-- 
GitLab

