From 7201479f235e270388f1191c402d0f9c07b8ab63 Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Thu, 8 Sep 2022 18:05:59 +0100
Subject: [PATCH 1/2] aco: remove fast path in insert_exec_mask's
 process_instructions

I doubt this helps much, and is annoying for the next commit.

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
---
 src/amd/compiler/aco_insert_exec_mask.cpp      | 13 -------------
 src/amd/compiler/aco_instruction_selection.cpp |  2 --
 src/amd/compiler/aco_ir.h                      |  3 +--
 src/amd/compiler/aco_print_ir.cpp              |  2 --
 4 files changed, 1 insertion(+), 19 deletions(-)

diff --git a/src/amd/compiler/aco_insert_exec_mask.cpp b/src/amd/compiler/aco_insert_exec_mask.cpp
index 3486595dcbeb..8149bc1bc7e4 100644
--- a/src/amd/compiler/aco_insert_exec_mask.cpp
+++ b/src/amd/compiler/aco_insert_exec_mask.cpp
@@ -525,19 +525,6 @@ process_instructions(exec_ctx& ctx, Block* block, std::vector<aco_ptr<Instructio
       state = Exact;
    }
 
-   /* if the block doesn't need both, WQM and Exact, we can skip processing the instructions */
-   bool process = (ctx.handle_wqm && (ctx.info[block->index].block_needs & state) !=
-                                        (ctx.info[block->index].block_needs & (WQM | Exact))) ||
-                  block->kind & block_kind_uses_discard || block->kind & block_kind_needs_lowering;
-   if (!process) {
-      std::vector<aco_ptr<Instruction>>::iterator it = std::next(block->instructions.begin(), idx);
-      instructions.insert(instructions.end(),
-                          std::move_iterator<std::vector<aco_ptr<Instruction>>::iterator>(it),
-                          std::move_iterator<std::vector<aco_ptr<Instruction>>::iterator>(
-                             block->instructions.end()));
-      return;
-   }
-
    Builder bld(ctx.program, &instructions);
 
    for (; idx < block->instructions.size(); idx++) {
diff --git a/src/amd/compiler/aco_instruction_selection.cpp b/src/amd/compiler/aco_instruction_selection.cpp
index 8904b21f7d56..ec912ce57aa6 100644
--- a/src/amd/compiler/aco_instruction_selection.cpp
+++ b/src/amd/compiler/aco_instruction_selection.cpp
@@ -8953,7 +8953,6 @@ visit_intrinsic(isel_context* ctx, nir_intrinsic_instr* instr)
        * Otherwise, these two behave the same. */
       Temp dst = get_ssa_temp(ctx, &instr->dest.ssa);
       bld.pseudo(aco_opcode::p_is_helper, Definition(dst), Operand(exec, bld.lm));
-      ctx->block->kind |= block_kind_needs_lowering;
       ctx->program->needs_exact = true;
       break;
    }
@@ -9018,7 +9017,6 @@ visit_intrinsic(isel_context* ctx, nir_intrinsic_instr* instr)
        */
       Temp elected = bld.pseudo(aco_opcode::p_elect, bld.def(bld.lm), Operand(exec, bld.lm));
       emit_wqm(bld, elected, get_ssa_temp(ctx, &instr->dest.ssa));
-      ctx->block->kind |= block_kind_needs_lowering;
       break;
    }
    case nir_intrinsic_shader_clock: {
diff --git a/src/amd/compiler/aco_ir.h b/src/amd/compiler/aco_ir.h
index 45266b64a09b..e2f40d65773f 100644
--- a/src/amd/compiler/aco_ir.h
+++ b/src/amd/compiler/aco_ir.h
@@ -1838,8 +1838,7 @@ enum block_kind {
    block_kind_invert = 1 << 10,
    block_kind_discard_early_exit = 1 << 11,
    block_kind_uses_discard = 1 << 12,
-   block_kind_needs_lowering = 1 << 13,
-   block_kind_export_end = 1 << 15,
+   block_kind_export_end = 1 << 13,
 };
 
 struct RegisterDemand {
diff --git a/src/amd/compiler/aco_print_ir.cpp b/src/amd/compiler/aco_print_ir.cpp
index 49f133f873c7..3c19292019d8 100644
--- a/src/amd/compiler/aco_print_ir.cpp
+++ b/src/amd/compiler/aco_print_ir.cpp
@@ -771,8 +771,6 @@ print_block_kind(uint16_t kind, FILE* output)
       fprintf(output, "invert, ");
    if (kind & block_kind_uses_discard)
       fprintf(output, "discard, ");
-   if (kind & block_kind_needs_lowering)
-      fprintf(output, "needs_lowering, ");
    if (kind & block_kind_export_end)
       fprintf(output, "export_end, ");
 }
-- 
GitLab


From 9ca28799ee261a91aaca61515a38c19bebcc766f Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Thu, 8 Sep 2022 14:30:57 +0100
Subject: [PATCH 2/2] aco: remove p_wqm during insert_exec_mask

fossil-db (navi21):
Totals from 45334 (33.42% of 135636) affected shaders:
MaxWaves: 1062176 -> 1058940 (-0.30%); split: +0.11%, -0.41%
Instrs: 32600411 -> 32541423 (-0.18%); split: -0.20%, +0.02%
CodeSize: 176449880 -> 175931224 (-0.29%); split: -0.32%, +0.03%
VGPRs: 2074768 -> 2093040 (+0.88%); split: -0.18%, +1.06%
Latency: 445697225 -> 445555067 (-0.03%); split: -0.10%, +0.06%
InvThroughput: 84125135 -> 84512709 (+0.46%); split: -0.22%, +0.68%
VClause: 629965 -> 621630 (-1.32%); split: -1.75%, +0.43%
SClause: 1423941 -> 1415971 (-0.56%); split: -0.84%, +0.28%
Copies: 1871955 -> 1820874 (-2.73%); split: -3.03%, +0.30%
Branches: 652251 -> 652168 (-0.01%); split: -0.02%, +0.01%
PreVGPRs: 1775517 -> 1772710 (-0.16%)

fossil-db (navi21, excluding detroit: become human):
Totals from 37943 (33.14% of 114495) affected shaders:
MaxWaves: 942546 -> 943090 (+0.06%); split: +0.12%, -0.06%
Instrs: 20810132 -> 20765529 (-0.21%); split: -0.24%, +0.03%
CodeSize: 112843980 -> 112508644 (-0.30%); split: -0.34%, +0.04%
VGPRs: 1580304 -> 1582736 (+0.15%); split: -0.22%, +0.37%
Latency: 282400557 -> 282276594 (-0.04%); split: -0.14%, +0.10%
InvThroughput: 54958538 -> 54814378 (-0.26%); split: -0.32%, +0.06%
VClause: 420666 -> 422099 (+0.34%); split: -0.27%, +0.61%
SClause: 988189 -> 981029 (-0.72%); split: -1.11%, +0.38%
Copies: 1009518 -> 970925 (-3.82%); split: -4.26%, +0.44%
Branches: 306082 -> 306083 (+0.00%); split: -0.01%, +0.01%
PreVGPRs: 1286421 -> 1283757 (-0.21%)

Detroit: Become Human MaxWaves regressions seem to be due to the scheduler
choosing to schedule more aggressively.

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
---
 src/amd/compiler/aco_insert_exec_mask.cpp | 49 ++++++++++++++++++++++-
 1 file changed, 48 insertions(+), 1 deletion(-)

diff --git a/src/amd/compiler/aco_insert_exec_mask.cpp b/src/amd/compiler/aco_insert_exec_mask.cpp
index 8149bc1bc7e4..2bc1e4a57f60 100644
--- a/src/amd/compiler/aco_insert_exec_mask.cpp
+++ b/src/amd/compiler/aco_insert_exec_mask.cpp
@@ -84,7 +84,14 @@ struct exec_ctx {
    std::vector<block_info> info;
    std::vector<loop_info> loop;
    bool handle_wqm = false;
-   exec_ctx(Program* program_) : program(program_), info(program->blocks.size()) {}
+
+   bool has_renames = false;
+   std::vector<unsigned> renames;
+   std::vector<uint32_t> loop_headers;
+
+   exec_ctx(Program* program_)
+       : program(program_), info(program->blocks.size()), renames(program->peekAllocationId())
+   {}
 };
 
 bool
@@ -240,6 +247,17 @@ transition_to_Exact(exec_ctx& ctx, Builder bld, unsigned idx)
    ctx.info[idx].exec.emplace_back(Operand(bld.lm), mask_type_exact);
 }
 
+void
+rename_operands(exec_ctx& ctx, aco_ptr<Instruction>& instr)
+{
+   for (Operand& op : instr->operands) {
+      if (op.isTemp() && op.tempId() < ctx.renames.size() && ctx.renames[op.tempId()]) {
+         unsigned id = ctx.renames[op.tempId()];
+         op.setTemp(Temp(id, ctx.program->temp_rc[id]));
+      }
+   }
+}
+
 unsigned
 add_coupling_code(exec_ctx& ctx, Block* block, std::vector<aco_ptr<Instruction>>& instructions)
 {
@@ -458,6 +476,8 @@ add_coupling_code(exec_ctx& ctx, Block* block, std::vector<aco_ptr<Instruction>>
    unsigned i = 0;
    while (block->instructions[i]->opcode == aco_opcode::p_phi ||
           block->instructions[i]->opcode == aco_opcode::p_linear_phi) {
+      if (ctx.has_renames)
+         rename_operands(ctx, block->instructions[i]);
       bld.insert(std::move(block->instructions[i]));
       i++;
    }
@@ -530,6 +550,9 @@ process_instructions(exec_ctx& ctx, Block* block, std::vector<aco_ptr<Instructio
    for (; idx < block->instructions.size(); idx++) {
       aco_ptr<Instruction> instr = std::move(block->instructions[idx]);
 
+      if (ctx.has_renames)
+         rename_operands(ctx, instr);
+
       WQMState needs = ctx.handle_wqm ? ctx.info[block->index].instr_needs[idx] : Unspecified;
 
       if (needs == WQM && state != WQM) {
@@ -676,10 +699,34 @@ process_instructions(exec_ctx& ctx, Block* block, std::vector<aco_ptr<Instructio
          }
          instr.reset();
          continue;
+      } else if (instr->opcode == aco_opcode::p_wqm && instr->definitions.size() == 1 &&
+                 !instr->definitions[0].isFixed() && instr->operands[0].isTemp() &&
+                 instr->definitions[0].regClass() == instr->operands[0].regClass()) {
+         /* p_wqm isn't needed anymore, so remove it. */
+         ctx.has_renames = true;
+         ctx.renames[instr->definitions[0].tempId()] = instr->operands[0].tempId();
+         instr.reset();
+         continue;
       }
 
       bld.insert(std::move(instr));
    }
+
+   if (block->kind & block_kind_loop_exit) {
+      uint32_t header = ctx.loop_headers.back();
+      ctx.loop_headers.pop_back();
+
+      /* rename loop header phis */
+      if (ctx.has_renames) {
+         for (aco_ptr<Instruction>& instr : ctx.program->blocks[header].instructions) {
+            if (!is_phi(instr))
+               continue;
+            rename_operands(ctx, instr);
+         }
+      }
+   } else if (block->kind & block_kind_loop_header) {
+      ctx.loop_headers.emplace_back(block->index);
+   }
 }
 
 void
-- 
GitLab

