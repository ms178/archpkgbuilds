From 660431925f5e544fe73caac98917e4bb1641d1a1 Mon Sep 17 00:00:00 2001
From: antonino <antonino.maniscalco@collabora.com>
Date: Tue, 15 Aug 2023 13:22:59 +0200
Subject: [PATCH] wsi: use vk runtime for `VkSurface`

WSI has so far not used `vk_object_base` from the vulkan runtime for
`VkSurface`.

This changes wraps the internal wsi object in a struct that derives from
the vulkan base object so that `vkSetDebugUtilsObjectNameEXT` works
correctly with it.

cc: mesa-stable
---
 src/vulkan/wsi/wsi_common.c     | 76 ++++++++++++++++-----------------
 src/vulkan/wsi/wsi_common.h     |  9 ++++
 src/vulkan/wsi/wsi_common_x11.c | 20 +++++++--
 3 files changed, 63 insertions(+), 42 deletions(-)

diff --git a/src/vulkan/wsi/wsi_common.c b/src/vulkan/wsi/wsi_common.c
index 726862560e8bd..0aa29728bfb39 100644
--- a/src/vulkan/wsi/wsi_common.c
+++ b/src/vulkan/wsi/wsi_common.c
@@ -275,25 +275,25 @@ wsi_DestroySurfaceKHR(VkInstance _instance,
                       const VkAllocationCallbacks *pAllocator)
 {
    VK_FROM_HANDLE(vk_instance, instance, _instance);
-   ICD_FROM_HANDLE(VkIcdSurfaceBase, surface, _surface);
+   VK_FROM_HANDLE(wsi_common_vk_surface, wsi_surface, _surface);
 
-   if (!surface)
+   if (!wsi_surface)
       return;
 
 #ifdef VK_USE_PLATFORM_WAYLAND_KHR
-   if (surface->platform == VK_ICD_WSI_PLATFORM_WAYLAND) {
-      wsi_wl_surface_destroy(surface, _instance, pAllocator);
+   if (wsi_surface->surface_base->platform == VK_ICD_WSI_PLATFORM_WAYLAND) {
+      wsi_wl_surface_destroy(wsi_surface->surface_base, _instance, pAllocator);
       return;
    }
 #endif
 #ifdef VK_USE_PLATFORM_WIN32_KHR
-   if (surface->platform == VK_ICD_WSI_PLATFORM_WIN32) {
-      wsi_win32_surface_destroy(surface, _instance, pAllocator);
+   if (wsi_surface->surface_base->platform == VK_ICD_WSI_PLATFORM_WIN32) {
+      wsi_win32_surface_destroy(wsi_surface->surface_base, _instance, pAllocator);
       return;
    }
 #endif
 
-   vk_free2(&instance->alloc, pAllocator, surface);
+   vk_free2(&instance->alloc, pAllocator, wsi_surface);
 }
 
 void
@@ -462,14 +462,14 @@ wsi_swapchain_is_present_mode_supported(struct wsi_device *wsi,
                                         const VkSwapchainCreateInfoKHR *pCreateInfo,
                                         VkPresentModeKHR mode)
 {
-      ICD_FROM_HANDLE(VkIcdSurfaceBase, surface, pCreateInfo->surface);
-      struct wsi_interface *iface = wsi->wsi[surface->platform];
+      VK_FROM_HANDLE(wsi_common_vk_surface, wsi_surface, pCreateInfo->surface);
+      struct wsi_interface *iface = wsi->wsi[wsi_surface->surface_base->platform];
       VkPresentModeKHR *present_modes;
       uint32_t present_mode_count;
       bool supported = false;
       VkResult result;
 
-      result = iface->get_present_modes(surface, wsi, &present_mode_count, NULL);
+      result = iface->get_present_modes(wsi_surface->surface_base, wsi, &present_mode_count, NULL);
       if (result != VK_SUCCESS)
          return supported;
 
@@ -477,7 +477,7 @@ wsi_swapchain_is_present_mode_supported(struct wsi_device *wsi,
       if (!present_modes)
          return supported;
 
-      result = iface->get_present_modes(surface, wsi, &present_mode_count,
+      result = iface->get_present_modes(wsi_surface->surface_base, wsi, &present_mode_count,
                                         present_modes);
       if (result != VK_SUCCESS)
          goto fail;
@@ -749,11 +749,11 @@ wsi_GetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice physicalDevice,
                                        VkBool32 *pSupported)
 {
    VK_FROM_HANDLE(vk_physical_device, device, physicalDevice);
-   ICD_FROM_HANDLE(VkIcdSurfaceBase, surface, _surface);
+   VK_FROM_HANDLE(wsi_common_vk_surface, wsi_surface, _surface);
    struct wsi_device *wsi_device = device->wsi_device;
-   struct wsi_interface *iface = wsi_device->wsi[surface->platform];
+   struct wsi_interface *iface = wsi_device->wsi[wsi_surface->surface_base->platform];
 
-   return iface->get_support(surface, wsi_device,
+   return iface->get_support(wsi_surface->surface_base, wsi_device,
                              queueFamilyIndex, pSupported);
 }
 
@@ -764,15 +764,15 @@ wsi_GetPhysicalDeviceSurfaceCapabilitiesKHR(
    VkSurfaceCapabilitiesKHR *pSurfaceCapabilities)
 {
    VK_FROM_HANDLE(vk_physical_device, device, physicalDevice);
-   ICD_FROM_HANDLE(VkIcdSurfaceBase, surface, _surface);
+   VK_FROM_HANDLE(wsi_common_vk_surface, wsi_surface, _surface);
    struct wsi_device *wsi_device = device->wsi_device;
-   struct wsi_interface *iface = wsi_device->wsi[surface->platform];
+   struct wsi_interface *iface = wsi_device->wsi[wsi_surface->surface_base->platform];
 
    VkSurfaceCapabilities2KHR caps2 = {
       .sType = VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR,
    };
 
-   VkResult result = iface->get_capabilities2(surface, wsi_device, NULL, &caps2);
+   VkResult result = iface->get_capabilities2(wsi_surface->surface_base, wsi_device, NULL, &caps2);
 
    if (result == VK_SUCCESS)
       *pSurfaceCapabilities = caps2.surfaceCapabilities;
@@ -787,11 +787,11 @@ wsi_GetPhysicalDeviceSurfaceCapabilities2KHR(
    VkSurfaceCapabilities2KHR *pSurfaceCapabilities)
 {
    VK_FROM_HANDLE(vk_physical_device, device, physicalDevice);
-   ICD_FROM_HANDLE(VkIcdSurfaceBase, surface, pSurfaceInfo->surface);
+   VK_FROM_HANDLE(wsi_common_vk_surface, wsi_surface, pSurfaceInfo->surface);
    struct wsi_device *wsi_device = device->wsi_device;
-   struct wsi_interface *iface = wsi_device->wsi[surface->platform];
+   struct wsi_interface *iface = wsi_device->wsi[wsi_surface->surface_base->platform];
 
-   return iface->get_capabilities2(surface, wsi_device, pSurfaceInfo->pNext,
+   return iface->get_capabilities2(wsi_surface->surface_base, wsi_device, pSurfaceInfo->pNext,
                                    pSurfaceCapabilities);
 }
 
@@ -802,9 +802,9 @@ wsi_GetPhysicalDeviceSurfaceCapabilities2EXT(
    VkSurfaceCapabilities2EXT *pSurfaceCapabilities)
 {
    VK_FROM_HANDLE(vk_physical_device, device, physicalDevice);
-   ICD_FROM_HANDLE(VkIcdSurfaceBase, surface, _surface);
+   VK_FROM_HANDLE(wsi_common_vk_surface, wsi_surface, _surface);
    struct wsi_device *wsi_device = device->wsi_device;
-   struct wsi_interface *iface = wsi_device->wsi[surface->platform];
+   struct wsi_interface *iface = wsi_device->wsi[wsi_surface->surface_base->platform];
 
    assert(pSurfaceCapabilities->sType ==
           VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT);
@@ -820,7 +820,7 @@ wsi_GetPhysicalDeviceSurfaceCapabilities2EXT(
       .pNext = &counters,
    };
 
-   VkResult result = iface->get_capabilities2(surface, wsi_device, NULL, &caps2);
+   VkResult result = iface->get_capabilities2(wsi_surface->surface_base, wsi_device, NULL, &caps2);
 
    if (result == VK_SUCCESS) {
       VkSurfaceCapabilities2EXT *ext_caps = pSurfaceCapabilities;
@@ -849,11 +849,11 @@ wsi_GetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice,
                                        VkSurfaceFormatKHR *pSurfaceFormats)
 {
    VK_FROM_HANDLE(vk_physical_device, device, physicalDevice);
-   ICD_FROM_HANDLE(VkIcdSurfaceBase, surface, _surface);
+   VK_FROM_HANDLE(wsi_common_vk_surface, wsi_surface, _surface);
    struct wsi_device *wsi_device = device->wsi_device;
-   struct wsi_interface *iface = wsi_device->wsi[surface->platform];
+   struct wsi_interface *iface = wsi_device->wsi[wsi_surface->surface_base->platform];
 
-   return iface->get_formats(surface, wsi_device,
+   return iface->get_formats(wsi_surface->surface_base, wsi_device,
                              pSurfaceFormatCount, pSurfaceFormats);
 }
 
@@ -864,11 +864,11 @@ wsi_GetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice,
                                         VkSurfaceFormat2KHR *pSurfaceFormats)
 {
    VK_FROM_HANDLE(vk_physical_device, device, physicalDevice);
-   ICD_FROM_HANDLE(VkIcdSurfaceBase, surface, pSurfaceInfo->surface);
+   VK_FROM_HANDLE(wsi_common_vk_surface, wsi_surface, pSurfaceInfo->surface);
    struct wsi_device *wsi_device = device->wsi_device;
-   struct wsi_interface *iface = wsi_device->wsi[surface->platform];
+   struct wsi_interface *iface = wsi_device->wsi[wsi_surface->surface_base->platform];
 
-   return iface->get_formats2(surface, wsi_device, pSurfaceInfo->pNext,
+   return iface->get_formats2(wsi_surface->surface_base, wsi_device, pSurfaceInfo->pNext,
                               pSurfaceFormatCount, pSurfaceFormats);
 }
 
@@ -879,11 +879,11 @@ wsi_GetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice,
                                             VkPresentModeKHR *pPresentModes)
 {
    VK_FROM_HANDLE(vk_physical_device, device, physicalDevice);
-   ICD_FROM_HANDLE(VkIcdSurfaceBase, surface, _surface);
+   VK_FROM_HANDLE(wsi_common_vk_surface, wsi_surface, _surface);
    struct wsi_device *wsi_device = device->wsi_device;
-   struct wsi_interface *iface = wsi_device->wsi[surface->platform];
+   struct wsi_interface *iface = wsi_device->wsi[wsi_surface->surface_base->platform];
 
-   return iface->get_present_modes(surface, wsi_device, pPresentModeCount,
+   return iface->get_present_modes(wsi_surface->surface_base, wsi_device, pPresentModeCount,
                                    pPresentModes);
 }
 
@@ -894,11 +894,11 @@ wsi_GetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice physicalDevice,
                                           VkRect2D *pRects)
 {
    VK_FROM_HANDLE(vk_physical_device, device, physicalDevice);
-   ICD_FROM_HANDLE(VkIcdSurfaceBase, surface, _surface);
+   VK_FROM_HANDLE(wsi_common_vk_surface, wsi_surface, _surface);
    struct wsi_device *wsi_device = device->wsi_device;
-   struct wsi_interface *iface = wsi_device->wsi[surface->platform];
+   struct wsi_interface *iface = wsi_device->wsi[wsi_surface->surface_base->platform];
 
-   return iface->get_present_rectangles(surface, wsi_device,
+   return iface->get_present_rectangles(wsi_surface->surface_base, wsi_device,
                                         pRectCount, pRects);
 }
 
@@ -910,11 +910,11 @@ wsi_CreateSwapchainKHR(VkDevice _device,
 {
    MESA_TRACE_FUNC();
    VK_FROM_HANDLE(vk_device, device, _device);
-   ICD_FROM_HANDLE(VkIcdSurfaceBase, surface, pCreateInfo->surface);
+   VK_FROM_HANDLE(wsi_common_vk_surface, wsi_surface, pCreateInfo->surface);
    struct wsi_device *wsi_device = device->physical->wsi_device;
    struct wsi_interface *iface = wsi_device->force_headless_swapchain ?
       wsi_device->wsi[VK_ICD_WSI_PLATFORM_HEADLESS] :
-      wsi_device->wsi[surface->platform];
+      wsi_device->wsi[wsi_surface->surface_base->platform];
    const VkAllocationCallbacks *alloc;
    struct wsi_swapchain *swapchain;
 
@@ -927,7 +927,7 @@ wsi_CreateSwapchainKHR(VkDevice _device,
     * bool deferred_allocation = pCreateInfo->flags & VK_SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_EXT;
     */
 
-   VkResult result = iface->create_swapchain(surface, _device, wsi_device,
+   VkResult result = iface->create_swapchain(wsi_surface->surface_base, _device, wsi_device,
                                              pCreateInfo, alloc,
                                              &swapchain);
    if (result != VK_SUCCESS)
diff --git a/src/vulkan/wsi/wsi_common.h b/src/vulkan/wsi/wsi_common.h
index 346025602b926..aa83e03aab48e 100644
--- a/src/vulkan/wsi/wsi_common.h
+++ b/src/vulkan/wsi/wsi_common.h
@@ -27,6 +27,7 @@
 #include <stdbool.h>
 
 #include "vk_alloc.h"
+#include "vk_object.h"
 #include "vk_dispatch_table.h"
 #include <vulkan/vulkan.h>
 #include <vulkan/vk_icd.h>
@@ -91,6 +92,14 @@ struct wsi_memory_signal_submit_info {
     VkDeviceMemory memory;
 };
 
+struct wsi_common_vk_surface {
+   struct vk_object_base base;
+   VkIcdSurfaceBase *surface_base;
+};
+
+VK_DEFINE_HANDLE_CASTS(wsi_common_vk_surface, base, VkSurfaceKHR,
+                       VK_OBJECT_TYPE_SURFACE_KHR);
+
 struct wsi_interface;
 struct vk_instance;
 
diff --git a/src/vulkan/wsi/wsi_common_x11.c b/src/vulkan/wsi/wsi_common_x11.c
index 2dff27afa643c..d239c8f6577ab 100644
--- a/src/vulkan/wsi/wsi_common_x11.c
+++ b/src/vulkan/wsi/wsi_common_x11.c
@@ -969,6 +969,7 @@ wsi_CreateXcbSurfaceKHR(VkInstance _instance,
                         VkSurfaceKHR *pSurface)
 {
    VK_FROM_HANDLE(vk_instance, instance, _instance);
+   struct wsi_common_vk_surface *wsi_surface;
    struct wsi_x11_vk_surface *surface;
 
    assert(pCreateInfo->sType == VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR);
@@ -979,11 +980,16 @@ wsi_CreateXcbSurfaceKHR(VkInstance _instance,
    if (!visual)
       return VK_ERROR_OUT_OF_HOST_MEMORY;
 
+   wsi_surface = vk_alloc2(&instance->alloc, pAllocator, sizeof(struct wsi_common_vk_surface), 8,
+                           VK_SYSTEM_ALLOCATION_SCOPE_OBJECT);
    surface = vk_alloc2(&instance->alloc, pAllocator, sizeof(struct wsi_x11_vk_surface), 8,
                        VK_SYSTEM_ALLOCATION_SCOPE_OBJECT);
-   if (surface == NULL)
+   if (surface == NULL || wsi_surface == NULL)
       return VK_ERROR_OUT_OF_HOST_MEMORY;
 
+   vk_object_base_init(NULL, &wsi_surface->base, VK_OBJECT_TYPE_SURFACE_KHR);
+   wsi_surface->surface_base = &surface->xlib.base;
+
    surface->xcb.base.platform = VK_ICD_WSI_PLATFORM_XCB;
    surface->xcb.connection = pCreateInfo->connection;
    surface->xcb.window = pCreateInfo->window;
@@ -991,7 +997,7 @@ wsi_CreateXcbSurfaceKHR(VkInstance _instance,
    surface->has_alpha = visual_has_alpha(visual, visual_depth);
    surface->changed = true;
 
-   *pSurface = VkIcdSurfaceBase_to_handle(&surface->xcb.base);
+   *pSurface = (VkSurfaceKHR)wsi_common_vk_surface_to_handle(wsi_surface);
    return VK_SUCCESS;
 }
 
@@ -1002,6 +1008,7 @@ wsi_CreateXlibSurfaceKHR(VkInstance _instance,
                          VkSurfaceKHR *pSurface)
 {
    VK_FROM_HANDLE(vk_instance, instance, _instance);
+   struct wsi_common_vk_surface *wsi_surface;
    struct wsi_x11_vk_surface *surface;
 
    assert(pCreateInfo->sType == VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR);
@@ -1012,11 +1019,16 @@ wsi_CreateXlibSurfaceKHR(VkInstance _instance,
    if (!visual)
       return VK_ERROR_OUT_OF_HOST_MEMORY;
 
+   wsi_surface = vk_alloc2(&instance->alloc, pAllocator, sizeof(struct wsi_common_vk_surface), 8,
+                           VK_SYSTEM_ALLOCATION_SCOPE_OBJECT);
    surface = vk_alloc2(&instance->alloc, pAllocator, sizeof(struct wsi_x11_vk_surface), 8,
                        VK_SYSTEM_ALLOCATION_SCOPE_OBJECT);
-   if (surface == NULL)
+   if (surface == NULL || wsi_surface == NULL)
       return VK_ERROR_OUT_OF_HOST_MEMORY;
 
+   vk_object_base_init(NULL, &wsi_surface->base, VK_OBJECT_TYPE_SURFACE_KHR);
+   wsi_surface->surface_base = &surface->xlib.base;
+
    surface->xlib.base.platform = VK_ICD_WSI_PLATFORM_XLIB;
    surface->xlib.dpy = pCreateInfo->dpy;
    surface->xlib.window = pCreateInfo->window;
@@ -1024,7 +1036,7 @@ wsi_CreateXlibSurfaceKHR(VkInstance _instance,
    surface->has_alpha = visual_has_alpha(visual, visual_depth);
    surface->changed = true;
 
-   *pSurface = VkIcdSurfaceBase_to_handle(&surface->xlib.base);
+   *pSurface = (VkSurfaceKHR)wsi_common_vk_surface_to_handle(wsi_surface);
    return VK_SUCCESS;
 }
 
-- 
GitLab

