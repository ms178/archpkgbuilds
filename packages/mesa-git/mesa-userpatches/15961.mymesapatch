From 08c8e20638fc66f556d35450164b8ea87b28202f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Timur=20Krist=C3=B3f?= <timur.kristof@gmail.com>
Date: Thu, 22 Sep 2022 15:18:23 +0200
Subject: [PATCH 1/3] nir/opt_shrink_vectors: Add an options argument.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This just adds the argument to the function and
every caller. Argument will be used in the next commit.

Signed-off-by: Timur Kristóf <timur.kristof@gmail.com>
---
 src/amd/vulkan/radv_pipeline.c                     | 4 ++--
 src/amd/vulkan/radv_shader.c                       | 2 +-
 src/compiler/nir/nir.h                             | 2 +-
 src/compiler/nir/nir_opt_shrink_vectors.c          | 2 +-
 src/gallium/auxiliary/nir/nir_to_tgsi.c            | 2 +-
 src/gallium/drivers/etnaviv/etnaviv_compiler_nir.c | 2 +-
 src/gallium/drivers/i915/i915_screen.c             | 2 +-
 src/intel/compiler/brw_nir.c                       | 2 +-
 src/panfrost/bifrost/bifrost_compile.c             | 4 ++--
 9 files changed, 11 insertions(+), 11 deletions(-)

diff --git a/src/amd/vulkan/radv_pipeline.c b/src/amd/vulkan/radv_pipeline.c
index cdabd89eb665..16260135cdaf 100644
--- a/src/amd/vulkan/radv_pipeline.c
+++ b/src/amd/vulkan/radv_pipeline.c
@@ -2314,7 +2314,7 @@ radv_lower_io_to_scalar_early(nir_shader *nir, nir_variable_mode mask)
    if (progress) {
       /* Optimize the new vector code and then remove dead vars */
       NIR_PASS(_, nir, nir_copy_prop);
-      NIR_PASS(_, nir, nir_opt_shrink_vectors);
+      NIR_PASS(_, nir, nir_opt_shrink_vectors, 0);
 
       if (mask & nir_var_shader_out) {
          /* Optimize swizzled movs of load_const for nir_link_opt_varyings's constant propagation. */
@@ -3800,7 +3800,7 @@ radv_postprocess_nir(struct radv_pipeline *pipeline,
    NIR_PASS_V(stage->nir, radv_nir_apply_pipeline_layout, device, pipeline_layout,
               &stage->info, &stage->args);
 
-   NIR_PASS(_, stage->nir, nir_opt_shrink_vectors);
+   NIR_PASS(_, stage->nir, nir_opt_shrink_vectors, 0);
 
    NIR_PASS(_, stage->nir, nir_lower_alu_width, opt_vectorize_callback, device);
 
diff --git a/src/amd/vulkan/radv_shader.c b/src/amd/vulkan/radv_shader.c
index 52d2e7c24f04..db7e0de0df0d 100644
--- a/src/amd/vulkan/radv_shader.c
+++ b/src/amd/vulkan/radv_shader.c
@@ -214,7 +214,7 @@ radv_optimize_nir(struct nir_shader *shader, bool optimize_conservatively, bool
       }
    } while (progress && !optimize_conservatively);
 
-   NIR_PASS(progress, shader, nir_opt_shrink_vectors);
+   NIR_PASS(progress, shader, nir_opt_shrink_vectors, 0);
    NIR_PASS(progress, shader, nir_remove_dead_variables,
             nir_var_function_temp | nir_var_shader_in | nir_var_shader_out, NULL);
 
diff --git a/src/compiler/nir/nir.h b/src/compiler/nir/nir.h
index ab40b80d4ac0..d283fc2d57d5 100644
--- a/src/compiler/nir/nir.h
+++ b/src/compiler/nir/nir.h
@@ -5585,7 +5585,7 @@ bool nir_opt_phi_precision(nir_shader *shader);
 
 bool nir_opt_shrink_stores(nir_shader *shader, bool shrink_image_store);
 
-bool nir_opt_shrink_vectors(nir_shader *shader);
+bool nir_opt_shrink_vectors(nir_shader *shader, unsigned options);
 
 bool nir_opt_trivial_continues(nir_shader *shader);
 
diff --git a/src/compiler/nir/nir_opt_shrink_vectors.c b/src/compiler/nir/nir_opt_shrink_vectors.c
index cc6e5add05e3..9c3ae34474b9 100644
--- a/src/compiler/nir/nir_opt_shrink_vectors.c
+++ b/src/compiler/nir/nir_opt_shrink_vectors.c
@@ -358,7 +358,7 @@ opt_shrink_vectors_instr(nir_builder *b, nir_instr *instr)
 }
 
 bool
-nir_opt_shrink_vectors(nir_shader *shader)
+nir_opt_shrink_vectors(nir_shader *shader, UNUSED unsigned options)
 {
    bool progress = false;
 
diff --git a/src/gallium/auxiliary/nir/nir_to_tgsi.c b/src/gallium/auxiliary/nir/nir_to_tgsi.c
index 48a05f0d42f2..014c6601c4c6 100644
--- a/src/gallium/auxiliary/nir/nir_to_tgsi.c
+++ b/src/gallium/auxiliary/nir/nir_to_tgsi.c
@@ -3310,7 +3310,7 @@ ntt_optimize_nir(struct nir_shader *s, struct pipe_screen *screen)
       };
       NIR_PASS(progress, s, nir_opt_load_store_vectorize, &vectorize_opts);
       NIR_PASS(progress, s, nir_opt_shrink_stores, true);
-      NIR_PASS(progress, s, nir_opt_shrink_vectors);
+      NIR_PASS(progress, s, nir_opt_shrink_vectors, 0);
       NIR_PASS(progress, s, nir_opt_trivial_continues);
       NIR_PASS(progress, s, nir_opt_vectorize, ntt_should_vectorize_instr, NULL);
       NIR_PASS(progress, s, nir_opt_undef);
diff --git a/src/gallium/drivers/etnaviv/etnaviv_compiler_nir.c b/src/gallium/drivers/etnaviv/etnaviv_compiler_nir.c
index 74cec72c814f..551086b6490d 100644
--- a/src/gallium/drivers/etnaviv/etnaviv_compiler_nir.c
+++ b/src/gallium/drivers/etnaviv/etnaviv_compiler_nir.c
@@ -148,7 +148,7 @@ etna_optimize_loop(nir_shader *s)
       NIR_PASS_V(s, nir_lower_vars_to_ssa);
       progress |= OPT(s, nir_opt_copy_prop_vars);
       progress |= OPT(s, nir_opt_shrink_stores, true);
-      progress |= OPT(s, nir_opt_shrink_vectors);
+      progress |= OPT(s, nir_opt_shrink_vectors, 0);
       progress |= OPT(s, nir_copy_prop);
       progress |= OPT(s, nir_opt_dce);
       progress |= OPT(s, nir_opt_cse);
diff --git a/src/gallium/drivers/i915/i915_screen.c b/src/gallium/drivers/i915/i915_screen.c
index 2b12968fe2f3..87267c1f331f 100644
--- a/src/gallium/drivers/i915/i915_screen.c
+++ b/src/gallium/drivers/i915/i915_screen.c
@@ -208,7 +208,7 @@ i915_optimize_nir(struct nir_shader *s)
       NIR_PASS(progress, s, nir_opt_algebraic);
       NIR_PASS(progress, s, nir_opt_constant_folding);
       NIR_PASS(progress, s, nir_opt_shrink_stores, true);
-      NIR_PASS(progress, s, nir_opt_shrink_vectors);
+      NIR_PASS(progress, s, nir_opt_shrink_vectors, 0);
       NIR_PASS(progress, s, nir_opt_trivial_continues);
       NIR_PASS(progress, s, nir_opt_undef);
       NIR_PASS(progress, s, nir_opt_loop_unroll);
diff --git a/src/intel/compiler/brw_nir.c b/src/intel/compiler/brw_nir.c
index 5c6291b6aca8..a40eeb19e602 100644
--- a/src/intel/compiler/brw_nir.c
+++ b/src/intel/compiler/brw_nir.c
@@ -559,7 +559,7 @@ brw_nir_optimize(nir_shader *nir, const struct brw_compiler *compiler,
          OPT(nir_lower_alu_to_scalar, NULL, NULL);
       } else {
          OPT(nir_opt_shrink_stores, true);
-         OPT(nir_opt_shrink_vectors);
+         OPT(nir_opt_shrink_vectors, 0);
       }
 
       OPT(nir_copy_prop);
diff --git a/src/panfrost/bifrost/bifrost_compile.c b/src/panfrost/bifrost/bifrost_compile.c
index 0978f23290ad..f8c7e27bcaf1 100644
--- a/src/panfrost/bifrost/bifrost_compile.c
+++ b/src/panfrost/bifrost/bifrost_compile.c
@@ -3262,7 +3262,7 @@ bi_emit_texc_offset_ms_index(bi_builder *b, nir_tex_instr *instr)
              nir_src_as_uint(instr->src[offs_idx].src) != 0)) {
                 unsigned nr = nir_src_num_components(instr->src[offs_idx].src);
                 bi_index idx = bi_src_index(&instr->src[offs_idx].src);
-                dest = bi_mkvec_v4i8(b, 
+                dest = bi_mkvec_v4i8(b,
                                 (nr > 0) ? bi_byte(bi_extract(b, idx, 0), 0) : bi_imm_u8(0),
                                 (nr > 1) ? bi_byte(bi_extract(b, idx, 1), 0) : bi_imm_u8(0),
                                 (nr > 2) ? bi_byte(bi_extract(b, idx, 2), 0) : bi_imm_u8(0),
@@ -4620,7 +4620,7 @@ bi_optimize_nir(nir_shader *nir, unsigned gpu_id, bool is_blend)
                 NIR_PASS(progress, nir, nir_opt_undef);
                 NIR_PASS(progress, nir, nir_lower_undef_to_zero);
 
-                NIR_PASS(progress, nir, nir_opt_shrink_vectors);
+                NIR_PASS(progress, nir, nir_opt_shrink_vectors, 0);
                 NIR_PASS(progress, nir, nir_opt_loop_unroll);
         } while (progress);
 
-- 
GitLab


From e484b65e0d9b114729fdf23b590a19ccbe70c1f5 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Timur=20Krist=C3=B3f?= <timur.kristof@gmail.com>
Date: Thu, 14 Apr 2022 23:45:27 +0200
Subject: [PATCH 2/3] nir/opt_shrink_vectors: Trim starting components using
 component index.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Timur Kristóf <timur.kristof@gmail.com>
---
 src/compiler/nir/nir.h                    |  4 +
 src/compiler/nir/nir_opt_shrink_vectors.c | 99 +++++++++++++++++++----
 2 files changed, 89 insertions(+), 14 deletions(-)

diff --git a/src/compiler/nir/nir.h b/src/compiler/nir/nir.h
index d283fc2d57d5..b4b207e2638f 100644
--- a/src/compiler/nir/nir.h
+++ b/src/compiler/nir/nir.h
@@ -5585,6 +5585,10 @@ bool nir_opt_phi_precision(nir_shader *shader);
 
 bool nir_opt_shrink_stores(nir_shader *shader, bool shrink_image_store);
 
+typedef enum {
+   nir_opt_shrink_vectors_use_component = (1 << 0),
+} nir_opt_shrink_vectors_options;
+
 bool nir_opt_shrink_vectors(nir_shader *shader, unsigned options);
 
 bool nir_opt_trivial_continues(nir_shader *shader);
diff --git a/src/compiler/nir/nir_opt_shrink_vectors.c b/src/compiler/nir/nir_opt_shrink_vectors.c
index 9c3ae34474b9..a1e7b2ad2b8d 100644
--- a/src/compiler/nir/nir_opt_shrink_vectors.c
+++ b/src/compiler/nir/nir_opt_shrink_vectors.c
@@ -59,7 +59,7 @@ round_up_components(unsigned n)
 }
 
 static bool
-shrink_dest_to_read_mask(nir_ssa_def *def)
+trim_trailing_unused(nir_ssa_def *def)
 {
    /* early out if there's nothing to do. */
    if (def->num_components == 1)
@@ -90,6 +90,83 @@ shrink_dest_to_read_mask(nir_ssa_def *def)
    return false;
 }
 
+static bool
+shrink_to_used_components(nir_builder *b,
+                          nir_intrinsic_instr *intrin,
+                          unsigned options)
+{
+   /* When the intrinsic doesn't have a component index,
+    * or the backend doesn't support the component,
+    * fall back to the old method and just trim unused
+    * components at the end.
+    */
+
+   const bool can_use_component =
+      (options & nir_opt_shrink_vectors_use_component) &&
+      nir_intrinsic_has_component(intrin);
+
+   if (!can_use_component) {
+      bool progress = trim_trailing_unused(&intrin->dest.ssa);
+      if (progress)
+         intrin->num_components = intrin->dest.ssa.num_components;
+
+      return progress;
+   }
+
+   /* If there is only 1 component, there is nothing to trim.
+    * In case this is not used, DCE can delete it.
+    */
+   nir_ssa_def *def = &intrin->dest.ssa;
+   if (def->num_components == 1)
+      return false;
+
+   /* Check which components are read.
+    * If none are, DCE can delete this.
+    */
+   unsigned mask = nir_ssa_def_components_read(def);
+   if (!mask)
+      return false;
+
+   /* Find out how many components can we trim
+    * from the start and end. If none, return early.
+    */
+   int trim_start = ffs(mask) - 1;
+   int trim_end = def->num_components - util_last_bit(mask);
+
+   if (!trim_start && !trim_end)
+      return false;
+
+   /* Adjust component offset and num_components
+    * in the intrinsic to account for the trimmed components.
+    */
+   unsigned old_component = nir_intrinsic_component(intrin);
+   unsigned dest_num_components = def->num_components;
+   nir_intrinsic_set_component(intrin, old_component + trim_start);
+   def->num_components = dest_num_components - trim_start - trim_end;
+   intrin->num_components = def->num_components;
+
+   /* Create a new SSA def where we fill the space left
+    * by the unused components with undefs.
+    */
+   b->cursor = nir_after_instr(def->parent_instr);
+   nir_ssa_def *undef_start =
+      trim_start ? nir_ssa_undef(b, trim_start, def->bit_size) : NULL;
+   nir_ssa_def *undef_end =
+      trim_end ? nir_ssa_undef(b, trim_end, def->bit_size) : NULL;
+   nir_ssa_def *all_srcs[3] = {undef_start, def, undef_end};
+   const unsigned num_srcs = (trim_start ? 1 : 0) + 1 + (trim_end ? 1 : 0);
+   nir_ssa_def *replacement =
+      nir_extract_bits(b, trim_start ? all_srcs : &all_srcs[1],
+                          num_srcs, 0, dest_num_components, def->bit_size);
+
+   /* Finally, replace all uses of the old SSA def with the
+    * replacement that now uses the shrunk vector.
+    */
+   nir_ssa_def_rewrite_uses_after(def, replacement, replacement->parent_instr);
+
+   return true;
+}
+
 static void
 reswizzle_alu_uses(nir_ssa_def *def, uint8_t *reswizzle)
 {
@@ -238,7 +315,7 @@ opt_shrink_vectors_alu(nir_builder *b, nir_alu_instr *instr)
 }
 
 static bool
-opt_shrink_vectors_intrinsic(nir_builder *b, nir_intrinsic_instr *instr)
+opt_shrink_vectors_intrinsic(nir_builder *b, nir_intrinsic_instr *instr, unsigned options)
 {
    switch (instr->intrinsic) {
    case nir_intrinsic_load_uniform:
@@ -263,13 +340,7 @@ opt_shrink_vectors_intrinsic(nir_builder *b, nir_intrinsic_instr *instr)
    /* Must be a vectorized intrinsic that we can resize. */
    assert(instr->num_components != 0);
 
-   /* Trim the dest to the used channels */
-   if (shrink_dest_to_read_mask(&instr->dest.ssa)) {
-      instr->num_components = instr->dest.ssa.num_components;
-      return true;
-   }
-
-   return false;
+   return shrink_to_used_components(b, instr, options);
 }
 
 static bool
@@ -329,11 +400,11 @@ opt_shrink_vectors_load_const(nir_load_const_instr *instr)
 static bool
 opt_shrink_vectors_ssa_undef(nir_ssa_undef_instr *instr)
 {
-   return shrink_dest_to_read_mask(&instr->def);
+   return trim_trailing_unused(&instr->def);
 }
 
 static bool
-opt_shrink_vectors_instr(nir_builder *b, nir_instr *instr)
+opt_shrink_vectors_instr(nir_builder *b, nir_instr *instr, unsigned options)
 {
    b->cursor = nir_before_instr(instr);
 
@@ -342,7 +413,7 @@ opt_shrink_vectors_instr(nir_builder *b, nir_instr *instr)
       return opt_shrink_vectors_alu(b, nir_instr_as_alu(instr));
 
    case nir_instr_type_intrinsic:
-      return opt_shrink_vectors_intrinsic(b, nir_instr_as_intrinsic(instr));
+      return opt_shrink_vectors_intrinsic(b, nir_instr_as_intrinsic(instr), options);
 
    case nir_instr_type_load_const:
       return opt_shrink_vectors_load_const(nir_instr_as_load_const(instr));
@@ -370,8 +441,8 @@ nir_opt_shrink_vectors(nir_shader *shader, UNUSED unsigned options)
       nir_builder_init(&b, function->impl);
 
       nir_foreach_block_reverse(block, function->impl) {
-         nir_foreach_instr_reverse(instr, block) {
-            progress |= opt_shrink_vectors_instr(&b, instr);
+         nir_foreach_instr_reverse_safe(instr, block) {
+            progress |= opt_shrink_vectors_instr(&b, instr, options);
          }
       }
 
-- 
GitLab


From 452e4029ac82f8e30bfd99f5b268b88cd72adffa Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Timur=20Krist=C3=B3f?= <timur.kristof@gmail.com>
Date: Thu, 22 Sep 2022 15:33:29 +0200
Subject: [PATCH 3/3] radv: Use nir_opt_shrink_vectors_use_component.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Timur Kristóf <timur.kristof@gmail.com>
---
 src/amd/vulkan/radv_pipeline.c | 4 ++--
 src/amd/vulkan/radv_shader.c   | 2 +-
 2 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/src/amd/vulkan/radv_pipeline.c b/src/amd/vulkan/radv_pipeline.c
index 16260135cdaf..072905f82e78 100644
--- a/src/amd/vulkan/radv_pipeline.c
+++ b/src/amd/vulkan/radv_pipeline.c
@@ -2314,7 +2314,7 @@ radv_lower_io_to_scalar_early(nir_shader *nir, nir_variable_mode mask)
    if (progress) {
       /* Optimize the new vector code and then remove dead vars */
       NIR_PASS(_, nir, nir_copy_prop);
-      NIR_PASS(_, nir, nir_opt_shrink_vectors, 0);
+      NIR_PASS(_, nir, nir_opt_shrink_vectors, nir_opt_shrink_vectors_use_component);
 
       if (mask & nir_var_shader_out) {
          /* Optimize swizzled movs of load_const for nir_link_opt_varyings's constant propagation. */
@@ -3800,7 +3800,7 @@ radv_postprocess_nir(struct radv_pipeline *pipeline,
    NIR_PASS_V(stage->nir, radv_nir_apply_pipeline_layout, device, pipeline_layout,
               &stage->info, &stage->args);
 
-   NIR_PASS(_, stage->nir, nir_opt_shrink_vectors, 0);
+   NIR_PASS(_, stage->nir, nir_opt_shrink_vectors, nir_opt_shrink_vectors_use_component);
 
    NIR_PASS(_, stage->nir, nir_lower_alu_width, opt_vectorize_callback, device);
 
diff --git a/src/amd/vulkan/radv_shader.c b/src/amd/vulkan/radv_shader.c
index db7e0de0df0d..149e4dd6dcb9 100644
--- a/src/amd/vulkan/radv_shader.c
+++ b/src/amd/vulkan/radv_shader.c
@@ -214,7 +214,7 @@ radv_optimize_nir(struct nir_shader *shader, bool optimize_conservatively, bool
       }
    } while (progress && !optimize_conservatively);
 
-   NIR_PASS(progress, shader, nir_opt_shrink_vectors, 0);
+   NIR_PASS(progress, shader, nir_opt_shrink_vectors, nir_opt_shrink_vectors_use_component);
    NIR_PASS(progress, shader, nir_remove_dead_variables,
             nir_var_function_temp | nir_var_shader_in | nir_var_shader_out, NULL);
 
-- 
GitLab

