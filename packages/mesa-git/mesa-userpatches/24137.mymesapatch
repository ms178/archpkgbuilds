From 0414697571018ea49f3cd0e0081f83813cac3d11 Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Wed, 12 Jul 2023 20:50:53 +0100
Subject: [PATCH 1/3] radv: add conformant_trunc_coord to cache UUID

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
Cc: mesa-stable
---
 src/amd/vulkan/radv_physical_device.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/src/amd/vulkan/radv_physical_device.c b/src/amd/vulkan/radv_physical_device.c
index 5631328aa43d5..cd7b370eed5e4 100644
--- a/src/amd/vulkan/radv_physical_device.c
+++ b/src/amd/vulkan/radv_physical_device.c
@@ -102,6 +102,7 @@ static int
 radv_device_get_cache_uuid(struct radv_physical_device *pdevice, void *uuid)
 {
    enum radeon_family family = pdevice->rad_info.family;
+   bool conformant_trunc_coord = pdevice->rad_info.conformant_trunc_coord;
    struct mesa_sha1 ctx;
    unsigned char sha1[20];
    unsigned ptr_size = sizeof(void *);
@@ -127,6 +128,7 @@ radv_device_get_cache_uuid(struct radv_physical_device *pdevice, void *uuid)
 #endif
 
    _mesa_sha1_update(&ctx, &family, sizeof(family));
+   _mesa_sha1_update(&ctx, &conformant_trunc_coord, sizeof(conformant_trunc_coord));
    _mesa_sha1_update(&ctx, &ptr_size, sizeof(ptr_size));
    _mesa_sha1_final(&ctx, sha1);
 
-- 
GitLab


From fdf9cebf4d00819be2ce4014360d76ea8f811dfb Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Wed, 12 Jul 2023 20:51:14 +0100
Subject: [PATCH 2/3] radv: don't unset TRUNC_COORD if
 conformant_trunc_coord=true

This isn't necessary.

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
---
 src/amd/vulkan/nir/radv_nir_apply_pipeline_layout.c | 9 +++++++--
 1 file changed, 7 insertions(+), 2 deletions(-)

diff --git a/src/amd/vulkan/nir/radv_nir_apply_pipeline_layout.c b/src/amd/vulkan/nir/radv_nir_apply_pipeline_layout.c
index a857c28cfa352..c8dbf194a8237 100644
--- a/src/amd/vulkan/nir/radv_nir_apply_pipeline_layout.c
+++ b/src/amd/vulkan/nir/radv_nir_apply_pipeline_layout.c
@@ -34,6 +34,7 @@ typedef struct {
    uint32_t address32_hi;
    bool disable_aniso_single_level;
    bool has_image_load_dcc_bug;
+   bool conformant_trunc_coord;
 
    const struct radv_shader_args *args;
    const struct radv_shader_info *info;
@@ -245,7 +246,9 @@ get_sampler_desc(nir_builder *b, apply_layout_state *state, nir_deref_instr *der
          }
       }
 
-      uint32_t dword0_mask = tex->op == nir_texop_tg4 ? C_008F30_TRUNC_COORD : 0xffffffffu;
+      uint32_t dword0_mask = tex->op == nir_texop_tg4 && !state->conformant_trunc_coord
+                                ? C_008F30_TRUNC_COORD
+                                : 0xffffffffu;
       const uint32_t *samplers = radv_immutable_samplers(layout, binding);
       return nir_imm_ivec4(b, samplers[constant_index * 4 + 0] & dword0_mask, samplers[constant_index * 4 + 1],
                            samplers[constant_index * 4 + 2], samplers[constant_index * 4 + 3]);
@@ -329,7 +332,8 @@ get_sampler_desc(nir_builder *b, apply_layout_state *state, nir_deref_instr *der
       comp[6] = nir_iand_imm(b, comp[6], C_00A018_WRITE_COMPRESS_ENABLE);
 
       return nir_vec(b, comp, 8);
-   } else if (desc_type == AC_DESC_SAMPLER && tex->op == nir_texop_tg4) {
+   } else if (desc_type == AC_DESC_SAMPLER && tex->op == nir_texop_tg4 &&
+              !state->conformant_trunc_coord) {
       nir_ssa_def *comp[4];
       for (unsigned i = 0; i < 4; i++)
          comp[i] = nir_channel(b, desc, i);
@@ -507,6 +511,7 @@ radv_nir_apply_pipeline_layout(nir_shader *shader, struct radv_device *device,
       .address32_hi = device->physical_device->rad_info.address32_hi,
       .disable_aniso_single_level = device->instance->disable_aniso_single_level,
       .has_image_load_dcc_bug = device->physical_device->rad_info.has_image_load_dcc_bug,
+      .conformant_trunc_coord = device->physical_device->rad_info.conformant_trunc_coord,
       .args = args,
       .info = info,
       .pipeline_layout = layout,
-- 
GitLab


From d786417a1fd29f412be31e4a24976d0ec50aaa74 Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Wed, 12 Jul 2023 21:14:26 +0100
Subject: [PATCH 3/3] ac/nir: always round cube array layers

It seems this is still necessary if conformant_trunc_coord=true.

Fixes various dEQP-VK.texture.shadow.cube_array.* and
dEQP-VK.glsl.texture_functions.texture*samplercubearray* failures with
conformant_trunc_coord.

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
Cc: 23.2 <mesa-stable>
---
 src/amd/common/ac_nir.h           | 2 +-
 src/amd/common/ac_nir_lower_tex.c | 3 ++-
 2 files changed, 3 insertions(+), 2 deletions(-)

diff --git a/src/amd/common/ac_nir.h b/src/amd/common/ac_nir.h
index 264355c9dfff1..ae568e5242618 100644
--- a/src/amd/common/ac_nir.h
+++ b/src/amd/common/ac_nir.h
@@ -316,7 +316,7 @@ typedef struct {
    enum amd_gfx_level gfx_level;
 
    /* If true, round the layer component of the coordinates source to the nearest
-    * integer for all array ops.
+    * integer for all array ops. This is always done for cube array ops.
     */
    bool lower_array_layer_round_even;
 
diff --git a/src/amd/common/ac_nir_lower_tex.c b/src/amd/common/ac_nir_lower_tex.c
index 3e4ec1a10129d..faf307a9f1a39 100644
--- a/src/amd/common/ac_nir_lower_tex.c
+++ b/src/amd/common/ac_nir_lower_tex.c
@@ -176,7 +176,8 @@ lower_tex_coords(nir_builder *b, nir_tex_instr *tex, nir_ssa_def **coords,
                  const ac_nir_lower_tex_options *options)
 {
    bool progress = false;
-   if (options->lower_array_layer_round_even && tex->is_array && tex->op != nir_texop_lod)
+   if ((options->lower_array_layer_round_even || tex->sampler_dim == GLSL_SAMPLER_DIM_CUBE) &&
+       tex->is_array && tex->op != nir_texop_lod)
       progress |= lower_array_layer_round_even(b, tex, coords);
 
    if (tex->sampler_dim != GLSL_SAMPLER_DIM_CUBE &&
-- 
GitLab

