From 7e801f6b42e626866a75334f54834e8a9aabe6a1 Mon Sep 17 00:00:00 2001
From: Mike Blumenkrantz <michael.blumenkrantz@gmail.com>
Date: Thu, 26 Jan 2023 12:33:40 -0500
Subject: [PATCH 1/6] radv: delete radv_graphics_pipeline_compile() asserts

validation should catch these by now
---
 src/amd/vulkan/radv_pipeline.c | 13 -------------
 1 file changed, 13 deletions(-)

diff --git a/src/amd/vulkan/radv_pipeline.c b/src/amd/vulkan/radv_pipeline.c
index 8c6b400245e2..b99dbaa0838b 100644
--- a/src/amd/vulkan/radv_pipeline.c
+++ b/src/amd/vulkan/radv_pipeline.c
@@ -3448,19 +3448,6 @@ radv_graphics_pipeline_compile(struct radv_pipeline *pipeline,
          *last_vgt_api_stage = s;
    }
 
-   ASSERTED bool primitive_shading =
-      stages[MESA_SHADER_VERTEX].entrypoint || stages[MESA_SHADER_TESS_CTRL].entrypoint ||
-      stages[MESA_SHADER_TESS_EVAL].entrypoint || stages[MESA_SHADER_GEOMETRY].entrypoint;
-   ASSERTED bool mesh_shading =
-      stages[MESA_SHADER_MESH].entrypoint;
-
-   /* Primitive and mesh shading must not be mixed in the same pipeline. */
-   assert(!primitive_shading || !mesh_shading);
-   /* Mesh shaders are mandatory in mesh shading pipelines. */
-   assert(mesh_shading == !!stages[MESA_SHADER_MESH].entrypoint);
-   /* Mesh shaders always need NGG. */
-   assert(!mesh_shading || pipeline_key->use_ngg);
-
    radv_hash_shaders(hash, stages, MESA_VULKAN_SHADER_STAGES, pipeline_layout, pipeline_key,
                      radv_get_hash_flags(device, keep_statistic_info));
 
-- 
GitLab


From c1165e1f918a111e73ee67c382ff067c8f08bf7b Mon Sep 17 00:00:00 2001
From: Mike Blumenkrantz <michael.blumenkrantz@gmail.com>
Date: Thu, 26 Jan 2023 12:55:25 -0500
Subject: [PATCH 2/6] radv: use stage mask for another small
 radv_create_shaders() simplification

---
 src/amd/vulkan/radv_pipeline.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/amd/vulkan/radv_pipeline.c b/src/amd/vulkan/radv_pipeline.c
index b99dbaa0838b..76b29078d279 100644
--- a/src/amd/vulkan/radv_pipeline.c
+++ b/src/amd/vulkan/radv_pipeline.c
@@ -3466,8 +3466,7 @@ radv_graphics_pipeline_compile(struct radv_pipeline *pipeline,
    if (flags & VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT)
       return VK_PIPELINE_COMPILE_REQUIRED;
 
-   if (pipeline->type == RADV_PIPELINE_GRAPHICS &&
-       !(radv_pipeline_to_graphics(pipeline)->active_stages & VK_SHADER_STAGE_FRAGMENT_BIT)) {
+   if (pipeline->type == RADV_PIPELINE_GRAPHICS && !(active_stages & VK_SHADER_STAGE_FRAGMENT_BIT)) {
       nir_builder fs_b = radv_meta_init_shader(device, MESA_SHADER_FRAGMENT, "noop_fs");
 
       stages[MESA_SHADER_FRAGMENT] = (struct radv_pipeline_stage) {
@@ -3480,6 +3479,7 @@ radv_graphics_pipeline_compile(struct radv_pipeline *pipeline,
       };
 
       noop_fs = true;
+      active_stages |= VK_SHADER_STAGE_FRAGMENT_BIT;
    }
 
    radv_pipeline_get_nir(pipeline, stages, pipeline_key, retain_shaders);
-- 
GitLab


From 843425287c44a847cbb62d80bba648639395f490 Mon Sep 17 00:00:00 2001
From: Mike Blumenkrantz <michael.blumenkrantz@gmail.com>
Date: Thu, 26 Jan 2023 12:54:24 -0500
Subject: [PATCH 3/6] radv: pass stage mask to radv_pipeline_get_nir()

---
 src/amd/vulkan/radv_pipeline.c | 9 +++------
 1 file changed, 3 insertions(+), 6 deletions(-)

diff --git a/src/amd/vulkan/radv_pipeline.c b/src/amd/vulkan/radv_pipeline.c
index 76b29078d279..36acbaa8a768 100644
--- a/src/amd/vulkan/radv_pipeline.c
+++ b/src/amd/vulkan/radv_pipeline.c
@@ -3121,14 +3121,11 @@ radv_pipeline_stage_retain_shader(struct radv_pipeline *pipeline, struct radv_pi
 
 static void
 radv_pipeline_get_nir(struct radv_pipeline *pipeline, struct radv_pipeline_stage *stages,
-                      const struct radv_pipeline_key *pipeline_key, bool retain_shaders)
+                      const struct radv_pipeline_key *pipeline_key, bool retain_shaders, VkShaderStageFlags active_stages)
 {
    struct radv_device *device = pipeline->device;
 
-   for (unsigned s = 0; s < MESA_VULKAN_SHADER_STAGES; s++) {
-      if (!stages[s].entrypoint)
-         continue;
-
+   radv_foreach_stage(s, active_stages) {
       /* Do not try to get the NIR when we already have the assembly. */
       if (pipeline->shaders[s])
          continue;
@@ -3482,7 +3479,7 @@ radv_graphics_pipeline_compile(struct radv_pipeline *pipeline,
       active_stages |= VK_SHADER_STAGE_FRAGMENT_BIT;
    }
 
-   radv_pipeline_get_nir(pipeline, stages, pipeline_key, retain_shaders);
+   radv_pipeline_get_nir(pipeline, stages, pipeline_key, retain_shaders, active_stages);
 
    if (retain_shaders) {
       result = VK_SUCCESS;
-- 
GitLab


From 690c901ef22a5e32d848f11e59332e583ab1c757 Mon Sep 17 00:00:00 2001
From: Mike Blumenkrantz <michael.blumenkrantz@gmail.com>
Date: Thu, 26 Jan 2023 12:54:45 -0500
Subject: [PATCH 4/6] radv: pass stage mask through to
 radv_pipeline_nir_to_asm()

---
 src/amd/vulkan/radv_pipeline.c | 11 +++--------
 1 file changed, 3 insertions(+), 8 deletions(-)

diff --git a/src/amd/vulkan/radv_pipeline.c b/src/amd/vulkan/radv_pipeline.c
index 36acbaa8a768..21e2210c5191 100644
--- a/src/amd/vulkan/radv_pipeline.c
+++ b/src/amd/vulkan/radv_pipeline.c
@@ -3055,15 +3055,10 @@ radv_pipeline_nir_to_asm(struct radv_pipeline *pipeline, struct radv_pipeline_st
                          bool keep_executable_info, bool keep_statistic_info,
                          gl_shader_stage last_vgt_api_stage,
                          struct radv_shader_binary **binaries,
-                         struct radv_shader_binary **gs_copy_binary)
+                         struct radv_shader_binary **gs_copy_binary,
+                         VkShaderStageFlags active_stages)
 {
    struct radv_device *device = pipeline->device;
-   unsigned active_stages = 0;
-
-   for (int i = 0; i < MESA_VULKAN_SHADER_STAGES; i++) {
-      if (stages[i].nir)
-         active_stages |= (1 << i);
-   }
 
    bool pipeline_has_ngg = last_vgt_api_stage != MESA_SHADER_NONE &&
                            stages[last_vgt_api_stage].info.is_ngg;
@@ -3558,7 +3553,7 @@ radv_graphics_pipeline_compile(struct radv_pipeline *pipeline,
 
    /* Compile NIR shaders to AMD assembly. */
    radv_pipeline_nir_to_asm(pipeline, stages, pipeline_key, pipeline_layout, keep_executable_info,
-                            keep_statistic_info, *last_vgt_api_stage, binaries, &gs_copy_binary);
+                            keep_statistic_info, *last_vgt_api_stage, binaries, &gs_copy_binary, active_stages);
 
    if (keep_executable_info) {
       for (int i = 0; i < MESA_VULKAN_SHADER_STAGES; ++i) {
-- 
GitLab


From 693a4aea2a85ba314b4c1f49d9a62b03ea98e291 Mon Sep 17 00:00:00 2001
From: Mike Blumenkrantz <michael.blumenkrantz@gmail.com>
Date: Mon, 30 Jan 2023 11:10:35 -0500
Subject: [PATCH 5/6] radv: use active_stages in radv_hash_shaders()

---
 src/amd/vulkan/radv_pipeline.c       |  4 ++--
 src/amd/vulkan/radv_pipeline_cache.c | 13 +++++++------
 2 files changed, 9 insertions(+), 8 deletions(-)

diff --git a/src/amd/vulkan/radv_pipeline.c b/src/amd/vulkan/radv_pipeline.c
index 21e2210c5191..f3e996804c41 100644
--- a/src/amd/vulkan/radv_pipeline.c
+++ b/src/amd/vulkan/radv_pipeline.c
@@ -3440,7 +3440,7 @@ radv_graphics_pipeline_compile(struct radv_pipeline *pipeline,
          *last_vgt_api_stage = s;
    }
 
-   radv_hash_shaders(hash, stages, MESA_VULKAN_SHADER_STAGES, pipeline_layout, pipeline_key,
+   radv_hash_shaders(hash, stages, active_stages, pipeline_layout, pipeline_key,
                      radv_get_hash_flags(device, keep_statistic_info));
 
    pipeline->pipeline_hash = *(uint64_t *)hash;
@@ -5376,7 +5376,7 @@ radv_compute_pipeline_compile(struct radv_pipeline *pipeline,
    if (custom_hash) {
       memcpy(hash, custom_hash, 20);
    } else {
-      radv_hash_shaders(hash, &cs_stage, 1, pipeline_layout, pipeline_key,
+      radv_hash_shaders(hash, &cs_stage, VK_SHADER_STAGE_COMPUTE_BIT, pipeline_layout, pipeline_key,
                         radv_get_hash_flags(device, keep_statistic_info));
    }
 
diff --git a/src/amd/vulkan/radv_pipeline_cache.c b/src/amd/vulkan/radv_pipeline_cache.c
index ab89e70f9ee0..c67b96134762 100644
--- a/src/amd/vulkan/radv_pipeline_cache.c
+++ b/src/amd/vulkan/radv_pipeline_cache.c
@@ -130,7 +130,7 @@ entry_size(const struct cache_entry *entry)
 
 void
 radv_hash_shaders(unsigned char *hash, const struct radv_pipeline_stage *stages,
-                  uint32_t stage_count, const struct radv_pipeline_layout *layout,
+                  uint32_t active_stages, const struct radv_pipeline_layout *layout,
                   const struct radv_pipeline_key *key, uint32_t flags)
 {
    struct mesa_sha1 ctx;
@@ -141,11 +141,12 @@ radv_hash_shaders(unsigned char *hash, const struct radv_pipeline_stage *stages,
    if (layout)
       _mesa_sha1_update(&ctx, layout->sha1, sizeof(layout->sha1));
 
-   for (unsigned s = 0; s < stage_count; s++) {
-      if (!stages[s].entrypoint)
-         continue;
-
-      _mesa_sha1_update(&ctx, stages[s].shader_sha1, sizeof(stages[s].shader_sha1));
+   if (active_stages == VK_SHADER_STAGE_COMPUTE_BIT) {
+      _mesa_sha1_update(&ctx, stages[0].shader_sha1, sizeof(stages[0].shader_sha1));
+   } else {
+      radv_foreach_stage(s, active_stages) {
+         _mesa_sha1_update(&ctx, stages[s].shader_sha1, sizeof(stages[s].shader_sha1));
+      }
    }
    _mesa_sha1_update(&ctx, &flags, 4);
    _mesa_sha1_final(&ctx, hash);
-- 
GitLab


From e4148842239aeeffc9a7046a799cb4e76affa03f Mon Sep 17 00:00:00 2001
From: Mike Blumenkrantz <michael.blumenkrantz@gmail.com>
Date: Thu, 26 Jan 2023 12:55:02 -0500
Subject: [PATCH 6/6] radv: use stage mask to avoid huge memset in
 radv_create_shaders()

this has a noticeable impact on pipeline creation
---
 src/amd/vulkan/radv_pipeline.c | 9 ++++++---
 1 file changed, 6 insertions(+), 3 deletions(-)

diff --git a/src/amd/vulkan/radv_pipeline.c b/src/amd/vulkan/radv_pipeline.c
index f3e996804c41..eaa729553e4e 100644
--- a/src/amd/vulkan/radv_pipeline.c
+++ b/src/amd/vulkan/radv_pipeline.c
@@ -3403,7 +3403,7 @@ radv_graphics_pipeline_compile(struct radv_pipeline *pipeline,
    bool keep_statistic_info = (flags & VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR) ||
                               (device->instance->debug_flags & RADV_DEBUG_DUMP_SHADER_STATS) ||
                               device->keep_shader_info;
-   struct radv_pipeline_stage stages[MESA_VULKAN_SHADER_STAGES] = {0};
+   struct radv_pipeline_stage stages[MESA_VULKAN_SHADER_STAGES];
    VkPipelineCreationFeedback pipeline_feedback = {
       .flags = VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT,
    };
@@ -3425,8 +3425,6 @@ radv_graphics_pipeline_compile(struct radv_pipeline *pipeline,
       radv_pipeline_stage_init(sinfo, &stages[stage], stage);
    }
 
-   radv_pipeline_load_retained_shaders(pipeline, stages);
-
    VkShaderStageFlags active_stages;
 
    if (pipeline->type == RADV_PIPELINE_GRAPHICS) {
@@ -3434,6 +3432,10 @@ radv_graphics_pipeline_compile(struct radv_pipeline *pipeline,
    } else {
       active_stages = radv_pipeline_to_graphics_lib(pipeline)->base.active_stages;
    }
+   u_foreach_bit(s, (~active_stages) & BITFIELD_MASK(MESA_VULKAN_SHADER_STAGES))
+      stages[s].nir = NULL;
+
+   radv_pipeline_load_retained_shaders(pipeline, stages);
 
    radv_foreach_stage(s, active_stages) {
       if (s < MESA_SHADER_FRAGMENT || s == MESA_SHADER_MESH)
@@ -3468,6 +3470,7 @@ radv_graphics_pipeline_compile(struct radv_pipeline *pipeline,
          .feedback = {
             .flags = VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT,
          },
+         .spirv.size = 0,
       };
 
       noop_fs = true;
-- 
GitLab

