From 905719e5c0659a1c717a8d8313cea795f04c1167 Mon Sep 17 00:00:00 2001
From: Mike Blumenkrantz <michael.blumenkrantz@gmail.com>
Date: Thu, 26 Jan 2023 12:33:40 -0500
Subject: [PATCH 1/7] radv: remove redundant mesh shader assert

this is assert(a == !!a) where a is a bool
---
 src/amd/vulkan/radv_pipeline.c | 2 --
 1 file changed, 2 deletions(-)

diff --git a/src/amd/vulkan/radv_pipeline.c b/src/amd/vulkan/radv_pipeline.c
index b3613635054e..8c33ecef8882 100644
--- a/src/amd/vulkan/radv_pipeline.c
+++ b/src/amd/vulkan/radv_pipeline.c
@@ -3445,8 +3445,6 @@ radv_create_shaders(struct radv_pipeline *pipeline, struct radv_pipeline_layout
 
    /* Primitive and mesh shading must not be mixed in the same pipeline. */
    assert(!primitive_shading || !mesh_shading);
-   /* Mesh shaders are mandatory in mesh shading pipelines. */
-   assert(mesh_shading == !!stages[MESA_SHADER_MESH].entrypoint);
    /* Mesh shaders always need NGG. */
    assert(!mesh_shading || pipeline_key->use_ngg);
 
-- 
GitLab


From 5d2e6428d5d0d003339775e5b74a4073082017ef Mon Sep 17 00:00:00 2001
From: Mike Blumenkrantz <michael.blumenkrantz@gmail.com>
Date: Thu, 26 Jan 2023 12:51:58 -0500
Subject: [PATCH 2/7] radv: track a mask of shader stages in
 radv_create_shaders()

no functional changes
---
 src/amd/vulkan/radv_pipeline.c | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/src/amd/vulkan/radv_pipeline.c b/src/amd/vulkan/radv_pipeline.c
index 8c33ecef8882..c9601938671d 100644
--- a/src/amd/vulkan/radv_pipeline.c
+++ b/src/amd/vulkan/radv_pipeline.c
@@ -3405,6 +3405,7 @@ radv_create_shaders(struct radv_pipeline *pipeline, struct radv_pipeline_layout
       !!(flags & VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT);
 
    int64_t pipeline_start = os_time_get_nano();
+   unsigned stage_mask = 0;
 
    for (uint32_t i = 0; i < stageCount; i++) {
       const VkPipelineShaderStageCreateInfo *sinfo = &pStages[i];
@@ -3417,6 +3418,7 @@ radv_create_shaders(struct radv_pipeline *pipeline, struct radv_pipeline_layout
          continue;
 
       radv_pipeline_stage_init(sinfo, &stages[stage], stage);
+      stage_mask |= BITFIELD_BIT(stage);
    }
 
    radv_pipeline_load_retained_shaders(pipeline, stages);
@@ -3432,6 +3434,7 @@ radv_create_shaders(struct radv_pipeline *pipeline, struct radv_pipeline_layout
       }
 
       radv_foreach_stage(s, active_stages) {
+         stage_mask |= BITFIELD_BIT(s);
          if (s < MESA_SHADER_FRAGMENT || s == MESA_SHADER_MESH)
             *last_vgt_api_stage = s;
       }
@@ -3489,6 +3492,7 @@ radv_create_shaders(struct radv_pipeline *pipeline, struct radv_pipeline_layout
       };
 
       noop_fs = true;
+      stage_mask |= BITFIELD_BIT(MESA_SHADER_FRAGMENT);
    }
 
    radv_pipeline_get_nir(pipeline, stages, pipeline_key, retain_shaders);
-- 
GitLab


From 1cbcdd110e9a05557aa904b8da137f9ff24c7c6e Mon Sep 17 00:00:00 2001
From: Mike Blumenkrantz <michael.blumenkrantz@gmail.com>
Date: Thu, 26 Jan 2023 12:53:17 -0500
Subject: [PATCH 3/7] radv: use stage mask to simplify radv_create_shaders()
 asserts

---
 src/amd/vulkan/radv_pipeline.c | 7 ++-----
 1 file changed, 2 insertions(+), 5 deletions(-)

diff --git a/src/amd/vulkan/radv_pipeline.c b/src/amd/vulkan/radv_pipeline.c
index c9601938671d..e7b727f55b39 100644
--- a/src/amd/vulkan/radv_pipeline.c
+++ b/src/amd/vulkan/radv_pipeline.c
@@ -3440,11 +3440,8 @@ radv_create_shaders(struct radv_pipeline *pipeline, struct radv_pipeline_layout
       }
    }
 
-   ASSERTED bool primitive_shading =
-      stages[MESA_SHADER_VERTEX].entrypoint || stages[MESA_SHADER_TESS_CTRL].entrypoint ||
-      stages[MESA_SHADER_TESS_EVAL].entrypoint || stages[MESA_SHADER_GEOMETRY].entrypoint;
-   ASSERTED bool mesh_shading =
-      stages[MESA_SHADER_MESH].entrypoint;
+   ASSERTED bool primitive_shading = (stage_mask & BITFIELD_MASK(MESA_SHADER_FRAGMENT)) > 0;
+   ASSERTED bool mesh_shading = (stage_mask & BITFIELD_BIT(MESA_SHADER_MESH)) > 0;
 
    /* Primitive and mesh shading must not be mixed in the same pipeline. */
    assert(!primitive_shading || !mesh_shading);
-- 
GitLab


From 97cc4a7a5c7357065b7d94ab21eb16a6f191f2c3 Mon Sep 17 00:00:00 2001
From: Mike Blumenkrantz <michael.blumenkrantz@gmail.com>
Date: Thu, 26 Jan 2023 12:54:24 -0500
Subject: [PATCH 4/7] radv: pass stage mask to radv_pipeline_get_nir()

---
 src/amd/vulkan/radv_pipeline.c | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/src/amd/vulkan/radv_pipeline.c b/src/amd/vulkan/radv_pipeline.c
index e7b727f55b39..321862f097f0 100644
--- a/src/amd/vulkan/radv_pipeline.c
+++ b/src/amd/vulkan/radv_pipeline.c
@@ -3103,12 +3103,12 @@ radv_pipeline_stage_retain_shader(struct radv_pipeline *pipeline, struct radv_pi
 
 static void
 radv_pipeline_get_nir(struct radv_pipeline *pipeline, struct radv_pipeline_stage *stages,
-                      const struct radv_pipeline_key *pipeline_key, bool retain_shaders)
+                      const struct radv_pipeline_key *pipeline_key, bool retain_shaders, unsigned stage_mask)
 {
    struct radv_device *device = pipeline->device;
 
    for (unsigned s = 0; s < MESA_VULKAN_SHADER_STAGES; s++) {
-      if (!stages[s].entrypoint)
+      if (!(stage_mask & BITFIELD_BIT(s)))
          continue;
 
       /* Do not try to get the NIR when we already have the assembly. */
@@ -3492,7 +3492,7 @@ radv_create_shaders(struct radv_pipeline *pipeline, struct radv_pipeline_layout
       stage_mask |= BITFIELD_BIT(MESA_SHADER_FRAGMENT);
    }
 
-   radv_pipeline_get_nir(pipeline, stages, pipeline_key, retain_shaders);
+   radv_pipeline_get_nir(pipeline, stages, pipeline_key, retain_shaders, stage_mask);
 
    if (retain_shaders) {
       result = VK_SUCCESS;
-- 
GitLab


From d9bc76f486cbd119b24f86a8d77aa086bb42c706 Mon Sep 17 00:00:00 2001
From: Mike Blumenkrantz <michael.blumenkrantz@gmail.com>
Date: Thu, 26 Jan 2023 12:54:45 -0500
Subject: [PATCH 5/7] radv: pass stage mask through to
 radv_pipeline_nir_to_asm()

---
 src/amd/vulkan/radv_pipeline.c | 11 +++--------
 1 file changed, 3 insertions(+), 8 deletions(-)

diff --git a/src/amd/vulkan/radv_pipeline.c b/src/amd/vulkan/radv_pipeline.c
index 321862f097f0..361fc7e08776 100644
--- a/src/amd/vulkan/radv_pipeline.c
+++ b/src/amd/vulkan/radv_pipeline.c
@@ -3037,15 +3037,10 @@ radv_pipeline_nir_to_asm(struct radv_pipeline *pipeline, struct radv_pipeline_st
                          bool keep_executable_info, bool keep_statistic_info,
                          gl_shader_stage last_vgt_api_stage,
                          struct radv_shader_binary **binaries,
-                         struct radv_shader_binary **gs_copy_binary)
+                         struct radv_shader_binary **gs_copy_binary,
+                         unsigned active_stages)
 {
    struct radv_device *device = pipeline->device;
-   unsigned active_stages = 0;
-
-   for (int i = 0; i < MESA_VULKAN_SHADER_STAGES; i++) {
-      if (stages[i].nir)
-         active_stages |= (1 << i);
-   }
 
    bool pipeline_has_ngg = last_vgt_api_stage != MESA_SHADER_NONE &&
                            stages[last_vgt_api_stage].info.is_ngg;
@@ -3571,7 +3566,7 @@ radv_create_shaders(struct radv_pipeline *pipeline, struct radv_pipeline_layout
 
    /* Compile NIR shaders to AMD assembly. */
    radv_pipeline_nir_to_asm(pipeline, stages, pipeline_key, pipeline_layout, keep_executable_info,
-                            keep_statistic_info, *last_vgt_api_stage, binaries, &gs_copy_binary);
+                            keep_statistic_info, *last_vgt_api_stage, binaries, &gs_copy_binary, stage_mask);
 
    if (keep_executable_info) {
       for (int i = 0; i < MESA_VULKAN_SHADER_STAGES; ++i) {
-- 
GitLab


From 9750061d2e0881514ad80a2e7bcf9db1299a2786 Mon Sep 17 00:00:00 2001
From: Mike Blumenkrantz <michael.blumenkrantz@gmail.com>
Date: Thu, 26 Jan 2023 12:55:25 -0500
Subject: [PATCH 6/7] radv: use stage mask for another small
 radv_create_shaders() simplification

---
 src/amd/vulkan/radv_pipeline.c | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/src/amd/vulkan/radv_pipeline.c b/src/amd/vulkan/radv_pipeline.c
index 361fc7e08776..a4599198d047 100644
--- a/src/amd/vulkan/radv_pipeline.c
+++ b/src/amd/vulkan/radv_pipeline.c
@@ -3470,8 +3470,7 @@ radv_create_shaders(struct radv_pipeline *pipeline, struct radv_pipeline_layout
       goto done;
    }
 
-   if (pipeline->type == RADV_PIPELINE_GRAPHICS &&
-       !(radv_pipeline_to_graphics(pipeline)->active_stages & VK_SHADER_STAGE_FRAGMENT_BIT)) {
+   if (pipeline->type == RADV_PIPELINE_GRAPHICS && !(stage_mask & BITFIELD_BIT(MESA_SHADER_FRAGMENT))) {
       nir_builder fs_b = radv_meta_init_shader(device, MESA_SHADER_FRAGMENT, "noop_fs");
 
       stages[MESA_SHADER_FRAGMENT] = (struct radv_pipeline_stage) {
-- 
GitLab


From eb6eb78d018ac85d9f7d4eb0b27d4865f6e83853 Mon Sep 17 00:00:00 2001
From: Mike Blumenkrantz <michael.blumenkrantz@gmail.com>
Date: Thu, 26 Jan 2023 12:55:02 -0500
Subject: [PATCH 7/7] radv: use stage mask to avoid huge memset in
 radv_create_shaders()

this has a noticeable impact on pipeline creation
---
 src/amd/vulkan/radv_pipeline.c | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/src/amd/vulkan/radv_pipeline.c b/src/amd/vulkan/radv_pipeline.c
index a4599198d047..98e3991a1ee4 100644
--- a/src/amd/vulkan/radv_pipeline.c
+++ b/src/amd/vulkan/radv_pipeline.c
@@ -3390,7 +3390,7 @@ radv_create_shaders(struct radv_pipeline *pipeline, struct radv_pipeline_layout
    bool keep_statistic_info = (flags & VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR) ||
                               (device->instance->debug_flags & RADV_DEBUG_DUMP_SHADER_STATS) ||
                               device->keep_shader_info;
-   struct radv_pipeline_stage stages[MESA_VULKAN_SHADER_STAGES] = {0};
+   struct radv_pipeline_stage stages[MESA_VULKAN_SHADER_STAGES];
    VkPipelineCreationFeedback pipeline_feedback = {
       .flags = VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT,
    };
@@ -3415,6 +3415,8 @@ radv_create_shaders(struct radv_pipeline *pipeline, struct radv_pipeline_layout
       radv_pipeline_stage_init(sinfo, &stages[stage], stage);
       stage_mask |= BITFIELD_BIT(stage);
    }
+   u_foreach_bit(s, (~stage_mask) & BITFIELD_MASK(MESA_VULKAN_SHADER_STAGES))
+      stages[s].nir = NULL;
 
    radv_pipeline_load_retained_shaders(pipeline, stages);
 
-- 
GitLab

