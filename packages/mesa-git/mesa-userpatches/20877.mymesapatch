From d6cf4632c6e30d59c598a0a628ed01065650709c Mon Sep 17 00:00:00 2001
From: Turo Lamminen <turo.lamminen@alternativegames.net>
Date: Tue, 24 Jan 2023 14:24:15 +0200
Subject: [PATCH 01/39] util: Add prefetch macros

---
 src/util/macros.h | 17 +++++++++++++++++
 1 file changed, 17 insertions(+)

diff --git a/src/util/macros.h b/src/util/macros.h
index b00c3d2001cb..766ef243d217 100644
--- a/src/util/macros.h
+++ b/src/util/macros.h
@@ -74,6 +74,23 @@
 #  define __builtin_types_compatible_p(type1, type2) (1)
 #endif
 
+
+/**
+ * __builtin_prefetch macros
+ */
+#ifdef __GNUC__
+
+#define prefetch(addr)           __builtin_prefetch(addr, 0, 3)
+#define prefetch_for_write(addr) __builtin_prefetch(addr, 1, 3)
+
+#else
+
+#define prefetch(addr)
+#define prefetch_for_write(addr)
+
+#endif
+
+
 /* This should match linux gcc cdecl semantics everywhere, so that we
  * just codegen one calling convention on all platforms.
  */
-- 
GitLab


From dc5db66c1c7ea20b9b0c4f58da3fa4bd466e0992 Mon Sep 17 00:00:00 2001
From: Mike Blumenkrantz <michael.blumenkrantz@gmail.com>
Date: Tue, 13 Sep 2022 13:08:59 -0400
Subject: [PATCH 02/39] radv: prefetch graphics pipeline pointers during draw

these are guaranteed to be accessed, and not having them already loaded
at these exact spots hurts perf in some cases

now with better prefetch macros
---
 src/amd/vulkan/radv_cmd_buffer.c | 13 +++++++++++++
 1 file changed, 13 insertions(+)

diff --git a/src/amd/vulkan/radv_cmd_buffer.c b/src/amd/vulkan/radv_cmd_buffer.c
index 21c2ba71fbe3..ff4ea99a5641 100644
--- a/src/amd/vulkan/radv_cmd_buffer.c
+++ b/src/amd/vulkan/radv_cmd_buffer.c
@@ -8822,6 +8822,13 @@ radv_before_draw(struct radv_cmd_buffer *cmd_buffer, const struct radv_draw_info
    if (cmd_buffer->state.flush_bits &
        (RADV_CMD_FLAG_FLUSH_AND_INV_CB | RADV_CMD_FLAG_FLUSH_AND_INV_DB |
         RADV_CMD_FLAG_PS_PARTIAL_FLUSH | RADV_CMD_FLAG_CS_PARTIAL_FLUSH)) {
+
+      /* prefetch pipeline pointers since they'll be used in non-inlined functions */
+      if (pipeline_is_dirty) {
+         prefetch(&cmd_buffer->state.graphics_pipeline);
+         prefetch_for_write(&cmd_buffer->state.emitted_graphics_pipeline);
+      }
+
       /* If we have to wait for idle, set all states first, so that
        * all SET packets are processed in parallel with previous draw
        * calls. Then upload descriptors, set shader pointers, and
@@ -8847,6 +8854,12 @@ radv_before_draw(struct radv_cmd_buffer *cmd_buffer, const struct radv_draw_info
          radv_emit_prefetch_L2(cmd_buffer, cmd_buffer->state.graphics_pipeline, true);
       }
 
+      /* prefetch pipeline pointers since they'll be used in non-inlined functions */
+      if (pipeline_is_dirty) {
+         prefetch(&cmd_buffer->state.graphics_pipeline);
+         prefetch_for_write(&cmd_buffer->state.emitted_graphics_pipeline);
+      }
+
       radv_upload_graphics_shader_descriptors(cmd_buffer);
 
       radv_emit_all_graphics_states(cmd_buffer, info, pipeline_is_dirty);
-- 
GitLab


From 651da7640ff74bfc9d5537da6a8bf5f7bb5fd1d8 Mon Sep 17 00:00:00 2001
From: Turo Lamminen <turo.lamminen@alternativegames.net>
Date: Tue, 24 Jan 2023 14:25:23 +0200
Subject: [PATCH 03/39] radv: Change radeon_cmdbuf counters to uint64_t to make
 alias analysis optimize radeon_emit better

---
 src/amd/vulkan/radv_radeon_winsys.h | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/amd/vulkan/radv_radeon_winsys.h b/src/amd/vulkan/radv_radeon_winsys.h
index 47d194d62afd..989f29a9e6bc 100644
--- a/src/amd/vulkan/radv_radeon_winsys.h
+++ b/src/amd/vulkan/radv_radeon_winsys.h
@@ -103,8 +103,8 @@ enum radeon_value_id {
 };
 
 struct radeon_cmdbuf {
-   unsigned cdw;    /* Number of used dwords. */
-   unsigned max_dw; /* Maximum number of dwords. */
+   uint64_t cdw;    /* Number of used dwords. */
+   uint64_t max_dw; /* Maximum number of dwords. */
    uint32_t *buf;   /* The base pointer of the chunk. */
 };
 
-- 
GitLab


From 4ae7f7fc85a3898db957744c9c8e6a9f2b39ef3c Mon Sep 17 00:00:00 2001
From: Turo Lamminen <turo.lamminen@alternativegames.net>
Date: Tue, 24 Jan 2023 14:25:21 +0200
Subject: [PATCH 04/39] radv: Use cached radeon_info in more places

---
 src/amd/vulkan/si_cmd_buffer.c | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/src/amd/vulkan/si_cmd_buffer.c b/src/amd/vulkan/si_cmd_buffer.c
index 9d8724ab7e15..6f19da76735a 100644
--- a/src/amd/vulkan/si_cmd_buffer.c
+++ b/src/amd/vulkan/si_cmd_buffer.c
@@ -839,9 +839,9 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
                           uint32_t draw_vertex_count, unsigned topology, bool prim_restart_enable,
                           unsigned patch_control_points, unsigned num_tess_patches)
 {
-   enum amd_gfx_level gfx_level = cmd_buffer->device->physical_device->rad_info.gfx_level;
-   enum radeon_family family = cmd_buffer->device->physical_device->rad_info.family;
    struct radeon_info *info = &cmd_buffer->device->physical_device->rad_info;
+   enum amd_gfx_level gfx_level = info->gfx_level;
+   enum radeon_family family = info->family;
    const unsigned max_primgroup_in_wave = 2;
    /* SWITCH_ON_EOP(0) is always preferable. */
    bool wd_switch_on_eop = false;
@@ -890,11 +890,11 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
       /* WD_SWITCH_ON_EOP has no effect on GPUs with less than
        * 4 shader engines. Set 1 to pass the assertion below.
        * The other cases are hardware requirements. */
-      if (cmd_buffer->device->physical_device->rad_info.max_se < 4 ||
+      if (info->max_se < 4 ||
           topology == V_008958_DI_PT_POLYGON || topology == V_008958_DI_PT_LINELOOP ||
           topology == V_008958_DI_PT_TRIFAN || topology == V_008958_DI_PT_TRISTRIP_ADJ ||
           (prim_restart_enable &&
-           (cmd_buffer->device->physical_device->rad_info.family < CHIP_POLARIS10 ||
+           (info->family < CHIP_POLARIS10 ||
             (topology != V_008958_DI_PT_POINTLIST && topology != V_008958_DI_PT_LINESTRIP))))
          wd_switch_on_eop = true;
 
-- 
GitLab


From eadba49926c8eeb4dbe1f335e0e228671db8321b Mon Sep 17 00:00:00 2001
From: Turo Lamminen <turo.lamminen@alternativegames.net>
Date: Tue, 24 Jan 2023 14:25:21 +0200
Subject: [PATCH 05/39] radv: Cache graphics_pipeline in local variable

---
 src/amd/vulkan/si_cmd_buffer.c | 21 +++++++++++----------
 1 file changed, 11 insertions(+), 10 deletions(-)

diff --git a/src/amd/vulkan/si_cmd_buffer.c b/src/amd/vulkan/si_cmd_buffer.c
index 6f19da76735a..5a538a3d34ab 100644
--- a/src/amd/vulkan/si_cmd_buffer.c
+++ b/src/amd/vulkan/si_cmd_buffer.c
@@ -840,6 +840,7 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
                           unsigned patch_control_points, unsigned num_tess_patches)
 {
    struct radeon_info *info = &cmd_buffer->device->physical_device->rad_info;
+   struct radv_graphics_pipeline *graphics_pipeline = cmd_buffer->state.graphics_pipeline;
    enum amd_gfx_level gfx_level = info->gfx_level;
    enum radeon_family family = info->family;
    const unsigned max_primgroup_in_wave = 2;
@@ -848,28 +849,28 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
    bool ia_switch_on_eop = false;
    bool ia_switch_on_eoi = false;
    bool partial_vs_wave = false;
-   bool partial_es_wave = cmd_buffer->state.graphics_pipeline->ia_multi_vgt_param.partial_es_wave;
+   bool partial_es_wave = graphics_pipeline->ia_multi_vgt_param.partial_es_wave;
    bool multi_instances_smaller_than_primgroup;
    struct radv_prim_vertex_count prim_vertex_count = prim_size_table[topology];
    unsigned primgroup_size;
 
-   if (radv_pipeline_has_stage(cmd_buffer->state.graphics_pipeline, MESA_SHADER_TESS_CTRL)) {
+   if (radv_pipeline_has_stage(graphics_pipeline, MESA_SHADER_TESS_CTRL)) {
       primgroup_size = num_tess_patches;
-   } else if (radv_pipeline_has_stage(cmd_buffer->state.graphics_pipeline, MESA_SHADER_GEOMETRY)) {
+   } else if (radv_pipeline_has_stage(graphics_pipeline, MESA_SHADER_GEOMETRY)) {
       primgroup_size = 64;
    } else {
       primgroup_size = 128; /* recommended without a GS */
    }
 
    /* GS requirement. */
-   if (radv_pipeline_has_stage(cmd_buffer->state.graphics_pipeline, MESA_SHADER_GEOMETRY) &&
+   if (radv_pipeline_has_stage(graphics_pipeline, MESA_SHADER_GEOMETRY) &&
        gfx_level <= GFX8) {
       unsigned gs_table_depth = cmd_buffer->device->physical_device->gs_table_depth;
       if (SI_GS_PER_ES / primgroup_size >= gs_table_depth - 3)
          partial_es_wave = true;
    }
 
-   if (radv_pipeline_has_stage(cmd_buffer->state.graphics_pipeline, MESA_SHADER_TESS_CTRL)) {
+   if (radv_pipeline_has_stage(graphics_pipeline, MESA_SHADER_TESS_CTRL)) {
       if (topology == V_008958_DI_PT_PATCH) {
          prim_vertex_count.min = patch_control_points;
          prim_vertex_count.incr = 1;
@@ -883,8 +884,8 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
          multi_instances_smaller_than_primgroup = true;
    }
 
-   ia_switch_on_eoi = cmd_buffer->state.graphics_pipeline->ia_multi_vgt_param.ia_switch_on_eoi;
-   partial_vs_wave = cmd_buffer->state.graphics_pipeline->ia_multi_vgt_param.partial_vs_wave;
+   ia_switch_on_eoi = graphics_pipeline->ia_multi_vgt_param.ia_switch_on_eoi;
+   partial_vs_wave = graphics_pipeline->ia_multi_vgt_param.partial_vs_wave;
 
    if (gfx_level >= GFX7) {
       /* WD_SWITCH_ON_EOP has no effect on GPUs with less than
@@ -927,7 +928,7 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
           (family == CHIP_HAWAII ||
            (gfx_level == GFX8 &&
             /* max primgroup in wave is always 2 - leave this for documentation */
-            (radv_pipeline_has_stage(cmd_buffer->state.graphics_pipeline, MESA_SHADER_GEOMETRY) || max_primgroup_in_wave != 2))))
+            (radv_pipeline_has_stage(graphics_pipeline, MESA_SHADER_GEOMETRY) || max_primgroup_in_wave != 2))))
          partial_vs_wave = true;
 
       /* Instancing bug on Bonaire. */
@@ -941,7 +942,7 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
    if (gfx_level <= GFX8 && ia_switch_on_eoi)
       partial_es_wave = true;
 
-   if (radv_pipeline_has_stage(cmd_buffer->state.graphics_pipeline, MESA_SHADER_GEOMETRY)) {
+   if (radv_pipeline_has_stage(graphics_pipeline, MESA_SHADER_GEOMETRY)) {
       /* GS hw bug with single-primitive instances and SWITCH_ON_EOI.
        * The hw doc says all multi-SE chips are affected, but amdgpu-pro Vulkan
        * only applies it to Hawaii. Do what amdgpu-pro Vulkan does.
@@ -967,7 +968,7 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
       partial_vs_wave = true;
    }
 
-   return cmd_buffer->state.graphics_pipeline->ia_multi_vgt_param.base |
+   return graphics_pipeline->ia_multi_vgt_param.base |
           S_028AA8_PRIMGROUP_SIZE(primgroup_size - 1) |
           S_028AA8_SWITCH_ON_EOP(ia_switch_on_eop) | S_028AA8_SWITCH_ON_EOI(ia_switch_on_eoi) |
           S_028AA8_PARTIAL_VS_WAVE_ON(partial_vs_wave) |
-- 
GitLab

From 39bff3b09759dd1fe780d952f87c59d15af9ee82 Mon Sep 17 00:00:00 2001
From: Turo Lamminen <turo.lamminen@alternativegames.net>
Date: Tue, 24 Jan 2023 14:25:22 +0200
Subject: [PATCH 07/39] radv: Convert a division to multiplication

---
 src/amd/vulkan/si_cmd_buffer.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/amd/vulkan/si_cmd_buffer.c b/src/amd/vulkan/si_cmd_buffer.c
index 5a538a3d34ab..7752d058b79f 100644
--- a/src/amd/vulkan/si_cmd_buffer.c
+++ b/src/amd/vulkan/si_cmd_buffer.c
@@ -866,7 +866,7 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
    if (radv_pipeline_has_stage(graphics_pipeline, MESA_SHADER_GEOMETRY) &&
        gfx_level <= GFX8) {
       unsigned gs_table_depth = cmd_buffer->device->physical_device->gs_table_depth;
-      if (SI_GS_PER_ES / primgroup_size >= gs_table_depth - 3)
+      if (SI_GS_PER_ES >= (gs_table_depth - 3) * primgroup_size)
          partial_es_wave = true;
    }
 
-- 
GitLab


From d5401b4eb809a954b33f3526ae48a50713843f6d Mon Sep 17 00:00:00 2001
From: Turo Lamminen <turo.lamminen@alternativegames.net>
Date: Tue, 24 Jan 2023 14:25:22 +0200
Subject: [PATCH 08/39] radv: Refactor primgroup_size default value

---
 src/amd/vulkan/si_cmd_buffer.c | 4 +---
 1 file changed, 1 insertion(+), 3 deletions(-)

diff --git a/src/amd/vulkan/si_cmd_buffer.c b/src/amd/vulkan/si_cmd_buffer.c
index 7752d058b79f..b12249b3df8d 100644
--- a/src/amd/vulkan/si_cmd_buffer.c
+++ b/src/amd/vulkan/si_cmd_buffer.c
@@ -852,14 +852,12 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
    bool partial_es_wave = graphics_pipeline->ia_multi_vgt_param.partial_es_wave;
    bool multi_instances_smaller_than_primgroup;
    struct radv_prim_vertex_count prim_vertex_count = prim_size_table[topology];
-   unsigned primgroup_size;
+   unsigned primgroup_size = 128; /* recommended without a GS */
 
    if (radv_pipeline_has_stage(graphics_pipeline, MESA_SHADER_TESS_CTRL)) {
       primgroup_size = num_tess_patches;
    } else if (radv_pipeline_has_stage(graphics_pipeline, MESA_SHADER_GEOMETRY)) {
       primgroup_size = 64;
-   } else {
-      primgroup_size = 128; /* recommended without a GS */
    }
 
    /* GS requirement. */
-- 
GitLab


From 81d222c4ae944a8a85ad3187214b8885c3f37e6e Mon Sep 17 00:00:00 2001
From: Turo Lamminen <turo.lamminen@alternativegames.net>
Date: Tue, 24 Jan 2023 14:25:22 +0200
Subject: [PATCH 09/39] radv: Eliminate a branch

---
 src/amd/vulkan/si_cmd_buffer.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/amd/vulkan/si_cmd_buffer.c b/src/amd/vulkan/si_cmd_buffer.c
index b12249b3df8d..253ee20027ac 100644
--- a/src/amd/vulkan/si_cmd_buffer.c
+++ b/src/amd/vulkan/si_cmd_buffer.c
@@ -856,8 +856,8 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
 
    if (radv_pipeline_has_stage(graphics_pipeline, MESA_SHADER_TESS_CTRL)) {
       primgroup_size = num_tess_patches;
-   } else if (radv_pipeline_has_stage(graphics_pipeline, MESA_SHADER_GEOMETRY)) {
-      primgroup_size = 64;
+   } else {
+      primgroup_size = radv_pipeline_has_stage(graphics_pipeline, MESA_SHADER_GEOMETRY) ? 64 : primgroup_size;
    }
 
    /* GS requirement. */
-- 
GitLab


From 0efad9b29df4f6862c22a53e4c13923ef94b6a69 Mon Sep 17 00:00:00 2001
From: Turo Lamminen <turo.lamminen@alternativegames.net>
Date: Tue, 24 Jan 2023 14:25:22 +0200
Subject: [PATCH 10/39] radv: Eliminate a branch updating partial_es_wave

---
 src/amd/vulkan/si_cmd_buffer.c | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/src/amd/vulkan/si_cmd_buffer.c b/src/amd/vulkan/si_cmd_buffer.c
index 253ee20027ac..f0b10cae3f81 100644
--- a/src/amd/vulkan/si_cmd_buffer.c
+++ b/src/amd/vulkan/si_cmd_buffer.c
@@ -864,8 +864,7 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
    if (radv_pipeline_has_stage(graphics_pipeline, MESA_SHADER_GEOMETRY) &&
        gfx_level <= GFX8) {
       unsigned gs_table_depth = cmd_buffer->device->physical_device->gs_table_depth;
-      if (SI_GS_PER_ES >= (gs_table_depth - 3) * primgroup_size)
-         partial_es_wave = true;
+      partial_es_wave = (SI_GS_PER_ES >= (gs_table_depth - 3) * primgroup_size) ? true : partial_es_wave;
    }
 
    if (radv_pipeline_has_stage(graphics_pipeline, MESA_SHADER_TESS_CTRL)) {
-- 
GitLab


From e8a005a10532787553aa1465ada0de4811bcf5ab Mon Sep 17 00:00:00 2001
From: Turo Lamminen <turo.lamminen@alternativegames.net>
Date: Tue, 24 Jan 2023 14:25:22 +0200
Subject: [PATCH 11/39] radv: Eliminate another branch in primgroup_size

---
 src/amd/vulkan/si_cmd_buffer.c | 7 ++-----
 1 file changed, 2 insertions(+), 5 deletions(-)

diff --git a/src/amd/vulkan/si_cmd_buffer.c b/src/amd/vulkan/si_cmd_buffer.c
index f0b10cae3f81..6b456bb08d8d 100644
--- a/src/amd/vulkan/si_cmd_buffer.c
+++ b/src/amd/vulkan/si_cmd_buffer.c
@@ -854,11 +854,8 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
    struct radv_prim_vertex_count prim_vertex_count = prim_size_table[topology];
    unsigned primgroup_size = 128; /* recommended without a GS */
 
-   if (radv_pipeline_has_stage(graphics_pipeline, MESA_SHADER_TESS_CTRL)) {
-      primgroup_size = num_tess_patches;
-   } else {
-      primgroup_size = radv_pipeline_has_stage(graphics_pipeline, MESA_SHADER_GEOMETRY) ? 64 : primgroup_size;
-   }
+   primgroup_size = radv_pipeline_has_stage(graphics_pipeline, MESA_SHADER_GEOMETRY) ? 64 : primgroup_size;
+   primgroup_size = radv_pipeline_has_stage(graphics_pipeline, MESA_SHADER_TESS_CTRL) ? num_tess_patches : primgroup_size;
 
    /* GS requirement. */
    if (radv_pipeline_has_stage(graphics_pipeline, MESA_SHADER_GEOMETRY) &&
-- 
GitLab


From 1ac2ce6cfdfacce230a629a8836060127998a79d Mon Sep 17 00:00:00 2001
From: Turo Lamminen <turo.lamminen@alternativegames.net>
Date: Tue, 24 Jan 2023 14:25:22 +0200
Subject: [PATCH 12/39] radv: Always fetch gs_table_depth

---
 src/amd/vulkan/si_cmd_buffer.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/amd/vulkan/si_cmd_buffer.c b/src/amd/vulkan/si_cmd_buffer.c
index 6b456bb08d8d..ee301253f8ff 100644
--- a/src/amd/vulkan/si_cmd_buffer.c
+++ b/src/amd/vulkan/si_cmd_buffer.c
@@ -852,6 +852,7 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
    bool partial_es_wave = graphics_pipeline->ia_multi_vgt_param.partial_es_wave;
    bool multi_instances_smaller_than_primgroup;
    struct radv_prim_vertex_count prim_vertex_count = prim_size_table[topology];
+   unsigned gs_table_depth = cmd_buffer->device->physical_device->gs_table_depth;
    unsigned primgroup_size = 128; /* recommended without a GS */
 
    primgroup_size = radv_pipeline_has_stage(graphics_pipeline, MESA_SHADER_GEOMETRY) ? 64 : primgroup_size;
@@ -860,7 +861,6 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
    /* GS requirement. */
    if (radv_pipeline_has_stage(graphics_pipeline, MESA_SHADER_GEOMETRY) &&
        gfx_level <= GFX8) {
-      unsigned gs_table_depth = cmd_buffer->device->physical_device->gs_table_depth;
       partial_es_wave = (SI_GS_PER_ES >= (gs_table_depth - 3) * primgroup_size) ? true : partial_es_wave;
    }
 
-- 
GitLab


From 8032e83e3ca662763e93dfa82cd0dec7b0773a8c Mon Sep 17 00:00:00 2001
From: Turo Lamminen <turo.lamminen@alternativegames.net>
Date: Tue, 24 Jan 2023 14:25:22 +0200
Subject: [PATCH 13/39] radv: Always calculate num_prims

---
 src/amd/vulkan/si_cmd_buffer.c | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/src/amd/vulkan/si_cmd_buffer.c b/src/amd/vulkan/si_cmd_buffer.c
index ee301253f8ff..73532c7f8185 100644
--- a/src/amd/vulkan/si_cmd_buffer.c
+++ b/src/amd/vulkan/si_cmd_buffer.c
@@ -853,6 +853,7 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
    bool multi_instances_smaller_than_primgroup;
    struct radv_prim_vertex_count prim_vertex_count = prim_size_table[topology];
    unsigned gs_table_depth = cmd_buffer->device->physical_device->gs_table_depth;
+   uint32_t num_prims;
    unsigned primgroup_size = 128; /* recommended without a GS */
 
    primgroup_size = radv_pipeline_has_stage(graphics_pipeline, MESA_SHADER_GEOMETRY) ? 64 : primgroup_size;
@@ -871,9 +872,10 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
       }
    }
 
+   num_prims = radv_prims_for_vertices(&prim_vertex_count, draw_vertex_count);
+
    multi_instances_smaller_than_primgroup = indirect_draw;
    if (!multi_instances_smaller_than_primgroup && instanced_draw) {
-      uint32_t num_prims = radv_prims_for_vertices(&prim_vertex_count, draw_vertex_count);
       if (num_prims < primgroup_size)
          multi_instances_smaller_than_primgroup = true;
    }
@@ -944,7 +946,6 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
       if (family == CHIP_HAWAII && ia_switch_on_eoi) {
          bool set_vgt_flush = indirect_draw;
          if (!set_vgt_flush && instanced_draw) {
-            uint32_t num_prims = radv_prims_for_vertices(&prim_vertex_count, draw_vertex_count);
             if (num_prims <= 1)
                set_vgt_flush = true;
          }
-- 
GitLab

From 0cb74f01b1f1eb88c34e5d578ed3bd847083d015 Mon Sep 17 00:00:00 2001
From: Turo Lamminen <turo.lamminen@alternativegames.net>
Date: Tue, 24 Jan 2023 14:25:22 +0200
Subject: [PATCH 15/39] radv: Manually fetch cs variable

---
 src/amd/vulkan/radv_cmd_buffer.c | 13 +++++++------
 1 file changed, 7 insertions(+), 6 deletions(-)

diff --git a/src/amd/vulkan/radv_cmd_buffer.c b/src/amd/vulkan/radv_cmd_buffer.c
index 97445b8c0d65..89c9aa5b39f8 100644
--- a/src/amd/vulkan/radv_cmd_buffer.c
+++ b/src/amd/vulkan/radv_cmd_buffer.c
@@ -7653,16 +7653,17 @@ static void
 radv_cs_emit_draw_indexed_packet(struct radv_cmd_buffer *cmd_buffer, uint64_t index_va,
                                  uint32_t max_index_count, uint32_t index_count, bool not_eop)
 {
-   radeon_emit(cmd_buffer->cs, PKT3(PKT3_DRAW_INDEX_2, 4, cmd_buffer->state.predicating));
-   radeon_emit(cmd_buffer->cs, max_index_count);
-   radeon_emit(cmd_buffer->cs, index_va);
-   radeon_emit(cmd_buffer->cs, index_va >> 32);
-   radeon_emit(cmd_buffer->cs, index_count);
+   struct radeon_cmdbuf *cs = cmd_buffer->cs;
+   radeon_emit(cs, PKT3(PKT3_DRAW_INDEX_2, 4, cmd_buffer->state.predicating));
+   radeon_emit(cs, max_index_count);
+   radeon_emit(cs, index_va);
+   radeon_emit(cs, index_va >> 32);
+   radeon_emit(cs, index_count);
    /* NOT_EOP allows merging multiple draws into 1 wave, but only user VGPRs
     * can be changed between draws and GS fast launch must be disabled.
     * NOT_EOP doesn't work on gfx9 and older.
     */
-   radeon_emit(cmd_buffer->cs, V_0287F0_DI_SRC_SEL_DMA | S_0287F0_NOT_EOP(not_eop));
+   radeon_emit(cs, V_0287F0_DI_SRC_SEL_DMA | S_0287F0_NOT_EOP(not_eop));
 }
 
 /* MUST inline this function to avoid massive perf loss in drawoverhead */
-- 
GitLab


From 1b5597be44de93ce07625b3c2a20b23bc00e742d Mon Sep 17 00:00:00 2001
From: Turo Lamminen <turo.lamminen@alternativegames.net>
Date: Tue, 24 Jan 2023 14:25:22 +0200
Subject: [PATCH 16/39] radv: Remove switch from radv_get_descriptors_state

Horrifying abuse of the fact that graphics and compute match 0 and 1
and ray tracing is the only one larger than 2
---
 src/amd/vulkan/radv_private.h | 11 ++---------
 1 file changed, 2 insertions(+), 9 deletions(-)

diff --git a/src/amd/vulkan/radv_private.h b/src/amd/vulkan/radv_private.h
index 559582831e4e..ee0a70e16057 100644
--- a/src/amd/vulkan/radv_private.h
+++ b/src/amd/vulkan/radv_private.h
@@ -1866,15 +1866,8 @@ radv_emit_shader_pointer(struct radv_device *device, struct radeon_cmdbuf *cs, u
 static inline struct radv_descriptor_state *
 radv_get_descriptors_state(struct radv_cmd_buffer *cmd_buffer, VkPipelineBindPoint bind_point)
 {
-   switch (bind_point) {
-   case VK_PIPELINE_BIND_POINT_GRAPHICS:
-   case VK_PIPELINE_BIND_POINT_COMPUTE:
-      return &cmd_buffer->descriptors[bind_point];
-   case VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR:
-      return &cmd_buffer->descriptors[2];
-   default:
-      unreachable("Unhandled bind point");
-   }
+   uintptr_t offset = (bind_point > 2) ? 2 : bind_point;
+   return &cmd_buffer->descriptors[offset];
 }
 
 void
-- 
GitLab


From 6ac247e61b65697f98dc8a01e77dd3b1ee549ca0 Mon Sep 17 00:00:00 2001
From: Turo Lamminen <turo.lamminen@alternativegames.net>
Date: Tue, 24 Jan 2023 14:25:22 +0200
Subject: [PATCH 17/39] radv: Always inline radv_flush_constants

---
 src/amd/vulkan/radv_cmd_buffer.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/amd/vulkan/radv_cmd_buffer.c b/src/amd/vulkan/radv_cmd_buffer.c
index 89c9aa5b39f8..031746ac6f65 100644
--- a/src/amd/vulkan/radv_cmd_buffer.c
+++ b/src/amd/vulkan/radv_cmd_buffer.c
@@ -4623,7 +4623,7 @@ radv_emit_all_inline_push_consts(struct radv_device *device, struct radeon_cmdbu
    }
 }
 
-static void
+ALWAYS_INLINE static void
 radv_flush_constants(struct radv_cmd_buffer *cmd_buffer, VkShaderStageFlags stages,
                      struct radv_pipeline *pipeline, VkPipelineBindPoint bind_point)
 {
-- 
GitLab


From 0b8174fb7c018539ae79cd112aef3427028fcd14 Mon Sep 17 00:00:00 2001
From: Turo Lamminen <turo.lamminen@alternativegames.net>
Date: Tue, 24 Jan 2023 14:25:22 +0200
Subject: [PATCH 18/39] radv: Make RADV_CMP_COPY branchless

---
 src/amd/vulkan/radv_cmd_buffer.c | 11 +++++------
 1 file changed, 5 insertions(+), 6 deletions(-)

diff --git a/src/amd/vulkan/radv_cmd_buffer.c b/src/amd/vulkan/radv_cmd_buffer.c
index 031746ac6f65..0d9f7a0bc257 100644
--- a/src/amd/vulkan/radv_cmd_buffer.c
+++ b/src/amd/vulkan/radv_cmd_buffer.c
@@ -264,12 +264,11 @@ radv_bind_dynamic_state(struct radv_cmd_buffer *cmd_buffer, const struct radv_dy
       }
    }
 
-#define RADV_CMP_COPY(field, flag)                                \
-   if (copy_mask & flag) {                                        \
-      if (dest->field != src->field) {                            \
-         dest->field = src->field;                                \
-         dest_mask |= flag;                                       \
-      }                                                           \
+#define RADV_CMP_COPY(field, flag)                                               \
+   {                                                                             \
+      uint64_t temp_mask = (dest->field != src->field) ? (copy_mask & flag) : 0; \
+      dest_mask   |= temp_mask;                                                  \
+      dest->field  = temp_mask ? src->field : dest->field;                       \
    }
 
    RADV_CMP_COPY(vk.ia.primitive_topology, RADV_DYNAMIC_PRIMITIVE_TOPOLOGY);
-- 
GitLab


From 1969b7efaacc848bb1d6083fb56d9e3894c4641c Mon Sep 17 00:00:00 2001
From: Turo Lamminen <turo.lamminen@alternativegames.net>
Date: Tue, 24 Jan 2023 14:25:22 +0200
Subject: [PATCH 19/39] radv: Avoid redundant fetch of radv_device

---
 src/amd/vulkan/radv_cmd_buffer.c | 15 ++++++++-------
 1 file changed, 8 insertions(+), 7 deletions(-)

diff --git a/src/amd/vulkan/radv_cmd_buffer.c b/src/amd/vulkan/radv_cmd_buffer.c
index 0d9f7a0bc257..456a5ac4b62a 100644
--- a/src/amd/vulkan/radv_cmd_buffer.c
+++ b/src/amd/vulkan/radv_cmd_buffer.c
@@ -797,23 +797,24 @@ radv_ace_internal_finalize(struct radv_cmd_buffer *cmd_buffer)
 static void
 radv_cmd_buffer_after_draw(struct radv_cmd_buffer *cmd_buffer, enum radv_cmd_flush_bits flags)
 {
-   if (unlikely(cmd_buffer->device->thread_trace.bo)) {
-      radeon_check_space(cmd_buffer->device->ws, cmd_buffer->cs, 2);
+   struct radv_device *device = cmd_buffer->device;
+   if (unlikely(device->thread_trace.bo)) {
+      radeon_check_space(device->ws, cmd_buffer->cs, 2);
 
       radeon_emit(cmd_buffer->cs, PKT3(PKT3_EVENT_WRITE, 0, 0));
       radeon_emit(cmd_buffer->cs, EVENT_TYPE(V_028A90_THREAD_TRACE_MARKER) | EVENT_INDEX(0));
    }
 
-   if (cmd_buffer->device->instance->debug_flags & RADV_DEBUG_SYNC_SHADERS) {
+   if (device->instance->debug_flags & RADV_DEBUG_SYNC_SHADERS) {
       enum rgp_flush_bits sqtt_flush_bits = 0;
       assert(flags & (RADV_CMD_FLAG_PS_PARTIAL_FLUSH | RADV_CMD_FLAG_CS_PARTIAL_FLUSH));
 
       ASSERTED const unsigned cdw_max =
-         radeon_check_space(cmd_buffer->device->ws, cmd_buffer->cs, 4);
+         radeon_check_space(device->ws, cmd_buffer->cs, 4);
 
       /* Force wait for graphics or compute engines to be idle. */
       si_cs_emit_cache_flush(cmd_buffer->cs,
-                             cmd_buffer->device->physical_device->rad_info.gfx_level,
+                             device->physical_device->rad_info.gfx_level,
                              &cmd_buffer->gfx9_fence_idx, cmd_buffer->gfx9_fence_va,
                              radv_cmd_buffer_uses_mec(cmd_buffer), flags, &sqtt_flush_bits,
                              cmd_buffer->gfx9_eop_bug_va);
@@ -824,12 +825,12 @@ radv_cmd_buffer_after_draw(struct radv_cmd_buffer *cmd_buffer, enum radv_cmd_flu
           radv_pipeline_has_stage(cmd_buffer->state.graphics_pipeline, MESA_SHADER_TASK)) {
          /* Force wait for compute engines to be idle on the internal cmdbuf. */
          si_cs_emit_cache_flush(cmd_buffer->ace_internal.cs,
-                                cmd_buffer->device->physical_device->rad_info.gfx_level, NULL, 0,
+                                device->physical_device->rad_info.gfx_level, NULL, 0,
                                 true, RADV_CMD_FLAG_CS_PARTIAL_FLUSH, &sqtt_flush_bits, 0);
       }
    }
 
-   if (unlikely(cmd_buffer->device->trace_bo))
+   if (unlikely(device->trace_bo))
       radv_cmd_buffer_trace_emit(cmd_buffer);
 }
 
-- 
GitLab


From 8f5d00c772706f3934ddda03a544c6485f0052f7 Mon Sep 17 00:00:00 2001
From: Turo Lamminen <turo.lamminen@alternativegames.net>
Date: Tue, 24 Jan 2023 14:25:23 +0200
Subject: [PATCH 20/39] radv: Precompute the need for prefetch

---
 src/amd/vulkan/radv_cmd_buffer.c | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/src/amd/vulkan/radv_cmd_buffer.c b/src/amd/vulkan/radv_cmd_buffer.c
index 456a5ac4b62a..d85d89c80d97 100644
--- a/src/amd/vulkan/radv_cmd_buffer.c
+++ b/src/amd/vulkan/radv_cmd_buffer.c
@@ -8849,12 +8849,16 @@ radv_before_draw(struct radv_cmd_buffer *cmd_buffer, const struct radv_draw_info
 
       radv_upload_graphics_shader_descriptors(cmd_buffer);
    } else {
+      /* Make sure this is fetched and ready by the time it's needed.
+       * Also use multiplication to do it branchlessly */
+      uint32_t need_prefetch = (has_prefetch ? 1u : 0u) * cmd_buffer->state.prefetch_L2_mask;
+
       /* If we don't wait for idle, start prefetches first, then set
        * states, and draw at the end.
        */
       si_emit_cache_flush(cmd_buffer);
 
-      if (has_prefetch && cmd_buffer->state.prefetch_L2_mask) {
+      if (need_prefetch) {
          /* Only prefetch the vertex shader and VBO descriptors
           * in order to start the draw as soon as possible.
           */
-- 
GitLab

From dbcb2d5b3ed7ae839461839fda8d92b0ce270303 Mon Sep 17 00:00:00 2001
From: Turo Lamminen <turo.lamminen@alternativegames.net>
Date: Tue, 24 Jan 2023 14:25:23 +0200
Subject: [PATCH 24/39] radv: Reduce pointer chasing

---
 src/amd/vulkan/radv_cmd_buffer.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/amd/vulkan/radv_cmd_buffer.c b/src/amd/vulkan/radv_cmd_buffer.c
index 34f24cc3f887..3c17a5e1b192 100644
--- a/src/amd/vulkan/radv_cmd_buffer.c
+++ b/src/amd/vulkan/radv_cmd_buffer.c
@@ -4578,9 +4578,9 @@ radv_flush_descriptors(struct radv_cmd_buffer *cmd_buffer, VkShaderStageFlags st
 
    descriptors_state->dirty = 0;
 
-   assert(cmd_buffer->cs->cdw <= cdw_max);
+   assert(cs->cdw <= cdw_max);
 
-   if (unlikely(cmd_buffer->device->trace_bo))
+   if (unlikely(device->trace_bo))
       radv_save_descriptors(cmd_buffer, bind_point);
 }
 
-- 
GitLab


From 71c23b2b1c33073d23244df24d3c46e560e8eae2 Mon Sep 17 00:00:00 2001
From: Turo Lamminen <turo.lamminen@alternativegames.net>
Date: Tue, 24 Jan 2023 14:25:23 +0200
Subject: [PATCH 25/39] radv: Check need for prefetch earlier and move emitting
 it later

This hides some of the latency of the fetch
---
 src/amd/vulkan/radv_cmd_buffer.c | 17 +++++++++++------
 1 file changed, 11 insertions(+), 6 deletions(-)

diff --git a/src/amd/vulkan/radv_cmd_buffer.c b/src/amd/vulkan/radv_cmd_buffer.c
index 3c17a5e1b192..84376dc706bc 100644
--- a/src/amd/vulkan/radv_cmd_buffer.c
+++ b/src/amd/vulkan/radv_cmd_buffer.c
@@ -8964,13 +8964,10 @@ radv_after_draw(struct radv_cmd_buffer *cmd_buffer)
 {
    const struct radeon_info *rad_info = &cmd_buffer->device->physical_device->rad_info;
    bool has_prefetch = cmd_buffer->device->physical_device->rad_info.gfx_level >= GFX7;
-   /* Start prefetches after the draw has been started. Both will
-    * run in parallel, but starting the draw first is more
-    * important.
+
+   /* Check if we need prefetch and do it early so it's ready when needed
     */
-   if (has_prefetch && cmd_buffer->state.prefetch_L2_mask) {
-      radv_emit_prefetch_L2(cmd_buffer, cmd_buffer->state.graphics_pipeline, false);
-   }
+   bool need_prefetch = has_prefetch && cmd_buffer->state.prefetch_L2_mask;
 
    /* Workaround for a VGT hang when streamout is enabled.
     * It must be done after drawing.
@@ -8981,6 +8978,14 @@ radv_after_draw(struct radv_cmd_buffer *cmd_buffer)
       cmd_buffer->state.flush_bits |= RADV_CMD_FLAG_VGT_STREAMOUT_SYNC;
    }
 
+   /* Start prefetches after the draw has been started. Both will
+    * run in parallel, but starting the draw first is more
+    * important.
+    */
+   if (need_prefetch) {
+      radv_emit_prefetch_L2(cmd_buffer, cmd_buffer->state.graphics_pipeline, false);
+   }
+
    radv_cmd_buffer_after_draw(cmd_buffer, RADV_CMD_FLAG_PS_PARTIAL_FLUSH);
 }
 
-- 
GitLab


From 32205ffca3b2ee0063b702b3acf25889bc626033 Mon Sep 17 00:00:00 2001
From: Turo Lamminen <turo.lamminen@alternativegames.net>
Date: Tue, 24 Jan 2023 14:25:23 +0200
Subject: [PATCH 26/39] radv: Always inline radv_emit_prefetch_L2

---
 src/amd/vulkan/radv_cmd_buffer.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/amd/vulkan/radv_cmd_buffer.c b/src/amd/vulkan/radv_cmd_buffer.c
index 84376dc706bc..c2fb10d9c0dc 100644
--- a/src/amd/vulkan/radv_cmd_buffer.c
+++ b/src/amd/vulkan/radv_cmd_buffer.c
@@ -1687,7 +1687,7 @@ radv_emit_shader_prefetch(struct radv_cmd_buffer *cmd_buffer, struct radv_shader
    si_cp_dma_prefetch(cmd_buffer, va, shader->code_size);
 }
 
-static void
+ALWAYS_INLINE static void
 radv_emit_prefetch_L2(struct radv_cmd_buffer *cmd_buffer,
                       struct radv_graphics_pipeline *pipeline, bool first_stage_only)
 {
-- 
GitLab


From 449eaaf6089915ecc2987b6abe9f1c558d01039e Mon Sep 17 00:00:00 2001
From: Turo Lamminen <turo.lamminen@alternativegames.net>
Date: Tue, 24 Jan 2023 14:25:23 +0200
Subject: [PATCH 27/39] radv: Refactor radv_prims_for_vertices so it's easy to
 inline

---
 src/amd/vulkan/si_cmd_buffer.c | 20 +++++++++++---------
 1 file changed, 11 insertions(+), 9 deletions(-)

diff --git a/src/amd/vulkan/si_cmd_buffer.c b/src/amd/vulkan/si_cmd_buffer.c
index 73532c7f8185..a053c73a8fff 100644
--- a/src/amd/vulkan/si_cmd_buffer.c
+++ b/src/amd/vulkan/si_cmd_buffer.c
@@ -808,18 +808,20 @@ si_write_guardband(struct radeon_cmdbuf *cs, int count, const VkViewport *viewpo
 }
 
 static inline unsigned
-radv_prims_for_vertices(struct radv_prim_vertex_count *info, unsigned num)
+radv_prims_for_vertices(struct radv_prim_vertex_count *prim_info, unsigned draw_vertex_count)
 {
-   if (num == 0)
-      return 0;
+   unsigned num_prims;
+   num_prims = 0;
 
-   if (info->incr == 0)
-      return 0;
-
-   if (num < info->min)
-      return 0;
+   if (draw_vertex_count != 0) {
+      if (prim_info->incr != 0) {
+         if (draw_vertex_count >= prim_info->min) {
+            num_prims =  1 + ((draw_vertex_count - prim_info->min) / prim_info->incr);
+         }
+      }
+   }
 
-   return 1 + ((num - info->min) / info->incr);
+   return num_prims;
 }
 
 static const struct radv_prim_vertex_count prim_size_table[] = {
-- 
GitLab


From 481eeafd684ec3a641a0517cfa009b1402ba53ae Mon Sep 17 00:00:00 2001
From: Turo Lamminen <turo.lamminen@alternativegames.net>
Date: Tue, 24 Jan 2023 14:25:23 +0200
Subject: [PATCH 28/39] radv: Inline radv_prims_for_vertices into its only
 caller

---
 src/amd/vulkan/si_cmd_buffer.c | 30 +++++++++++++-----------------
 1 file changed, 13 insertions(+), 17 deletions(-)

diff --git a/src/amd/vulkan/si_cmd_buffer.c b/src/amd/vulkan/si_cmd_buffer.c
index a053c73a8fff..44218aabe4ad 100644
--- a/src/amd/vulkan/si_cmd_buffer.c
+++ b/src/amd/vulkan/si_cmd_buffer.c
@@ -807,22 +807,6 @@ si_write_guardband(struct radeon_cmdbuf *cs, int count, const VkViewport *viewpo
    radeon_emit(cs, fui(discard_x));
 }
 
-static inline unsigned
-radv_prims_for_vertices(struct radv_prim_vertex_count *prim_info, unsigned draw_vertex_count)
-{
-   unsigned num_prims;
-   num_prims = 0;
-
-   if (draw_vertex_count != 0) {
-      if (prim_info->incr != 0) {
-         if (draw_vertex_count >= prim_info->min) {
-            num_prims =  1 + ((draw_vertex_count - prim_info->min) / prim_info->incr);
-         }
-      }
-   }
-
-   return num_prims;
-}
 
 static const struct radv_prim_vertex_count prim_size_table[] = {
    [V_008958_DI_PT_NONE] = {0, 0},          [V_008958_DI_PT_POINTLIST] = {1, 1},
@@ -874,7 +858,19 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
       }
    }
 
-   num_prims = radv_prims_for_vertices(&prim_vertex_count, draw_vertex_count);
+{
+   struct radv_prim_vertex_count *prim_info = &prim_vertex_count;
+   num_prims = 0;
+
+   if (draw_vertex_count != 0) {
+      if (prim_info->incr != 0) {
+         if (draw_vertex_count >= prim_info->min) {
+            num_prims =  1 + ((draw_vertex_count - prim_info->min) / prim_info->incr);
+         }
+      }
+   }
+
+}
 
    multi_instances_smaller_than_primgroup = indirect_draw;
    if (!multi_instances_smaller_than_primgroup && instanced_draw) {
-- 
GitLab


From cd6bc302ae5854cacd6987b2059ff71bbcc6df4c Mon Sep 17 00:00:00 2001
From: Turo Lamminen <turo.lamminen@alternativegames.net>
Date: Tue, 24 Jan 2023 14:25:23 +0200
Subject: [PATCH 29/39] radv: Clean up after inlining

---
 src/amd/vulkan/si_cmd_buffer.c | 14 ++++----------
 1 file changed, 4 insertions(+), 10 deletions(-)

diff --git a/src/amd/vulkan/si_cmd_buffer.c b/src/amd/vulkan/si_cmd_buffer.c
index 44218aabe4ad..38e3ad3eed6b 100644
--- a/src/amd/vulkan/si_cmd_buffer.c
+++ b/src/amd/vulkan/si_cmd_buffer.c
@@ -839,7 +839,7 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
    bool multi_instances_smaller_than_primgroup;
    struct radv_prim_vertex_count prim_vertex_count = prim_size_table[topology];
    unsigned gs_table_depth = cmd_buffer->device->physical_device->gs_table_depth;
-   uint32_t num_prims;
+   uint32_t num_prims = 0;
    unsigned primgroup_size = 128; /* recommended without a GS */
 
    primgroup_size = radv_pipeline_has_stage(graphics_pipeline, MESA_SHADER_GEOMETRY) ? 64 : primgroup_size;
@@ -858,20 +858,14 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
       }
    }
 
-{
-   struct radv_prim_vertex_count *prim_info = &prim_vertex_count;
-   num_prims = 0;
-
    if (draw_vertex_count != 0) {
-      if (prim_info->incr != 0) {
-         if (draw_vertex_count >= prim_info->min) {
-            num_prims =  1 + ((draw_vertex_count - prim_info->min) / prim_info->incr);
+      if (prim_vertex_count.incr != 0) {
+         if (draw_vertex_count >= prim_vertex_count.min) {
+            num_prims =  1 + ((draw_vertex_count - prim_vertex_count.min) / prim_vertex_count.incr);
          }
       }
    }
 
-}
-
    multi_instances_smaller_than_primgroup = indirect_draw;
    if (!multi_instances_smaller_than_primgroup && instanced_draw) {
       if (num_prims < primgroup_size)
-- 
GitLab


From 26071859b9657ca5750492d48ce894e6ea965455 Mon Sep 17 00:00:00 2001
From: Turo Lamminen <turo.lamminen@alternativegames.net>
Date: Tue, 24 Jan 2023 14:25:23 +0200
Subject: [PATCH 30/39] radv: Rearrange division

---
 src/amd/vulkan/si_cmd_buffer.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/amd/vulkan/si_cmd_buffer.c b/src/amd/vulkan/si_cmd_buffer.c
index 38e3ad3eed6b..9363f41ad196 100644
--- a/src/amd/vulkan/si_cmd_buffer.c
+++ b/src/amd/vulkan/si_cmd_buffer.c
@@ -861,7 +861,7 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
    if (draw_vertex_count != 0) {
       if (prim_vertex_count.incr != 0) {
          if (draw_vertex_count >= prim_vertex_count.min) {
-            num_prims =  1 + ((draw_vertex_count - prim_vertex_count.min) / prim_vertex_count.incr);
+            num_prims = (prim_vertex_count.incr + draw_vertex_count - prim_vertex_count.min) / prim_vertex_count.incr;
          }
       }
    }
-- 
GitLab


From 0387f5304a5c205c906f296cbc0d78d5b3227034 Mon Sep 17 00:00:00 2001
From: Turo Lamminen <turo.lamminen@alternativegames.net>
Date: Tue, 24 Jan 2023 14:25:23 +0200
Subject: [PATCH 31/39] radv: Put numerator in its own variable

---
 src/amd/vulkan/si_cmd_buffer.c | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/src/amd/vulkan/si_cmd_buffer.c b/src/amd/vulkan/si_cmd_buffer.c
index 9363f41ad196..379487df1d0e 100644
--- a/src/amd/vulkan/si_cmd_buffer.c
+++ b/src/amd/vulkan/si_cmd_buffer.c
@@ -840,6 +840,7 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
    struct radv_prim_vertex_count prim_vertex_count = prim_size_table[topology];
    unsigned gs_table_depth = cmd_buffer->device->physical_device->gs_table_depth;
    uint32_t num_prims = 0;
+   uint32_t num_prim_increments = 0;
    unsigned primgroup_size = 128; /* recommended without a GS */
 
    primgroup_size = radv_pipeline_has_stage(graphics_pipeline, MESA_SHADER_GEOMETRY) ? 64 : primgroup_size;
@@ -861,7 +862,8 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
    if (draw_vertex_count != 0) {
       if (prim_vertex_count.incr != 0) {
          if (draw_vertex_count >= prim_vertex_count.min) {
-            num_prims = (prim_vertex_count.incr + draw_vertex_count - prim_vertex_count.min) / prim_vertex_count.incr;
+            num_prim_increments = (prim_vertex_count.incr + draw_vertex_count - prim_vertex_count.min);
+            num_prims = num_prim_increments / prim_vertex_count.incr;
          }
       }
    }
-- 
GitLab


From b71a909e3e72aab122ad6d4ac4eb8c6f09565c7d Mon Sep 17 00:00:00 2001
From: Turo Lamminen <turo.lamminen@alternativegames.net>
Date: Tue, 24 Jan 2023 14:25:23 +0200
Subject: [PATCH 32/39] radv: Add temporarily redundant conditions to uses of
 num_prims

---
 src/amd/vulkan/si_cmd_buffer.c | 18 ++++++++++++++----
 1 file changed, 14 insertions(+), 4 deletions(-)

diff --git a/src/amd/vulkan/si_cmd_buffer.c b/src/amd/vulkan/si_cmd_buffer.c
index 379487df1d0e..ffc5a739dc26 100644
--- a/src/amd/vulkan/si_cmd_buffer.c
+++ b/src/amd/vulkan/si_cmd_buffer.c
@@ -870,8 +870,13 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
 
    multi_instances_smaller_than_primgroup = indirect_draw;
    if (!multi_instances_smaller_than_primgroup && instanced_draw) {
-      if (num_prims < primgroup_size)
-         multi_instances_smaller_than_primgroup = true;
+      if (prim_vertex_count.incr != 0) {
+         if (num_prims < primgroup_size)
+           multi_instances_smaller_than_primgroup = true;
+      } else {
+         if (0 < primgroup_size)
+            multi_instances_smaller_than_primgroup = true;
+      }
    }
 
    ia_switch_on_eoi = graphics_pipeline->ia_multi_vgt_param.ia_switch_on_eoi;
@@ -940,8 +945,13 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
       if (family == CHIP_HAWAII && ia_switch_on_eoi) {
          bool set_vgt_flush = indirect_draw;
          if (!set_vgt_flush && instanced_draw) {
-            if (num_prims <= 1)
-               set_vgt_flush = true;
+             if (prim_vertex_count.incr != 0) {
+                if (num_prims <= 1)
+                   set_vgt_flush = true;
+             } else {
+                if (0 <= 1)
+                   set_vgt_flush = true;
+             }
          }
          if (set_vgt_flush)
             cmd_buffer->state.flush_bits |= RADV_CMD_FLAG_VGT_FLUSH;
-- 
GitLab


From e2be9648c7fa8944421032e37caf24c04fd37f9e Mon Sep 17 00:00:00 2001
From: Turo Lamminen <turo.lamminen@alternativegames.net>
Date: Tue, 24 Jan 2023 14:25:24 +0200
Subject: [PATCH 33/39] radv: Replace uses of num_prims with the division

---
 src/amd/vulkan/si_cmd_buffer.c | 6 ++----
 1 file changed, 2 insertions(+), 4 deletions(-)

diff --git a/src/amd/vulkan/si_cmd_buffer.c b/src/amd/vulkan/si_cmd_buffer.c
index ffc5a739dc26..1b7821906378 100644
--- a/src/amd/vulkan/si_cmd_buffer.c
+++ b/src/amd/vulkan/si_cmd_buffer.c
@@ -839,7 +839,6 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
    bool multi_instances_smaller_than_primgroup;
    struct radv_prim_vertex_count prim_vertex_count = prim_size_table[topology];
    unsigned gs_table_depth = cmd_buffer->device->physical_device->gs_table_depth;
-   uint32_t num_prims = 0;
    uint32_t num_prim_increments = 0;
    unsigned primgroup_size = 128; /* recommended without a GS */
 
@@ -863,7 +862,6 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
       if (prim_vertex_count.incr != 0) {
          if (draw_vertex_count >= prim_vertex_count.min) {
             num_prim_increments = (prim_vertex_count.incr + draw_vertex_count - prim_vertex_count.min);
-            num_prims = num_prim_increments / prim_vertex_count.incr;
          }
       }
    }
@@ -871,7 +869,7 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
    multi_instances_smaller_than_primgroup = indirect_draw;
    if (!multi_instances_smaller_than_primgroup && instanced_draw) {
       if (prim_vertex_count.incr != 0) {
-         if (num_prims < primgroup_size)
+         if (num_prim_increments / prim_vertex_count.incr < primgroup_size)
            multi_instances_smaller_than_primgroup = true;
       } else {
          if (0 < primgroup_size)
@@ -946,7 +944,7 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
          bool set_vgt_flush = indirect_draw;
          if (!set_vgt_flush && instanced_draw) {
              if (prim_vertex_count.incr != 0) {
-                if (num_prims <= 1)
+                if (num_prim_increments / prim_vertex_count.incr <= 1)
                    set_vgt_flush = true;
              } else {
                 if (0 <= 1)
-- 
GitLab


From f572c5343055c300cbe9758e00f1e045d4f140cd Mon Sep 17 00:00:00 2001
From: Turo Lamminen <turo.lamminen@alternativegames.net>
Date: Tue, 24 Jan 2023 14:25:24 +0200
Subject: [PATCH 34/39] radv: Replace division with multiplication

---
 src/amd/vulkan/si_cmd_buffer.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/amd/vulkan/si_cmd_buffer.c b/src/amd/vulkan/si_cmd_buffer.c
index 1b7821906378..bdec3c11e9ab 100644
--- a/src/amd/vulkan/si_cmd_buffer.c
+++ b/src/amd/vulkan/si_cmd_buffer.c
@@ -869,7 +869,7 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
    multi_instances_smaller_than_primgroup = indirect_draw;
    if (!multi_instances_smaller_than_primgroup && instanced_draw) {
       if (prim_vertex_count.incr != 0) {
-         if (num_prim_increments / prim_vertex_count.incr < primgroup_size)
+         if (num_prim_increments < primgroup_size * prim_vertex_count.incr)
            multi_instances_smaller_than_primgroup = true;
       } else {
          if (0 < primgroup_size)
@@ -944,7 +944,7 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
          bool set_vgt_flush = indirect_draw;
          if (!set_vgt_flush && instanced_draw) {
              if (prim_vertex_count.incr != 0) {
-                if (num_prim_increments / prim_vertex_count.incr <= 1)
+                if (num_prim_increments <= 1 * prim_vertex_count.incr)
                    set_vgt_flush = true;
              } else {
                 if (0 <= 1)
-- 
GitLab


From 0768b8ebf08796e0b24f71ab3192fb0c6cd66537 Mon Sep 17 00:00:00 2001
From: Turo Lamminen <turo.lamminen@alternativegames.net>
Date: Tue, 24 Jan 2023 14:25:24 +0200
Subject: [PATCH 35/39] radv: Remove unnecessary conditions

---
 src/amd/vulkan/si_cmd_buffer.c | 3 ---
 1 file changed, 3 deletions(-)

diff --git a/src/amd/vulkan/si_cmd_buffer.c b/src/amd/vulkan/si_cmd_buffer.c
index bdec3c11e9ab..3700e340d8f5 100644
--- a/src/amd/vulkan/si_cmd_buffer.c
+++ b/src/amd/vulkan/si_cmd_buffer.c
@@ -859,11 +859,9 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
    }
 
    if (draw_vertex_count != 0) {
-      if (prim_vertex_count.incr != 0) {
          if (draw_vertex_count >= prim_vertex_count.min) {
             num_prim_increments = (prim_vertex_count.incr + draw_vertex_count - prim_vertex_count.min);
          }
-      }
    }
 
    multi_instances_smaller_than_primgroup = indirect_draw;
@@ -947,7 +945,6 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
                 if (num_prim_increments <= 1 * prim_vertex_count.incr)
                    set_vgt_flush = true;
              } else {
-                if (0 <= 1)
                    set_vgt_flush = true;
              }
          }
-- 
GitLab


From 4843b6cdaaffd55553fe75b5c75a89461908be9e Mon Sep 17 00:00:00 2001
From: Turo Lamminen <turo.lamminen@alternativegames.net>
Date: Tue, 24 Jan 2023 14:25:24 +0200
Subject: [PATCH 36/39] radv: Stop using radv_pipeline_has_stage() in
 si_get_ia_multi_vgt_param

Just like BindPipeline in c26306f7d9c72f53da219f487f4551422b3b100e
---
 src/amd/vulkan/si_cmd_buffer.c | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)

diff --git a/src/amd/vulkan/si_cmd_buffer.c b/src/amd/vulkan/si_cmd_buffer.c
index 3700e340d8f5..ec732ae88875 100644
--- a/src/amd/vulkan/si_cmd_buffer.c
+++ b/src/amd/vulkan/si_cmd_buffer.c
@@ -842,16 +842,16 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
    uint32_t num_prim_increments = 0;
    unsigned primgroup_size = 128; /* recommended without a GS */
 
-   primgroup_size = radv_pipeline_has_stage(graphics_pipeline, MESA_SHADER_GEOMETRY) ? 64 : primgroup_size;
-   primgroup_size = radv_pipeline_has_stage(graphics_pipeline, MESA_SHADER_TESS_CTRL) ? num_tess_patches : primgroup_size;
+   primgroup_size = (graphics_pipeline->active_stages & VK_SHADER_STAGE_GEOMETRY_BIT) ? 64 : primgroup_size;
+   primgroup_size = (graphics_pipeline->active_stages & VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT) ? num_tess_patches : primgroup_size;
 
    /* GS requirement. */
-   if (radv_pipeline_has_stage(graphics_pipeline, MESA_SHADER_GEOMETRY) &&
+   if ((graphics_pipeline->active_stages & VK_SHADER_STAGE_GEOMETRY_BIT) &&
        gfx_level <= GFX8) {
       partial_es_wave = (SI_GS_PER_ES >= (gs_table_depth - 3) * primgroup_size) ? true : partial_es_wave;
    }
 
-   if (radv_pipeline_has_stage(graphics_pipeline, MESA_SHADER_TESS_CTRL)) {
+   if (graphics_pipeline->active_stages & VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT) {
       if (topology == V_008958_DI_PT_PATCH) {
          prim_vertex_count.min = patch_control_points;
          prim_vertex_count.incr = 1;
@@ -919,7 +919,7 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
           (family == CHIP_HAWAII ||
            (gfx_level == GFX8 &&
             /* max primgroup in wave is always 2 - leave this for documentation */
-            (radv_pipeline_has_stage(graphics_pipeline, MESA_SHADER_GEOMETRY) || max_primgroup_in_wave != 2))))
+            ((graphics_pipeline->active_stages & VK_SHADER_STAGE_GEOMETRY_BIT) || max_primgroup_in_wave != 2))))
          partial_vs_wave = true;
 
       /* Instancing bug on Bonaire. */
@@ -933,7 +933,7 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
    if (gfx_level <= GFX8 && ia_switch_on_eoi)
       partial_es_wave = true;
 
-   if (radv_pipeline_has_stage(graphics_pipeline, MESA_SHADER_GEOMETRY)) {
+   if (graphics_pipeline->active_stages & VK_SHADER_STAGE_GEOMETRY_BIT) {
       /* GS hw bug with single-primitive instances and SWITCH_ON_EOI.
        * The hw doc says all multi-SE chips are affected, but amdgpu-pro Vulkan
        * only applies it to Hawaii. Do what amdgpu-pro Vulkan does.
-- 
GitLab


From e09e98d31b2c1ae3e6b32a041024b6535f32c78a Mon Sep 17 00:00:00 2001
From: Turo Lamminen <turo.lamminen@alternativegames.net>
Date: Tue, 24 Jan 2023 14:25:24 +0200
Subject: [PATCH 37/39] radv: Branchless handling of wd_switch_on_eop

---
 src/amd/vulkan/si_cmd_buffer.c | 16 ++++++++--------
 1 file changed, 8 insertions(+), 8 deletions(-)

diff --git a/src/amd/vulkan/si_cmd_buffer.c b/src/amd/vulkan/si_cmd_buffer.c
index ec732ae88875..9925fbcbae44 100644
--- a/src/amd/vulkan/si_cmd_buffer.c
+++ b/src/amd/vulkan/si_cmd_buffer.c
@@ -831,7 +831,7 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
    enum radeon_family family = info->family;
    const unsigned max_primgroup_in_wave = 2;
    /* SWITCH_ON_EOP(0) is always preferable. */
-   bool wd_switch_on_eop = false;
+   uintptr_t wd_switch_on_eop_count = 0;
    bool ia_switch_on_eop = false;
    bool ia_switch_on_eoi = false;
    bool partial_vs_wave = false;
@@ -888,13 +888,13 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
           (prim_restart_enable &&
            (info->family < CHIP_POLARIS10 ||
             (topology != V_008958_DI_PT_POINTLIST && topology != V_008958_DI_PT_LINESTRIP))))
-         wd_switch_on_eop = true;
+         wd_switch_on_eop_count++;
 
       /* Hawaii hangs if instancing is enabled and WD_SWITCH_ON_EOP is 0.
        * We don't know that for indirect drawing, so treat it as
        * always problematic. */
       if (family == CHIP_HAWAII && (instanced_draw || indirect_draw))
-         wd_switch_on_eop = true;
+         wd_switch_on_eop_count++;
 
       /* Performance recommendation for 4 SE Gfx7-8 parts if
        * instances are smaller than a primgroup.
@@ -902,16 +902,16 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
        * This is needed for good VS wave utilization.
        */
       if (gfx_level <= GFX8 && info->max_se == 4 && multi_instances_smaller_than_primgroup)
-         wd_switch_on_eop = true;
+         wd_switch_on_eop_count++;
 
       /* Hardware requirement when drawing primitives from a stream
        * output buffer.
        */
       if (count_from_stream_output)
-         wd_switch_on_eop = true;
+         wd_switch_on_eop_count++;
 
       /* Required on GFX7 and later. */
-      if (info->max_se > 2 && !wd_switch_on_eop)
+      if (info->max_se > 2 && !wd_switch_on_eop_count)
          ia_switch_on_eoi = true;
 
       /* Required by Hawaii and, for some special cases, by GFX8. */
@@ -927,7 +927,7 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
          partial_vs_wave = true;
 
       /* If the WD switch is false, the IA switch must be false too. */
-      assert(wd_switch_on_eop || !ia_switch_on_eop);
+      assert(!!wd_switch_on_eop_count || !ia_switch_on_eop);
    }
    /* If SWITCH_ON_EOI is set, PARTIAL_ES_WAVE must be set too. */
    if (gfx_level <= GFX8 && ia_switch_on_eoi)
@@ -967,7 +967,7 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
           S_028AA8_SWITCH_ON_EOP(ia_switch_on_eop) | S_028AA8_SWITCH_ON_EOI(ia_switch_on_eoi) |
           S_028AA8_PARTIAL_VS_WAVE_ON(partial_vs_wave) |
           S_028AA8_PARTIAL_ES_WAVE_ON(partial_es_wave) |
-          S_028AA8_WD_SWITCH_ON_EOP(gfx_level >= GFX7 ? wd_switch_on_eop : 0);
+          S_028AA8_WD_SWITCH_ON_EOP(gfx_level >= GFX7 ? !!wd_switch_on_eop_count : 0);
 }
 
 void
-- 
GitLab


From 70130a3882b740077eb6be0e7f640ed8449137de Mon Sep 17 00:00:00 2001
From: Turo Lamminen <turo.lamminen@alternativegames.net>
Date: Tue, 24 Jan 2023 14:25:24 +0200
Subject: [PATCH 38/39] radv: Clean up common variables

---
 src/amd/vulkan/si_cmd_buffer.c | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/src/amd/vulkan/si_cmd_buffer.c b/src/amd/vulkan/si_cmd_buffer.c
index 9925fbcbae44..4678d1ebde28 100644
--- a/src/amd/vulkan/si_cmd_buffer.c
+++ b/src/amd/vulkan/si_cmd_buffer.c
@@ -825,7 +825,8 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
                           uint32_t draw_vertex_count, unsigned topology, bool prim_restart_enable,
                           unsigned patch_control_points, unsigned num_tess_patches)
 {
-   struct radeon_info *info = &cmd_buffer->device->physical_device->rad_info;
+   struct radv_physical_device *physical_device = cmd_buffer->device->physical_device;
+   struct radeon_info *info = &physical_device->rad_info;
    struct radv_graphics_pipeline *graphics_pipeline = cmd_buffer->state.graphics_pipeline;
    enum amd_gfx_level gfx_level = info->gfx_level;
    enum radeon_family family = info->family;
@@ -838,7 +839,7 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
    bool partial_es_wave = graphics_pipeline->ia_multi_vgt_param.partial_es_wave;
    bool multi_instances_smaller_than_primgroup;
    struct radv_prim_vertex_count prim_vertex_count = prim_size_table[topology];
-   unsigned gs_table_depth = cmd_buffer->device->physical_device->gs_table_depth;
+   unsigned gs_table_depth = physical_device->gs_table_depth;
    uint32_t num_prim_increments = 0;
    unsigned primgroup_size = 128; /* recommended without a GS */
 
-- 
GitLab


From fd1477fa0d0520d4c6bb3856f675041742e94b93 Mon Sep 17 00:00:00 2001
From: Turo Lamminen <turo.lamminen@alternativegames.net>
Date: Tue, 24 Jan 2023 15:25:20 +0200
Subject: [PATCH 39/39] radv: Whitespace

---
 src/amd/vulkan/si_cmd_buffer.c | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/src/amd/vulkan/si_cmd_buffer.c b/src/amd/vulkan/si_cmd_buffer.c
index 4678d1ebde28..9e24e5d5e712 100644
--- a/src/amd/vulkan/si_cmd_buffer.c
+++ b/src/amd/vulkan/si_cmd_buffer.c
@@ -860,9 +860,9 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
    }
 
    if (draw_vertex_count != 0) {
-         if (draw_vertex_count >= prim_vertex_count.min) {
-            num_prim_increments = (prim_vertex_count.incr + draw_vertex_count - prim_vertex_count.min);
-         }
+      if (draw_vertex_count >= prim_vertex_count.min) {
+         num_prim_increments = (prim_vertex_count.incr + draw_vertex_count - prim_vertex_count.min);
+      }
    }
 
    multi_instances_smaller_than_primgroup = indirect_draw;
@@ -946,7 +946,7 @@ si_get_ia_multi_vgt_param(struct radv_cmd_buffer *cmd_buffer, bool instanced_dra
                 if (num_prim_increments <= 1 * prim_vertex_count.incr)
                    set_vgt_flush = true;
              } else {
-                   set_vgt_flush = true;
+                set_vgt_flush = true;
              }
          }
          if (set_vgt_flush)
-- 
GitLab

