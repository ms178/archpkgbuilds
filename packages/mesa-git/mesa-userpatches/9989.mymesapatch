From db819fb8208a6eddab95bb4e82b6f33a8b32ac34 Mon Sep 17 00:00:00 2001
From: Robert Mader <robert.mader@posteo.de>
Date: Sat, 16 Oct 2021 17:16:46 +0200
Subject: [PATCH 1/4] egl: Match config EGL_NATIVE_VISUAL_ID on X11

This is a deliberate violation of the EGL 1.5 spec which requires to not
match on EGL_NATIVE_VISUAL_ID.

The reasoning is that on X11, compositors use the visual as "magic bit"
to decide whether to alpha-blend surface contents.
Unlike on most (all?) other windowing systems, requesting an alpha channel
for the config alone does not already imply blending on the compositor
level.

Thus, in order to allow clients to explicitly request configs with
"magic bit" and, similar to GLX, to order configs in a way so clients
not requesting alpha-blending do not get it by accident, do match
visual ids.

Note that one consequence of this is that a lot more configs get
reported to clients.

Based on a patch by Freya Gentz <zegentzy@protonmail.com>, see
https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/2376

Signed-off-by: Robert Mader <robert.mader@posteo.de>
---
 src/egl/drivers/dri2/egl_dri2.c | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/src/egl/drivers/dri2/egl_dri2.c b/src/egl/drivers/dri2/egl_dri2.c
index 64d654f7e0b6b..ed8b1734b2575 100644
--- a/src/egl/drivers/dri2/egl_dri2.c
+++ b/src/egl/drivers/dri2/egl_dri2.c
@@ -330,6 +330,12 @@ dri2_get_dri_config(struct dri2_egl_config *conf, EGLint surface_type,
 static EGLBoolean
 dri2_match_config(const _EGLConfig *conf, const _EGLConfig *criteria)
 {
+#ifdef HAVE_X11_PLATFORM
+   if (conf->Display->Platform == _EGL_PLATFORM_X11 &&
+       conf->NativeVisualID != criteria->NativeVisualID)
+      return EGL_FALSE;
+#endif
+
    if (_eglCompareConfigs(conf, criteria, NULL, EGL_FALSE) != 0)
       return EGL_FALSE;
 
-- 
GitLab


From 3c8d0efefe21c4fdea1ebfedbd0564fb7a79f9d6 Mon Sep 17 00:00:00 2001
From: Robert Mader <robert.mader@posteo.de>
Date: Sat, 16 Oct 2021 17:16:46 +0200
Subject: [PATCH 2/4] egl/x11: Allow all RBA visuals to match 32-bit RGBA
 EGLConfigs

Drop the limitation to 24 or 30 bit configs. It was an abritrary
compromise to usually give apps what they wanted, but now we are about
to get a clean solution for alpha-blending on X11.

Based on a patch by Freya Gentz <zegentzy@protonmail.com>, see
https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/2376

Signed-off-by: Robert Mader <robert.mader@posteo.de>
---
 src/egl/drivers/dri2/platform_x11.c | 27 ++++++++++++---------------
 1 file changed, 12 insertions(+), 15 deletions(-)

diff --git a/src/egl/drivers/dri2/platform_x11.c b/src/egl/drivers/dri2/platform_x11.c
index 6af987ed7ad1c..ce908781cf2a8 100644
--- a/src/egl/drivers/dri2/platform_x11.c
+++ b/src/egl/drivers/dri2/platform_x11.c
@@ -830,27 +830,24 @@ dri2_x11_add_configs_for_visuals(struct dri2_egl_display *dri2_dpy,
                if (dri2_conf->base.ConfigID == config_count + 1)
                   config_count++;
 
-            /* Allow a 24-bit RGB visual to match a 32-bit RGBA EGLConfig.
-             * Ditto for 30-bit RGB visuals to match a 32-bit RGBA EGLConfig.
+            /* Allows RGB visuals to match a 32-bit RGBA EGLConfig.
              * Otherwise it will only match a 32-bit RGBA visual.  On a
              * composited window manager on X11, this will make all of the
              * EGLConfigs with destination alpha get blended by the
              * compositor.  This is probably not what the application
              * wants... especially on drivers that only have 32-bit RGBA
              * EGLConfigs! */
-            if (d.data->depth == 24 || d.data->depth == 30) {
-               unsigned int rgba_mask =
-                  ~(visuals[i].red_mask | visuals[i].green_mask |
-                    visuals[i].blue_mask);
-               rgba_shifts[3] = ffs(rgba_mask) - 1;
-               rgba_sizes[3] = util_bitcount(rgba_mask);
-               dri2_conf =
-                  dri2_add_config(disp, config, config_count + 1, surface_type,
-                                  config_attrs, rgba_shifts, rgba_sizes);
-               if (dri2_conf)
-                  if (dri2_conf->base.ConfigID == config_count + 1)
-                     config_count++;
-            }
+            unsigned int rgba_mask =
+               ~(visuals[i].red_mask | visuals[i].green_mask |
+                 visuals[i].blue_mask);
+            rgba_shifts[3] = ffs(rgba_mask) - 1;
+            rgba_sizes[3] = util_bitcount(rgba_mask);
+            dri2_conf =
+               dri2_add_config(disp, config, config_count + 1, surface_type,
+                               config_attrs, rgba_shifts, rgba_sizes);
+            if (dri2_conf)
+               if (dri2_conf->base.ConfigID == config_count + 1)
+                  config_count++;
          }
       }
 
-- 
GitLab


From 36910e8f411fc68deb5955d1f166a63a1e86042c Mon Sep 17 00:00:00 2001
From: Robert Mader <robert.mader@posteo.de>
Date: Sat, 16 Oct 2021 17:38:03 +0200
Subject: [PATCH 3/4] egl: Implement EGL_EXT_config_select_group

It allows us to influence the order of EGL configs for arbitrary
reasons, which will be used in the following commit.

Based on a patch by Freya Gentz <zegentzy@protonmail.com>, see
https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/2376

Signed-off-by: Robert Mader <robert.mader@posteo.de>
Reviewed-by: Adam Jackson <ajax@redhat.com>
---
 src/egl/main/eglconfig.c  | 9 +++++++++
 src/egl/main/eglconfig.h  | 2 ++
 src/egl/main/eglglobals.c | 1 +
 3 files changed, 12 insertions(+)

diff --git a/src/egl/main/eglconfig.c b/src/egl/main/eglconfig.c
index e962c6f32e389..71b1bdea11bfc 100644
--- a/src/egl/main/eglconfig.c
+++ b/src/egl/main/eglconfig.c
@@ -249,6 +249,9 @@ static const struct {
    { EGL_COLOR_COMPONENT_TYPE_EXT,  ATTRIB_TYPE_ENUM,
                                     ATTRIB_CRITERION_EXACT,
                                     EGL_COLOR_COMPONENT_TYPE_FIXED_EXT },
+   { EGL_CONFIG_SELECT_GROUP_EXT,   ATTRIB_TYPE_INTEGER,
+                                    ATTRIB_CRITERION_IGNORE,
+                                    0 },
    /* clang-format on */
 };
 
@@ -287,6 +290,8 @@ _eglValidateConfig(const _EGLConfig *conf, EGLBoolean for_matching)
             if (val > 1 || val < 0)
                valid = EGL_FALSE;
             break;
+         case EGL_CONFIG_SELECT_GROUP_EXT:
+            break;
          default:
             if (val < 0)
                valid = EGL_FALSE;
@@ -587,6 +592,10 @@ _eglCompareConfigs(const _EGLConfig *conf1, const _EGLConfig *conf2,
    if (conf1 == conf2)
       return 0;
 
+   val1 = conf1->ConfigSelectGroup - conf2->ConfigSelectGroup;
+   if (val1)
+      return val1;
+
    /* the enum values have the desired ordering */
    STATIC_ASSERT(EGL_NONE < EGL_SLOW_CONFIG);
    STATIC_ASSERT(EGL_SLOW_CONFIG < EGL_NON_CONFORMANT_CONFIG);
diff --git a/src/egl/main/eglconfig.h b/src/egl/main/eglconfig.h
index 15a91d13e5fec..f7ba0385ef220 100644
--- a/src/egl/main/eglconfig.h
+++ b/src/egl/main/eglconfig.h
@@ -84,6 +84,7 @@ struct _egl_config {
    EGLint FramebufferTargetAndroid;
    EGLint RecordableAndroid;
    EGLint ComponentType;
+   EGLint ConfigSelectGroup;
 };
 
 /**
@@ -135,6 +136,7 @@ _eglOffsetOfConfig(EGLint attr)
       ATTRIB_MAP(EGL_FRAMEBUFFER_TARGET_ANDROID, FramebufferTargetAndroid);
       ATTRIB_MAP(EGL_RECORDABLE_ANDROID, RecordableAndroid);
       ATTRIB_MAP(EGL_COLOR_COMPONENT_TYPE_EXT, ComponentType);
+      ATTRIB_MAP(EGL_CONFIG_SELECT_GROUP_EXT, ConfigSelectGroup);
 #undef ATTRIB_MAP
    default:
       return -1;
diff --git a/src/egl/main/eglglobals.c b/src/egl/main/eglglobals.c
index 926332a7b66db..f0343a52364eb 100644
--- a/src/egl/main/eglglobals.c
+++ b/src/egl/main/eglglobals.c
@@ -73,6 +73,7 @@ struct _egl_global _eglGlobal = {
       " EGL_EXT_platform_base"
       " EGL_KHR_client_get_all_proc_addresses"
       " EGL_KHR_debug"
+      " EGL_EXT_config_select_group"
 
 #if USE_LIBGLVND
    ,
-- 
GitLab


From 8a11c3a08b0c32fe69a93c228282026775c8b077 Mon Sep 17 00:00:00 2001
From: Hal Gentz <zegentzy@protonmail.com>
Date: Thu, 10 Oct 2019 18:35:50 -0600
Subject: [PATCH 4/4] egl-X11: Put RGBA visuals in the second config selection
 group

That way applications don't get windows that are compositor alpha-blended
accidentally.

In the ideal world, this would be done by the xserver, as it does for
GLX, however, an appropriate place could not be found, so it's being
placed here instead.

Signed-off-by: Hal Gentz <zegentzy@protonmail.com>
Signed-off-by: Robert Mader <robert.mader@posteo.de>
Reviewed-by: Adam Jackson <ajax@redhat.com>
---
 src/egl/drivers/dri2/platform_x11.c | 17 +++++++++++++++--
 1 file changed, 15 insertions(+), 2 deletions(-)

diff --git a/src/egl/drivers/dri2/platform_x11.c b/src/egl/drivers/dri2/platform_x11.c
index ce908781cf2a8..39e2ab1b5e010 100644
--- a/src/egl/drivers/dri2/platform_x11.c
+++ b/src/egl/drivers/dri2/platform_x11.c
@@ -845,9 +845,22 @@ dri2_x11_add_configs_for_visuals(struct dri2_egl_display *dri2_dpy,
             dri2_conf =
                dri2_add_config(disp, config, config_count + 1, surface_type,
                                config_attrs, rgba_shifts, rgba_sizes);
-            if (dri2_conf)
-               if (dri2_conf->base.ConfigID == config_count + 1)
+            if (dri2_conf) {
+               if (dri2_conf->base.ConfigID == config_count + 1) {
                   config_count++;
+
+                  /* Put RGBA visuals in the second ConfigSelectGroup so that they
+                   * have lower priority. Applications probably don't want the
+                   * compositor to alpha-blend their windows.
+                   */
+                  unsigned int bit_per_pixel =
+                     rgba_sizes[0] + rgba_sizes[1] + rgba_sizes[2] +
+                     rgba_sizes[3];
+                  if (d.data->depth == bit_per_pixel) {
+                     ++dri2_conf->base.ConfigSelectGroup;
+                  }
+               }
+            }
          }
       }
 
-- 
GitLab

