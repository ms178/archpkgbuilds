From 1d14994634e4ea5f682d64edde9428c0d45d6c70 Mon Sep 17 00:00:00 2001
From: Mario Kleiner <mario.kleiner.de@gmail.com>
Date: Wed, 15 Oct 2025 00:42:47 +0100
Subject: [PATCH 1/3] wsi/display: Accept 0 nits for HDR light level properties
 for "undefined"

CTA-861-G section 6.9.1 Static Metadata Type 1 declares that zero values
for different groups of HDR Metadata properties are allowed, including
zero nits values for max display mastering luminance, max content light
level, max frame-average light level and min display mastering luminance.

A zero value is meant to be treated by the video sink as "undefined" /
"unknown", and handled accordingly. This is common for dynamically
generated visual content.

Therefore don't assert on some minimum nits level > 0, but only check for
a non-negative level.

Fixes: b4176393a0aa ("wsi/display: Implement VK_EXT_hdr_metadata on KHR_display swapchain")
Signed-off-by: Mario Kleiner <mario.kleiner.de@gmail.com>
---
 src/vulkan/wsi/wsi_common_display.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/vulkan/wsi/wsi_common_display.c b/src/vulkan/wsi/wsi_common_display.c
index d505cf785c1b3..c30822fc84b7b 100644
--- a/src/vulkan/wsi/wsi_common_display.c
+++ b/src/vulkan/wsi/wsi_common_display.c
@@ -2582,7 +2582,7 @@ color_xy_to_u16(float v)
 static inline uint16_t
 nits_to_u16(float nits)
 {
-   assert(nits >= 1.0f);
+   assert(nits >= 0.0f);
    assert(nits <= 65535.0f);
    /*
     * CTA-861-G
@@ -2596,7 +2596,7 @@ nits_to_u16(float nits)
 static inline uint16_t
 nits_to_u16_dark(float nits)
 {
-   assert(nits >= 0.0001f);
+   assert(nits >= 0.0000f);
    assert(nits <= 6.5535f);
    /*
     * CTA-861-G
-- 
GitLab


From 948450c391492b2f8b08bd86c0c9cdd2b9dc2307 Mon Sep 17 00:00:00 2001
From: Mario Kleiner <mario.kleiner.de@gmail.com>
Date: Wed, 15 Oct 2025 03:15:50 +0100
Subject: [PATCH 2/3] wsi/display: Initially set default HDR metadata from EDID
 for HDR modes

For a selected non-default imageColorSpace during swapchain creation,
make sure that proper HDR setup also works even if a client app does not
explicitly call vkSetHdrMetadataEXT() in time.

Assign the EDID provided metadata here, so the 1st atomic commit will
set Colorspace and HDR metadata properties on the connector, to make sure
HDR or other wide color gamut modes get enabled.

Without this, the chain->color_outcome_serial would stay at zero and
the properties would not ever get assigned during drm_atomic_commit(),
leaving HDR disabled on the display sink.

Fixes: 13137393f67b ("wsi/display: Expose HDR10 colorspace based on EDID")
Signed-off-by: Mario Kleiner <mario.kleiner.de@gmail.com>
---
 src/vulkan/wsi/wsi_common_display.c | 9 +++++++++
 1 file changed, 9 insertions(+)

diff --git a/src/vulkan/wsi/wsi_common_display.c b/src/vulkan/wsi/wsi_common_display.c
index c30822fc84b7b..568b506d37aa1 100644
--- a/src/vulkan/wsi/wsi_common_display.c
+++ b/src/vulkan/wsi/wsi_common_display.c
@@ -3077,6 +3077,15 @@ wsi_display_surface_create_swapchain(
       }
    }
 
+   /* For a non-default colorspace, make sure that proper setup also works if
+    * a client app does not explicitly call vkSetHdrMetadataEXT(), but only
+    * selects a HDR colorspace. We assign the EDID provided metadata here, so
+    * the 1st atomic commit will assign colorspace and HDR metadata props to
+    * the connector to enable HDR or Wide color gamut modes.
+    */
+   if (create_info->imageColorSpace != VK_COLOR_SPACE_SRGB_NONLINEAR_KHR)
+      wsi_display_set_hdr_metadata(&chain->base, &chain->hdr_metadata);
+
    *swapchain_out = &chain->base;
 
    return VK_SUCCESS;
-- 
GitLab


From 01b8fbcd6eaf748bddc96a35ccc8c483e529e395 Mon Sep 17 00:00:00 2001
From: Mario Kleiner <mario.kleiner.de@gmail.com>
Date: Wed, 15 Oct 2025 07:25:18 +0100
Subject: [PATCH 3/3] wsi/display: Allow atomic modeset for change of
 Colorspace or HDR poperties

At least some drivers need a full modeset to change the Colorspace
property or to en-/disable HDR mode. E.g., at least amdgpu-kms as
tested under Linux 6.8 on Polaris needs it. Otherwise the atomic
commit for disabling HDR in _wsi_display_cleanup_state() will fail,
and the connector stays stuck in HDR mode after vkDestroySwapchainKHR().

Fixes: 1ed78dd7ec4a ("wsi/display: Clean up DRM hdr/color state on swapchain destruction")
Signed-off-by: Mario Kleiner <mario.kleiner.de@gmail.com>
---
 src/vulkan/wsi/wsi_common_display.c | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/src/vulkan/wsi/wsi_common_display.c b/src/vulkan/wsi/wsi_common_display.c
index 568b506d37aa1..12d357a9c0415 100644
--- a/src/vulkan/wsi/wsi_common_display.c
+++ b/src/vulkan/wsi/wsi_common_display.c
@@ -2733,6 +2733,11 @@ drm_atomic_commit(wsi_display_connector *connector, struct wsi_display_image *im
                                   connector->colorspace_enum[drm_colorspace]);
       }
 
+      /* At least some drivers need a modeset for HDR or Colorspace change, e.g., amdgpu
+       * at least for Colorspace change or HDR en-/disable.
+       */
+      flags |= DRM_MODE_ATOMIC_ALLOW_MODESET;
+
       connector->color_outcome_serial = image->chain->color_outcome_serial;
    }
 
-- 
GitLab

