From a91311cd076ef0fbd63ba42333981f487754c1de Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Wed, 2 Nov 2022 16:45:08 +0000
Subject: [PATCH 1/5] nir/lower_bit_size: lower uadd_carry

8/16-bit uadd_carry can exist in SPIR-V.

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
Gitlab: https://gitlab.freedesktop.org/mesa/mesa/-/issues/7615
Cc: mesa-stable
---
 src/compiler/nir/nir_lower_bit_size.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/src/compiler/nir/nir_lower_bit_size.c b/src/compiler/nir/nir_lower_bit_size.c
index 79653be96bbc..7740992f8178 100644
--- a/src/compiler/nir/nir_lower_bit_size.c
+++ b/src/compiler/nir/nir_lower_bit_size.c
@@ -79,6 +79,8 @@ lower_alu_instr(nir_builder *bld, nir_alu_instr *alu, unsigned bit_size)
          lowered_dst = nir_ushr_imm(bld, lowered_dst, dst_bit_size);
       else
          lowered_dst = nir_ishr_imm(bld, lowered_dst, dst_bit_size);
+   } else if (op == nir_op_uadd_carry) {
+      lowered_dst = nir_ushr_imm(bld, nir_iadd(bld, srcs[0], srcs[1]), dst_bit_size);
    } else {
       lowered_dst = nir_build_alu_src_arr(bld, op, srcs);
 
-- 
GitLab


From e57736a3b8276c935452c93d8f3e2dd279a9475a Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Wed, 2 Nov 2022 16:45:27 +0000
Subject: [PATCH 2/5] radv: lower 8/16-bit uadd_carry/usub_borrow

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
Closes: https://gitlab.freedesktop.org/mesa/mesa/-/issues/7615
Cc: mesa-stable
---
 src/amd/vulkan/radv_pipeline.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/src/amd/vulkan/radv_pipeline.c b/src/amd/vulkan/radv_pipeline.c
index 8fe7b52465f7..d57b989882de 100644
--- a/src/amd/vulkan/radv_pipeline.c
+++ b/src/amd/vulkan/radv_pipeline.c
@@ -3108,6 +3108,8 @@ lower_bit_size_callback(const nir_instr *instr, void *_)
       case nir_op_bitfield_select:
       case nir_op_imul_high:
       case nir_op_umul_high:
+      case nir_op_uadd_carry:
+      case nir_op_usub_borrow:
          return 32;
       case nir_op_iabs:
       case nir_op_imax:
-- 
GitLab


From b8dff460ceb623f0beb0694c2c916a3263fdc0c1 Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Wed, 2 Nov 2022 16:45:41 +0000
Subject: [PATCH 3/5] nir/algebraic: optimize open-coded uadd_sat/usub_sat

fossil-db (navi21):
Totals from 19 (0.01% of 135636) affected shaders:
Instrs: 40730 -> 40688 (-0.10%)
CodeSize: 217708 -> 217568 (-0.06%)
Latency: 261466 -> 261373 (-0.04%)
InvThroughput: 74944 -> 74896 (-0.06%)

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
---
 src/compiler/nir/nir_opt_algebraic.py | 26 ++++++++++++++++++++++++++
 1 file changed, 26 insertions(+)

diff --git a/src/compiler/nir/nir_opt_algebraic.py b/src/compiler/nir/nir_opt_algebraic.py
index 026f0ee5558a..e1d0e78763e5 100644
--- a/src/compiler/nir/nir_opt_algebraic.py
+++ b/src/compiler/nir/nir_opt_algebraic.py
@@ -2073,6 +2073,32 @@ optimizations.extend([
    (('imul24', a, 0), (0)),
 ])
 
+for bit_size in [8, 16, 32, 64]:
+   cond = '!options->lower_uadd_sat'
+   if bit_size == 64:
+      cond += ' && !(options->lower_int64_options & nir_lower_iadd64)'
+   add = 'iadd@' + str(bit_size)
+
+   optimizations += [
+      (('bcsel', ('ult', ('iadd', a, b), a), -1, (add, a, b)), ('uadd_sat', a, b), cond),
+      (('bcsel', ('uge', ('iadd', a, b), a), (add, a, b), -1), ('uadd_sat', a, b), cond),
+      (('bcsel', ('ieq', ('uadd_carry', a, b), 0), (add, a, b), -1), ('uadd_sat', a, b), cond),
+      (('bcsel', ('ine', ('uadd_carry', a, b), 0), -1, (add, a, b)), ('uadd_sat', a, b), cond),
+   ]
+
+for bit_size in [8, 16, 32, 64]:
+   cond = '!options->lower_usub_sat'
+   if bit_size == 64:
+      cond += ' && !(options->lower_int64_options & nir_lower_usub_sat64)'
+   sub = 'isub@' + str(bit_size)
+
+   optimizations += [
+      (('bcsel', ('ult', a, b), 0, (sub, a, b)), ('usub_sat', a, b), cond),
+      (('bcsel', ('uge', a, b), (sub, a, b), 0), ('usub_sat', a, b), cond),
+      (('bcsel', ('ieq', ('usub_borrow', a, b), 0), (sub, a, b), 0), ('usub_sat', a, b), cond),
+      (('bcsel', ('ine', ('usub_borrow', a, b), 0), 0, (sub, a, b)), ('usub_sat', a, b), cond),
+   ]
+
 # bit_size dependent lowerings
 for bit_size in [8, 16, 32, 64]:
    # convenience constants
-- 
GitLab


From 510bdbc6525a9db8a9b1df9213350828bda7d112 Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Thu, 3 Nov 2022 13:05:41 +0000
Subject: [PATCH 4/5] nir/lower_bit_size: optimize usub_sat lowering

The result should never be larger than uint_max. This doesn't need a
special path.

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
---
 src/compiler/nir/nir_lower_bit_size.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/compiler/nir/nir_lower_bit_size.c b/src/compiler/nir/nir_lower_bit_size.c
index 7740992f8178..7afc3d3b7995 100644
--- a/src/compiler/nir/nir_lower_bit_size.c
+++ b/src/compiler/nir/nir_lower_bit_size.c
@@ -94,7 +94,7 @@ lower_alu_instr(nir_builder *bld, nir_alu_instr *alu, unsigned bit_size)
          lowered_dst = nir_iclamp(bld, lowered_dst,
                                   nir_imm_intN_t(bld, int_min, bit_size),
                                   nir_imm_intN_t(bld, int_max, bit_size));
-      } else if (op == nir_op_uadd_sat || op == nir_op_usub_sat) {
+      } else if (op == nir_op_uadd_sat) {
          const uint64_t uint_max = u_uintN_max(dst_bit_size);
 
          lowered_dst = nir_umin(bld, lowered_dst,
-- 
GitLab


From 1098f5535cb4622ba197dd4f6c80585518bd48ff Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Wed, 2 Nov 2022 16:49:18 +0000
Subject: [PATCH 5/5] nir/lower_bit_size: lower uadd_sat/iadd_sat/isub_sat to
 unsaturated alu

The unsaturated arithmetic won't overflow/borrow, and may be faster.

No fossil-db changes.

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
---
 src/compiler/nir/nir_lower_bit_size.c | 15 +++++++++++----
 1 file changed, 11 insertions(+), 4 deletions(-)

diff --git a/src/compiler/nir/nir_lower_bit_size.c b/src/compiler/nir/nir_lower_bit_size.c
index 7afc3d3b7995..1f655ab1cece 100644
--- a/src/compiler/nir/nir_lower_bit_size.c
+++ b/src/compiler/nir/nir_lower_bit_size.c
@@ -79,10 +79,12 @@ lower_alu_instr(nir_builder *bld, nir_alu_instr *alu, unsigned bit_size)
          lowered_dst = nir_ushr_imm(bld, lowered_dst, dst_bit_size);
       else
          lowered_dst = nir_ishr_imm(bld, lowered_dst, dst_bit_size);
-   } else if (op == nir_op_uadd_carry) {
-      lowered_dst = nir_ushr_imm(bld, nir_iadd(bld, srcs[0], srcs[1]), dst_bit_size);
-   } else {
-      lowered_dst = nir_build_alu_src_arr(bld, op, srcs);
+   } else if (op == nir_op_iadd_sat || op == nir_op_isub_sat || op == nir_op_uadd_sat ||
+              op == nir_op_uadd_carry) {
+      if (op == nir_op_isub_sat)
+         lowered_dst = nir_isub(bld, srcs[0], srcs[1]);
+      else
+         lowered_dst = nir_iadd(bld, srcs[0], srcs[1]);
 
       /* The add_sat and sub_sat instructions need to clamp the result to the
        * range of the original type.
@@ -99,7 +101,12 @@ lower_alu_instr(nir_builder *bld, nir_alu_instr *alu, unsigned bit_size)
 
          lowered_dst = nir_umin(bld, lowered_dst,
                                 nir_imm_intN_t(bld, uint_max, bit_size));
+      } else {
+         assert(op == nir_op_uadd_carry);
+         lowered_dst = nir_ushr_imm(bld, lowered_dst, dst_bit_size);
       }
+   } else {
+      lowered_dst = nir_build_alu_src_arr(bld, op, srcs);
    }
 
 
-- 
GitLab

