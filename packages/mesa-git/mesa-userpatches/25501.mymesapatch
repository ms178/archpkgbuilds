From 3dee6e123a3a052d303c7e7279087fc1369f16a9 Mon Sep 17 00:00:00 2001
From: Georg Lehmann <dadschoorse@gmail.com>
Date: Mon, 2 Oct 2023 12:53:49 +0200
Subject: [PATCH 1/2] nir: make quad intrinsic dst bit size match src0

---
 src/compiler/nir/nir_intrinsics.py | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/src/compiler/nir/nir_intrinsics.py b/src/compiler/nir/nir_intrinsics.py
index 71a570fc71eb..8bc2226ab69f 100644
--- a/src/compiler/nir/nir_intrinsics.py
+++ b/src/compiler/nir/nir_intrinsics.py
@@ -491,10 +491,10 @@ intrinsic("shuffle_up", src_comp=[0, 1], dest_comp=0, bit_sizes=src0, flags=[CAN
 intrinsic("shuffle_down", src_comp=[0, 1], dest_comp=0, bit_sizes=src0, flags=[CAN_ELIMINATE])
 
 # Quad operations from SPIR-V.
-intrinsic("quad_broadcast", src_comp=[0, 1], dest_comp=0, flags=[CAN_ELIMINATE])
-intrinsic("quad_swap_horizontal", src_comp=[0], dest_comp=0, flags=[CAN_ELIMINATE])
-intrinsic("quad_swap_vertical", src_comp=[0], dest_comp=0, flags=[CAN_ELIMINATE])
-intrinsic("quad_swap_diagonal", src_comp=[0], dest_comp=0, flags=[CAN_ELIMINATE])
+intrinsic("quad_broadcast", src_comp=[0, 1], dest_comp=0, bit_sizes=src0, flags=[CAN_ELIMINATE])
+intrinsic("quad_swap_horizontal", src_comp=[0], dest_comp=0, bit_sizes=src0, flags=[CAN_ELIMINATE])
+intrinsic("quad_swap_vertical", src_comp=[0], dest_comp=0, bit_sizes=src0, flags=[CAN_ELIMINATE])
+intrinsic("quad_swap_diagonal", src_comp=[0], dest_comp=0, bit_sizes=src0, flags=[CAN_ELIMINATE])
 
 # Rotate operation from SPIR-V: SpvOpGroupNonUniformRotateKHR.
 intrinsic("rotate", src_comp=[0, 1], dest_comp=0, bit_sizes=src0,
-- 
GitLab


From b05af2fe60181435b80c14445237c633814a2e89 Mon Sep 17 00:00:00 2001
From: Georg Lehmann <dadschoorse@gmail.com>
Date: Mon, 2 Oct 2023 13:02:14 +0200
Subject: [PATCH 2/2] 	nir/lower_subgroups: use intrinsic builder more

---
 src/compiler/nir/nir_lower_subgroups.c | 64 +++++++-------------------
 1 file changed, 16 insertions(+), 48 deletions(-)

diff --git a/src/compiler/nir/nir_lower_subgroups.c b/src/compiler/nir/nir_lower_subgroups.c
index 88df3e824518..7c8aacf93181 100644
--- a/src/compiler/nir/nir_lower_subgroups.c
+++ b/src/compiler/nir/nir_lower_subgroups.c
@@ -144,18 +144,18 @@ lower_vote_eq_to_scalar(nir_builder *b, nir_intrinsic_instr *intrin)
 
    nir_def *result = NULL;
    for (unsigned i = 0; i < intrin->num_components; i++) {
-      nir_intrinsic_instr *chan_intrin =
-         nir_intrinsic_instr_create(b->shader, intrin->intrinsic);
-      nir_def_init(&chan_intrin->instr, &chan_intrin->def, 1,
-                   intrin->def.bit_size);
-      chan_intrin->num_components = 1;
-      chan_intrin->src[0] = nir_src_for_ssa(nir_channel(b, value, i));
-      nir_builder_instr_insert(b, &chan_intrin->instr);
+      nir_def* chan = nir_channel(b, value, i);
+
+      if (intrin->intrinsic == nir_intrinsic_vote_feq) {
+         chan = nir_vote_feq(b, intrin->def.bit_size, chan);
+      } else {
+         chan = nir_vote_ieq(b, intrin->def.bit_size, chan);
+      }
 
       if (result) {
-         result = nir_iand(b, result, &chan_intrin->def);
+         result = nir_iand(b, result, chan);
       } else {
-         result = &chan_intrin->def;
+         result = chan;
       }
    }
 
@@ -197,16 +197,8 @@ lower_shuffle_to_swizzle(nir_builder *b, nir_intrinsic_instr *intrin)
    if (mask >= 32)
       return NULL;
 
-   nir_intrinsic_instr *swizzle = nir_intrinsic_instr_create(
-      b->shader, nir_intrinsic_masked_swizzle_amd);
-   swizzle->num_components = intrin->num_components;
-   swizzle->src[0] = nir_src_for_ssa(intrin->src[0].ssa);
-   nir_intrinsic_set_swizzle_mask(swizzle, (mask << 10) | 0x1f);
-   nir_def_init(&swizzle->instr, &swizzle->def,
-                intrin->def.num_components, intrin->def.bit_size);
-
-   nir_builder_instr_insert(b, &swizzle->instr);
-   return &swizzle->def;
+   return nir_masked_swizzle_amd(b, intrin->src[0].ssa,
+                                 .swizzle_mask = (mask << 10) | 0x1f);
 }
 
 /* Lowers "specialized" shuffles to a generic nir_intrinsic_shuffle. */
@@ -277,16 +269,7 @@ lower_to_shuffle(nir_builder *b, nir_intrinsic_instr *intrin,
       unreachable("Invalid intrinsic");
    }
 
-   nir_intrinsic_instr *shuffle =
-      nir_intrinsic_instr_create(b->shader, nir_intrinsic_shuffle);
-   shuffle->num_components = intrin->num_components;
-   shuffle->src[0] = nir_src_for_ssa(intrin->src[0].ssa);
-   shuffle->src[1] = nir_src_for_ssa(index);
-   nir_def_init(&shuffle->instr, &shuffle->def,
-                intrin->def.num_components, intrin->def.bit_size);
-
-   nir_builder_instr_insert(b, &shuffle->instr);
-   return &shuffle->def;
+   return nir_shuffle(b, intrin->src[0].ssa, index);
 }
 
 static const struct glsl_type *
@@ -552,29 +535,14 @@ lower_dynamic_quad_broadcast(nir_builder *b, nir_intrinsic_instr *intrin,
    nir_def *dst = NULL;
 
    for (unsigned i = 0; i < 4; ++i) {
-      nir_intrinsic_instr *qbcst =
-         nir_intrinsic_instr_create(b->shader, nir_intrinsic_quad_broadcast);
-
-      qbcst->num_components = intrin->num_components;
-      qbcst->src[1] = nir_src_for_ssa(nir_imm_int(b, i));
-      qbcst->src[0] = nir_src_for_ssa(intrin->src[0].ssa);
-      nir_def_init(&qbcst->instr, &qbcst->def,
-                   intrin->def.num_components, intrin->def.bit_size);
-
-      nir_def *qbcst_dst = NULL;
-
-      if (options->lower_to_scalar && qbcst->num_components > 1) {
-         qbcst_dst = lower_subgroup_op_to_scalar(b, qbcst);
-      } else {
-         nir_builder_instr_insert(b, &qbcst->instr);
-         qbcst_dst = &qbcst->def;
-      }
+      nir_def *qbcst = nir_quad_broadcast(b, intrin->src[0].ssa,
+                                              nir_imm_int(b, i));
 
       if (i)
          dst = nir_bcsel(b, nir_ieq_imm(b, intrin->src[1].ssa, i),
-                         qbcst_dst, dst);
+                         qbcst, dst);
       else
-         dst = qbcst_dst;
+         dst = qbcst;
    }
 
    return dst;
-- 
GitLab

