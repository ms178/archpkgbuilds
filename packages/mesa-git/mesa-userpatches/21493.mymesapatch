From dada678bd6070577572d0b6176c5fe0a6fd3b205 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Timur=20Krist=C3=B3f?= <timur.kristof@gmail.com>
Date: Sun, 19 Feb 2023 14:07:10 +0100
Subject: [PATCH 1/4] aco: Simplify get_phi_operand using Operand::c32_or_c64.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Timur Krist贸f <timur.kristof@gmail.com>
---
 src/amd/compiler/aco_instruction_selection.cpp | 8 ++------
 1 file changed, 2 insertions(+), 6 deletions(-)

diff --git a/src/amd/compiler/aco_instruction_selection.cpp b/src/amd/compiler/aco_instruction_selection.cpp
index 1f4547d14331..0f07bed4490a 100644
--- a/src/amd/compiler/aco_instruction_selection.cpp
+++ b/src/amd/compiler/aco_instruction_selection.cpp
@@ -9923,12 +9923,8 @@ get_phi_operand(isel_context* ctx, nir_ssa_def* ssa, RegClass rc, bool logical)
       return Operand(rc);
    } else if (logical && ssa->bit_size == 1 &&
               ssa->parent_instr->type == nir_instr_type_load_const) {
-      if (ctx->program->wave_size == 64)
-         return Operand::c64(nir_instr_as_load_const(ssa->parent_instr)->value[0].b ? UINT64_MAX
-                                                                                    : 0u);
-      else
-         return Operand::c32(nir_instr_as_load_const(ssa->parent_instr)->value[0].b ? UINT32_MAX
-                                                                                    : 0u);
+      bool val = nir_instr_as_load_const(ssa->parent_instr)->value[0].b;
+      return Operand::c32_or_c64(val ? -1 : 0, ctx->program->lane_mask == s2);
    } else {
       return Operand(tmp);
    }
-- 
GitLab


From c8fc056fea476696389c51304218e769edb81edb Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Timur=20Krist=C3=B3f?= <timur.kristof@gmail.com>
Date: Wed, 22 Feb 2023 23:27:25 +0100
Subject: [PATCH 2/4] aco: Don't consider a branch as using exec when its
 targets are the same.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This commit is a pre-requisite for the next ones and its stats are
not really relevant by itself.

Fossil DB stats on GFX11:

Totals from 1 (0.00% of 134913) affected shaders:
CodeSize: 4680 -> 4560 (-2.56%)
Instrs: 939 -> 909 (-3.19%)
Latency: 2714 -> 2701 (-0.48%)
InvThroughput: 170 -> 169 (-0.59%)

Signed-off-by: Timur Krist贸f <timur.kristof@gmail.com>
---
 src/amd/compiler/aco_ir.cpp | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/src/amd/compiler/aco_ir.cpp b/src/amd/compiler/aco_ir.cpp
index 4652af8ddb92..255d98abdf4d 100644
--- a/src/amd/compiler/aco_ir.cpp
+++ b/src/amd/compiler/aco_ir.cpp
@@ -712,9 +712,13 @@ needs_exec_mask(const Instruction* instr)
    if (instr->isVMEM() || instr->isFlatLike())
       return true;
 
-   if (instr->isSALU() || instr->isBranch() || instr->isSMEM() || instr->isBarrier())
+   if (instr->isSALU() || instr->isSMEM() || instr->isBarrier())
       return instr->reads_exec();
 
+   if (instr->isBranch())
+      return instr->branch().target[0] != instr->branch().target[1] &&
+             instr->reads_exec();
+
    if (instr->isPseudo()) {
       switch (instr->opcode) {
       case aco_opcode::p_create_vector:
-- 
GitLab


From 757a461c9baa43aff3fd12e466e12e4eb362a0be Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Timur=20Krist=C3=B3f?= <timur.kristof@gmail.com>
Date: Tue, 21 Feb 2023 14:33:58 +0100
Subject: [PATCH 3/4] aco: Call dominator_tree before lower_phis.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This just makes it possible to use the dominator
tree information during phi lowering.

No Fossil DB changes on GFX11.

Signed-off-by: Timur Krist贸f <timur.kristof@gmail.com>
---
 src/amd/compiler/aco_interface.cpp | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/src/amd/compiler/aco_interface.cpp b/src/amd/compiler/aco_interface.cpp
index 7b55151f768d..9057903ba4f5 100644
--- a/src/amd/compiler/aco_interface.cpp
+++ b/src/amd/compiler/aco_interface.cpp
@@ -123,9 +123,8 @@ aco_postprocess_shader(const struct aco_compiler_options* options,
 
    aco::live live_vars;
    if (!args->is_trap_handler_shader) {
-      /* Phi lowering */
-      aco::lower_phis(program.get());
       aco::dominator_tree(program.get());
+      aco::lower_phis(program.get());
       validate(program.get());
 
       /* Optimization */
-- 
GitLab


From 3ae622cad1573632d3665caf907efc5729df53a2 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Timur=20Krist=C3=B3f?= <timur.kristof@gmail.com>
Date: Tue, 21 Feb 2023 15:04:40 +0100
Subject: [PATCH 4/4] aco: Better phi lowering for merge block when else-side
 is const.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Add a new special case for binary merge blocks to boolean
phi lowerig. This special case benefits shaders that
have divergent branches with an empty else block,
for example all NGG culling shaders.

Fossil DB stats on Rembrandt (NGG culling enabled):

Totals from 61778 (45.79% of 134913) affected shaders:
SpillVGPRs: 2268 -> 2284 (+0.71%); split: -1.10%, +1.81%
CodeSize: 164317952 -> 162962772 (-0.82%); split: -0.83%, +0.00%
Instrs: 31249824 -> 30910686 (-1.09%); split: -1.09%, +0.00%
Latency: 154948555 -> 154781097 (-0.11%); split: -0.12%, +0.02%
InvThroughput: 30397664 -> 30370872 (-0.09%); split: -0.13%, +0.04%
VClause: 529239 -> 529229 (-0.00%); split: -0.00%, +0.00%
SClause: 783417 -> 783430 (+0.00%)
Copies: 2627570 -> 2595161 (-1.23%); split: -1.25%, +0.02%
Branches: 976506 -> 976508 (+0.00%); split: -0.00%, +0.00%

Fossil DB stats on GFX11 (NGG culling disabled):

Totals from 895 (0.66% of 134913) affected shaders:
SpillVGPRs: 2258 -> 2322 (+2.83%); split: -0.44%, +3.28%
CodeSize: 6229152 -> 6215880 (-0.21%); split: -0.37%, +0.16%
Scratch: 216576 -> 215808 (-0.35%); split: -0.47%, +0.12%
Instrs: 1202077 -> 1198396 (-0.31%); split: -0.43%, +0.13%
Latency: 15921336 -> 16000561 (+0.50%); split: -0.74%, +1.24%
InvThroughput: 7425765 -> 7474891 (+0.66%); split: -0.67%, +1.33%
VClause: 22976 -> 23008 (+0.14%); split: -0.03%, +0.17%
SClause: 38269 -> 38271 (+0.01%)
Copies: 123244 -> 123896 (+0.53%); split: -0.30%, +0.83%
Branches: 47570 -> 47574 (+0.01%); split: -0.00%, +0.01%

Signed-off-by: Timur Krist贸f <timur.kristof@gmail.com>
---
 src/amd/compiler/aco_lower_phis.cpp | 50 +++++++++++++++++++++++++++++
 1 file changed, 50 insertions(+)

diff --git a/src/amd/compiler/aco_lower_phis.cpp b/src/amd/compiler/aco_lower_phis.cpp
index 6b8f611ecc71..8d25a40bfd86 100644
--- a/src/amd/compiler/aco_lower_phis.cpp
+++ b/src/amd/compiler/aco_lower_phis.cpp
@@ -192,6 +192,50 @@ build_merge_code(Program* program, ssa_state* state, Block* block, Operand cur)
    return;
 }
 
+void
+build_const_else_merge_code(Program* program, Block& invert_block, aco_ptr<Instruction>& phi)
+{
+   /* When the else-side operand of a binary merge phi is constant,
+    * we can use a simpler way to lower the phi by emitting some
+    * instructions to the invert block instead.
+    * This allows us to actually delete the else block when it's empty.
+    */
+   assert(invert_block.kind & block_kind_invert);
+   Builder bld(program);
+   Operand then = phi->operands[0];
+   const Operand els = phi->operands[1];
+
+   /* Only -1 (all lanes true) and 0 (all lanes false) constants are supported here. */
+   assert(!then.isConstant() || then.constantEquals(0) || then.constantEquals(-1));
+   assert(els.constantEquals(0) || els.constantEquals(-1));
+
+   if (!then.isConstant()) {
+      /* Left-hand operand is not constant, so we need to emit a phi to access it. */
+      bld.reset(&invert_block.instructions, invert_block.instructions.begin());
+      then = bld.pseudo(aco_opcode::p_linear_phi, bld.def(bld.lm), then, Operand(bld.lm));
+   }
+
+   auto after_phis =
+      std::find_if(invert_block.instructions.begin(), invert_block.instructions.end(),
+                   [](const aco_ptr<Instruction>& instr) -> bool { return !is_phi(instr.get()); });
+   bld.reset(&invert_block.instructions, after_phis);
+
+   if (then.constantEquals(-1) && els.constantEquals(0)) {
+      bld.copy(phi->definitions[0], Operand(exec, bld.lm));
+   } else {
+      Builder::WaveSpecificOpcode opc = els.constantEquals(0) ? Builder::s_and : Builder::s_orn2;
+      bld.sop2(opc, phi->definitions[0], bld.def(s1, scc), then, Operand(exec, bld.lm));
+   }
+
+   /* We can't delete the original phi because that'd invalidate the iterator in lower_phis,
+    * so just make it harmless and let DCE deal with it later.
+    */
+   phi->opcode = aco_opcode::p_parallelcopy;
+   phi->definitions[0] = bld.def(bld.lm);
+   phi->operands[0] = Operand::c32_or_c64(0, bld.lm == s2);
+   phi->operands.pop_back();
+}
+
 void
 init_any_pred_defined(Program* program, ssa_state* state, Block* block, aco_ptr<Instruction>& phi)
 {
@@ -268,6 +312,12 @@ lower_divergent_bool_phi(Program* program, ssa_state* state, Block* block,
       return;
    }
 
+   if (phi->operands.size() == 2 && phi->operands[1].isConstant() &&
+       (block->kind & block_kind_merge)) {
+      build_const_else_merge_code(program, program->blocks[block->linear_idom], phi);
+      return;
+   }
+
    /* do this here to avoid resizing in case of no boolean phis */
    state->visited.resize(program->blocks.size());
    state->outputs.resize(program->blocks.size());
-- 
GitLab

