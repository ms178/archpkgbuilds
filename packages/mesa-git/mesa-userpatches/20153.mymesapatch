From 8c11b2d06c7b3b51790d58b7230c7db96aba7ddd Mon Sep 17 00:00:00 2001
From: Rohan Garg <rohan.garg@intel.com>
Date: Fri, 2 Dec 2022 16:23:34 +0530
Subject: [PATCH 1/9] util: add a 64 bit version of
 util_is_power_of_two_nonzero
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Add a 64bit version of util_is_power_of_two_nonzero64 to handle upcoming
changes to the math util functions.

Signed-off-by: Rohan Garg <rohan.garg@intel.com>
Reviewed-by: Erik Faye-Lund <erik.faye-lund@collabora.com>
Reviewed-by: Marek Olšák <marek.olsak@amd.com>
Part-of: <https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/20153>
---
 src/util/bitscan.h | 29 +++++++++++++++++++++++++++++
 1 file changed, 29 insertions(+)

diff --git a/src/util/bitscan.h b/src/util/bitscan.h
index 53cbb91e98c9..9102bd2f515c 100644
--- a/src/util/bitscan.h
+++ b/src/util/bitscan.h
@@ -34,6 +34,8 @@
 #include <stdbool.h>
 #include <string.h>
 
+#include "util/macros.h"
+
 #if defined(_MSC_VER)
 #include <intrin.h>
 #endif
@@ -166,6 +168,33 @@ util_is_power_of_two_nonzero(unsigned v)
 #endif
 }
 
+/* Determine if an uint64_t value is a power of two.
+ *
+ * \note
+ * Zero is \b not treated as a power of two.
+ */
+static inline bool
+util_is_power_of_two_nonzero64(uint64_t v)
+{
+   /* __POPCNT__ is different from HAVE___BUILTIN_POPCOUNT.  The latter
+    * indicates the existence of the __builtin_popcount function.  The former
+    * indicates that _mm_popcnt_u32 exists and is a native instruction.
+    *
+    * The other alternative is to use SSE 4.2 compile-time flags.  This has
+    * two drawbacks.  First, there is currently no build infrastructure for
+    * SSE 4.2 (only 4.1), so that would have to be added.  Second, some AMD
+    * CPUs support POPCNT but not SSE 4.2 (e.g., Barcelona).
+    */
+#ifdef __x86_64__
+#ifdef __POPCNT__
+   return _mm_popcnt_u64(v) == 1;
+#endif  // __POPCNT__
+#endif  // __x86_64__
+
+   return v != 0 && IS_POT(v);
+
+}
+
 /* For looping over a bitmask when you want to loop over consecutive bits
  * manually, for example:
  *
-- 
GitLab


From 76606a3b2addba3653a78aec93ff47d0801aba15 Mon Sep 17 00:00:00 2001
From: Rohan Garg <rohan.garg@intel.com>
Date: Fri, 2 Dec 2022 15:16:25 +0530
Subject: [PATCH 2/9] util: adjust ROUND_DOWN_TO to allow for 64bit alignments
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Alignments can only be unsigned

Signed-off-by: Rohan Garg <rohan.garg@intel.com>
Reviewed-by: Erik Faye-Lund <erik.faye-lund@collabora.com>
Reviewed-by: Marek Olšák <marek.olsak@amd.com>
Part-of: <https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/20153>
---
 src/util/u_math.h | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/util/u_math.h b/src/util/u_math.h
index 2a78e7811803..4582b90bf974 100644
--- a/src/util/u_math.h
+++ b/src/util/u_math.h
@@ -691,9 +691,9 @@ ALIGN_NPOT(uintptr_t value, int32_t alignment)
  * \sa ALIGN()
  */
 static inline uint64_t
-ROUND_DOWN_TO(uint64_t value, int32_t alignment)
+ROUND_DOWN_TO(uint64_t value, uint64_t alignment)
 {
-   assert(util_is_power_of_two_nonzero(alignment));
+   assert(util_is_power_of_two_nonzero64(alignment));
    return ((value) & ~(alignment - 1));
 }
 
-- 
GitLab


From 1a987ede508e63fd66b15aa8a904b8fbd3852d5c Mon Sep 17 00:00:00 2001
From: Rohan Garg <rohan.garg@intel.com>
Date: Fri, 2 Dec 2022 22:30:15 +0530
Subject: [PATCH 3/9] util: migrate alignment functions and macros to use
 ALIGN_POT
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Rohan Garg <rohan.garg@intel.com>
Reviewed-by: Erik Faye-Lund <erik.faye-lund@collabora.com>
Reviewed-by: Marek Olšák <marek.olsak@amd.com>
Part-of: <https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/20153>
---
 src/util/u_math.h | 8 +++++---
 1 file changed, 5 insertions(+), 3 deletions(-)

diff --git a/src/util/u_math.h b/src/util/u_math.h
index 4582b90bf974..6046307b00f5 100644
--- a/src/util/u_math.h
+++ b/src/util/u_math.h
@@ -666,7 +666,7 @@ static inline uintptr_t
 ALIGN(uintptr_t value, int32_t alignment)
 {
    assert(util_is_power_of_two_nonzero(alignment));
-   return (((value) + (alignment) - 1) & ~((alignment) - 1));
+   return ALIGN_POT(value, alignment);
 }
 
 /**
@@ -703,13 +703,15 @@ ROUND_DOWN_TO(uint64_t value, uint64_t alignment)
 static inline int
 align(int value, int alignment)
 {
-   return (value + alignment - 1) & ~(alignment - 1);
+   assert(IS_POT(alignment));
+   return ALIGN_POT(value, alignment);
 }
 
 static inline uint64_t
 align64(uint64_t value, unsigned alignment)
 {
-   return (value + alignment - 1) & ~((uint64_t)alignment - 1);
+   assert(IS_POT(alignment));
+   return ALIGN_POT(value, (uint64_t)alignment);
 }
 
 /**
-- 
GitLab


From 3fe3dc479d84fadd7dd3d241d938db5ec477ceaa Mon Sep 17 00:00:00 2001
From: Rohan Garg <rohan.garg@intel.com>
Date: Fri, 2 Dec 2022 23:02:26 +0530
Subject: [PATCH 4/9] util: revert back to ALIGN since it moved to util
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Rohan Garg <rohan.garg@intel.com>
Reviewed-by: Erik Faye-Lund <erik.faye-lund@collabora.com>
Reviewed-by: Marek Olšák <marek.olsak@amd.com>
Part-of: <https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/20153>
---
 src/util/blob.c | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/src/util/blob.c b/src/util/blob.c
index b293df9c5dff..8c56868c8c93 100644
--- a/src/util/blob.c
+++ b/src/util/blob.c
@@ -85,7 +85,7 @@ grow_to_fit(struct blob *blob, size_t additional)
 bool
 blob_align(struct blob *blob, size_t alignment)
 {
-   const size_t new_size = align64(blob->size, alignment);
+   const size_t new_size = ALIGN(blob->size, alignment);
 
    if (blob->size < new_size) {
       if (!grow_to_fit(blob, new_size - blob->size))
@@ -102,7 +102,7 @@ blob_align(struct blob *blob, size_t alignment)
 void
 blob_reader_align(struct blob_reader *blob, size_t alignment)
 {
-   blob->current = blob->data + align64(blob->current - blob->data, alignment);
+   blob->current = blob->data + ALIGN(blob->current - blob->data, alignment);
 }
 
 void
@@ -212,7 +212,7 @@ BLOB_WRITE_TYPE(blob_write_uint64, uint64_t)
 BLOB_WRITE_TYPE(blob_write_intptr, intptr_t)
 
 #define ASSERT_ALIGNED(_offset, _align) \
-   assert(align64((_offset), (_align)) == (_offset))
+   assert(ALIGN((_offset), (_align)) == (_offset))
 
 bool
 blob_overwrite_uint8 (struct blob *blob,
-- 
GitLab


From aaf2f187ef3a12a05b40f1a24885783dd0289259 Mon Sep 17 00:00:00 2001
From: Rohan Garg <rohan.garg@intel.com>
Date: Mon, 5 Dec 2022 17:33:55 +0530
Subject: [PATCH 5/9] util: documentation indicates we should be using this
 header
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Rohan Garg <rohan.garg@intel.com>
Reviewed-by: Erik Faye-Lund <erik.faye-lund@collabora.com>
Reviewed-by: Marek Olšák <marek.olsak@amd.com>
Part-of: <https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/20153>
---
 src/util/bitscan.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/util/bitscan.h b/src/util/bitscan.h
index 9102bd2f515c..0afc799df30c 100644
--- a/src/util/bitscan.h
+++ b/src/util/bitscan.h
@@ -41,7 +41,7 @@
 #endif
 
 #if defined(__POPCNT__)
-#include <popcntintrin.h>
+#include <x86intrin.h>
 #endif
 
 #ifdef __cplusplus
-- 
GitLab


From d7b072f6c85bc284a033ac0b70f8e501ff3e31c2 Mon Sep 17 00:00:00 2001
From: Rohan Garg <rohan.garg@intel.com>
Date: Thu, 15 Dec 2022 17:52:20 +0100
Subject: [PATCH 6/9] util: move pot functions to use existing macros
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Rohan Garg <rohan.garg@intel.com>
Reviewed-by: Erik Faye-Lund <erik.faye-lund@collabora.com>
Reviewed-by: Marek Olšák <marek.olsak@amd.com>
Part-of: <https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/20153>
---
 src/util/bitscan.h | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/src/util/bitscan.h b/src/util/bitscan.h
index 0afc799df30c..ca9b9536fb0e 100644
--- a/src/util/bitscan.h
+++ b/src/util/bitscan.h
@@ -130,7 +130,7 @@ u_bit_scan64(uint64_t *mask)
 static inline bool
 util_is_power_of_two_or_zero(unsigned v)
 {
-   return (v & (v - 1)) == 0;
+   return IS_POT(v);
 }
 
 /* Determine if an uint64_t value is a power of two.
@@ -141,7 +141,7 @@ util_is_power_of_two_or_zero(unsigned v)
 static inline bool
 util_is_power_of_two_or_zero64(uint64_t v)
 {
-   return (v & (v - 1)) == 0;
+   return IS_POT(v);
 }
 
 /* Determine if an unsigned value is a power of two.
@@ -164,7 +164,7 @@ util_is_power_of_two_nonzero(unsigned v)
 #ifdef __POPCNT__
    return _mm_popcnt_u32(v) == 1;
 #else
-   return v != 0 && (v & (v - 1)) == 0;
+   return v != 0 && IS_POT(v);
 #endif
 }
 
-- 
GitLab


From d27a7cb76984c7853b5a575619581cd7a5efbf8e Mon Sep 17 00:00:00 2001
From: Rohan Garg <rohan.garg@intel.com>
Date: Fri, 2 Dec 2022 21:09:33 +0530
Subject: [PATCH 7/9] iris: correctly set alignment to next power of two for
 struct size

We're currently aligning the offset to the size of the data structure
itself when the upload manager actually expects a POT. Ideally this
would be the next POT that's greater than the size of the structure.

Fixes: c24a574e6c78 ("iris: Don't allocate a BO per query object")

Signed-off-by: Rohan Garg <rohan.garg@intel.com>
Part-of: <https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/20153>
---
 src/gallium/drivers/iris/iris_query.c | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/src/gallium/drivers/iris/iris_query.c b/src/gallium/drivers/iris/iris_query.c
index f03d24fcb210..732007793ef3 100644
--- a/src/gallium/drivers/iris/iris_query.c
+++ b/src/gallium/drivers/iris/iris_query.c
@@ -510,7 +510,8 @@ iris_begin_query(struct pipe_context *ctx, struct pipe_query *query)
       size = sizeof(struct iris_query_snapshots);
 
    u_upload_alloc(ice->query_buffer_uploader, 0,
-                  size, size, &q->query_state_ref.offset,
+                  size, util_next_power_of_two(size),
+                  &q->query_state_ref.offset,
                   &q->query_state_ref.res, &ptr);
 
    if (!iris_resource_bo(q->query_state_ref.res))
-- 
GitLab


From 5959bc7e49e8e4d10e12e36d8bbe9b57910fb5a3 Mon Sep 17 00:00:00 2001
From: Rohan Garg <rohan@garg.io>
Date: Tue, 20 Dec 2022 16:19:24 +0100
Subject: [PATCH 8/9] ac/surface: make sure alignment is a POT
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Rohan Garg <rohan@garg.io>
Reviewed-by: Marek Olšák <marek.olsak@amd.com>
Part-of: <https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/20153>
---
 src/amd/common/ac_surface.c | 9 ++++++---
 1 file changed, 6 insertions(+), 3 deletions(-)

diff --git a/src/amd/common/ac_surface.c b/src/amd/common/ac_surface.c
index 1819f9e0453e..5c97c21f7e4e 100644
--- a/src/amd/common/ac_surface.c
+++ b/src/amd/common/ac_surface.c
@@ -1764,10 +1764,13 @@ static int gfx9_compute_miptree(struct ac_addrlib *addrlib, const struct radeon_
    surf->surf_size = out.surfSize;
    surf->surf_alignment_log2 = util_logbase2(out.baseAlign);
 
+   const int linear_alignment =  util_next_power_of_two(256 / surf->bpe);
+
    if (!compressed && surf->blk_w > 1 && out.pitch == out.pixelPitch &&
        surf->u.gfx9.swizzle_mode == ADDR_SW_LINEAR) {
       /* Adjust surf_pitch to be in elements units not in pixels */
-      surf->u.gfx9.surf_pitch = align(surf->u.gfx9.surf_pitch / surf->blk_w, 256 / surf->bpe);
+      surf->u.gfx9.surf_pitch = align(surf->u.gfx9.surf_pitch / surf->blk_w,
+                                      linear_alignment);
       surf->u.gfx9.epitch =
          MAX2(surf->u.gfx9.epitch, surf->u.gfx9.surf_pitch * surf->blk_w - 1);
       /* The surface is really a surf->bpe bytes per pixel surface even if we
@@ -1782,11 +1785,11 @@ static int gfx9_compute_miptree(struct ac_addrlib *addrlib, const struct radeon_
    }
 
    if (in->swizzleMode == ADDR_SW_LINEAR) {
-      int alignment = 256 / surf->bpe;
       for (unsigned i = 0; i < in->numMipLevels; i++) {
          surf->u.gfx9.offset[i] = mip_info[i].offset;
          /* Adjust pitch like we did for surf_pitch */
-         surf->u.gfx9.pitch[i] = align(mip_info[i].pitch / surf->blk_w, alignment);
+         surf->u.gfx9.pitch[i] = align(mip_info[i].pitch / surf->blk_w,
+                                       linear_alignment);
       }
    }
 
-- 
GitLab


From 6c390d5555d66f5151f2caea4425d6fb895702f8 Mon Sep 17 00:00:00 2001
From: Rohan Garg <rohan.garg@intel.com>
Date: Fri, 20 Jan 2023 11:33:16 +0100
Subject: [PATCH 9/9] freedreno: set alignment to next POT

Signed-off-by: Rohan Garg <rohan.garg@intel.com>
---
 src/gallium/drivers/freedreno/a5xx/fd5_emit.c | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/src/gallium/drivers/freedreno/a5xx/fd5_emit.c b/src/gallium/drivers/freedreno/a5xx/fd5_emit.c
index 7f237f5da019..300547fef6a0 100644
--- a/src/gallium/drivers/freedreno/a5xx/fd5_emit.c
+++ b/src/gallium/drivers/freedreno/a5xx/fd5_emit.c
@@ -310,8 +310,10 @@ emit_border_color(struct fd_context *ctx, struct fd_ringbuffer *ring) assert_dt
 
    STATIC_ASSERT(sizeof(struct bcolor_entry) == FD5_BORDER_COLOR_SIZE);
 
+   const unsigned int alignment =
+      util_next_power_of_two(FD5_BORDER_COLOR_UPLOAD_SIZE);
    u_upload_alloc(fd5_ctx->border_color_uploader, 0,
-                  FD5_BORDER_COLOR_UPLOAD_SIZE, FD5_BORDER_COLOR_UPLOAD_SIZE,
+                  FD5_BORDER_COLOR_UPLOAD_SIZE, alignment,
                   &off, &fd5_ctx->border_color_buf, &ptr);
 
    entries = ptr;
-- 
GitLab

