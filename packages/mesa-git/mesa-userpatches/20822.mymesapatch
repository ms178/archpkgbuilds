From 42bbb66ec4941edd8c8c16b5bb4c4b5f000cebcf Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Fri, 20 Jan 2023 19:39:14 -0500
Subject: [PATCH] glthread: remove lock preventing multiple contexts from
 executing in parallel

This decreases performance by about 10-20% in Creo tests, but we were
an exceptionally good there. We still have a really good score there.

Fixes: 8e7270de551e - mesa: lock Shared->BufferObjects only once for a glthread batch
Closes: https://gitlab.freedesktop.org/mesa/mesa/-/issues/4516
Closes: https://gitlab.freedesktop.org/mesa/mesa/-/issues/8035
---
 src/mesa/main/bufferobj.c | 52 ++++++++++++++-------------------------
 src/mesa/main/dlist.c     |  8 ++++--
 src/mesa/main/glthread.c  | 10 --------
 src/mesa/main/hash.h      | 46 ----------------------------------
 src/mesa/main/mtypes.h    |  5 ----
 src/mesa/main/texobj.c    |  6 ++---
 src/mesa/main/texobj.h    |  6 ++---
 src/mesa/main/varray.c    |  6 ++---
 8 files changed, 30 insertions(+), 109 deletions(-)

diff --git a/src/mesa/main/bufferobj.c b/src/mesa/main/bufferobj.c
index bdc8c10f7397..c770313418ef 100644
--- a/src/mesa/main/bufferobj.c
+++ b/src/mesa/main/bufferobj.c
@@ -1092,8 +1092,7 @@ _mesa_total_buffer_object_memory(struct gl_context *ctx)
 {
    GLuint total = 0;
 
-   _mesa_HashWalkMaybeLocked(ctx->Shared->BufferObjects, count_buffer_size,
-                             &total, ctx->BufferObjectsLocked);
+   _mesa_HashWalk(ctx->Shared->BufferObjects, count_buffer_size, &total);
 
    return total;
 }
@@ -1310,8 +1309,7 @@ handle_bind_buffer_gen(struct gl_context *ctx,
          _mesa_error(ctx, GL_OUT_OF_MEMORY, "%s", caller);
          return false;
       }
-      _mesa_HashLockMaybeLocked(ctx->Shared->BufferObjects,
-                                ctx->BufferObjectsLocked);
+      _mesa_HashLockMutex(ctx->Shared->BufferObjects);
       _mesa_HashInsertLocked(ctx->Shared->BufferObjects, buffer,
                              *buf_handle, buf != NULL);
       /* If one context only creates buffers and another context only deletes
@@ -1321,8 +1319,7 @@ handle_bind_buffer_gen(struct gl_context *ctx,
        * buffers.
        */
       unreference_zombie_buffers_for_ctx(ctx);
-      _mesa_HashUnlockMaybeLocked(ctx->Shared->BufferObjects,
-                                  ctx->BufferObjectsLocked);
+      _mesa_HashUnlockMutex(ctx->Shared->BufferObjects);
    }
 
    return true;
@@ -1406,8 +1403,7 @@ _mesa_lookup_bufferobj(struct gl_context *ctx, GLuint buffer)
       return NULL;
    else
       return (struct gl_buffer_object *)
-         _mesa_HashLookupMaybeLocked(ctx->Shared->BufferObjects, buffer,
-                                     ctx->BufferObjectsLocked);
+         _mesa_HashLookup(ctx->Shared->BufferObjects, buffer);
 }
 
 
@@ -1791,8 +1787,7 @@ delete_buffers(struct gl_context *ctx, GLsizei n, const GLuint *ids)
 {
    FLUSH_VERTICES(ctx, 0, 0);
 
-   _mesa_HashLockMaybeLocked(ctx->Shared->BufferObjects,
-                             ctx->BufferObjectsLocked);
+   _mesa_HashLockMutex(ctx->Shared->BufferObjects);
    unreference_zombie_buffers_for_ctx(ctx);
 
    for (GLsizei i = 0; i < n; i++) {
@@ -1937,8 +1932,7 @@ delete_buffers(struct gl_context *ctx, GLsizei n, const GLuint *ids)
       }
    }
 
-   _mesa_HashUnlockMaybeLocked(ctx->Shared->BufferObjects,
-                               ctx->BufferObjectsLocked);
+   _mesa_HashUnlockMutex(ctx->Shared->BufferObjects);
 }
 
 
@@ -1980,8 +1974,8 @@ create_buffers(struct gl_context *ctx, GLsizei n, GLuint *buffers, bool dsa)
    /*
     * This must be atomic (generation and allocation of buffer object IDs)
     */
-   _mesa_HashLockMaybeLocked(ctx->Shared->BufferObjects,
-                             ctx->BufferObjectsLocked);
+   _mesa_HashLockMutex(ctx->Shared->BufferObjects);
+
    /* If one context only creates buffers and another context only deletes
     * buffers, buffers don't get released because it only produces zombie
     * buffers. Only the context that has created the buffers can release
@@ -2001,8 +1995,7 @@ create_buffers(struct gl_context *ctx, GLsizei n, GLuint *buffers, bool dsa)
          buf = new_gl_buffer_object(ctx, buffers[i]);
          if (!buf) {
             _mesa_error(ctx, GL_OUT_OF_MEMORY, "glCreateBuffers");
-            _mesa_HashUnlockMaybeLocked(ctx->Shared->BufferObjects,
-                                        ctx->BufferObjectsLocked);
+            _mesa_HashUnlockMutex(ctx->Shared->BufferObjects);
             return;
          }
       }
@@ -2012,8 +2005,7 @@ create_buffers(struct gl_context *ctx, GLsizei n, GLuint *buffers, bool dsa)
       _mesa_HashInsertLocked(ctx->Shared->BufferObjects, buffers[i], buf, true);
    }
 
-   _mesa_HashUnlockMaybeLocked(ctx->Shared->BufferObjects,
-                               ctx->BufferObjectsLocked);
+   _mesa_HashUnlockMutex(ctx->Shared->BufferObjects);
 }
 
 
@@ -4401,8 +4393,7 @@ bind_uniform_buffers(struct gl_context *ctx, GLuint first, GLsizei count,
     *       parameters are valid and no other error occurs."
     */
 
-   _mesa_HashLockMaybeLocked(ctx->Shared->BufferObjects,
-                             ctx->BufferObjectsLocked);
+   _mesa_HashLockMutex(ctx->Shared->BufferObjects);
 
    for (int i = 0; i < count; i++) {
       struct gl_buffer_binding *binding =
@@ -4453,8 +4444,7 @@ bind_uniform_buffers(struct gl_context *ctx, GLuint first, GLsizei count,
                                USAGE_UNIFORM_BUFFER);
    }
 
-   _mesa_HashUnlockMaybeLocked(ctx->Shared->BufferObjects,
-                               ctx->BufferObjectsLocked);
+   _mesa_HashUnlockMutex(ctx->Shared->BufferObjects);
 }
 
 static void
@@ -4504,8 +4494,7 @@ bind_shader_storage_buffers(struct gl_context *ctx, GLuint first,
     *       parameters are valid and no other error occurs."
     */
 
-   _mesa_HashLockMaybeLocked(ctx->Shared->BufferObjects,
-                             ctx->BufferObjectsLocked);
+   _mesa_HashLockMutex(ctx->Shared->BufferObjects);
 
    for (int i = 0; i < count; i++) {
       struct gl_buffer_binding *binding =
@@ -4556,8 +4545,7 @@ bind_shader_storage_buffers(struct gl_context *ctx, GLuint first,
                                USAGE_SHADER_STORAGE_BUFFER);
    }
 
-   _mesa_HashUnlockMaybeLocked(ctx->Shared->BufferObjects,
-                               ctx->BufferObjectsLocked);
+   _mesa_HashUnlockMutex(ctx->Shared->BufferObjects);
 }
 
 static bool
@@ -4671,8 +4659,7 @@ bind_xfb_buffers(struct gl_context *ctx,
     *       parameters are valid and no other error occurs."
     */
 
-   _mesa_HashLockMaybeLocked(ctx->Shared->BufferObjects,
-                             ctx->BufferObjectsLocked);
+   _mesa_HashLockMutex(ctx->Shared->BufferObjects);
 
    for (int i = 0; i < count; i++) {
       const GLuint index = first + i;
@@ -4739,8 +4726,7 @@ bind_xfb_buffers(struct gl_context *ctx,
                                            offset, size);
    }
 
-   _mesa_HashUnlockMaybeLocked(ctx->Shared->BufferObjects,
-                               ctx->BufferObjectsLocked);
+   _mesa_HashUnlockMutex(ctx->Shared->BufferObjects);
 }
 
 static bool
@@ -4832,8 +4818,7 @@ bind_atomic_buffers(struct gl_context *ctx,
     *       parameters are valid and no other error occurs."
     */
 
-   _mesa_HashLockMaybeLocked(ctx->Shared->BufferObjects,
-                             ctx->BufferObjectsLocked);
+   _mesa_HashLockMutex(ctx->Shared->BufferObjects);
 
    for (int i = 0; i < count; i++) {
       struct gl_buffer_binding *binding =
@@ -4881,8 +4866,7 @@ bind_atomic_buffers(struct gl_context *ctx,
                                USAGE_ATOMIC_COUNTER_BUFFER);
    }
 
-   _mesa_HashUnlockMaybeLocked(ctx->Shared->BufferObjects,
-                               ctx->BufferObjectsLocked);
+   _mesa_HashUnlockMutex(ctx->Shared->BufferObjects);
 }
 
 static ALWAYS_INLINE void
diff --git a/src/mesa/main/dlist.c b/src/mesa/main/dlist.c
index 148e3b6368cb..c40a3c4a7685 100644
--- a/src/mesa/main/dlist.c
+++ b/src/mesa/main/dlist.c
@@ -828,8 +828,12 @@ make_list(GLuint name, GLuint count)
 struct gl_display_list *
 _mesa_lookup_list(struct gl_context *ctx, GLuint list, bool locked)
 {
-   return (struct gl_display_list *)
-      _mesa_HashLookupMaybeLocked(ctx->Shared->DisplayList, list, locked);
+   struct _mesa_HashTable *table = ctx->Shared->DisplayList;
+
+   if (locked)
+      return (struct gl_display_list *)_mesa_HashLookupLocked(table, list);
+   else
+      return (struct gl_display_list *)_mesa_HashLookup(table, list);
 }
 
 
diff --git a/src/mesa/main/glthread.c b/src/mesa/main/glthread.c
index 2e2f2de9bcf9..66c6fa62cdfb 100644
--- a/src/mesa/main/glthread.c
+++ b/src/mesa/main/glthread.c
@@ -53,11 +53,6 @@ glthread_unmarshal_batch(void *job, void *gdata, int thread_index)
 
    _glapi_set_dispatch(ctx->CurrentServerDispatch);
 
-   _mesa_HashLockMutex(ctx->Shared->BufferObjects);
-   ctx->BufferObjectsLocked = true;
-   simple_mtx_lock(&ctx->Shared->TexMutex);
-   ctx->TexturesLocked = true;
-
    while (pos < used) {
       const struct marshal_cmd_base *cmd =
          (const struct marshal_cmd_base *)&buffer[pos];
@@ -65,11 +60,6 @@ glthread_unmarshal_batch(void *job, void *gdata, int thread_index)
       pos += _mesa_unmarshal_dispatch[cmd->cmd_id](ctx, cmd);
    }
 
-   ctx->TexturesLocked = false;
-   simple_mtx_unlock(&ctx->Shared->TexMutex);
-   ctx->BufferObjectsLocked = false;
-   _mesa_HashUnlockMutex(ctx->Shared->BufferObjects);
-
    assert(pos == used);
    batch->used = 0;
 
diff --git a/src/mesa/main/hash.h b/src/mesa/main/hash.h
index 181528367bd8..288f7f00a350 100644
--- a/src/mesa/main/hash.h
+++ b/src/mesa/main/hash.h
@@ -191,50 +191,4 @@ extern void _mesa_test_hash_functions(void);
 
 extern void _mesa_HashEnableNameReuse(struct _mesa_HashTable *table);
 
-static inline void
-_mesa_HashWalkMaybeLocked(const struct _mesa_HashTable *table,
-                            void (*callback)(void *data, void *userData),
-                            void *userData, bool locked)
-{
-   if (locked)
-      _mesa_HashWalkLocked(table, callback, userData);
-   else
-      _mesa_HashWalk(table, callback, userData);
-}
-
-static inline struct gl_buffer_object *
-_mesa_HashLookupMaybeLocked(struct _mesa_HashTable *table, GLuint key,
-                            bool locked)
-{
-   if (locked)
-      return _mesa_HashLookupLocked(table, key);
-   else
-      return _mesa_HashLookup(table, key);
-}
-
-static inline void
-_mesa_HashInsertMaybeLocked(struct _mesa_HashTable *table,
-                            GLuint key, void *data, GLboolean isGenName,
-                            bool locked)
-{
-   if (locked)
-      _mesa_HashInsertLocked(table, key, data, isGenName);
-   else
-      _mesa_HashInsert(table, key, data, isGenName);
-}
-
-static inline void
-_mesa_HashLockMaybeLocked(struct _mesa_HashTable *table, bool locked)
-{
-   if (!locked)
-      _mesa_HashLockMutex(table);
-}
-
-static inline void
-_mesa_HashUnlockMaybeLocked(struct _mesa_HashTable *table, bool locked)
-{
-   if (!locked)
-      _mesa_HashUnlockMutex(table);
-}
-
 #endif
diff --git a/src/mesa/main/mtypes.h b/src/mesa/main/mtypes.h
index bfa12419d584..5c1e96d5bf96 100644
--- a/src/mesa/main/mtypes.h
+++ b/src/mesa/main/mtypes.h
@@ -3216,11 +3216,6 @@ struct gl_context
    /** State possibly shared with other contexts in the address space */
    struct gl_shared_state *Shared;
 
-   /** Whether Shared->BufferObjects has already been locked for this context. */
-   bool BufferObjectsLocked;
-   /** Whether Shared->TexMutex has already been locked for this context. */
-   bool TexturesLocked;
-
    /** \name API function pointer tables */
    /*@{*/
    gl_api API;
diff --git a/src/mesa/main/texobj.c b/src/mesa/main/texobj.c
index 2ddb244ae77a..da29c9aa8e5b 100644
--- a/src/mesa/main/texobj.c
+++ b/src/mesa/main/texobj.c
@@ -2158,8 +2158,7 @@ _mesa_IsTexture( GLuint texture )
 void
 _mesa_lock_context_textures( struct gl_context *ctx )
 {
-   if (!ctx->TexturesLocked)
-      simple_mtx_lock(&ctx->Shared->TexMutex);
+   simple_mtx_lock(&ctx->Shared->TexMutex);
 
    if (ctx->Shared->TextureStateStamp != ctx->TextureStateTimestamp) {
       ctx->NewState |= _NEW_TEXTURE_OBJECT;
@@ -2173,8 +2172,7 @@ void
 _mesa_unlock_context_textures( struct gl_context *ctx )
 {
    assert(ctx->Shared->TextureStateStamp == ctx->TextureStateTimestamp);
-   if (!ctx->TexturesLocked)
-      simple_mtx_unlock(&ctx->Shared->TexMutex);
+   simple_mtx_unlock(&ctx->Shared->TexMutex);
 }
 
 
diff --git a/src/mesa/main/texobj.h b/src/mesa/main/texobj.h
index fe66c46b99d4..a72aba2661d5 100644
--- a/src/mesa/main/texobj.h
+++ b/src/mesa/main/texobj.h
@@ -97,8 +97,7 @@ _mesa_reference_texobj(struct gl_texture_object **ptr,
 static inline void
 _mesa_lock_texture(struct gl_context *ctx, struct gl_texture_object *texObj)
 {
-   if (!ctx->TexturesLocked)
-      simple_mtx_lock(&ctx->Shared->TexMutex);
+   simple_mtx_lock(&ctx->Shared->TexMutex);
    ctx->Shared->TextureStateStamp++;
    (void) texObj;
 }
@@ -107,8 +106,7 @@ static inline void
 _mesa_unlock_texture(struct gl_context *ctx, struct gl_texture_object *texObj)
 {
    (void) texObj;
-   if (!ctx->TexturesLocked)
-      simple_mtx_unlock(&ctx->Shared->TexMutex);
+   simple_mtx_unlock(&ctx->Shared->TexMutex);
 }
 
 
diff --git a/src/mesa/main/varray.c b/src/mesa/main/varray.c
index 4bb289db567b..0b85ac69a052 100644
--- a/src/mesa/main/varray.c
+++ b/src/mesa/main/varray.c
@@ -3408,8 +3408,7 @@ vertex_array_vertex_buffers(struct gl_context *ctx,
     *       their parameters are valid and no other error occurs."
     */
 
-   _mesa_HashLockMaybeLocked(ctx->Shared->BufferObjects,
-                             ctx->BufferObjectsLocked);
+   _mesa_HashLockMutex(ctx->Shared->BufferObjects);
 
    for (i = 0; i < count; i++) {
       struct gl_buffer_object *vbo;
@@ -3466,8 +3465,7 @@ vertex_array_vertex_buffers(struct gl_context *ctx,
                                vbo, offsets[i], strides[i], false, false);
    }
 
-   _mesa_HashUnlockMaybeLocked(ctx->Shared->BufferObjects,
-                               ctx->BufferObjectsLocked);
+   _mesa_HashUnlockMutex(ctx->Shared->BufferObjects);
 }
 
 
-- 
GitLab

