From 22d775407bd2d60e01d443c3962f7099ae0ba4c4 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Daniel=20Sch=C3=BCrmann?= <daniel@schuermann.dev>
Date: Tue, 12 Mar 2024 16:35:44 +0100
Subject: [PATCH 1/5] radv: mark nir_opt_loop() as not idempotent
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This pass misses opportunities because foreach_list_typed_safe()
might point to disconnected cf_nodes after some optimization got
applied. No fossil-db changes.

Reviewed-by: Timur Kristóf <timur.kristof@gmail.com>
Part-of: <https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/28150>
---
 src/amd/vulkan/radv_shader.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/amd/vulkan/radv_shader.c b/src/amd/vulkan/radv_shader.c
index cec1b1f719606..b710b054f72a8 100644
--- a/src/amd/vulkan/radv_shader.c
+++ b/src/amd/vulkan/radv_shader.c
@@ -155,7 +155,7 @@ radv_optimize_nir(struct nir_shader *shader, bool optimize_conservatively)
       NIR_LOOP_PASS(progress, skip, shader, nir_opt_remove_phis);
       NIR_LOOP_PASS(progress, skip, shader, nir_opt_dce);
       bool opt_loop_progress = false;
-      NIR_LOOP_PASS(opt_loop_progress, skip, shader, nir_opt_loop);
+      NIR_LOOP_PASS_NOT_IDEMPOTENT(opt_loop_progress, skip, shader, nir_opt_loop);
       if (opt_loop_progress) {
          progress = true;
          NIR_LOOP_PASS(progress, skip, shader, nir_copy_prop);
-- 
GitLab


From b8ddec688f82e4388eea76b3230a453fa5b80cee Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Daniel=20Sch=C3=BCrmann?= <daniel@schuermann.dev>
Date: Tue, 12 Mar 2024 16:36:48 +0100
Subject: [PATCH 2/5] radv: move nir_opt_dead_cf() before nir_opt_loop()
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This can avoid unnecessary CF transformations.

Totals from 557 (0.70% of 79395) affected shaders: (GFX11)
MaxWaves: 12020 -> 12028 (+0.07%)
Instrs: 4237096 -> 4234110 (-0.07%); split: -0.08%, +0.01%
CodeSize: 21731952 -> 21719556 (-0.06%); split: -0.06%, +0.00%
VGPRs: 40492 -> 40480 (-0.03%)
SpillSGPRs: 467 -> 416 (-10.92%)
Latency: 25704891 -> 25684156 (-0.08%); split: -0.10%, +0.02%
InvThroughput: 5545224 -> 5542998 (-0.04%); split: -0.06%, +0.02%
VClause: 107850 -> 107838 (-0.01%); split: -0.02%, +0.01%
SClause: 90450 -> 90440 (-0.01%); split: -0.05%, +0.04%
Copies: 292714 -> 291354 (-0.46%); split: -0.50%, +0.03%
Branches: 133630 -> 133617 (-0.01%); split: -0.01%, +0.00%
PreSGPRs: 42299 -> 42104 (-0.46%); split: -0.48%, +0.02%
PreVGPRs: 36396 -> 36393 (-0.01%); split: -0.02%, +0.01%
VALU: 2321811 -> 2321192 (-0.03%); split: -0.03%, +0.01%
SALU: 505001 -> 503289 (-0.34%); split: -0.35%, +0.01%
SMEM: 132622 -> 132640 (+0.01%)

Reviewed-by: Timur Kristóf <timur.kristof@gmail.com>
Part-of: <https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/28150>
---
 src/amd/vulkan/radv_shader.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/amd/vulkan/radv_shader.c b/src/amd/vulkan/radv_shader.c
index b710b054f72a8..79a59916619ae 100644
--- a/src/amd/vulkan/radv_shader.c
+++ b/src/amd/vulkan/radv_shader.c
@@ -154,6 +154,7 @@ radv_optimize_nir(struct nir_shader *shader, bool optimize_conservatively)
       NIR_LOOP_PASS(progress, skip, shader, nir_copy_prop);
       NIR_LOOP_PASS(progress, skip, shader, nir_opt_remove_phis);
       NIR_LOOP_PASS(progress, skip, shader, nir_opt_dce);
+      NIR_LOOP_PASS(progress, skip, shader, nir_opt_dead_cf);
       bool opt_loop_progress = false;
       NIR_LOOP_PASS_NOT_IDEMPOTENT(opt_loop_progress, skip, shader, nir_opt_loop);
       if (opt_loop_progress) {
@@ -163,7 +164,6 @@ radv_optimize_nir(struct nir_shader *shader, bool optimize_conservatively)
          NIR_LOOP_PASS(progress, skip, shader, nir_opt_dce);
       }
       NIR_LOOP_PASS_NOT_IDEMPOTENT(progress, skip, shader, nir_opt_if, nir_opt_if_optimize_phi_true_false);
-      NIR_LOOP_PASS(progress, skip, shader, nir_opt_dead_cf);
       NIR_LOOP_PASS(progress, skip, shader, nir_opt_cse);
       NIR_LOOP_PASS(progress, skip, shader, nir_opt_peephole_select, 8, true, true);
       NIR_LOOP_PASS(progress, skip, shader, nir_opt_constant_folding);
-- 
GitLab


From aa7dbec87df3654ba1ed8e4a15757031441c5a20 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Daniel=20Sch=C3=BCrmann?= <daniel@schuermann.dev>
Date: Mon, 11 Mar 2024 14:49:50 +0100
Subject: [PATCH 3/5] nir/opt_if: don't split ALU of phi into otherwise empty
 blocks

RADV GFX11:
Totals from 1566 (1.97% of 79395) affected shaders:
Instrs: 5663011 -> 5638219 (-0.44%); split: -0.45%, +0.01%
CodeSize: 29760844 -> 29639756 (-0.41%); split: -0.42%, +0.01%
SpillSGPRs: 1750 -> 1603 (-8.40%)
Latency: 62963520 -> 62831280 (-0.21%); split: -0.22%, +0.01%
InvThroughput: 10501171 -> 10490116 (-0.11%); split: -0.11%, +0.00%
VClause: 127928 -> 128054 (+0.10%); split: -0.01%, +0.11%
SClause: 152635 -> 152956 (+0.21%); split: -0.08%, +0.29%
Copies: 476865 -> 461288 (-3.27%); split: -3.28%, +0.02%
Branches: 169038 -> 168104 (-0.55%); split: -0.56%, +0.00%
PreSGPRs: 88851 -> 88356 (-0.56%); split: -0.58%, +0.02%
PreVGPRs: 114565 -> 114559 (-0.01%); split: -0.01%, +0.01%
VALU: 3158023 -> 3157387 (-0.02%); split: -0.03%, +0.01%
SALU: 615028 -> 595360 (-3.20%); split: -3.21%, +0.01%
VMEM: 219891 -> 218287 (-0.73%); split: -0.74%, +0.01%
SMEM: 206956 -> 206484 (-0.23%)

Reviewed-by: Alyssa Rosenzweig <alyssa@rosenzweig.io>
Part-of: <https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/28150>
---
 src/compiler/nir/nir_opt_if.c | 18 +++++++++++-------
 1 file changed, 11 insertions(+), 7 deletions(-)

diff --git a/src/compiler/nir/nir_opt_if.c b/src/compiler/nir/nir_opt_if.c
index 78ce28859a037..ac7c391c93465 100644
--- a/src/compiler/nir/nir_opt_if.c
+++ b/src/compiler/nir/nir_opt_if.c
@@ -304,6 +304,13 @@ is_trivial_bcsel(const nir_instr *instr, bool allow_non_phi_src)
    return true;
 }
 
+static bool
+is_block_empty(nir_block *block)
+{
+   return nir_cf_node_is_last(&block->cf_node) &&
+          exec_list_is_empty(&block->instr_list);
+}
+
 /**
  * Splits ALU instructions that have a source that is a phi node
  *
@@ -388,6 +395,10 @@ opt_split_alu_of_phi(nir_builder *b, nir_loop *loop, nir_opt_if_options options)
    if (continue_block == header_block)
       return false;
 
+   /* If the continue block is otherwise empty, leave it that way. */
+   if (is_block_empty(continue_block))
+      return false;
+
    nir_foreach_instr_safe(instr, header_block) {
       if (instr->type != nir_instr_type_alu)
          continue;
@@ -690,13 +701,6 @@ opt_simplify_bcsel_of_phi(nir_builder *b, nir_loop *loop)
    return progress;
 }
 
-static bool
-is_block_empty(nir_block *block)
-{
-   return nir_cf_node_is_last(&block->cf_node) &&
-          exec_list_is_empty(&block->instr_list);
-}
-
 /* Walk all the phis in the block immediately following the if statement and
  * swap the blocks.
  */
-- 
GitLab


From 09bf065aebd4a3d459002d49bf1c6d4358be7205 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Daniel=20Sch=C3=BCrmann?= <daniel@schuermann.dev>
Date: Mon, 11 Mar 2024 12:33:40 +0100
Subject: [PATCH 4/5] nir/opt_loop: add loop peeling optimization

 This optimization turns:

     loop {
        do_work_1();
        if (cond) {
           break;
        } else {
        }
        do_work_2();
     }

 into:

     do_work_1();
     if (cond) {
     } else {
        loop {
           do_work_2();
           do_work_1();
           if (cond) {
              break;
           } else {
           }
        }
     }

RADV GFX11:
Totals from 925 (1.17% of 79395) affected shaders:
MaxWaves: 20583 -> 20455 (-0.62%)
Instrs: 5260489 -> 5361418 (+1.92%); split: -0.63%, +2.55%
CodeSize: 26965388 -> 27501104 (+1.99%); split: -0.48%, +2.47%
VGPRs: 70304 -> 70712 (+0.58%)
SpillSGPRs: 2163 -> 2159 (-0.18%)
Scratch: 51200 -> 69632 (+36.00%)
Latency: 36404844 -> 34542213 (-5.12%); split: -5.51%, +0.39%
InvThroughput: 6628474 -> 6384249 (-3.68%); split: -4.19%, +0.50%
VClause: 124997 -> 127008 (+1.61%); split: -0.43%, +2.04%
SClause: 121774 -> 120799 (-0.80%); split: -3.21%, +2.40%
Copies: 357048 -> 360850 (+1.06%); split: -0.62%, +1.68%
Branches: 171985 -> 168082 (-2.27%); split: -3.61%, +1.34%
PreSGPRs: 59812 -> 60088 (+0.46%); split: -0.20%, +0.66%
PreVGPRs: 60325 -> 60586 (+0.43%); split: -0.29%, +0.72%
VALU: 2882263 -> 2951373 (+2.40%); split: -0.37%, +2.77%
SALU: 636373 -> 640091 (+0.58%); split: -0.87%, +1.46%
VMEM: 200059 -> 204612 (+2.28%); split: -0.09%, +2.36%
SMEM: 173328 -> 174343 (+0.59%); split: -2.34%, +2.92%
VOPD: 1064 -> 898 (-15.60%); split: +0.09%, -15.70%

Reviewed-by: Alyssa Rosenzweig <alyssa@rosenzweig.io>
Part-of: <https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/28150>
---
 src/compiler/nir/nir_opt_loop.c | 139 ++++++++++++++++++++++++++++++++
 1 file changed, 139 insertions(+)

diff --git a/src/compiler/nir/nir_opt_loop.c b/src/compiler/nir/nir_opt_loop.c
index 0af0993718d6a..24b764f29a207 100644
--- a/src/compiler/nir/nir_opt_loop.c
+++ b/src/compiler/nir/nir_opt_loop.c
@@ -296,6 +296,144 @@ opt_loop_last_block(nir_block *block, bool is_trivial_continue, bool is_trivial_
    return progress;
 }
 
+static bool
+can_constant_fold(nir_scalar scalar, nir_block *loop_header)
+{
+   if (nir_scalar_is_const(scalar))
+      return true;
+
+   if (nir_scalar_is_alu(scalar)) {
+      for (unsigned i = 0; i < nir_op_infos[nir_scalar_alu_op(scalar)].num_inputs; i++) {
+         if (nir_op_infos[nir_scalar_alu_op(scalar)].input_sizes[i] > 1 ||
+             !can_constant_fold(nir_scalar_chase_alu_src(scalar, i), loop_header))
+            return false;
+      }
+      return true;
+   }
+
+   if (scalar.def->parent_instr->type == nir_instr_type_phi) {
+      /* If this is a phi from anything but the loop header, we cannot constant-fold. */
+      if (scalar.def->parent_instr->block != loop_header)
+         return false;
+
+      nir_block *preheader = nir_block_cf_tree_prev(loop_header);
+      nir_phi_instr *phi = nir_instr_as_phi(scalar.def->parent_instr);
+      nir_phi_src *src = nir_phi_get_src_from_block(phi, preheader);
+      return can_constant_fold(nir_get_scalar(src->src.ssa, 0), loop_header);
+   }
+
+   return false;
+}
+
+/**
+ * This optimization tries to peel the first loop break.
+ *
+ * This optimization turns:
+ *
+ *     loop {
+ *        do_work_1();
+ *        if (cond) {
+ *           break;
+ *        } else {
+ *        }
+ *        do_work_2();
+ *     }
+ *
+ * into:
+ *
+ *     do_work_1();
+ *     if (cond) {
+ *     } else {
+ *        loop {
+ *           do_work_2();
+ *           do_work_1();
+ *           if (cond) {
+ *              break;
+ *           } else {
+ *           }
+ *        }
+ *     }
+ *
+ * nir_opt_dead_cf() can later remove the outer IF statement, again.
+ *
+ */
+static bool
+opt_loop_peel_initial_break(nir_loop *loop)
+{
+   nir_block *header_block = nir_loop_first_block(loop);
+   nir_block *prev_block = nir_cf_node_cf_tree_prev(&loop->cf_node);
+   nir_block *exit_block = nir_cf_node_cf_tree_next(&loop->cf_node);
+
+   /* The loop must have exactly one continue block. */
+   if (header_block->predecessors->entries != 2)
+      return false;
+
+   nir_cf_node *if_node = nir_cf_node_next(&header_block->cf_node);
+   if (!if_node || if_node->type != nir_cf_node_if ||
+       is_block_empty(nir_cf_node_cf_tree_next(if_node)))
+      return false;
+
+   nir_if *nif = nir_cf_node_as_if(if_node);
+   nir_block *last_then = nir_if_last_then_block(nif);
+   if (!nir_block_ends_in_break(last_then) ||
+       !is_block_empty(nir_if_first_else_block(nif)))
+      return false;
+
+   /* For now, we restrict this optimization to cases where the outer IF
+    * can be constant-folded.
+    *
+    * Note: If this restriction is lifted, it might recurse infinitely.
+    *       Prevent by e.g. restricting to single-exit loops.
+    */
+   if (!can_constant_fold(nir_get_scalar(nif->condition.ssa, 0), header_block))
+      return false;
+
+   /* Even though this if statement has a jump on one side, we may still have
+    * phis afterwards.  Single-source phis can be produced by loop unrolling
+    * or dead control-flow passes and are perfectly legal.  Run a quick phi
+    * removal on the block after the if to clean up any such phis.
+    */
+   nir_opt_remove_phis_block(nir_cf_node_cf_tree_next(if_node));
+
+   /* We need LCSSA because we are going to wrap the loop into an IF. */
+   nir_convert_loop_to_lcssa(loop);
+
+   /* Lower loop header and LCSSA-phis to regs. */
+   nir_lower_phis_to_regs_block(header_block);
+   nir_lower_ssa_defs_to_regs_block(header_block);
+   nir_lower_phis_to_regs_block(exit_block);
+
+   /* Extract the loop header including the first break. */
+   nir_cf_list tmp;
+   nir_cf_extract(&tmp, nir_before_block(header_block),
+                  nir_after_cf_node(if_node));
+   header_block = nir_loop_first_block(loop);
+
+   /* Clone and re-insert at the continue block. */
+   nir_block *cont_block = NULL;
+   set_foreach(header_block->predecessors, pred_entry) {
+      if (pred_entry->key != prev_block) {
+         cont_block = (nir_block *)pred_entry->key;
+         break;
+      }
+   }
+   assert(cont_block);
+   struct hash_table *remap_table = _mesa_pointer_hash_table_create(NULL);
+   nir_cf_list_clone_and_reinsert(&tmp, &loop->cf_node, nir_after_block(cont_block), remap_table);
+   _mesa_hash_table_destroy(remap_table, NULL);
+
+   /* Remove the break and insert before the loop. */
+   nir_cf_reinsert(&tmp, nir_after_block(prev_block));
+   nir_instr_remove_v(nir_block_last_instr(last_then));
+
+   /* Finally, extract the entire loop and insert into the else-branch. */
+   nir_cf_extract(&tmp, nir_before_cf_node(&loop->cf_node),
+                  nir_after_cf_node(&loop->cf_node));
+   nir_cf_reinsert(&tmp, nir_after_block(nir_if_first_else_block(nif)));
+
+   return true;
+}
+
 static bool
 opt_loop_cf_list(struct exec_list *cf_list)
 {
@@ -322,6 +460,7 @@ opt_loop_cf_list(struct exec_list *cf_list)
          assert(!nir_loop_has_continue_construct(loop));
          progress |= opt_loop_cf_list(&loop->body);
          progress |= opt_loop_last_block(nir_loop_last_block(loop), true, false);
+         progress |= opt_loop_peel_initial_break(loop);
          break;
       }
 
-- 
GitLab


From 627d3c0d0291588f8a99e95021a51eae60e60821 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Daniel=20Sch=C3=BCrmann?= <daniel@schuermann.dev>
Date: Thu, 21 Mar 2024 10:48:21 +0100
Subject: [PATCH 5/5] work around mov instructions from
 nir_lower_phis_to_scalar

---
 src/compiler/nir/nir_opt_loop.c | 13 +++++++++++--
 1 file changed, 11 insertions(+), 2 deletions(-)

diff --git a/src/compiler/nir/nir_opt_loop.c b/src/compiler/nir/nir_opt_loop.c
index 24b764f29a207..a2eaf776832f3 100644
--- a/src/compiler/nir/nir_opt_loop.c
+++ b/src/compiler/nir/nir_opt_loop.c
@@ -9,8 +9,17 @@
 static bool
 is_block_empty(nir_block *block)
 {
-   return nir_cf_node_is_last(&block->cf_node) &&
-          exec_list_is_empty(&block->instr_list);
+   if (!nir_cf_node_is_last(&block->cf_node))
+      return false;
+   if (exec_list_is_empty(&block->instr_list))
+      return true;
+
+   nir_foreach_instr(instr, block) {
+      if (!instr->type == nir_instr_type_alu ||
+          !nir_op_is_vec_or_mov(nir_instr_as_alu(instr)->op))
+         return false;
+   }
+   return true;
 }
 
 static bool
-- 
GitLab

