From 9834f13c1ccc9e86b82032ce86f4fbbe6f93ded3 Mon Sep 17 00:00:00 2001
From: Mihai Preda <mhpreda@gmail.com>
Date: Fri, 19 Aug 2022 11:56:35 +0300
Subject: [PATCH 1/9] gallivm: LLVM-15 opaque pointers: disable
 LLVMGetElementType(ptr_type)
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

with opaque pointers, we can't query the element type of a pointer type
Reviewed-by: Marek Ol코치k <marek.olsak@amd.com>
Acked-by: Pierre-Eric Pelloux-Prayer <pierre-eric.pelloux-prayer@amd.com>
---
 src/gallium/auxiliary/gallivm/lp_bld_ir_common.c | 5 +++--
 src/gallium/auxiliary/gallivm/lp_bld_struct.c    | 6 +++---
 src/gallium/auxiliary/gallivm/lp_bld_swizzle.c   | 2 +-
 3 files changed, 7 insertions(+), 6 deletions(-)

diff --git a/src/gallium/auxiliary/gallivm/lp_bld_ir_common.c b/src/gallium/auxiliary/gallivm/lp_bld_ir_common.c
index d127ea0c7ff8..042cd5c814f2 100644
--- a/src/gallium/auxiliary/gallivm/lp_bld_ir_common.c
+++ b/src/gallium/auxiliary/gallivm/lp_bld_ir_common.c
@@ -209,8 +209,9 @@ void lp_exec_mask_store(struct lp_exec_mask *mask,
 
    assert(lp_check_value(bld_store->type, val));
    assert(LLVMGetTypeKind(LLVMTypeOf(dst_ptr)) == LLVMPointerTypeKind);
-   assert(LLVMGetElementType(LLVMTypeOf(dst_ptr)) == LLVMTypeOf(val) ||
-          LLVMGetTypeKind(LLVMGetElementType(LLVMTypeOf(dst_ptr))) == LLVMArrayTypeKind);
+   assert(LLVM_VERSION_MAJOR >= 15
+          || (LLVMGetElementType(LLVMTypeOf(dst_ptr)) == LLVMTypeOf(val)
+              || LLVMGetTypeKind(LLVMGetElementType(LLVMTypeOf(dst_ptr))) == LLVMArrayTypeKind));
 
    if (exec_mask) {
       LLVMValueRef res, dst;
diff --git a/src/gallium/auxiliary/gallivm/lp_bld_struct.c b/src/gallium/auxiliary/gallivm/lp_bld_struct.c
index be579c4ee25d..9e3e24cd9e1e 100644
--- a/src/gallium/auxiliary/gallivm/lp_bld_struct.c
+++ b/src/gallium/auxiliary/gallivm/lp_bld_struct.c
@@ -120,7 +120,7 @@ lp_build_array_get_ptr(struct gallivm_state *gallivm,
    LLVMValueRef indices[2];
    LLVMValueRef element_ptr;
    assert(LLVMGetTypeKind(LLVMTypeOf(ptr)) == LLVMPointerTypeKind);
-   assert(LLVMGetTypeKind(LLVMGetElementType(LLVMTypeOf(ptr))) == LLVMArrayTypeKind);
+   assert(LLVM_VERSION_MAJOR >= 15 || LLVMGetTypeKind(LLVMGetElementType(LLVMTypeOf(ptr))) == LLVMArrayTypeKind);
    indices[0] = lp_build_const_int32(gallivm, 0);
    indices[1] = index;
    element_ptr = LLVMBuildGEP(gallivm->builder, ptr, indices, ARRAY_SIZE(indices), "");
@@ -140,7 +140,7 @@ lp_build_array_get(struct gallivm_state *gallivm,
    LLVMValueRef element_ptr;
    LLVMValueRef res;
    assert(LLVMGetTypeKind(LLVMTypeOf(ptr)) == LLVMPointerTypeKind);
-   assert(LLVMGetTypeKind(LLVMGetElementType(LLVMTypeOf(ptr))) == LLVMArrayTypeKind);
+   assert(LLVM_VERSION_MAJOR >= 15 || LLVMGetTypeKind(LLVMGetElementType(LLVMTypeOf(ptr))) == LLVMArrayTypeKind);
    element_ptr = lp_build_array_get_ptr(gallivm, ptr, index);
    res = LLVMBuildLoad(gallivm->builder, element_ptr, "");
 #ifdef DEBUG
@@ -158,7 +158,7 @@ lp_build_array_set(struct gallivm_state *gallivm,
 {
    LLVMValueRef element_ptr;
    assert(LLVMGetTypeKind(LLVMTypeOf(ptr)) == LLVMPointerTypeKind);
-   assert(LLVMGetTypeKind(LLVMGetElementType(LLVMTypeOf(ptr))) == LLVMArrayTypeKind);
+   assert(LLVM_VERSION_MAJOR >= 15 || LLVMGetTypeKind(LLVMGetElementType(LLVMTypeOf(ptr))) == LLVMArrayTypeKind);
    element_ptr = lp_build_array_get_ptr(gallivm, ptr, index);
    LLVMBuildStore(gallivm->builder, value, element_ptr);
 }
diff --git a/src/gallium/auxiliary/gallivm/lp_bld_swizzle.c b/src/gallium/auxiliary/gallivm/lp_bld_swizzle.c
index a4bfb783d24b..b64d7bd3dc37 100644
--- a/src/gallium/auxiliary/gallivm/lp_bld_swizzle.c
+++ b/src/gallium/auxiliary/gallivm/lp_bld_swizzle.c
@@ -63,7 +63,7 @@ lp_build_broadcast(struct gallivm_state *gallivm,
       LLVMTypeRef i32_type = LLVMInt32TypeInContext(gallivm->context);
       LLVMTypeRef i32_vec_type = LLVMVectorType(i32_type, length);
 
-      assert(LLVMGetElementType(vec_type) == LLVMTypeOf(scalar));
+      assert(LLVM_VERSION_MAJOR >= 15 || LLVMGetElementType(vec_type) == LLVMTypeOf(scalar));
 
       res = LLVMBuildInsertElement(builder, undef, scalar, LLVMConstNull(i32_type), "");
       res = LLVMBuildShuffleVector(builder, res, undef, LLVMConstNull(i32_vec_type), "");
-- 
GitLab


From 7d7d817fe520ecfed8aff11615f3c84ad3c00d43 Mon Sep 17 00:00:00 2001
From: Mihai Preda <mhpreda@gmail.com>
Date: Tue, 16 Aug 2022 09:44:53 +0300
Subject: [PATCH 2/9] =?UTF-8?q?gallivm:=20drop=20unused=20"emit=5Fload"=20?=
 =?UTF-8?q?in=20lp=5Fllvm=5Fbuffer=5Fmember()=20Reviewed-by:=20Marek=20Ol?=
 =?UTF-8?q?=C5=A1=C3=A1k=20<marek.olsak@amd.com>=20Acked-by:=20Pierre-Eric?=
 =?UTF-8?q?=20Pelloux-Prayer=20<pierre-eric.pelloux-prayer@amd.com>?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 src/gallium/auxiliary/gallivm/lp_bld_jit_types.c | 13 ++++++-------
 1 file changed, 6 insertions(+), 7 deletions(-)

diff --git a/src/gallium/auxiliary/gallivm/lp_bld_jit_types.c b/src/gallium/auxiliary/gallivm/lp_bld_jit_types.c
index 6e6c63db9f39..c4bfa2be899c 100644
--- a/src/gallium/auxiliary/gallivm/lp_bld_jit_types.c
+++ b/src/gallium/auxiliary/gallivm/lp_bld_jit_types.c
@@ -60,8 +60,7 @@ lp_llvm_buffer_member(struct gallivm_state *gallivm,
                       LLVMValueRef buffers_offset,
                       unsigned buffers_limit,
                       unsigned member_index,
-                      const char *member_name,
-                      boolean emit_load)
+                      const char *member_name)
 {
    LLVMBuilderRef builder = gallivm->builder;
    LLVMValueRef indices[3];
@@ -74,7 +73,7 @@ lp_llvm_buffer_member(struct gallivm_state *gallivm,
    LLVMValueRef ptr =
       LLVMBuildGEP(builder, buffers_ptr, indices, ARRAY_SIZE(indices), "");
 
-   LLVMValueRef res = emit_load ? LLVMBuildLoad(builder, ptr, "") : ptr;
+   LLVMValueRef res = LLVMBuildLoad(builder, ptr, "");
 
    lp_build_name(res, "buffer.%s", member_name);
 
@@ -90,7 +89,7 @@ lp_llvm_buffer_member(struct gallivm_state *gallivm,
  * sampler code generator a reusable module without dependencies to
  * llvmpipe internals.
  */
-#define LP_LLVM_BUFFER_MEMBER(_name, _index, _emit_load)  \
+#define LP_LLVM_BUFFER_MEMBER(_name, _index)  \
    LLVMValueRef \
    lp_llvm_buffer_##_name(struct gallivm_state *gallivm,               \
                           LLVMValueRef buffers_ptr,                     \
@@ -98,8 +97,8 @@ lp_llvm_buffer_member(struct gallivm_state *gallivm,
    { \
       return lp_llvm_buffer_member(gallivm, buffers_ptr, \
                                   buffers_offset, buffers_limit, \
-                                  _index, #_name, _emit_load );  \
+                                  _index, #_name);  \
    }
 
-LP_LLVM_BUFFER_MEMBER(base, LP_JIT_BUFFER_BASE, TRUE)
-LP_LLVM_BUFFER_MEMBER(num_elements, LP_JIT_BUFFER_NUM_ELEMENTS, TRUE)
+LP_LLVM_BUFFER_MEMBER(base, LP_JIT_BUFFER_BASE)
+LP_LLVM_BUFFER_MEMBER(num_elements, LP_JIT_BUFFER_NUM_ELEMENTS)
-- 
GitLab


From 867079ccbfdd9adbc7f2670bf4ee84405ea33f54 Mon Sep 17 00:00:00 2001
From: Mihai Preda <mhpreda@gmail.com>
Date: Tue, 16 Aug 2022 11:11:24 +0300
Subject: [PATCH 3/9] gallium: drop unused macros in draw_llvm.h
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

The reason is that these macros use lp_build_struct_get(), which is
being replaced by lp_build_structure_get2() which takes the explicit
pointer type. Rather than attempt to update these unused macros, simply drop
them.
Reviewed-by: Marek Ol코치k <marek.olsak@amd.com>
Acked-by: Pierre-Eric Pelloux-Prayer <pierre-eric.pelloux-prayer@amd.com>
---
 src/gallium/auxiliary/draw/draw_llvm.h | 42 --------------------------
 1 file changed, 42 deletions(-)

diff --git a/src/gallium/auxiliary/draw/draw_llvm.h b/src/gallium/auxiliary/draw/draw_llvm.h
index 37052db3175b..941591ac7fb7 100644
--- a/src/gallium/auxiliary/draw/draw_llvm.h
+++ b/src/gallium/auxiliary/draw/draw_llvm.h
@@ -194,15 +194,6 @@ enum {
 #define draw_jit_context_viewports(_variant, _ptr) \
    lp_build_struct_get2(_variant->gallivm, _variant->context_type, _ptr, DRAW_JIT_CTX_VIEWPORT, "viewports")
 
-#define draw_jit_context_textures(_gallivm, _ptr) \
-   lp_build_struct_get_ptr(_gallivm, _ptr, DRAW_JIT_CTX_TEXTURES, "textures")
-
-#define draw_jit_context_samplers(_gallivm, _ptr) \
-   lp_build_struct_get_ptr(_gallivm, _ptr, DRAW_JIT_CTX_SAMPLERS, "samplers")
-
-#define draw_jit_context_images(_gallivm, _ptr) \
-   lp_build_struct_get_ptr(_gallivm, _ptr, DRAW_JIT_CTX_IMAGES, "images")
-
 #define draw_jit_context_ssbos(_variant, _ptr) \
    lp_build_struct_get_ptr2(_variant->gallivm, _variant->context_type, _ptr, DRAW_JIT_CTX_SSBOS, "ssbos")
 
@@ -292,21 +283,6 @@ enum {
 #define draw_gs_jit_context_constants(_variant, _ptr) \
    lp_build_struct_get_ptr2(_variant->gallivm, _variant->context_type, _ptr, DRAW_GS_JIT_CTX_CONSTANTS, "constants")
 
-#define draw_gs_jit_context_planes(_gallivm, _ptr) \
-   lp_build_struct_get(_gallivm, _ptr, DRAW_GS_JIT_CTX_PLANES, "planes")
-
-#define draw_gs_jit_context_viewports(_gallivm, _ptr) \
-   lp_build_struct_get(_gallivm, _ptr, DRAW_GS_JIT_CTX_VIEWPORT, "viewports")
-
-#define draw_gs_jit_context_textures(_gallivm, _ptr) \
-   lp_build_struct_get_ptr(_gallivm, _ptr, DRAW_GS_JIT_CTX_TEXTURES, "textures")
-
-#define draw_gs_jit_context_samplers(_gallivm, _ptr) \
-   lp_build_struct_get_ptr(_gallivm, _ptr, DRAW_GS_JIT_CTX_SAMPLERS, "samplers")
-
-#define draw_gs_jit_context_images(_gallivm, _ptr)                      \
-   lp_build_struct_get_ptr(_gallivm, _ptr, DRAW_GS_JIT_CTX_IMAGES, "images")
-
 #define draw_gs_jit_prim_lengths(_variant, _ptr) \
    lp_build_struct_get2(_variant->gallivm, _variant->context_type, _ptr, DRAW_GS_JIT_CTX_PRIM_LENGTHS, "prim_lengths")
 
@@ -353,15 +329,6 @@ enum {
 #define draw_tcs_jit_context_constants(_variant, _ptr) \
    lp_build_struct_get_ptr2(_variant->gallivm, _variant->context_type, _ptr, DRAW_TCS_JIT_CTX_CONSTANTS, "constants")
 
-#define draw_tcs_jit_context_textures(_gallivm, _ptr) \
-   lp_build_struct_get_ptr(_gallivm, _ptr, DRAW_TCS_JIT_CTX_TEXTURES, "textures")
-
-#define draw_tcs_jit_context_samplers(_gallivm, _ptr) \
-   lp_build_struct_get_ptr(_gallivm, _ptr, DRAW_TCS_JIT_CTX_SAMPLERS, "samplers")
-
-#define draw_tcs_jit_context_images(_gallivm, _ptr)                      \
-   lp_build_struct_get_ptr(_gallivm, _ptr, DRAW_TCS_JIT_CTX_IMAGES, "images")
-
 #define draw_tcs_jit_context_ssbos(_variant, _ptr) \
    lp_build_struct_get_ptr2(_variant->gallivm, _variant->context_type, _ptr, DRAW_TCS_JIT_CTX_SSBOS, "ssbos")
 
@@ -399,15 +366,6 @@ enum {
 #define draw_tes_jit_context_constants(_variant, _ptr) \
    lp_build_struct_get_ptr2(_variant->gallivm, _variant->context_type, _ptr, DRAW_TES_JIT_CTX_CONSTANTS, "constants")
 
-#define draw_tes_jit_context_textures(_gallivm, _ptr) \
-   lp_build_struct_get_ptr(_gallivm, _ptr, DRAW_TES_JIT_CTX_TEXTURES, "textures")
-
-#define draw_tes_jit_context_samplers(_gallivm, _ptr) \
-   lp_build_struct_get_ptr(_gallivm, _ptr, DRAW_TES_JIT_CTX_SAMPLERS, "samplers")
-
-#define draw_tes_jit_context_images(_gallivm, _ptr)                      \
-   lp_build_struct_get_ptr(_gallivm, _ptr, DRAW_TES_JIT_CTX_IMAGES, "images")
-
 #define draw_tes_jit_context_ssbos(_variant, _ptr) \
    lp_build_struct_get_ptr2(_variant->gallivm, _variant->context_type, _ptr, DRAW_TES_JIT_CTX_SSBOS, "ssbos")
 
-- 
GitLab


From 8cef264a265fa798eec64d5ac7245ec7ceccb1f8 Mon Sep 17 00:00:00 2001
From: Mihai Preda <mhpreda@gmail.com>
Date: Tue, 26 Jul 2022 15:43:30 +0300
Subject: [PATCH 4/9] =?UTF-8?q?gallivm:=20fixes=20for=20LLVM-15=20opaque?=
 =?UTF-8?q?=20pointers=20in=20lp=5Fbld=5Fnir=5Faos.c=20Reviewed-by:=20Mare?=
 =?UTF-8?q?k=20Ol=C5=A1=C3=A1k=20<marek.olsak@amd.com>=20Acked-by:=20Pierr?=
 =?UTF-8?q?e-Eric=20Pelloux-Prayer=20<pierre-eric.pelloux-prayer@amd.com>?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 src/gallium/auxiliary/gallivm/lp_bld_nir_aos.c | 11 +++++------
 1 file changed, 5 insertions(+), 6 deletions(-)

diff --git a/src/gallium/auxiliary/gallivm/lp_bld_nir_aos.c b/src/gallium/auxiliary/gallivm/lp_bld_nir_aos.c
index c449b5de46c7..226bb5e75cf0 100644
--- a/src/gallium/auxiliary/gallivm/lp_bld_nir_aos.c
+++ b/src/gallium/auxiliary/gallivm/lp_bld_nir_aos.c
@@ -172,7 +172,7 @@ emit_load_reg(struct lp_build_nir_context *bld_base,
               LLVMValueRef reg_storage)
 {
    struct gallivm_state *gallivm = bld_base->base.gallivm;
-   return LLVMBuildLoad(gallivm->builder, reg_storage, "");
+   return LLVMBuildLoad2(gallivm->builder, reg_bld->vec_type, reg_storage, "");
 }
 
 
@@ -195,7 +195,7 @@ emit_store_reg(struct lp_build_nir_context *bld_base,
       return;
    }
 
-   LLVMValueRef cur = LLVMBuildLoad(gallivm->builder, reg_storage, "");
+   LLVMValueRef cur = LLVMBuildLoad2(gallivm->builder, reg_bld->vec_type, reg_storage, "");
    LLVMTypeRef i32t = LLVMInt32TypeInContext(gallivm->context);
    LLVMValueRef shuffles[LP_MAX_VECTOR_LENGTH];
    for (unsigned j = 0; j < 16; j++) {
@@ -238,10 +238,9 @@ emit_load_ubo(struct lp_build_nir_context *bld_base,
       LLVMValueRef this_offset = lp_build_const_int32(gallivm,
                                                       offset_val + chan);
 
-      LLVMValueRef scalar_ptr = LLVMBuildGEP(builder, bld->consts_ptr,
-                                             &this_offset, 1, "");
-
-      LLVMValueRef scalar = LLVMBuildLoad(builder, scalar_ptr, "");
+      LLVMTypeRef scalar_type = LLVMInt8TypeInContext(gallivm->context);
+      LLVMValueRef scalar_ptr = LLVMBuildGEP2(builder, scalar_type, bld->consts_ptr, &this_offset, 1, "");
+      LLVMValueRef scalar = LLVMBuildLoad2(builder, scalar_type, scalar_ptr, "");
 
       lp_build_name(scalar, "const[%u].%c", offset_val, "xyzw"[chan]);
 
-- 
GitLab


From ac4c77cdd9c206f9bdfc60e806ca2335db07a56f Mon Sep 17 00:00:00 2001
From: Mihai Preda <mhpreda@gmail.com>
Date: Tue, 26 Jul 2022 16:02:52 +0300
Subject: [PATCH 5/9] =?UTF-8?q?gallivm:=20fixes=20for=20LLVM-15=20opaque?=
 =?UTF-8?q?=20pointers=20in=20lp=5Fbld=5Fnir=5Fsoa.c=20Reviewed-by:=20Mare?=
 =?UTF-8?q?k=20Ol=C5=A1=C3=A1k=20<marek.olsak@amd.com>=20Acked-by:=20Pierr?=
 =?UTF-8?q?e-Eric=20Pelloux-Prayer=20<pierre-eric.pelloux-prayer@amd.com>?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 .../auxiliary/gallivm/lp_bld_nir_soa.c        | 30 +++++++++----------
 1 file changed, 15 insertions(+), 15 deletions(-)

diff --git a/src/gallium/auxiliary/gallivm/lp_bld_nir_soa.c b/src/gallium/auxiliary/gallivm/lp_bld_nir_soa.c
index 94dcace50e33..90836928adee 100644
--- a/src/gallium/auxiliary/gallivm/lp_bld_nir_soa.c
+++ b/src/gallium/auxiliary/gallivm/lp_bld_nir_soa.c
@@ -223,6 +223,7 @@ get_soa_array_offsets(struct lp_build_context *uint_bld,
 static LLVMValueRef
 build_gather(struct lp_build_nir_context *bld_base,
              struct lp_build_context *bld,
+             LLVMTypeRef base_type,
              LLVMValueRef base_ptr,
              LLVMValueRef indexes,
              LLVMValueRef overflow_mask,
@@ -284,8 +285,8 @@ build_gather(struct lp_build_nir_context *bld_base,
                                          indexes, si, "");
       }
 
-      scalar_ptr = LLVMBuildGEP(builder, base_ptr, &index, 1, "gather_ptr");
-      scalar = LLVMBuildLoad(builder, scalar_ptr, "");
+      scalar_ptr = LLVMBuildGEP2(builder, base_type, base_ptr, &index, 1, "gather_ptr");
+      scalar = LLVMBuildLoad2(builder, base_type, scalar_ptr, "");
 
       res = LLVMBuildInsertElement(builder, res, scalar, di, "");
    }
@@ -326,7 +327,7 @@ emit_mask_scatter(struct lp_build_nir_soa_context *bld,
       LLVMValueRef ii = lp_build_const_int32(gallivm, i);
       LLVMValueRef index = LLVMBuildExtractElement(builder, indexes, ii, "");
       LLVMValueRef val = LLVMBuildExtractElement(builder, values, ii, "scatter_val");
-      LLVMValueRef scalar_ptr = LLVMBuildGEP(builder, base_ptr, &index, 1, "scatter_ptr");
+      LLVMValueRef scalar_ptr = LLVMBuildGEP2(builder, LLVMTypeOf(val), base_ptr, &index, 1, "scatter_ptr");
       LLVMValueRef scalar_pred = pred ?
          LLVMBuildExtractElement(builder, pred, ii, "scatter_pred") : NULL;
 
@@ -468,17 +469,15 @@ static void emit_load_var(struct lp_build_nir_context *bld_base,
                                                               attrib_index_val, 4, idx,
                                                               TRUE);
                LLVMValueRef index_vec2 = NULL;
-               LLVMTypeRef fptr_type;
-               LLVMValueRef inputs_array;
-               fptr_type = LLVMPointerType(LLVMFloatTypeInContext(gallivm->context), 0);
-               inputs_array = LLVMBuildBitCast(gallivm->builder, bld->inputs_array, fptr_type, "");
+               LLVMTypeRef scalar_type = LLVMFloatTypeInContext(gallivm->context);
+               LLVMValueRef inputs_array = LLVMBuildBitCast(gallivm->builder, bld->inputs_array, LLVMPointerType(scalar_type, 0), "");
 
                if (bit_size == 64)
                   index_vec2 = get_soa_array_offsets(&bld_base->uint_bld,
                                                      indir_index, 4, idx + 1, TRUE);
 
                /* Gather values from the input register array */
-               result[i] = build_gather(bld_base, &bld_base->base, inputs_array, index_vec, NULL, index_vec2);
+               result[i] = build_gather(bld_base, &bld_base->base, scalar_type, inputs_array, index_vec, NULL, index_vec2);
             } else {
                if (bld->indirects & nir_var_shader_in) {
                   LLVMValueRef lindex = lp_build_const_int32(gallivm,
@@ -706,13 +705,13 @@ static LLVMValueRef emit_load_reg(struct lp_build_nir_context *bld_base,
       reg_storage = LLVMBuildBitCast(builder, reg_storage, LLVMPointerType(reg_bld->elem_type, 0), "");
       for (unsigned i = 0; i < nc; i++) {
          LLVMValueRef indirect_offset = get_soa_array_offsets(uint_bld, indirect_val, nc, i, TRUE);
-         vals[i] = build_gather(bld_base, reg_bld, reg_storage, indirect_offset, NULL, NULL);
+         vals[i] = build_gather(bld_base, reg_bld, reg_bld->elem_type, reg_storage, indirect_offset, NULL, NULL);
       }
    } else {
       for (unsigned i = 0; i < nc; i++) {
          LLVMValueRef this_storage = nc == 1 ? reg_storage : lp_build_array_get_ptr(gallivm, reg_storage,
                                                                                     lp_build_const_int32(gallivm, i));
-         vals[i] = LLVMBuildLoad(builder, this_storage, "");
+         vals[i] = LLVMBuildLoad2(builder, reg_bld->vec_type, this_storage, "");
       }
    }
    return nc == 1 ? vals[0] : lp_nir_array_build_gather_values(builder, vals, nc);
@@ -1103,7 +1102,7 @@ static void emit_load_ubo(struct lp_build_nir_context *bld_base,
          LLVMBuildStore(builder, lp_build_pointer_get(builder, consts_ptr, chan_offset), res_store);
          lp_build_endif(&ifthen);
 
-         scalar = LLVMBuildLoad(builder, res_store, "");
+         scalar = LLVMBuildLoad2(builder, LLVMTypeOf(zero), res_store, "");
 
          result[c] = lp_build_broadcast_scalar(load_bld, scalar);
       }
@@ -1122,7 +1121,7 @@ static void emit_load_ubo(struct lp_build_nir_context *bld_base,
          LLVMValueRef this_offset = lp_build_add(uint_bld, offset, lp_build_const_int_vec(gallivm, uint_bld->type, c));
          overflow_mask = lp_build_compare(gallivm, uint_bld->type, PIPE_FUNC_GEQUAL,
                                           this_offset, num_consts);
-         result[c] = build_gather(bld_base, bld_broad, consts_ptr, this_offset, overflow_mask, NULL);
+         result[c] = build_gather(bld_base, bld_broad, bld_broad->elem_type, consts_ptr, this_offset, overflow_mask, NULL);
       }
    }
 }
@@ -2232,14 +2231,14 @@ static void emit_shuffle(struct lp_build_nir_context *bld_base, LLVMValueRef src
        */
       src_value = LLVMBuildFreeze(builder, src_value, "");
 
-      LLVMValueRef res = LLVMBuildLoad(builder, res_store, "");
+      LLVMValueRef res = LLVMBuildLoad2(builder, int_bld->vec_type, res_store, "");
       res = LLVMBuildInsertElement(builder, res, src_value, loop_state.counter, "");
       LLVMBuildStore(builder, res, res_store);
 
       lp_build_loop_end_cond(&loop_state, lp_build_const_int32(gallivm, bld_base->uint_bld.type.length),
                              NULL, LLVMIntUGE);
 
-      result[0] = LLVMBuildLoad(builder, res_store, "");
+      result[0] = LLVMBuildLoad2(builder, int_bld->vec_type, res_store, "");
    }
 }
 #endif
@@ -2653,7 +2652,8 @@ emit_clock(struct lp_build_nir_context *bld_base,
 
    lp_init_clock_hook(gallivm);
 
-   LLVMValueRef result = LLVMBuildCall(builder, gallivm->get_time_hook, NULL, 0, "");
+   LLVMTypeRef get_time_type = LLVMFunctionType(LLVMInt64TypeInContext(gallivm->context), NULL, 0, 1);
+   LLVMValueRef result = LLVMBuildCall2(builder, get_time_type, gallivm->get_time_hook, NULL, 0, "");
 
    LLVMValueRef hi = LLVMBuildShl(builder, result, lp_build_const_int64(gallivm, 32), "");
    hi = LLVMBuildTrunc(builder, hi, uint_bld->elem_type, "");
-- 
GitLab


From e61bf7947919270a80548ef2f0a7a059e21817f3 Mon Sep 17 00:00:00 2001
From: Mihai Preda <mhpreda@gmail.com>
Date: Tue, 16 Aug 2022 22:55:47 +0300
Subject: [PATCH 6/9] =?UTF-8?q?gallivm:=20fixes=20for=20LLVM-15=20opaque?=
 =?UTF-8?q?=20pointers=20in=20lp=5Fbld=5Fjit=5Ftypes.c=20Reviewed-by:=20Ma?=
 =?UTF-8?q?rek=20Ol=C5=A1=C3=A1k=20<marek.olsak@amd.com>=20Acked-by:=20Pie?=
 =?UTF-8?q?rre-Eric=20Pelloux-Prayer=20<pierre-eric.pelloux-prayer@amd.com?=
 =?UTF-8?q?>?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 .../auxiliary/gallivm/lp_bld_jit_types.c      | 41 ++++++++-----------
 1 file changed, 17 insertions(+), 24 deletions(-)

diff --git a/src/gallium/auxiliary/gallivm/lp_bld_jit_types.c b/src/gallium/auxiliary/gallivm/lp_bld_jit_types.c
index c4bfa2be899c..7af92824a5a4 100644
--- a/src/gallium/auxiliary/gallivm/lp_bld_jit_types.c
+++ b/src/gallium/auxiliary/gallivm/lp_bld_jit_types.c
@@ -70,35 +70,28 @@ lp_llvm_buffer_member(struct gallivm_state *gallivm,
    indices[1] = LLVMBuildSelect(gallivm->builder, cond, buffers_offset, lp_build_const_int32(gallivm, 0), "");
    indices[2] = lp_build_const_int32(gallivm, member_index);
 
-   LLVMValueRef ptr =
-      LLVMBuildGEP(builder, buffers_ptr, indices, ARRAY_SIZE(indices), "");
+   LLVMTypeRef buffer_type = lp_build_create_jit_buffer_type(gallivm);
+   LLVMTypeRef buffers_type = LLVMArrayType(buffer_type, LP_MAX_TGSI_CONST_BUFFERS);
+   LLVMValueRef ptr = LLVMBuildGEP2(builder, buffers_type, buffers_ptr, indices, ARRAY_SIZE(indices), "");
 
-   LLVMValueRef res = LLVMBuildLoad(builder, ptr, "");
+   LLVMTypeRef res_type = LLVMStructGetTypeAtIndex(buffer_type, member_index);
+   LLVMValueRef res = LLVMBuildLoad2(builder, res_type, ptr, "");
 
    lp_build_name(res, "buffer.%s", member_name);
 
    return res;
 }
 
-/**
- * Helper macro to instantiate the functions that generate the code to
- * fetch the members of lp_jit_buffer to fulfill the sampler code
- * generator requests.
- *
- * This complexity is the price we have to pay to keep the image
- * sampler code generator a reusable module without dependencies to
- * llvmpipe internals.
- */
-#define LP_LLVM_BUFFER_MEMBER(_name, _index)  \
-   LLVMValueRef \
-   lp_llvm_buffer_##_name(struct gallivm_state *gallivm,               \
-                          LLVMValueRef buffers_ptr,                     \
-                          LLVMValueRef buffers_offset, unsigned buffers_limit) \
-   { \
-      return lp_llvm_buffer_member(gallivm, buffers_ptr, \
-                                  buffers_offset, buffers_limit, \
-                                  _index, #_name);  \
-   }
+LLVMValueRef
+lp_llvm_buffer_base(struct gallivm_state *gallivm,
+                    LLVMValueRef buffers_ptr, LLVMValueRef buffers_offset, unsigned buffers_limit)
+{
+   return lp_llvm_buffer_member(gallivm, buffers_ptr, buffers_offset, buffers_limit, LP_JIT_BUFFER_BASE, "base");
+}
 
-LP_LLVM_BUFFER_MEMBER(base, LP_JIT_BUFFER_BASE)
-LP_LLVM_BUFFER_MEMBER(num_elements, LP_JIT_BUFFER_NUM_ELEMENTS)
+LLVMValueRef
+lp_llvm_buffer_num_elements(struct gallivm_state *gallivm,
+                    LLVMValueRef buffers_ptr, LLVMValueRef buffers_offset, unsigned buffers_limit)
+{
+   return lp_llvm_buffer_member(gallivm, buffers_ptr, buffers_offset, buffers_limit, LP_JIT_BUFFER_NUM_ELEMENTS, "num_elements");
+}
-- 
GitLab


From 0d7eac34a142e906c546acfd210f43acfd192d8a Mon Sep 17 00:00:00 2001
From: Mihai Preda <mhpreda@gmail.com>
Date: Sat, 20 Aug 2022 13:50:04 +0300
Subject: [PATCH 7/9] =?UTF-8?q?gallivm:=20fixes=20for=20LLVM-15=20opaque?=
 =?UTF-8?q?=20pointers=20in=20lp=5Fbld=5Fformat=5Fs3tc.c=20Reviewed-by:=20?=
 =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k=20<marek.olsak@amd.com>=20Acked-by:=20P?=
 =?UTF-8?q?ierre-Eric=20Pelloux-Prayer=20<pierre-eric.pelloux-prayer@amd.c?=
 =?UTF-8?q?om>?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 src/gallium/auxiliary/gallivm/lp_bld_format_s3tc.c | 9 ++++-----
 src/gallium/auxiliary/gallivm/lp_bld_struct.c      | 2 ++
 src/gallium/auxiliary/gallivm/lp_bld_struct.h      | 2 ++
 3 files changed, 8 insertions(+), 5 deletions(-)

diff --git a/src/gallium/auxiliary/gallivm/lp_bld_format_s3tc.c b/src/gallium/auxiliary/gallivm/lp_bld_format_s3tc.c
index fe44841528cb..4ea40d14f8ca 100644
--- a/src/gallium/auxiliary/gallivm/lp_bld_format_s3tc.c
+++ b/src/gallium/auxiliary/gallivm/lp_bld_format_s3tc.c
@@ -1197,12 +1197,11 @@ s3tc_update_cache_access(struct gallivm_state *gallivm,
 
    assert(index == LP_BUILD_FORMAT_CACHE_MEMBER_ACCESS_TOTAL ||
           index == LP_BUILD_FORMAT_CACHE_MEMBER_ACCESS_MISS);
-
-   member_ptr = lp_build_struct_get_ptr(gallivm, ptr, index, "");
-   cache_access = LLVMBuildLoad(builder, member_ptr, "cache_access");
+   LLVMTypeRef cache_type = lp_build_format_cache_type(gallivm);
+   member_ptr = lp_build_struct_get_ptr2(gallivm, cache_type, ptr, index, "");
+   cache_access = LLVMBuildLoad2(builder, LLVMInt64TypeInContext(gallivm->context), member_ptr, "cache_access");
    cache_access = LLVMBuildAdd(builder, cache_access,
-                               LLVMConstInt(LLVMInt64TypeInContext(gallivm->context),
-                                                                   count, 0), "");
+                               LLVMConstInt(LLVMInt64TypeInContext(gallivm->context), count, 0), "");
    LLVMBuildStore(builder, cache_access, member_ptr);
 }
 #endif
diff --git a/src/gallium/auxiliary/gallivm/lp_bld_struct.c b/src/gallium/auxiliary/gallivm/lp_bld_struct.c
index 9e3e24cd9e1e..4259ecfa0d45 100644
--- a/src/gallium/auxiliary/gallivm/lp_bld_struct.c
+++ b/src/gallium/auxiliary/gallivm/lp_bld_struct.c
@@ -42,6 +42,7 @@
 #include "lp_bld_struct.h"
 
 
+/* Deprecated (used only by llvmpipe); use lp_build_struct_get_ptr2() instead. */
 LLVMValueRef
 lp_build_struct_get_ptr(struct gallivm_state *gallivm,
                         LLVMValueRef ptr,
@@ -60,6 +61,7 @@ lp_build_struct_get_ptr(struct gallivm_state *gallivm,
    return member_ptr;
 }
 
+/* Deprecated (used only by llvmpipe); use lp_build_struct_get2() instead. */
 LLVMValueRef
 lp_build_struct_get(struct gallivm_state *gallivm,
                     LLVMValueRef ptr,
diff --git a/src/gallium/auxiliary/gallivm/lp_bld_struct.h b/src/gallium/auxiliary/gallivm/lp_bld_struct.h
index a87519883b4d..4b1cc79b2aa4 100644
--- a/src/gallium/auxiliary/gallivm/lp_bld_struct.h
+++ b/src/gallium/auxiliary/gallivm/lp_bld_struct.h
@@ -55,6 +55,7 @@
 
 /**
  * Get value pointer to a structure member.
+ * Deprecated (used only by llvmpipe); use lp_build_struct_get_ptr2() instead.
  */
 LLVMValueRef
 lp_build_struct_get_ptr(struct gallivm_state *gallivm,
@@ -64,6 +65,7 @@ lp_build_struct_get_ptr(struct gallivm_state *gallivm,
 
 /**
  * Get the value of a structure member.
+ * Deprecated (used only by llvmpipe); use lp_build_struct_get2() instead.
  */
 LLVMValueRef
 lp_build_struct_get(struct gallivm_state *gallivm,
-- 
GitLab


From 7c283b2b16f241226148acc970ac19b411c6ddb8 Mon Sep 17 00:00:00 2001
From: Mihai Preda <mhpreda@gmail.com>
Date: Mon, 22 Aug 2022 16:34:30 +0300
Subject: [PATCH 8/9] =?UTF-8?q?gallivm:=20fixes=20for=20LLVM-15=20opaque?=
 =?UTF-8?q?=20pointers=20in=20lp=5Fbld=5Fstruct.c=20Reviewed-by:=20Marek?=
 =?UTF-8?q?=20Ol=C5=A1=C3=A1k=20<marek.olsak@amd.com>=20Acked-by:=20Pierre?=
 =?UTF-8?q?-Eric=20Pelloux-Prayer=20<pierre-eric.pelloux-prayer@amd.com>?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 src/gallium/auxiliary/gallivm/lp_bld_struct.c | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/src/gallium/auxiliary/gallivm/lp_bld_struct.c b/src/gallium/auxiliary/gallivm/lp_bld_struct.c
index 4259ecfa0d45..fa25b4ac3124 100644
--- a/src/gallium/auxiliary/gallivm/lp_bld_struct.c
+++ b/src/gallium/auxiliary/gallivm/lp_bld_struct.c
@@ -109,7 +109,8 @@ lp_build_struct_get2(struct gallivm_state *gallivm,
    assert(LLVMGetTypeKind(LLVMTypeOf(ptr)) == LLVMPointerTypeKind);
    assert(LLVM_VERSION_MAJOR >= 15 || LLVMGetTypeKind(LLVMGetElementType(LLVMTypeOf(ptr))) == LLVMStructTypeKind);
    member_ptr = lp_build_struct_get_ptr2(gallivm, ptr_type, ptr, member, name);
-   res = LLVMBuildLoad(gallivm->builder, member_ptr, "");
+   LLVMTypeRef member_type = LLVMStructGetTypeAtIndex(ptr_type, member);
+   res = LLVMBuildLoad2(gallivm->builder, member_type, member_ptr, "");
    lp_build_name(res, "%s.%s", LLVMGetValueName(ptr), name);
    return res;
 }
-- 
GitLab


From f66ac4404d99e4d7da5d237ee7cce6052bb8d376 Mon Sep 17 00:00:00 2001
From: Mihai Preda <mhpreda@gmail.com>
Date: Wed, 24 Aug 2022 14:22:07 +0300
Subject: [PATCH 9/9] =?UTF-8?q?gallivm:=20fixes=20for=20LLVM-15=20opaque?=
 =?UTF-8?q?=20pointers=20in=20lp=5Fbld=5Fformat=5Fsoa.c=20Reviewed-by:=20M?=
 =?UTF-8?q?arek=20Ol=C5=A1=C3=A1k=20<marek.olsak@amd.com>=20Acked-by:=20Pi?=
 =?UTF-8?q?erre-Eric=20Pelloux-Prayer=20<pierre-eric.pelloux-prayer@amd.co?=
 =?UTF-8?q?m>?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 src/gallium/auxiliary/gallivm/lp_bld_format_soa.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/gallium/auxiliary/gallivm/lp_bld_format_soa.c b/src/gallium/auxiliary/gallivm/lp_bld_format_soa.c
index 6cda6036b37c..784b8dc66946 100644
--- a/src/gallium/auxiliary/gallivm/lp_bld_format_soa.c
+++ b/src/gallium/auxiliary/gallivm/lp_bld_format_soa.c
@@ -1099,7 +1099,7 @@ lp_build_store_rgba_soa(struct gallivm_state *gallivm,
       struct lp_build_loop_state loop_state;
 
       LLVMValueRef store_offset = LLVMBuildAdd(gallivm->builder, offset, lp_build_const_int_vec(gallivm, type, i * 4), "");
-      store_offset = LLVMBuildGEP(gallivm->builder, base_ptr, &store_offset, 1, "");
+      store_offset = LLVMBuildGEP2(gallivm->builder, LLVMInt8TypeInContext(gallivm->context), base_ptr, &store_offset, 1, "");
 
       lp_build_loop_begin(&loop_state, gallivm, lp_build_const_int32(gallivm, 0));
 
-- 
GitLab

