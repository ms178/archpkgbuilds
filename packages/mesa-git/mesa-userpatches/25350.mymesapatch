From fd34db841f5ba63ced1f62ba86d191442e47eb74 Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Tue, 12 Dec 2023 14:55:29 +0100
Subject: [PATCH] radv: fix binding partial depth/stencil views with dynamic
 rendering

With dynamic rendering, it's allowed to begin rendering with depth or
stencil only but still with a depth/stencil format. The test below
checks that unbound part of ds isn't modified, if depth is bound and
stencil not and vice versa.

This fixes a recent CTS
dEQP-VK.dynamic_rendering.primary_cmd_buff.basic.partial_binding_depth_stencil.

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/amd/ci/radv-navi10-aco-fails.txt    |  1 -
 src/amd/ci/radv-navi21-aco-flakes.txt   |  1 -
 src/amd/ci/radv-navi31-aco-fails.txt    |  1 -
 src/amd/ci/radv-polaris10-aco-fails.txt |  1 -
 src/amd/ci/radv-renoir-aco-fails.txt    |  1 -
 src/amd/ci/radv-vangogh-aco-flakes.txt  |  3 ---
 src/amd/ci/radv-vega10-aco-flakes.txt   |  3 ---
 src/amd/vulkan/radv_cmd_buffer.c        | 17 +++++++++++++++--
 src/amd/vulkan/radv_device.c            |  6 ++++--
 src/amd/vulkan/radv_private.h           |  2 +-
 10 files changed, 20 insertions(+), 16 deletions(-)

diff --git a/src/amd/ci/radv-navi10-aco-fails.txt b/src/amd/ci/radv-navi10-aco-fails.txt
index 2967a976f0538..acda34d6cf2f0 100644
--- a/src/amd/ci/radv-navi10-aco-fails.txt
+++ b/src/amd/ci/radv-navi10-aco-fails.txt
@@ -1,3 +1,2 @@
 # New CTS failures in 1.3.7.0
 dEQP-VK.api.version_check.unavailable_entry_points,Fail
-dEQP-VK.dynamic_rendering.primary_cmd_buff.basic.partial_binding_depth_stencil,Fail
diff --git a/src/amd/ci/radv-navi21-aco-flakes.txt b/src/amd/ci/radv-navi21-aco-flakes.txt
index 8e85da260b220..3ba46658a494a 100644
--- a/src/amd/ci/radv-navi21-aco-flakes.txt
+++ b/src/amd/ci/radv-navi21-aco-flakes.txt
@@ -16,6 +16,5 @@ dEQP-VK.pipeline.*line_stipple_params
 
 # New CTS flakes in 1.3.6.3
 dEQP-VK.ray_tracing_pipeline.pipeline_library.configurations.(single|multi)threaded_compilation.*_check_(all|capture_replay)_handles
-dEQP-VK.dynamic_rendering.primary_cmd_buff.basic.partial_binding_depth_stencil
 
 dEQP-VK.query_pool.statistics_query.host_query_reset.geometry_shader_invocations.secondary.32bits_triangle_list_clear_depth
diff --git a/src/amd/ci/radv-navi31-aco-fails.txt b/src/amd/ci/radv-navi31-aco-fails.txt
index 2967a976f0538..acda34d6cf2f0 100644
--- a/src/amd/ci/radv-navi31-aco-fails.txt
+++ b/src/amd/ci/radv-navi31-aco-fails.txt
@@ -1,3 +1,2 @@
 # New CTS failures in 1.3.7.0
 dEQP-VK.api.version_check.unavailable_entry_points,Fail
-dEQP-VK.dynamic_rendering.primary_cmd_buff.basic.partial_binding_depth_stencil,Fail
diff --git a/src/amd/ci/radv-polaris10-aco-fails.txt b/src/amd/ci/radv-polaris10-aco-fails.txt
index 9ed35ee6c8dd5..c07d22fe8fc1f 100644
--- a/src/amd/ci/radv-polaris10-aco-fails.txt
+++ b/src/amd/ci/radv-polaris10-aco-fails.txt
@@ -20,4 +20,3 @@ dEQP-VK.texture.mipmap.cubemap.image_view_min_lod.base_level.nearest_nearest,Fai
 
 # New CTS failures in 1.3.7.0.
 dEQP-VK.api.version_check.unavailable_entry_points,Fail
-dEQP-VK.dynamic_rendering.primary_cmd_buff.basic.partial_binding_depth_stencil,Fail
diff --git a/src/amd/ci/radv-renoir-aco-fails.txt b/src/amd/ci/radv-renoir-aco-fails.txt
index e37b1a769a630..a91278246ec73 100644
--- a/src/amd/ci/radv-renoir-aco-fails.txt
+++ b/src/amd/ci/radv-renoir-aco-fails.txt
@@ -1,3 +1,2 @@
 # New CTS failures in 1.3.7.0.
 dEQP-VK.api.version_check.unavailable_entry_points,Fail
-dEQP-VK.dynamic_rendering.primary_cmd_buff.basic.partial_binding_depth_stencil,Fail
diff --git a/src/amd/ci/radv-vangogh-aco-flakes.txt b/src/amd/ci/radv-vangogh-aco-flakes.txt
index 521056891211c..61d3f90e86e45 100644
--- a/src/amd/ci/radv-vangogh-aco-flakes.txt
+++ b/src/amd/ci/radv-vangogh-aco-flakes.txt
@@ -3,6 +3,3 @@ dEQP-VK.dynamic_rendering.primary_cmd_buff.basic.*
 dEQP-VK.draw.dynamic_rendering.*
 
 dEQP-VK.pipeline.monolithic.image.suballocation.sampling_type.separate.view_type.2d_array.format.r4g4b4a4_unorm_pack16.count_4.size.32x16_array_of_6
-
-# New flakes in CTS 1.3.7.0
-dEQP-VK.dynamic_rendering.primary_cmd_buff.basic.partial_binding_depth_stencil
diff --git a/src/amd/ci/radv-vega10-aco-flakes.txt b/src/amd/ci/radv-vega10-aco-flakes.txt
index 8d00ad7dedba4..cb85ff27204fd 100644
--- a/src/amd/ci/radv-vega10-aco-flakes.txt
+++ b/src/amd/ci/radv-vega10-aco-flakes.txt
@@ -14,6 +14,3 @@ dEQP-VK.multiview.multisample.get_query_pool_results.*
 dEQP-VK.*framebuffer_attachment.diff_attachments.*
 dEQP-VK.*framebuffer_attachment.multi_attachments_not_exported_2d.*
 dEQP-VK.*framebuffer_attachment.resolve_input_same_attachment
-
-# New flakes in CTS 1.3.7.0
-dEQP-VK.dynamic_rendering.primary_cmd_buff.basic.partial_binding_depth_stencil
diff --git a/src/amd/vulkan/radv_cmd_buffer.c b/src/amd/vulkan/radv_cmd_buffer.c
index 1c845a3dab7fa..0cf5ee4d26c2a 100644
--- a/src/amd/vulkan/radv_cmd_buffer.c
+++ b/src/amd/vulkan/radv_cmd_buffer.c
@@ -7653,8 +7653,21 @@ radv_CmdBeginRendering(VkCommandBuffer commandBuffer, const VkRenderingInfo *pRe
       }
 
       assert(d_iview == NULL || s_iview == NULL || d_iview == s_iview);
-      ds_att.iview = d_iview ? d_iview : s_iview, ds_att.format = ds_att.iview->vk.format;
-      radv_initialise_ds_surface(cmd_buffer->device, &ds_att.ds, ds_att.iview);
+      ds_att.iview = d_iview ? d_iview : s_iview;
+
+      VkImageAspectFlags ds_aspects;
+      if (d_iview && s_iview) {
+         ds_att.format = ds_att.iview->vk.format;
+         ds_aspects = VK_IMAGE_ASPECT_DEPTH_BIT | VK_IMAGE_ASPECT_STENCIL_BIT;
+      } else if (d_iview) {
+         ds_att.format = vk_format_depth_only(ds_att.iview->vk.format);
+         ds_aspects = VK_IMAGE_ASPECT_DEPTH_BIT;
+      } else {
+         ds_att.format = vk_format_stencil_only(ds_att.iview->vk.format);
+         ds_aspects = VK_IMAGE_ASPECT_STENCIL_BIT;
+      }
+
+      radv_initialise_ds_surface(cmd_buffer->device, &ds_att.ds, ds_att.iview, ds_aspects);
 
       assert(d_res_iview == NULL || s_res_iview == NULL || d_res_iview == s_res_iview);
       ds_att.resolve_iview = d_res_iview ? d_res_iview : s_res_iview;
diff --git a/src/amd/vulkan/radv_device.c b/src/amd/vulkan/radv_device.c
index 5b5451401e89e..c2a72618f8692 100644
--- a/src/amd/vulkan/radv_device.c
+++ b/src/amd/vulkan/radv_device.c
@@ -1885,7 +1885,7 @@ radv_initialise_vrs_surface(struct radv_image *image, struct radv_buffer *htile_
 
 void
 radv_initialise_ds_surface(const struct radv_device *device, struct radv_ds_buffer_info *ds,
-                           struct radv_image_view *iview)
+                           struct radv_image_view *iview, VkImageAspectFlags ds_aspects)
 {
    unsigned level = iview->vk.base_mip_level;
    unsigned format, stencil_format;
@@ -1902,7 +1902,9 @@ radv_initialise_ds_surface(const struct radv_device *device, struct radv_ds_buff
    stencil_format = surf->has_stencil ? V_028044_STENCIL_8 : V_028044_STENCIL_INVALID;
 
    uint32_t max_slice = radv_surface_max_layer_count(iview) - 1;
-   ds->db_depth_view = S_028008_SLICE_START(iview->vk.base_array_layer) | S_028008_SLICE_MAX(max_slice);
+   ds->db_depth_view = S_028008_SLICE_START(iview->vk.base_array_layer) | S_028008_SLICE_MAX(max_slice) |
+                       S_028008_Z_READ_ONLY(!(ds_aspects & VK_IMAGE_ASPECT_DEPTH_BIT)) |
+                       S_028008_STENCIL_READ_ONLY(!(ds_aspects & VK_IMAGE_ASPECT_STENCIL_BIT));
    if (device->physical_device->rad_info.gfx_level >= GFX10) {
       ds->db_depth_view |=
          S_028008_SLICE_START_HI(iview->vk.base_array_layer >> 11) | S_028008_SLICE_MAX_HI(max_slice >> 11);
diff --git a/src/amd/vulkan/radv_private.h b/src/amd/vulkan/radv_private.h
index 1818b700a46d0..bc2f0b17c340c 100644
--- a/src/amd/vulkan/radv_private.h
+++ b/src/amd/vulkan/radv_private.h
@@ -1545,7 +1545,7 @@ struct radv_ds_buffer_info {
 void radv_initialise_color_surface(struct radv_device *device, struct radv_color_buffer_info *cb,
                                    struct radv_image_view *iview);
 void radv_initialise_ds_surface(const struct radv_device *device, struct radv_ds_buffer_info *ds,
-                                struct radv_image_view *iview);
+                                struct radv_image_view *iview, VkImageAspectFlags ds_aspects);
 void radv_initialise_vrs_surface(struct radv_image *image, struct radv_buffer *htile_buffer,
                                  struct radv_ds_buffer_info *ds);
 
-- 
GitLab

