From 8ac06ce19ea37fdc509e4b320cb10d1f35b16598 Mon Sep 17 00:00:00 2001
From: Georg Lehmann <dadschoorse@gmail.com>
Date: Sat, 4 Oct 2025 14:09:10 +0200
Subject: [PATCH 1/4] nir: add atomic isub

---
 src/compiler/nir/nir.c                     | 2 ++
 src/compiler/nir/nir.h                     | 2 ++
 src/compiler/nir/nir_opt_uniform_atomics.c | 3 +++
 src/compiler/nir/nir_print.c               | 3 +++
 4 files changed, 10 insertions(+)

diff --git a/src/compiler/nir/nir.c b/src/compiler/nir/nir.c
index 5ed9594f7d696..4bb4e0534f85e 100644
--- a/src/compiler/nir/nir.c
+++ b/src/compiler/nir/nir.c
@@ -3804,6 +3804,8 @@ nir_atomic_op_to_alu(nir_atomic_op op)
    switch (op) {
    case nir_atomic_op_iadd:
       return nir_op_iadd;
+   case nir_atomic_op_isub:
+      return nir_op_isub;
    case nir_atomic_op_imin:
       return nir_op_imin;
    case nir_atomic_op_umin:
diff --git a/src/compiler/nir/nir.h b/src/compiler/nir/nir.h
index 3a3f1dc76aaf0..7eb6db43932b4 100644
--- a/src/compiler/nir/nir.h
+++ b/src/compiler/nir/nir.h
@@ -1251,6 +1251,7 @@ nir_op nir_type_conversion_op(nir_alu_type src, nir_alu_type dst,
  */
 typedef enum {
    nir_atomic_op_iadd,
+   nir_atomic_op_isub,
    nir_atomic_op_imin,
    nir_atomic_op_umin,
    nir_atomic_op_imax,
@@ -1284,6 +1285,7 @@ nir_atomic_op_type(nir_atomic_op op)
       return nir_type_float;
 
    case nir_atomic_op_iadd:
+   case nir_atomic_op_isub:
    case nir_atomic_op_iand:
    case nir_atomic_op_ior:
    case nir_atomic_op_ixor:
diff --git a/src/compiler/nir/nir_opt_uniform_atomics.c b/src/compiler/nir/nir_opt_uniform_atomics.c
index a4b629c9dd0bb..c719f51adf3ff 100644
--- a/src/compiler/nir/nir_opt_uniform_atomics.c
+++ b/src/compiler/nir/nir_opt_uniform_atomics.c
@@ -191,6 +191,9 @@ static void
 reduce_data(nir_builder *b, nir_op op, nir_def *data,
             nir_def **reduce, nir_def **scan)
 {
+   if (op == nir_op_isub)
+      op = nir_op_iadd;
+
    if (scan) {
       *scan = nir_exclusive_scan(b, data, .reduction_op = op);
       if (reduce) {
diff --git a/src/compiler/nir/nir_print.c b/src/compiler/nir/nir_print.c
index 8cd6bb00aa850..a13f3ea26e563 100644
--- a/src/compiler/nir/nir_print.c
+++ b/src/compiler/nir/nir_print.c
@@ -1268,6 +1268,9 @@ print_intrinsic_instr(nir_intrinsic_instr *instr, print_state *state)
          case nir_atomic_op_iadd:
             fprintf(fp, "iadd");
             break;
+         case nir_atomic_op_isub:
+            fprintf(fp, "isub");
+            break;
          case nir_atomic_op_imin:
             fprintf(fp, "imin");
             break;
-- 
GitLab


From 8cc38d122aa1ae052a08a3f36ae3699eb2cf58db Mon Sep 17 00:00:00 2001
From: Georg Lehmann <dadschoorse@gmail.com>
Date: Sat, 4 Oct 2025 14:13:31 +0200
Subject: [PATCH 2/4] ac/llvm: support nir_atomic_op_isub

---
 src/amd/llvm/ac_nir_to_llvm.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/src/amd/llvm/ac_nir_to_llvm.c b/src/amd/llvm/ac_nir_to_llvm.c
index b92af5be26d2f..520b17c0c8174 100644
--- a/src/amd/llvm/ac_nir_to_llvm.c
+++ b/src/amd/llvm/ac_nir_to_llvm.c
@@ -1727,6 +1727,7 @@ translate_atomic_op_str(nir_atomic_op op)
 {
    switch (op) {
    case nir_atomic_op_iadd:     return "add";
+   case nir_atomic_op_isub:     return "sub";
    case nir_atomic_op_imin:     return "smin";
    case nir_atomic_op_umin:     return "umin";
    case nir_atomic_op_imax:     return "smax";
@@ -1751,6 +1752,7 @@ translate_atomic_op(nir_atomic_op op)
 {
    switch (op) {
    case nir_atomic_op_iadd: return LLVMAtomicRMWBinOpAdd;
+   case nir_atomic_op_isub: return LLVMAtomicRMWBinOpSub;
    case nir_atomic_op_xchg: return LLVMAtomicRMWBinOpXchg;
    case nir_atomic_op_iand: return LLVMAtomicRMWBinOpAnd;
    case nir_atomic_op_ior:  return LLVMAtomicRMWBinOpOr;
-- 
GitLab


From 40998b67a0e8d1424c506a16cdb928f2db1a7d81 Mon Sep 17 00:00:00 2001
From: Georg Lehmann <dadschoorse@gmail.com>
Date: Sat, 4 Oct 2025 14:16:50 +0200
Subject: [PATCH 3/4] aco/isel: support nir_op_atomic_isub

---
 .../aco_select_nir_intrinsics.cpp                 | 15 +++++++++++++++
 1 file changed, 15 insertions(+)

diff --git a/src/amd/compiler/instruction_selection/aco_select_nir_intrinsics.cpp b/src/amd/compiler/instruction_selection/aco_select_nir_intrinsics.cpp
index eec62b5b7605f..6cc116fc14a5b 100644
--- a/src/amd/compiler/instruction_selection/aco_select_nir_intrinsics.cpp
+++ b/src/amd/compiler/instruction_selection/aco_select_nir_intrinsics.cpp
@@ -2080,6 +2080,11 @@ translate_buffer_image_atomic_op(const nir_atomic_op op, aco_opcode* buf_op, aco
       *buf_op64 = aco_opcode::buffer_atomic_add_x2;
       *image_op = aco_opcode::image_atomic_add;
       break;
+   case nir_atomic_op_isub:
+      *buf_op = aco_opcode::buffer_atomic_sub;
+      *buf_op64 = aco_opcode::buffer_atomic_sub_x2;
+      *image_op = aco_opcode::image_atomic_sub;
+      break;
    case nir_atomic_op_umin:
       *buf_op = aco_opcode::buffer_atomic_umin;
       *buf_op64 = aco_opcode::buffer_atomic_umin_x2;
@@ -2516,6 +2521,10 @@ visit_global_atomic(isel_context* ctx, nir_intrinsic_instr* instr)
          op32 = global ? aco_opcode::global_atomic_add : aco_opcode::flat_atomic_add;
          op64 = global ? aco_opcode::global_atomic_add_x2 : aco_opcode::flat_atomic_add_x2;
          break;
+      case nir_atomic_op_isub:
+         op32 = global ? aco_opcode::global_atomic_sub : aco_opcode::flat_atomic_sub;
+         op64 = global ? aco_opcode::global_atomic_sub_x2 : aco_opcode::flat_atomic_sub_x2;
+         break;
       case nir_atomic_op_imin:
          op32 = global ? aco_opcode::global_atomic_smin : aco_opcode::flat_atomic_smin;
          op64 = global ? aco_opcode::global_atomic_smin_x2 : aco_opcode::flat_atomic_smin_x2;
@@ -3015,6 +3024,12 @@ visit_shared_atomic(isel_context* ctx, nir_intrinsic_instr* instr)
       op32_rtn = aco_opcode::ds_add_rtn_u32;
       op64_rtn = aco_opcode::ds_add_rtn_u64;
       break;
+   case nir_atomic_op_isub:
+      op32 = aco_opcode::ds_sub_u32;
+      op64 = aco_opcode::ds_sub_u64;
+      op32_rtn = aco_opcode::ds_sub_rtn_u32;
+      op64_rtn = aco_opcode::ds_sub_rtn_u64;
+      break;
    case nir_atomic_op_imin:
       op32 = aco_opcode::ds_min_i32;
       op64 = aco_opcode::ds_min_i64;
-- 
GitLab


From 93c3667b52230a48a63af5a81dd69145cbb14051 Mon Sep 17 00:00:00 2001
From: Georg Lehmann <dadschoorse@gmail.com>
Date: Sat, 4 Oct 2025 14:36:14 +0200
Subject: [PATCH 4/4] nir: optimize atomic isub if supported

Foz-DB Navi48:
Totals from 1 (0.00% of 80287) affected shaders:
Instrs: 1641 -> 1637 (-0.24%)
CodeSize: 8472 -> 8456 (-0.19%)
Latency: 19132 -> 19131 (-0.01%)
InvThroughput: 9566 -> 9565 (-0.01%)
Copies: 126 -> 125 (-0.79%)
VALU: 565 -> 563 (-0.35%)
SALU: 439 -> 438 (-0.23%)
---
 src/amd/common/nir/ac_nir.c                   |  1 +
 src/compiler/nir/nir_opt_intrinsics.c         | 31 +++++++++++++++++++
 .../nir/nir_shader_compiler_options.h         |  3 ++
 3 files changed, 35 insertions(+)

diff --git a/src/amd/common/nir/ac_nir.c b/src/amd/common/nir/ac_nir.c
index 2b2a461f63ef6..8dc022c884abd 100644
--- a/src/amd/common/nir/ac_nir.c
+++ b/src/amd/common/nir/ac_nir.c
@@ -90,6 +90,7 @@ void ac_nir_set_options(struct radeon_info *info, bool use_llvm,
    options->has_shfr32 = true;
    options->has_mul24_relaxed = true;
    options->has_f2e4m3fn_satfn = !use_llvm && info->gfx_level >= GFX12;
+   options->has_atomic_isub = true;
    options->lower_int64_options = nir_lower_imul64 | nir_lower_imul_high64 | nir_lower_imul_2x32_64 | nir_lower_divmod64 |
                                   nir_lower_minmax64 | nir_lower_iabs64 | nir_lower_iadd_sat64 | nir_lower_conv64 |
                                   nir_lower_bitfield_extract64;
diff --git a/src/compiler/nir/nir_opt_intrinsics.c b/src/compiler/nir/nir_opt_intrinsics.c
index bfdb5ce50f466..142de3bee991e 100644
--- a/src/compiler/nir/nir_opt_intrinsics.c
+++ b/src/compiler/nir/nir_opt_intrinsics.c
@@ -324,6 +324,26 @@ try_opt_exclusive_scan_to_inclusive(nir_builder *b, nir_intrinsic_instr *intrin)
    return true;
 }
 
+static bool
+try_opt_atomic_isub(nir_builder *b, nir_intrinsic_instr *intrin,
+                    const struct nir_shader_compiler_options *options,
+                    unsigned data_idx)
+{
+   if (nir_intrinsic_atomic_op(intrin) != nir_atomic_op_iadd || !options->has_atomic_isub)
+      return false;
+
+   nir_scalar data = nir_scalar_resolved(intrin->src[data_idx].ssa, 0);
+
+   if (!nir_scalar_is_alu(data) || nir_scalar_alu_op(data) != nir_op_ineg)
+      return false;
+
+   data = nir_scalar_chase_alu_src(data, 0);
+
+   nir_src_rewrite(&intrin->src[data_idx], nir_mov_scalar(b, data));
+   nir_intrinsic_set_atomic_op(intrin, nir_atomic_op_isub);
+   return true;
+}
+
 static bool
 opt_intrinsics_intrin(nir_builder *b, nir_intrinsic_instr *intrin,
                       const struct nir_shader_compiler_options *options)
@@ -379,6 +399,17 @@ opt_intrinsics_intrin(nir_builder *b, nir_intrinsic_instr *intrin,
    }
    case nir_intrinsic_exclusive_scan:
       return try_opt_exclusive_scan_to_inclusive(b, intrin);
+   case nir_intrinsic_shared_atomic:
+   case nir_intrinsic_global_atomic:
+   case nir_intrinsic_global_atomic_amd:
+   case nir_intrinsic_deref_atomic:
+      return try_opt_atomic_isub(b, intrin, options, 1);
+   case nir_intrinsic_ssbo_atomic:
+      return try_opt_atomic_isub(b, intrin, options, 2);
+   case nir_intrinsic_image_deref_atomic:
+   case nir_intrinsic_image_atomic:
+   case nir_intrinsic_bindless_image_atomic:
+      return try_opt_atomic_isub(b, intrin, options, 3);
    default:
       return false;
    }
diff --git a/src/compiler/nir/nir_shader_compiler_options.h b/src/compiler/nir/nir_shader_compiler_options.h
index 5a884f36b7b04..6b07aad61dbcf 100644
--- a/src/compiler/nir/nir_shader_compiler_options.h
+++ b/src/compiler/nir/nir_shader_compiler_options.h
@@ -649,6 +649,9 @@ typedef struct nir_shader_compiler_options {
    /** Backend supports f2i32_rtne opcode. */
    bool has_f2i32_rtne;
 
+   /** Backend supports atomic isub. */
+   bool has_atomic_isub;
+
    /**
     * Is this the Intel vec4 backend?
     *
-- 
GitLab

