From a9f12474b126dd699253b5ab2606c0b03b006ac5 Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Fri, 22 Oct 2021 08:18:16 +0100
Subject: [PATCH] aco: CSE iadd and uadd_carry

fossil-db (navi21):
Totals from 5 (0.00% of 135636) affected shaders:
Instrs: 7851 -> 7783 (-0.87%)
CodeSize: 43828 -> 43560 (-0.61%); split: -0.62%, +0.01%
Latency: 382660 -> 382416 (-0.06%); split: -0.07%, +0.00%
InvThroughput: 238335 -> 238173 (-0.07%); split: -0.07%, +0.00%
VClause: 271 -> 269 (-0.74%)

fossil-db (vega10):
Totals from 1 (0.00% of 134698) affected shaders:
CodeSize: 7900 -> 7904 (+0.05%)
Copies: 157 -> 156 (-0.64%)

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
Closes: https://gitlab.freedesktop.org/mesa/mesa/-/issues/5545
---
 src/amd/compiler/aco_builder_h.py  |  3 +++
 src/amd/compiler/aco_optimizer.cpp | 27 +++++++++++++++++++++++++--
 2 files changed, 28 insertions(+), 2 deletions(-)

diff --git a/src/amd/compiler/aco_builder_h.py b/src/amd/compiler/aco_builder_h.py
index e62ad43c0e67..29eec94a17bf 100644
--- a/src/amd/compiler/aco_builder_h.py
+++ b/src/amd/compiler/aco_builder_h.py
@@ -433,6 +433,9 @@ public:
       if (!post_ra && (!b.op.hasRegClass() || b.op.regClass().type() == RegType::sgpr))
          b = copy(def(v1), b);
 
+      /* create a carry-out definition to CSE with uadd_carry */
+      carry_out |= !post_ra;
+
       if (!carry_in.op.isUndefined())
          return vop2(aco_opcode::v_addc_co_u32, Definition(dst), def(lm), a, b, carry_in);
       else if (program->gfx_level >= GFX10 && carry_out)
diff --git a/src/amd/compiler/aco_optimizer.cpp b/src/amd/compiler/aco_optimizer.cpp
index 564c658c9c19..4239146eab6f 100644
--- a/src/amd/compiler/aco_optimizer.cpp
+++ b/src/amd/compiler/aco_optimizer.cpp
@@ -2048,8 +2048,11 @@ label_instruction(opt_ctx& ctx, aco_ptr<Instruction>& instr)
    }
 
    /* Don't remove label_extract if we can't apply the extract to
-    * neg/abs instructions because we'll likely combine it into another valu. */
-   if (!(ctx.info[instr->definitions[0].tempId()].label & (label_neg | label_abs)))
+    * neg/abs instructions because we'll likely combine it into another valu. VOP3 additions
+    * might be turned into VOP2.
+    */
+   if (!(ctx.info[instr->definitions[0].tempId()].label &
+         (label_neg | label_abs | (ctx.program->gfx_level >= GFX9 ? label_add_sub : 0))))
       check_sdwa_extract(ctx, instr);
 }
 
@@ -3796,6 +3799,26 @@ combine_instruction(opt_ctx& ctx, aco_ptr<Instruction>& instr)
       return;
 
    if (instr->isVALU()) {
+      /* shrink addition instructions */
+      if (ctx.program->gfx_level >= GFX9 &&
+          (instr->opcode == aco_opcode::v_add_co_u32_e64 ||
+           instr->opcode == aco_opcode::v_add_co_u32) &&
+          ctx.uses[instr->definitions[1].tempId()] == 0) {
+         if (instr->opcode == aco_opcode::v_add_co_u32_e64)
+            instr->format = asVOP3(Format::VOP2);
+         instr->opcode = aco_opcode::v_add_u32;
+         instr->definitions.pop_back();
+
+         if (instr->usesModifiers()) {
+            /* leave the format alone */
+         } else if (instr->operands[1].isOfType(RegType::vgpr)) {
+            instr->format = Format::VOP2;
+         } else if (instr->operands[0].isOfType(RegType::vgpr)) {
+            std::swap(instr->operands[0], instr->operands[1]);
+            instr->format = Format::VOP2;
+         }
+      }
+
       /* Apply SDWA. Do this after label_instruction() so it can remove
        * label_extract if not all instructions can take SDWA. */
       for (unsigned i = 0; i < instr->operands.size(); i++) {
-- 
GitLab

