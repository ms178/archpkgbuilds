From 7ebcd0d6d4b241266a5796d5cc05a30298955171 Mon Sep 17 00:00:00 2001
From: Mike Blumenkrantz <michael.blumenkrantz@gmail.com>
Date: Thu, 8 Jun 2023 15:02:40 -0400
Subject: [PATCH 1/3] radv: remove redundant intermediate variable in
 radv_is_mrt0_dual_src()

---
 src/amd/vulkan/radv_cmd_buffer.c | 11 +----------
 1 file changed, 1 insertion(+), 10 deletions(-)

diff --git a/src/amd/vulkan/radv_cmd_buffer.c b/src/amd/vulkan/radv_cmd_buffer.c
index 3611e018af1c..eea5ca1cfbd2 100644
--- a/src/amd/vulkan/radv_cmd_buffer.c
+++ b/src/amd/vulkan/radv_cmd_buffer.c
@@ -2450,16 +2450,7 @@ radv_is_mrt0_dual_src(struct radv_cmd_buffer *cmd_buffer)
    if (!d->vk.cb.attachments[0].write_mask || !d->vk.cb.attachments[0].blend_enable)
       return false;
 
-   const struct vk_color_blend_attachment_state att = {
-      .color_blend_op = d->vk.cb.attachments[0].color_blend_op,
-      .src_color_blend_factor = d->vk.cb.attachments[0].src_color_blend_factor,
-      .dst_color_blend_factor = d->vk.cb.attachments[0].dst_color_blend_factor,
-      .alpha_blend_op = d->vk.cb.attachments[0].alpha_blend_op,
-      .src_alpha_blend_factor = d->vk.cb.attachments[0].src_alpha_blend_factor,
-      .dst_alpha_blend_factor = d->vk.cb.attachments[0].dst_alpha_blend_factor,
-   };
-
-   return radv_can_enable_dual_src(&att);
+   return radv_can_enable_dual_src(&d->vk.cb.attachments[0]);
 }
 
 static void
-- 
GitLab


From 6b8b4226a17e9eb4708932f5e7ec0357895dd3c6 Mon Sep 17 00:00:00 2001
From: Mike Blumenkrantz <michael.blumenkrantz@gmail.com>
Date: Thu, 8 Jun 2023 15:05:46 -0400
Subject: [PATCH 2/3] radv: inline radv_can_enable_dual_src()

this is unexpectedly heavy
---
 src/amd/vulkan/radv_pipeline_graphics.c | 19 -------------------
 src/amd/vulkan/radv_private.h           | 21 +++++++++++++++++++--
 2 files changed, 19 insertions(+), 21 deletions(-)

diff --git a/src/amd/vulkan/radv_pipeline_graphics.c b/src/amd/vulkan/radv_pipeline_graphics.c
index 8a40645e9d2e..eff30db3754a 100644
--- a/src/amd/vulkan/radv_pipeline_graphics.c
+++ b/src/amd/vulkan/radv_pipeline_graphics.c
@@ -272,25 +272,6 @@ radv_format_meta_fs_key(struct radv_device *device, VkFormat format)
    }
 }
 
-bool
-radv_can_enable_dual_src(const struct vk_color_blend_attachment_state *att)
-{
-   VkBlendOp eqRGB = att->color_blend_op;
-   VkBlendFactor srcRGB = att->src_color_blend_factor;
-   VkBlendFactor dstRGB = att->dst_color_blend_factor;
-   VkBlendOp eqA = att->alpha_blend_op;
-   VkBlendFactor srcA = att->src_alpha_blend_factor;
-   VkBlendFactor dstA = att->dst_alpha_blend_factor;
-   bool eqRGB_minmax = eqRGB == VK_BLEND_OP_MIN || eqRGB == VK_BLEND_OP_MAX;
-   bool eqA_minmax = eqA == VK_BLEND_OP_MIN || eqA == VK_BLEND_OP_MAX;
-
-   if (!eqRGB_minmax && (radv_is_dual_src(srcRGB) || radv_is_dual_src(dstRGB)))
-      return true;
-   if (!eqA_minmax && (radv_is_dual_src(srcA) || radv_is_dual_src(dstA)))
-      return true;
-   return false;
-}
-
 static bool
 radv_pipeline_needs_dynamic_ps_epilog(const struct radv_graphics_pipeline *pipeline)
 {
diff --git a/src/amd/vulkan/radv_private.h b/src/amd/vulkan/radv_private.h
index c7ed6b3b13c9..04d749cf376d 100644
--- a/src/amd/vulkan/radv_private.h
+++ b/src/amd/vulkan/radv_private.h
@@ -3630,6 +3630,25 @@ radv_is_dual_src(VkBlendFactor factor)
    }
 }
 
+static ALWAYS_INLINE bool
+radv_can_enable_dual_src(const struct vk_color_blend_attachment_state *att)
+{
+   VkBlendOp eqRGB = att->color_blend_op;
+   VkBlendFactor srcRGB = att->src_color_blend_factor;
+   VkBlendFactor dstRGB = att->dst_color_blend_factor;
+   VkBlendOp eqA = att->alpha_blend_op;
+   VkBlendFactor srcA = att->src_alpha_blend_factor;
+   VkBlendFactor dstA = att->dst_alpha_blend_factor;
+   bool eqRGB_minmax = eqRGB == VK_BLEND_OP_MIN || eqRGB == VK_BLEND_OP_MAX;
+   bool eqA_minmax = eqA == VK_BLEND_OP_MIN || eqA == VK_BLEND_OP_MAX;
+
+   if (!eqRGB_minmax && (radv_is_dual_src(srcRGB) || radv_is_dual_src(dstRGB)))
+      return true;
+   if (!eqA_minmax && (radv_is_dual_src(srcA) || radv_is_dual_src(dstA)))
+      return true;
+   return false;
+}
+
 static inline void
 radv_normalize_blend_factor(VkBlendOp op, VkBlendFactor *src_factor, VkBlendFactor *dst_factor)
 {
@@ -3642,8 +3661,6 @@ radv_normalize_blend_factor(VkBlendOp op, VkBlendFactor *src_factor, VkBlendFact
 void si_blend_remove_dst(VkBlendOp *func, VkBlendFactor *src_factor, VkBlendFactor *dst_factor,
                          VkBlendFactor expected_dst, VkBlendFactor replacement_src);
 
-bool radv_can_enable_dual_src(const struct vk_color_blend_attachment_state *att);
-
 uint32_t radv_get_tess_output_topology(const struct radv_graphics_pipeline *pipeline,
                                        VkTessellationDomainOrigin domain_origin);
 
-- 
GitLab


From f834484d225cb117b348ec0061abb2df05e17e8b Mon Sep 17 00:00:00 2001
From: Mike Blumenkrantz <michael.blumenkrantz@gmail.com>
Date: Thu, 8 Jun 2023 15:21:28 -0400
Subject: [PATCH 3/3] radv: pre-init color surface info on imageview creation

this is costly to do at render time
---
 src/amd/vulkan/radv_cmd_buffer.c | 2 +-
 src/amd/vulkan/radv_image.c      | 4 ++++
 src/amd/vulkan/radv_private.h    | 2 ++
 3 files changed, 7 insertions(+), 1 deletion(-)

diff --git a/src/amd/vulkan/radv_cmd_buffer.c b/src/amd/vulkan/radv_cmd_buffer.c
index eea5ca1cfbd2..a96b083db929 100644
--- a/src/amd/vulkan/radv_cmd_buffer.c
+++ b/src/amd/vulkan/radv_cmd_buffer.c
@@ -7868,7 +7868,7 @@ radv_CmdBeginRendering(VkCommandBuffer commandBuffer, const VkRenderingInfo *pRe
       color_att[i].format = iview->vk.format;
       color_att[i].iview = iview;
       color_att[i].layout = att_info->imageLayout;
-      radv_initialise_color_surface(cmd_buffer->device, &color_att[i].cb, iview);
+      color_att[i].cb = iview->cb;
 
       if (att_info->resolveMode != VK_RESOLVE_MODE_NONE &&
           att_info->resolveImageView != VK_NULL_HANDLE) {
diff --git a/src/amd/vulkan/radv_image.c b/src/amd/vulkan/radv_image.c
index 46438c6ab7ea..1a7ebc1ea5cd 100644
--- a/src/amd/vulkan/radv_image.c
+++ b/src/amd/vulkan/radv_image.c
@@ -2395,6 +2395,10 @@ radv_image_view_init(struct radv_image_view *iview, struct radv_device *device,
                                       disable_compression, enable_compression, iview->plane_id + i,
                                       i, img_create_flags, &iview->nbc_view, sliced_3d);
    }
+
+
+   if (!(iview->vk.aspects & (VK_IMAGE_ASPECT_DEPTH_BIT | VK_IMAGE_ASPECT_STENCIL_BIT)))
+      radv_initialise_color_surface(device, &iview->cb, iview);
 }
 
 void
diff --git a/src/amd/vulkan/radv_private.h b/src/amd/vulkan/radv_private.h
index 04d749cf376d..d8840db06024 100644
--- a/src/amd/vulkan/radv_private.h
+++ b/src/amd/vulkan/radv_private.h
@@ -2868,6 +2868,8 @@ struct radv_image_view {
 
    /* Block-compressed image views on GFX10+. */
    struct ac_surf_nbc_view nbc_view;
+
+   struct radv_color_buffer_info cb;
 };
 
 struct radv_image_create_info {
-- 
GitLab

