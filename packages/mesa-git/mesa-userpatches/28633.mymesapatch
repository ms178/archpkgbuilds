From d4b4c6bb5a85c820a797e82986488a4d4371fda5 Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Mon, 8 Apr 2024 15:20:48 +0100
Subject: [PATCH 1/2] aco: don't include the clause in
 VMEM_CLAUSE_MAX_GRAB_DIST
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

By excluding the clause from this check, we only count the number of
instructions that we're actually moving the store across.

fossil-db (navi31):
Totals from 4409 (5.55% of 79395) affected shaders:
MaxWaves: 120234 -> 119738 (-0.41%)
Instrs: 3184513 -> 3184702 (+0.01%); split: -0.09%, +0.09%
CodeSize: 15942424 -> 15943276 (+0.01%); split: -0.07%, +0.07%
VGPRs: 248448 -> 255816 (+2.97%); split: -0.04%, +3.00%
Latency: 18841156 -> 18829451 (-0.06%); split: -0.08%, +0.02%
InvThroughput: 2549229 -> 2552042 (+0.11%); split: -0.02%, +0.13%
VClause: 67760 -> 64138 (-5.35%); split: -5.40%, +0.06%
SClause: 82921 -> 82922 (+0.00%)
Copies: 270026 -> 273399 (+1.25%); split: -0.14%, +1.39%
VALU: 1793374 -> 1796743 (+0.19%); split: -0.02%, +0.21%
VOPD: 798 -> 802 (+0.50%); split: +0.63%, -0.13%

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
Reviewed-by: Daniel Schürmann <daniel@schuermann.dev>
---
 src/amd/compiler/aco_scheduler.cpp | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/amd/compiler/aco_scheduler.cpp b/src/amd/compiler/aco_scheduler.cpp
index c5f57e8ce576b..7b424c30d31b9 100644
--- a/src/amd/compiler/aco_scheduler.cpp
+++ b/src/amd/compiler/aco_scheduler.cpp
@@ -1051,9 +1051,9 @@ schedule_VMEM_store(sched_ctx& ctx, Block* block, std::vector<RegisterDemand>& r
    init_hazard_query(ctx, &hq);
 
    DownwardsCursor cursor = ctx.mv.downwards_init(idx, true, true);
-   unsigned skip = 0;
+   int skip = 0;
 
-   for (int i = 0; i < VMEM_CLAUSE_MAX_GRAB_DIST; i++) {
+   for (int i = 0; (i - skip) < VMEM_CLAUSE_MAX_GRAB_DIST; i++) {
       aco_ptr<Instruction>& candidate = block->instructions[cursor.source_idx];
       if (candidate->opcode == aco_opcode::p_logical_start)
          break;
-- 
GitLab


From bac2e659217ccb7416ab48636bdf6a076e812d23 Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Mon, 8 Apr 2024 15:10:39 +0100
Subject: [PATCH 2/2] aco: remove occupancy check in dealloc_vgprs()
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This didn't consider that there might be different programs using the same
SIMD.

fossil-db (navi31):
Totals from 68129 (85.81% of 79395) affected shaders:
Instrs: 23230924 -> 23388315 (+0.68%)
CodeSize: 120636544 -> 121272888 (+0.53%)
Latency: 115645106 -> 115683965 (+0.03%)
InvThroughput: 18804076 -> 18806912 (+0.02%); split: -0.00%, +0.02%
Branches: 404644 -> 407945 (+0.82%)

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
Reviewed-by: Daniel Schürmann <daniel@schuermann.dev>
---
 src/amd/compiler/aco_ir.cpp                 |  5 -----
 src/amd/compiler/tests/test_isel.cpp        | 22 +++++++++++++--------
 src/amd/compiler/tests/test_to_hw_instr.cpp | 10 ++++++++++
 3 files changed, 24 insertions(+), 13 deletions(-)

diff --git a/src/amd/compiler/aco_ir.cpp b/src/amd/compiler/aco_ir.cpp
index 9b6795f194048..163d8c08e63a9 100644
--- a/src/amd/compiler/aco_ir.cpp
+++ b/src/amd/compiler/aco_ir.cpp
@@ -1361,11 +1361,6 @@ dealloc_vgprs(Program* program)
    if (program->gfx_level < GFX11)
       return false;
 
-   /* skip if deallocating VGPRs won't increase occupancy */
-   uint16_t max_waves = max_suitable_waves(program, program->dev.max_waves_per_simd);
-   if (program->max_reg_demand.vgpr <= get_addr_vgpr_from_waves(program, max_waves))
-      return false;
-
    /* sendmsg(dealloc_vgprs) releases scratch, so this isn't safe if there is a in-progress scratch
     * store. */
    if (uses_scratch(program))
diff --git a/src/amd/compiler/tests/test_isel.cpp b/src/amd/compiler/tests/test_isel.cpp
index 82aabb0550cde..3af99c7702e29 100644
--- a/src/amd/compiler/tests/test_isel.cpp
+++ b/src/amd/compiler/tests/test_isel.cpp
@@ -198,11 +198,14 @@ BEGIN_TEST(isel.discard_early_exit.mrtz)
    );
 
    /* On GFX11, the discard early exit must use mrtz if the shader exports only depth. */
-   //>> exp mrtz v0, off, off, off done ; $_ $_
-   //! s_endpgm                         ; $_
+   //>> exp mrtz v0, off, off, off done     ; $_ $_
+   //! s_nop 0                              ; $_
+   //! s_sendmsg sendmsg(MSG_DEALLOC_VGPRS) ; $_
+   //! s_endpgm                             ; $_
    //! BB1:
-   //! exp mrtz off, off, off, off done ; $_ $_
-   //! s_endpgm                         ; $_
+   //! exp mrtz off, off, off, off done     ; $_ $_
+   //! s_sendmsg sendmsg(MSG_DEALLOC_VGPRS) ; $_
+   //! s_endpgm                             ; $_
 
    PipelineBuilder pbld(get_vk_device(GFX11));
    pbld.add_vsfs(vs, fs);
@@ -223,11 +226,14 @@ BEGIN_TEST(isel.discard_early_exit.mrt0)
    );
 
    /* On GFX11, the discard early exit must use mrt0 if the shader exports color. */
-   //>> exp mrt0 v0, v0, v0, v0 done    ; $_ $_
-   //! s_endpgm                         ; $_
+   //>> exp mrt0 v0, v0, v0, v0 done        ; $_ $_
+   //! s_nop 0                              ; $_
+   //! s_sendmsg sendmsg(MSG_DEALLOC_VGPRS) ; $_
+   //! s_endpgm                             ; $_
    //! BB1:
-   //! exp mrt0 off, off, off, off done ; $_ $_
-   //! s_endpgm                         ; $_
+   //! exp mrt0 off, off, off, off done     ; $_ $_
+   //! s_sendmsg sendmsg(MSG_DEALLOC_VGPRS) ; $_
+   //! s_endpgm                             ; $_
 
    PipelineBuilder pbld(get_vk_device(GFX11));
    pbld.add_vsfs(vs, fs);
diff --git a/src/amd/compiler/tests/test_to_hw_instr.cpp b/src/amd/compiler/tests/test_to_hw_instr.cpp
index 96f02f263c818..67d1533a45d6c 100644
--- a/src/amd/compiler/tests/test_to_hw_instr.cpp
+++ b/src/amd/compiler/tests/test_to_hw_instr.cpp
@@ -373,6 +373,8 @@ BEGIN_TEST(to_hw_instr.swap_subdword)
       bld.pseudo(aco_opcode::p_parallelcopy, Definition(v0_b1, v1b), Definition(v0_b3, v1b),
                  Operand(v0_b3, v1b), Operand(v0_b1, v1b));
 
+      //~gfx11! s_nop
+      //~gfx11! s_sendmsg sendmsg(dealloc_vgprs)
       //~gfx(8|9|11)! s_endpgm
 
       finish_to_hw_instr_test();
@@ -534,6 +536,8 @@ BEGIN_TEST(to_hw_instr.subdword_constant)
       bld.pseudo(aco_opcode::p_unit_test, Operand::c32(17u));
       bld.pseudo(aco_opcode::p_parallelcopy, Definition(v0_lo, v1b), Operand::zero(1));
 
+      //~gfx11! s_nop
+      //~gfx11! s_sendmsg sendmsg(dealloc_vgprs)
       //! s_endpgm
 
       finish_to_hw_instr_test();
@@ -662,6 +666,8 @@ BEGIN_TEST(to_hw_instr.extract)
 
          finish_to_hw_instr_test();
 
+         //~gfx11_.*! s_nop
+         //~gfx11_.*! s_sendmsg sendmsg(dealloc_vgprs)
          //! s_endpgm
       }
    }
@@ -754,6 +760,8 @@ BEGIN_TEST(to_hw_instr.insert)
 
       finish_to_hw_instr_test();
 
+      //~gfx11! s_nop
+      //~gfx11! s_sendmsg sendmsg(dealloc_vgprs)
       //! s_endpgm
    }
 END_TEST
@@ -904,6 +912,8 @@ BEGIN_TEST(to_hw_instr.pack2x16_constant)
       bld.pseudo(aco_opcode::p_parallelcopy, Definition(v0_lo, v2b), Definition(v0_hi, v2b),
                  Operand::zero(2), Operand(v1_lo, v2b));
 
+      //~gfx11! s_nop
+      //~gfx11! s_sendmsg sendmsg(dealloc_vgprs)
       //! s_endpgm
 
       finish_to_hw_instr_test();
-- 
GitLab

