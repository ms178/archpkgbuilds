From 78209ff71a5c71e83349b6a6518c2065f6111533 Mon Sep 17 00:00:00 2001
From: David Rosca <nowrep@gmail.com>
Date: Fri, 18 Aug 2023 12:29:56 +0200
Subject: [PATCH 1/4] gallium/auxiliary/vl: Add BT.709 full csc matrix

Used for converting from full range YUV.
---
 src/gallium/auxiliary/vl/vl_csc.c | 15 +++++++++++++++
 src/gallium/auxiliary/vl/vl_csc.h |  1 +
 2 files changed, 16 insertions(+)

diff --git a/src/gallium/auxiliary/vl/vl_csc.c b/src/gallium/auxiliary/vl/vl_csc.c
index b015a44314df8..d1a88b36d5535 100644
--- a/src/gallium/auxiliary/vl/vl_csc.c
+++ b/src/gallium/auxiliary/vl/vl_csc.c
@@ -119,6 +119,18 @@ static const vl_csc_matrix bt_709 =
    { 1.0f,  1.816f,  0.0f,   0.0f, }
 };
 
+/*
+ * Converts ITU-R BT.709 YCbCr pixels to RGB pixels where:
+ * Y, Cb, and Cr are in [0,255]
+ * R, G, and B are in [16,235]
+ */
+static const vl_csc_matrix bt_709_full =
+{
+   { 0.859f,  0.0f,    1.352f, 0.0625f, },
+   { 0.859f, -0.161f, -0.402f, 0.0625f, },
+   { 0.859f,  1.594f,  0.0f,   0.0625f, }
+};
+
 /*
  * Converts SMPTE 240M YCbCr pixels to RGB pixels where:
  * Y is in [16,235], Cb and Cr are in [16,240]
@@ -193,6 +205,9 @@ void vl_csc_get_matrix(enum VL_CSC_COLOR_STANDARD cs,
       case VL_CSC_COLOR_STANDARD_BT_709:
          cstd = &bt_709;
          break;
+      case VL_CSC_COLOR_STANDARD_BT_709_FULL:
+         cstd = &bt_709_full;
+         break;
       case VL_CSC_COLOR_STANDARD_SMPTE_240M:
          cstd = &smpte240m;
          break;
diff --git a/src/gallium/auxiliary/vl/vl_csc.h b/src/gallium/auxiliary/vl/vl_csc.h
index b640b4e8fdec7..43de802c11a2d 100644
--- a/src/gallium/auxiliary/vl/vl_csc.h
+++ b/src/gallium/auxiliary/vl/vl_csc.h
@@ -45,6 +45,7 @@ enum VL_CSC_COLOR_STANDARD
    VL_CSC_COLOR_STANDARD_IDENTITY,
    VL_CSC_COLOR_STANDARD_BT_601,
    VL_CSC_COLOR_STANDARD_BT_709,
+   VL_CSC_COLOR_STANDARD_BT_709_FULL,
    VL_CSC_COLOR_STANDARD_SMPTE_240M,
    VL_CSC_COLOR_STANDARD_BT_709_REV
 };
-- 
GitLab


From d236dd3e3ad70df4c30671ed97905ba6dbd64d84 Mon Sep 17 00:00:00 2001
From: David Rosca <nowrep@gmail.com>
Date: Fri, 18 Aug 2023 12:33:04 +0200
Subject: [PATCH 2/4] frontends/va: Set csc matrix in postproc

Set correct matrix according to format, color standard and range.

Change default value for color range when not explicitly specified.
Use limited range for YUV and full range for RGB.

This also adds support for converting from full range YUV to RGB.
---
 src/gallium/frontends/va/postproc.c | 52 +++++++++++++++++++++++++----
 1 file changed, 46 insertions(+), 6 deletions(-)

diff --git a/src/gallium/frontends/va/postproc.c b/src/gallium/frontends/va/postproc.c
index 9e96de0b715f1..dce3d3618c000 100644
--- a/src/gallium/frontends/va/postproc.c
+++ b/src/gallium/frontends/va/postproc.c
@@ -111,6 +111,46 @@ static void vlVaGetBox(struct pipe_video_buffer *buf, unsigned idx,
    box->height = height;
 }
 
+static bool vlVaGetFullRange(vlVaSurface *surface, uint8_t va_range)
+{
+   if (va_range != VA_SOURCE_RANGE_UNKNOWN)
+      return va_range == VA_SOURCE_RANGE_FULL;
+
+   /* Assume limited for YUV, full for RGB */
+   return !util_format_is_yuv(surface->buffer->buffer_format);
+}
+
+static void vlVaSetCscMatrix(vlVaDriver *drv,
+                             vlVaSurface *src,
+                             vlVaSurface *dst,
+                             VAProcPipelineParameterBuffer *param)
+{
+   enum VL_CSC_COLOR_STANDARD color_standard;
+   bool src_yuv = util_format_is_yuv(src->buffer->buffer_format);
+   bool dst_yuv = util_format_is_yuv(dst->buffer->buffer_format);
+
+   if (src_yuv == dst_yuv) {
+      color_standard = VL_CSC_COLOR_STANDARD_IDENTITY;
+   } else if (src_yuv) {
+      switch (param->surface_color_standard) {
+      case VAProcColorStandardBT601:
+         color_standard = VL_CSC_COLOR_STANDARD_BT_601;
+         break;
+      case VAProcColorStandardBT709:
+      default:
+         color_standard = src->full_range ?
+            VL_CSC_COLOR_STANDARD_BT_709_FULL :
+            VL_CSC_COLOR_STANDARD_BT_709;
+         break;
+      }
+   } else {
+      color_standard = VL_CSC_COLOR_STANDARD_BT_709_REV;
+   }
+
+   vl_csc_get_matrix(color_standard, NULL, dst->full_range, &drv->csc);
+   vl_compositor_set_csc_matrix(&drv->cstate, &drv->csc, 1.0f, 0.0f);
+}
+
 static VAStatus vlVaVidEngineBlit(vlVaDriver *drv, vlVaContext *context,
                                  const VARectangle *src_region,
                                  const VARectangle *dst_region,
@@ -422,12 +462,10 @@ vlVaHandleVAProcPipelineParameterBufferType(vlVaDriver *drv, vlVaContext *contex
    if (!src_surface->buffer || !dst_surface->buffer)
       return VA_STATUS_ERROR_INVALID_SURFACE;
 
-   /* Assume full range input when not set */
-   src_surface->full_range =
-      param->input_color_properties.color_range != VA_SOURCE_RANGE_REDUCED;
-   /* Assume limited range output when not set */
-   dst_surface->full_range =
-      param->output_color_properties.color_range == VA_SOURCE_RANGE_FULL;
+   src_surface->full_range = vlVaGetFullRange(src_surface,
+      param->input_color_properties.color_range);
+   dst_surface->full_range = vlVaGetFullRange(dst_surface,
+      param->output_color_properties.color_range);
 
    pscreen = drv->vscreen->pscreen;
 
@@ -541,6 +579,8 @@ vlVaHandleVAProcPipelineParameterBufferType(vlVaDriver *drv, vlVaContext *contex
          return VA_STATUS_SUCCESS;
    }
 
+   vlVaSetCscMatrix(drv, src_surface, dst_surface, param);
+
    /* Try other post proc implementations */
    if (context->target->buffer_format != PIPE_FORMAT_NV12 &&
        context->target->buffer_format != PIPE_FORMAT_P010 &&
-- 
GitLab


From 06aa23ad793fe0ac066c0ec90fb3c98e4891e9f6 Mon Sep 17 00:00:00 2001
From: David Rosca <nowrep@gmail.com>
Date: Thu, 17 Aug 2023 14:26:56 +0200
Subject: [PATCH 3/4] gallium/auxiliary/vl: Don't set csc matrix in
 video_buffer/rgb_to_yuv_layer

It's now handled in va frontend instead.
---
 src/gallium/auxiliary/vl/vl_compositor.c | 22 ++++------------------
 src/gallium/auxiliary/vl/vl_compositor.h |  3 +--
 src/gallium/frontends/va/postproc.c      |  8 +++-----
 3 files changed, 8 insertions(+), 25 deletions(-)

diff --git a/src/gallium/auxiliary/vl/vl_compositor.c b/src/gallium/auxiliary/vl/vl_compositor.c
index cf2fdc08559a5..cebd3afd7fc7c 100644
--- a/src/gallium/auxiliary/vl/vl_compositor.c
+++ b/src/gallium/auxiliary/vl/vl_compositor.c
@@ -384,11 +384,8 @@ set_yuv_layer(struct vl_compositor_state *s, struct vl_compositor *c,
 static void
 set_rgb_to_yuv_layer(struct vl_compositor_state *s, struct vl_compositor *c,
                      unsigned layer, struct pipe_sampler_view *v,
-                     struct u_rect *src_rect, struct u_rect *dst_rect, bool y,
-                     bool full_range)
+                     struct u_rect *src_rect, struct u_rect *dst_rect, bool y)
 {
-   vl_csc_matrix csc_matrix;
-
    assert(s && c && v);
 
    assert(layer < VL_COMPOSITOR_MAX_LAYERS);
@@ -397,9 +394,6 @@ set_rgb_to_yuv_layer(struct vl_compositor_state *s, struct vl_compositor *c,
 
    s->layers[layer].fs = y? c->fs_rgb_yuv.y : c->fs_rgb_yuv.uv;
 
-   vl_csc_get_matrix(VL_CSC_COLOR_STANDARD_BT_709_REV, NULL, full_range, &csc_matrix);
-   vl_compositor_set_csc_matrix(s, (const vl_csc_matrix *)&csc_matrix, 1.0f, 0.0f);
-
    s->layers[layer].samplers[0] = c->sampler_linear;
    s->layers[layer].samplers[1] = NULL;
    s->layers[layer].samplers[2] = NULL;
@@ -561,7 +555,6 @@ vl_compositor_set_buffer_layer(struct vl_compositor_state *s,
 {
    struct pipe_sampler_view **sampler_views;
    unsigned i;
-   vl_csc_matrix csc_matrix;
 
    assert(s && c && buffer);
 
@@ -618,12 +611,6 @@ vl_compositor_set_buffer_layer(struct vl_compositor_state *s,
       else if (c->pipe_gfx_supported)
          s->layers[layer].fs = c->fs_video_buffer;
    }
-
-   vl_csc_get_matrix(util_format_is_yuv(buffer->buffer_format) ?
-                     VL_CSC_COLOR_STANDARD_BT_601 :
-                     VL_CSC_COLOR_STANDARD_IDENTITY,
-                     NULL, true, &csc_matrix);
-   vl_compositor_set_csc_matrix(s, &csc_matrix, 1.0f, 0.0f);
 }
 
 void
@@ -735,8 +722,7 @@ vl_compositor_convert_rgb_to_yuv(struct vl_compositor_state *s,
                                  struct pipe_resource *src_res,
                                  struct pipe_video_buffer *dst,
                                  struct u_rect *src_rect,
-                                 struct u_rect *dst_rect,
-                                 bool full_range)
+                                 struct u_rect *dst_rect)
 {
    struct pipe_sampler_view *sv, sv_templ;
    struct pipe_surface **dst_surfaces;
@@ -749,7 +735,7 @@ vl_compositor_convert_rgb_to_yuv(struct vl_compositor_state *s,
 
    vl_compositor_clear_layers(s);
 
-   set_rgb_to_yuv_layer(s, c, 0, sv, src_rect, NULL, true, full_range);
+   set_rgb_to_yuv_layer(s, c, 0, sv, src_rect, NULL, true);
    vl_compositor_set_layer_dst_area(s, 0, dst_rect);
    vl_compositor_render(s, c, dst_surfaces[0], NULL, false);
 
@@ -758,7 +744,7 @@ vl_compositor_convert_rgb_to_yuv(struct vl_compositor_state *s,
       dst_rect->y1 /= 2;
    }
 
-   set_rgb_to_yuv_layer(s, c, 0, sv, src_rect, NULL, false, full_range);
+   set_rgb_to_yuv_layer(s, c, 0, sv, src_rect, NULL, false);
    vl_compositor_set_layer_dst_area(s, 0, dst_rect);
    vl_compositor_render(s, c, dst_surfaces[1], NULL, false);
    pipe_sampler_view_reference(&sv, NULL);
diff --git a/src/gallium/auxiliary/vl/vl_compositor.h b/src/gallium/auxiliary/vl/vl_compositor.h
index b3873ae8d5cf7..5fd2410bfa144 100644
--- a/src/gallium/auxiliary/vl/vl_compositor.h
+++ b/src/gallium/auxiliary/vl/vl_compositor.h
@@ -304,8 +304,7 @@ vl_compositor_convert_rgb_to_yuv(struct vl_compositor_state *state,
                                  struct pipe_resource *src_res,
                                  struct pipe_video_buffer *dst,
                                  struct u_rect *src_rect,
-                                 struct u_rect *dst_rect,
-                                 bool full_range);
+                                 struct u_rect *dst_rect);
 
 /*@}*/
 
diff --git a/src/gallium/frontends/va/postproc.c b/src/gallium/frontends/va/postproc.c
index dce3d3618c000..d5cdfb77c454e 100644
--- a/src/gallium/frontends/va/postproc.c
+++ b/src/gallium/frontends/va/postproc.c
@@ -231,8 +231,7 @@ static VAStatus vlVaPostProcBlit(vlVaDriver *drv, vlVaContext *context,
                                  const VARectangle *dst_region,
                                  struct pipe_video_buffer *src,
                                  struct pipe_video_buffer *dst,
-                                 enum vl_compositor_deinterlace deinterlace,
-                                 bool full_range)
+                                 enum vl_compositor_deinterlace deinterlace)
 {
    struct pipe_surface **src_surfaces;
    struct pipe_surface **dst_surfaces;
@@ -289,7 +288,7 @@ static VAStatus vlVaPostProcBlit(vlVaDriver *drv, vlVaContext *context,
    if (grab) {
       vl_compositor_convert_rgb_to_yuv(&drv->cstate, &drv->compositor, 0,
                                        ((struct vl_video_buffer *)src)->resources[0],
-                                       dst, &src_rect, &dst_rect, full_range);
+                                       dst, &src_rect, &dst_rect);
 
       return VA_STATUS_SUCCESS;
    }
@@ -589,6 +588,5 @@ vlVaHandleVAProcPipelineParameterBufferType(vlVaDriver *drv, vlVaContext *contex
                                     src, context->target, deinterlace);
    else
       return vlVaPostProcBlit(drv, context, src_region, dst_region,
-                              src, context->target, deinterlace,
-                              dst_surface->full_range);
+                              src, context->target, deinterlace);
 }
-- 
GitLab


From 11c19815f6bd7eec9c3ac967f52de4e88b9defbd Mon Sep 17 00:00:00 2001
From: David Rosca <nowrep@gmail.com>
Date: Thu, 17 Aug 2023 14:47:10 +0200
Subject: [PATCH 4/4] frontends/va: Add BT.709 as supported postproc color
 standard

---
 src/gallium/frontends/va/surface.c | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

diff --git a/src/gallium/frontends/va/surface.c b/src/gallium/frontends/va/surface.c
index 98053237b294e..2328fcbdbef51 100644
--- a/src/gallium/frontends/va/surface.c
+++ b/src/gallium/frontends/va/surface.c
@@ -1367,11 +1367,13 @@ vlVaQueryVideoProcFilterCaps(VADriverContextP ctx, VAContextID context,
 }
 
 static VAProcColorStandardType vpp_input_color_standards[] = {
-   VAProcColorStandardBT601
+   VAProcColorStandardBT601,
+   VAProcColorStandardBT709
 };
 
 static VAProcColorStandardType vpp_output_color_standards[] = {
-   VAProcColorStandardBT601
+   VAProcColorStandardBT601,
+   VAProcColorStandardBT709
 };
 
 VAStatus
-- 
GitLab

