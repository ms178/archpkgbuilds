From c6314308b48589b03c52b178f5b1eab17967b26e Mon Sep 17 00:00:00 2001
From: Rob Clark <robdclark@chromium.org>
Date: Fri, 17 Mar 2023 13:56:39 -0700
Subject: [PATCH 1/3] util: Clarify os_time's time base on linux

Already vk-common helpers and various drivers implicitly depend on this
via timeouts in drm core and driver ioctls which use CLOCK_MONOTONIC.
So we might as well document this, lest someone think it a good idea to
switch to a different time-base and subtly break things.

Acked-by: Matt Turner <mattst88@gmail.com>
Signed-off-by: Rob Clark <robdclark@chromium.org>
---
 src/util/os_time.h | 16 ++++++++++++++--
 1 file changed, 14 insertions(+), 2 deletions(-)

diff --git a/src/util/os_time.h b/src/util/os_time.h
index 6ca37eac7693f..27f6ccd298f19 100644
--- a/src/util/os_time.h
+++ b/src/util/os_time.h
@@ -48,14 +48,22 @@ extern "C" {
 #define OS_TIMEOUT_INFINITE 0xffffffffffffffffull
 
 /*
- * Get the current time in nanoseconds from an unknown base.
+ * Get the current time in nanoseconds.
+ *
+ * On linux the time clock-id/time-base used is CLOCK_MONOTONIC.  (Various
+ * drm and driver ioctls which deal with timeouts require this.)  In other
+ * cases the base is undefined.
  */
 int64_t
 os_time_get_nano(void);
 
 
 /*
- * Get the current time in microseconds from an unknown base.
+ * Get the current time in microseconds.
+ *
+ * On linux the time clock-id/time-base used is CLOCK_MONOTONIC.  (Various
+ * drm and driver ioctls which deal with timeouts require this.)  In other
+ * cases the base is undefined.
  */
 static inline int64_t
 os_time_get(void)
@@ -105,6 +113,10 @@ os_time_timeout(int64_t start,
  * os_time_get_nano() must be monotonic.
  * OS_TIMEOUT_INFINITE is passed through unchanged. If the calculation
  * overflows, OS_TIMEOUT_INFINITE is returned.
+ *
+ * On linux the time clock-id/time-base used is CLOCK_MONOTONIC.  (Various
+ * drm and driver ioctls which deal with timeouts require this.)  In other
+ * cases the base is undefined.
  */
 int64_t
 os_time_get_absolute_timeout(uint64_t timeout);
-- 
GitLab


From 738bf37aeda8c498040b9e6f6cecba8e5831be97 Mon Sep 17 00:00:00 2001
From: Rob Clark <robdclark@chromium.org>
Date: Thu, 16 Mar 2023 13:33:32 -0700
Subject: [PATCH 2/3] vk+util: Add our own syncobj ioctl wrappers

Otherwise, extending the ioctls would require updating libdrm, and then
bumping libdrm version dependency.  This is pain we could just choose
not to have.

Reviewed-by: Matt Turner <mattst88@gmail.com>
Signed-off-by: Rob Clark <robdclark@chromium.org>
---
 src/util/libdrm.c                   | 74 +++++++++++++++++++++++++++++
 src/util/libdrm.h                   |  9 ++++
 src/util/meson.build                |  5 ++
 src/vulkan/runtime/vk_drm_syncobj.c | 28 +++++------
 4 files changed, 102 insertions(+), 14 deletions(-)
 create mode 100644 src/util/libdrm.c

diff --git a/src/util/libdrm.c b/src/util/libdrm.c
new file mode 100644
index 0000000000000..a1d61202b9b00
--- /dev/null
+++ b/src/util/libdrm.c
@@ -0,0 +1,74 @@
+/*
+ * Copyright Â© 2023 Google, Inc.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+#include <errno.h>
+
+#include "drm-uapi/drm.h"
+#include "util/libdrm.h"
+
+int
+drm_syncobj_wait(int fd, uint32_t *handles, unsigned num_handles,
+                 int64_t timeout_nsec, unsigned flags,
+                 uint32_t *first_signaled)
+{
+   struct drm_syncobj_wait args = {
+         .handles = (uintptr_t)handles,
+         .timeout_nsec = timeout_nsec,
+         .count_handles = num_handles,
+         .flags = flags,
+   };
+   int ret;
+
+   ret = drmIoctl(fd, DRM_IOCTL_SYNCOBJ_WAIT, &args);
+   if (ret < 0)
+       return -errno;
+
+   if (first_signaled)
+       *first_signaled = args.first_signaled;
+
+   return ret;
+}
+
+int
+drm_syncobj_timeline_wait(int fd, uint32_t *handles, uint64_t *points,
+                          unsigned num_handles,
+                          int64_t timeout_nsec, unsigned flags,
+                          uint32_t *first_signaled)
+{
+   struct drm_syncobj_timeline_wait args = {
+         .handles = (uintptr_t)handles,
+         .points = (uintptr_t)points,
+         .timeout_nsec = timeout_nsec,
+         .count_handles = num_handles,
+         .flags = flags,
+   };
+   int ret;
+
+   ret = drmIoctl(fd, DRM_IOCTL_SYNCOBJ_TIMELINE_WAIT, &args);
+   if (ret < 0)
+       return -errno;
+
+   if (first_signaled)
+       *first_signaled = args.first_signaled;
+   return ret;
+}
diff --git a/src/util/libdrm.h b/src/util/libdrm.h
index 3ba9c396300b0..a5d8f4688c561 100644
--- a/src/util/libdrm.h
+++ b/src/util/libdrm.h
@@ -138,3 +138,12 @@ static inline void
 drmFreeVersion(struct _drmVersion *v) {}
 
 #endif
+
+int drm_syncobj_wait(int fd, uint32_t *handles, unsigned num_handles,
+                     int64_t timeout_nsec, unsigned flags,
+                     uint32_t *first_signaled);
+
+int drm_syncobj_timeline_wait(int fd, uint32_t *handles, uint64_t *points,
+                              unsigned num_handles,
+                              int64_t timeout_nsec, unsigned flags,
+                              uint32_t *first_signaled);
diff --git a/src/util/meson.build b/src/util/meson.build
index eb88f235c470e..2ddcf9830689e 100644
--- a/src/util/meson.build
+++ b/src/util/meson.build
@@ -266,6 +266,11 @@ if with_gpuvis
   )
 endif
 
+if dep_libdrm.found()
+  files_mesa_util += 'libdrm.c'
+  deps_for_libmesa_util += dep_libdrm
+endif
+
 u_trace_py = files('perf/u_trace.py')
 
 libmesa_util_sse41 = static_library(
diff --git a/src/vulkan/runtime/vk_drm_syncobj.c b/src/vulkan/runtime/vk_drm_syncobj.c
index 38da5e123cb6c..597db70bbb705 100644
--- a/src/vulkan/runtime/vk_drm_syncobj.c
+++ b/src/vulkan/runtime/vk_drm_syncobj.c
@@ -24,10 +24,10 @@
 #include "vk_drm_syncobj.h"
 
 #include <sched.h>
-#include <xf86drm.h>
 
 #include "drm-uapi/drm.h"
 
+#include "util/libdrm.h"
 #include "util/os_time.h"
 
 #include "vk_device.h"
@@ -260,21 +260,21 @@ vk_drm_syncobj_wait_many(struct vk_device *device,
        * syncobjs because the non-timeline wait doesn't support
        * DRM_SYNCOBJ_WAIT_FLAGS_WAIT_AVAILABLE.
        */
-      err = drmSyncobjTimelineWait(device->drm_fd, handles, wait_values,
-                                   wait_count, abs_timeout_ns,
-                                   syncobj_wait_flags |
-                                   DRM_SYNCOBJ_WAIT_FLAGS_WAIT_AVAILABLE,
-                                   NULL /* first_signaled */);
+      err = drm_syncobj_timeline_wait(device->drm_fd, handles, wait_values,
+                                      wait_count, abs_timeout_ns,
+                                      syncobj_wait_flags |
+                                      DRM_SYNCOBJ_WAIT_FLAGS_WAIT_AVAILABLE,
+                                      NULL /* first_signaled */);
    } else if (has_timeline) {
-      err = drmSyncobjTimelineWait(device->drm_fd, handles, wait_values,
-                                   wait_count, abs_timeout_ns,
-                                   syncobj_wait_flags,
-                                   NULL /* first_signaled */);
+      err = drm_syncobj_timeline_wait(device->drm_fd, handles, wait_values,
+                                      wait_count, abs_timeout_ns,
+                                      syncobj_wait_flags,
+                                      NULL /* first_signaled */);
    } else {
-      err = drmSyncobjWait(device->drm_fd, handles,
-                           wait_count, abs_timeout_ns,
-                           syncobj_wait_flags,
-                           NULL /* first_signaled */);
+      err = drm_syncobj_wait(device->drm_fd, handles,
+                             wait_count, abs_timeout_ns,
+                             syncobj_wait_flags,
+                             NULL /* first_signaled */);
    }
 
    STACK_ARRAY_FINISH(handles);
-- 
GitLab


From 23a8f4ce9974e28f4c63a8e360dbdfbbd7d50202 Mon Sep 17 00:00:00 2001
From: Rob Clark <robdclark@chromium.org>
Date: Thu, 16 Mar 2023 14:13:27 -0700
Subject: [PATCH 3/3] vk+util: Add syncobj deadline

Reviewed-by: Matt Turner <mattst88@gmail.com>
Signed-off-by: Rob Clark <robdclark@chromium.org>
---
 src/util/libdrm.c                   | 43 +++++++++++++++++++++++++++--
 src/util/libdrm.h                   |  6 ++--
 src/vulkan/runtime/vk_drm_syncobj.c | 14 ++++++++--
 src/vulkan/runtime/vk_fence.c       |  3 ++
 src/vulkan/runtime/vk_semaphore.c   |  3 ++
 src/vulkan/runtime/vk_sync.h        |  9 ++++++
 6 files changed, 71 insertions(+), 7 deletions(-)

diff --git a/src/util/libdrm.c b/src/util/libdrm.c
index a1d61202b9b00..84f7cb32fd489 100644
--- a/src/util/libdrm.c
+++ b/src/util/libdrm.c
@@ -22,14 +22,42 @@
  */
 
 #include <errno.h>
+#include <stdbool.h>
+#include <time.h>
 
 #include "drm-uapi/drm.h"
 #include "util/libdrm.h"
 
+static bool
+has_syncobj_deadline(int fd)
+{
+   static int has_deadline = -1;
+
+   if (has_deadline != -1)
+      return has_deadline;
+
+   /*
+    * Do a dummy wait with no handles to probe whether kernel supports the
+    * new _WAIT_DEADLINE flag
+    */
+   struct drm_syncobj_wait args = {
+         .count_handles = 0,
+         .flags = DRM_SYNCOBJ_WAIT_FLAGS_WAIT_DEADLINE,
+   };
+   int ret;
+
+   ret = drmIoctl(fd, DRM_IOCTL_SYNCOBJ_WAIT, &args);
+
+   has_deadline = !ret;
+
+   return has_deadline;
+}
+
 int
 drm_syncobj_wait(int fd, uint32_t *handles, unsigned num_handles,
                  int64_t timeout_nsec, unsigned flags,
-                 uint32_t *first_signaled)
+                 uint32_t *first_signaled,
+                 int64_t deadline_nsec)
 {
    struct drm_syncobj_wait args = {
          .handles = (uintptr_t)handles,
@@ -39,6 +67,11 @@ drm_syncobj_wait(int fd, uint32_t *handles, unsigned num_handles,
    };
    int ret;
 
+   if (deadline_nsec && has_syncobj_deadline(fd)) {
+      args.flags |= DRM_SYNCOBJ_WAIT_FLAGS_WAIT_DEADLINE;
+      args.deadline_nsec = deadline_nsec;
+   }
+
    ret = drmIoctl(fd, DRM_IOCTL_SYNCOBJ_WAIT, &args);
    if (ret < 0)
        return -errno;
@@ -53,7 +86,8 @@ int
 drm_syncobj_timeline_wait(int fd, uint32_t *handles, uint64_t *points,
                           unsigned num_handles,
                           int64_t timeout_nsec, unsigned flags,
-                          uint32_t *first_signaled)
+                          uint32_t *first_signaled,
+                          int64_t deadline_nsec)
 {
    struct drm_syncobj_timeline_wait args = {
          .handles = (uintptr_t)handles,
@@ -64,6 +98,11 @@ drm_syncobj_timeline_wait(int fd, uint32_t *handles, uint64_t *points,
    };
    int ret;
 
+   if (deadline_nsec && has_syncobj_deadline(fd)) {
+      args.flags |= DRM_SYNCOBJ_WAIT_FLAGS_WAIT_DEADLINE;
+      args.deadline_nsec = deadline_nsec;
+   }
+
    ret = drmIoctl(fd, DRM_IOCTL_SYNCOBJ_TIMELINE_WAIT, &args);
    if (ret < 0)
        return -errno;
diff --git a/src/util/libdrm.h b/src/util/libdrm.h
index a5d8f4688c561..9288d4f250b6f 100644
--- a/src/util/libdrm.h
+++ b/src/util/libdrm.h
@@ -141,9 +141,11 @@ drmFreeVersion(struct _drmVersion *v) {}
 
 int drm_syncobj_wait(int fd, uint32_t *handles, unsigned num_handles,
                      int64_t timeout_nsec, unsigned flags,
-                     uint32_t *first_signaled);
+                     uint32_t *first_signaled,
+                     int64_t deadline_ns);
 
 int drm_syncobj_timeline_wait(int fd, uint32_t *handles, uint64_t *points,
                               unsigned num_handles,
                               int64_t timeout_nsec, unsigned flags,
-                              uint32_t *first_signaled);
+                              uint32_t *first_signaled,
+                              int64_t deadline_ns);
diff --git a/src/vulkan/runtime/vk_drm_syncobj.c b/src/vulkan/runtime/vk_drm_syncobj.c
index 597db70bbb705..0f0c6f14ff28c 100644
--- a/src/vulkan/runtime/vk_drm_syncobj.c
+++ b/src/vulkan/runtime/vk_drm_syncobj.c
@@ -221,6 +221,11 @@ vk_drm_syncobj_wait_many(struct vk_device *device,
                                      wait_flags, abs_timeout_ns);
    }
 
+   int64_t deadline_nsec = 0;
+
+   if (wait_flags & VK_SYNC_WAIT_BOOST)
+      deadline_nsec = os_time_get_absolute_timeout(0);
+
    /* Syncobj timeouts are signed */
    abs_timeout_ns = MIN2(abs_timeout_ns, (uint64_t)INT64_MAX);
 
@@ -264,17 +269,20 @@ vk_drm_syncobj_wait_many(struct vk_device *device,
                                       wait_count, abs_timeout_ns,
                                       syncobj_wait_flags |
                                       DRM_SYNCOBJ_WAIT_FLAGS_WAIT_AVAILABLE,
-                                      NULL /* first_signaled */);
+                                      NULL /* first_signaled */,
+                                      deadline_nsec);
    } else if (has_timeline) {
       err = drm_syncobj_timeline_wait(device->drm_fd, handles, wait_values,
                                       wait_count, abs_timeout_ns,
                                       syncobj_wait_flags,
-                                      NULL /* first_signaled */);
+                                      NULL /* first_signaled */,
+                                      deadline_nsec);
    } else {
       err = drm_syncobj_wait(device->drm_fd, handles,
                              wait_count, abs_timeout_ns,
                              syncobj_wait_flags,
-                             NULL /* first_signaled */);
+                             NULL /* first_signaled */,
+                             deadline_nsec);
    }
 
    STACK_ARRAY_FINISH(handles);
diff --git a/src/vulkan/runtime/vk_fence.c b/src/vulkan/runtime/vk_fence.c
index 77cb5a3a47f53..9200ea91db2e3 100644
--- a/src/vulkan/runtime/vk_fence.c
+++ b/src/vulkan/runtime/vk_fence.c
@@ -279,6 +279,9 @@ vk_common_WaitForFences(VkDevice _device,
    if (!waitAll)
       wait_flags |= VK_SYNC_WAIT_ANY;
 
+   if (timeout)
+      wait_flags |= VK_SYNC_WAIT_BOOST;
+
    VkResult result = vk_sync_wait_many(device, fenceCount, waits,
                                        wait_flags, abs_timeout_ns);
 
diff --git a/src/vulkan/runtime/vk_semaphore.c b/src/vulkan/runtime/vk_semaphore.c
index 7044ed9aea27d..b7d835880aa1b 100644
--- a/src/vulkan/runtime/vk_semaphore.c
+++ b/src/vulkan/runtime/vk_semaphore.c
@@ -358,6 +358,9 @@ vk_common_WaitSemaphores(VkDevice _device,
    if (pWaitInfo->flags & VK_SEMAPHORE_WAIT_ANY_BIT)
       wait_flags |= VK_SYNC_WAIT_ANY;
 
+   if (timeout)
+      wait_flags |= VK_SYNC_WAIT_BOOST;
+
    VkResult result = vk_sync_wait_many(device, wait_count, waits,
                                        wait_flags, abs_timeout_ns);
 
diff --git a/src/vulkan/runtime/vk_sync.h b/src/vulkan/runtime/vk_sync.h
index 15d85dc92536d..f1bdec8f5c0e7 100644
--- a/src/vulkan/runtime/vk_sync.h
+++ b/src/vulkan/runtime/vk_sync.h
@@ -150,6 +150,15 @@ enum vk_sync_wait_flags {
     * possible.
     */
    VK_SYNC_WAIT_ANY        = (1 << 1),
+
+   /** Set if DRM_SYNCOBJ_WAIT_FLAGS_WAIT_DEADLINE flag should be set
+    *
+    * This is set for WaitSemaphores/WaitForFences with a non-zero timeout
+    * to give a hint to the kernel that the application is blocking on the
+    * GPU.  Waiting on a non-signaled fence can trigger the kernel to boost
+    * the GPU frequency so that the fence is signaled sooner.
+    */
+   VK_SYNC_WAIT_BOOST      = (1 << 2),
 };
 
 struct vk_sync_type {
-- 
GitLab

