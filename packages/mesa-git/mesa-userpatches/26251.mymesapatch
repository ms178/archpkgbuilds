From a02a0955ea1f833c6a5314aa374282635e5d01bb Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Fri, 5 Jan 2024 17:37:33 +0000
Subject: [PATCH 1/5] nir: add mqsad_4x8, fshr and nir_opt_mqsad

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
---
 src/compiler/nir/meson.build               |   1 +
 src/compiler/nir/nir.h                     |   5 +
 src/compiler/nir/nir_lower_alu_width.c     |   1 +
 src/compiler/nir/nir_opcodes.py            |  14 ++
 src/compiler/nir/nir_opt_algebraic.py      |   7 +
 src/compiler/nir/nir_opt_mqsad.c           | 146 +++++++++++++++++++++
 src/compiler/nir/tests/algebraic_tests.cpp |  77 ++++++++++-
 7 files changed, 245 insertions(+), 6 deletions(-)
 create mode 100644 src/compiler/nir/nir_opt_mqsad.c

diff --git a/src/compiler/nir/meson.build b/src/compiler/nir/meson.build
index 8a0ba5951ca22..3201ac38cebc7 100644
--- a/src/compiler/nir/meson.build
+++ b/src/compiler/nir/meson.build
@@ -257,6 +257,7 @@ files_libnir = files(
   'nir_opt_memcpy.c',
   'nir_opt_move.c',
   'nir_opt_move_discards_to_top.c',
+  'nir_opt_mqsad.c',
   'nir_opt_non_uniform_access.c',
   'nir_opt_offsets.c',
   'nir_opt_peephole_select.c',
diff --git a/src/compiler/nir/nir.h b/src/compiler/nir/nir.h
index 52d51b0f7f02e..153fcd16699cc 100644
--- a/src/compiler/nir/nir.h
+++ b/src/compiler/nir/nir.h
@@ -3902,6 +3902,9 @@ typedef struct nir_shader_compiler_options {
    bool has_rotate16;
    bool has_rotate32;
 
+   /** Backend supports fshr */
+   bool has_fshr32;
+
    /** Backend supports ternary addition */
    bool has_iadd3;
 
@@ -6404,6 +6407,8 @@ bool nir_opt_gcm(nir_shader *shader, bool value_number);
 
 bool nir_opt_idiv_const(nir_shader *shader, unsigned min_bit_size);
 
+bool nir_opt_mqsad(nir_shader *shader);
+
 typedef enum {
    nir_opt_if_optimize_phi_true_false = (1 << 0),
    nir_opt_if_avoid_64bit_phis = (1 << 1),
diff --git a/src/compiler/nir/nir_lower_alu_width.c b/src/compiler/nir/nir_lower_alu_width.c
index 0d3f4e9feb346..b8ee78a200582 100644
--- a/src/compiler/nir/nir_lower_alu_width.c
+++ b/src/compiler/nir/nir_lower_alu_width.c
@@ -232,6 +232,7 @@ lower_alu_instr_width(nir_builder *b, nir_instr *instr, void *_data)
    case nir_op_unpack_snorm_4x8:
    case nir_op_unpack_unorm_2x16:
    case nir_op_unpack_snorm_2x16:
+   case nir_op_mqsad_4x8:
       /* There is no scalar version of these ops, unless we were to break it
        * down to bitshifts and math (which is definitely not intended).
        */
diff --git a/src/compiler/nir/nir_opcodes.py b/src/compiler/nir/nir_opcodes.py
index ef8c8fe28feea..3c9aa73e04707 100644
--- a/src/compiler/nir/nir_opcodes.py
+++ b/src/compiler/nir/nir_opcodes.py
@@ -896,6 +896,12 @@ opcode("uror", 0, tuint, [0, 0], [tuint, tuint32], False, "", """
          (src0 << (-src1 & rotate_mask));
 """)
 
+opcode("fshr", 0, tuint32, [0, 0, 0], [tuint32, tuint32, tuint32], False, "", """
+   uint32_t rotate_mask = sizeof(src0) * 8 - 1;
+   dst = (src1 >> (src1 & rotate_mask)) |
+         (src0 << (-src1 & rotate_mask));
+""")
+
 bitwise_description = """
 Bitwise {0}, also used as a boolean {0} for hardware supporting integers.
 """
@@ -1141,6 +1147,14 @@ then add them together. There is also a third source which is a 32-bit unsigned
 integer and added to the result.
 """)
 
+opcode("mqsad_4x8", 4, tuint32, [1, 2, 4], [tuint32, tuint32, tuint32], False, "", """
+uint64_t src = src1.x | ((uint64_t)src1.y << 32);
+dst.x = msad(src0.x, src, src2.x);
+dst.y = msad(src0.x, src >> 8, src2.y);
+dst.z = msad(src0.x, src >> 16, src2.z);
+dst.w = msad(src0.x, src >> 24, src2.w);
+""")
+
 # Combines the first component of each input to make a 3-component vector.
 
 triop_horiz("vec3", 3, 1, 1, 1, """
diff --git a/src/compiler/nir/nir_opt_algebraic.py b/src/compiler/nir/nir_opt_algebraic.py
index 9bb8b1c7dcf1d..3bc83dc5e7a82 100644
--- a/src/compiler/nir/nir_opt_algebraic.py
+++ b/src/compiler/nir/nir_opt_algebraic.py
@@ -1418,6 +1418,13 @@ optimizations.extend([
    (('uror@32', a, b), ('ior', ('ushr', a, b), ('ishl', a, ('isub', 32, b))), '!options->has_rotate32'),
    (('uror@64', a, b), ('ior', ('ushr', a, b), ('ishl', a, ('isub', 64, b)))),
 
+   (('bitfield_select', 0xff000000, ('ishl', 'b@32', 24), ('ushr', a, 8)), ('fshr', b, a, 8), 'options->has_fshr32'),
+   (('bitfield_select', 0xffff0000, ('ishl', 'b@32', 16), ('extract_u16', a, 1)), ('fshr', b, a, 16), 'options->has_fshr32'),
+   (('bitfield_select', 0xffffff00, ('ishl', 'b@32', 8), ('extract_u8', a, 3)), ('fshr', b, a, 24), 'options->has_fshr32'),
+   (('ior', ('ishl', 'b@32', 24), ('ushr', a, 8)), ('fshr', b, a, 8), 'options->has_fshr32'),
+   (('ior', ('ishl', 'b@32', 16), ('extract_u16', a, 1)), ('fshr', b, a, 16), 'options->has_fshr32'),
+   (('ior', ('ishl', 'b@32', 8), ('extract_u8', a, 3)), ('fshr', b, a, 24), 'options->has_fshr32'),
+
    # bfi(X, a, b) = (b & ~X) | (a & X)
    # If X = ~0: (b & 0) | (a & 0xffffffff) = a
    # If X = 0:  (b & 0xffffffff) | (a & 0) = b
diff --git a/src/compiler/nir/nir_opt_mqsad.c b/src/compiler/nir/nir_opt_mqsad.c
new file mode 100644
index 0000000000000..7c8b3d9c40a25
--- /dev/null
+++ b/src/compiler/nir/nir_opt_mqsad.c
@@ -0,0 +1,146 @@
+/*
+ * Copyright 2023 Valve Corporation
+ * SPDX-License-Identifier: MIT
+ */
+#include "nir.h"
+#include "nir_builder.h"
+#include "nir_worklist.h"
+
+/*
+ * This pass recognizes certain patterns of rotates and nir_op_msad_4x8 and replaces it
+ * with a single nir_op_mqsad_4x8 instruction.
+ */
+
+struct mqsad {
+   nir_scalar ref;
+   nir_scalar src[2];
+
+   nir_scalar accum[4];
+   nir_alu_instr *msad[4];
+   unsigned first_msad_index;
+   uint8_t mask;
+};
+
+static bool
+is_mqsad_compatible(struct mqsad *mqsad, nir_scalar ref, nir_scalar src0, nir_scalar src1,
+                    unsigned idx, nir_alu_instr *msad)
+{
+   if (!nir_scalar_equal(ref, mqsad->ref) || !nir_scalar_equal(src0, mqsad->src[0]))
+      return false;
+   if ((mqsad->mask & 0b1110) && idx && !nir_scalar_equal(src1, mqsad->src[1]))
+      return false;
+
+   /* Ensure that this MSAD doesn't depend on any previous MSAD. */
+   nir_instr_worklist *wl = nir_instr_worklist_create();
+   nir_instr_worklist_add_ssa_srcs(wl, &msad->instr);
+   nir_foreach_instr_in_worklist(instr, wl) {
+      if (instr->block != msad->instr.block || instr->index < mqsad->first_msad_index)
+         continue;
+
+      for (unsigned i = 0; i < 4; i++) {
+         if (instr == &mqsad->msad[i]->instr) {
+            nir_instr_worklist_destroy(wl);
+            return false;
+         }
+      }
+
+      nir_instr_worklist_add_ssa_srcs(wl, instr);
+   }
+   nir_instr_worklist_destroy(wl);
+
+   return true;
+}
+
+static void
+parse_msad(nir_alu_instr *msad, struct mqsad *mqsad)
+{
+   if (msad->def.num_components != 1)
+      return;
+
+   nir_scalar msad_s = nir_get_scalar(&msad->def, 0);
+   nir_scalar ref = nir_scalar_chase_alu_src(msad_s, 0);
+   nir_scalar accum = nir_scalar_chase_alu_src(msad_s, 2);
+
+   unsigned idx = 0;
+   nir_scalar src0 = nir_scalar_chase_alu_src(msad_s, 1);
+   nir_scalar src1;
+   if (nir_scalar_is_alu(src0) && nir_scalar_alu_op(src0) == nir_op_fshr) {
+      nir_scalar amount_s = nir_scalar_chase_alu_src(src0, 2);
+      uint32_t amount = nir_scalar_is_const(amount_s) ? nir_scalar_as_uint(amount_s) : 0;
+      if (amount == 8 || amount == 16 || amount == 24) {
+         idx = amount / 8;
+         src1 = nir_scalar_chase_alu_src(src0, 0);
+         src0 = nir_scalar_chase_alu_src(src0, 1);
+      }
+   }
+
+   if (mqsad->mask && !is_mqsad_compatible(mqsad, ref, src0, src1, idx, msad))
+      memset(mqsad, 0, sizeof(*mqsad));
+
+   /* Add this instruction to the in-progress MQSAD. */
+   mqsad->ref = ref;
+   mqsad->src[0] = src0;
+   if (idx)
+      mqsad->src[1] = src1;
+
+   mqsad->accum[idx] = accum;
+   mqsad->msad[idx] = msad;
+   if (!mqsad->mask)
+      mqsad->first_msad_index = msad->instr.index;
+   mqsad->mask |= 1 << idx;
+}
+
+static void
+create_msad(nir_builder *b, struct mqsad *mqsad)
+{
+   nir_def *mqsad_def = nir_mqsad_4x8(b, nir_channel(b, mqsad->ref.def, mqsad->ref.comp),
+                                      nir_vec_scalars(b, mqsad->src, 2),
+                                      nir_vec_scalars(b, mqsad->accum, 4));
+
+   for (unsigned i = 0; i < 4; i++)
+      nir_def_rewrite_uses(&mqsad->msad[i]->def, nir_channel(b, mqsad_def, i));
+
+   memset(mqsad, 0, sizeof(*mqsad));
+}
+
+bool
+nir_opt_mqsad(nir_shader *shader)
+{
+   bool progress = false;
+   nir_foreach_function_impl(impl, shader) {
+      bool progress_impl = false;
+
+      nir_metadata_require(impl, nir_metadata_instr_index);
+
+      nir_foreach_block(block, impl) {
+         struct mqsad mqsad;
+         memset(&mqsad, 0, sizeof(mqsad));
+
+         nir_foreach_instr(instr, block) {
+            if (instr->type != nir_instr_type_alu)
+               continue;
+
+            nir_alu_instr *alu = nir_instr_as_alu(instr);
+            if (alu->op != nir_op_msad_4x8)
+               continue;
+
+            parse_msad(alu, &mqsad);
+
+            if (mqsad.mask == 0xf) {
+               nir_builder b = nir_builder_at(nir_before_instr(instr));
+               create_msad(&b, &mqsad);
+               progress_impl = true;
+            }
+         }
+      }
+
+      if (progress_impl) {
+         nir_metadata_preserve(impl, nir_metadata_block_index | nir_metadata_dominance);
+         progress = true;
+      } else {
+         nir_metadata_preserve(impl, nir_metadata_block_index);
+      }
+   }
+
+   return progress;
+}
diff --git a/src/compiler/nir/tests/algebraic_tests.cpp b/src/compiler/nir/tests/algebraic_tests.cpp
index a6fcc660efade..b193b59315a85 100644
--- a/src/compiler/nir/tests/algebraic_tests.cpp
+++ b/src/compiler/nir/tests/algebraic_tests.cpp
@@ -37,6 +37,8 @@ protected:
 
    void test_2src_op(nir_op op, int64_t src0, int64_t src1);
 
+   void require_one_alu(nir_op op);
+
    nir_variable *res_var;
 };
 
@@ -85,6 +87,18 @@ void algebraic_test_base::test_2src_op(nir_op op, int64_t src0, int64_t src1)
    test_op(op, nir_imm_int(b, src0), nir_imm_int(b, src1), NULL, NULL, desc);
 }
 
+void algebraic_test_base::require_one_alu(nir_op op)
+{
+   unsigned count = 0;
+   nir_foreach_instr(instr, nir_start_block(b->impl)) {
+      if (instr->type == nir_instr_type_alu) {
+         ASSERT_TRUE(nir_instr_as_alu(instr)->op == op);
+         ASSERT_EQ(count, 0);
+         count++;
+      }
+   }
+}
+
 class nir_opt_algebraic_test : public algebraic_test_base {
 protected:
    virtual void run_pass() {
@@ -99,6 +113,13 @@ protected:
    }
 };
 
+class nir_opt_mqsad_test : public algebraic_test_base {
+protected:
+   virtual void run_pass() {
+      nir_opt_mqsad(b->shader);
+   }
+};
+
 TEST_F(nir_opt_algebraic_test, umod_pow2_src2)
 {
    for (int i = 0; i <= 9; i++)
@@ -162,14 +183,58 @@ TEST_F(nir_opt_algebraic_test, msad)
       nir_opt_dce(b->shader);
    }
 
-   unsigned count = 0;
-   nir_foreach_instr(instr, nir_start_block(b->impl)) {
-      if (instr->type == nir_instr_type_alu) {
-         ASSERT_TRUE(nir_instr_as_alu(instr)->op == nir_op_msad_4x8);
-         ASSERT_EQ(count, 0);
-         count++;
+   require_one_alu(nir_op_msad_4x8);
+}
+
+TEST_F(nir_opt_mqsad_test, mqsad)
+{
+   options.lower_bitfield_extract = true;
+   options.has_bfe = true;
+   options.has_msad = true;
+   options.has_fshr32 = true;
+
+   nir_def *ref = nir_load_var(b, nir_local_variable_create(b->impl, glsl_int_type(), "ref"));
+   nir_def *src = nir_load_var(b, nir_local_variable_create(b->impl, glsl_ivec_type(2), "src"));
+   nir_def *accum = nir_load_var(b, nir_local_variable_create(b->impl, glsl_ivec_type(4), "accum"));
+
+   nir_def *srcx = nir_channel(b, src, 0);
+   nir_def *srcy = nir_channel(b, src, 1);
+
+   nir_def *res[4];
+   for (unsigned i = 0; i < 4; i++) {
+      nir_def *src1 = srcx;
+      switch (i) {
+      case 0:
+         break;
+      case 1:
+         src1 = nir_bitfield_select(b, nir_imm_int(b, 0xff000000), nir_ishl_imm(b, srcy, 24),
+                                    nir_ushr_imm(b, srcx, 8));
+         break;
+      case 2:
+         src1 = nir_bitfield_select(b, nir_imm_int(b, 0xffff0000), nir_ishl_imm(b, srcy, 16),
+                                    nir_extract_u16(b, srcx, nir_imm_int(b, 1)));
+         break;
+      case 3:
+         src1 = nir_bitfield_select(b, nir_imm_int(b, 0xffffff00), nir_ishl_imm(b, srcy, 8),
+                                    nir_extract_u8_imm(b, srcx, 3));
+         break;
       }
+
+      res[i] = nir_msad_4x8(b, ref, src1, nir_channel(b, accum, i));
+   }
+
+   nir_store_var(b, nir_local_variable_create(b->impl, glsl_ivec_type(4), "res"), nir_vec(b, res, 4), 0xf);
+
+   while (nir_opt_algebraic(b->shader)) {
+      nir_opt_constant_folding(b->shader);
+      nir_opt_dce(b->shader);
    }
+
+   ASSERT_TRUE(nir_opt_mqsad(b->shader));
+   nir_copy_prop(b->shader);
+   nir_opt_dce(b->shader);
+
+   require_one_alu(nir_op_mqsad_4x8);
 }
 
 TEST_F(nir_opt_idiv_const_test, umod)
-- 
GitLab


From 52689bf84f4a20b6655a3cf36f3241f8310bbfb7 Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Fri, 5 Jan 2024 17:38:40 +0000
Subject: [PATCH 2/5] aco: implement mqsad_4x8 and fshr

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
---
 .../compiler/aco_instruction_selection.cpp    | 35 +++++++++++++++++++
 .../aco_instruction_selection_setup.cpp       |  1 +
 src/amd/compiler/aco_opcodes.py               |  2 +-
 3 files changed, 37 insertions(+), 1 deletion(-)

diff --git a/src/amd/compiler/aco_instruction_selection.cpp b/src/amd/compiler/aco_instruction_selection.cpp
index 9c52e67d41f37..a54f763f68c79 100644
--- a/src/amd/compiler/aco_instruction_selection.cpp
+++ b/src/amd/compiler/aco_instruction_selection.cpp
@@ -3425,6 +3425,41 @@ visit_alu_instr(isel_context* ctx, nir_alu_instr* instr)
       emit_vop3a_instruction(ctx, instr, aco_opcode::v_msad_u8, dst, false, 3u, true);
       break;
    }
+   case nir_op_mqsad_4x8: {
+      assert(dst.regClass() == v4);
+      Temp ref = get_alu_src(ctx, instr->src[0]);
+      Temp src = get_alu_src(ctx, instr->src[1], 2);
+      Temp accum = get_alu_src(ctx, instr->src[2], 4);
+      Builder::Result res = bld.vop3(aco_opcode::v_mqsad_u32_u8, Definition(dst), as_vgpr(ctx, src),
+                                     as_vgpr(ctx, ref), as_vgpr(ctx, accum));
+      res.instr->operands[0].setLateKill(true);
+      res.instr->operands[1].setLateKill(true);
+      res.instr->operands[2].setLateKill(true);
+      emit_split_vector(ctx, dst, 4);
+      break;
+   }
+   case nir_op_fshr: {
+      if (dst.regClass() == s1) {
+         Temp src = bld.pseudo(aco_opcode::p_create_vector, bld.def(s2),
+                               get_alu_src(ctx, instr->src[1]), get_alu_src(ctx, instr->src[0]));
+
+         Temp amount;
+         if (nir_src_is_const(instr->src[2].src)) {
+            amount = bld.copy(bld.def(s1), Operand::c32(nir_src_as_uint(instr->src[2].src) & 0x1f));
+         } else {
+            amount = bld.sop2(aco_opcode::s_and_b32, bld.def(s1), bld.def(s1, scc),
+                              get_alu_src(ctx, instr->src[2]), Operand::c32(0x1f));
+         }
+
+         Temp res = bld.sop2(aco_opcode::s_lshr_b64, bld.def(s2), bld.def(s1, scc), src, amount);
+         bld.pseudo(aco_opcode::p_extract_vector, Definition(dst), res, Operand::zero());
+      } else if (dst.regClass() == v1) {
+         emit_vop3a_instruction(ctx, instr, aco_opcode::v_alignbit_b32, dst, false, 3u);
+      } else {
+         isel_err(&instr->instr, "Unimplemented NIR instr bit size");
+      }
+      break;
+   }
    case nir_op_fquantize2f16: {
       Temp src = get_alu_src(ctx, instr->src[0]);
       Temp f16;
diff --git a/src/amd/compiler/aco_instruction_selection_setup.cpp b/src/amd/compiler/aco_instruction_selection_setup.cpp
index ec7a29e8d5502..ab689ba68ed16 100644
--- a/src/amd/compiler/aco_instruction_selection_setup.cpp
+++ b/src/amd/compiler/aco_instruction_selection_setup.cpp
@@ -393,6 +393,7 @@ init_context(isel_context* ctx, nir_shader* shader)
                case nir_op_frexp_exp:
                case nir_op_cube_amd:
                case nir_op_msad_4x8:
+               case nir_op_mqsad_4x8:
                case nir_op_udot_4x8_uadd:
                case nir_op_sdot_4x8_iadd:
                case nir_op_sudot_4x8_iadd:
diff --git a/src/amd/compiler/aco_opcodes.py b/src/amd/compiler/aco_opcodes.py
index 994c91596400a..2d6907aba0145 100644
--- a/src/amd/compiler/aco_opcodes.py
+++ b/src/amd/compiler/aco_opcodes.py
@@ -1172,7 +1172,7 @@ VOP3 = {
    ("v_qsad_pk_u16_u8",        False, False, dst(2), src(2, 1, 2), op(0x172, gfx8=0x1e5, gfx10=0x172, gfx11=0x23a)),
    ("v_mqsad_pk_u16_u8",       False, False, dst(2), src(2, 1, 2), op(0x173, gfx8=0x1e6, gfx10=0x173, gfx11=0x23b)),
    ("v_trig_preop_f64",        False, False, dst(2), src(2, 2), op(0x174, gfx8=0x292, gfx10=0x174, gfx11=0x32f), InstrClass.ValuDouble),
-   ("v_mqsad_u32_u8",          False, False, dst(4), src(2, 1, 4), op(gfx7=0x175, gfx8=0x1e7, gfx10=0x175, gfx11=0x23d)),
+   ("v_mqsad_u32_u8",          False, False, dst(4), src(2, 1, 4), op(gfx7=0x175, gfx8=0x1e7, gfx10=0x175, gfx11=0x23d), InstrClass.ValuQuarterRate32),
    ("v_mad_u64_u32",           False, False, dst(2, VCC), src(1, 1, 2), op(gfx7=0x176, gfx8=0x1e8, gfx10=0x176, gfx11=0x2fe), InstrClass.Valu64),
    ("v_mad_i64_i32",           False, False, dst(2, VCC), src(1, 1, 2), op(gfx7=0x177, gfx8=0x1e9, gfx10=0x177, gfx11=0x2ff), InstrClass.Valu64),
    ("v_mad_legacy_f16",        True, True, dst(1), src(1, 1, 1), op(gfx8=0x1ea, gfx10=-1)),
-- 
GitLab


From a4a729d085ad677082c0334640d858f54794007d Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Fri, 5 Jan 2024 17:40:25 +0000
Subject: [PATCH 3/5] ac/llvm: implement mqsad_4x8 and fshr

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
---
 src/amd/llvm/ac_nir_to_llvm.c | 43 ++++++++++-------------------------
 1 file changed, 12 insertions(+), 31 deletions(-)

diff --git a/src/amd/llvm/ac_nir_to_llvm.c b/src/amd/llvm/ac_nir_to_llvm.c
index ea2683b11c2f8..5f4288471f1b9 100644
--- a/src/amd/llvm/ac_nir_to_llvm.c
+++ b/src/amd/llvm/ac_nir_to_llvm.c
@@ -542,41 +542,11 @@ static bool visit_alu(struct ac_nir_context *ctx, const nir_alu_instr *instr)
 {
    LLVMValueRef src[16], result = NULL;
    unsigned num_components = instr->def.num_components;
-   unsigned src_components;
    LLVMTypeRef def_type = get_def_type(ctx, &instr->def);
 
    assert(nir_op_infos[instr->op].num_inputs <= ARRAY_SIZE(src));
-   switch (instr->op) {
-   case nir_op_vec2:
-   case nir_op_vec3:
-   case nir_op_vec4:
-   case nir_op_vec5:
-   case nir_op_vec8:
-   case nir_op_vec16:
-   case nir_op_unpack_32_4x8:
-   case nir_op_unpack_32_2x16:
-   case nir_op_unpack_64_2x32:
-   case nir_op_unpack_64_4x16:
-      src_components = 1;
-      break;
-   case nir_op_pack_snorm_2x16:
-   case nir_op_pack_unorm_2x16:
-   case nir_op_pack_uint_2x16:
-   case nir_op_pack_sint_2x16:
-      src_components = 2;
-      break;
-   case nir_op_cube_amd:
-      src_components = 3;
-      break;
-   case nir_op_pack_32_4x8:
-      src_components = 4;
-      break;
-   default:
-      src_components = num_components;
-      break;
-   }
    for (unsigned i = 0; i < nir_op_infos[instr->op].num_inputs; i++)
-      src[i] = get_alu_src(ctx, instr->src[i], src_components);
+      src[i] = get_alu_src(ctx, instr->src[i], nir_ssa_alu_instr_src_components(instr, i));
 
    switch (instr->op) {
    case nir_op_mov:
@@ -1258,6 +1228,17 @@ static bool visit_alu(struct ac_nir_context *ctx, const nir_alu_instr *instr)
                                   (LLVMValueRef[]){src[1], src[0], src[2]}, 3, 0);
       break;
 
+   case nir_op_mqsad_4x8:
+      src[1] = LLVMBuildBitCast(ctx->ac.builder, src[1], ctx->ac.i64, "");
+      result = ac_build_intrinsic(&ctx->ac, "llvm.amdgcn.mqsad.u32.u8", ctx->ac.v4i32,
+                                  (LLVMValueRef[]){src[1], src[0], src[2]}, 3, 0);
+      break;
+
+   case nir_op_fshr:
+      result = ac_build_intrinsic(&ctx->ac, "llvm.fshr.i32", ctx->ac.i32,
+                                  (LLVMValueRef[]){src[0], src[1], src[2]}, 3, 0);
+      break;
+
    default:
       fprintf(stderr, "Unknown NIR alu instr: ");
       nir_print_instr(&instr->instr, stderr);
-- 
GitLab


From d57f0a3ce411bbea5bc066ebe4e2b948759729e4 Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Mon, 11 Mar 2024 16:35:31 +0000
Subject: [PATCH 4/5] amd: set has_fshr32=true

This appears in some FSR3 shaders and will be used for the MQSAD
optimization.

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
---
 src/amd/common/ac_shader_util.c | 1 +
 1 file changed, 1 insertion(+)

diff --git a/src/amd/common/ac_shader_util.c b/src/amd/common/ac_shader_util.c
index 0c61d3aa47a7a..f3cf20fcf9e2f 100644
--- a/src/amd/common/ac_shader_util.c
+++ b/src/amd/common/ac_shader_util.c
@@ -83,6 +83,7 @@ void ac_set_nir_options(struct radeon_info *info, bool use_llvm,
    options->has_bit_test = !use_llvm;
    options->has_fmulz = true;
    options->has_msad = true;
+   options->has_fshr32 = true;
    options->use_interpolated_input_intrinsics = true;
    options->lower_int64_options = nir_lower_imul64 | nir_lower_imul_high64 | nir_lower_imul_2x32_64 | nir_lower_divmod64 |
                                   nir_lower_minmax64 | nir_lower_iabs64 | nir_lower_iadd_sat64 | nir_lower_conv64;
-- 
GitLab


From 8cacaf06371c92540cc2e9820d1788f7a62027dc Mon Sep 17 00:00:00 2001
From: Rhys Perry <pendingchaos02@gmail.com>
Date: Fri, 5 Jan 2024 17:42:41 +0000
Subject: [PATCH 5/5] radv: optimize msad_4x8 to mqsad_4x8

Signed-off-by: Rhys Perry <pendingchaos02@gmail.com>
---
 src/amd/vulkan/radv_pipeline.c | 3 ++-
 src/amd/vulkan/radv_shader.c   | 6 ++++--
 src/amd/vulkan/radv_shader.h   | 2 +-
 3 files changed, 7 insertions(+), 4 deletions(-)

diff --git a/src/amd/vulkan/radv_pipeline.c b/src/amd/vulkan/radv_pipeline.c
index 61cd8c1a7e5c5..20cf562209333 100644
--- a/src/amd/vulkan/radv_pipeline.c
+++ b/src/amd/vulkan/radv_pipeline.c
@@ -668,7 +668,8 @@ radv_postprocess_nir(struct radv_device *device, const struct radv_graphics_stat
    NIR_PASS_V(stage->nir, radv_nir_lower_abi, gfx_level, stage, gfx_state,
               device->physical_device->rad_info.address32_hi);
    radv_optimize_nir_algebraic(
-      stage->nir, io_to_mem || lowered_ngg || stage->stage == MESA_SHADER_COMPUTE || stage->stage == MESA_SHADER_TASK);
+      stage->nir, io_to_mem || lowered_ngg || stage->stage == MESA_SHADER_COMPUTE || stage->stage == MESA_SHADER_TASK,
+      device->physical_device->rad_info.gfx_level >= GFX7);
 
    NIR_PASS(_, stage->nir, nir_lower_fp16_casts, nir_lower_fp16_split_fp64);
 
diff --git a/src/amd/vulkan/radv_shader.c b/src/amd/vulkan/radv_shader.c
index cec1b1f719606..ed729fd67bbfd 100644
--- a/src/amd/vulkan/radv_shader.c
+++ b/src/amd/vulkan/radv_shader.c
@@ -191,7 +191,7 @@ radv_optimize_nir(struct nir_shader *shader, bool optimize_conservatively)
 }
 
 void
-radv_optimize_nir_algebraic(nir_shader *nir, bool opt_offsets)
+radv_optimize_nir_algebraic(nir_shader *nir, bool opt_offsets, bool opt_mqsad)
 {
    bool more_algebraic = true;
    while (more_algebraic) {
@@ -211,6 +211,8 @@ radv_optimize_nir_algebraic(nir_shader *nir, bool opt_offsets)
       };
       NIR_PASS(_, nir, nir_opt_offsets, &offset_options);
    }
+   if (opt_mqsad)
+      NIR_PASS(_, nir, nir_opt_mqsad);
 
    /* Do late algebraic optimization to turn add(a,
     * neg(b)) back into subs, then the mandatory cleanup
@@ -836,7 +838,7 @@ radv_lower_ngg(struct radv_device *device, struct radv_shader_stage *ngg_stage,
       assert(info->is_ngg);
 
       if (info->has_ngg_culling)
-         radv_optimize_nir_algebraic(nir, false);
+         radv_optimize_nir_algebraic(nir, false, false);
 
       options.num_vertices_per_primitive = num_vertices_per_prim;
       options.early_prim_export = info->has_ngg_early_prim_export;
diff --git a/src/amd/vulkan/radv_shader.h b/src/amd/vulkan/radv_shader.h
index 2fea29cd29ab5..9a78808702af0 100644
--- a/src/amd/vulkan/radv_shader.h
+++ b/src/amd/vulkan/radv_shader.h
@@ -768,7 +768,7 @@ struct radv_pipeline_layout;
 struct radv_shader_stage;
 
 void radv_optimize_nir(struct nir_shader *shader, bool optimize_conservatively);
-void radv_optimize_nir_algebraic(nir_shader *shader, bool opt_offsets);
+void radv_optimize_nir_algebraic(nir_shader *shader, bool opt_offsets, bool opt_mqsad);
 
 void radv_postprocess_nir(struct radv_device *device, const struct radv_graphics_state_key *gfx_state,
                           struct radv_shader_stage *stage);
-- 
GitLab

