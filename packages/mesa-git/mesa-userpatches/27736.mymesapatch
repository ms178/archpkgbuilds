From 81ced8cee4a40cb4d0919e9280cea58905cec389 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Thu, 1 Feb 2024 00:23:16 -0500
Subject: [PATCH 1/9] cso_context: add cso_get_vertex_elements_for_bind,
 letting the caller bind it

for st/mesa
---
 src/gallium/auxiliary/cso_cache/cso_context.c | 40 +++++++++++++++----
 src/gallium/auxiliary/cso_cache/cso_context.h |  3 ++
 2 files changed, 35 insertions(+), 8 deletions(-)

diff --git a/src/gallium/auxiliary/cso_cache/cso_context.c b/src/gallium/auxiliary/cso_cache/cso_context.c
index e71e400c4246c..367637bcc90f9 100644
--- a/src/gallium/auxiliary/cso_cache/cso_context.c
+++ b/src/gallium/auxiliary/cso_cache/cso_context.c
@@ -1182,9 +1182,9 @@ cso_restore_compute_samplers(struct cso_context_priv *ctx)
 }
 
 
-static void
-cso_set_vertex_elements_direct(struct cso_context_priv *ctx,
-                               const struct cso_velems_state *velems)
+static void *
+cso_get_vertex_elements(struct cso_context_priv *ctx,
+                        const struct cso_velems_state *velems)
 {
    /* Need to include the count into the stored state data too.
     * Otherwise first few count pipe_vertex_elements could be identical
@@ -1197,12 +1197,11 @@ cso_set_vertex_elements_direct(struct cso_context_priv *ctx,
    struct cso_hash_iter iter =
       cso_find_state_template(&ctx->cache, hash_key, CSO_VELEMENTS,
                               velems, key_size);
-   void *handle;
 
    if (cso_hash_iter_is_null(iter)) {
       struct cso_velements *cso = MALLOC(sizeof(struct cso_velements));
       if (!cso)
-         return;
+         return NULL;
 
       memcpy(&cso->state, velems, key_size);
 
@@ -1218,13 +1217,20 @@ cso_set_vertex_elements_direct(struct cso_context_priv *ctx,
       iter = cso_insert_state(&ctx->cache, hash_key, CSO_VELEMENTS, cso);
       if (cso_hash_iter_is_null(iter)) {
          FREE(cso);
-         return;
+         return NULL;
       }
 
-      handle = cso->data;
+      return cso->data;
    } else {
-      handle = ((struct cso_velements *)cso_hash_iter_data(iter))->data;
+      return ((struct cso_velements *)cso_hash_iter_data(iter))->data;
    }
+}
+
+static void
+cso_set_vertex_elements_direct(struct cso_context_priv *ctx,
+                               const struct cso_velems_state *velems)
+{
+   void *handle = cso_get_vertex_elements(ctx, velems);
 
    if (ctx->velements != handle) {
       ctx->velements = handle;
@@ -1232,6 +1238,24 @@ cso_set_vertex_elements_direct(struct cso_context_priv *ctx,
    }
 }
 
+/**
+ * Same as cso_set_vertex_elements_direct, but the caller is responsible for
+ * binding the state if the return value isn't NULL.
+ */
+void *
+cso_get_vertex_elements_for_bind(struct cso_context *cso,
+                                 const struct cso_velems_state *velems)
+{
+   struct cso_context_priv *ctx = (struct cso_context_priv *)cso;
+   void *handle = cso_get_vertex_elements(ctx, velems);
+
+   if (handle && ctx->velements != handle) {
+      ctx->velements = handle;
+      return handle;
+   }
+
+   return NULL;
+}
 
 enum pipe_error
 cso_set_vertex_elements(struct cso_context *cso,
diff --git a/src/gallium/auxiliary/cso_cache/cso_context.h b/src/gallium/auxiliary/cso_cache/cso_context.h
index 4f154fad98d02..94aca3361e645 100644
--- a/src/gallium/auxiliary/cso_cache/cso_context.h
+++ b/src/gallium/auxiliary/cso_cache/cso_context.h
@@ -88,6 +88,9 @@ void
 cso_single_sampler_done(struct cso_context *cso,
                         enum pipe_shader_type shader_stage);
 
+void *
+cso_get_vertex_elements_for_bind(struct cso_context *cso,
+                                 const struct cso_velems_state *velems);
 
 enum pipe_error
 cso_set_vertex_elements(struct cso_context *ctx,
-- 
GitLab


From 008f3e4f24604c3e6eda558e177408b3cd5fe8a4 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Thu, 1 Feb 2024 00:48:59 -0500
Subject: [PATCH 2/9] gallium/u_threaded,st/mesa: add a merged
 set_vertex_elements_and_buffers call

Setting vertex elements before vertex buffers is a new requirement of gallium.

This is the only way to set the vertex elements state after vertex buffers
in st/mesa while setting the state before vertex buffers in tc_batch_execute.

A new TC call is added to set both vertex elements and vertex buffers.
Vertex buffers are filled by st/mesa first, and then the vertex elements
state is set in the same call. When TC calls it, it binds vertex elements
before vertex buffers.
---
 .../auxiliary/util/u_threaded_context.c       | 48 +++++++++++++++++++
 .../auxiliary/util/u_threaded_context.h       | 17 +++++++
 .../auxiliary/util/u_threaded_context_calls.h |  1 +
 src/mesa/state_tracker/st_atom_array.cpp      |  8 +++-
 4 files changed, 72 insertions(+), 2 deletions(-)

diff --git a/src/gallium/auxiliary/util/u_threaded_context.c b/src/gallium/auxiliary/util/u_threaded_context.c
index f513040e5748b..2193ce65d7325 100644
--- a/src/gallium/auxiliary/util/u_threaded_context.c
+++ b/src/gallium/auxiliary/util/u_threaded_context.c
@@ -2193,6 +2193,54 @@ tc_add_set_vertex_buffers_call(struct pipe_context *_pipe, unsigned count)
    return p->slot;
 }
 
+struct tc_vertex_elements_and_buffers {
+   struct tc_call_base base;
+   uint8_t count;
+   void *velems_state;
+   struct pipe_vertex_buffer slot[0]; /* more will be allocated if needed */
+};
+
+static uint16_t
+tc_call_set_vertex_elements_and_buffers(struct pipe_context *pipe, void *call)
+{
+   struct tc_vertex_elements_and_buffers *p =
+      (struct tc_vertex_elements_and_buffers *)call;
+   unsigned count = p->count;
+
+   for (unsigned i = 0; i < count; i++)
+      tc_assert(!p->slot[i].is_user_buffer);
+
+   if (p->velems_state)
+      pipe->bind_vertex_elements_state(pipe, p->velems_state);
+
+   pipe->set_vertex_buffers(pipe, count, p->slot);
+   return p->base.num_slots;
+}
+
+/**
+ * Same as tc_add_set_vertex_buffers_call, but the caller should call
+ * tc_set_vertex_elements_for_call with the return value to set the vertex
+ * elements state. The vertex elements state will be bound before vertex
+ * buffers.
+ */
+struct pipe_vertex_buffer *
+tc_add_set_vertex_elements_and_buffers_call(struct pipe_context *_pipe,
+                                            unsigned count)
+{
+   struct threaded_context *tc = threaded_context(_pipe);
+
+   /* We don't need to unbind trailing buffers because we never touch bindings
+    * after num_vertex_buffers.
+    */
+   tc->num_vertex_buffers = count;
+
+   struct tc_vertex_elements_and_buffers *p =
+      tc_add_slot_based_call(tc, TC_CALL_set_vertex_elements_and_buffers,
+                             tc_vertex_elements_and_buffers, count);
+   p->count = count;
+   return p->slot;
+}
+
 struct tc_stream_outputs {
    struct tc_call_base base;
    unsigned count;
diff --git a/src/gallium/auxiliary/util/u_threaded_context.h b/src/gallium/auxiliary/util/u_threaded_context.h
index 3932dd1925b2e..cbff0ee2c7bec 100644
--- a/src/gallium/auxiliary/util/u_threaded_context.h
+++ b/src/gallium/auxiliary/util/u_threaded_context.h
@@ -713,6 +713,10 @@ tc_add_draw_single_call(struct pipe_context *_pipe,
 struct pipe_vertex_buffer *
 tc_add_set_vertex_buffers_call(struct pipe_context *_pipe, unsigned count);
 
+struct pipe_vertex_buffer *
+tc_add_set_vertex_elements_and_buffers_call(struct pipe_context *_pipe,
+                                            unsigned count);
+
 void
 tc_draw_vbo(struct pipe_context *_pipe, const struct pipe_draw_info *info,
             unsigned drawid_offset,
@@ -835,6 +839,19 @@ tc_track_vertex_buffer(struct pipe_context *_pipe, unsigned index,
    }
 }
 
+/**
+ * "buffers" must be a result of tc_add_set_vertex_elements_and_buffers_call.
+ * This sets the vertex elements state for it. It will be bound before vertex
+ * buffers.
+ */
+static inline void
+tc_set_vertex_elements_for_call(struct pipe_vertex_buffer *buffers,
+                                void *state)
+{
+   void **ptr = (void**)buffers;
+   ptr[-1] = state;
+}
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/src/gallium/auxiliary/util/u_threaded_context_calls.h b/src/gallium/auxiliary/util/u_threaded_context_calls.h
index c3ba53ff667eb..828897e9e5438 100644
--- a/src/gallium/auxiliary/util/u_threaded_context_calls.h
+++ b/src/gallium/auxiliary/util/u_threaded_context_calls.h
@@ -20,6 +20,7 @@ CALL(set_window_rectangles)
 CALL(set_sampler_views)
 CALL(set_shader_images)
 CALL(set_shader_buffers)
+CALL(set_vertex_elements_and_buffers)
 CALL(set_vertex_buffers)
 CALL(set_stream_output_targets)
 CALL(replace_buffer_storage)
diff --git a/src/mesa/state_tracker/st_atom_array.cpp b/src/mesa/state_tracker/st_atom_array.cpp
index faa2d626de9e2..c10342ae57ab1 100644
--- a/src/mesa/state_tracker/st_atom_array.cpp
+++ b/src/mesa/state_tracker/st_atom_array.cpp
@@ -432,7 +432,10 @@ st_update_array_templ(struct st_context *st,
       /* Add up to 1 vertex buffer for zero-stride vertex attribs. */
       num_vbuffers_tc += ALLOW_ZERO_STRIDE_ATTRIBS &&
                          inputs_read & ~enabled_arrays;
-      vbuffer = tc_add_set_vertex_buffers_call(st->pipe, num_vbuffers_tc);
+      vbuffer = UPDATE_VELEMS ?
+         tc_add_set_vertex_elements_and_buffers_call(st->pipe,
+                                                     num_vbuffers_tc) :
+         tc_add_set_vertex_buffers_call(st->pipe, num_vbuffers_tc);
    } else {
       vbuffer = vbuffer_local;
    }
@@ -464,7 +467,8 @@ st_update_array_templ(struct st_context *st,
 
       /* Set vertex buffers and elements. */
       if (FILL_TC_SET_VB) {
-         cso_set_vertex_elements(cso, &velements);
+         void *state = cso_get_vertex_elements_for_bind(cso, &velements);
+         tc_set_vertex_elements_for_call(vbuffer, state);
       } else {
          cso_set_vertex_buffers_and_elements(cso, &velements, num_vbuffers,
                                              uses_user_vertex_buffers, vbuffer);
-- 
GitLab


From ac58765c1e9c9dca866d1f9f004ac63170339239 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Thu, 1 Feb 2024 02:15:11 -0500
Subject: [PATCH 3/9] radeonsi: add assertion requiring binding vertex elements
 before vertex_buffers

---
 src/gallium/drivers/radeonsi/si_pipe.h         | 1 +
 src/gallium/drivers/radeonsi/si_state.c        | 6 ++++++
 src/gallium/drivers/radeonsi/si_state_draw.cpp | 1 +
 3 files changed, 8 insertions(+)

diff --git a/src/gallium/drivers/radeonsi/si_pipe.h b/src/gallium/drivers/radeonsi/si_pipe.h
index 8a94fe97a81ec..3b0f996f231bf 100644
--- a/src/gallium/drivers/radeonsi/si_pipe.h
+++ b/src/gallium/drivers/radeonsi/si_pipe.h
@@ -1121,6 +1121,7 @@ struct si_context {
    struct si_vertex_elements *vertex_elements;
    unsigned num_vertex_elements;
    unsigned cs_max_waves_per_sh;
+   bool vertex_elements_but_no_buffers;
    bool uses_nontrivial_vs_inputs;
    bool force_trivial_vs_inputs;
    bool do_update_shaders;
diff --git a/src/gallium/drivers/radeonsi/si_state.c b/src/gallium/drivers/radeonsi/si_state.c
index f7fb8ffbe92f1..ff25e225dc0cd 100644
--- a/src/gallium/drivers/radeonsi/si_state.c
+++ b/src/gallium/drivers/radeonsi/si_state.c
@@ -5502,6 +5502,9 @@ static void si_bind_vertex_elements(struct pipe_context *ctx, void *state)
    sctx->vertex_elements = v;
    sctx->num_vertex_elements = v->count;
    sctx->vertex_buffers_dirty = sctx->num_vertex_elements > 0;
+#ifndef NDEBUG
+   sctx->vertex_elements_but_no_buffers = v->count > 0;
+#endif
 
    if (old->instance_divisor_is_one != v->instance_divisor_is_one ||
        old->instance_divisor_is_fetched != v->instance_divisor_is_fetched ||
@@ -5582,6 +5585,9 @@ static void si_set_vertex_buffers(struct pipe_context *ctx, unsigned count,
    sctx->num_vertex_buffers = count;
    sctx->vertex_buffers_dirty = sctx->num_vertex_elements > 0;
    sctx->vertex_buffer_unaligned = unaligned;
+#ifndef NDEBUG
+   sctx->vertex_elements_but_no_buffers = false;
+#endif
 
    /* Check whether alignment may have changed in a way that requires
     * shader changes. This check is conservative: a vertex buffer can only
diff --git a/src/gallium/drivers/radeonsi/si_state_draw.cpp b/src/gallium/drivers/radeonsi/si_state_draw.cpp
index 95b6201c2167b..a8989ba0fb43c 100644
--- a/src/gallium/drivers/radeonsi/si_state_draw.cpp
+++ b/src/gallium/drivers/radeonsi/si_state_draw.cpp
@@ -1731,6 +1731,7 @@ static bool si_upload_and_prefetch_VB_descriptors(struct si_context *sctx,
 
    if (sctx->vertex_buffers_dirty || IS_DRAW_VERTEX_STATE) {
       assert(count || IS_DRAW_VERTEX_STATE);
+      assert(IS_DRAW_VERTEX_STATE || !sctx->vertex_elements_but_no_buffers);
 
       struct si_vertex_elements *velems = sctx->vertex_elements;
       unsigned alloc_size = IS_DRAW_VERTEX_STATE ?
-- 
GitLab


From 65256e6688c35037a472547fd94b0d957dc0af51 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Thu, 1 Feb 2024 02:19:48 -0500
Subject: [PATCH 4/9] radeonsi: require that count in set_vertex_buffers
 matches vertex elements state

---
 src/gallium/drivers/radeonsi/si_state.c | 5 +++--
 src/gallium/drivers/radeonsi/si_state.h | 1 +
 2 files changed, 4 insertions(+), 2 deletions(-)

diff --git a/src/gallium/drivers/radeonsi/si_state.c b/src/gallium/drivers/radeonsi/si_state.c
index ff25e225dc0cd..ea2d9cda5cc55 100644
--- a/src/gallium/drivers/radeonsi/si_state.c
+++ b/src/gallium/drivers/radeonsi/si_state.c
@@ -5324,6 +5324,7 @@ static void *si_create_vertex_elements(struct pipe_context *ctx, unsigned count,
       v->elem[i].src_offset = elements[i].src_offset;
       v->elem[i].stride = elements[i].src_stride;
       v->vertex_buffer_index[i] = vbo_index;
+      v->num_vertex_buffers = MAX2(v->num_vertex_buffers, vbo_index + 1);
 
       bool always_fix = false;
       union si_vs_fix_fetch fix_fetch;
@@ -5555,7 +5556,7 @@ static void si_set_vertex_buffers(struct pipe_context *ctx, unsigned count,
    unsigned i;
 
    assert(count <= ARRAY_SIZE(sctx->vertex_buffer));
-   assert(!count || buffers);
+   assert(!count || (count == sctx->vertex_elements->num_vertex_buffers && buffers));
 
    for (i = 0; i < count; i++) {
       const struct pipe_vertex_buffer *src = buffers + i;
@@ -5583,7 +5584,7 @@ static void si_set_vertex_buffers(struct pipe_context *ctx, unsigned count,
       pipe_resource_reference(&sctx->vertex_buffer[i].buffer.resource, NULL);
 
    sctx->num_vertex_buffers = count;
-   sctx->vertex_buffers_dirty = sctx->num_vertex_elements > 0;
+   sctx->vertex_buffers_dirty = count > 0;
    sctx->vertex_buffer_unaligned = unaligned;
 #ifndef NDEBUG
    sctx->vertex_elements_but_no_buffers = false;
diff --git a/src/gallium/drivers/radeonsi/si_state.h b/src/gallium/drivers/radeonsi/si_state.h
index 3f7c8c64e4fa0..754607d21ac47 100644
--- a/src/gallium/drivers/radeonsi/si_state.h
+++ b/src/gallium/drivers/radeonsi/si_state.h
@@ -169,6 +169,7 @@ struct si_vertex_elements {
    uint16_t vb_alignment_check_mask;
 
    uint8_t count;
+   uint8_t num_vertex_buffers;
 
    /* Vertex buffer descriptor list size aligned for optimal prefetch. */
    uint16_t vb_desc_list_alloc_size;
-- 
GitLab


From 8824a09984b84705f8ee3bf2b7ff7e256ce9b52b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Thu, 1 Feb 2024 02:26:07 -0500
Subject: [PATCH 5/9] radeonsi: don't set num_vertex_buffers and don't unbind
 in set_vertex_buffers

The number of bound vertex buffers is now always equal to the number of
used buffers in the vertex elements state even if some buffers are NULL.

set_vertex_buffers doesn't unbind [count..last_count-1] buffers anymore.
bind_vertex_elements_state does that. It lets us remove code from
si_set_vertex_buffers.
---
 src/gallium/drivers/radeonsi/si_descriptors.c |  6 +++---
 src/gallium/drivers/radeonsi/si_pipe.h        |  1 -
 src/gallium/drivers/radeonsi/si_state.c       | 12 +++++++-----
 3 files changed, 10 insertions(+), 9 deletions(-)

diff --git a/src/gallium/drivers/radeonsi/si_descriptors.c b/src/gallium/drivers/radeonsi/si_descriptors.c
index 5423c529d6290..67e71ef5b2b02 100644
--- a/src/gallium/drivers/radeonsi/si_descriptors.c
+++ b/src/gallium/drivers/radeonsi/si_descriptors.c
@@ -1747,7 +1747,7 @@ void si_rebind_buffer(struct si_context *sctx, struct pipe_resource *buf)
       sctx->vertex_buffers_dirty = num_elems > 0;
 
       /* We don't know which buffer was invalidated, so we have to add all of them. */
-      unsigned num_vb = sctx->num_vertex_buffers;
+      unsigned num_vb = sctx->vertex_elements->num_vertex_buffers;
       for (unsigned i = 0; i < num_vb; i++) {
          struct si_resource *buf = si_resource(sctx->vertex_buffer[i].buffer.resource);
          if (buf) {
@@ -1757,7 +1757,7 @@ void si_rebind_buffer(struct si_context *sctx, struct pipe_resource *buf)
          }
       }
    } else if (buffer->bind_history & SI_BIND_VERTEX_BUFFER) {
-      unsigned num_vb = sctx->num_vertex_buffers;
+      unsigned num_vb = sctx->vertex_elements->num_vertex_buffers;
 
       for (i = 0; i < num_elems; i++) {
          int vb = sctx->vertex_elements->vertex_buffer_index[i];
@@ -3052,7 +3052,7 @@ static void si_emit_gfx_resources_add_all_to_bo_list(struct si_context *sctx, un
    }
    si_buffer_resources_begin_new_cs(sctx, &sctx->internal_bindings);
 
-   unsigned num_vb = sctx->num_vertex_buffers;
+   unsigned num_vb = sctx->vertex_elements->num_vertex_buffers;
    for (unsigned i = 0; i < num_vb; i++) {
       struct si_resource *buf = si_resource(sctx->vertex_buffer[i].buffer.resource);
       if (buf) {
diff --git a/src/gallium/drivers/radeonsi/si_pipe.h b/src/gallium/drivers/radeonsi/si_pipe.h
index 3b0f996f231bf..c16dece8279cd 100644
--- a/src/gallium/drivers/radeonsi/si_pipe.h
+++ b/src/gallium/drivers/radeonsi/si_pipe.h
@@ -1160,7 +1160,6 @@ struct si_context {
 
    /* Vertex buffers. */
    bool vertex_buffers_dirty;
-   uint8_t num_vertex_buffers;
    uint16_t vertex_buffer_unaligned; /* bitmask of not dword-aligned buffers */
    struct pipe_vertex_buffer vertex_buffer[SI_NUM_VERTEX_BUFFERS];
 
diff --git a/src/gallium/drivers/radeonsi/si_state.c b/src/gallium/drivers/radeonsi/si_state.c
index ea2d9cda5cc55..3f9c105668708 100644
--- a/src/gallium/drivers/radeonsi/si_state.c
+++ b/src/gallium/drivers/radeonsi/si_state.c
@@ -5534,6 +5534,13 @@ static void si_bind_vertex_elements(struct pipe_context *ctx, void *state)
       cb.buffer_size = 0xffffffff;
       si_set_internal_const_buffer(sctx, SI_VS_CONST_INSTANCE_DIVISORS, &cb);
    }
+
+   /* Unbind all vertex buffers. set_vertex_buffers is required to be called after this.
+    * If it's not called, no buffers will be enabled.
+    */
+   unsigned old_num_vertex_buffers = old->num_vertex_buffers;
+   for (unsigned i = 0; i < old_num_vertex_buffers; i++)
+      pipe_resource_reference(&sctx->vertex_buffer[i].buffer.resource, NULL);
 }
 
 static void si_delete_vertex_element(struct pipe_context *ctx, void *state)
@@ -5579,11 +5586,6 @@ static void si_set_vertex_buffers(struct pipe_context *ctx, unsigned count,
       }
    }
 
-   unsigned last_count = sctx->num_vertex_buffers;
-   for (; i < last_count; i++)
-      pipe_resource_reference(&sctx->vertex_buffer[i].buffer.resource, NULL);
-
-   sctx->num_vertex_buffers = count;
    sctx->vertex_buffers_dirty = count > 0;
    sctx->vertex_buffer_unaligned = unaligned;
 #ifndef NDEBUG
-- 
GitLab


From 7ce6ee69b90744d3d78121bf5d8318cb5ce12640 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Fri, 2 Feb 2024 15:46:19 -0500
Subject: [PATCH 6/9] radeonsi: simplify bind_vertex_elements due to being
 before set_vertex_buffers

The unaligned checking is unnecessary because si_bind_vertex_elements
always unbinds all vertex buffers.
---
 src/gallium/drivers/radeonsi/si_state.c | 6 +-----
 1 file changed, 1 insertion(+), 5 deletions(-)

diff --git a/src/gallium/drivers/radeonsi/si_state.c b/src/gallium/drivers/radeonsi/si_state.c
index 3f9c105668708..87d76849aac17 100644
--- a/src/gallium/drivers/radeonsi/si_state.c
+++ b/src/gallium/drivers/radeonsi/si_state.c
@@ -5503,17 +5503,13 @@ static void si_bind_vertex_elements(struct pipe_context *ctx, void *state)
    sctx->vertex_elements = v;
    sctx->num_vertex_elements = v->count;
    sctx->vertex_buffers_dirty = sctx->num_vertex_elements > 0;
+   sctx->vertex_buffer_unaligned = 0;
 #ifndef NDEBUG
    sctx->vertex_elements_but_no_buffers = v->count > 0;
 #endif
 
    if (old->instance_divisor_is_one != v->instance_divisor_is_one ||
        old->instance_divisor_is_fetched != v->instance_divisor_is_fetched ||
-       (old->vb_alignment_check_mask ^ v->vb_alignment_check_mask) &
-       sctx->vertex_buffer_unaligned ||
-       ((v->vb_alignment_check_mask & sctx->vertex_buffer_unaligned) &&
-        memcmp(old->vertex_buffer_index, v->vertex_buffer_index,
-               sizeof(v->vertex_buffer_index[0]) * MAX2(old->count, v->count))) ||
        /* fix_fetch_{always,opencode,unaligned} and hw_load_is_dword are
         * functions of fix_fetch and the src_offset alignment.
         * If they change and fix_fetch doesn't, it must be due to different
-- 
GitLab


From 5dca36bce847c149a969d719a8ffbf298095f0de Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Mon, 5 Feb 2024 03:21:48 -0500
Subject: [PATCH 7/9] radeonsi: set a custom version of
 tc_call_set_vertex_buffers

It just inlines si_set_vertex_buffers in it.
---
 src/gallium/drivers/radeonsi/si_pipe.c  | 12 ++++++++----
 src/gallium/drivers/radeonsi/si_state.c | 13 +++++++++++--
 src/gallium/drivers/radeonsi/si_state.h |  1 +
 3 files changed, 20 insertions(+), 6 deletions(-)

diff --git a/src/gallium/drivers/radeonsi/si_pipe.c b/src/gallium/drivers/radeonsi/si_pipe.c
index 3433385cf5464..28244916db380 100644
--- a/src/gallium/drivers/radeonsi/si_pipe.c
+++ b/src/gallium/drivers/radeonsi/si_pipe.c
@@ -933,7 +933,7 @@ static struct pipe_context *si_pipe_create_context(struct pipe_screen *screen, v
 
    /* Use asynchronous flushes only on amdgpu, since the radeon
     * implementation for fence_server_sync is incomplete. */
-   struct pipe_context *tc =
+   struct pipe_context *tc_pipe =
       threaded_context_create(ctx, &sscreen->pool_transfers,
                               si_replace_buffer_storage,
                               &(struct threaded_context_options){
@@ -945,10 +945,14 @@ static struct pipe_context *si_pipe_create_context(struct pipe_screen *screen, v
                               },
                               &((struct si_context *)ctx)->tc);
 
-   if (tc && tc != ctx)
-      threaded_context_init_bytes_mapped_limit((struct threaded_context *)tc, 4);
+   if (tc_pipe && tc_pipe != ctx) {
+      struct threaded_context *tc = (struct threaded_context *)tc_pipe;
 
-   return tc;
+      threaded_context_init_bytes_mapped_limit(tc, 4);
+      tc->execute_func[TC_CALL_set_vertex_buffers] = si_tc_set_vertex_buffers;
+   }
+
+   return tc_pipe;
 }
 
 /*
diff --git a/src/gallium/drivers/radeonsi/si_state.c b/src/gallium/drivers/radeonsi/si_state.c
index 87d76849aac17..7c757a8449959 100644
--- a/src/gallium/drivers/radeonsi/si_state.c
+++ b/src/gallium/drivers/radeonsi/si_state.c
@@ -5551,8 +5551,8 @@ static void si_delete_vertex_element(struct pipe_context *ctx, void *state)
    FREE(state);
 }
 
-static void si_set_vertex_buffers(struct pipe_context *ctx, unsigned count,
-                                  const struct pipe_vertex_buffer *buffers)
+static inline void si_set_vertex_buffers(struct pipe_context *ctx, unsigned count,
+                                         const struct pipe_vertex_buffer *buffers)
 {
    struct si_context *sctx = (struct si_context *)ctx;
    uint32_t unaligned = 0;
@@ -5601,6 +5601,15 @@ static void si_set_vertex_buffers(struct pipe_context *ctx, unsigned count,
    }
 }
 
+/* restrict really makes a performance difference here (according to sysprof). */
+uint16_t si_tc_set_vertex_buffers(struct pipe_context *ctx, void *restrict call)
+{
+   struct tc_vertex_buffers *p = (struct tc_vertex_buffers *)call;
+
+   si_set_vertex_buffers(ctx, p->count, p->slot);
+   return p->base.num_slots;
+}
+
 static struct pipe_vertex_state *
 si_create_vertex_state(struct pipe_screen *screen,
                        struct pipe_vertex_buffer *buffer,
diff --git a/src/gallium/drivers/radeonsi/si_state.h b/src/gallium/drivers/radeonsi/si_state.h
index 754607d21ac47..dd7ae1360dd0f 100644
--- a/src/gallium/drivers/radeonsi/si_state.h
+++ b/src/gallium/drivers/radeonsi/si_state.h
@@ -610,6 +610,7 @@ struct pb_slab *si_bindless_descriptor_slab_alloc(void *priv, unsigned heap, uns
 void si_bindless_descriptor_slab_free(void *priv, struct pb_slab *pslab);
 void si_rebind_buffer(struct si_context *sctx, struct pipe_resource *buf);
 /* si_state.c */
+uint16_t si_tc_set_vertex_buffers(struct pipe_context *ctx, void *restrict call);
 void si_init_state_compute_functions(struct si_context *sctx);
 void si_init_state_functions(struct si_context *sctx);
 void si_init_screen_state_functions(struct si_screen *sscreen);
-- 
GitLab


From d006aa3079a4b6391cd54957d89f96a05709618d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Mon, 5 Feb 2024 05:11:29 -0500
Subject: [PATCH 8/9] radeonsi: use the restrict keyword next to draw
 parameters

---
 .../drivers/radeonsi/si_state_draw.cpp        | 27 ++++++++++---------
 1 file changed, 14 insertions(+), 13 deletions(-)

diff --git a/src/gallium/drivers/radeonsi/si_state_draw.cpp b/src/gallium/drivers/radeonsi/si_state_draw.cpp
index a8989ba0fb43c..5e066a8083bb9 100644
--- a/src/gallium/drivers/radeonsi/si_state_draw.cpp
+++ b/src/gallium/drivers/radeonsi/si_state_draw.cpp
@@ -1062,7 +1062,7 @@ static void si_emit_ia_multi_vgt_param(struct si_context *sctx,
 template <amd_gfx_level GFX_VERSION, si_has_tess HAS_TESS, si_has_gs HAS_GS, si_has_ngg NGG,
           si_is_draw_vertex_state IS_DRAW_VERTEX_STATE> ALWAYS_INLINE
 static void si_emit_draw_registers(struct si_context *sctx,
-                                   const struct pipe_draw_indirect_info *indirect,
+                                   const struct pipe_draw_indirect_info *restrict indirect,
                                    enum mesa_prim prim, unsigned index_size,
                                    unsigned instance_count, bool primitive_restart,
                                    unsigned restart_index, unsigned min_vertex_count)
@@ -1194,12 +1194,13 @@ void si_emit_buffered_compute_sh_regs(struct si_context *sctx)
 
 template <amd_gfx_level GFX_VERSION, si_has_tess HAS_TESS, si_has_gs HAS_GS, si_has_ngg NGG,
           si_is_draw_vertex_state IS_DRAW_VERTEX_STATE, si_has_sh_pairs_packed HAS_SH_PAIRS_PACKED> ALWAYS_INLINE
-static void si_emit_draw_packets(struct si_context *sctx, const struct pipe_draw_info *info,
+static void si_emit_draw_packets(struct si_context *sctx,
+                                 const struct pipe_draw_info *restrict info,
                                  unsigned drawid_base,
-                                 const struct pipe_draw_indirect_info *indirect,
-                                 const struct pipe_draw_start_count_bias *draws,
+                                 const struct pipe_draw_indirect_info *restrict indirect,
+                                 const struct pipe_draw_start_count_bias *restrict draws,
                                  unsigned num_draws,
-                                 struct pipe_resource *indexbuf, unsigned index_size,
+                                 struct pipe_resource *restrict indexbuf, unsigned index_size,
                                  unsigned index_offset, unsigned instance_count)
 {
    struct radeon_cmdbuf *cs = &sctx->gfx_cs;
@@ -1963,12 +1964,12 @@ template <amd_gfx_level GFX_VERSION, si_has_tess HAS_TESS, si_has_gs HAS_GS, si_
           si_is_draw_vertex_state IS_DRAW_VERTEX_STATE, si_has_sh_pairs_packed HAS_SH_PAIRS_PACKED,
           util_popcnt POPCNT> ALWAYS_INLINE
 static void si_draw(struct pipe_context *ctx,
-                    const struct pipe_draw_info *info,
+                    const struct pipe_draw_info *restrict info,
                     unsigned drawid_offset,
-                    const struct pipe_draw_indirect_info *indirect,
-                    const struct pipe_draw_start_count_bias *draws,
+                    const struct pipe_draw_indirect_info *restrict indirect,
+                    const struct pipe_draw_start_count_bias *restrict draws,
                     unsigned num_draws,
-                    struct pipe_vertex_state *state,
+                    struct pipe_vertex_state *restrict state,
                     uint32_t partial_velem_mask)
 {
    /* Keep code that uses the least number of local variables as close to the beginning
@@ -2311,10 +2312,10 @@ static void si_draw(struct pipe_context *ctx,
 template <amd_gfx_level GFX_VERSION, si_has_tess HAS_TESS, si_has_gs HAS_GS, si_has_ngg NGG,
           si_has_sh_pairs_packed HAS_SH_PAIRS_PACKED>
 static void si_draw_vbo(struct pipe_context *ctx,
-                        const struct pipe_draw_info *info,
+                        const struct pipe_draw_info *restrict info,
                         unsigned drawid_offset,
-                        const struct pipe_draw_indirect_info *indirect,
-                        const struct pipe_draw_start_count_bias *draws,
+                        const struct pipe_draw_indirect_info *restrict indirect,
+                        const struct pipe_draw_start_count_bias *restrict draws,
                         unsigned num_draws)
 {
    si_draw<GFX_VERSION, HAS_TESS, HAS_GS, NGG, DRAW_VERTEX_STATE_OFF, HAS_SH_PAIRS_PACKED, POPCNT_NO>
@@ -2327,7 +2328,7 @@ static void si_draw_vertex_state(struct pipe_context *ctx,
                                  struct pipe_vertex_state *vstate,
                                  uint32_t partial_velem_mask,
                                  struct pipe_draw_vertex_state_info info,
-                                 const struct pipe_draw_start_count_bias *draws,
+                                 const struct pipe_draw_start_count_bias *restrict draws,
                                  unsigned num_draws)
 {
    struct si_vertex_state *state = (struct si_vertex_state *)vstate;
-- 
GitLab


From 2e08ea679b1d4b108b8e5b3f49aa2f0f01b94d5c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Ol=C5=A1=C3=A1k?= <marek.olsak@amd.com>
Date: Mon, 5 Feb 2024 05:24:11 -0500
Subject: [PATCH 9/9] radeonsi: remove support for user index buffers

glthread uploads them, and if it's not used, TC uploads them, which is
always enabled.
---
 src/gallium/drivers/radeonsi/si_state_draw.cpp | 16 ----------------
 1 file changed, 16 deletions(-)

diff --git a/src/gallium/drivers/radeonsi/si_state_draw.cpp b/src/gallium/drivers/radeonsi/si_state_draw.cpp
index 5e066a8083bb9..05d317b34b8f6 100644
--- a/src/gallium/drivers/radeonsi/si_state_draw.cpp
+++ b/src/gallium/drivers/radeonsi/si_state_draw.cpp
@@ -2055,22 +2055,6 @@ static void si_draw(struct pipe_context *ctx,
 
          index_offset = 0;
          index_size = 2;
-      } else if (!IS_DRAW_VERTEX_STATE && info->has_user_indices) {
-         unsigned start_offset;
-
-         assert(!indirect);
-         assert(num_draws == 1);
-         start_offset = draws[0].start * index_size;
-
-         indexbuf = NULL;
-         u_upload_data(ctx->stream_uploader, start_offset, draws[0].count * index_size,
-                       sctx->screen->info.tcc_cache_line_size,
-                       (char *)info->index.user + start_offset, &index_offset, &indexbuf);
-         if (unlikely(!indexbuf))
-            return;
-
-         /* info->start will be added by the drawing code */
-         index_offset -= start_offset;
       } else if (GFX_VERSION <= GFX7 && si_resource(indexbuf)->TC_L2_dirty) {
          /* GFX8 reads index buffers through TC L2, so it doesn't
           * need this. */
-- 
GitLab

