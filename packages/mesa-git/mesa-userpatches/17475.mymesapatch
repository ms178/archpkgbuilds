From c0d66a16df42518ae0919d8d85cea70c3061a495 Mon Sep 17 00:00:00 2001
From: Georg Lehmann <dadschoorse@gmail.com>
Date: Mon, 11 Jul 2022 22:12:22 +0200
Subject: [PATCH] nir/opt_algebraic: Improve lowering of idiv by pot.

Use ishr after some code to ensure that it rounds towards zero.

Foz-DB Navi21:
Totals from 1954 (1.45% of 134913) affected shaders:
CodeSize: 10216088 -> 10157104 (-0.58%); split: -0.58%, +0.00%
Instrs: 1916028 -> 1910276 (-0.30%); split: -0.30%, +0.00%
Latency: 23682255 -> 23632905 (-0.21%); split: -0.21%, +0.00%
InvThroughput: 4476220 -> 4452651 (-0.53%); split: -0.53%, +0.00%
VClause: 38244 -> 38232 (-0.03%); split: -0.04%, +0.01%
SClause: 79304 -> 79309 (+0.01%); split: -0.03%, +0.04%
Copies: 140581 -> 140592 (+0.01%); split: -0.01%, +0.02%
PreVGPRs: 80197 -> 80194 (-0.00%)

Signed-off-by: Georg Lehmann <dadschoorse@gmail.com>
---
 src/compiler/nir/nir_opt_algebraic.py | 12 ++++++++++--
 1 file changed, 10 insertions(+), 2 deletions(-)

diff --git a/src/compiler/nir/nir_opt_algebraic.py b/src/compiler/nir/nir_opt_algebraic.py
index 9ab8542b0ff5..0dce2ccac3ea 100644
--- a/src/compiler/nir/nir_opt_algebraic.py
+++ b/src/compiler/nir/nir_opt_algebraic.py
@@ -118,8 +118,6 @@ optimizations = [
    (('irem', a, 1), 0),
    (('irem', a, -1), 0),
    (('udiv', a, '#b(is_pos_power_of_two)'), ('ushr', a, ('find_lsb', b)), '!options->lower_bitops'),
-   (('idiv', a, '#b(is_pos_power_of_two)'), ('imul', ('isign', a), ('ushr', ('iabs', a), ('find_lsb', b))), '!options->lower_bitops'),
-   (('idiv', a, '#b(is_neg_power_of_two)'), ('ineg', ('imul', ('isign', a), ('ushr', ('iabs', a), ('find_lsb', ('iabs', b))))), '!options->lower_bitops'),
    (('umod', a, '#b(is_pos_power_of_two)'), ('iand', a, ('isub', b, 1)), '!options->lower_bitops'),
    (('imod', a, '#b(is_pos_power_of_two)'), ('iand', a, ('isub', b, 1)), '!options->lower_bitops'),
    (('imod', a, '#b(is_neg_power_of_two)'), ('bcsel', ('ieq', ('ior', a, b), b), 0, ('ior', a, b)), '!options->lower_bitops'),
@@ -272,6 +270,16 @@ optimizations = [
     ('ffmaz', a, b, c), 'options->has_fmulz && !'+signed_zero_inf_nan_preserve_32),
 ]
 
+for s in [8, 16, 32, 64]:
+    # idiv -> ishr + some code to ensure that ishr rounds towards zero
+    bit = ('find_lsb', ('iabs', b))
+    idivs = 'idiv@{}'.format(s)
+    division_by_ppot = ('ishr', ('iadd', a, ('ushr', ('ishr', a, s - 1), ('isub', s, bit))), bit)
+    optimizations.extend([
+       ((idivs, a, '#b(is_pos_power_of_two)'), division_by_ppot, '!options->lower_bitops'),
+       ((idivs, a, '#b(is_neg_power_of_two)'), ('ineg', division_by_ppot), '!options->lower_bitops'),
+    ])
+
 # Shorthand for the expansion of just the dot product part of the [iu]dp4a
 # instructions.
 sdot_4x8_a_b = ('iadd', ('iadd', ('imul', ('extract_i8', a, 0), ('extract_i8', b, 0)),
-- 
GitLab

