From 94bdad3cb3a97348a9877ef06fb79c650164dd90 Mon Sep 17 00:00:00 2001
From: Mykhailo Skorokhodov <mykhailo.skorokhodov@globallogic.com>
Date: Wed, 15 Mar 2023 22:31:50 +0200
Subject: [PATCH 1/3] mesa: Add formats to _mesa_is_compressed_formats()

The commit allows detecting some compressed
formats as compressed
by the _mesa_is_compressed_format() function.

Signed-off-by: Mykhailo Skorokhodov <mykhailo.skorokhodov@globallogic.com>
---
 src/mesa/main/glformats.c | 13 +++++++++++++
 1 file changed, 13 insertions(+)

diff --git a/src/mesa/main/glformats.c b/src/mesa/main/glformats.c
index 61ddef43f76d..9ae57480282f 100644
--- a/src/mesa/main/glformats.c
+++ b/src/mesa/main/glformats.c
@@ -1331,6 +1331,19 @@ _mesa_is_compressed_format(const struct gl_context *ctx, GLenum format)
    case GL_PALETTE8_RGBA4_OES:
    case GL_PALETTE8_RGB5_A1_OES:
       return _mesa_is_gles1(ctx);
+   case GL_COMPRESSED_SRGB:
+   case GL_COMPRESSED_SRGB_ALPHA:
+   case GL_COMPRESSED_SLUMINANCE:
+   case GL_COMPRESSED_SLUMINANCE_ALPHA:
+      return _mesa_has_EXT_texture_sRGB(ctx);
+   case GL_COMPRESSED_RG:
+   case GL_COMPRESSED_RED:
+       return _mesa_is_gles(ctx) ?
+              _mesa_has_EXT_texture_rg(ctx) :
+              _mesa_has_ARB_texture_rg(ctx);
+   case GL_COMPRESSED_RGB:
+   case GL_COMPRESSED_RGBA:
+      return true;
    }
 
    switch (_mesa_get_format_layout(m_format)) {
-- 
GitLab


From 5cc585b2fe6128d786be7e96581235f782047771 Mon Sep 17 00:00:00 2001
From: Mykhailo Skorokhodov <mykhailo.skorokhodov@globallogic.com>
Date: Thu, 13 Apr 2023 00:56:52 +0300
Subject: [PATCH 2/3] mesa: Check generic formats for 1D, 3D, Rectangle
 targets.

Signed-off-by: Mykhailo Skorokhodov <mykhailo.skorokhodov@globallogic.com>
---
 src/mesa/main/teximage.c | 39 +++++++++++++++++++++++++++++++++++++++
 1 file changed, 39 insertions(+)

diff --git a/src/mesa/main/teximage.c b/src/mesa/main/teximage.c
index 53b1e368fd1a..dd824c330903 100644
--- a/src/mesa/main/teximage.c
+++ b/src/mesa/main/teximage.c
@@ -1489,6 +1489,29 @@ write_error(GLenum *err_ptr, GLenum error)
    return error == GL_NO_ERROR;
 }
 
+static bool
+is_generic_compressed_format(const struct gl_context *ctx,
+                             GLenum intFormat)
+{
+   switch (intFormat) {
+   case GL_COMPRESSED_SRGB:
+   case GL_COMPRESSED_SRGB_ALPHA:
+   case GL_COMPRESSED_SLUMINANCE:
+   case GL_COMPRESSED_SLUMINANCE_ALPHA:
+      return _mesa_has_EXT_texture_sRGB(ctx);
+   case GL_COMPRESSED_RG:
+   case GL_COMPRESSED_RED:
+      return _mesa_is_gles(ctx) ?
+             _mesa_has_EXT_texture_rg(ctx) :
+             _mesa_has_ARB_texture_rg(ctx);
+   case GL_COMPRESSED_RGB:
+   case GL_COMPRESSED_RGBA:
+      return true;
+   default:
+      return false;
+   }
+}
+
 /**
  * Helper function to determine whether a target and specific compression
  * format are supported. The error parameter returns GL_NO_ERROR if the
@@ -1504,10 +1527,24 @@ _mesa_target_can_be_compressed(const struct gl_context *ctx, GLenum target,
    enum mesa_format_layout layout = _mesa_get_format_layout(format);
 
    switch (target) {
+   case GL_TEXTURE_1D_ARRAY:
+   case GL_PROXY_TEXTURE_1D_ARRAY:
+      if (!_mesa_has_EXT_texture_array(ctx))
+         break;
+      FALLTHROUGH;
+   case GL_TEXTURE_1D:
+      target_can_be_compresed =
+         is_generic_compressed_format(ctx, intFormat);
+      break;
    case GL_TEXTURE_2D:
    case GL_PROXY_TEXTURE_2D:
       target_can_be_compresed = GL_TRUE; /* true for any compressed format so far */
       break;
+   case GL_TEXTURE_RECTANGLE:
+      target_can_be_compresed =
+         _mesa_has_ARB_texture_rectangle(ctx) &&
+         is_generic_compressed_format(ctx, intFormat);
+      break;
    case GL_PROXY_TEXTURE_CUBE_MAP:
    case GL_TEXTURE_CUBE_MAP:
    case GL_TEXTURE_CUBE_MAP_POSITIVE_X:
@@ -1604,6 +1641,8 @@ _mesa_target_can_be_compressed(const struct gl_context *ctx, GLenum target,
             return write_error(error, GL_INVALID_OPERATION);
          break;
       default:
+         target_can_be_compresed =
+            is_generic_compressed_format(ctx, intFormat);
          break;
       }
       FALLTHROUGH;
-- 
GitLab


From 0f9ee6e41e990ece5ee1060d655104dee817ee6a Mon Sep 17 00:00:00 2001
From: Mykhailo Skorokhodov <mykhailo.skorokhodov@globallogic.com>
Date: Fri, 3 Mar 2023 12:33:52 +0200
Subject: [PATCH 3/3] mesa: Implement GL_CLEAR_TEXTURE flag

Closes: https://gitlab.freedesktop.org/mesa/mesa/-/issues/7455
Signed-off-by: Mykhailo Skorokhodov <mykhailo.skorokhodov@globallogic.com>
---
 src/mesa/main/formatquery.c | 30 +++++++++++++++++++++++++++++-
 1 file changed, 29 insertions(+), 1 deletion(-)

diff --git a/src/mesa/main/formatquery.c b/src/mesa/main/formatquery.c
index 88f8c1759857..fae0d8f86b60 100644
--- a/src/mesa/main/formatquery.c
+++ b/src/mesa/main/formatquery.c
@@ -168,6 +168,15 @@ _legal_parameters(struct gl_context *ctx, GLenum target, GLenum internalformat,
                      _mesa_enum_to_string(pname));
          return false;
       }
+      break;
+
+   case GL_CLEAR_TEXTURE:
+      if (!_mesa_has_ARB_clear_texture(ctx)) {
+         _mesa_error(ctx, GL_INVALID_ENUM,
+                     "glGetInternalformativ(pname=%s)",
+                     _mesa_enum_to_string(pname));
+         return false;
+      }
       FALLTHROUGH;
    case GL_INTERNALFORMAT_SUPPORTED:
    case GL_INTERNALFORMAT_PREFERRED:
@@ -389,6 +398,7 @@ _set_default_response(GLenum pname, GLint buffer[16])
    case GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE:
    case GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE:
    case GL_CLEAR_BUFFER:
+   case GL_CLEAR_TEXTURE:
    case GL_TEXTURE_VIEW:
    case GL_VIEW_COMPATIBILITY_CLASS:
       buffer[0] = GL_NONE;
@@ -525,7 +535,8 @@ _is_resource_supported(struct gl_context *ctx, GLenum target,
          return false;
 
       /* additional checks for depth textures */
-      if (!_mesa_legal_texture_base_format_for_target(ctx, target, internalformat))
+      if (!_mesa_legal_texture_base_format_for_target(ctx, target, internalformat) &&
+          !(pname == GL_CLEAR_TEXTURE && _mesa_is_depth_or_stencil_format(internalformat)))
          return false;
 
       /* additional checks for compressed textures */
@@ -734,6 +745,7 @@ _mesa_query_internal_format_default(struct gl_context *ctx, GLenum target,
    case GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE:
    case GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE:
    case GL_CLEAR_BUFFER:
+   case GL_CLEAR_TEXTURE:
    case GL_TEXTURE_VIEW:
    case GL_TEXTURE_SHADOW:
    case GL_TEXTURE_GATHER:
@@ -1552,6 +1564,22 @@ _mesa_GetInternalformativ(GLenum target, GLenum internalformat, GLenum pname,
       st_QueryInternalFormat(ctx, target, internalformat, pname,
                                       buffer);
       break;
+   case GL_CLEAR_TEXTURE: {
+      if (target == GL_TEXTURE_BUFFER ||
+          target == GL_RENDERBUFFER)
+         goto end;
+
+      if (_mesa_is_compressed_format(ctx, internalformat))
+         goto end;
+
+      if (!_mesa_is_color_format(internalformat) &&
+          !_mesa_is_depth_or_stencil_format(internalformat))
+            goto end;
+
+      st_QueryInternalFormat(ctx, target, internalformat, pname,
+                             buffer);
+      break;
+   }
 
    case GL_TEXTURE_VIEW:
    case GL_VIEW_COMPATIBILITY_CLASS:
-- 
GitLab

