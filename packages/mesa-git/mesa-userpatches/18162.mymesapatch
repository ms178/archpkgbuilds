From 456bb0554462ff719113d914c424db788ee057e9 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Timur=20Krist=C3=B3f?= <timur.kristof@gmail.com>
Date: Sat, 20 Aug 2022 22:55:45 +0200
Subject: [PATCH] aco: Fix inverse comparison optimization.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Some time ago we stopped using s_andn2 with exec for booleans.
The reasoning behind that change was that those booleans will be
always anded with exec when used.

However, we forgot to update combine_inverse_comparison so it
stopped working after that.

Fossil DB stats on Navi 21:

Totals from 12244 (9.08% of 134906) affected shaders:
VGPRs: 801024 -> 801296 (+0.03%); split: -0.00%, +0.04%
SpillSGPRs: 8863 -> 8893 (+0.34%)
CodeSize: 100441176 -> 100218028 (-0.22%); split: -0.22%, +0.00%
MaxWaves: 204966 -> 204920 (-0.02%); split: +0.00%, -0.02%
Instrs: 18693994 -> 18645775 (-0.26%); split: -0.26%, +0.00%
Latency: 262490493 -> 262110461 (-0.14%); split: -0.16%, +0.02%
InvThroughput: 52241173 -> 52203032 (-0.07%); split: -0.08%, +0.01%
VClause: 328485 -> 328534 (+0.01%); split: -0.03%, +0.05%
SClause: 680517 -> 680389 (-0.02%); split: -0.02%, +0.00%
Copies: 1327421 -> 1368169 (+3.07%); split: -0.03%, +3.10%
Branches: 546766 -> 546742 (-0.00%)
PreSGPRs: 910923 -> 909306 (-0.18%)
PreVGPRs: 765610 -> 766401 (+0.10%)

Signed-off-by: Timur Krist√≥f <timur.kristof@gmail.com>
---
 src/amd/compiler/aco_optimizer.cpp | 11 +++--------
 1 file changed, 3 insertions(+), 8 deletions(-)

diff --git a/src/amd/compiler/aco_optimizer.cpp b/src/amd/compiler/aco_optimizer.cpp
index 564c658c9c19..b24c8375ff9e 100644
--- a/src/amd/compiler/aco_optimizer.cpp
+++ b/src/amd/compiler/aco_optimizer.cpp
@@ -2392,12 +2392,10 @@ combine_constant_comparison_ordering(opt_ctx& ctx, aco_ptr<Instruction>& instr)
 bool
 combine_inverse_comparison(opt_ctx& ctx, aco_ptr<Instruction>& instr)
 {
-   if (!instr->operands[0].isFixed() || instr->operands[0].physReg() != exec)
-      return false;
    if (ctx.uses[instr->definitions[1].tempId()])
       return false;
 
-   Instruction* cmp = follow_operand(ctx, instr->operands[1]);
+   Instruction* cmp = follow_operand(ctx, instr->operands[0]);
    if (!cmp)
       return false;
 
@@ -4213,7 +4211,8 @@ combine_instruction(opt_ctx& ctx, aco_ptr<Instruction>& instr)
               ctx.program->gfx_level >= GFX9) {
       combine_salu_lshl_add(ctx, instr);
    } else if (instr->opcode == aco_opcode::s_not_b32 || instr->opcode == aco_opcode::s_not_b64) {
-      combine_salu_not_bitwise(ctx, instr);
+      if (!combine_salu_not_bitwise(ctx, instr))
+         combine_inverse_comparison(ctx, instr);
    } else if (instr->opcode == aco_opcode::s_and_b32 || instr->opcode == aco_opcode::s_or_b32 ||
               instr->opcode == aco_opcode::s_and_b64 || instr->opcode == aco_opcode::s_or_b64) {
       if (combine_ordering_test(ctx, instr)) {
@@ -4242,10 +4241,6 @@ combine_instruction(opt_ctx& ctx, aco_ptr<Instruction>& instr)
          }
       }
    }
-
-   /* do this after combine_salu_n2() */
-   if (instr->opcode == aco_opcode::s_andn2_b32 || instr->opcode == aco_opcode::s_andn2_b64)
-      combine_inverse_comparison(ctx, instr);
 }
 
 bool
-- 
GitLab

