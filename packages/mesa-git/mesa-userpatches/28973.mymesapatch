From 6ebf3174fab8d93a1b1a9e0811ab80787e1fcd7a Mon Sep 17 00:00:00 2001
From: David Heidelberg <david.heidelberg@collabora.com>
Date: Thu, 25 Apr 2024 06:53:17 -0700
Subject: [PATCH 1/2] replace zlib with zlib-ng

Main reason: performance. Not measured against Mesa, but zlib lacks
assembly performance optimization.

Side effect of this migration is also avoiding apps shipping old custom
zlib, which breaks Mesa3D when we start using "modern" zlib features.
See: https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/28233

Closes: https://gitlab.freedesktop.org/mesa/mesa/-/issues/9194
Closes: https://gitlab.freedesktop.org/mesa/mesa/-/issues/9203
Closes: https://gitlab.freedesktop.org/mesa/mesa/-/issues/9204

Signed-off-by: David Heidelberg <david.heidelberg@collabora.com>
---
 android/Android.mk                            |  4 ++--
 meson.build                                   |  8 +++----
 meson_options.txt                             |  4 ++--
 src/broadcom/cle/meson.build                  |  2 +-
 src/broadcom/cle/v3d_decoder.c                | 12 +++++-----
 src/freedreno/common/freedreno_rd_output.c    |  2 +-
 src/freedreno/common/freedreno_rd_output.h    |  2 +-
 src/gallium/drivers/freedreno/trace-parser.py |  4 ++--
 src/gallium/tools/trace/parse.py              |  2 +-
 src/gallium/tools/trace/pytracediff.py        |  2 +-
 src/intel/decoder/intel_decoder.c             | 14 +++++------
 src/intel/tools/aubinator_error_decode.c      | 12 +++++-----
 src/intel/tools/error2aub.c                   | 12 +++++-----
 src/intel/tools/error2hangdump.c              | 12 +++++-----
 src/intel/tools/meson.build                   | 12 +++++-----
 src/util/compress.c                           | 24 +++++++++----------
 src/util/crc32.c                              | 22 +++++++----------
 src/util/gen_zipped_xml_file.py               |  4 ++--
 src/util/meson.build                          |  2 +-
 subprojects/zlib.wrap                         | 13 ----------
 20 files changed, 76 insertions(+), 93 deletions(-)
 delete mode 100644 subprojects/zlib.wrap

diff --git a/meson.build b/meson.build
index 51baa40450f4b..acbf0760249de 100644
--- a/meson.build
+++ b/meson.build
@@ -1563,10 +1563,10 @@ else
 endif
 
 # IMPORTANT: We can't upgrade Zlib beyond 1.2.5 because it would break Viewperf.
-dep_zlib = dependency('zlib', version : '>= 1.2.3',
+dep_zlib_ng = dependency('zlib-ng', version : '>= 1.3.0',
                       allow_fallback: true,
-                      required : get_option('zlib'))
-if dep_zlib.found()
+                      required : get_option('zlib_ng'))
+if dep_zlib_ng.found()
   pre_args += '-DHAVE_ZLIB'
 endif
 
@@ -1575,7 +1575,7 @@ if dep_zstd.found()
   pre_args += '-DHAVE_ZSTD'
 endif
 
-with_compression = dep_zlib.found() or dep_zstd.found()
+with_compression = dep_zlib_ng.found() or dep_zstd.found()
 if with_compression
   pre_args += '-DHAVE_COMPRESSION'
 elif with_shader_cache
diff --git a/meson_options.txt b/meson_options.txt
index 7c021c14cfe3a..d3849f5180969 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -567,11 +567,11 @@ option(
 )
 
 option(
-   'zlib',
+   'zlib_ng',
    type : 'feature',
    deprecated: {'true': 'enabled', 'false': 'disabled'},
    value : 'enabled',
-   description : 'Use ZLIB to build driver. Default: enabled'
+   description : 'Use ZLIB-ng to build driver. Default: enabled'
 )
 
 option(
diff --git a/src/broadcom/cle/meson.build b/src/broadcom/cle/meson.build
index da88cd220a5e8..7a0b4a86c4943 100644
--- a/src/broadcom/cle/meson.build
+++ b/src/broadcom/cle/meson.build
@@ -62,6 +62,6 @@ libbroadcom_cle = static_library(
   include_directories : [inc_include, inc_src, inc_broadcom],
   c_args : [no_override_init_args, expat_args],
   gnu_symbol_visibility : 'hidden',
-  dependencies : [dep_libdrm, dep_valgrind, dep_expat, dep_zlib],
+  dependencies : [dep_libdrm, dep_valgrind, dep_expat, dep_zlib_ng],
   build_by_default : false,
 )
diff --git a/src/broadcom/cle/v3d_decoder.c b/src/broadcom/cle/v3d_decoder.c
index 46cd152e599d5..bb94429491ddd 100644
--- a/src/broadcom/cle/v3d_decoder.c
+++ b/src/broadcom/cle/v3d_decoder.c
@@ -34,7 +34,7 @@
 #include <expat.h>
 #endif
 #include <inttypes.h>
-#include <zlib.h>
+#include <zlib-ng.h>
 
 #include <util/macros.h>
 #include <util/ralloc.h>
@@ -575,7 +575,7 @@ static uint32_t zlib_inflate(const void *compressed_data,
         zstream.next_in = (unsigned char *)compressed_data;
         zstream.avail_in = compressed_len;
 
-        if (inflateInit(&zstream) != Z_OK)
+        if (zng_inflateInit(&zstream) != Z_OK)
                 return 0;
 
         out = malloc(4096);
@@ -583,13 +583,13 @@ static uint32_t zlib_inflate(const void *compressed_data,
         zstream.avail_out = 4096;
 
         do {
-                switch (inflate(&zstream, Z_SYNC_FLUSH)) {
+                switch (zng_inflate(&zstream, Z_SYNC_FLUSH)) {
                 case Z_STREAM_END:
                         goto end;
                 case Z_OK:
                         break;
                 default:
-                        inflateEnd(&zstream);
+                        zng_inflateEnd(&zstream);
                         return 0;
                 }
 
@@ -598,7 +598,7 @@ static uint32_t zlib_inflate(const void *compressed_data,
 
                 out = realloc(out, 2*zstream.total_out);
                 if (out == NULL) {
-                        inflateEnd(&zstream);
+                        zng_inflateEnd(&zstream);
                         return 0;
                 }
 
@@ -606,7 +606,7 @@ static uint32_t zlib_inflate(const void *compressed_data,
                 zstream.avail_out = zstream.total_out;
         } while (1);
  end:
-        inflateEnd(&zstream);
+        zng_inflateEnd(&zstream);
         *out_ptr = out;
         return zstream.total_out;
 }
diff --git a/src/freedreno/common/freedreno_rd_output.c b/src/freedreno/common/freedreno_rd_output.c
index 17a5c395cb99e..3bb7e5df2a8df 100644
--- a/src/freedreno/common/freedreno_rd_output.c
+++ b/src/freedreno/common/freedreno_rd_output.c
@@ -91,7 +91,7 @@ fd_rd_output_init(struct fd_rd_output *output, char* output_name)
       char file_path[PATH_MAX];
       snprintf(file_path, sizeof(file_path), "%s/%s_combined.rd",
                fd_rd_output_base_path, output->name);
-      output->file = gzopen(file_path, "w");
+      output->file = zng_gzopen(file_path, "w");
    }
 
    if (FD_RD_DUMP(TRIGGER)) {
diff --git a/src/freedreno/common/freedreno_rd_output.h b/src/freedreno/common/freedreno_rd_output.h
index 7d597b79ebe4e..34faff32450f6 100644
--- a/src/freedreno/common/freedreno_rd_output.h
+++ b/src/freedreno/common/freedreno_rd_output.h
@@ -8,7 +8,7 @@
 
 #include <stdbool.h>
 #include <stdint.h>
-#include <zlib.h>
+#include <zlib-ng.h>
 
 #include "redump.h"
 
diff --git a/src/gallium/drivers/freedreno/trace-parser.py b/src/gallium/drivers/freedreno/trace-parser.py
index 8966588a30048..e6d01bf6f3d83 100755
--- a/src/gallium/drivers/freedreno/trace-parser.py
+++ b/src/gallium/drivers/freedreno/trace-parser.py
@@ -2,7 +2,7 @@
 
 import re
 import sys
-import gzip
+from zlib_ng import gzip_ng
 import io
 
 # Captures per-frame state, including all the renderpasses, and
@@ -140,7 +140,7 @@ class RenderPass:
 def main():
     filename = sys.argv[1]
     if filename.endswith(".gz"):
-        file = gzip.open(filename, "r")
+        file = gzip_ng.open(filename, "r")
         file = io.TextIOWrapper(file)
     else:
         file = open(filename, "r")
diff --git a/src/gallium/tools/trace/parse.py b/src/gallium/tools/trace/parse.py
index 5611814ddbaa7..6dd7fe48b7499 100755
--- a/src/gallium/tools/trace/parse.py
+++ b/src/gallium/tools/trace/parse.py
@@ -427,7 +427,7 @@ class Main:
         for fname in args.filename:
             try:
                 if fname.endswith('.gz'):
-                    from gzip import GzipFile
+                    from zlib_ng import GzipFile
                     stream = io.TextIOWrapper(GzipFile(fname, 'rb'))
                 elif fname.endswith('.bz2'):
                     from bz2 import BZ2File
diff --git a/src/gallium/tools/trace/pytracediff.py b/src/gallium/tools/trace/pytracediff.py
index 15ea36f8306ba..eb40cb92c3bd7 100755
--- a/src/gallium/tools/trace/pytracediff.py
+++ b/src/gallium/tools/trace/pytracediff.py
@@ -233,7 +233,7 @@ def pkk_parse_trace(filename, options, state):
     pkk_info(f"Parsing {filename} ...")
     try:
         if filename.endswith(".gz"):
-            from gzip import GzipFile
+            from zlib_ng import GzipFile
             stream = io.TextIOWrapper(GzipFile(filename, "rb"))
         elif filename.endswith(".bz2"):
             from bz2 import BZ2File
diff --git a/src/intel/decoder/intel_decoder.c b/src/intel/decoder/intel_decoder.c
index bf0c857dbde93..709ea70ec6cf5 100644
--- a/src/intel/decoder/intel_decoder.c
+++ b/src/intel/decoder/intel_decoder.c
@@ -28,7 +28,7 @@
 #include <string.h>
 #include <expat.h>
 #include <inttypes.h>
-#include <zlib.h>
+#include <zlib-ng.h>
 
 #include <util/list.h>
 #include <util/macros.h>
@@ -708,7 +708,7 @@ static uint32_t zlib_inflate(const void *compressed_data,
                              uint32_t compressed_len,
                              void **out_ptr)
 {
-   struct z_stream_s zstream;
+   struct zng_stream_s zstream;
    void *out;
 
    memset(&zstream, 0, sizeof(zstream));
@@ -716,7 +716,7 @@ static uint32_t zlib_inflate(const void *compressed_data,
    zstream.next_in = (unsigned char *)compressed_data;
    zstream.avail_in = compressed_len;
 
-   if (inflateInit(&zstream) != Z_OK)
+   if (zng_inflateInit(&zstream) != Z_OK)
       return 0;
 
    out = malloc(4096);
@@ -724,13 +724,13 @@ static uint32_t zlib_inflate(const void *compressed_data,
    zstream.avail_out = 4096;
 
    do {
-      switch (inflate(&zstream, Z_SYNC_FLUSH)) {
+      switch (zng_inflate(&zstream, Z_SYNC_FLUSH)) {
       case Z_STREAM_END:
          goto end;
       case Z_OK:
          break;
       default:
-         inflateEnd(&zstream);
+         zng_inflateEnd(&zstream);
          return 0;
       }
 
@@ -739,7 +739,7 @@ static uint32_t zlib_inflate(const void *compressed_data,
 
       out = realloc(out, 2*zstream.total_out);
       if (out == NULL) {
-         inflateEnd(&zstream);
+         zng_inflateEnd(&zstream);
          return 0;
       }
 
@@ -747,7 +747,7 @@ static uint32_t zlib_inflate(const void *compressed_data,
       zstream.avail_out = zstream.total_out;
    } while (1);
  end:
-   inflateEnd(&zstream);
+   zng_inflateEnd(&zstream);
    *out_ptr = out;
    return zstream.total_out;
 }
diff --git a/src/intel/tools/aubinator_error_decode.c b/src/intel/tools/aubinator_error_decode.c
index 92e6e20138f6b..e1b5a7f14421e 100644
--- a/src/intel/tools/aubinator_error_decode.c
+++ b/src/intel/tools/aubinator_error_decode.c
@@ -36,7 +36,7 @@
 #include <err.h>
 #include <assert.h>
 #include <getopt.h>
-#include <zlib.h>
+#include <zlib-ng.h>
 
 #include "aubinator_error_decode_lib.h"
 #include "aubinator_error_decode_xe.h"
@@ -272,7 +272,7 @@ static int zlib_inflate(uint32_t **ptr, int len)
    zstream.next_in = (unsigned char *)*ptr;
    zstream.avail_in = 4*len;
 
-   if (inflateInit(&zstream) != Z_OK)
+   if (zng_inflateInit(&zstream) != Z_OK)
       return 0;
 
    out = malloc(out_size);
@@ -280,13 +280,13 @@ static int zlib_inflate(uint32_t **ptr, int len)
    zstream.avail_out = out_size;
 
    do {
-      switch (inflate(&zstream, Z_SYNC_FLUSH)) {
+      switch (zng_inflate(&zstream, Z_SYNC_FLUSH)) {
       case Z_STREAM_END:
          goto end;
       case Z_OK:
          break;
       default:
-         inflateEnd(&zstream);
+         zng_inflateEnd(&zstream);
          return 0;
       }
 
@@ -295,7 +295,7 @@ static int zlib_inflate(uint32_t **ptr, int len)
 
       out = realloc(out, 2*zstream.total_out);
       if (out == NULL) {
-         inflateEnd(&zstream);
+         zng_inflateEnd(&zstream);
          return 0;
       }
 
@@ -303,7 +303,7 @@ static int zlib_inflate(uint32_t **ptr, int len)
       zstream.avail_out = zstream.total_out;
    } while (1);
  end:
-   inflateEnd(&zstream);
+   zng_inflateEnd(&zstream);
    free(*ptr);
    *ptr = out;
    return zstream.total_out / 4;
diff --git a/src/intel/tools/error2aub.c b/src/intel/tools/error2aub.c
index 19e09aede3f5e..5bff670bc594f 100644
--- a/src/intel/tools/error2aub.c
+++ b/src/intel/tools/error2aub.c
@@ -30,7 +30,7 @@
 #include <stdlib.h>
 #include <string.h>
 #include <stdarg.h>
-#include <zlib.h>
+#include <zlib-ng.h>
 
 #include "util/list.h"
 
@@ -53,7 +53,7 @@ static int zlib_inflate(uint32_t **ptr, int len)
    zstream.next_in = (unsigned char *)*ptr;
    zstream.avail_in = 4*len;
 
-   if (inflateInit(&zstream) != Z_OK)
+   if (zng_inflateInit(&zstream) != Z_OK)
       return 0;
 
    out = malloc(out_size);
@@ -61,13 +61,13 @@ static int zlib_inflate(uint32_t **ptr, int len)
    zstream.avail_out = out_size;
 
    do {
-      switch (inflate(&zstream, Z_SYNC_FLUSH)) {
+      switch (zng_inflate(&zstream, Z_SYNC_FLUSH)) {
       case Z_STREAM_END:
          goto end;
       case Z_OK:
          break;
       default:
-         inflateEnd(&zstream);
+         zng_inflateEnd(&zstream);
          return 0;
       }
 
@@ -76,7 +76,7 @@ static int zlib_inflate(uint32_t **ptr, int len)
 
       out = realloc(out, 2*zstream.total_out);
       if (out == NULL) {
-         inflateEnd(&zstream);
+         zng_inflateEnd(&zstream);
          return 0;
       }
 
@@ -84,7 +84,7 @@ static int zlib_inflate(uint32_t **ptr, int len)
       zstream.avail_out = zstream.total_out;
    } while (1);
  end:
-   inflateEnd(&zstream);
+   zng_inflateEnd(&zstream);
    free(*ptr);
    *ptr = out;
    return zstream.total_out / 4;
diff --git a/src/intel/tools/error2hangdump.c b/src/intel/tools/error2hangdump.c
index 8b571c363ead6..5c06534480ca0 100644
--- a/src/intel/tools/error2hangdump.c
+++ b/src/intel/tools/error2hangdump.c
@@ -30,7 +30,7 @@
 #include <stdlib.h>
 #include <string.h>
 #include <stdarg.h>
-#include <zlib.h>
+#include <zlib-ng.h>
 
 #include "util/list.h"
 
@@ -52,7 +52,7 @@ static int zlib_inflate(uint32_t **ptr, int len)
    zstream.next_in = (unsigned char *)*ptr;
    zstream.avail_in = 4*len;
 
-   if (inflateInit(&zstream) != Z_OK)
+   if (zng_inflateInit(&zstream) != Z_OK)
       return 0;
 
    out = malloc(out_size);
@@ -60,13 +60,13 @@ static int zlib_inflate(uint32_t **ptr, int len)
    zstream.avail_out = out_size;
 
    do {
-      switch (inflate(&zstream, Z_SYNC_FLUSH)) {
+      switch (zng_inflate(&zstream, Z_SYNC_FLUSH)) {
       case Z_STREAM_END:
          goto end;
       case Z_OK:
          break;
       default:
-         inflateEnd(&zstream);
+         zng_inflateEnd(&zstream);
          return 0;
       }
 
@@ -75,7 +75,7 @@ static int zlib_inflate(uint32_t **ptr, int len)
 
       out = realloc(out, 2*zstream.total_out);
       if (out == NULL) {
-         inflateEnd(&zstream);
+         zng_inflateEnd(&zstream);
          return 0;
       }
 
@@ -83,7 +83,7 @@ static int zlib_inflate(uint32_t **ptr, int len)
       zstream.avail_out = zstream.total_out;
    } while (1);
  end:
-   inflateEnd(&zstream);
+   zng_inflateEnd(&zstream);
    free(*ptr);
    *ptr = out;
    return zstream.total_out / 4;
diff --git a/src/intel/tools/meson.build b/src/intel/tools/meson.build
index ac528beb48f2e..7184912c5f2ef 100644
--- a/src/intel/tools/meson.build
+++ b/src/intel/tools/meson.build
@@ -32,7 +32,7 @@ libaub = static_library(
 aubinator = executable(
   'aubinator',
   files('aubinator.c'),
-  dependencies : [idep_mesautil, dep_expat, dep_zlib, dep_dl, dep_thread, dep_m, idep_intel_dev,
+  dependencies : [idep_mesautil, dep_expat, dep_zlib_ng, dep_dl, dep_thread, dep_m, idep_intel_dev,
                   idep_intel_decoder_brw, idep_intel_decoder_elk,
                   idep_intel_compiler_brw, idep_intel_compiler_elk],
   include_directories : [inc_include, inc_src, inc_intel],
@@ -53,7 +53,7 @@ aubinator_error_decode = executable(
         'error_decode_lib.h',
         'error_decode_xe_lib.c',
         'error_decode_xe_lib.h'),
-  dependencies : [idep_mesautil, dep_zlib, dep_thread, idep_intel_dev,
+  dependencies : [idep_mesautil, dep_zlib_ng, dep_thread, idep_intel_dev,
                   idep_intel_decoder_brw, idep_intel_decoder_elk,
                   idep_intel_compiler_brw, idep_intel_compiler_elk],
   include_directories : [inc_include, inc_src, inc_intel],
@@ -70,7 +70,7 @@ error2aub = executable(
         'error2aub.c',
         'error_decode_lib.c',
         'error_decode_lib.h'),
-  dependencies : [dep_zlib, dep_dl, dep_thread, dep_m, idep_intel_dev],
+  dependencies : [dep_zlib_ng, dep_dl, dep_thread, dep_m, idep_intel_dev],
   include_directories : [inc_include, inc_src, inc_intel],
   c_args : [no_override_init_args],
   gnu_symbol_visibility : 'hidden',
@@ -88,7 +88,7 @@ error2hangdump = executable(
         'error_decode_lib.h',
         'error_decode_xe_lib.c',
         'error_decode_xe_lib.h'),
-  dependencies : [dep_zlib, dep_dl, dep_thread, dep_m, idep_intel_dev],
+  dependencies : [dep_zlib_ng, dep_dl, dep_thread, dep_m, idep_intel_dev],
   include_directories : [inc_include, inc_src, inc_intel],
   c_args : [no_override_init_args],
   gnu_symbol_visibility : 'hidden',
@@ -183,7 +183,7 @@ if with_tools.contains('intel-ui')
   aubinator_viewer = executable(
     'aubinator_viewer',
     files('aubinator_viewer.cpp', 'aubinator_viewer_decoder.cpp'),
-    dependencies : [idep_mesautil, dep_zlib, dep_dl, dep_thread, dep_m, libintel_imgui_gtk_dep, idep_intel_dev,
+    dependencies : [idep_mesautil, dep_zlib_ng, dep_dl, dep_thread, dep_m, libintel_imgui_gtk_dep, idep_intel_dev,
                     idep_intel_compiler_brw, idep_intel_compiler_elk],
     include_directories : [inc_include, inc_src, inc_intel],
     link_with : [libintel_common, libaub],
@@ -198,7 +198,7 @@ if with_tools.contains('intel-ui')
     files('intel_hang_viewer.cpp', 'aubinator_viewer_decoder.cpp'),
     dependencies : [
       idep_mesautil,
-      dep_zlib,
+      dep_zlib_ng,
       dep_dl,
       dep_thread,
       dep_m,
diff --git a/src/util/compress.c b/src/util/compress.c
index 1f4b429a770f9..132e0fa3223e0 100644
--- a/src/util/compress.c
+++ b/src/util/compress.c
@@ -25,13 +25,13 @@
 
 #include <assert.h>
 
-/* Ensure that zlib uses 'const' in 'z_const' declarations. */
+/* Ensure that zlib uses 'const' in 'zng_const' declarations. */
 #ifndef ZLIB_CONST
 #define ZLIB_CONST
 #endif
 
 #ifdef HAVE_ZLIB
-#include "zlib.h"
+#include "zlib-ng.h"
 #endif
 
 #ifdef HAVE_ZSTD
@@ -87,7 +87,7 @@ util_compress_deflate(const uint8_t *in_data, size_t in_data_size,
    size_t compressed_size = 0;
 
    /* allocate deflate state */
-   z_stream strm;
+   zng_stream strm;
    strm.zalloc = Z_NULL;
    strm.zfree = Z_NULL;
    strm.opaque = Z_NULL;
@@ -96,14 +96,14 @@ util_compress_deflate(const uint8_t *in_data, size_t in_data_size,
    strm.avail_in = in_data_size;
    strm.avail_out = out_buff_size;
 
-   int ret = deflateInit(&strm, Z_BEST_COMPRESSION);
+   int ret = zng_deflateInit(&strm, Z_BEST_COMPRESSION);
    if (ret != Z_OK) {
-       (void) deflateEnd(&strm);
+       (void) zng_deflateEnd(&strm);
        return 0;
    }
 
    /* compress until end of in_data */
-   ret = deflate(&strm, Z_FINISH);
+   ret = zng_deflate(&strm, Z_FINISH);
 
    /* stream should be complete */
    assert(ret == Z_STREAM_END);
@@ -112,7 +112,7 @@ util_compress_deflate(const uint8_t *in_data, size_t in_data_size,
    }
 
    /* clean up and return */
-   (void) deflateEnd(&strm);
+   (void) zng_deflateEnd(&strm);
    return compressed_size;
 #else
    STATIC_ASSERT(false);
@@ -131,7 +131,7 @@ util_compress_inflate(const uint8_t *in_data, size_t in_data_size,
    size_t ret = ZSTD_decompress(out_data, out_data_size, in_data, in_data_size);
    return !ZSTD_isError(ret);
 #elif defined(HAVE_ZLIB)
-   z_stream strm;
+   zng_stream strm;
 
    /* allocate inflate state */
    strm.zalloc = Z_NULL;
@@ -142,24 +142,24 @@ util_compress_inflate(const uint8_t *in_data, size_t in_data_size,
    strm.next_out = out_data;
    strm.avail_out = out_data_size;
 
-   int ret = inflateInit(&strm);
+   int ret = zng_inflateInit(&strm);
    if (ret != Z_OK)
       return false;
 
-   ret = inflate(&strm, Z_NO_FLUSH);
+   ret = zng_inflate(&strm, Z_NO_FLUSH);
    assert(ret != Z_STREAM_ERROR);  /* state not clobbered */
 
    /* Unless there was an error we should have decompressed everything in one
     * go as we know the uncompressed file size.
     */
    if (ret != Z_STREAM_END) {
-      (void)inflateEnd(&strm);
+      (void)zng_inflateEnd(&strm);
       return false;
    }
    assert(strm.avail_out == 0);
 
    /* clean up and return */
-   (void)inflateEnd(&strm);
+   (void)zng_inflateEnd(&strm);
    return true;
 #else
    STATIC_ASSERT(false);
diff --git a/src/util/crc32.c b/src/util/crc32.c
index ec5ad2cc94c0c..8baaf466b7045 100644
--- a/src/util/crc32.c
+++ b/src/util/crc32.c
@@ -32,10 +32,15 @@
  * @author Jose Fonseca
  */
 
-
+#include "crc32.h"
 #ifdef HAVE_ZLIB
-#include <zlib.h>
-#endif
+#include <zlib-ng.h>
+uint32_t
+util_hash_crc32(const void *data, size_t size)
+{
+   return ~zng_crc32_z(0,data, size);
+}
+#else
 #include "crc32.h"
 
 
@@ -117,18 +122,9 @@ util_hash_crc32(const void *data, size_t size)
    const uint8_t *p = data;
    uint32_t crc = 0xffffffff;
 
-#ifdef HAVE_ZLIB
-   /* Prefer zlib's implementation for better performance.
-    * zlib's uInt is always "unsigned int" while size_t can be 64bit.
-    * Since 1.2.9 there's crc32_z that takes size_t, but use the more
-    * available function to avoid build system complications.
-    */
-   if ((uInt)size == size)
-      return ~crc32(0, data, size);
-#endif
-
    while (size--)
       crc = util_crc32_table[(crc ^ *p++) & 0xff] ^ (crc >> 8);
 
    return crc;
 }
+#endif
diff --git a/src/util/gen_zipped_xml_file.py b/src/util/gen_zipped_xml_file.py
index 8bddc143a62d9..21484af6c100d 100644
--- a/src/util/gen_zipped_xml_file.py
+++ b/src/util/gen_zipped_xml_file.py
@@ -4,7 +4,7 @@
 # SPDX-License-Identifier: MIT
 
 import sys
-import zlib
+from zlib_ng import zlib_ng
 import xml.etree.ElementTree as et
 
 
@@ -13,7 +13,7 @@ def main():
         print("No input xml file specified")
         sys.exit(1)
 
-    compress = zlib.compressobj()
+    compress = zlib_ng.compressobj()
 
     print("static const struct {")
     print("   uint32_t ver_10;")
diff --git a/src/util/meson.build b/src/util/meson.build
index 9f40c44c4e356..a1e718e9fd682 100644
--- a/src/util/meson.build
+++ b/src/util/meson.build
@@ -223,7 +223,7 @@ format_srgb = custom_target(
 )
 
 deps_for_libmesa_util = [
-  dep_zlib,
+  dep_zlib_ng,
   dep_clock,
   dep_thread,
   dep_atomic,
diff --git a/subprojects/zlib.wrap b/subprojects/zlib.wrap
deleted file mode 100644
index aa14de1774072..0000000000000
--- a/subprojects/zlib.wrap
+++ /dev/null
@@ -1,13 +0,0 @@
-[wrap-file]
-directory = zlib-1.3.1
-source_url = http://zlib.net/fossils/zlib-1.3.1.tar.gz
-source_fallback_url = https://github.com/mesonbuild/wrapdb/releases/download/zlib_1.3.1-1/zlib-1.3.1.tar.gz
-source_filename = zlib-1.3.1.tar.gz
-source_hash = 9a93b2b7dfdac77ceba5a558a580e74667dd6fede4585b91eefb60f03b72df23
-patch_filename = zlib_1.3.1-1_patch.zip
-patch_url = https://wrapdb.mesonbuild.com/v2/zlib_1.3.1-1/get_patch
-patch_hash = e79b98eb24a75392009cec6f99ca5cdca9881ff20bfa174e8b8926d5c7a47095
-wrapdb_version = 1.3.1-1
-
-[provide]
-zlib = zlib_dep
-- 
GitLab


From c8a87447405385330b2a8c668d709ab107e95a83 Mon Sep 17 00:00:00 2001
From: David Heidelberg <david.heidelberg@collabora.com>
Date: Mon, 29 Apr 2024 19:21:28 -0700
Subject: [PATCH 2/2] DO NOT MERGE: zlib-ng wrap

Doesn't work properly, Mesa3D build ends with:
```
[226/1971] Linking target src/mapi/shared-glapi/libglapi.so.0.0.0
FAILED: src/mapi/shared-glapi/libglapi.so.0.0.0
c++  -o src/mapi/shared-glapi/libglapi.so.0.0.0 src/mapi/shared-glapi/libglapi.so.0.0.0.p/.._entry.c.o src/mapi/shared-glapi/libglapi.so.0.0.0.p/.._u_current.c.o src/mapi/shared-glapi/libglapi.so.0.0.0.p/glapi.c.o src/mapi/shared-glapi/libglapi.so.0.0.0.p/stub.c.o src/mapi/shared-glapi/libglapi.so.0.0.0.p/table.c.o -Wl,--as-needed -Wl,--no-undefined -shared -fPIC -Wl,-soname,libglapi.so.0 '-Wl,-rpath,$ORIGIN/../../../subprojects/zlib-ng-2.1.6' -Wl,-rpath-link,/home/projects/mesa/build/subprojects/zlib-ng-2.1.6 -Wl,--start-group src/util/libmesa_util.a src/util/libmesa_util_sse41.a subprojects/zlib-ng-2.1.6/libzlib.so src/util/blake3/libblake3.a src/c11/impl/libmesa_util_c11.a -Wl,--gc-sections -pthread -Wl,--version-script,/home/projects/mesa/subprojects/zlib-ng-2.1.6/zlib-ng.map -lm /usr/lib/gcc/x86_64-linux-gnu/13/../../../x86_64-linux-gnu/libzstd.so /usr/lib/x86_64-linux-gnu/libunwind.so -Wl,--end-group -Wl,--version-script,/home/projects/mesa/subprojects/zlib-ng-2.1.6/zlib-ng.map
/usr/bin/ld: duplicate version tag `ZLIB_NG_2.1.0'
/usr/bin/ld: duplicate version tag `ZLIB_NG_2.0.0'
/usr/bin/ld: duplicate version tag `ZLIB_NG_GZ_2.0.0'
/usr/bin/ld: duplicate version tag `FAIL'
collect2: error: ld returned 1 exit status
```

Signed-off-by: David Heidelberg <david.heidelberg@collabora.com>
---
 subprojects/zlib-ng.wrap | 9 +++++++++
 1 file changed, 9 insertions(+)
 create mode 100644 subprojects/zlib-ng.wrap

diff --git a/subprojects/zlib-ng.wrap b/subprojects/zlib-ng.wrap
new file mode 100644
index 0000000000000..961b04f87d07f
--- /dev/null
+++ b/subprojects/zlib-ng.wrap
@@ -0,0 +1,9 @@
+[wrap-file]
+method = cmake
+directory = zlib-ng-2.1.6
+source_url = https://github.com/zlib-ng/zlib-ng/archive/refs/tags/2.1.6.tar.gz
+source_filename = zlib-ng-2.1.6.tar.gz
+source_hash = a5d504c0d52e2e2721e7e7d86988dec2e290d723ced2307145dedd06aeb6fef2
+wrapdb_version = 2.1.6-1
+[provide]
+zlib-ng = zlib_dep
-- 
GitLab

