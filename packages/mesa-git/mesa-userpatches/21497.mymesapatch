From 40771799e11af1957210352cd2a33a7b2d408509 Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Tue, 21 Feb 2023 17:00:05 +0100
Subject: [PATCH 1/6] spirv: add SpvCapabilityFragmentFullyCoveredEXT

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/compiler/shader_info.h        | 1 +
 src/compiler/spirv/spirv_to_nir.c | 4 ++++
 2 files changed, 5 insertions(+)

diff --git a/src/compiler/shader_info.h b/src/compiler/shader_info.h
index 2e3caa01700a..2fd60fac53bb 100644
--- a/src/compiler/shader_info.h
+++ b/src/compiler/shader_info.h
@@ -54,6 +54,7 @@ struct spirv_supported_capabilities {
    bool float64;
    bool float64_atomic_add;
    bool float64_atomic_min_max;
+   bool fragment_fully_covered;
    bool fragment_shader_sample_interlock;
    bool fragment_shader_pixel_interlock;
    bool fragment_shading_rate;
diff --git a/src/compiler/spirv/spirv_to_nir.c b/src/compiler/spirv/spirv_to_nir.c
index 299f4208c918..89be03bc206a 100644
--- a/src/compiler/spirv/spirv_to_nir.c
+++ b/src/compiler/spirv/spirv_to_nir.c
@@ -4889,6 +4889,10 @@ vtn_handle_preamble_instruction(struct vtn_builder *b, SpvOp opcode,
          spv_check_supported(subgroup_rotate, cap);
          break;
 
+      case SpvCapabilityFragmentFullyCoveredEXT:
+         spv_check_supported(fragment_fully_covered, cap);
+         break;
+
       default:
          vtn_fail("Unhandled capability: %s (%u)",
                   spirv_capability_to_string(cap), cap);
-- 
GitLab


From d07000c1bd54bb7720e8db9391502dc87c5c5173 Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Wed, 22 Feb 2023 16:31:18 +0100
Subject: [PATCH 2/6] spirv,nir: add support for SpvBuiltInFullyCoveredEXT

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/compiler/nir/nir.c                     | 4 ++++
 src/compiler/nir/nir_divergence_analysis.c | 1 +
 src/compiler/nir/nir_gather_info.c         | 1 +
 src/compiler/nir/nir_intrinsics.py         | 3 +++
 src/compiler/shader_enums.c                | 1 +
 src/compiler/shader_enums.h                | 6 ++++++
 src/compiler/spirv/vtn_variables.c         | 5 +++++
 7 files changed, 21 insertions(+)

diff --git a/src/compiler/nir/nir.c b/src/compiler/nir/nir.c
index 36074afa268c..b19c54871941 100644
--- a/src/compiler/nir/nir.c
+++ b/src/compiler/nir/nir.c
@@ -2501,6 +2501,8 @@ nir_intrinsic_from_system_value(gl_system_value val)
       return nir_intrinsic_load_mesh_view_count;
    case SYSTEM_VALUE_FRAG_SHADING_RATE:
       return nir_intrinsic_load_frag_shading_rate;
+   case SYSTEM_VALUE_FULLY_COVERED:
+      return nir_intrinsic_load_fully_covered;
    default:
       unreachable("system value does not directly correspond to intrinsic");
    }
@@ -2648,6 +2650,8 @@ nir_system_value_from_intrinsic(nir_intrinsic_op intrin)
       return SYSTEM_VALUE_FRAG_SHADING_RATE;
    case nir_intrinsic_load_mesh_view_count:
       return SYSTEM_VALUE_MESH_VIEW_COUNT;
+   case nir_intrinsic_load_fully_covered:
+      return SYSTEM_VALUE_FULLY_COVERED;
    default:
       unreachable("intrinsic doesn't produce a system value");
    }
diff --git a/src/compiler/nir/nir_divergence_analysis.c b/src/compiler/nir/nir_divergence_analysis.c
index 78087e9d4ec8..71d74cf54d41 100644
--- a/src/compiler/nir/nir_divergence_analysis.c
+++ b/src/compiler/nir/nir_divergence_analysis.c
@@ -470,6 +470,7 @@ visit_intrinsic(nir_shader *shader, nir_intrinsic_instr *instr)
    case nir_intrinsic_load_point_coord:
    case nir_intrinsic_load_line_coord:
    case nir_intrinsic_load_frag_coord:
+   case nir_intrinsic_load_fully_covered:
    case nir_intrinsic_load_sample_pos:
    case nir_intrinsic_load_sample_pos_or_center:
    case nir_intrinsic_load_vertex_id_zero_base:
diff --git a/src/compiler/nir/nir_gather_info.c b/src/compiler/nir/nir_gather_info.c
index 075510c0e6a6..afa35fbabc3f 100644
--- a/src/compiler/nir/nir_gather_info.c
+++ b/src/compiler/nir/nir_gather_info.c
@@ -712,6 +712,7 @@ gather_intrinsic_info(nir_intrinsic_instr *instr, nir_shader *shader,
    case nir_intrinsic_load_invocation_id:
    case nir_intrinsic_load_frag_coord:
    case nir_intrinsic_load_frag_shading_rate:
+   case nir_intrinsic_load_fully_covered:
    case nir_intrinsic_load_point_coord:
    case nir_intrinsic_load_line_coord:
    case nir_intrinsic_load_front_face:
diff --git a/src/compiler/nir/nir_intrinsics.py b/src/compiler/nir/nir_intrinsics.py
index 29ba0c7ca47d..a499956f1d6f 100644
--- a/src/compiler/nir/nir_intrinsics.py
+++ b/src/compiler/nir/nir_intrinsics.py
@@ -1108,6 +1108,9 @@ intrinsic("store_stack", [0],
 intrinsic("load_frag_shading_rate", dest_comp=1, bit_sizes=[32],
           flags=[CAN_ELIMINATE, CAN_REORDER])
 
+# Whether the rasterized fragment is fully covered by the generating primitive.
+system_value("fully_covered", dest_comp=1, bit_sizes=[1])
+
 # OpenCL printf instruction
 # First source is a deref to the format string
 # Second source is a deref to a struct containing the args
diff --git a/src/compiler/shader_enums.c b/src/compiler/shader_enums.c
index 15d1923562da..1778d7cf56c4 100644
--- a/src/compiler/shader_enums.c
+++ b/src/compiler/shader_enums.c
@@ -338,6 +338,7 @@ gl_system_value_name(gl_system_value sysval)
      ENUM(SYSTEM_VALUE_TCS_HEADER_IR3),
      ENUM(SYSTEM_VALUE_REL_PATCH_ID_IR3),
      ENUM(SYSTEM_VALUE_FRAG_SHADING_RATE),
+     ENUM(SYSTEM_VALUE_FULLY_COVERED),
    };
    STATIC_ASSERT(ARRAY_SIZE(names) == SYSTEM_VALUE_MAX);
    return NAME(sysval);
diff --git a/src/compiler/shader_enums.h b/src/compiler/shader_enums.h
index b14a27361042..029ae1620c2a 100644
--- a/src/compiler/shader_enums.h
+++ b/src/compiler/shader_enums.h
@@ -863,6 +863,12 @@ typedef enum
     */
    SYSTEM_VALUE_FRAG_SHADING_RATE,
 
+   /*
+    * Rasterized fragment is fully covered by the generating primitive
+    * (SPV_EXT_fragment_fully_covered).
+    */
+   SYSTEM_VALUE_FULLY_COVERED,
+
    SYSTEM_VALUE_MAX             /**< Number of values */
 } gl_system_value;
 
diff --git a/src/compiler/spirv/vtn_variables.c b/src/compiler/spirv/vtn_variables.c
index bf3c86748ca2..a09e51bd44ae 100644
--- a/src/compiler/spirv/vtn_variables.c
+++ b/src/compiler/spirv/vtn_variables.c
@@ -1174,6 +1174,11 @@ vtn_get_builtin_location(struct vtn_builder *b,
    case SpvBuiltInCullPrimitiveEXT:
       *location = VARYING_SLOT_CULL_PRIMITIVE;
       break;
+   case SpvBuiltInFullyCoveredEXT:
+      *location = SYSTEM_VALUE_FULLY_COVERED;
+      set_mode_system_value(b, mode);
+      break;
+
    default:
       vtn_fail("Unsupported builtin: %s (%u)",
                spirv_builtin_to_string(builtin), builtin);
-- 
GitLab


From 81fa9355d06c888151d28f160d9cc650c67465af Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Wed, 22 Feb 2023 16:32:26 +0100
Subject: [PATCH 3/6] radv: lower nir_intrinsic_load_fully_covered

The sample coverage VGPR input would be the inner coverage and 0 means
it's uncovered.

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/amd/vulkan/radv_nir_lower_abi.c | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/src/amd/vulkan/radv_nir_lower_abi.c b/src/amd/vulkan/radv_nir_lower_abi.c
index 51774f50317c..17d48b266db3 100644
--- a/src/amd/vulkan/radv_nir_lower_abi.c
+++ b/src/amd/vulkan/radv_nir_lower_abi.c
@@ -441,6 +441,11 @@ lower_abi_instr(nir_builder *b, nir_instr *instr, void *state)
    case nir_intrinsic_load_force_vrs_rates_amd:
       replacement = ac_nir_load_arg(b, &s->args->ac, s->args->ac.force_vrs_rates);
       break;
+   case nir_intrinsic_load_fully_covered: {
+      nir_ssa_def *sample_coverage = ac_nir_load_arg(b, &s->args->ac, s->args->ac.sample_coverage);
+      replacement = nir_ine_imm(b, sample_coverage, 0);
+      break;
+   }
    default:
       progress = false;
       break;
-- 
GitLab


From 2cd8d39bdf02511d9fdbcf09a50aa1d47bf1c9fa Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Wed, 22 Feb 2023 16:34:18 +0100
Subject: [PATCH 4/6] radv: enable SAMPLE_COVERAGE_ENA if the fully covered
 built-in is used

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/amd/vulkan/radv_shader.c      | 2 +-
 src/amd/vulkan/radv_shader.h      | 1 +
 src/amd/vulkan/radv_shader_info.c | 2 ++
 3 files changed, 4 insertions(+), 1 deletion(-)

diff --git a/src/amd/vulkan/radv_shader.c b/src/amd/vulkan/radv_shader.c
index 4436bf29e13f..7c7d817aba69 100644
--- a/src/amd/vulkan/radv_shader.c
+++ b/src/amd/vulkan/radv_shader.c
@@ -2838,7 +2838,7 @@ radv_compute_spi_ps_input(const struct radv_pipeline_key *pipeline_key,
       spi_ps_input |= S_0286CC_ANCILLARY_ENA(1);
    }
 
-   if (info->ps.reads_sample_mask_in) {
+   if (info->ps.reads_sample_mask_in || info->ps.reads_fully_covered) {
       spi_ps_input |= S_0286CC_SAMPLE_COVERAGE_ENA(1);
    }
 
diff --git a/src/amd/vulkan/radv_shader.h b/src/amd/vulkan/radv_shader.h
index 38e3a6249c04..ed005279aed6 100644
--- a/src/amd/vulkan/radv_shader.h
+++ b/src/amd/vulkan/radv_shader.h
@@ -338,6 +338,7 @@ struct radv_shader_info {
       bool reads_linear_sample;
       bool reads_linear_center;
       bool reads_linear_centroid;
+      bool reads_fully_covered;
       uint8_t reads_frag_coord_mask;
       uint8_t reads_sample_pos_mask;
       uint8_t depth_layout;
diff --git a/src/amd/vulkan/radv_shader_info.c b/src/amd/vulkan/radv_shader_info.c
index d34eb9a5fe53..be764f776dbe 100644
--- a/src/amd/vulkan/radv_shader_info.c
+++ b/src/amd/vulkan/radv_shader_info.c
@@ -563,6 +563,8 @@ gather_shader_info_fs(const nir_shader *nir, const struct radv_pipeline_key *pip
    info->ps.reads_frag_shading_rate = BITSET_TEST(nir->info.system_values_read, SYSTEM_VALUE_FRAG_SHADING_RATE);
    info->ps.reads_front_face = BITSET_TEST(nir->info.system_values_read, SYSTEM_VALUE_FRONT_FACE);
    info->ps.reads_barycentric_model = BITSET_TEST(nir->info.system_values_read, SYSTEM_VALUE_BARYCENTRIC_PULL_MODEL);
+   info->ps.reads_fully_covered =
+      BITSET_TEST(nir->info.system_values_read, SYSTEM_VALUE_FULLY_COVERED);
 
    bool uses_persp_or_linear_interp = info->ps.reads_persp_center ||
                                       info->ps.reads_persp_centroid ||
-- 
GitLab


From e6b672b220b6e500519bd1df7d2b26782e2641c0 Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Wed, 22 Feb 2023 16:34:55 +0100
Subject: [PATCH 5/6] radv: implement fullyCoveredFragmentShaderInputVariable

1 means INNER_COVERAGE.

Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/amd/vulkan/radv_cmd_buffer.c | 14 +++++++++++---
 src/amd/vulkan/radv_pipeline.c   |  2 ++
 src/amd/vulkan/radv_private.h    |  1 +
 3 files changed, 14 insertions(+), 3 deletions(-)

diff --git a/src/amd/vulkan/radv_cmd_buffer.c b/src/amd/vulkan/radv_cmd_buffer.c
index 72cda457bf2a..6dd9ef7f1a82 100644
--- a/src/amd/vulkan/radv_cmd_buffer.c
+++ b/src/amd/vulkan/radv_cmd_buffer.c
@@ -1870,6 +1870,9 @@ radv_emit_graphics_pipeline(struct radv_cmd_buffer *cmd_buffer)
           cmd_buffer->state.emitted_graphics_pipeline->db_render_control != pipeline->db_render_control ||
           cmd_buffer->state.emitted_graphics_pipeline->rast_prim != pipeline->rast_prim)
          cmd_buffer->state.dirty |= RADV_CMD_DIRTY_DYNAMIC_RASTERIZATION_SAMPLES;
+
+      if (cmd_buffer->state.emitted_graphics_pipeline->uses_inner_coverage != pipeline->uses_inner_coverage)
+         cmd_buffer->state.dirty |= RADV_CMD_DIRTY_DYNAMIC_CONSERVATIVE_RAST_MODE;
    }
 
    radeon_emit_array(cmd_buffer->cs, pipeline->base.cs.buf, pipeline->base.cs.cdw);
@@ -2454,6 +2457,7 @@ radv_emit_patch_control_points(struct radv_cmd_buffer *cmd_buffer)
 static void
 radv_emit_conservative_rast_mode(struct radv_cmd_buffer *cmd_buffer)
 {
+   const struct radv_graphics_pipeline *pipeline = cmd_buffer->state.graphics_pipeline;
    const struct radv_physical_device *pdevice = cmd_buffer->device->physical_device;
    const struct radv_dynamic_state *d = &cmd_buffer->state.dynamic;
 
@@ -2464,13 +2468,13 @@ radv_emit_conservative_rast_mode(struct radv_cmd_buffer *cmd_buffer)
          pa_sc_conservative_rast = S_028C4C_PREZ_AA_MASK_ENABLE(1) | S_028C4C_POSTZ_AA_MASK_ENABLE(1) |
                                    S_028C4C_CENTROID_SAMPLE_OVERRIDE(1);
 
-         if (d->vk.rs.conservative_mode == VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT) {
+         /* Inner coverage requires underestimate conservative rasterization. */
+         if (d->vk.rs.conservative_mode == VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT &&
+             !pipeline->uses_inner_coverage) {
             pa_sc_conservative_rast |= S_028C4C_OVER_RAST_ENABLE(1) |
                                        S_028C4C_UNDER_RAST_SAMPLE_SELECT(1) |
                                        S_028C4C_PBB_UNCERTAINTY_REGION_ENABLE(1);
          } else {
-            assert(d->vk.rs.conservative_mode ==
-                   VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT);
             pa_sc_conservative_rast |=
                S_028C4C_OVER_RAST_SAMPLE_SELECT(1) | S_028C4C_UNDER_RAST_ENABLE(1);
          }
@@ -4203,6 +4207,7 @@ lookup_ps_epilog(struct radv_cmd_buffer *cmd_buffer)
 static void
 radv_emit_msaa_state(struct radv_cmd_buffer *cmd_buffer)
 {
+   const struct radv_graphics_pipeline *pipeline = cmd_buffer->state.graphics_pipeline;
    const struct radv_physical_device *pdevice = cmd_buffer->device->physical_device;
    unsigned rasterization_samples = radv_get_rasterization_samples(cmd_buffer);
    const struct radv_rendering_state *render = &cmd_buffer->state.render;
@@ -4262,6 +4267,9 @@ radv_emit_msaa_state(struct radv_cmd_buffer *cmd_buffer)
                          S_028BE0_COVERED_CENTROID_IS_CENTER(pdevice->rad_info.gfx_level >= GFX10_3);
    }
 
+   if (pipeline->uses_inner_coverage)
+      pa_sc_aa_config |= S_028BE0_COVERAGE_TO_SHADER_SELECT(1);
+
    radeon_set_context_reg(cmd_buffer->cs, R_028804_DB_EQAA, db_eqaa);
    radeon_set_context_reg(cmd_buffer->cs, R_028BE0_PA_SC_AA_CONFIG, pa_sc_aa_config);
    radeon_set_context_reg(cmd_buffer->cs, R_028A48_PA_SC_MODE_CNTL_0,
diff --git a/src/amd/vulkan/radv_pipeline.c b/src/amd/vulkan/radv_pipeline.c
index 50099d6e0713..43553b6d1f4e 100644
--- a/src/amd/vulkan/radv_pipeline.c
+++ b/src/amd/vulkan/radv_pipeline.c
@@ -5102,6 +5102,8 @@ radv_graphics_pipeline_init(struct radv_graphics_pipeline *pipeline, struct radv
    pipeline->force_vrs_per_vertex =
       pipeline->base.shaders[pipeline->last_vgt_api_stage]->info.force_vrs_per_vertex;
    pipeline->uses_user_sample_locations = state.ms && state.ms->sample_locations_enable;
+   pipeline->uses_inner_coverage =
+      pipeline->base.shaders[MESA_SHADER_FRAGMENT]->info.ps.reads_fully_covered;
    pipeline->rast_prim = vgt_gs_out_prim_type;
    pipeline->last_vgt_api_stage_locs = pipeline->base.shaders[pipeline->last_vgt_api_stage]->info.user_sgprs_locs.shader_data;
 
diff --git a/src/amd/vulkan/radv_private.h b/src/amd/vulkan/radv_private.h
index 8269cb078de9..149f905e26a6 100644
--- a/src/amd/vulkan/radv_private.h
+++ b/src/amd/vulkan/radv_private.h
@@ -2162,6 +2162,7 @@ struct radv_graphics_pipeline {
    bool use_per_attribute_vb_descs;
    bool can_use_simple_input;
    bool uses_user_sample_locations;
+   bool uses_inner_coverage;
    bool need_null_export_workaround;
    /* Whether the pipeline forces per-vertex VRS (GFX10.3+). */
    bool force_vrs_per_vertex;
-- 
GitLab


From f2b67642ce4a119c53374ef091a28a12ddddc2ef Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Wed, 22 Feb 2023 16:36:11 +0100
Subject: [PATCH 6/6] radv: enable fullyCoveredFragmentShaderInputVariable on
 GFX9+

For vkd3d-proton Tier 3.

It's passing CTS and vkd3d-proton tests.

Closes: https://gitlab.freedesktop.org/mesa/mesa/-/issues/8311
Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/amd/ci/radv-navi21-aco-fails.txt  | 11 +++++++++++
 src/amd/ci/radv-vangogh-aco-fails.txt | 11 +++++++++++
 src/amd/vulkan/radv_physical_device.c |  2 +-
 src/amd/vulkan/radv_shader.c          |  1 +
 4 files changed, 24 insertions(+), 1 deletion(-)

diff --git a/src/amd/ci/radv-navi21-aco-fails.txt b/src/amd/ci/radv-navi21-aco-fails.txt
index faa38e3e46ea..91d2cb59bf15 100644
--- a/src/amd/ci/radv-navi21-aco-fails.txt
+++ b/src/amd/ci/radv-navi21-aco-fails.txt
@@ -115,3 +115,14 @@ dEQP-VK.binding_model.descriptor_buffer.multiple.graphics_vert_buffers32_sets1,C
 dEQP-VK.binding_model.descriptor_buffer.multiple.graphics_vert_buffers3_sets1,Crash
 dEQP-VK.binding_model.descriptor_buffer.multiple.graphics_vert_buffers8_sets1,Crash
 dEQP-VK.pipeline.fast_linked_library.extended_dynamic_state.before_draw.line_stipple_enable,Fail
+
+# https://gitlab.khronos.org/Tracker/vk-gl-cts/-/issues/4298
+dEQP-VK.pipeline.fast_linked_library.multisample_with_fragment_shading_rate.conservative_with_full_coverage.underestimate.samples_2_post_depth_coverage,Fail
+dEQP-VK.pipeline.fast_linked_library.multisample_with_fragment_shading_rate.conservative_with_full_coverage.underestimate.samples_4_post_depth_coverage,Fail
+dEQP-VK.pipeline.fast_linked_library.multisample_with_fragment_shading_rate.conservative_with_full_coverage.underestimate.samples_8_post_depth_coverage,Fail
+dEQP-VK.pipeline.monolithic.multisample_with_fragment_shading_rate.conservative_with_full_coverage.underestimate.samples_2_post_depth_coverage,Fail
+dEQP-VK.pipeline.monolithic.multisample_with_fragment_shading_rate.conservative_with_full_coverage.underestimate.samples_4_post_depth_coverage,Fail
+dEQP-VK.pipeline.monolithic.multisample_with_fragment_shading_rate.conservative_with_full_coverage.underestimate.samples_8_post_depth_coverage,Fail
+dEQP-VK.pipeline.pipeline_library.multisample_with_fragment_shading_rate.conservative_with_full_coverage.underestimate.samples_2_post_depth_coverage,Fail
+dEQP-VK.pipeline.pipeline_library.multisample_with_fragment_shading_rate.conservative_with_full_coverage.underestimate.samples_4_post_depth_coverage,Fail
+dEQP-VK.pipeline.pipeline_library.multisample_with_fragment_shading_rate.conservative_with_full_coverage.underestimate.samples_8_post_depth_coverage,Fail
diff --git a/src/amd/ci/radv-vangogh-aco-fails.txt b/src/amd/ci/radv-vangogh-aco-fails.txt
index 363edbcc0832..5bbdb8dbe95a 100644
--- a/src/amd/ci/radv-vangogh-aco-fails.txt
+++ b/src/amd/ci/radv-vangogh-aco-fails.txt
@@ -115,3 +115,14 @@ dEQP-VK.binding_model.descriptor_buffer.multiple.graphics_vert_buffers32_sets1,C
 dEQP-VK.binding_model.descriptor_buffer.multiple.graphics_vert_buffers3_sets1,Crash
 dEQP-VK.binding_model.descriptor_buffer.multiple.graphics_vert_buffers8_sets1,Crash
 dEQP-VK.binding_model.ics_miss_buffers8_sets1,Crash
+
+# https://gitlab.khronos.org/Tracker/vk-gl-cts/-/issues/4298
+dEQP-VK.pipeline.fast_linked_library.multisample_with_fragment_shading_rate.conservative_with_full_coverage.underestimate.samples_2_post_depth_coverage,Fail
+dEQP-VK.pipeline.fast_linked_library.multisample_with_fragment_shading_rate.conservative_with_full_coverage.underestimate.samples_4_post_depth_coverage,Fail
+dEQP-VK.pipeline.fast_linked_library.multisample_with_fragment_shading_rate.conservative_with_full_coverage.underestimate.samples_8_post_depth_coverage,Fail
+dEQP-VK.pipeline.monolithic.multisample_with_fragment_shading_rate.conservative_with_full_coverage.underestimate.samples_2_post_depth_coverage,Fail
+dEQP-VK.pipeline.monolithic.multisample_with_fragment_shading_rate.conservative_with_full_coverage.underestimate.samples_4_post_depth_coverage,Fail
+dEQP-VK.pipeline.monolithic.multisample_with_fragment_shading_rate.conservative_with_full_coverage.underestimate.samples_8_post_depth_coverage,Fail
+dEQP-VK.pipeline.pipeline_library.multisample_with_fragment_shading_rate.conservative_with_full_coverage.underestimate.samples_2_post_depth_coverage,Fail
+dEQP-VK.pipeline.pipeline_library.multisample_with_fragment_shading_rate.conservative_with_full_coverage.underestimate.samples_4_post_depth_coverage,Fail
+dEQP-VK.pipeline.pipeline_library.multisample_with_fragment_shading_rate.conservative_with_full_coverage.underestimate.samples_8_post_depth_coverage,Fail
diff --git a/src/amd/vulkan/radv_physical_device.c b/src/amd/vulkan/radv_physical_device.c
index 731974d1b32e..9871a2bbe6e8 100644
--- a/src/amd/vulkan/radv_physical_device.c
+++ b/src/amd/vulkan/radv_physical_device.c
@@ -1840,7 +1840,7 @@ radv_GetPhysicalDeviceProperties2(VkPhysicalDevice physicalDevice,
          properties->conservativePointAndLineRasterization = false;
          properties->degenerateTrianglesRasterized = true;
          properties->degenerateLinesRasterized = false;
-         properties->fullyCoveredFragmentShaderInputVariable = false;
+         properties->fullyCoveredFragmentShaderInputVariable = true;
          properties->conservativeRasterizationPostDepthCoverage = false;
          break;
       }
diff --git a/src/amd/vulkan/radv_shader.c b/src/amd/vulkan/radv_shader.c
index 7c7d817aba69..6272d3c787b4 100644
--- a/src/amd/vulkan/radv_shader.c
+++ b/src/amd/vulkan/radv_shader.c
@@ -713,6 +713,7 @@ radv_shader_spirv_to_nir(struct radv_device *device, const struct radv_pipeline_
                .float32_atomic_min_max = true,
                .float64 = true,
                .float64_atomic_min_max = true,
+               .fragment_fully_covered = true,
                .geometry_streams = true,
                .groups = true,
                .image_atomic_int64 = true,
-- 
GitLab

