From 336c6fb40719baec338f4654e50f552873546ec7 Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Thu, 28 Sep 2023 14:51:37 +0200
Subject: [PATCH 1/2] radv: fix emulated geometry shader primitives/invocations
 queries

If both are used together, only the geometry shader primitives were
copied.

Found by inspection.

Cc: mesa-stable
Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/amd/vulkan/radv_query.c | 10 ++++++----
 1 file changed, 6 insertions(+), 4 deletions(-)

diff --git a/src/amd/vulkan/radv_query.c b/src/amd/vulkan/radv_query.c
index cba50cd4f9021..a1fdaecdc1f0c 100644
--- a/src/amd/vulkan/radv_query.c
+++ b/src/amd/vulkan/radv_query.c
@@ -1747,8 +1747,9 @@ emit_begin_query(struct radv_cmd_buffer *cmd_buffer, struct radv_query_pool *poo
                radv_get_pipelinestat_query_offset(VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT);
 
             gfx10_copy_gds_query(cmd_buffer, RADV_SHADER_QUERY_GS_PRIM_EMIT_OFFSET, va + gs_prim_offset);
-         } else {
-            assert(pool->vk.pipeline_statistics & VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT);
+         }
+
+         if (pool->vk.pipeline_statistics & VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT) {
             uint32_t gs_invoc_offset =
                radv_get_pipelinestat_query_offset(VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT);
 
@@ -1901,8 +1902,9 @@ emit_end_query(struct radv_cmd_buffer *cmd_buffer, struct radv_query_pool *pool,
                radv_get_pipelinestat_query_offset(VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT);
 
             gfx10_copy_gds_query(cmd_buffer, RADV_SHADER_QUERY_GS_PRIM_EMIT_OFFSET, va + gs_prim_offset);
-         } else {
-            assert(pool->vk.pipeline_statistics & VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT);
+         }
+
+         if (pool->vk.pipeline_statistics & VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT) {
             uint32_t gs_invoc_offset =
                radv_get_pipelinestat_query_offset(VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT);
 
-- 
GitLab


From 9bf951ac1a56cff8ee472c43b4f50542b1487df7 Mon Sep 17 00:00:00 2001
From: Samuel Pitoiset <samuel.pitoiset@gmail.com>
Date: Thu, 28 Sep 2023 15:07:38 +0200
Subject: [PATCH 2/2] radv: fix synchronization with emulated GS
 primitives/invocations queries

Even if the emitted EOP event when ending a pipeline statistic query is done,
that doesn't mean that the emulated queries are copied.

This should fix all GS primitives/invocations flakes in CI.

Cc: mesa-stable
Signed-off-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
---
 src/amd/ci/radv-navi10-aco-flakes.txt  |  1 -
 src/amd/ci/radv-navi21-aco-flakes.txt  |  5 ----
 src/amd/ci/radv-vangogh-aco-flakes.txt |  5 ----
 src/amd/vulkan/radv_query.c            | 32 ++++++++++++++++++++++++++
 4 files changed, 32 insertions(+), 11 deletions(-)

diff --git a/src/amd/ci/radv-navi10-aco-flakes.txt b/src/amd/ci/radv-navi10-aco-flakes.txt
index 86a413e6bd1f7..909b902e6caed 100644
--- a/src/amd/ci/radv-navi10-aco-flakes.txt
+++ b/src/amd/ci/radv-navi10-aco-flakes.txt
@@ -8,7 +8,6 @@ dEQP-VK.dynamic_rendering.primary_cmd_buff.basic.single_cmdbuffer
 dEQP-VK.pipeline.fast_linked_library.image.suballocation.sampling_type.combined.view_type.cube_array.format.r8g8b8a8_unorm.count_4.size.32x32_array_of_36
 dEQP-VK.pipeline.fast_linked_library.multisample_interpolation.sample_interpolation_consistency.component_1.128_128_1.samples_8
 dEQP-VK.pipeline.monolithic.extended_dynamic_state.cmd_buffer_start.topology_line_geom
-dEQP-VK.query_pool.statistics_query.host_query_reset.geometry_shader_invocations.secondary.32bits_triangle_strip_clear_depth
 dEQP-VK.texture.filtering.3d.combinations.nearest.linear.mirror_clamp_to_edge.mirror_clamp_to_edge.repeat
 
 # Catch all the line-related flakes we see on navi10
diff --git a/src/amd/ci/radv-navi21-aco-flakes.txt b/src/amd/ci/radv-navi21-aco-flakes.txt
index 5606b2afc66e0..f45d2226d235d 100644
--- a/src/amd/ci/radv-navi21-aco-flakes.txt
+++ b/src/amd/ci/radv-navi21-aco-flakes.txt
@@ -21,11 +21,6 @@ dEQP-VK.pipeline.fast_linked_library.multisample_interpolation.sample_interpolat
 
 dEQP-VK.mesh_shader.ext.query.all_stats_query.triangles.host_reset.copy.wait.indirect_draw.32bit.with_availability.single_block.task_mesh.inside_rp.single_view.only_primary
 
-dEQP-VK.query_pool.statistics_query.host_query_reset.geometry_shader_invocations.secondary.32bits_dstoffset_cmdcopyquerypoolresults_line_list
-dEQP-VK.query_pool.statistics_query.host_query_reset.geometry_shader_primitives.secondary.32bits_dstoffset_cmdcopyquerypoolresults_line_list_with_adjacency
-dEQP-VK.query_pool.statistics_query.host_query_reset.geometry_shader_invocations.secondary.32bits_triangle_list
-dEQP-VK.query_pool.statistics_query.host_query_reset.geometry_shader_primitives.secondary.64bits_dstoffset_cmdcopyquerypoolresults_line_list_with_adjacency_clear_color
-
 # Too many of these tests to follow, so let's cast a broad net
 dEQP-VK.pipeline.*line_stipple_enable
 dEQP-VK.pipeline.*line_stipple_params
diff --git a/src/amd/ci/radv-vangogh-aco-flakes.txt b/src/amd/ci/radv-vangogh-aco-flakes.txt
index 1037989e934e4..67696e363075e 100644
--- a/src/amd/ci/radv-vangogh-aco-flakes.txt
+++ b/src/amd/ci/radv-vangogh-aco-flakes.txt
@@ -14,8 +14,3 @@ dEQP-VK.draw.renderpass.linear_interpolation.no_offset_4_samples
 dEQP-VK.draw.renderpass.linear_interpolation.no_offset_8_samples
 
 dEQP-VK.pipeline.monolithic.image.suballocation.sampling_type.separate.view_type.2d_array.format.r4g4b4a4_unorm_pack16.count_4.size.32x16_array_of_6
-
-# Seem to have been introduced with !19442, and can only be reproduced on
-# Steam Deck 2 at Martin Roukala (mupuf)'s farm. Investigation is under way.
-dEQP-VK.query_pool.statistics_query.geometry_shader_primitives.*
-dEQP-VK.query_pool.statistics_query.host_query_reset.geometry_shader_primitives.*
diff --git a/src/amd/vulkan/radv_query.c b/src/amd/vulkan/radv_query.c
index a1fdaecdc1f0c..1e7dc313a5a1c 100644
--- a/src/amd/vulkan/radv_query.c
+++ b/src/amd/vulkan/radv_query.c
@@ -57,6 +57,21 @@ radv_get_pipelinestat_query_size(struct radv_device *device)
    return num_results * 8;
 }
 
+static uint32_t *
+radv_get_pipelinestat_avail_ptr(struct radv_query_pool *pool, VkQueryPipelineStatisticFlagBits query, char *src)
+{
+   struct radv_device *device = container_of(pool->vk.base.device, struct radv_device, vk);
+
+   if (pool->vk.pipeline_statistics & query) {
+      const unsigned pipelinestat_block_size = radv_get_pipelinestat_query_size(device);
+      const uint32_t offset = radv_get_pipelinestat_query_offset(query);
+
+      return (uint32_t *)(src + pipelinestat_block_size + offset + 4);
+   }
+
+   return NULL;
+}
+
 static void
 radv_store_availability(nir_builder *b, nir_def *flags, nir_def *dst_buf, nir_def *offset, nir_def *value32)
 {
@@ -1239,9 +1254,22 @@ radv_GetQueryPoolResults(VkDevice _device, VkQueryPool queryPool, uint32_t first
       case VK_QUERY_TYPE_PIPELINE_STATISTICS: {
          unsigned pipelinestat_block_size = radv_get_pipelinestat_query_size(device);
          const uint32_t *avail_ptr = (const uint32_t *)(pool->ptr + pool->availability_offset + 4 * query);
+         uint32_t *gs_invoc_avail_ptr = NULL, *gs_prim_avail_ptr = NULL;
+
+         if (pool->uses_gds) {
+            gs_invoc_avail_ptr =
+               radv_get_pipelinestat_avail_ptr(pool, VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT, src);
+            gs_prim_avail_ptr =
+               radv_get_pipelinestat_avail_ptr(pool, VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT, src);
+         }
 
          do {
             available = p_atomic_read(avail_ptr);
+
+            if (gs_invoc_avail_ptr && !(p_atomic_read(gs_invoc_avail_ptr) & 0x80000000))
+               available = false;
+            if (gs_prim_avail_ptr && !(p_atomic_read(gs_prim_avail_ptr) & 0x80000000))
+               available = false;
          } while (!available && (flags & VK_QUERY_RESULT_WAIT_BIT));
 
          if (!available && !(flags & VK_QUERY_RESULT_PARTIAL_BIT))
@@ -1747,6 +1775,7 @@ emit_begin_query(struct radv_cmd_buffer *cmd_buffer, struct radv_query_pool *poo
                radv_get_pipelinestat_query_offset(VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT);
 
             gfx10_copy_gds_query(cmd_buffer, RADV_SHADER_QUERY_GS_PRIM_EMIT_OFFSET, va + gs_prim_offset);
+            radv_emit_write_data_imm(cs, V_370_ME, va + gs_prim_offset + 4, 0x80000000);
          }
 
          if (pool->vk.pipeline_statistics & VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT) {
@@ -1754,6 +1783,7 @@ emit_begin_query(struct radv_cmd_buffer *cmd_buffer, struct radv_query_pool *poo
                radv_get_pipelinestat_query_offset(VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT);
 
             gfx10_copy_gds_query(cmd_buffer, RADV_SHADER_QUERY_GS_INVOCATION_OFFSET, va + gs_invoc_offset);
+            radv_emit_write_data_imm(cs, V_370_ME, va + gs_invoc_offset + 4, 0x80000000);
          }
 
          /* Record that the command buffer needs GDS. */
@@ -1902,6 +1932,7 @@ emit_end_query(struct radv_cmd_buffer *cmd_buffer, struct radv_query_pool *pool,
                radv_get_pipelinestat_query_offset(VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT);
 
             gfx10_copy_gds_query(cmd_buffer, RADV_SHADER_QUERY_GS_PRIM_EMIT_OFFSET, va + gs_prim_offset);
+            radv_emit_write_data_imm(cs, V_370_ME, va + gs_prim_offset + 4, 0x80000000);
          }
 
          if (pool->vk.pipeline_statistics & VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT) {
@@ -1909,6 +1940,7 @@ emit_end_query(struct radv_cmd_buffer *cmd_buffer, struct radv_query_pool *pool,
                radv_get_pipelinestat_query_offset(VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT);
 
             gfx10_copy_gds_query(cmd_buffer, RADV_SHADER_QUERY_GS_INVOCATION_OFFSET, va + gs_invoc_offset);
+            radv_emit_write_data_imm(cs, V_370_ME, va + gs_invoc_offset + 4, 0x80000000);
          }
 
          cmd_buffer->state.active_pipeline_gds_queries--;
-- 
GitLab

