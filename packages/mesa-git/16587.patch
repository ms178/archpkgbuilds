From 34bf6a9678e2d2f0b54c74c9a7b0e209fe79f5d5 Mon Sep 17 00:00:00 2001
From: Pierre-Eric Pelloux-Prayer <pierre-eric.pelloux-prayer@amd.com>
Date: Wed, 18 May 2022 16:50:22 +0200
Subject: [PATCH 1/3] radeonsi: don't use sel->nir in
 si_check_blend_dst_sampler_noop

We don't want to modify sel->nir so force the use of the serialized
version of the shader.

Fixes: b78a38bd022 ("radeonsi: use si_nir_is_output_const_if_tex_is_const")
Closes: https://gitlab.freedesktop.org/mesa/mesa/-/issues/6415
---
 src/gallium/drivers/radeonsi/si_state.c | 9 +++++++++
 1 file changed, 9 insertions(+)

diff --git a/src/gallium/drivers/radeonsi/si_state.c b/src/gallium/drivers/radeonsi/si_state.c
index a91145a836c6..eded5c5c40d5 100644
--- a/src/gallium/drivers/radeonsi/si_state.c
+++ b/src/gallium/drivers/radeonsi/si_state.c
@@ -655,8 +655,15 @@ static bool si_check_blend_dst_sampler_noop(struct si_context *sctx)
 {
    if (sctx->framebuffer.state.nr_cbufs == 1) {
       struct si_shader_selector *sel = sctx->shader.ps.cso;
+      if (!sel->nir_binary)
+         return false;
+
       bool free_nir;
       if (unlikely(sel->info.writes_1_if_tex_is_1 == 0xff)) {
+         /* We don't want to modify sel->nir, so clear it if it exists. */
+         nir_shader *n = sel->nir;
+         sel->nir = NULL;
+
          struct nir_shader *nir = si_get_nir_shader(sel, &sctx->shader.ps.key, &free_nir);
 
          /* Determine if this fragment shader always writes vec4(1) if a specific texture
@@ -672,8 +679,10 @@ static bool si_check_blend_dst_sampler_noop(struct si_context *sctx)
             sel->info.writes_1_if_tex_is_1 = 0;
          }
 
+         assert(free_nir);
          if (free_nir)
             ralloc_free(nir);
+         sel->nir = n;
       }
 
       if (sel->info.writes_1_if_tex_is_1 &&
-- 
GitLab


From fa9e865a672a053f5fae6fe3e8db591e53e701c8 Mon Sep 17 00:00:00 2001
From: Pierre-Eric Pelloux-Prayer <pierre-eric.pelloux-prayer@amd.com>
Date: Wed, 18 May 2022 17:48:32 +0200
Subject: [PATCH 2/3] ac: export LLVM c++ ResetCommandLineParser method

This method isn't part of the C API but we can still use it and
avoid getting error messages from the command line parser:

   mesa: for the [...]: may only occur zero or one times

We could call it at the beginning of ac_init_llvm_target but
this may hide some real bugs so let drivers call it.
---
 src/amd/llvm/ac_llvm_helper.cpp | 4 ++++
 src/amd/llvm/ac_llvm_util.h     | 1 +
 2 files changed, 5 insertions(+)

diff --git a/src/amd/llvm/ac_llvm_helper.cpp b/src/amd/llvm/ac_llvm_helper.cpp
index 1fee75f30c54..9beb65e99628 100644
--- a/src/amd/llvm/ac_llvm_helper.cpp
+++ b/src/amd/llvm/ac_llvm_helper.cpp
@@ -50,6 +50,10 @@ bool ac_is_llvm_processor_supported(LLVMTargetMachineRef tm, const char *process
    return TM->getMCSubtargetInfo()->isCPUStringValid(processor);
 }
 
+void ac_reset_llvm_command_line_parser() {
+   llvm::cl::ResetCommandLineParser();
+}
+
 void ac_add_attr_dereferenceable(LLVMValueRef val, uint64_t bytes)
 {
    llvm::Argument *A = llvm::unwrap<llvm::Argument>(val);
diff --git a/src/amd/llvm/ac_llvm_util.h b/src/amd/llvm/ac_llvm_util.h
index 546f9e2f2d47..b3ef2f617c83 100644
--- a/src/amd/llvm/ac_llvm_util.h
+++ b/src/amd/llvm/ac_llvm_util.h
@@ -92,6 +92,7 @@ struct ac_llvm_compiler {
 LLVMTargetRef ac_get_llvm_target(const char *triple);
 const char *ac_get_llvm_processor_name(enum radeon_family family);
 bool ac_is_llvm_processor_supported(LLVMTargetMachineRef tm, const char *processor);
+void ac_reset_llvm_command_line_parser();
 void ac_add_attr_dereferenceable(LLVMValueRef val, uint64_t bytes);
 void ac_add_attr_alignment(LLVMValueRef val, uint64_t bytes);
 bool ac_is_sgpr_param(LLVMValueRef param);
-- 
GitLab


From eb52725bf388aadaf2b66d9bca7613dd6e8be35b Mon Sep 17 00:00:00 2001
From: Pierre-Eric Pelloux-Prayer <pierre-eric.pelloux-prayer@amd.com>
Date: Wed, 18 May 2022 17:49:07 +0200
Subject: [PATCH 3/3] radeonsi: reset LLVM options on screen destroy

If the screen is destroyed this means that radeonsi_dri.so
is unloaded, so ac_init_llvm_once won't be able to prevent
ac_init_llvm_target from being called multiple another time.

Example pseudo-code to trigger this:
   gbm_create_device();
   eglInitialize();
   eglTerminate();
   gbm_device_destroy();
   gbm_create_device();
   eglInitialize();
   eglTerminate();
   gbm_device_destroy();

To avoid a warning message from LLVM, clear the command line
parser state when the screen is destroyed.

This might fix https://gitlab.freedesktop.org/mesa/mesa/-/issues/5960
---
 src/gallium/drivers/radeonsi/si_pipe.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/src/gallium/drivers/radeonsi/si_pipe.c b/src/gallium/drivers/radeonsi/si_pipe.c
index b7ed88b2a3c1..851b9f8e1b97 100644
--- a/src/gallium/drivers/radeonsi/si_pipe.c
+++ b/src/gallium/drivers/radeonsi/si_pipe.c
@@ -962,6 +962,8 @@ static void si_destroy_screen(struct pipe_screen *pscreen)
    util_idalloc_mt_fini(&sscreen->buffer_ids);
    util_vertex_state_cache_deinit(&sscreen->vertex_state_cache);
 
+   ac_reset_llvm_command_line_parser();
+
    sscreen->ws->destroy(sscreen->ws);
    FREE(sscreen);
 }
-- 
GitLab

