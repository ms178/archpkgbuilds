# Maintainer: CachyOS
# Contributor: Gemini & ptr1337

pkgname=power-profiles-daemon
pkgver=0.30
pkgrel=3.2
pkgdesc='Makes power profiles handling available over D-Bus'
url='https://gitlab.freedesktop.org/upower/power-profiles-daemon'
license=(GPL-3.0-only)
arch=(x86_64)
depends=(gcc-libs
         glib2
         glibc
         libgudev
         polkit
         upower)
optdepends=('python-gobject: for powerprofilesctl')
makedepends=(bash-completion
             git
             glib2-devel
             python-argparse-manpage
             python-shtab
             meson
             clang
             llvm
             lld
             )
checkdepends=(python-dbusmock
              python-isort
              python-mccabe
              umockdev)
source=(git+https://gitlab.freedesktop.org/upower/$pkgname#tag=$pkgver?depth=1)
sha256sums=('SKIP')
options=(!strip)

prepare() {
  export CC="clang"
  export CXX="clang++"
  export LDFLAGS+=" -fuse-ld=lld"
  export AR="llvm-ar"
  export NM="llvm-nm"
  export STRIP="llvm-strip"
  export OBJCOPY="llvm-objcopy"
  export OBJDUMP="llvm-objdump"
  export READELF="llvm-readelf"
  export RANLIB="llvm-ranlib"
}

build() {
  local _common_instrument_flags="-g3 -fno-omit-frame-pointer -mllvm -vp-counters-per-site=150 -mllvm -runtime-counter-relocation -mllvm -enable-value-profiling"
  local std_pgo_dir="${srcdir}/pgo_data"
  local cs_pgo_dir="${srcdir}/cs_pgo_data"
  local merged_profile_dir="${srcdir}/merged_profile"
  mkdir -p "${std_pgo_dir}" "${cs_pgo_dir}" "${merged_profile_dir}"

  local meson_opts=(
    --buildtype=release
    -Dzshcomp=enabled
    -Dbashcomp=enabled
    -Dmanpage=disabled
    -Dpylint=disabled
  )

  # --- PGO Stages ---
  arch-meson "$pkgname" build-pgo-gen "${meson_opts[@]}" \
    -Dc_args="${CFLAGS} -fprofile-generate=${std_pgo_dir} ${_common_instrument_flags}" \
    -Dc_link_args="${LDFLAGS} -fprofile-generate=${std_pgo_dir}"
  ninja -C build-pgo-gen
  meson test -C build-pgo-gen --print-errorlogs || true
  llvm-profdata merge -output="${merged_profile_dir}/default.profdata" "${std_pgo_dir}"

  arch-meson "$pkgname" build-pgo-cs-gen "${meson_opts[@]}" \
    -Dc_args="${CFLAGS} -fprofile-use=${merged_profile_dir}/default.profdata -fcs-profile-generate=${cs_pgo_dir} ${_common_instrument_flags}" \
    -Dc_link_args="${LDFLAGS} -fprofile-use=${merged_profile_dir}/default.profdata -fcs-profile-generate=${cs_pgo_dir}"
  ninja -C build-pgo-cs-gen
  meson test -C build-pgo-cs-gen --print-errorlogs || true
  llvm-profdata merge -output="${merged_profile_dir}/final.profdata" "${cs_pgo_dir}" "${merged_profile_dir}/default.profdata"

  # --- Final PGO Build for BOLT ---
  arch-meson "$pkgname" build "${meson_opts[@]}" \
    -Dc_args="${CFLAGS} -fprofile-use=${merged_profile_dir}/final.profdata" \
    -Dc_link_args="${LDFLAGS} -fprofile-use=${merged_profile_dir}/final.profdata -Wl,--emit-relocs"
  ninja -C build

  # --- BOLT Instrumentation & Profiling ---
  local final_pgo_binary="${srcdir}/build/src/power-profiles-daemon"
  cp "${final_pgo_binary}" "${final_pgo_binary}.pgo"

  # Bake the output path directly into the instrumented binary. This is the critical fix.
  llvm-bolt "${final_pgo_binary}.pgo" -instrument \
    --instrumentation-file="${srcdir}/bolt.fdata" \
    -o "${final_pgo_binary}"

  # Use the project-specific test hook to force the test suite to run our instrumented binary.
  export PPD_TEST_DAEMON_PATH="${final_pgo_binary}"
  meson test -C build --print-errorlogs || true
  unset PPD_TEST_DAEMON_PATH

  # Restore original PGO binary for the check() function and final BOLT optimization.
  mv "${final_pgo_binary}.pgo" "${final_pgo_binary}"

  # --- BOLT Optimization ---
  if [ ! -s "${srcdir}/bolt.fdata" ]; then
    echo "Warning: No BOLT profiles generated. Skipping BOLT optimization."
    return 0
  fi
  local bolt_options=(
    "--data=${srcdir}/bolt.fdata" "--dyno-stats" "--lite=false"
    "--eliminate-unreachable" "--frame-opt=all" "--icf=all"
    "--jump-tables=aggressive" "--min-branch-clusters" "--plt=all"
    "--hot-data" "--hugify" "--frame-opt-rm-stores" "--peepholes=all"
    "--indirect-call-promotion=all" "--reg-reassign" "--use-aggr-reg-reassign"
    "--reorder-blocks=ext-tsp" "--reorder-functions=cdsort" "--split-all-cold"
    "--align-functions=32" "--align-blocks" "--block-alignment=16"
    "--split-eh" "--split-functions" "--split-strategy=cdsplit"
    "--x86-strip-redundant-address-size"
  )
  llvm-bolt "${final_pgo_binary}" -o "${srcdir}/power-profiles-daemon.bolted" "${bolt_options[@]}"
}

check() {
  local pgo_binary="${srcdir}/build/src/power-profiles-daemon"
  local bolted_binary="${srcdir}/power-profiles-daemon.bolted"

  if [ ! -f "${bolted_binary}" ]; then
    echo "Skipping check of BOLTed binary: not found. Checking PGO binary instead."
    meson test -C build --print-errorlogs
    return 0
  fi

  # Check the final BOLTed binary for correctness by swapping it into the build tree.
  cp "${pgo_binary}" "${pgo_binary}.bak"
  cp "${bolted_binary}" "${pgo_binary}"
  meson test -C build --print-errorlogs
  mv "${pgo_binary}.bak" "${pgo_binary}"
}

package() {
  DESTDIR="$pkgdir" meson install -C build

  local bolted_binary="${srcdir}/power-profiles-daemon.bolted"
  if [ -f "${bolted_binary}" ]; then
    install -Dm755 "${bolted_binary}" "${pkgdir}/usr/lib/power-profiles-daemon"
  fi

  # Strip only the actual ELF binary. This is the second critical fix.
  llvm-strip --strip-unneeded "${pkgdir}/usr/lib/power-profiles-daemon"
}
