pkgname=spirv-tools-git
pkgver=2025.2.rc2+53.g7dda3c01fb
pkgrel=2
epoch=1
pkgdesc='API and commands for processing SPIR-V modules'
url='https://github.com/KhronosGroup/SPIRV-Tools'
arch=(x86_64 i686)
license=(custom)
groups=(vulkan-devel)
depends=(glibc gcc-libs sh)
makedepends=(cmake python git spirv-headers-git clang llvm lld glslang)
conflicts=(spirv-tools)
provides=(spirv-tools)

source=(
  'git+https://github.com/KhronosGroup/SPIRV-Tools'
  'git+https://github.com/google/googletest.git'
  'git+https://github.com/google/effcee.git'
  'git+https://github.com/google/re2.git'
  'git+https://github.com/abseil/abseil-cpp.git'
)
sha1sums=('SKIP')

run_training_workload() {
  local build_dir=$1
  local bin="$build_dir/tools"; [[ -x $bin/spirv-as ]] || bin="$build_dir"

  echo ":: ⚔️  Launching SPIRV-Tools workload (robust)"

  # Make sure core tools exist – otherwise skip silently
  for exe in spirv-as spirv-opt spirv-val spirv-dis; do
    [[ -x $bin/$exe ]] || { echo "!! $exe missing, skipping workload"; return 0; }
  done

  local wd="$srcdir/workload"; rm -rf "$wd"; mkdir -p "$wd/glsl"

  # ── 1. Shader templates ──────────────────────────────────────────────────
  cat >"$wd/t.vert" <<'VERT'
#version 460 core
layout(location=0) in vec3 p;
layout(push_constant) uniform PC { mat4 mvp; } pc;
void main(){ gl_Position = pc.mvp * vec4(p,1); }
VERT

  # Place-holders @R @G @B are replaced with numeric literals (avoids %f issue)
  cat >"$wd/t.frag" <<'FRAG'
#version 460 core
layout(location=0) out vec4 c;
void main(){ c = vec4(@R,@G,@B,1); }
FRAG

  cat >"$wd/t.comp" <<'COMP'
#version 460 core
layout(local_size_x=@LS) in;
void main(){}
COMP

  for i in {0..99}; do
    cp "$wd/t.vert" "$wd/glsl/v${i}.vert"
    sed -e "s/@R/0.$((i%9))/"  \
        -e "s/@G/0.$((i%7))/"  \
        -e "s/@B/0.$((i%5))/"  \
        "$wd/t.frag" > "$wd/glsl/f${i}.frag"
    sed "s/@LS/$((16+i%96))/" "$wd/t.comp" > "$wd/glsl/c${i}.comp"
  done

  # ── 2. Compile GLSL → SPIR-V (warnings tolerated) ───────────────────────
  if command -v glslangValidator &>/dev/null; then
    find "$wd/glsl" -type f -print0 | \
      xargs -0 -P"$(nproc)" -I{} bash -c '
        src="{}"; stage=${src##*.}; stage=${stage:0:4};
        glslangValidator -q --target-env vulkan1.3 -S "$stage" "$src" \
          -o "$src.spv" 2>/dev/null || echo "glslang fail: $src"' || true
  else
    echo "!! glslangValidator missing – GLSL step skipped"
  fi

  # ── 3. Hand-written SPIR-V file ──────────────────────────────────────────
  cat >"$wd/min.asm" <<'ASM'
; SPIR-V
               OpCapability Shader
               OpMemoryModel Logical GLSL450
               OpEntryPoint GLCompute %4 "main"
               OpExecutionMode %4 LocalSize 32 1 1
%void = OpTypeVoid
%fn   = OpTypeFunction %void
%4    = OpFunction %void None %fn
%lb   = OpLabel
        OpReturn
        OpFunctionEnd
ASM
  "$bin/spirv-as" "$wd/min.asm" -o "$wd/min.spv"

  # ── 4. Round-trip disassemble / assemble ────────────────────────────────
  find "$wd" -name '*.spv' -print0 | \
    xargs -0 -P"$(nproc)" -I{} bash -c '
      f="{}"; '"$bin/spirv-dis"' "$f" -o "$f.asm";
      '"$bin/spirv-as"' "$f.asm" -o "$f.rt.spv"' || true

  # ── 5. Validation & optimisation sweeps ─────────────────────────────────
  find "$wd" -name '*.spv' -print0 | \
    xargs -0 -P"$(nproc)" "$bin/spirv-val" || true

  for opt in -O -Os \
             --inline-entry-points-exhaustive \
             --eliminate-dead-code-aggressive \
             --scalar-replacement=256 \
             --loop-unroll \
             --convert-relaxed-to-half; do
    find "$wd" -name '*.spv' -print0 | \
      xargs -0 -P"$(nproc)" -I{} "$bin/spirv-opt" "$opt" {} -o {}."${opt//[^a-z0-9]/}" 2>/dev/null || true
  done

  # ── 6. Three-stage pipeline strip-debug → -O → -Os ──────────────────────
  find "$wd" -name '*.spv' ! -name '*stage3*' -print0 | \
    xargs -0 -P"$(nproc)" -I{} bash -c '
      f="{}"; b=${f%.spv};
      '"$bin/spirv-opt"' --strip-debug "$f" -o "$b.s1.spv" 2>/dev/null;
      '"$bin/spirv-opt"' -O            "$b.s1.spv" -o "$b.s2.spv" 2>/dev/null;
      '"$bin/spirv-opt"' -Os           "$b.s2.spv" -o "$b.s3.spv" 2>/dev/null' || true

  # ── 7. Disassemble finals & generate CFGs (ignore failures) ─────────────
  find "$wd" -name '*.s3.spv' -print0 | \
    xargs -0 -P"$(nproc)" -I{} bash -c '
      '"$bin/spirv-dis"' "{}" -o "{}.txt";
      '"$bin/spirv-cfg"'  "{}" -o "{}.dot"' 2>/dev/null || true

  rm -rf "$wd"
  echo ":: Workload completed"
}


##############################################################################
#  prepare                                                                   #
##############################################################################
prepare() {
  cd SPIRV-Tools/external
  ln -sf "$srcdir"/googletest
  ln -sf "$srcdir"/abseil-cpp   abseil_cpp
  ln -sf "$srcdir"/effcee
  ln -sf "$srcdir"/re2
}

##############################################################################
pkgver() {
  git -C SPIRV-Tools describe --tags --match 'v*.*' --abbrev=10 |
    sed 's/^v//; s/-/+/; s/-/./'
}

##############################################################################
#  build – three-stage PGO pipeline                                          #
##############################################################################
build() {
  rm -rf "$srcdir"/_build{,_pgo1,_pgo2} "$srcdir"/pgo_{raw,cs}
  mkdir -p "$srcdir"/pgo_{raw,cs}

  local ORIG_CFLAGS="$CFLAGS"  ORIG_CXX="$CXXFLAGS"  ORIG_LD="$LDFLAGS"
  local INSTR_FLAGS="-g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=150 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"

  ############  Stage-1  ####################################################
  CFLAGS="$ORIG_CFLAGS -fprofile-generate=$srcdir/pgo_raw $INSTR_FLAGS"
  CXXFLAGS="$ORIG_CXX -fprofile-generate=$srcdir/pgo_raw $INSTR_FLAGS"
  LDFLAGS="$ORIG_LD -fprofile-generate=$srcdir/pgo_raw"
  cmake -S SPIRV-Tools -B _build_pgo1 \
        -DCMAKE_BUILD_TYPE=Plain \
        -DCMAKE_INSTALL_PREFIX=/usr \
        -DCMAKE_INSTALL_LIBDIR=lib \
        -DSPIRV-Headers_SOURCE_DIR=/usr \
        -DBUILD_SHARED_LIBS=ON \
        -DSPIRV_TOOLS_BUILD_STATIC=OFF \
        -DSPIRV_WERROR=OFF -Wno-dev
  make -C _build_pgo1
  ( make -C _build_pgo1 test || true )
  run_training_workload "$srcdir/_build_pgo1" || true
  llvm-profdata merge -output "$srcdir/standard.profdata" "$srcdir/pgo_raw"/*.profraw

  ############  Stage-2  ####################################################
  CFLAGS="$ORIG_CFLAGS -fprofile-use=$srcdir/standard.profdata -fcs-profile-generate=$srcdir/pgo_cs $INSTR_FLAGS"
  CXXFLAGS="$ORIG_CXX -fprofile-use=$srcdir/standard.profdata -fcs-profile-generate=$srcdir/pgo_cs $INSTR_FLAGS"
  LDFLAGS="$ORIG_LD -fprofile-use=$srcdir/standard.profdata -fcs-profile-generate=$srcdir/pgo_cs"
  cmake -S SPIRV-Tools -B _build_pgo2 \
        -DCMAKE_BUILD_TYPE=Plain \
        -DCMAKE_INSTALL_PREFIX=/usr \
        -DCMAKE_INSTALL_LIBDIR=lib \
        -DSPIRV-Headers_SOURCE_DIR=/usr \
        -DBUILD_SHARED_LIBS=ON \
        -DSPIRV_TOOLS_BUILD_STATIC=OFF \
        -DSPIRV_WERROR=OFF -Wno-dev
  make -C _build_pgo2
  ( make -C _build_pgo2 test || true )
  run_training_workload "$srcdir/_build_pgo2" || true
  llvm-profdata merge -output "$srcdir/merged.profdata" "$srcdir/pgo_cs"/*.profraw "$srcdir/standard.profdata"

  ############  Stage-3  (final) ###########################################
  CFLAGS="$ORIG_CFLAGS -fprofile-use=$srcdir/merged.profdata"
  CXXFLAGS="$ORIG_CXX -fprofile-use=$srcdir/merged.profdata"
  LDFLAGS="$ORIG_LD   -fprofile-use=$srcdir/merged.profdata"
  cmake -S SPIRV-Tools -B _build \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=/usr \
        -DCMAKE_INSTALL_LIBDIR=lib \
        -DSPIRV-Headers_SOURCE_DIR=/usr \
        -DBUILD_SHARED_LIBS=ON \
        -DSPIRV_TOOLS_BUILD_STATIC=OFF \
        -DSPIRV_WERROR=OFF -Wno-dev
  make -C _build
}

##############################################################################
check() { make -C _build test; }

##############################################################################
package() {
  make -C _build DESTDIR="$pkgdir" install
  install -Dm644 SPIRV-Tools/LICENSE \
          "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
}
