pkgname=spirv-tools-git
pkgver=2025.1.rc1+17.g9e470ef0f9
pkgrel=1
epoch=1
pkgdesc='API and commands for processing SPIR-V modules'
url='https://github.com/KhronosGroup/SPIRV-Tools'
arch=('i686' 'x86_64')
license=('custom')
groups=('vulkan-devel')
source=('git+https://github.com/KhronosGroup/SPIRV-Tools'
        'git+https://github.com/google/googletest.git'
        'git+https://github.com/google/effcee.git'
        'git+https://github.com/google/re2.git'
        'git+https://github.com/abseil/abseil-cpp.git')
sha1sums=('SKIP')
depends=('glibc' 'gcc-libs' 'sh')
makedepends=('cmake' 'python' 'git' 'spirv-headers-git' 'clang' 'llvm' 'lld')
conflicts=('spirv-tools')
provides=('spirv-tools')

prepare() {
  # Link external sources so cmake can find them
  cd SPIRV-Tools/external
  ln -s "$srcdir"/googletest
  ln -s "$srcdir"/abseil-cpp abseil_cpp
  ln -s "$srcdir"/effcee
  ln -s "$srcdir"/re2

  # Use Clang/LLVM toolchain
  export CC=clang
  export CXX=clang++
  export LD=lld
  export AR=llvm-ar
  export NM=llvm-nm
  export STRIP=llvm-strip
  export OBJCOPY=llvm-objcopy
  export OBJDUMP=llvm-objdump
  export READELF=llvm-readelf
  export RANLIB=llvm-ranlib
  export HOSTCC=clang
  export HOSTCXX=clang++
}

pkgver() {
  git -C SPIRV-Tools describe --tags --match 'v*.*' --abbrev=10 | sed 's/^v//; s/-/+/; s/-/./'
}

run_training_workload() {
  local build_dir="$1"
  local workload_dir="$srcdir/workload"

  echo "Running SPIRV-Tools PGO training workload for AMD Vega 64..."

  # Create a temporary directory for workload files
  mkdir -p "$workload_dir"
  chmod -R u+w "$workload_dir"

  # Determine the correct path to SPIRV-Tools binaries
  local spirv_tools_bin
  if [ -d "$build_dir/tools" ]; then
    spirv_tools_bin="$build_dir/tools"
  else
    spirv_tools_bin="$build_dir"
  fi

  # Check if SPIRV-Tools binaries are available
  local missing_binaries=0
  for binary in spirv-as spirv-opt spirv-val spirv-dis; do
    if [ ! -x "$spirv_tools_bin/$binary" ]; then
      echo "Warning: SPIRV-Tools binary '$binary' not found in $spirv_tools_bin. Some workload steps may be skipped."
      missing_binaries=$((missing_binaries + 1))
    fi
  done
  if [ $missing_binaries -eq 4 ]; then
    echo "Error: No SPIRV-Tools binaries found in $spirv_tools_bin. Skipping workload."
    return 1
  fi

  # Check if glslangValidator is available for GLSL to SPIR-V compilation
  if ! command -v glslangValidator >/dev/null 2>&1; then
    echo "Error: glslangValidator not found. Install glslang (e.g., via the 'glslang' package) to compile GLSL shaders. Skipping workload."
    return 1
  fi

  # Create vertex shader optimized for Vega 64
  cat > "$workload_dir/vega_shader.vert" << 'EOF'
#version 450
#extension GL_AMD_gpu_shader_half_float : enable

layout(location = 0) in vec3 inPosition;
layout(location = 1) in vec3 inNormal;
layout(location = 2) in vec2 inTexCoord;

layout(location = 0) out vec3 outPosition;
layout(location = 1) out vec3 outNormal;
layout(location = 2) out vec2 outTexCoord;

layout(binding = 0) uniform UBO {
    mat4 model;
    mat4 view;
    mat4 projection;
} ubo;

void main() {
    outPosition = vec3(ubo.model * vec4(inPosition, 1.0));
    outNormal = mat3(ubo.model) * inNormal;
    outTexCoord = inTexCoord;

    gl_Position = ubo.projection * ubo.view * ubo.model * vec4(inPosition, 1.0);
}
EOF

  # Create fragment shader optimized for Vega 64
  cat > "$workload_dir/vega_shader.frag" << 'EOF'
#version 450
#extension GL_AMD_gpu_shader_half_float : enable

layout(location = 0) in vec3 inPosition;
layout(location = 1) in vec3 inNormal;
layout(location = 2) in vec2 inTexCoord;

layout(location = 0) out vec4 outColor;

layout(binding = 1) uniform sampler2D texSampler;

void main() {
    vec3 normal = normalize(inNormal);
    vec3 lightDir = normalize(vec3(1.0, 1.0, 1.0));
    float diffuse = max(dot(normal, lightDir), 0.0);

    vec3 color = texture(texSampler, inTexCoord).rgb;
    outColor = vec4(color * diffuse, 1.0);
}
EOF

  # Create compute shader optimized for Vega 64
  cat > "$workload_dir/vega_shader.comp" << 'EOF'
#version 450
#extension GL_AMD_gpu_shader_half_float : enable

layout(local_size_x = 64) in;

layout(binding = 0) buffer InBuffer {
    float data[];
} inBuffer;

layout(binding = 1) buffer OutBuffer {
    float data[];
} outBuffer;

void main() {
    uint index = gl_GlobalInvocationID.x;
    outBuffer.data[index] = inBuffer.data[index] * 2.0;
}
EOF

  # Compile GLSL to SPIR-V
  echo "Compiling shaders to SPIR-V..."
  for shader_file in "$workload_dir"/*.vert "$workload_dir"/*.frag "$workload_dir"/*.comp; do
    if [ -f "$shader_file" ]; then
      local base_name=$(basename "$shader_file")
      local shader_stage=""

      if [[ $shader_file == *".vert" ]]; then
        shader_stage="vert"
      elif [[ $shader_file == *".frag" ]]; then
        shader_stage="frag"
      elif [[ $shader_file == *".comp" ]]; then
        shader_stage="comp"
      fi

      if [ -n "$shader_stage" ]; then
        local spv_file="$workload_dir/${base_name}.spv"
        echo "Compiling $shader_file to $spv_file using stage $shader_stage"

        if ! glslangValidator -S "$shader_stage" --target-env vulkan1.3 "$shader_file" -o "$spv_file" 2>&1; then
          echo "Warning: Failed to compile $shader_file to SPIR-V."
        else
          echo "Successfully compiled $shader_file to SPIR-V."
        fi
      fi
    fi
  done

  # Validate SPIR-V binaries
  if [ -x "$spirv_tools_bin/spirv-val" ]; then
    echo "Validating SPIR-V binaries..."
    for spv_file in "$workload_dir"/*.spv; do
      if [ -f "$spv_file" ]; then
        echo "Validating $spv_file"
        "$spirv_tools_bin/spirv-val" "$spv_file"
      fi
    done
  fi

  # EXTREMELY SIMPLIFIED OPTIMIZATION APPROACH TO AVOID ARGUMENT ISSUES
  if [ -x "$spirv_tools_bin/spirv-opt" ]; then
    echo "Running PGO optimization workload..."

    # Define optimization passes as individual commands
    for spv_file in "$workload_dir"/*.spv; do
      if [ -f "$spv_file" ]; then
        base_name=$(basename "$spv_file" .spv)

        # Basic optimization pass
        echo "Running basic optimization on $spv_file"
        "$spirv_tools_bin/spirv-opt" -O "$spv_file" -o "$workload_dir/${base_name}_O.spv"

        # Size optimization pass
        echo "Running size optimization on $spv_file"
        "$spirv_tools_bin/spirv-opt" -Os "$spv_file" -o "$workload_dir/${base_name}_Os.spv"

        # Run individual optimization passes one at a time
        echo "Running custom optimizations on $spv_file"

        # Performance optimization pass
        "$spirv_tools_bin/spirv-opt" --inline-entry-points-exhaustive "$spv_file" -o "$workload_dir/${base_name}_inline.spv"

        # Dead code elimination pass
        "$spirv_tools_bin/spirv-opt" --eliminate-dead-code-aggressive "$spv_file" -o "$workload_dir/${base_name}_dce.spv"

        # Scalar replacement pass
        "$spirv_tools_bin/spirv-opt" --scalar-replacement=100 "$spv_file" -o "$workload_dir/${base_name}_scalar.spv"

        # Loop optimization pass
        "$spirv_tools_bin/spirv-opt" --loop-unroll "$spv_file" -o "$workload_dir/${base_name}_unroll.spv"

        # AMD specific optimization pass
        "$spirv_tools_bin/spirv-opt" --convert-relaxed-to-half "$spv_file" -o "$workload_dir/${base_name}_fp16.spv"
      fi
    done
  fi

  # Disassemble SPIR-V for analysis
  if [ -x "$spirv_tools_bin/spirv-dis" ]; then
    echo "Disassembling SPIR-V binaries for analysis..."
    for spv_file in "$workload_dir"/*.spv; do
      if [ -f "$spv_file" ]; then
        echo "Disassembling $spv_file"
        "$spirv_tools_bin/spirv-dis" "$spv_file" -o "${spv_file}.dis"
      fi
    done
  fi

  # Multi-stage pipeline to simulate real-world usage
  if [ -x "$spirv_tools_bin/spirv-opt" ]; then
    echo "Simulating real-world optimization pipeline..."

    for spv_file in "$workload_dir"/*.spv; do
      if [[ $spv_file != *"_"* ]]; then  # Only process original files
        base_name=$(basename "$spv_file" .spv)

        # Perform a realistic optimization pipeline
        echo "Running multi-stage optimization on $spv_file"

        # Stage 1: Basic optimization
        "$spirv_tools_bin/spirv-opt" --strip-debug "$spv_file" -o "$workload_dir/${base_name}_stage1.spv"

        # Stage 2: Core optimizations (using output from stage 1)
        "$spirv_tools_bin/spirv-opt" -O "$workload_dir/${base_name}_stage1.spv" -o "$workload_dir/${base_name}_stage2.spv"

        # Stage 3: Size optimization (using output from stage 2)
        "$spirv_tools_bin/spirv-opt" -Os "$workload_dir/${base_name}_stage2.spv" -o "$workload_dir/${base_name}_final.spv"

        # Validate and disassemble the final result
        if [ -f "$workload_dir/${base_name}_final.spv" ]; then
          "$spirv_tools_bin/spirv-val" "$workload_dir/${base_name}_final.spv"
          "$spirv_tools_bin/spirv-dis" "$workload_dir/${base_name}_final.spv" -o "$workload_dir/${base_name}_final.dis"
        fi
      fi
    done
  fi

  # Exercise other spirv-tools binaries
  if [ -x "$spirv_tools_bin/spirv-cfg" ]; then
    echo "Generating control flow graphs..."
    for spv_file in "$workload_dir"/*.spv; do
      if [[ $spv_file != *"_"* ]]; then  # Only process original files
        echo "Generating CFG for $spv_file"
        "$spirv_tools_bin/spirv-cfg" "$spv_file" -o "${spv_file}.dot"
      fi
    done
  fi

  # Clean up workload directory
  rm -rf "$workload_dir"

  echo "SPIRV-Tools PGO training workload completed."
}

build() {
  # Ensure a clean build environment by removing existing build directories
  rm -rf "$srcdir/_build" "$srcdir/_build_pgo1" "$srcdir/_build_pgo2"

  # Create directories for PGO profiles
  mkdir -p "$srcdir/pgo_raw" "$srcdir/pgo_cs"
  chmod -R u+w "$srcdir/pgo_raw" "$srcdir/pgo_cs"

  # Store original flags
  CFLAGS_ORIG="$CFLAGS"
  CXXFLAGS_ORIG="$CXXFLAGS"
  LDFLAGS_ORIG="$LDFLAGS"

  # PGO instrumentation flags
  local _common_instrument_flags=" -g3 -fno-omit-frame-pointer -mllvm -vp-counters-per-site=10 -mllvm -runtime-counter-relocation -mllvm -enable-value-profiling"

  # --- Stage 1: Standard PGO - First round with standard instrumentation ---
  echo "Stage 1: Building with standard PGO instrumentation..."

  # Reset flags to avoid contamination
  export CFLAGS="$CFLAGS_ORIG -fprofile-generate=$srcdir/pgo_raw$_common_instrument_flags"
  export CXXFLAGS="$CXXFLAGS_ORIG -fprofile-generate=$srcdir/pgo_raw$_common_instrument_flags"
  export LDFLAGS="$LDFLAGS_ORIG -fprofile-generate=$srcdir/pgo_raw"

  # Configure and build with standard instrumentation
  cmake \
    -S SPIRV-Tools -B _build_pgo1 \
    -D CMAKE_BUILD_TYPE=Plain \
    -D CMAKE_C_STANDARD=23 \
    -D CMAKE_CXX_STANDARD=23 \
    -D CMAKE_INSTALL_PREFIX=/usr \
    -D CMAKE_INSTALL_LIBDIR=lib \
    -D SPIRV-Headers_SOURCE_DIR=/usr/ \
    -D BUILD_SHARED_LIBS=ON \
    -D SPIRV_TOOLS_BUILD_STATIC=OFF \
    -D SPIRV_WERROR=OFF \
    -Wno-dev
  if ! make -C _build_pgo1; then
    echo "Error: Build failed during standard PGO instrumentation stage."
    exit 1
  fi

  # Run tests to generate profile data
  echo "Running tests to generate standard PGO profile data..."
  if ! make -C _build_pgo1 test; then
    echo "Warning: Some tests failed during standard PGO profile generation. Profile data may be incomplete."
  fi

  # Run training workload for better coverage
  if ! run_training_workload "$srcdir/_build_pgo1"; then
    echo "Warning: Training workload failed during standard PGO profile generation."
  fi

  # Check if profile data exists
  if ! ls "$srcdir/pgo_raw"/*.profraw >/dev/null 2>&1; then
    echo "Error: No standard PGO profile data generated. Aborting."
    exit 1
  fi

  # Merge standard profile data
  echo "Merging standard PGO profile data..."
  if ! llvm-profdata merge -output="$srcdir/standard.profdata" "$srcdir/pgo_raw"/*.profraw; then
    echo "Error: Failed to merge standard PGO profile data."
    exit 1
  fi

  # --- Stage 2: Context-Sensitive PGO - Second round using first profile ---
  echo "Stage 2: Building with context-sensitive PGO instrumentation..."

  # Reset flags to avoid contamination
  export CFLAGS="$CFLAGS_ORIG -fprofile-use=$srcdir/standard.profdata -fcs-profile-generate=$srcdir/pgo_cs$_common_instrument_flags"
  export CXXFLAGS="$CXXFLAGS_ORIG -fprofile-use=$srcdir/standard.profdata -fcs-profile-generate=$srcdir/pgo_cs$_common_instrument_flags"
  export LDFLAGS="$LDFLAGS_ORIG -fprofile-use=$srcdir/standard.profdata -fcs-profile-generate=$srcdir/pgo_cs"

  # Configure and build with CS-PGO instrumentation
  cmake \
    -S SPIRV-Tools -B _build_pgo2 \
    -D CMAKE_BUILD_TYPE=Plain \
    -D CMAKE_C_STANDARD=23 \
    -D CMAKE_CXX_STANDARD=23 \
    -D CMAKE_INSTALL_PREFIX=/usr \
    -D CMAKE_INSTALL_LIBDIR=lib \
    -D SPIRV-Headers_SOURCE_DIR=/usr/ \
    -D BUILD_SHARED_LIBS=ON \
    -D SPIRV_TOOLS_BUILD_STATIC=OFF \
    -D SPIRV_WERROR=OFF \
    -Wno-dev
  if ! make -C _build_pgo2; then
    echo "Error: Build failed during context-sensitive PGO instrumentation stage."
    exit 1
  fi

  # Run tests to generate context-sensitive profile data
  echo "Running tests to generate context-sensitive PGO profile data..."
  if ! make -C _build_pgo2 test; then
    echo "Warning: Some tests failed during context-sensitive PGO profile generation. Profile data may be incomplete."
  fi

  # Run training workload for better coverage
  if ! run_training_workload "$srcdir/_build_pgo2"; then
    echo "Warning: Training workload failed during context-sensitive PGO profile generation."
  fi

  # Check if profile data exists
  if ! ls "$srcdir/pgo_cs"/*.profraw >/dev/null 2>&1; then
    echo "Error: No context-sensitive PGO profile data generated. Aborting."
    exit 1
  fi

  # Merge context-sensitive profile with standard profile
  echo "Merging context-sensitive profile with standard profile..."
  if ! llvm-profdata merge -output="$srcdir/merged.profdata" "$srcdir/pgo_cs"/*.profraw "$srcdir/standard.profdata"; then
    echo "Error: Failed to merge context-sensitive PGO profile data."
    exit 1
  fi

  # --- Stage 3: Final build with merged profile data ---
  echo "Stage 3: Building final version with merged profile data..."

  # Reset flags to avoid contamination
  export CFLAGS="$CFLAGS_ORIG -fprofile-use=$srcdir/merged.profdata"
  export CXXFLAGS="$CXXFLAGS_ORIG -fprofile-use=$srcdir/merged.profdata"
  export LDFLAGS="$LDFLAGS_ORIG -fprofile-use=$srcdir/merged.profdata"

  # Configure and build with final optimizations
  cmake \
    -S SPIRV-Tools -B _build \
    -D CMAKE_BUILD_TYPE=Release \
    -D CMAKE_C_STANDARD=23 \
    -D CMAKE_CXX_STANDARD=23 \
    -D CMAKE_INSTALL_PREFIX=/usr \
    -D CMAKE_INSTALL_LIBDIR=lib \
    -D SPIRV-Headers_SOURCE_DIR=/usr/ \
    -D BUILD_SHARED_LIBS=ON \
    -D SPIRV_TOOLS_BUILD_STATIC=OFF \
    -D SPIRV_WERROR=OFF \
    -Wno-dev
  if ! make -C _build; then
    echo "Error: Build failed during final PGO optimization stage."
    exit 1
  fi
}

check() {
  make -C _build test
}

package() {
  make -C _build DESTDIR="$pkgdir" install
  install -Dm644 "$srcdir"/SPIRV-Tools/LICENSE "$pkgdir"/usr/share/licenses/"$pkgname"/LICENSE
}
