--- meson.build.orig	2025-07-04 23:54:25.701870729 +0200
+++ meson.build	2025-07-05 01:07:02.751770617 +0200
@@ -224,6 +224,36 @@ elif use_ssse3.enabled()
   error('ssse3 Support unavailable, but required')
 endif
 
+use_avx2 = get_option('avx2')
+have_avx2 = false
+avx2_flags = []
+if cc.get_id() != 'msvc'
+  avx2_flags = ['-mavx2', '-Winline']
+endif
+
+if not use_avx2.disabled()
+  if host_machine.cpu_family().startswith('x86')
+    if cc.compiles('''
+        #include <immintrin.h>
+        int param;
+        int main () {
+          __m256i a = _mm256_set1_epi32 (param), b = _mm256_set1_epi32 (param + 1), c;
+          c = _mm256_maddubs_epi16 (a, b);
+          return _mm256_cvtsi256_si32(c);
+        }''',
+        args : avx2_flags,
+        name : 'AVX2 Intrinsic Support')
+      have_avx2 = true
+    endif
+  endif
+endif
+
+if have_avx2
+  config.set10('USE_AVX2', true)
+elif use_avx2.enabled()
+  error('AVX2 Support unavailable, but required')
+endif
+
 use_vmx = get_option('vmx')
 have_vmx = false
 vmx_flags = ['-maltivec', '-mabi=altivec']
@@ -249,7 +279,7 @@ if cc.compiles('''
     ".endfunc"
     );''',
     name : 'test for ASM .func directive')
-    config.set('ASM_HAVE_FUNC_DIRECTIVE', 1)    
+    config.set('ASM_HAVE_FUNC_DIRECTIVE', 1)
 endif
 
 if cc.compiles('''
@@ -273,7 +303,7 @@ if cc.links('''
         return testlabel();
     }''',
     name : 'test for ASM leading underscore')
-    config.set('ASM_LEADING_UNDERSCORE', 1)    
+    config.set('ASM_LEADING_UNDERSCORE', 1)
 endif
 
 
@@ -587,8 +617,26 @@ version_conf.set('PIXMAN_VERSION_MICRO',
 
 add_project_arguments('-DHAVE_CONFIG_H', language : ['c'])
 
+# This dependency object provides the include path to the build root,
+# where the generated config.h will live.
+config_dep = declare_dependency(
+  include_directories: include_directories('.')
+)
+
+configure_file(
+  output : 'config.h',
+  configuration : config
+)
+
 subdir('pixman')
 
+# Now that libpixman is defined in the pixman subdir, create a dependency
+# object for it. This object will be visible to all subsequent subdirs.
+idep_pixman = declare_dependency(
+  link_with: libpixman,
+  include_directories: include_directories('pixman')
+)
+
 if not get_option('tests').disabled() or not get_option('demos').disabled()
   subdir('test/utils')
 endif
