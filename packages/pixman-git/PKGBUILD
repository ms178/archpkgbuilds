pkgname=pixman-git
pkgver=0.46.2.r1.gf66204b
pkgrel=1
pkgdesc="The pixel-manipulation library for X and cairo"
arch=(x86_64)
url="https://cgit.freedesktop.org/pixman/"
license=('custom')
provides=(pixman libpixman-1.so=0-64)
conflicts=(pixman)
depends=('glibc')
makedepends=('meson' 'libpng' 'llvm' 'clang' 'python') # Added llvm, clang, python for PGO
source=(git+https://gitlab.freedesktop.org/pixman/pixman.git avx2-modern.patch)
sha1sums=('SKIP')

pkgver() {
    cd pixman
    git describe --long --tags | sed 's/^[_a-z]*\([0-9.]*\)[^-]*/\1/;s/\([^-]*-g\)/r\1/;s/-/./g;s/^\.//'
}

prepare() {
    # although removing _build folder in build() function feels more natural,
    # that interferes with the spirit of makepkg --noextract
    if [ -d _build ]; then
        rm -rf _build
    fi

    local src
    for src in "${source[@]}"; do
        src="${src%%::*}"
        src="${src##*/}"
        [[ $src = *.patch ]] || continue
        echo "Applying patch $src..."
        patch --directory="pixman" --forward --strip=1 < "$src"
    done
}

build() {
    local meson_opts=(
        -D loongson-mmi=disabled
        -D a64-neon=disabled
        -D rvv=disabled
        -D tests=enabled  # Enable tests for PGO profiling
        -D tls=enabled
        -D b_ndebug=true
        -D b_pie=false
        -D c_std=gnu18
        -D cpp_std=gnu++2a
        --buildtype=release
        --wrap-mode=nofallback
        -D avx2=enabled
        -D vmx=disabled
        -D arm-simd=disabled
        -D neon=disabled
        -D mips-dspr2=disabled
        -D mmx=disabled
        -D sse2=enabled
        -D ssse3=enabled
        -D gtk=disabled
    )

    pgo_dir="$srcdir/pgo-data"
    mkdir -p "${pgo_dir}/standard"
    mkdir -p "${pgo_dir}/cs"

    orig_cflags="$CFLAGS"
    orig_cxxflags="$CXXFLAGS"
    orig_ldflags="$LDFLAGS"

    # Ensure Clang is used for PGO
    export CC=clang
    export CXX=clang++

    # Step 1: Build with standard PGO instrumentation
    msg2 "== Building pixman with standard PGO instrumentation"
    export CFLAGS="${orig_cflags} -fprofile-generate=${pgo_dir}/standard -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"
    export CXXFLAGS="${orig_cxxflags} -fprofile-generate=${pgo_dir}/standard -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"
    export LDFLAGS="${orig_ldflags} -fprofile-generate=${pgo_dir}/standard -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"

    # Ensure the build directory is clean before starting
    rm -rf _build_pgo
    if ! arch-meson pixman _build_pgo "${meson_opts[@]}"; then
        error "Failed to configure pixman for standard PGO build"
        return 1
    fi
    if ! ninja $NINJAFLAGS -C _build_pgo; then
        error "Failed to build pixman with standard PGO instrumentation"
        return 1
    fi

    # Step 2: Run tests to generate standard PGO profile
    msg2 "Running pixman tests for standard PGO profile"
    if ! meson test -C _build_pgo; then
        error "Pixman tests failed for standard PGO profile"
        return 1
    fi

    # Step 3: Merge standard PGO profile data
    if ! llvm-profdata merge -output="${pgo_dir}/standard.profdata" "${pgo_dir}/standard/"*.profraw; then
        error "Failed to merge standard PGO profile data"
        return 1
    fi

    # Step 4: Build with context-sensitive PGO instrumentation
    msg2 "== Building pixman with context-sensitive PGO instrumentation"
    export CFLAGS="${orig_cflags} -fprofile-use=${pgo_dir}/standard.profdata -fcs-profile-generate=${pgo_dir}/cs -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"
    export CXXFLAGS="${orig_cxxflags} -fprofile-use=${pgo_dir}/standard.profdata -fcs-profile-generate=${pgo_dir}/cs -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"
    export LDFLAGS="${orig_ldflags} -fprofile-use=${pgo_dir}/standard.profdata -fcs-profile-generate=${pgo_dir}/cs -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"

    # Ensure the build directory is clean before starting
    rm -rf _build_pgo_cs
    if ! arch-meson pixman _build_pgo_cs "${meson_opts[@]}"; then
        error "Failed to configure pixman for context-sensitive PGO build"
        return 1
    fi
    if ! ninja $NINJAFLAGS -C _build_pgo_cs; then
        error "Failed to build pixman with context-sensitive PGO instrumentation"
        return 1
    fi

    # Step 5: Run tests to generate context-sensitive PGO profile
    msg2 "Running pixman tests for context-sensitive PGO profile"
    if ! meson test -C _build_pgo_cs; then
        error "Pixman tests failed for context-sensitive PGO profile"
        return 1
    fi

    # Step 6: Merge context-sensitive PGO profile data with standard profile
    if ! llvm-profdata merge -output="${pgo_dir}/merged.profdata" "${pgo_dir}/cs/"*.profraw "${pgo_dir}/standard.profdata"; then
        error "Failed to merge context-sensitive PGO profile data"
        return 1
    fi

    # Step 7: Build final optimized version with merged PGO data
    msg2 "== Building final optimized version of pixman with PGO data"
    export CFLAGS="${orig_cflags} -fprofile-use=${pgo_dir}/merged.profdata"
    export CXXFLAGS="${orig_cxxflags} -fprofile-use=${pgo_dir}/merged.profdata"
    export LDFLAGS="${orig_ldflags} -fprofile-use=${pgo_dir}/merged.profdata"

    # Ensure the build directory is clean before starting
    rm -rf _build
    if ! arch-meson pixman _build "${meson_opts[@]}"; then
        error "Failed to configure pixman for final optimized build"
        return 1
    fi
    if ! ninja $NINJAFLAGS -C _build; then
        error "Failed to build final optimized pixman"
        return 1
    fi
}

package() {
    DESTDIR="$pkgdir" meson install -C _build
    install -Dt "$pkgdir/usr/share/licenses/pixman" -m644 pixman/COPYING
}
