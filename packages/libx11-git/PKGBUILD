# Maintainer: Super Genius CachyOS Maintainer
pkgname=libx11-git
_pkgname=libx11
pkgver=1.8.12.r9.g622de261
pkgrel=1
pkgdesc="Core X11 protocol client library (PGO + BOLT optimized for gaming/desktop)"
arch=('x86_64' 'i686')
url="https://www.x.org/wiki/"
license=('custom')
depends=('glibc' 'libxcb' 'xorgproto')
makedepends=(
  git xorg-util-macros xtrans clang llvm
  glmark2 vulkan-tools xorg-x11perf mesa-utils
  xorg-xdpyinfo xclip xorg-xrandr xorg-xprop
)
provides=('libx11')
conflicts=('libx11')
options=('staticlibs')
source=("git+https://gitlab.freedesktop.org/xorg/lib/${_pkgname}.git")
sha256sums=('SKIP')

# Append-only instrumentation flags; do not overwrite user flags
_extra_instr='-g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling'

pkgver() {
  cd "${_pkgname}"
  local desc
  desc=$(git describe --tags --long 2>/dev/null || echo "libX11-0-0-g$(git rev-parse --short HEAD)")
  sed -E 's/^libX11-//; s/-([0-9]+)-g/.r\1.g/; s/-/./g' <<< "$desc"
}

build() {
  set -euo pipefail

  # Preserve user flags
  local U_CFLAGS="$CFLAGS"
  local U_CXXFLAGS="$CXXFLAGS"
  local U_LDFLAGS="$LDFLAGS"

  # Layout
  mkdir -p "${srcdir}/build-pgo" "${srcdir}/build-final"
  mkdir -p "${srcdir}/pgo_profiles" "${srcdir}/bolt_profile"
  mkdir -p "${srcdir}/temp_install_pgo" "${srcdir}/temp_install_final"
  mkdir -p "${srcdir}/bolt_instrumented" "${srcdir}/bolt_opt"

  # Training workload with strict timeouts for glmark2 and vkcube (fully automated)
  cat > "${srcdir}/training_workload.sh" << 'EOF'
#!/bin/bash
set -euo pipefail
LIBDIR="${1:?need LIBDIR}"
MODE="${2:-pgo}"

if [[ -z "${DISPLAY:-}" ]]; then
  echo "[workload] ERROR: DISPLAY not set" >&2; exit 1
fi
if ! xdpyinfo >/dev/null 2>&1; then
  echo "[workload] ERROR: cannot connect to X display" >&2; exit 1
fi

# Helper: run a command with LD_LIBRARY_PATH and a hard timeout (seconds)
run_timed() { # <seconds> <cmd...>
  local secs="$1"; shift
  local bin; bin="$(awk '{print $1}' <<<"$*")"
  command -v "$bin" >/dev/null 2>&1 || { echo "[workload] skip $bin"; return 0; }
  echo "[workload] run (t=${secs}s): $*"
  timeout -k 2 "${secs}" env LD_LIBRARY_PATH="$LIBDIR${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}" "$@" >/dev/null 2>&1 || true
}

# Core protocol / queries (fast)
run_timed 3 xdpyinfo -ext all
run_timed 3 xrandr --query
run_timed 3 xprop -root
echo pgo-test | env LD_LIBRARY_PATH="$LIBDIR${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}" xclip -selection clipboard >/dev/null 2>&1 || true
run_timed 2 xclip -o -selection clipboard
run_timed 3 glxinfo -B

# Curated x11perf micro-tests with explicit short time
run_timed 3 x11perf -time 1 -rect10
run_timed 3 x11perf -time 1 -fillrect10
run_timed 3 x11perf -time 1 -copyarea10
run_timed 3 x11perf -time 1 -line10
run_timed 3 x11perf -time 1 -text
run_timed 3 x11perf -time 1 -putimage10

# Gaming/graphics: strict timeouts
# glmark2: finite scenes, additionally guarded by timeout
run_timed 7 glmark2 -b terrain:duration=2000
run_timed 7 glmark2 -b shading:shading=phong:duration=2000

# vkcube: run for a few seconds under timeout; no user action required
run_timed 6 vkcube

echo "[workload] done ($MODE)"
EOF
  chmod +x "${srcdir}/training_workload.sh"

  # Bootstrap
  pushd "${srcdir}/${_pkgname}" >/dev/null
  autoreconf -fi
  popd >/dev/null

  # PASS 1: PGO-instrumented build (instrumentation in compile flags only)
  export CC=clang
  export CXX=clang++
  export CFLAGS="$U_CFLAGS ${_extra_instr} -fprofile-generate=${srcdir}/pgo_profiles"
  export CXXFLAGS="$U_CXXFLAGS ${_extra_instr} -fprofile-generate=${srcdir}/pgo_profiles"
  export LDFLAGS="$U_LDFLAGS"

  pushd "${srcdir}/build-pgo" >/dev/null
  "${srcdir}/${_pkgname}/configure" --prefix=/usr --disable-docs --disable-devel-docs
  LLVM_PROFILE_FILE="${srcdir}/pgo_profiles/libx11-%p.profraw" make -j"$(nproc)"
  make DESTDIR="${srcdir}/temp_install_pgo" install
  popd >/dev/null

  echo "--> PGO training workload (with glmark2 + vkcube, time-limited)..."
  LLVM_PROFILE_FILE="${srcdir}/pgo_profiles/libx11-%p.profraw" \
  env -i HOME="$HOME" USER="$USER" DISPLAY="$DISPLAY" XAUTHORITY="${XAUTHORITY:-}" \
    LD_LIBRARY_PATH="${srcdir}/temp_install_pgo/usr/lib" PATH="/usr/bin" \
    "${srcdir}/training_workload.sh" "${srcdir}/temp_install_pgo/usr/lib" pgo \
    > "${srcdir}/pgo_workload.log" 2>&1 || echo "Warning: PGO workload returned non-zero; proceeding."

  if compgen -G "${srcdir}/pgo_profiles"/*.profraw >/dev/null; then
    llvm-profdata merge -o "${srcdir}/libx11.profdata" "${srcdir}/pgo_profiles"/*.profraw
  else
    echo "Warning: No PGO profiles generated; final build will be non-PGO."
    : > "${srcdir}/libx11.profdata" || true
  fi

  # PASS 2: Final (PGO + BOLT-friendly relocs)
  export CFLAGS="$U_CFLAGS"
  export CXXFLAGS="$U_CXXFLAGS"
  export LDFLAGS="$U_LDFLAGS -Wl,--emit-relocs"
  if [[ -s "${srcdir}/libx11.profdata" ]]; then
    export CFLAGS+=" -fprofile-use=${srcdir}/libx11.profdata -Wno-profile-instr-unprofiled"
    export CXXFLAGS+=" -fprofile-use=${srcdir}/libx11.profdata -Wno-profile-instr-unprofiled"
    export LDFLAGS+=" -fprofile-use=${srcdir}/libx11.profdata"
  fi

  pushd "${srcdir}/build-final" >/dev/null
  "${srcdir}/${_pkgname}/configure" --prefix=/usr --disable-docs --disable-devel-docs
  make -j"$(nproc)"
  make DESTDIR="${srcdir}/temp_install_final" install
  popd >/dev/null

  # BOLT instrumentation (stable file name + PID shards)
  if command -v llvm-bolt >/dev/null 2>&1; then
    echo "--> BOLT instrumentation..."
    mapfile -t libs < <(find "${srcdir}/temp_install_final/usr/lib" -type f -name "libX11.so.*.*.*" | sort -r)
    for lib in "${libs[@]}"; do
      base="$(basename "$lib")"
      cp -f "$lib" "${srcdir}/${base}.orig"
      if ! llvm-bolt "$lib" \
            --relocs \
            --lite \
            --instrument \
            --instrumentation-file="${srcdir}/bolt_profile/libX11.fdata" \
            --instrumentation-file-append-pid \
            -o "${srcdir}/bolt_instrumented/${base}"; then
        echo "Warning: BOLT instrumentation failed for $base; skipping."
        continue
      fi
      install -m755 "${srcdir}/bolt_instrumented/${base}" "$lib"
    done

    # BOLT training (non-interactive, time-limited glmark2 + vkcube)
    echo "--> BOLT training workload (time-limited)..."
    BOLT_INSTRUMENTATION_FILE="${srcdir}/bolt_profile/libX11.fdata" \
    BOLT_INSTRUMENTATION_FILE_APPEND_PID=1 \
    env -i HOME="$HOME" USER="$USER" DISPLAY="$DISPLAY" XAUTHORITY="${XAUTHORITY:-}" \
      LD_LIBRARY_PATH="${srcdir}/temp_install_final/usr/lib" PATH="/usr/bin" \
      LD_BIND_NOW=1 \
      "${srcdir}/training_workload.sh" "${srcdir}/temp_install_final/usr/lib" bolt \
      > "${srcdir}/bolt_workload.log" 2>&1 || echo "Warning: BOLT workload returned non-zero; proceeding."

    echo "--> BOLT: available fdata in ${srcdir}/bolt_profile"
    ls -l "${srcdir}/bolt_profile" || true

    # Merge shards into a single file
    merged_global="${srcdir}/bolt_profile/libX11.merged.fdata"
    if compgen -G "${srcdir}/bolt_profile/libX11.fdata".* >/dev/null; then
      if command -v merge-fdata >/dev/null 2>&1; then
        merge-fdata "${srcdir}/bolt_profile/libX11.fdata".* -o "$merged_global" || true
      else
        cat "${srcdir}/bolt_profile/libX11.fdata".* > "$merged_global" || true
      fi
    elif [[ -s "${srcdir}/bolt_profile/libX11.fdata" ]]; then
      cp -f "${srcdir}/bolt_profile/libX11.fdata" "$merged_global"
    fi

    if [[ -s "$merged_global" ]]; then
      echo "--> BOLT: merged profile: $merged_global ($(stat -c%s "$merged_global") bytes)"
    else
      echo "Warning: No BOLT profiles merged; optimization will fall back to PGO build."
    fi

    # Optimize originals
    mkdir -p "${srcdir}/bolt_opt"
    for orig in "${srcdir}"/libX11.so.*.*.*.orig; do
      [[ -f "$orig" ]] || continue
      base="$(basename "$orig" .orig)"
      out="${srcdir}/bolt_opt/${base}"
      merged="$merged_global"

      if [[ -s "$merged" ]]; then
        bolt_help="$(llvm-bolt --help 2>&1 || true)"
        align_flags=(--align-blocks)
        grep -q -- '--block-alignment' <<<"$bolt_help" && align_flags=(--align-blocks --block-alignment=32)

        if llvm-bolt "$orig" \
              --relocs \
              --data="$merged" \
              --reorder-blocks=ext-tsp \
              --reorder-functions=cdsort \
              --split-functions \
              --split-strategy=cdsplit \
              --icf=all \
              --jump-tables=move \
              --peepholes=all \
              --reg-reassign --use-aggr-reg-reassign \
              "${align_flags[@]}" \
              --dyno-stats \
              -o "$out"; then
          echo "BOLT: optimized $base"
        else
          echo "BOLT: optimization failed for $base; using PGO build."
          cp -f "$orig" "$out"
        fi
      else
        echo "BOLT: no merged profile; using PGO build for $base."
        cp -f "$orig" "$out"
      fi
    done
  else
    echo "llvm-bolt not found; skipping BOLT."
  fi
}

check() {
  pushd "${srcdir}/build-final" >/dev/null
  make -j"$(nproc)" check || echo "Warning: tests failed; continuing."
  popd >/dev/null
}

package() {
  pushd "${srcdir}/build-final" >/dev/null
  make DESTDIR="$pkgdir" install
  popd >/dev/null

  # Install BOLT-optimized versioned lib if present
  if compgen -G "${srcdir}/bolt_opt/libX11.so.*.*.*" >/dev/null; then
    install -m755 "${srcdir}/bolt_opt"/libX11.so.*.*.* "${pkgdir}/usr/lib/"
    pushd "${pkgdir}/usr/lib" >/dev/null
    ver="$(ls -1 libX11.so.*.*.* 2>/dev/null | sort -r | head -n1 || true)"
    if [[ -n "$ver" ]]; then
      ln -sf "$ver" libX11.so.6
      ln -sf libX11.so.6 libX11.so
    fi
    popd >/dev/null
  fi

  install -Dm644 "${srcdir}/${_pkgname}/COPYING" "${pkgdir}/usr/share/licenses/${pkgname}/COPYING"
}
