pkgname=libx11-git
_pkgname=libx11
pkgver=1.8.12.r7.ge003f526
pkgrel=1
pkgdesc="Core X11 protocol client library (PGO and BOLT optimized for gaming)"
arch=('i686' 'x86_64')
url="https://www.x.org/wiki/"
license=('custom')
depends=('glibc' 'libxcb' 'xorgproto')
makedepends=(
    'git' 'xorg-util-macros' 'xtrans' 'clang' 'llvm' 'glmark2'
    'vulkan-tools' 'xorg-x11perf' 'xdotool' 'xautomation' 'mesa-utils'
    'xorg-xeyes' 'xorg-xclock' 'xorg-xlogo' 'xorg-xdpyinfo' 'xclip'
)
provides=('libx11')
conflicts=('libx11')
options=('staticlibs')
source=("git+https://gitlab.freedesktop.org/xorg/lib/${_pkgname}.git")
sha256sums=('SKIP')

pkgver() {
  cd "${_pkgname}"
  git describe --long --tags | sed 's/^libX11-//;s/\([^-]*-g\)/r\1/;s/-/./g'
}

build() {
  # Preserve original flags from makepkg.conf for a clean baseline
  export CFLAGS_ORIG="$CFLAGS"
  export CXXFLAGS_ORIG="$CXXFLAGS"
  export LDFLAGS_ORIG="$LDFLAGS"

  # PGO instrumentation flags, balanced for detail and overhead.
  local _common_instrument_flags="-g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"

  # Create a clean set of directories for each build stage
  mkdir -p "${srcdir}/build-pgo" "${srcdir}/build-final"
  mkdir -p "${srcdir}/pgo_profiles" "${srcdir}/bolt_profile"
  mkdir -p "${srcdir}/temp_install_pgo" "${srcdir}/temp_install_final"
  mkdir -p "${srcdir}/bolt_instrumented" "${srcdir}/bolt_opt"

  # Set up a robust cleanup trap to remove all temporary artifacts on exit or failure
  trap 'echo "Cleaning up temporary directories..."; rm -rf "${srcdir}/build-pgo" "${srcdir}/build-final" "${srcdir}/pgo_profiles" "${srcdir}/bolt_profile" "${srcdir}/temp_install_pgo" "${srcdir}/temp_install_final" "${srcdir}/bolt_instrumented" "${srcdir}/bolt_opt" "${srcdir}/training_workload.sh"' EXIT

  #################################################################
  # STEP 0: CREATE GAMING-FOCUSED PGO & BOLT TRAINING WORKLOAD
  #################################################################
  echo "--> Creating a highly diverse, gaming-focused training workload..."

  cat > "${srcdir}/training_workload.sh" << 'EOF'
#!/bin/bash
set -e

LIB_PATH="${1}"

if [ ! -d "$LIB_PATH" ]; then
  echo "Error: Library directory not found at $LIB_PATH" >&2; exit 1;
fi
if [ -z "$DISPLAY" ]; then
  echo "Error: DISPLAY not set. Must run in a graphical session." >&2; exit 1;
fi
if ! xdpyinfo >/dev/null 2>&1; then
  echo "Error: Cannot connect to X display '$DISPLAY'." >&2; exit 1;
fi

export XDG_RUNTIME_DIR="$(mktemp -d -p /tmp libx11-training-XXXXXX)"
chmod 700 "$XDG_RUNTIME_DIR"
trap 'rm -rf "$XDG_RUNTIME_DIR"' EXIT

START_TIME=$(date +%s)
log_timing() {
  local ELAPSED=$(( $(date +%s) - START_TIME ))
  printf "[%d s] %s\n" "$ELAPSED" "$1"
}

log_timing "Starting comprehensive training workload for libX11"

run_app() {
  local cmd_str=$1
  local timeout_s=$2
  local name
  name=$(echo "$cmd_str" | awk '{print $1}')
  if ! command -v "$name" >/dev/null; then
    log_timing "Skipping '$name': command not found."
    return
  fi
  log_timing "Running: $cmd_str (timeout ${timeout_s}s)"
  ( timeout "$timeout_s" $cmd_str >/dev/null 2>&1 ) &
  local APP_PID=$!
  sleep $((timeout_s / 2))
  kill -0 $APP_PID 2>/dev/null && kill -TERM $APP_PID 2>/dev/null && sleep 0.5
  kill -0 $APP_PID 2>/dev/null && kill -KILL $APP_PID 2>/dev/null
  wait $APP_PID 2>/dev/null || true
}

test_error_handling() {
  log_timing "--- Testing Error Handling Paths ---"
  # These are expected to fail and print errors; this is GOOD for profiling error paths.
  xprop -id 0xDEADBEEF >/dev/null 2>&1 || true
  xdotool windowfocus 0xDEADBEEF >/dev/null 2>&1 || true
  xrandr --output INVALID --mode INVALID >/dev/null 2>&1 || true
}

# The entire workload is looped to create a more stable and robust profile.
for i in $(seq 1 1); do
  log_timing "WORKLOAD LOOP ${i}/1"

  # --- Gaming & Graphics Simulation ---
  log_timing "--- Running Diverse Graphics Simulation ---"
  # Run a variety of glmark2 scenes to hit different GLX/DRI3 code paths
  for scene in terrain:shadow-quality=high shading:shading=cel building:step=10 texturing:texture-filter=mipmap; do
      run_app "glmark2 --fullscreen -b $scene" 15
  done
  run_app "vkcube --fullscreen" 20
  run_app "glxgears -fullscreen" 20

  # --- Window Management & Desktop Interaction ---
  log_timing "--- Running Window Management & Desktop Tests ---"
  if command -v xdotool > /dev/null && command -v xterm > /dev/null; then
    ( xterm -title "XDOToolTest" & )
    XTERM_PID=$!
    sleep 1
    WIN_ID=$(xdotool search --pid $XTERM_PID | head -1)
    if [ -n "$WIN_ID" ]; then
      log_timing "Testing window operations with xdotool on window $WIN_ID"
      xdotool windowmove "$WIN_ID" 100 100; sleep 0.2
      xdotool windowsize "$WIN_ID" 800 600; sleep 0.2
      xdotool windowfocus "$WIN_ID"; sleep 0.2
      xdotool key --window "$WIN_ID" --delay 50 a b c Escape
      xdotool windowstate "$WIN_ID" --add fullscreen; sleep 1
      xdotool windowstate "$WIN_ID" --remove fullscreen; sleep 1
    fi
    kill $XTERM_PID 2>/dev/null || true
  fi

  # --- Core X11 Protocol & Extension Stress Tests ---
  log_timing "--- Running Core Protocol & Extension Stress Tests ---"
  run_app "x11perf -repeat 5 -all" 60 # More intense benchmark
  run_app "xeyes" 10
  run_app "xclock -update 1" 10
  run_app "xlogo" 10
  run_app "xdpyinfo -ext all" 10

  # --- Input, Clipboard & Error Path Simulation ---
  log_timing "--- Running Input, Clipboard & Error Tests ---"
  if command -v xte >/dev/null; then
    xte 'mousemove 200 200' 'mouseclick 1' 'keydown Shift_L' 'key w' 'keyup Shift_L' >/dev/null 2>&1 &
  fi
  if command -v xclip >/dev/null; then
    echo "pgo-test-clipboard" | xclip -selection clipboard
    xclip -o -selection clipboard >/dev/null
  fi
  test_error_handling
done

log_timing "Waiting for background processes to flush profiles..."
sleep 5
pkill -f 'glmark2|vkcube|glxgears|x11perf|xterm|xeyes|xclock|xlogo' || true

log_timing "Training workload completed."
EOF

  chmod +x "${srcdir}/training_workload.sh"

  ##################################################
  # STEP 1: Build with PGO instrumentation
  ##################################################
  echo "--> Building libx11 with PGO instrumentation..."

  export CC="clang"
  export CXX="clang++"
  export CFLAGS="${CFLAGS_ORIG} ${_common_instrument_flags} -fprofile-generate=${srcdir}/pgo_profiles"
  export CXXFLAGS="${CXXFLAGS_ORIG} ${_common_instrument_flags} -fprofile-generate=${srcdir}/pgo_profiles"
  export LDFLAGS="${LDFLAGS_ORIG} ${_common_instrument_flags}"

  cd "${srcdir}/${_pkgname}"
  autoreconf -vfi

  cd "${srcdir}/build-pgo"
  "${srcdir}/${_pkgname}/configure" \
    --prefix="/usr" --disable-devel-docs --disable-docs \
    --enable-dri3 --disable-xf86bigfont --enable-debug
  make -j$(nproc)
  make DESTDIR="${srcdir}/temp_install_pgo" install

  ##################################################
  # STEP 2: Run workload to generate PGO profiles
  ##################################################
  echo "--> Running workload to generate PGO profiles..."

  export LLVM_PROFILE_FILE="${srcdir}/pgo_profiles/libx11-%p.profraw"

  if ! env -i HOME="$HOME" USER="$USER" DISPLAY="$DISPLAY" XAUTHORITY="$XAUTHORITY" \
      LD_LIBRARY_PATH="${srcdir}/temp_install_pgo/usr/lib" \
      PATH="/usr/bin" LLVM_PROFILE_FILE="${LLVM_PROFILE_FILE}" \
      "${srcdir}/training_workload.sh" "${srcdir}/temp_install_pgo/usr/lib" > "${srcdir}/pgo_workload.log" 2>&1; then
    echo "Error: PGO profiling workload failed. Check pgo_workload.log for details." >&2
    cat "${srcdir}/pgo_workload.log"; exit 1
  fi

  if ! ls "${srcdir}/pgo_profiles"/*.profraw 1> /dev/null 2>&1; then
    echo "Error: No PGO profiles were generated." >&2; exit 1
  fi

  echo "--> Merging generated PGO profiles..."
  llvm-profdata merge -output="${srcdir}/libx11.profdata" "${srcdir}/pgo_profiles"/*.profraw

  echo "--> Analyzing PGO profile quality..."
  llvm-profdata show --detailed-summary "${srcdir}/libx11.profdata" > "${srcdir}/pgo_profile_summary.log"
  local coverage
  coverage=$(grep "Instructions" "${srcdir}/pgo_profile_summary.log" | awk '{print $4}' | sed 's/%//')
  if (($(echo "$coverage < 80.0" | bc -l))); then
      echo "Error: PGO instruction coverage is ${coverage}%, below the 80% quality gate." >&2; exit 1
  fi
  echo "--> PGO coverage is ${coverage}%. Quality gate passed."

  ##################################################
  # STEP 3: Final build with PGO optimizations
  ##################################################
  echo "--> Building final library with PGO optimizations and BOLT-friendly unwind tables..."

  # Add -fno-asynchronous-unwind-tables to generate standard .eh_frame sections,
  # which are more reliably parsed by BOLT and prevent frame analysis failures.
  export CFLAGS="${CFLAGS_ORIG} -fprofile-use=${srcdir}/libx11.profdata -fno-asynchronous-unwind-tables"
  export CXXFLAGS="${CXXFLAGS_ORIG} -fprofile-use=${srcdir}/libx11.profdata -fno-asynchronous-unwind-tables"
  export LDFLAGS="${LDFLAGS_ORIG} -Wl,--emit-relocs" # Essential for BOLT

  cd "${srcdir}/build-final"
  "${srcdir}/${_pkgname}/configure" \
    --prefix="/usr" --disable-devel-docs --disable-docs \
    --enable-dri3 --disable-xf86bigfont
  make -j$(nproc)
  make DESTDIR="${srcdir}/temp_install_final" install

  ##################################################
  # STEP 4: BOLT Instrumentation
  ##################################################
  echo "--> Instrumenting PGO-optimized libraries with BOLT..."

  local X11_LIBS
  X11_LIBS=$(find "${srcdir}/temp_install_final/usr/lib" -name "libX11.so*" -type f)

  for lib in $X11_LIBS; do
    local lib_basename
    lib_basename=$(basename "$lib")
    echo "    Instrumenting ${lib_basename}..."
    cp -f "$lib" "${srcdir}/${lib_basename}.orig"
    # Attempt full instrumentation first. The improved binary from STEP 3 should make this succeed.
    if ! llvm-bolt "$lib" --instrument --lite=false \
      --instrumentation-file="${srcdir}/bolt_profile/${lib_basename}.fdata" \
      -o "${srcdir}/bolt_instrumented/${lib_basename}"; then
        echo "Warning: BOLT instrumentation failed for ${lib_basename}. It will not be BOLT-optimized."
        continue
    fi
    cp -f "${srcdir}/bolt_instrumented/${lib_basename}" "$lib"
    chmod +x "$lib"
  done

  ##################################################
  # STEP 5: Run workload to generate BOLT profiles
  ##################################################
  echo "--> Running workload to generate BOLT profiles..."

  rm -f "${srcdir}/bolt_profile"/*.fdata

  if ! env -i HOME="$HOME" USER="$USER" DISPLAY="$DISPLAY" XAUTHORITY="$XAUTHORITY" \
      LD_LIBRARY_PATH="${srcdir}/temp_install_final/usr/lib" \
      PATH="/usr/bin" \
      "${srcdir}/training_workload.sh" "${srcdir}/temp_install_final/usr/lib" > "${srcdir}/bolt_workload.log" 2>&1; then
    echo "Error: BOLT profiling workload failed." >&2
    cat "${srcdir}/bolt_workload.log"; exit 1
  fi

  if ! ls "${srcdir}/bolt_profile"/*.fdata 1> /dev/null 2>&1; then
    echo "Warning: No BOLT profiles generated. The final library will be PGO-optimized only."
  fi

  ##################################################
  # STEP 6: Final BOLT Optimization
  ##################################################
  echo "--> Applying BOLT optimizations..."

  for lib_orig in "${srcdir}"/*.orig; do
    if [ ! -f "$lib_orig" ]; then continue; fi

    local lib_basename profile_file
    lib_basename=$(basename "$lib_orig" .orig)
    profile_file="${srcdir}/bolt_profile/${lib_basename}.fdata"

    if [ -s "$profile_file" ]; then
      echo "    Optimizing ${lib_basename} with its BOLT profile..."
      llvm-bolt "$lib_orig" \
      --data="$profile_file" \
      -o "${srcdir}/bolt_opt/${lib_basename}" \
      --dyno-stats \
      --lite=false \
      --icf=all \
      --plt=all \
      --hugify \
      --peepholes=all \
      --indirect-call-promotion=all \
      --reorder-blocks=ext-tsp \
      --reorder-functions=cdsort \
      --split-all-cold \
      --split-eh \
      --split-functions \
      --split-strategy=cdsplit \
      --align-functions=32 --align-blocks --block-alignment=16 \
      --x86-strip-redundant-address-size \
      --frame-opt-rm-stores --frame-opt=all --hot-data \
      --jump-tables=aggressive \
      --stoke 2>&1 | tee "${srcdir}/bolt_${lib_basename}.log"

      if [ -f "${srcdir}/bolt_opt/${lib_basename}" ]; then
        echo "    Successfully optimized ${lib_basename} with BOLT."
        chmod +x "${srcdir}/bolt_opt/${lib_basename}"
      else
        echo "Warning: BOLT optimization failed. Using PGO-optimized version."
        cp -f "$lib_orig" "${srcdir}/bolt_opt/${lib_basename}"
      fi
    else
      echo "    No BOLT profile found for ${lib_basename}. Using PGO-optimized version."
      cp -f "$lib_orig" "${srcdir}/bolt_opt/${lib_basename}"
    fi
  done
}

check() {
  cd "${srcdir}/build-final"
  make -j$(nproc) check || echo "Warning: 'make check' failed. Continuing build process."
}

package() {
  cd "${srcdir}/build-final"
  make DESTDIR="$pkgdir" install

  if ls "${srcdir}/bolt_opt"/libX11.so* 1> /dev/null 2>&1; then
    echo "--> Installing BOLT-optimized libraries..."
    find "${srcdir}/bolt_opt" -type f -name 'libX11.so*' -print0 | while IFS= read -r -d $'\0' bolt_lib; do
      install -Dm755 "$bolt_lib" "${pkgdir}/usr/lib/$(basename "$bolt_lib")"
    done
  else
    echo "Warning: No BOLT-optimized libraries found. Package will be PGO-optimized only."
  fi

  echo "--> Restoring symbolic links..."
  cd "${pkgdir}/usr/lib"
  find . -maxdepth 1 -type l -name "libX11.so*" -delete
  local lib_ver_file
  lib_ver_file=$(find . -maxdepth 1 -type f -name "libX11.so.*.*.*" -printf "%f\n")
  if [ -n "$lib_ver_file" ]; then
    ln -sf "$lib_ver_file" "libX11.so.6"
    ln -sf "libX11.so.6" "libX11.so"
    echo "    ✓ Symlinks created: libX11.so -> libX11.so.6 -> $lib_ver_file"
  else
    echo "    ✗ ERROR: Could not find versioned libX11.so file to create symlinks." >&2; exit 1
  fi
  cd "${srcdir}"

  install -Dm644 "${srcdir}/${_pkgname}/COPYING" -t "${pkgdir}/usr/share/licenses/${pkgname}"

  echo "--> Stripping final libraries..."
  find "${pkgdir}" -type f -name "*.so*" -print0 | xargs -0 --no-run-if-empty llvm-strip --strip-debug

  echo "--> Final verification of installed libraries..."
  find "${pkgdir}/usr/lib" -name "libX11.so*" -type f -print0 | while IFS= read -r -d $'\0' lib; do
    if readelf -p .comment "$lib" | grep -q 'clang version'; then
      echo "    ✓ $(basename "$lib") is optimized."
    else
      echo "    ✗ ERROR: $(basename "$lib") does not appear to be an optimized binary!" >&2; exit 1
    fi
  done
}
