pkgname=pciutils-git
pkgver=3.13.0.r10.g4f2abad
pkgrel=1
pkgdesc="Programs for inspecting and manipulating configuration of PCI devices"
arch=('i686' 'x86_64')
url="https://mj.ucw.cz/sw/pciutils/"
license=('GPL2')
depends=('glibc' 'hwdata' 'kmod')
makedepends=('git' 'llvm' 'clang' 'lld' 'python')
provides=("pciutils=$pkgver")
conflicts=('pciutils')
options=('staticlibs')
source=("git+https://git.kernel.org/pub/scm/utils/pciutils/pciutils.git")
sha256sums=('SKIP')

run_training_workload() {
    local build_dir="$1"
    local pgo_dir="$2"
    local tmpdir="$3"

    echo "Running PCI utils training workload for gaming and compilation systems..."
    mkdir -p "${tmpdir}/results"

    # Function to test PCI operations
    test_pci_operations() {
        local testname="$1"
        local cmd="$2"

        echo "Running test: ${testname}"
        LD_LIBRARY_PATH="${build_dir}/lib" $cmd > "${tmpdir}/results/${testname}.log" 2>&1 || true
    }

    # First run the standard tools with different options to get code coverage
    echo "Running lspci with different options"

    # Basic functionality
    test_pci_operations "lspci_basic" "${build_dir}/lspci"
    test_pci_operations "lspci_verbose" "${build_dir}/lspci -v"
    test_pci_operations "lspci_veryverbose" "${build_dir}/lspci -vv"

    # Common use cases for gaming systems (detailed GPU info)
    test_pci_operations "lspci_display" "${build_dir}/lspci -v -d ::0300"
    test_pci_operations "lspci_3d" "${build_dir}/lspci -vvnn -d ::0302"

    # Network devices (important for gaming and workstations)
    test_pci_operations "lspci_network" "${build_dir}/lspci -vvnn -d ::0200"

    # Storage controllers (important for compilation workloads)
    test_pci_operations "lspci_storage" "${build_dir}/lspci -vvnn -d ::0100"
    test_pci_operations "lspci_nvme" "${build_dir}/lspci -vvnn -d ::0108"

    # All devices with kernel drivers
    test_pci_operations "lspci_kernel" "${build_dir}/lspci -k"

    # Different output formats
    test_pci_operations "lspci_machine" "${build_dir}/lspci -m"
    test_pci_operations "lspci_mmio" "${build_dir}/lspci -vvv -d ::0300"
    test_pci_operations "lspci_numeric" "${build_dir}/lspci -n"
    test_pci_operations "lspci_tree" "${build_dir}/lspci -t"

    # Specific bus tests
    pci_buses=$(${build_dir}/lspci | cut -d: -f1 | cut -d. -f1 | sort -u | head -5)
    for bus in $pci_buses; do
        test_pci_operations "lspci_bus_${bus}" "${build_dir}/lspci -vvs ${bus}:"
    done

    # Specific device tests (focus on common device types)
    # Find a graphics card
    gpu_addr=$(${build_dir}/lspci | grep -i vga | head -1 | cut -d' ' -f1)
    if [ -n "$gpu_addr" ]; then
        test_pci_operations "lspci_gpu_detailed" "${build_dir}/lspci -vvv -s $gpu_addr"
    fi

    # Find a network card
    net_addr=$(${build_dir}/lspci | grep -i ethernet | head -1 | cut -d' ' -f1)
    if [ -n "$net_addr" ]; then
        test_pci_operations "lspci_net_detailed" "${build_dir}/lspci -vvv -s $net_addr"
    fi

    # Test setpci if available - FIXED section
    if [ -x "${build_dir}/setpci" ]; then
        echo "Running setpci tests"

        # Read a device's config register (first device found)
        first_dev=$(${build_dir}/lspci | head -1 | cut -d' ' -f1)
        if [ -n "$first_dev" ]; then
            # Read vendor/device ID (registers 0x00-0x03)
            test_pci_operations "setpci_read_vendor" "${build_dir}/setpci -s $first_dev 00.w"
            test_pci_operations "setpci_read_device" "${build_dir}/setpci -s $first_dev 02.w"

            # Read class code (registers 0x08-0x0B)
            test_pci_operations "setpci_read_class" "${build_dir}/setpci -s $first_dev 08.l"

            # Read base address registers
            test_pci_operations "setpci_read_bar0" "${build_dir}/setpci -s $first_dev 10.l"
            test_pci_operations "setpci_read_bar1" "${build_dir}/setpci -s $first_dev 14.l"
        fi

        # Read from GPU device if available
        if [ -n "$gpu_addr" ]; then
            test_pci_operations "setpci_read_gpu" "${build_dir}/setpci -s $gpu_addr 00.w"
            test_pci_operations "setpci_read_gpu_class" "${build_dir}/setpci -s $gpu_addr 08.l"
        fi

        # Read from network device if available
        if [ -n "$net_addr" ]; then
            test_pci_operations "setpci_read_net" "${build_dir}/setpci -s $net_addr 00.w"
            test_pci_operations "setpci_read_net_class" "${build_dir}/setpci -s $net_addr 08.l"
        fi
    fi

    # Test stress scenarios - repeated operations
    for i in {1..10}; do
        test_pci_operations "stress_lspci_$i" "${build_dir}/lspci -v"
    done

    # Test library with a custom program
    cat > "${tmpdir}/pci_test.c" << 'EOF'
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <pci/pci.h>
#include <time.h>

void dump_device_info(struct pci_dev *dev, struct pci_access *pacc) {
    unsigned int i;
    char namebuf[256];
    u32 val;

    printf("PCI device %04x:%04x [%04x:%04x] at %02x:%02x.%d\n",
        dev->vendor_id, dev->device_id,
        dev->subsys_vendor_id, dev->subsys_id,
        dev->bus, dev->dev, dev->func);

    printf("  Class: %04x [%s]\n", dev->device_class,
        pci_lookup_name(pacc, namebuf, sizeof(namebuf),
            PCI_LOOKUP_CLASS, dev->device_class));

    // Read and display configuration space
    printf("  Config Space:\n");
    for (i = 0; i < 64; i += 4) {
        val = pci_read_long(dev, i);
        printf("    %02x: %08x\n", i, val);
    }

    // Read base address registers
    printf("  Base Address Registers:\n");
    for (i = 0; i < 6; i++) {
        val = pci_read_long(dev, PCI_BASE_ADDRESS_0 + i*4);
        printf("    BAR%d: %08x\n", i, val);
        if (val) {
            // Determine type (I/O or memory) and size by write/read test
            u32 orig = val;
            u32 mask;

            // Skip I/O bars and non-implemented BARs
            if ((val & PCI_BASE_ADDRESS_SPACE) == PCI_BASE_ADDRESS_SPACE_IO)
                continue;
            if (!val)
                continue;

            // Try to determine size using a safe method
            // (we avoid actual writes to the BAR)
            if ((val & PCI_BASE_ADDRESS_SPACE) == PCI_BASE_ADDRESS_SPACE_MEMORY) {
                if ((val & PCI_BASE_ADDRESS_MEM_TYPE_MASK) == PCI_BASE_ADDRESS_MEM_TYPE_64)
                    printf("      64-bit memory BAR\n");
                else
                    printf("      32-bit memory BAR\n");
            }
        }
    }
}

void list_all_devices(struct pci_access *pacc) {
    struct pci_dev *dev;

    for (dev = pacc->devices; dev; dev = dev->next) {
        pci_fill_info(dev, PCI_FILL_IDENT | PCI_FILL_CLASS | PCI_FILL_SUBSYS);
        printf("%04x:%04x [%04x:%04x] at %02x:%02x.%d\n",
            dev->vendor_id, dev->device_id,
            dev->subsys_vendor_id, dev->subsys_id,
            dev->bus, dev->dev, dev->func);
    }
}

void examine_device_class(struct pci_access *pacc, unsigned int device_class) {
    struct pci_dev *dev;
    char namebuf[256];

    printf("Devices in class %04x [%s]:\n", device_class,
        pci_lookup_name(pacc, namebuf, sizeof(namebuf),
            PCI_LOOKUP_CLASS, device_class));

    for (dev = pacc->devices; dev; dev = dev->next) {
        pci_fill_info(dev, PCI_FILL_IDENT | PCI_FILL_CLASS | PCI_FILL_SUBSYS);
        if ((dev->device_class >> 8) == device_class) {
            dump_device_info(dev, pacc);
        }
    }
}

void benchmark_pci_access(struct pci_access *pacc) {
    struct pci_dev *dev;
    clock_t start, end;
    int iterations = 100;
    int i, j;
    u32 val;

    // Find the first device for benchmark
    dev = pacc->devices;
    if (!dev) {
        printf("No PCI devices found for benchmarking\n");
        return;
    }

    pci_fill_info(dev, PCI_FILL_IDENT | PCI_FILL_CLASS);

    // Benchmark 1: Device enumeration
    start = clock();
    for (i = 0; i < iterations; i++) {
        pci_scan_bus(pacc);
    }
    end = clock();
    printf("Bus scan: %.2f ms per iteration\n",
           1000.0 * (end - start) / CLOCKS_PER_SEC / iterations);

    // Benchmark 2: Config space reading
    start = clock();
    for (i = 0; i < iterations * 10; i++) {
        for (j = 0; j < 64; j += 4) {
            val = pci_read_long(dev, j);
        }
    }
    end = clock();
    printf("Config read: %.2f Âµs per read\n",
           1000000.0 * (end - start) / CLOCKS_PER_SEC / (iterations * 10 * 16));
}

int main(int argc, char **argv) {
    struct pci_access *pacc;

    // Initialize the PCI library
    pacc = pci_alloc();
    pci_init(pacc);
    pci_scan_bus(pacc);

    // If no arguments, perform all tests
    if (argc < 2) {
        // Basic device enumeration
        printf("=== Basic device enumeration ===\n");
        list_all_devices(pacc);

        // Examine GPU devices (class 0x03)
        printf("\n=== Display Controllers ===\n");
        examine_device_class(pacc, 0x03);

        // Examine network devices (class 0x02)
        printf("\n=== Network Controllers ===\n");
        examine_device_class(pacc, 0x02);

        // Performance benchmarks
        printf("\n=== Performance Benchmarks ===\n");
        benchmark_pci_access(pacc);
    } else {
        // Parse command
        if (strcmp(argv[1], "list") == 0) {
            list_all_devices(pacc);
        } else if (strcmp(argv[1], "gpu") == 0) {
            examine_device_class(pacc, 0x03);
        } else if (strcmp(argv[1], "net") == 0) {
            examine_device_class(pacc, 0x02);
        } else if (strcmp(argv[1], "storage") == 0) {
            examine_device_class(pacc, 0x01);
        } else if (strcmp(argv[1], "bench") == 0) {
            benchmark_pci_access(pacc);
        } else {
            // Try to parse as bus:dev.func
            struct pci_dev *dev;
            unsigned int bus, device, func;

            if (sscanf(argv[1], "%x:%x.%x", &bus, &device, &func) == 3) {
                dev = pci_get_dev(pacc, 0, bus, device, func);
                if (dev) {
                    pci_fill_info(dev, PCI_FILL_IDENT | PCI_FILL_CLASS | PCI_FILL_SUBSYS);
                    dump_device_info(dev, pacc);
                    pci_free_dev(dev);
                } else {
                    printf("Device %02x:%02x.%x not found\n", bus, device, func);
                }
            } else {
                printf("Unknown command: %s\n", argv[1]);
            }
        }
    }

    pci_cleanup(pacc);
    return 0;
}
EOF

    # Compile test program
    clang -o "${tmpdir}/pci_test" "${tmpdir}/pci_test.c" -I"${build_dir}/lib" -L"${build_dir}/lib" -lpci

    # Run custom test program
    echo "Running custom PCI library test program"
    LD_LIBRARY_PATH="${build_dir}/lib" "${tmpdir}/pci_test"

    # Run different test modes
    test_pci_operations "pci_test_bench" "${tmpdir}/pci_test bench"
    test_pci_operations "pci_test_gpu" "${tmpdir}/pci_test gpu"
    test_pci_operations "pci_test_net" "${tmpdir}/pci_test net"
    test_pci_operations "pci_test_storage" "${tmpdir}/pci_test storage"

    # Run stress test with multiple iterations
    for i in {1..5}; do
        test_pci_operations "pci_test_stress_${i}" "${tmpdir}/pci_test"
    done

    echo "Training workload complete"
}
export -f run_training_workload

pkgver() {
  cd "pciutils"

  git describe --long --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g'
}

build() {
  cd "pciutils"

  # Save original flags
  orig_cflags="${CFLAGS}"
  orig_ldflags="${LDFLAGS}"

  # Set PGO directory
  pgo_dir="/tmp/makepkg/${pkgname}/src/${pkgname}-pgo"
  mkdir -p "${pgo_dir}"

  # Common instrumentation flags
  _common_instrument_flags=" -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=500 -mllvm -runtime-counter-relocation -mllvm -enable-value-profiling"

  ###########################################################################
  # Phase 1: Standard PGO Instrumentation Build
  ###########################################################################
  msg2 "== Building with standard PGO instrumentation"

  # Clean previous build artifacts
  rm -rf "${srcdir}/build_std"
  rm -rf "${pgo_dir}/standard"
  mkdir -p "${srcdir}/build_std"
  mkdir -p "${pgo_dir}/standard"

  # Configure with standard instrumentation flags
  export CFLAGS="${orig_cflags}${_common_instrument_flags} -fprofile-generate=${pgo_dir}/standard"
  export LDFLAGS="${orig_ldflags} -fprofile-generate=${pgo_dir}/standard"

  # Build instrumented version
  make clean
  make \
    OPT="${CFLAGS}" \
    LDFLAGS="${LDFLAGS}" \
    SHARED=yes \
    ZLIB=no \
    DNS=no \
    CC=clang \
    LD=ld.lld \
    AR=llvm-ar \
    RANLIB=llvm-ranlib \
    PREFIX="/usr" \
    SBINDIR="/usr/bin" \
    SHAREDIR="/usr/share/hwdata" \
    -C "${PWD}" all

  # Copy build to our instrumented directory
  mkdir -p "${srcdir}/build_std/lib"
  cp lspci "${srcdir}/build_std/"
  cp setpci "${srcdir}/build_std/"
  cp lib/libpci.so* "${srcdir}/build_std/lib/"

  # Create lib directory for header files - FIX: the headers are in "lib" not "include"
  mkdir -p "${srcdir}/build_std/lib"
  cp lib/*.h "${srcdir}/build_std/lib/"

  ###########################################################################
  # Phase 2: Standard PGO Training
  ###########################################################################
  msg2 "== Running standard PGO training workload"

  # Create a temporary directory for training
  tmpdir="/tmp/makepkg/${pkgname}/src/training_std"
  mkdir -p "${tmpdir}"

  # Run the training workload
  run_training_workload "${srcdir}/build_std" "${pgo_dir}" "${tmpdir}"

  # Merge standard PGO profiles
  echo "Merging standard PGO profiles..."
  llvm-profdata merge -output="${pgo_dir}/standard.profdata" "${pgo_dir}/standard"

  ###########################################################################
  # Phase 3: Context-sensitive PGO Instrumentation Build
  ###########################################################################
  msg2 "== Building with context-sensitive PGO instrumentation"

  # Clean previous build artifacts
  rm -rf "${srcdir}/build_cs"
  rm -rf "${pgo_dir}/cs"
  mkdir -p "${srcdir}/build_cs"
  mkdir -p "${pgo_dir}/cs"

  # Configure with context-sensitive instrumentation AND standard profile data
  export CFLAGS="${orig_cflags}${_common_instrument_flags} -fprofile-use=${pgo_dir}/standard.profdata -fcs-profile-generate=${pgo_dir}/cs"
  export LDFLAGS="${orig_ldflags} -fprofile-use=${pgo_dir}/standard.profdata -fcs-profile-generate=${pgo_dir}/cs"

  # Build context-sensitive instrumented version
  make clean
  make \
    OPT="${CFLAGS}" \
    LDFLAGS="${LDFLAGS}" \
    SHARED=yes \
    ZLIB=no \
    DNS=no \
    CC=clang \
    LD=ld.lld \
    AR=llvm-ar \
    RANLIB=llvm-ranlib \
    PREFIX="/usr" \
    SBINDIR="/usr/bin" \
    SHAREDIR="/usr/share/hwdata" \
    -C "${PWD}" all

  # Copy build to our instrumented directory
  mkdir -p "${srcdir}/build_cs/lib"
  cp lspci "${srcdir}/build_cs/"
  cp setpci "${srcdir}/build_cs/"
  cp lib/libpci.so* "${srcdir}/build_cs/lib/"

  # Copy header files - FIX: use lib/*.h instead of include directory
  cp lib/*.h "${srcdir}/build_cs/lib/"

  ###########################################################################
  # Phase 4: Context-sensitive PGO Training
  ###########################################################################
  msg2 "== Running context-sensitive PGO training workload"

  # Create a temporary directory for training
  tmpdir="/tmp/makepkg/${pkgname}/src/training_cs"
  mkdir -p "${tmpdir}"

  # Run the training workload
  run_training_workload "${srcdir}/build_cs" "${pgo_dir}" "${tmpdir}"

  # Merge context-sensitive profiles
  echo "Merging context-sensitive PGO profiles..."
  llvm-profdata merge -output="${pgo_dir}/cs.profdata" "${pgo_dir}/cs"

  ###########################################################################
  # Phase 5: Build with PGO Optimization (using both profile types)
  ###########################################################################
  msg2 "== Building with PGO optimization"

  # Clean optimized build directory
  rm -rf "${srcdir}/build_opt"
  mkdir -p "${srcdir}/build_opt"

  # Merge both profiles into a final profile
  llvm-profdata merge -output="${pgo_dir}/merged.profdata" \
    "${pgo_dir}/standard.profdata" "${pgo_dir}/cs.profdata"

  # Configure with profile use flags
  export CFLAGS="${orig_cflags} -fprofile-use=${pgo_dir}/merged.profdata"
  export LDFLAGS="${orig_ldflags} -fprofile-use=${pgo_dir}/merged.profdata -Wl,--emit-relocs"

  # Build with profile optimizations - static library first
  make clean
  make \
    OPT="${CFLAGS}" \
    LDFLAGS="${LDFLAGS}" \
    SHARED=no \
    ZLIB=no \
    DNS=no \
    CC=clang \
    LD=ld.lld \
    AR=llvm-ar \
    RANLIB=llvm-ranlib \
    PREFIX="/usr" \
    SBINDIR="/usr/bin" \
    SHAREDIR="/usr/share/hwdata" \
    -C "${PWD}" all

  # Save static library
  cp lib/libpci.a "${srcdir}/libpci.a"

  # Clean and build shared library version
  make clean
  make \
    OPT="${CFLAGS}" \
    LDFLAGS="${LDFLAGS}" \
    SHARED=yes \
    ZLIB=no \
    DNS=no \
    CC=clang \
    LD=ld.lld \
    AR=llvm-ar \
    RANLIB=llvm-ranlib \
    PREFIX="/usr" \
    SBINDIR="/usr/bin" \
    SHAREDIR="/usr/share/hwdata" \
    -C "${PWD}" all

  # Copy build to our optimized directory
  mkdir -p "${srcdir}/build_opt/lib"
  cp lspci "${srcdir}/build_opt/"
  cp setpci "${srcdir}/build_opt/"
  cp lib/libpci.so* "${srcdir}/build_opt/lib/"

  ###########################################################################
  # Phase 6: BOLT Instrumentation
  ###########################################################################
  msg2 "== BOLT instrumentation phase"

  # Find the main shared library and executables
  find "${srcdir}/build_opt" -name "*.so.*" -type f -print0 | while IFS= read -r -d '' lib_file; do
    lib_name=$(basename "$lib_file")
    lib_dir=$(dirname "$lib_file")

    echo "Instrumenting library: ${lib_file}"

    # Create a clean directory for BOLT profile data
    rm -rf "${pgo_dir}/bolt_profiles_lib"
    mkdir -p "${pgo_dir}/bolt_profiles_lib"

    # Instrument the library with BOLT
    llvm-bolt "${lib_file}" \
      --instrument \
      --lite=false \
      --skip-funcs=".text/1" \
      --instrumentation-file="${pgo_dir}/bolt_profiles_lib/profile" \
      -o "${lib_file}.inst" || true

    # Backup original and replace with instrumented version
    if [ -f "${lib_file}.inst" ]; then
      mv "${lib_file}" "${lib_file}.org"
      mv "${lib_file}.inst" "${lib_file}"
    else
      echo "BOLT instrumentation failed, continuing with original binary"
      cp "${lib_file}" "${lib_file}.org"
    fi
  done

  # Instrument executables too
  for exec_file in "${srcdir}/build_opt/lspci" "${srcdir}/build_opt/setpci"; do
    if [ -f "$exec_file" ]; then
      exec_name=$(basename "$exec_file")
      exec_dir=$(dirname "$exec_file")

      echo "Instrumenting executable: ${exec_file}"

      # Create a clean directory for BOLT profile data
      rm -rf "${pgo_dir}/bolt_profiles_${exec_name}"
      mkdir -p "${pgo_dir}/bolt_profiles_${exec_name}"

      # Instrument the executable with BOLT
      llvm-bolt "${exec_file}" \
        --instrument \
        --lite=false \
        --skip-funcs=".text/1" \
        --instrumentation-file="${pgo_dir}/bolt_profiles_${exec_name}/profile" \
        -o "${exec_file}.inst" || true

      # Backup original and replace with instrumented version
      if [ -f "${exec_file}.inst" ]; then
        mv "${exec_file}" "${exec_file}.org"
        mv "${exec_file}.inst" "${exec_file}"
      else
        echo "BOLT instrumentation failed, continuing with original binary"
        cp "${exec_file}" "${exec_file}.org"
      fi
    fi
  done

  ###########################################################################
  # Phase 7: BOLT Training
  ###########################################################################
  msg2 "== Running BOLT training workload"

  # Set explicit environment variables for instrumentation
  export BOLT_USE_INSTRUMENT=1
  export LD_LIBRARY_PATH="${srcdir}/build_opt/lib"

  # Create a temporary directory for training
  tmpdir="/tmp/makepkg/${pkgname}/src/training_bolt"
  mkdir -p "${tmpdir}"

  # Run the comprehensive training workload once with the library profiling enabled
  export BOLT_OUTPUT_DIR="${pgo_dir}/bolt_profiles_lib"
  run_training_workload "${srcdir}/build_opt" "${pgo_dir}" "${tmpdir}"

  # Run training again with lspci profiling
  export BOLT_OUTPUT_DIR="${pgo_dir}/bolt_profiles_lspci"
  run_training_workload "${srcdir}/build_opt" "${pgo_dir}" "${tmpdir}"

  # Run training once more with setpci profiling if it exists
  if [ -f "${srcdir}/build_opt/setpci" ]; then
    export BOLT_OUTPUT_DIR="${pgo_dir}/bolt_profiles_setpci"
    run_training_workload "${srcdir}/build_opt" "${pgo_dir}" "${tmpdir}"
  fi

  # Run some additional targeted tests for each binary
  # Additional lspci tests
  export BOLT_OUTPUT_DIR="${pgo_dir}/bolt_profiles_lspci"
  for option in "-v" "-vv" "-vvv" "-t" "-n" "-nn" "-x" "-xxx" "-k"; do
    "${srcdir}/build_opt/lspci" $option > /dev/null 2>&1 || true
  done

  # Additional setpci tests if available
  if [ -f "${srcdir}/build_opt/setpci" ]; then
    export BOLT_OUTPUT_DIR="${pgo_dir}/bolt_profiles_setpci"

    # Find a device to use for setpci
    first_dev=$(${srcdir}/build_opt/lspci | head -1 | cut -d' ' -f1)
    if [ -n "$first_dev" ]; then
      # Read different registers with different widths
      for reg in "00.w" "02.w" "08.l" "10.l" "14.l"; do
        "${srcdir}/build_opt/setpci" -s $first_dev $reg > /dev/null 2>&1 || true
      done
    fi
  fi

  ###########################################################################
  # Phase 8: Merge BOLT Profiles and Apply Optimizations
  ###########################################################################
  msg2 "== Merging BOLT profiles and applying optimizations"

  # Process library
  find "${srcdir}/build_opt" -name "*.so.*.org" -type f -print0 | while IFS= read -r -d '' lib_file; do
    lib_name=$(basename "$lib_file" .org)
    lib_dir=$(dirname "$lib_file")
    active_lib="${lib_dir}/${lib_name}"

    # Find BOLT profiles
    bolt_profiles="${pgo_dir}/bolt_profiles_lib"
    if [ -d "$bolt_profiles" ] && [ "$(find "$bolt_profiles" -type f | wc -l)" -gt 0 ]; then
      # Merge profiles
      merge-fdata $(find "$bolt_profiles" -type f) -o "${pgo_dir}/lib_combined.fdata" || true

      # Apply BOLT optimizations if merge was successful
      if [ -f "${pgo_dir}/lib_combined.fdata" ]; then
        llvm-bolt "${lib_file}" \
          --data="${pgo_dir}/lib_combined.fdata" \
          -o "${active_lib}" \
          --dyno-stats \
          --frame-opt=all \
          --lite=false \
          --infer-stale-profile=1 \
          --icf=all \
          --plt=all \
          --hugify \
          --peepholes=all \
          --x86-strip-redundant-address-size \
          --indirect-call-promotion=all \
          --reorder-blocks=ext-tsp \
          --reorder-functions=cdsort \
          --split-all-cold \
          --split-eh \
          --split-functions \
          --split-strategy=cdsplit \
          --align-functions=32 \
          --frame-opt-rm-stores \
          --jump-tables=aggressive \
          --skip-funcs=".text/1" \
          --stoke || cp "${lib_file}" "${active_lib}"
      else
        echo "Failed to merge BOLT profiles, falling back to basic optimizations"
        llvm-bolt "${lib_file}" \
          -o "${active_lib}" \
          --dyno-stats \
          --reorder-blocks=ext-tsp \
          --split-functions \
          --split-eh \
          --skip-funcs=".text/1" || cp "${lib_file}" "${active_lib}"
      fi
    else
      echo "No valid profile data for library, using basic BOLT optimizations"
      llvm-bolt "${lib_file}" \
        -o "${active_lib}" \
        --dyno-stats \
        --reorder-blocks=ext-tsp \
        --split-functions \
        --split-eh \
        --skip-funcs=".text/1" || cp "${lib_file}" "${active_lib}"
    fi
  done

  # Process executables
  for exec_type in "lspci" "setpci"; do
    exec_file="${srcdir}/build_opt/${exec_type}.org"
    if [ -f "$exec_file" ]; then
      active_exec="${srcdir}/build_opt/${exec_type}"

      # Find BOLT profiles
      bolt_profiles="${pgo_dir}/bolt_profiles_${exec_type}"
      if [ -d "$bolt_profiles" ] && [ "$(find "$bolt_profiles" -type f | wc -l)" -gt 0 ]; then
        # Merge profiles
        merge-fdata $(find "$bolt_profiles" -type f) -o "${pgo_dir}/${exec_type}_combined.fdata" || true

        # Apply BOLT optimizations if merge was successful
        if [ -f "${pgo_dir}/${exec_type}_combined.fdata" ]; then
          llvm-bolt "${exec_file}" \
            --data="${pgo_dir}/${exec_type}_combined.fdata" \
            -o "${active_exec}" \
            --dyno-stats \
            --frame-opt=all \
            --lite=false \
            --infer-stale-profile=1 \
            --icf=all \
            --plt=all \
            --hugify \
            --peepholes=all \
            --x86-strip-redundant-address-size \
            --indirect-call-promotion=all \
            --reorder-blocks=ext-tsp \
            --reorder-functions=cdsort \
            --split-all-cold \
            --split-eh \
            --split-functions \
            --split-strategy=cdsplit \
            --align-functions=32 \
            --frame-opt-rm-stores \
            --jump-tables=aggressive \
            --skip-funcs=".text/1" \
            --stoke || cp "${exec_file}" "${active_exec}"
        else
          echo "Failed to merge BOLT profiles, falling back to basic optimizations"
          llvm-bolt "${exec_file}" \
            -o "${active_exec}" \
            --dyno-stats \
            --reorder-blocks=ext-tsp \
            --split-functions \
            --split-eh \
            --skip-funcs=".text/1" || cp "${exec_file}" "${active_exec}"
        fi
      else
        echo "No valid profile data for ${exec_type}, using basic BOLT optimizations"
        llvm-bolt "${exec_file}" \
          -o "${active_exec}" \
          --dyno-stats \
          --reorder-blocks=ext-tsp \
          --split-functions \
          --split-eh \
          --skip-funcs=".text/1" || cp "${exec_file}" "${active_exec}"
      fi
    fi
  done

  # Restore environment
  export CFLAGS="${orig_cflags}"
  export LDFLAGS="${orig_ldflags}"
}

package() {
  cd "pciutils"

  # Install using the optimized binaries
  make \
    DESTDIR="$pkgdir" \
    PREFIX="/usr" \
    SBINDIR="/usr/bin" \
    SHAREDIR="/usr/share/hwdata" \
    SHARED=yes \
    ZLIB=no \
    DNS=no \
    CC=clang \
    LD=ld.lld \
    AR=llvm-ar \
    RANLIB=llvm-ranlib \
    install \
    install-lib

  # Replace with optimized versions
  if [ -f "${srcdir}/build_opt/lspci" ]; then
    install -Dm755 "${srcdir}/build_opt/lspci" -t "$pkgdir/usr/bin"
  fi

  if [ -f "${srcdir}/build_opt/setpci" ]; then
    install -Dm755 "${srcdir}/build_opt/setpci" -t "$pkgdir/usr/bin"
  fi

  # Install library files if they exist
  if [ -d "${srcdir}/build_opt/lib" ]; then
    find "${srcdir}/build_opt/lib" -name "libpci.so*" -type f -exec install -Dm644 {} -t "$pkgdir/usr/lib" \;
  fi

  # Install static library
  if [ -f "${srcdir}/libpci.a" ]; then
    install -Dm644 "${srcdir}/libpci.a" -t "$pkgdir/usr/lib"
  fi

  # Use LLVM strip
  find "$pkgdir" -type f \( -name '*.so*' -o -name '*.a' -o -executable \) -print0 | while IFS= read -r -d '' file; do
    if llvm-strip --strip-unneeded "$file" 2>/dev/null || llvm-strip --strip-all "$file" 2>/dev/null; then
      echo "Stripped: $file"
    else
      echo "Skipping: $file (not a valid object file)" >&2
    fi
  done

  # supplied by hwids package
  rm -rf "$pkgdir/usr"/{bin/update-pciids,share/{hwdata,man/man8/update-pciids.8}}
}
