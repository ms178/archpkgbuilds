pkgname=(
  zlib-ng
  zlib-ng-compat
)
pkgver=2.2.3
pkgrel=15.1
_zlibver=1.3.1
pkgdesc='zlib-Ersatz mit Optimierungen für Systeme der nächsten Generation'
url='https://github.com/zlib-ng/zlib-ng'
arch=('x86_64')
license=('custom:zlib')
depends=('glibc')
makedepends=(
  cmake
  ninja
  git
  llvm
)
source=(git+https://github.com/zlib-ng/zlib-ng#tag=${pkgver})
sha256sums=('SKIP')

generate_training_data() {
    local pgo_dir="$1"

    echo "Generating comprehensive training data..."
    mkdir -p "${pgo_dir}/training"

    # Pattern-based training files
    echo "Creating pattern files..."
    for i in {1..100}; do
        {
            seq 1 4000
            yes "pattern${i}" | head -n 4000
            dd if=/dev/urandom bs=1K count=200 2>/dev/null | base64
            printf "%0.sA" $(seq 1 40000)
            printf "%0.sB" $(seq 1 40000)
            echo "Common header ${i}"
            echo "Common footer ${i}"
        } > "${pgo_dir}/training/training_${i}.txt"
    done

    # Large text files
    dd if=/dev/urandom bs=1M count=100 2>/dev/null | base64 > "${pgo_dir}/training/text1.txt"
    seq 1 1000000 > "${pgo_dir}/training/numbers.txt"
    yes "repeated data" | head -n 1000000 > "${pgo_dir}/training/repeated.txt"

    # Binary files
    dd if=/dev/urandom of="${pgo_dir}/training/random.bin" bs=1M count=100 status=none

    # Compression ratio test files
    for i in {1..5}; do
        dd if=/dev/urandom bs=1K count=$((i * 2000)) 2>/dev/null > "${pgo_dir}/training/binary_${i}.bin"
    done

    # Highly compressible files
    for i in {1..3}; do
        printf "%0.sA" $(seq 1 $((i * 1000000))) > "${pgo_dir}/training/compressible_${i}.txt"
    done

    # Mixed content files
    if [ -d "/usr/share/doc" ]; then
        find /usr/share/doc /usr/share/man -type f -name "*.txt" -o -name "*.gz" 2>/dev/null | \
        head -n 100 | while read -r file; do
            if [[ $file == *.gz ]]; then
                zcat "${file}" 2>/dev/null
            else
                cat "${file}" 2>/dev/null
            fi
        done > "${pgo_dir}/training/docs.txt"
    fi

    # HTML-like content
    for i in {1..1000}; do
        echo "<html><body><h1>Header $i</h1><p>$(dd if=/dev/urandom bs=100 count=1 2>/dev/null | base64)</p></body></html>" \
        >> "${pgo_dir}/training/web_content.txt"
    done

    # JSON-like content
    for i in {1..1000}; do
        echo "{\"id\": $i, \"data\": \"$(dd if=/dev/urandom bs=50 count=1 2>/dev/null | base64)\", \"array\": [1,2,3,4,5]}" \
        >> "${pgo_dir}/training/json_content.txt"
    done
}

run_training_workload() {
    local build_dir="$1"
    local PROFILE_DIR="$2"
    local TMPDIR="$3"

    # Function to run compression tests with different strategies and levels
    run_compression_tests() {
        local input_file="$1"
        local lib_path="$2"
        local temp_gz="${TMPDIR}/temp.gz"

        # Test different compression levels
        for level in {1..9}; do
            LD_LIBRARY_PATH="${lib_path}" "${build_dir}/minigzip" -${level} < "${input_file}" > "${temp_gz}"
            LD_LIBRARY_PATH="${lib_path}" "${build_dir}/minigzip" -d < "${temp_gz}" > /dev/null
            rm -f "${temp_gz}"
        done

        # Test with different window bits
        for bits in {9..15}; do
            local temp_deflate="${TMPDIR}/temp.deflate"
            local temp_inflated="${TMPDIR}/temp.inflated"
            LD_LIBRARY_PATH="${lib_path}" "${build_dir}/example" "${input_file}" "${temp_deflate}" $bits
            LD_LIBRARY_PATH="${lib_path}" "${build_dir}/example" -d "${temp_deflate}" "${temp_inflated}" $bits
            rm -f "${temp_deflate}" "${temp_inflated}"
        done

        # Test different strategies
        for strategy in {0..4}; do
            LD_LIBRARY_PATH="${lib_path}" "${build_dir}/example" -s$strategy "${input_file}" /dev/null
        done
    }

    # Create temporary directory for compressed files
    local COMP_DIR="${TMPDIR}/compressed"
    mkdir -p "${COMP_DIR}"

    # Process each training file
    find "${PROFILE_DIR}" -type f -print0 | while IFS= read -r -d '' file; do
        # Regular compression/decompression
        run_compression_tests "${file}" "${build_dir}"

        # Parallel processing simulation
        for i in $(seq 1 $(nproc)); do
            {
                local temp_gz="${COMP_DIR}/compressed_${i}.gz"
                LD_LIBRARY_PATH="${build_dir}" "${build_dir}/minigzip" -6 < "${file}" > "${temp_gz}"
                LD_LIBRARY_PATH="${build_dir}" "${build_dir}/minigzip" -d < "${temp_gz}" > /dev/null
                rm -f "${temp_gz}"
            } &
        done
        wait

        # Stream processing simulation
        dd if="${file}" bs=4K 2>/dev/null | while read -r -n 4096 chunk; do
            echo "${chunk}" | LD_LIBRARY_PATH="${build_dir}" "${build_dir}/minigzip" > "${COMP_DIR}/temp_stream.gz"
            rm -f "${COMP_DIR}/temp_stream.gz"
        done

        # Memory-mapped compression (if supported)
        if [ -x "${build_dir}/example" ]; then
            local temp_mmap="${COMP_DIR}/mmap_compressed"
            LD_LIBRARY_PATH="${build_dir}" "${build_dir}/example" "${file}" "${temp_mmap}"
            LD_LIBRARY_PATH="${build_dir}" "${build_dir}/example" -d "${temp_mmap}" /dev/null
            rm -f "${temp_mmap}"
        fi
    done

    # Dictionary-based compression simulation
    echo "Performing dictionary-based compression tests..."
    local dict_file="${COMP_DIR}/dictionary"
    cat "${PROFILE_DIR}"/training_*.txt > "${COMP_DIR}/combined_dict.txt"
    dd if="${COMP_DIR}/combined_dict.txt" bs=32K count=1 2>/dev/null > "${dict_file}"

    find "${PROFILE_DIR}" -type f -size -1M -print0 | while IFS= read -r -d '' file; do
        LD_LIBRARY_PATH="${build_dir}" "${build_dir}/example" -d "${dict_file}" "${file}" /dev/null
    done

    # Cleanup
    rm -rf "${COMP_DIR}"
}
export -f run_training_workload

build() {
  cd "zlib-ng"

  # Store original flags
  orig_cflags="${CFLAGS}"
  orig_cxxflags="${CXXFLAGS}"
  orig_ldflags="${LDFLAGS}"
  extra_flags=" "

  # Create profile directory
  local pgo_dir="${srcdir}/zlib-ng-pgo"
  mkdir -p "${pgo_dir}"
  chmod -R u+rw "${pgo_dir}"

  # Generate training data
  generate_training_data "${pgo_dir}"

  ###########################################################################
  # Phase 1: PGO-Instrumentierungs-Build
  ###########################################################################
  msg2 "== Building PGO instrumented build (zlib-ng)"
  export CFLAGS="${orig_cflags}${extra_flags} -fprofile-generate -Wl,--build-id=sha1 -fdebug-info-for-profiling -g3 -fno-omit-frame-pointer -mllvm -vp-counters-per-site=10"
  export CXXFLAGS="${orig_cxxflags}${extra_flags} -fprofile-generate -Wl,--build-id=sha1 -fdebug-info-for-profiling -g3 -fno-omit-frame-pointer -mllvm -vp-counters-per-site=10"
  export LDFLAGS="${orig_ldflags}${extra_flags}"
  export LLVM_PROFILE_FILE="${pgo_dir}/zlib-ng-%p-%m.profraw"

  local _options=(
    -G Ninja
    -DCMAKE_BUILD_TYPE=Release
    -DCMAKE_C_STANDARD=11
    -DCMAKE_CXX_STANDARD=23
    -DCMAKE_INSTALL_PREFIX=/usr
    -DCMAKE_INSTALL_LIBDIR=lib
    -Wno-dev
    -DWITH_GTEST=OFF
  )

  # Build for zlib-ng
  cmake -B build_pgo "${_options[@]}"
  cmake --build build_pgo
  # Build for zlib-ng-compat
  cmake -B build_pgo_compat "${_options[@]}" -DZLIB_COMPAT=ON
  cmake --build build_pgo_compat

  ###########################################################################
  # Phase 2: PGO Training
  ###########################################################################
  msg2 "== Running PGO training workload"

  # Create secure temp directory
  export TMPDIR="${pgo_dir}/tmp"
  mkdir -p "${TMPDIR}"
  chmod 700 "${TMPDIR}"

  # Run training workload for both builds
  run_training_workload "${PWD}/build_pgo" "${pgo_dir}/training" "${TMPDIR}"
  run_training_workload "${PWD}/build_pgo_compat" "${pgo_dir}/training" "${TMPDIR}"

  ###########################################################################
  # Phase 3: Merge PGO Profiles
  ###########################################################################
  msg2 "== Merging PGO profiles"
  cd "${pgo_dir}"
  llvm-profdata merge -output=zlib-ng.profdata zlib-ng-*.profraw
  cd "${srcdir}/zlib-ng"

  ###########################################################################
  # Phase 4: Optimized Build with PGO
  ###########################################################################
  msg2 "== Building optimized version with PGO data"
  export CFLAGS="${orig_cflags}${extra_flags} -fprofile-use=${pgo_dir}/zlib-ng.profdata"
  export CXXFLAGS="${orig_cxxflags}${extra_flags} -fprofile-use=${pgo_dir}/zlib-ng.profdata"
  export LDFLAGS="${orig_ldflags}${extra_flags} -Wl,--emit-relocs"

  cmake -B build_opt "${_options[@]}"
  cmake --build build_opt
  cmake -B build_opt_compat "${_options[@]}" -DZLIB_COMPAT=ON
  cmake --build build_opt_compat

  ###########################################################################
  # Phase 5: BOLT Instrumentation
  ###########################################################################
  msg2 "== BOLT instrumentation phase"

  # Instrument both libraries
  llvm-bolt "${PWD}/build_opt/libz-ng.so.${pkgver}" \
    --instrument \
    --lite=false \
    --instrumentation-file-append-pid \
    --instrumentation-file="${pgo_dir}/bolt.fdata" \
    -o "${PWD}/build_opt/libz-ng.so.${pkgver}.inst"

  llvm-bolt "${PWD}/build_opt_compat/libz.so.${_zlibver}.zlib-ng" \
    --instrument \
    --lite=false \
    --instrumentation-file-append-pid \
    --instrumentation-file="${pgo_dir}/bolt_compat.fdata" \
    -o "${PWD}/build_opt_compat/libz.so.${_zlibver}.zlib-ng.inst"

  # Backup originals and replace with instrumented versions
  mv "${PWD}/build_opt/libz-ng.so.${pkgver}" "${PWD}/build_opt/libz-ng.so.${pkgver}.org"
  mv "${PWD}/build_opt/libz-ng.so.${pkgver}.inst" "${PWD}/build_opt/libz-ng.so.${pkgver}"

  mv "${PWD}/build_opt_compat/libz.so.${_zlibver}.zlib-ng" "${PWD}/build_opt_compat/libz.so.${_zlibver}.zlib-ng.org"
  mv "${PWD}/build_opt_compat/libz.so.${_zlibver}.zlib-ng.inst" "${PWD}/build_opt_compat/libz.so.${_zlibver}.zlib-ng"

###########################################################################
  # Phase 6: BOLT Training
  ###########################################################################
  msg2 "== Running BOLT training workload"
  export BOLT_PROFILE_FILE="${pgo_dir}/bolt.fdata"
  run_training_workload "${PWD}/build_opt" "${pgo_dir}/training" "${TMPDIR}"

  export BOLT_PROFILE_FILE="${pgo_dir}/bolt_compat.fdata"
  run_training_workload "${PWD}/build_opt_compat" "${pgo_dir}/training" "${TMPDIR}"

  ###########################################################################
  # Phase 7: Merge BOLT Profiles
  ###########################################################################
  msg2 "== Merging BOLT profiles"
  LD_PRELOAD=/usr/lib/libmimalloc.so merge-fdata "${pgo_dir}"/*.fdata > "${pgo_dir}/combined.fdata"

  ###########################################################################
  # Phase 8: Final BOLT Optimization
  ###########################################################################
  msg2 "== Applying final BOLT optimizations"

  # Optimize zlib-ng
  LD_PRELOAD=/usr/lib/libmimalloc.so llvm-bolt "${PWD}/build_opt/libz-ng.so.${pkgver}.org" \
    --data "${pgo_dir}/combined.fdata" \
    -o "${PWD}/build_opt/libz-ng.so.${pkgver}.bolt" \
    --dyno-stats \
    --icf=safe \
    --plt=all \
    --hugify \
    --peepholes=all \
    --x86-strip-redundant-address-size \
    --indirect-call-promotion=all \
    --reorder-blocks=ext-tsp \
    --reorder-functions=cdsort \
    --split-all-cold \
    --split-eh \
    --split-functions \
    --split-strategy=cdsplit \
    --redirect-never-taken-jumps || exit 1

  # Optimize zlib-ng-compat
  LD_PRELOAD=/usr/lib/libmimalloc.so llvm-bolt "${PWD}/build_opt_compat/libz.so.${_zlibver}.zlib-ng.org" \
    --data "${pgo_dir}/combined.fdata" \
    -o "${PWD}/build_opt_compat/libz.so.${_zlibver}.zlib-ng.bolt" \
    --dyno-stats \
    --icf=safe \
    --plt=all \
    --hugify \
    --peepholes=all \
    --x86-strip-redundant-address-size \
    --indirect-call-promotion=all \
    --reorder-blocks=ext-tsp \
    --reorder-functions=cdsort \
    --split-all-cold \
    --split-eh \
    --split-functions \
    --split-strategy=cdsplit \
    --redirect-never-taken-jumps || exit 1
}

check() {
  cd "zlib-ng"
  msg "Testing zlib-ng (PGO-optimized build)"
  ctest --test-dir build_opt --output-on-failure
  msg "Testing zlib-ng-compat (PGO-optimized build)"
  ctest --test-dir build_opt_compat --output-on-failure
}

package_zlib-ng() {
  pkgdesc='zlib-Ersatz mit Optimierungen für Systeme der nächsten Generation'
  provides=("libz-ng.so")
  options=(!strip)
  cd "zlib-ng"
  DESTDIR="${pkgdir}" cmake --install build_opt

  find "$pkgdir" -type f \( -name '*.so*' -o -name '*.a' -o -executable \) -print0 | \
    while IFS= read -r -d '' file; do
      if llvm-strip --strip-unneeded "$file" 2>/dev/null || llvm-strip --strip-all "$file" 2>/dev/null; then
        echo "Stripped: $file"
      else
        echo "Skipping: $file (kein gültiges Objekt)" >&2
      fi
    done

  if [ -f "$srcdir/zlib-ng/build_opt/libz-ng.so.${pkgver}.bolt" ]; then
    install -Dm755 "$srcdir/zlib-ng/build_opt/libz-ng.so.${pkgver}.bolt" "$pkgdir/usr/lib/libz-ng.so.${pkgver}"
  fi

  install -Dm644 LICENSE.md -t "${pkgdir}/usr/share/licenses/${pkgname[0]}"
  install -Dm644 README.md -t "${pkgdir}/usr/share/doc/${pkgname[0]}"
}

package_zlib-ng-compat() {
  pkgdesc='zlib-Ersatz mit Optimierungen für Systeme der nächsten Generation (zlib compat)'
  provides=("zlib=1:${_zlibver}" "libz.so")
  depends=('zlib-ng')
  conflicts=('zlib')
  replaces=('zlib')
  options=('staticlibs' !strip)
  cd "zlib-ng"
  DESTDIR="${pkgdir}" cmake --install build_opt_compat

  find "$pkgdir" -type f \( -name '*.so*' -o -name '*.a' -o -executable \) -print0 | \
    while IFS= read -r -d '' file; do
      if llvm-strip --strip-unneeded "$file" 2>/dev/null || llvm-strip --strip-all "$file" 2>/dev/null; then
        echo "Stripped: $file"
      else
        echo "Skipping: $file (kein gültiges Objekt)" >&2
      fi
    done

  if [ -f "$srcdir/zlib-ng/build_opt_compat/libz.so.${_zlibver}.zlib-ng.bolt" ]; then
    install -Dm755 "$srcdir/zlib-ng/build_opt_compat/libz.so.${_zlibver}.zlib-ng.bolt" "$pkgdir/usr/lib/libz.so.${_zlibver}.zlib-ng"
  fi

  install -Dm644 LICENSE.md -t "${pkgdir}/usr/share/licenses/${pkgname[0]}"
  install -Dm644 README.md -t "${pkgdir}/usr/share/doc/${pkgname[0]}"
}
