pkgname=(
  zlib-ng
  zlib-ng-compat
)
pkgver=2.2.3
pkgrel=13.1
_zlibver=1.3.1 # Keep this consistent with the actual zlib version you're replacing
pkgdesc='zlib replacement with optimizations for next generation systems'
url='https://github.com/zlib-ng/zlib-ng'
arch=('x86_64')
license=('custom:zlib')
depends=(
  glibc
)
makedepends=(
  cmake
  ninja
  git
  llvm            # Required for BOLT
  perf            # Required for profile data collection
)
source=(git+https://github.com/zlib-ng/zlib-ng#tag=${pkgver})
sha256sums=('6867f8f1e57d3e8e4158292a839fa29967c58849aabeba2199e3d95b346d675f')

build() {
  cd "zlib-ng"

  export CFLAGS+=" -fno-semantic-interposition -Wl,--build-id=sha1 -mllvm -vp-counters-per-site=6"
  export CXXFLAGS+=" -fno-semantic-interposition -Wl,--build-id=sha1 -mllvm -vp-counters-per-site=6"
  export LDFLAGS+=" -Wl,--build-id=sha1 -Wl,--emit-relocs"

  local _options=(
    -G Ninja
    -DCMAKE_BUILD_TYPE=Release
    -DCMAKE_C_STANDARD=11
    -DCMAKE_CXX_STANDARD=23
    -DCMAKE_INSTALL_PREFIX=/usr
    -DCMAKE_INSTALL_LIBDIR=lib
    -Wno-dev
    -DWITH_GTEST=OFF
  )

  cmake -B build "${_options[@]}"
  cmake --build build

  cmake -B build-compat "${_options[@]}" \
    -DZLIB_COMPAT=ON
  cmake --build build-compat

  # Ensure bolt_profile directory exists and is writable
  mkdir -p "$srcdir/bolt_profile"
  chmod -R u+rw "$srcdir/bolt_profile" # Ensure write permissions

  # Remove existing .fdata files
  rm -f "$srcdir/bolt_profile/perf.ng.fdata"
  rm -f "$srcdir/bolt_profile/perf.compat.fdata"

  # Record profile data (similar to your script)
  msg2 "== Start Training Build (zlib-ng)"
  perf record -o perf.data --max-size=6G -F 5000 -e cycles:u -j any,u -- ctest --test-dir build --output-on-failure

  msg2 "== Start Training Build (zlib-ng-compat)"
  perf record -o perf.data.compat --max-size=6G -F 5000 -e cycles:u -j any,u -- ctest --test-dir build-compat --output-on-failure

  # Convert perf data to BOLT format (using correct sonames and absolute paths)
  msg2 "Converting profile to BOLT format (zlib-ng)"
  perf2bolt build/libz-ng.so.2.2.3 -p perf.data -o "$srcdir/bolt_profile/perf.ng.fdata"

  msg2 "Converting profile to BOLT format (zlib-ng-compat)"
  perf2bolt build-compat/libz.so.1.3.1.zlib-ng -p perf.data.compat -o "$srcdir/bolt_profile/perf.compat.fdata"

  # Optimize with BOLT (using correct sonames, absolute paths, and your specified BOLT flags)
  msg2 "Optimizing zlib-ng with BOLT"
  llvm-bolt build/libz-ng.so.2.2.3 -o build/libz-ng.so.2.2.3.bolt \
    --data "$srcdir/bolt_profile/perf.ng.fdata" \
    --dyno-stats --cu-processing-batch-size=64 --eliminate-unreachable --frame-opt=all \
    --icf=all --jump-tables=aggressive --min-branch-clusters --stoke --sctc-mode=always \
    --plt=all --hot-data --hot-text --frame-opt-rm-stores --peepholes=all \
    --infer-stale-profile=1 --x86-strip-redundant-address-size --indirect-call-promotion=all \
    --reg-reassign --use-aggr-reg-reassign --reorder-blocks=ext-tsp --reorder-functions=cdsort \
    --split-all-cold --split-eh --split-functions --split-strategy=cdsplit

  msg2 "Optimizing zlib-ng-compat with BOLT"
  llvm-bolt build-compat/libz.so.1.3.1.zlib-ng -o build-compat/libz.so.1.3.1.zlib-ng.bolt \
    --data "$srcdir/bolt_profile/perf.compat.fdata" \
    --dyno-stats --cu-processing-batch-size=64 --eliminate-unreachable --frame-opt=all \
    --icf=all --jump-tables=aggressive --min-branch-clusters --stoke --sctc-mode=always \
    --plt=all --hot-data --hot-text --frame-opt-rm-stores --peepholes=all \
    --infer-stale-profile=1 --x86-strip-redundant-address-size --indirect-call-promotion=all \
    --reg-reassign --use-aggr-reg-reassign --reorder-blocks=ext-tsp --reorder-functions=cdsort \
    --split-all-cold --split-eh --split-functions --split-strategy=cdsplit
}

check() {
  cd "zlib-ng"
  msg "Checking zlib-ng"
  ctest --output-on-failure --test-dir build
  msg "Checking zlib-ng-compat"
  ctest --test-dir build-compat --output-on-failure
}

package_zlib-ng() {
  pkgdesc='zlib replacement with optimizations for next generation systems'
  provides=("libz-ng.so")

  cd "zlib-ng"
  DESTDIR="${pkgdir}" cmake --install build

  # Use llvm-strip only on recognized file formats
  find "$pkgdir" -type f \( -name '*.so*' -o -name '*.a' -o -executable \) -print0 | while IFS= read -r -d '' file; do
  if llvm-strip --strip-unneeded "$file" 2>/dev/null || llvm-strip --strip-all "$file" 2>/dev/null; then
    echo "Stripped: $file"
  else
    echo "Skipping: $file (not a valid object file)" >&2
  fi
done

  # Replace the binary with BOLT-optimized version if it exists
  if [ -f "$srcdir/build/bolt/libz-ng.bolt" ]; then
    install -Dm755 "$srcdir/build/bolt/libz-ng.bolt" "$pkgdir"/usr/lib/libz-ng.so.2.2.3.2.2.3.2.2.3
  fi

  install -Dm 644 LICENSE.md -t "${pkgdir}/usr/share/licenses/${pkgname[0]}"
  install -Dm 644 README.md -t "${pkgdir}/usr/share/doc/${pkgname[0]}"
}

package_zlib-ng-compat() {
  pkgdesc='zlib replacement with optimizations for next generation systems (zlib compat)'
  provides=("zlib=1:${_zlibver}" "libz.so")
  depends=('zlib-ng')
  conflicts=('zlib')
  replaces=('zlib')
  options=('staticlibs')

  cd "zlib-ng"
  DESTDIR="${pkgdir}" cmake --install build-compat

  # Use llvm-strip only on recognized file formats
  find "$pkgdir" -type f \( -name '*.so*' -o -name '*.a' -o -executable \) -print0 | while IFS= read -r -d '' file; do
  if llvm-strip --strip-unneeded "$file" 2>/dev/null || llvm-strip --strip-all "$file" 2>/dev/null; then
    echo "Stripped: $file"
  else
    echo "Skipping: $file (not a valid object file)" >&2
  fi
done

  # Replace the binary with BOLT-optimized version if it exists
  if [ -f "$srcdir/build/bolt/libz-compat.bolt" ]; then
    install -Dm755 "$srcdir/build/bolt/libz-compat.bolt" "$pkgdir"/usr/lib/libz.so
  fi

  install -Dm 644 LICENSE.md -t "${pkgdir}/usr/share/licenses/${pkgname[0]}"
  install -Dm 644 README.md -t "${pkgdir}/usr/share/doc/${pkgname[0]}"
}
