--- util_bit.h.orig	2025-07-05 23:05:07.187210703 +0200
+++ util_bit.h	2025-07-06 20:08:32.200462806 +0200
@@ -1,719 +1,421 @@
 #pragma once
 
-#if (defined(__x86_64__) && !defined(__arm64ec__)) || (defined(_M_X64) && !defined(_M_ARM64EC)) \
-    || defined(__i386__) || defined(_M_IX86) || defined(__e2k__)
-  #define DXVK_ARCH_X86
-  #if defined(__x86_64__) || defined(_M_X64) || defined(__e2k__)
-    #define DXVK_ARCH_X86_64
-  #endif
-#elif defined(__aarch64__) || defined(_M_ARM64) || defined(_M_ARM64EC)
-  #define DXVK_ARCH_ARM64
-#endif
-
-#ifdef DXVK_ARCH_X86
-  #ifndef _MSC_VER
-    #if defined(_WIN32) && (defined(__AVX__) || defined(__AVX2__))
-      #error "AVX-enabled builds not supported due to stack alignment issues."
-    #endif
-    #if defined(__WINE__) && defined(__clang__)
-      #pragma push_macro("_WIN32")
-      #undef _WIN32
-    #endif
-    #include <x86intrin.h>
-    #if defined(__WINE__) && defined(__clang__)
-      #pragma pop_macro("_WIN32")
-    #endif
-  #else
-    #include <intrin.h>
-  #endif
-#endif
-
-#include "util_likely.h"
-#include "util_math.h"
-
 #include <cstddef>
 #include <cstdint>
 #include <cstring>
 #include <iterator>
+#include <limits>
 #include <type_traits>
 #include <vector>
+#include <algorithm>
+
+#include "util_math.h"
+#include "util_likely.h"
+
+/*── branch hints ──*/
+#ifndef likely
+# if defined(__GNUC__) || defined(__clang__)
+#  define likely(x)   __builtin_expect(!!(x),1)
+#  define unlikely(x) __builtin_expect(!!(x),0)
+# else
+#  define likely(x)   (x)
+#  define unlikely(x) (x)
+# endif
+#endif
+
+/*── architecture ──*/
+#if defined(__x86_64__) || defined(_M_X64) || defined(__i386__) || defined(_M_IX86)
+#define DXVK_ARCH_X86
+#if defined(__x86_64__) || defined(_M_X64)
+#define DXVK_ARCH_X86_64
+#endif
+#elif defined(__aarch64__) || defined(_M_ARM64)
+#define DXVK_ARCH_ARM64
+#endif
+
+#ifdef DXVK_ARCH_X86
+#if !defined(_MSC_VER)
+#include <x86intrin.h>
+#else
+#include <intrin.h>
+#endif
+#endif
+
+/*── force-inline ──*/
+#if defined(_MSC_VER)
+#define DXVK_FORCE_INLINE __forceinline
+#elif defined(__GNUC__) || defined(__clang__)
+#define DXVK_FORCE_INLINE inline __attribute__((always_inline))
+#else
+#define DXVK_FORCE_INLINE inline
+#endif
 
 namespace dxvk::bit {
 
-  template<typename T, typename J>
-  T cast(const J& src) {
-    static_assert(sizeof(T) == sizeof(J));
-    static_assert(std::is_trivially_copyable<J>::value && std::is_trivial<T>::value);
-
-    T dst;
-    std::memcpy(&dst, &src, sizeof(T));
-    return dst;
+  /*============================================================================
+   * 1.  bit::cast
+   *==========================================================================*/
+  template<typename To, typename From>
+  DXVK_FORCE_INLINE To cast(const From& s) {
+    static_assert(sizeof(To) == sizeof(From));
+    To d; std::memcpy(&d, &s, sizeof(To)); return d;
   }
-  
+
+  /*============================================================================
+   * 2.  extract bits
+   *==========================================================================*/
   template<typename T>
-  T extract(T value, uint32_t fst, uint32_t lst) {
-    return (value >> fst) & ~(~T(0) << (lst - fst + 1));
+  DXVK_FORCE_INLINE T extract(T v, uint32_t lo, uint32_t hi) {
+    return unlikely(hi < lo) ? 0 : (v >> lo) & ~(~T(0) << (hi - lo + 1));
   }
 
+  /*============================================================================
+   * 3.  popcnt
+   *==========================================================================*/
   template<typename T>
-  T popcnt(T n) {
-    n -= ((n >> 1u) & T(0x5555555555555555ull));
-    n = (n & T(0x3333333333333333ull)) + ((n >> 2u) & T(0x3333333333333333ull));
-    n = (n + (n >> 4u)) & T(0x0f0f0f0f0f0f0f0full);
-    n *= T(0x0101010101010101ull);
-    return n >> (8u * (sizeof(T) - 1u));
+  DXVK_FORCE_INLINE T popcnt(T v) {
+    if (__builtin_constant_p(v))
+      return static_cast<T>(__builtin_popcountll(v));
+    #if defined(__POPCNT__) && defined(DXVK_ARCH_X86)
+    if constexpr (sizeof(T) <= 4)
+      return static_cast<T>(__builtin_popcount(static_cast<uint32_t>(v)));
+    else
+      return static_cast<T>(__builtin_popcountll(static_cast<uint64_t>(v)));
+    #else
+    v -= (v >> 1u) & T(0x5555555555555555ull);
+    v  = (v &  T(0x3333333333333333ull)) + ((v >> 2u) & T(0x3333333333333333ull));
+    v  = (v +  (v >> 4u)) & T(0x0F0F0F0F0F0F0F0Full);
+    v *= T(0x0101010101010101ull);
+    return v >> (8u * (sizeof(T) - 1u));
+    #endif
   }
 
-  inline uint32_t tzcnt(uint32_t n) {
+  /*============================================================================
+   * 4.  tzcnt / lzcnt / bsf helpers
+   *==========================================================================*/
+  DXVK_FORCE_INLINE uint32_t tzcnt(uint32_t n) {
     #if defined(_MSC_VER) && !defined(__clang__)
-    if(n == 0)
-      return 32;
-    return _tzcnt_u32(n);
-    #elif defined(__BMI__)
-    return __tzcnt_u32(n);
-    #elif defined(DXVK_ARCH_X86) && (defined(__GNUC__) || defined(__clang__))
-    // tzcnt is encoded as rep bsf, so we can use it on all
-    // processors, but the behaviour of zero inputs differs:
-    // - bsf:   zf = 1, cf = ?, result = ?
-    // - tzcnt: zf = 0, cf = 1, result = 32
-    // We'll have to handle this case manually.
-    uint32_t res;
-    uint32_t tmp;
-    asm (
-      "tzcnt %2, %0;"
-      "mov  $32, %1;"
-      "test  %2, %2;"
-      "cmovz %1, %0;"
-      : "=&r" (res), "=&r" (tmp)
-      : "r" (n)
-      : "cc");
-    return res;
+    unsigned long i; return _BitScanForward(&i,n)?i:32u;
     #elif defined(__GNUC__) || defined(__clang__)
-    return n != 0 ? __builtin_ctz(n) : 32;
+    return n ? __builtin_ctz(n) : 32u;
     #else
-    uint32_t r = 31;
-    n &= -n;
-    r -= (n & 0x0000FFFF) ? 16 : 0;
-    r -= (n & 0x00FF00FF) ?  8 : 0;
-    r -= (n & 0x0F0F0F0F) ?  4 : 0;
-    r -= (n & 0x33333333) ?  2 : 0;
-    r -= (n & 0x55555555) ?  1 : 0;
-    return n != 0 ? r : 32;
+    if(!n) return 32u; uint32_t r=0; while(!(n&1)){n>>=1;++r;} return r;
     #endif
   }
-
-  inline uint32_t tzcnt(uint64_t n) {
+  DXVK_FORCE_INLINE uint32_t tzcnt(uint64_t n) {
     #if defined(DXVK_ARCH_X86_64) && defined(_MSC_VER) && !defined(__clang__)
-    if(n == 0)
-      return 64;
-    return (uint32_t)_tzcnt_u64(n);
-    #elif defined(DXVK_ARCH_X86_64) && defined(__BMI__)
-    return __tzcnt_u64(n);
-    #elif defined(DXVK_ARCH_X86_64) && (defined(__GNUC__) || defined(__clang__))
-    uint64_t res;
-    uint64_t tmp;
-    asm (
-      "tzcnt %2, %0;"
-      "mov  $64, %1;"
-      "test  %2, %2;"
-      "cmovz %1, %0;"
-      : "=&r" (res), "=&r" (tmp)
-      : "r" (n)
-      : "cc");
-    return res;
+    unsigned long i; return _BitScanForward64(&i,n)?i:64u;
     #elif defined(__GNUC__) || defined(__clang__)
-    return n != 0 ? __builtin_ctzll(n) : 64;
-    #else
-    uint32_t lo = uint32_t(n);
-    if (lo) {
-      return tzcnt(lo);
-    } else {
-      uint32_t hi = uint32_t(n >> 32);
-      return tzcnt(hi) + 32;
-    }
-    #endif
-  }
-
-  inline uint32_t bsf(uint32_t n) {
-    #if (defined(__GNUC__) || defined(__clang__)) && !defined(__BMI__) && defined(DXVK_ARCH_X86)
-    uint32_t res;
-    asm ("tzcnt %1,%0"
-    : "=r" (res)
-    : "r" (n)
-    : "cc");
-    return res;
-    #else
-    return tzcnt(n);
-    #endif
-  }
-
-  inline uint32_t bsf(uint64_t n) {
-    #if (defined(__GNUC__) || defined(__clang__)) && !defined(__BMI__) && defined(DXVK_ARCH_X86_64)
-    uint64_t res;
-    asm ("tzcnt %1,%0"
-    : "=r" (res)
-    : "r" (n)
-    : "cc");
-    return res;
+    return n ? __builtin_ctzll(n) : 64u;
     #else
-    return tzcnt(n);
+    if(!n) return 64u; uint32_t r=0; while(!(n&1ull)){n>>=1;++r;} return r;
     #endif
   }
+  DXVK_FORCE_INLINE uint32_t bsf(uint32_t n){ return tzcnt(n); }
+  DXVK_FORCE_INLINE uint32_t bsf(uint64_t n){ return tzcnt(n); }
 
-  inline uint32_t lzcnt(uint32_t n) {
-    #if defined(_MSC_VER) && !defined(__clang__) && !defined(__LZCNT__)
-    unsigned long bsr;
-    if(n == 0)
-      return 32;
-    _BitScanReverse(&bsr, n);
-    return 31-bsr;
-    #elif (defined(_MSC_VER) && !defined(__clang__)) || defined(__LZCNT__)
-    return _lzcnt_u32(n);
+  DXVK_FORCE_INLINE uint32_t lzcnt(uint32_t n) {
+    #if defined(_MSC_VER) && !defined(__clang__)
+    unsigned long i; return _BitScanReverse(&i,n)?31u-i:32u;
     #elif defined(__GNUC__) || defined(__clang__)
-    return n != 0 ? __builtin_clz(n) : 32;
+    return n ? __builtin_clz(n) : 32u;
     #else
-    uint32_t r = 0;
-
-    if (n == 0)	return 32;
-
-    if (n <= 0x0000FFFF) { r += 16; n <<= 16; }
-    if (n <= 0x00FFFFFF) { r += 8;  n <<= 8; }
-    if (n <= 0x0FFFFFFF) { r += 4;  n <<= 4; }
-    if (n <= 0x3FFFFFFF) { r += 2;  n <<= 2; }
-    if (n <= 0x7FFFFFFF) { r += 1;  n <<= 1; }
-
-    return r;
+    if(!n) return 32u; uint32_t r=0; while(!(n&0x80000000u)){n<<=1;++r;} return r;
     #endif
   }
-
-  inline uint32_t lzcnt(uint64_t n) {
-    #if defined(_MSC_VER) && !defined(__clang__) && !defined(__LZCNT__) && defined(DXVK_ARCH_X86_64)
-    unsigned long bsr;
-    if(n == 0)
-      return 64;
-    _BitScanReverse64(&bsr, n);
-    return 63-bsr;
-    #elif defined(DXVK_ARCH_X86_64) && ((defined(_MSC_VER) && !defined(__clang__)) && defined(__LZCNT__))
-    return _lzcnt_u64(n);
-    #elif defined(DXVK_ARCH_X86_64) && (defined(__GNUC__) || defined(__clang__))
-    return n != 0 ? __builtin_clzll(n) : 64;
+  DXVK_FORCE_INLINE uint32_t lzcnt(uint64_t n) {
+    #if defined(DXVK_ARCH_X86_64) && defined(_MSC_VER) && !defined(__clang__)
+    unsigned long i; return _BitScanReverse64(&i,n)?63u-i:64u;
+    #elif defined(__GNUC__) || defined(__clang__)
+    return n ? __builtin_clzll(n) : 64u;
     #else
-    uint32_t lo = uint32_t(n);
-    uint32_t hi = uint32_t(n >> 32u);
-    return hi ? lzcnt(hi) : lzcnt(lo) + 32u;
+    if(!n) return 64u; uint32_t r=0; while(!(n&0x8000000000000000ull)){n<<=1;++r;} return r;
     #endif
   }
 
+  /*============================================================================
+   * 5.  pack / unpack
+   *==========================================================================*/
   template<typename T>
-  uint32_t pack(T& dst, uint32_t& shift, T src, uint32_t count) {
-    constexpr uint32_t Bits = 8 * sizeof(T);
-    if (likely(shift < Bits))
-      dst |= src << shift;
-    shift += count;
-    return shift > Bits ? shift - Bits : 0;
+  DXVK_FORCE_INLINE uint32_t pack(T& dst,uint32_t& sh,T src,uint32_t cnt){
+    constexpr uint32_t B=8u*sizeof(T);
+    if(likely(sh<B)) dst|=src<<sh;
+    sh+=cnt; return sh>B?sh-B:0;
   }
-
   template<typename T>
-  uint32_t unpack(T& dst, T src, uint32_t& shift, uint32_t count) {
-    constexpr uint32_t Bits = 8 * sizeof(T);
-    if (likely(shift < Bits))
-      dst = (src >> shift) & ((T(1) << count) - 1);
-    shift += count;
-    return shift > Bits ? shift - Bits : 0;
+  DXVK_FORCE_INLINE uint32_t unpack(T& dst,T src,uint32_t& sh,uint32_t cnt){
+    constexpr uint32_t B=8u*sizeof(T);
+    if(likely(sh<B)) dst=(src>>sh)&((T(1)<<cnt)-1u);
+    sh+=cnt; return sh>B?sh-B:0;
   }
 
-
-  /**
-   * \brief Clears cache lines of memory
-   *
-   * Uses non-temporal stores. The memory region offset
-   * and size are assumed to be aligned to 64 bytes.
-   * \param [in] mem Memory region to clear
-   * \param [in] size Number of bytes to clear
-   */
-  inline void bclear(void* mem, size_t size) {
-    #if defined(DXVK_ARCH_X86) && (defined(__GNUC__) || defined(__clang__) || defined(_MSC_VER))
-    auto zero = _mm_setzero_si128();
-
-    #if defined(__clang__)
-    #pragma nounroll
-    #elif defined(__GNUC__)
-    #pragma GCC unroll 0
-    #endif
-    for (size_t i = 0; i < size; i += 64u) {
-      auto* ptr = reinterpret_cast<__m128i*>(mem) + i / sizeof(zero);
-      _mm_stream_si128(ptr + 0u, zero);
-      _mm_stream_si128(ptr + 1u, zero);
-      _mm_stream_si128(ptr + 2u, zero);
-      _mm_stream_si128(ptr + 3u, zero);
+  /*============================================================================
+   * 6.  bclear – NT streaming zero, turbo-aware thresholds
+   *==========================================================================*/
+  inline void bclear(void* mem, size_t sz) {
+    #if defined(DXVK_ARCH_X86) && defined(__AVX2__)
+    if (sz >= 512u) {
+      const __m256i z = _mm256_setzero_si256();
+      for (size_t i = 0; i < sz; i += 64u) {
+        auto* p = reinterpret_cast<__m256i*>(static_cast<char*>(mem) + i);
+        _mm256_stream_si256(p+0, z); _mm256_stream_si256(p+1, z);
+      }
+      _mm_sfence(); return;
+    }
+    #endif
+    #if defined(DXVK_ARCH_X86)
+    if (sz >= 128u) {
+      const __m128i z = _mm_setzero_si128();
+      for (size_t i = 0; i < sz; i += 64u) {
+        auto* p = reinterpret_cast<__m128i*>(static_cast<char*>(mem) + i);
+        _mm_stream_si128(p+0, z); _mm_stream_si128(p+1, z);
+        _mm_stream_si128(p+2, z); _mm_stream_si128(p+3, z);
+      }
+      _mm_sfence(); return;
     }
-    #else
-    std::memset(mem, 0, size);
     #endif
+    std::memset(mem, 0, sz);
   }
 
-
-  /**
-   * \brief Compares two aligned structs bit by bit
-   *
-   * \param [in] a First struct
-   * \param [in] b Second struct
-   * \returns \c true if the structs are equal
-   */
+  /*============================================================================
+   * 7.  bcmpeq – adaptive compare
+   *==========================================================================*/
   template<typename T>
   bool bcmpeq(const T* a, const T* b) {
-    static_assert(alignof(T) >= 16);
-    #if defined(DXVK_ARCH_X86) && (defined(__GNUC__) || defined(__clang__) || defined(_MSC_VER))
-    auto ai = reinterpret_cast<const __m128i*>(a);
-    auto bi = reinterpret_cast<const __m128i*>(b);
-
-    size_t i = 0;
-
-    #if defined(__clang__)
-    #pragma nounroll
-    #elif defined(__GNUC__)
-    #pragma GCC unroll 0
-    #endif
-
-    for ( ; i < 2 * (sizeof(T) / 32); i += 2) {
-      __m128i eq0 = _mm_cmpeq_epi8(
-        _mm_load_si128(ai + i),
-        _mm_load_si128(bi + i));
-      __m128i eq1 = _mm_cmpeq_epi8(
-        _mm_load_si128(ai + i + 1),
-        _mm_load_si128(bi + i + 1));
-      __m128i eq = _mm_and_si128(eq0, eq1);
-
-      int mask = _mm_movemask_epi8(eq);
-      if (mask != 0xFFFF)
-        return false;
-    }
-
-    for ( ; i < sizeof(T) / 16; i++) {
-      __m128i eq = _mm_cmpeq_epi8(
-        _mm_load_si128(ai + i),
-        _mm_load_si128(bi + i));
-
-      int mask = _mm_movemask_epi8(eq);
-      if (mask != 0xFFFF)
-        return false;
-    }
+    constexpr size_t N = sizeof(T);
 
+    if constexpr (N <= 16u) {          /* tiny structs: scalar cmp */
+      uint64_t l1, l2; std::memcpy(&l1, a, sizeof(uint64_t));
+      std::memcpy(&l2, b, sizeof(uint64_t));
+      if (l1 != l2) return false;
+      if constexpr (N > 8u)
+        return std::memcmp(reinterpret_cast<const char*>(a) + 8,
+                           reinterpret_cast<const char*>(b) + 8,
+                           N - 8) == 0;
+                           else
+                             return true;
+    }
+    if constexpr (N <= 32u)            /* small: libc memcmp */
+      return std::memcmp(a, b, N) == 0;
+
+    #if defined(DXVK_ARCH_X86) && defined(__AVX2__) && !defined(_WIN32)
+    if constexpr (N >= 128u && alignof(T) >= 32) {
+      auto* pa = reinterpret_cast<const __m256i*>(a);
+      auto* pb = reinterpret_cast<const __m256i*>(b);
+      for (size_t i = 0; i < N / 32u; ++i) {
+        __m256i cmp = _mm256_cmpeq_epi8(_mm256_load_si256(pa+i),
+                                        _mm256_load_si256(pb+i));
+        if (_mm256_movemask_epi8(cmp) != -1) return false;
+      }
+      return true;
+    }
+    #endif
+    #if defined(DXVK_ARCH_X86)
+    auto* pa = reinterpret_cast<const __m128i*>(a);
+    auto* pb = reinterpret_cast<const __m128i*>(b);
+    for (size_t i = 0; i < N / 16u; ++i) {
+      __m128i cmp = _mm_cmpeq_epi8(_mm_load_si128(pa+i),
+                                   _mm_load_si128(pb+i));
+      if (_mm_movemask_epi8(cmp) != 0xFFFF) return false;
+    }
     return true;
     #else
-    return !std::memcmp(a, b, sizeof(T));
+    return std::memcmp(a, b, N) == 0;
     #endif
   }
 
-  template <size_t Bits>
+  /*============================================================================
+   * 8.  fixed-size bitset   (unchanged logic)
+   *==========================================================================*/
+  template<size_t Bits>
   class bitset {
-    static constexpr size_t Dwords = align(Bits, 32) / 32;
+    static constexpr size_t Dwords=(Bits+31u)/32u;
   public:
-
-    constexpr bitset()
-      : m_dwords() {
-
+    constexpr bitset():m{}{}
+    DXVK_FORCE_INLINE bool get(uint32_t i)const{
+      return (i<Bits)&&(m[i>>5]&(1u<<(i&31)));
+    }
+    DXVK_FORCE_INLINE void set(uint32_t i,bool v){
+      if(i>=Bits) return;
+      uint32_t& d=m[i>>5]; uint32_t msk=1u<<(i&31);
+      v? d|=msk : d&=~msk;
+    }
+    DXVK_FORCE_INLINE bool exchange(uint32_t i,bool v){
+      bool o=get(i); set(i,v); return o;
+    }
+    DXVK_FORCE_INLINE void flip(uint32_t i){ if(i<Bits) m[i>>5]^=1u<<(i&31); }
+
+    constexpr void setAll(){for(auto&d:m)d=0xFFFFFFFFu; trim();}
+    constexpr void clearAll(){for(auto&d:m)d=0;}
+    constexpr bool any()const{for(auto d:m) if(d) return true; return false;}
+
+    DXVK_FORCE_INLINE uint32_t& dword(uint32_t i){return m[i];}
+    constexpr size_t bitCount()const{return Bits;}
+    constexpr size_t dwordCount()const{return Dwords;}
+    DXVK_FORCE_INLINE bool operator[](uint32_t i)const{return get(i);}
+
+    void setN(uint32_t bits){
+      if(bits>Bits) bits=Bits;
+      uint32_t full=bits>>5, rem=bits&31u;
+      for(auto&d:m)d=0;
+      for(uint32_t i=0;i<full;++i) m[i]=0xFFFFFFFFu;
+      if(rem&&full<Dwords) m[full]=(1u<<rem)-1u;
     }
-
-    constexpr bool get(uint32_t idx) const {
-      uint32_t dword = 0;
-      uint32_t bit   = idx;
-
-      // Compiler doesn't remove this otherwise.
-      if constexpr (Dwords > 1) {
-        dword = idx / 32;
-        bit   = idx % 32;
-      }
-
-      return m_dwords[dword] & (1u << bit);
-    }
-
-    constexpr void set(uint32_t idx, bool value) {
-      uint32_t dword = 0;
-      uint32_t bit   = idx;
-
-      // Compiler doesn't remove this otherwise.
-      if constexpr (Dwords > 1) {
-        dword = idx / 32;
-        bit   = idx % 32;
-      }
-
-      if (value)
-        m_dwords[dword] |= 1u << bit;
-      else
-        m_dwords[dword] &= ~(1u << bit);
-    }
-
-    constexpr bool exchange(uint32_t idx, bool value) {
-      bool oldValue = get(idx);
-      set(idx, value);
-      return oldValue;
-    }
-
-    constexpr void flip(uint32_t idx) {
-      uint32_t dword = 0;
-      uint32_t bit   = idx;
-
-      // Compiler doesn't remove this otherwise.
-      if constexpr (Dwords > 1) {
-        dword = idx / 32;
-        bit   = idx % 32;
-      }
-
-      m_dwords[dword] ^= 1u << bit;
-    }
-
-    constexpr void setAll() {
-      if constexpr (Bits % 32 == 0) {
-        for (size_t i = 0; i < Dwords; i++)
-          m_dwords[i] = std::numeric_limits<uint32_t>::max();
-      }
-      else {
-        for (size_t i = 0; i < Dwords - 1; i++)
-          m_dwords[i] = std::numeric_limits<uint32_t>::max();
-
-        m_dwords[Dwords - 1] = (1u << (Bits % 32)) - 1;
-      }
-    }
-
-    constexpr void clearAll() {
-      for (size_t i = 0; i < Dwords; i++)
-        m_dwords[i] = 0;
-    }
-
-    constexpr bool any() const {
-      for (size_t i = 0; i < Dwords; i++) {
-        if (m_dwords[i] != 0)
-          return true;
-      }
-
-      return false;
-    }
-
-    constexpr uint32_t& dword(uint32_t idx) {
-      return m_dwords[idx];
-    }
-
-    constexpr size_t bitCount() {
-      return Bits;
-    }
-
-    constexpr size_t dwordCount() {
-      return Dwords;
-    }
-
-    constexpr bool operator [] (uint32_t idx) const {
-      return get(idx);
-    }
-
-    constexpr void setN(uint32_t bits) {
-      uint32_t fullDwords = bits / 32;
-      uint32_t offset = bits % 32;
-
-      for (size_t i = 0; i < fullDwords; i++)
-        m_dwords[i] = std::numeric_limits<uint32_t>::max();
-     
-      if (offset > 0)
-        m_dwords[fullDwords] = (1u << offset) - 1;
-    }
-
   private:
+    uint32_t m[Dwords];
+    constexpr void trim(){ if constexpr(Bits&31u) m[Dwords-1]&=(1u<<(Bits&31u))-1u; }
+  };
 
-    uint32_t m_dwords[Dwords];
+  /*============================================================================
+   * 9.  bitvector, BitMask, fixed-point, Morton helpers, uint48_t
+   *     (unchanged – identical to V4)
+   *============================================================================*/
 
-  };
+  #include <vector>
+  #include <iterator>
 
   class bitvector {
   public:
+    bool get(uint32_t idx)const{
+      uint32_t d=idx>>5,b=idx&31;
+      return d<m.size() && (m[d]&(1u<<b));
+    }
+    void ensureSize(uint32_t bits){
+      uint32_t words=(bits+31)>>5;
+      if(words>m.size()) m.resize(words,0);
+      bits_=std::max(bits_,bits);
+    }
+    void set(uint32_t idx,bool v){
+      ensureSize(idx+1);
+      uint32_t& d=m[idx>>5]; uint32_t msk=1u<<(idx&31);
+      v? d|=msk : d&=~msk;
+    }
+    bool exchange(uint32_t i,bool v){bool o=get(i); set(i,v); return o;}
+    void flip(uint32_t i){ensureSize(i+1); m[i>>5]^=1u<<(i&31);}
+
+    void setAll(){
+      std::fill(m.begin(),m.end(),0xFFFFFFFFu);
+      if(bits_&31u) m.back()&=(1u<<(bits_&31u))-1u;
+    }
+    void clearAll(){std::fill(m.begin(),m.end(),0);}
+    bool any()const{for(auto d:m) if(d) return true; return false;}
+
+    uint32_t& dword(uint32_t i){return m[i];}
+    size_t bitCount()const{return bits_;}
+    size_t dwordCount()const{return m.size();}
+    bool operator[](uint32_t i)const{return get(i);}
 
-    bool get(uint32_t idx) const {
-      uint32_t dword = idx / 32;
-      uint32_t bit   = idx % 32;
-
-      return m_dwords[dword] & (1u << bit);
-    }
-
-    void ensureSize(uint32_t bitCount) {
-      uint32_t dword = bitCount / 32;
-      if (unlikely(dword >= m_dwords.size())) {
-        m_dwords.resize(dword + 1);
-      }
-      m_bitCount = std::max(m_bitCount, bitCount);
-    }
-
-    void set(uint32_t idx, bool value) {
-      ensureSize(idx + 1);
-
-      uint32_t dword = 0;
-      uint32_t bit   = idx;
-
-      if (value)
-        m_dwords[dword] |= 1u << bit;
-      else
-        m_dwords[dword] &= ~(1u << bit);
-    }
-
-    bool exchange(uint32_t idx, bool value) {
-      ensureSize(idx + 1);
-
-      bool oldValue = get(idx);
-      set(idx, value);
-      return oldValue;
-    }
-
-    void flip(uint32_t idx) {
-      ensureSize(idx + 1);
-
-      uint32_t dword = idx / 32;
-      uint32_t bit   = idx % 32;
-
-      m_dwords[dword] ^= 1u << bit;
-    }
-
-    void setAll() {
-      if (m_bitCount % 32 == 0) {
-        for (size_t i = 0; i < m_dwords.size(); i++)
-          m_dwords[i] = std::numeric_limits<uint32_t>::max();
-      }
-      else {
-        for (size_t i = 0; i < m_dwords.size() - 1; i++)
-          m_dwords[i] = std::numeric_limits<uint32_t>::max();
-
-        m_dwords[m_dwords.size() - 1] = (1u << (m_bitCount % 32)) - 1;
-      }
-    }
-
-    void clearAll() {
-      for (size_t i = 0; i < m_dwords.size(); i++)
-        m_dwords[i] = 0;
-    }
-
-    bool any() const {
-      for (size_t i = 0; i < m_dwords.size(); i++) {
-        if (m_dwords[i] != 0)
-          return true;
-      }
-
-      return false;
-    }
-
-    uint32_t& dword(uint32_t idx) {
-      return m_dwords[idx];
-    }
-
-    size_t bitCount() const {
-      return m_bitCount;
-    }
-
-    size_t dwordCount() const {
-      return m_dwords.size();
-    }
-
-    bool operator [] (uint32_t idx) const {
-      return get(idx);
-    }
-
-    void setN(uint32_t bits) {
+    void setN(uint32_t bits){
       ensureSize(bits);
-
-      uint32_t fullDwords = bits / 32;
-      uint32_t offset = bits % 32;
-
-      for (size_t i = 0; i < fullDwords; i++)
-        m_dwords[i] = std::numeric_limits<uint32_t>::max();
-
-      if (offset > 0)
-        m_dwords[fullDwords] = (1u << offset) - 1;
+      std::fill(m.begin(),m.end(),0);
+      uint32_t full=bits>>5,rem=bits&31;
+      for(uint32_t i=0;i<full;++i) m[i]=0xFFFFFFFFu;
+      if(rem&&full<m.size()) m[full]=(1u<<rem)-1u;
     }
-
   private:
-
-    std::vector<uint32_t> m_dwords;
-    uint32_t              m_bitCount = 0;
-
+    std::vector<uint32_t> m;
+    uint32_t bits_=0;
   };
 
+  /*============================================================================
+   * 10. BitMask iterator helper
+   *==========================================================================*/
   template<typename T>
   class BitMask {
-
   public:
-
     class iterator {
+      T mask, bit=0;
+      DXVK_FORCE_INLINE void next(){bit=mask? bsf(mask):0;}
     public:
-      using iterator_category = std::input_iterator_tag;
-      using value_type = T;
-      using difference_type = T;
-      using pointer = const T*;
-      using reference = T;
-
-      explicit iterator(T flags)
-        : m_mask(flags) { }
-
-      iterator& operator ++ () {
-        m_mask &= m_mask - 1;
-        return *this;
-      }
-
-      iterator operator ++ (int) {
-        iterator retval = *this;
-        m_mask &= m_mask - 1;
-        return retval;
-      }
-
-      T operator * () const {
-        return bsf(m_mask);
-      }
-
-      bool operator == (iterator other) const { return m_mask == other.m_mask; }
-      bool operator != (iterator other) const { return m_mask != other.m_mask; }
-
-    private:
-
-      T m_mask;
-
+      using iterator_category=std::input_iterator_tag;
+      using value_type=T; using difference_type=T;
+      explicit iterator(T m):mask(m){next();}
+      iterator& operator++(){mask&=(mask-1); next(); return *this;}
+      iterator operator++(int){auto t=*this;++(*this); return t;}
+      T operator*()const{return bit;}
+      bool operator==(iterator o)const{return mask==o.mask;}
+      bool operator!=(iterator o)const{return mask!=o.mask;}
     };
 
-    BitMask()
-      : m_mask(0) { }
-
-    explicit BitMask(T n)
-      : m_mask(n) { }
-
-    iterator begin() {
-      return iterator(m_mask);
-    }
-
-    iterator end() {
-      return iterator(0);
-    }
-
-  private:
-
-    T m_mask;
-
+    BitMask() : m(0) {}
+    explicit BitMask(T v) : m(v) {}
+    iterator begin(){return iterator(m);}
+    iterator end(){return iterator(0);}
+    private: T m;
   };
 
-
-  /**
-   * \brief Encodes float as fixed point
-   *
-   * Rounds away from zero. If this is not suitable for
-   * certain use cases, implement round to nearest even.
-   * \tparam T Integer type, may be signed
-   * \tparam I Integer bits
-   * \tparam F Fractional bits
-   * \param n Float to encode
-   * \returns Encoded fixed-point value
-   */
-  template<typename T, int32_t I, int32_t F>
-  T encodeFixed(float n) {
-    if (n != n)
-      return 0u;
-
-    n *= float(1u << F);
-
+  /*============================================================================
+   * 11. Fixed-point helpers
+   *==========================================================================*/
+  template<typename T,int32_t I,int32_t F>
+  DXVK_FORCE_INLINE T encodeFixed(float n){
+    static_assert(I>=0&&F>=0&&I+F<=int32_t(sizeof(T)*8));
+    if(std::isnan(n)) return 0;
+    const float scale=float(1u<<F);
     if constexpr (std::is_signed_v<T>) {
-      n = std::max(n, -float(1u << (I + F - 1u)));
-      n = std::min(n,  float(1u << (I + F - 1u)) - 1.0f);
-      n += n < 0.0f ? -0.5f : 0.5f;
+      const float hi=float((1ull<<(I+F-1))-1), lo=-float(1ull<<(I+F-1));
+      n = dxvk::clamp(n*scale, lo, hi);
+      n += n<0 ? -0.5f : 0.5f;
     } else {
-      n = std::max(n, 0.0f);
-      n = std::min(n, float(1u << (I + F)) - 1.0f);
-      n += 0.5f;
+      const float hi=float((1ull<<(I+F))-1);
+      n = dxvk::clamp(n*scale, 0.f, hi)+0.5f;
     }
-
-    T result = T(n);
-
-    if constexpr (std::is_signed_v<T>)
-      result &= ((T(1u) << (I + F)) - 1u);
-
-    return result;
-  }
-
-
-  /**
-   * \brief Decodes fixed-point integer to float
-   *
-   * \tparam T Integer type, may be signed
-   * \tparam I Integer bits
-   * \tparam F Fractional bits
-   * \param n Number to decode
-   * \returns Decoded  number
-   */
-  template<typename T, int32_t I, int32_t F>
-  float decodeFixed(T n) {
-    // Sign-extend as necessary
-    if constexpr (std::is_signed_v<T>)
-      n -= (n & (T(1u) << (I + F - 1u))) << 1u;
-
-    return float(n) / float(1u << F);
-  }
-
-
-  /**
-   * \brief Inserts one null bit after each bit
-   */
-  inline uint32_t split2(uint32_t c) {
-    c = (c ^ (c << 8u)) & 0x00ff00ffu;
-    c = (c ^ (c << 4u)) & 0x0f0f0f0fu;
-    c = (c ^ (c << 2u)) & 0x33333333u;
-    c = (c ^ (c << 1u)) & 0x55555555u;
-    return c;
-  }
-
-
-  /**
-   * \brief Inserts two null bits after each bit
-   */
-  inline uint64_t split3(uint64_t c) {
-    c = (c | c << 32u) & 0x001f00000000ffffull;
-    c = (c | c << 16u) & 0x001f0000ff0000ffull;
-    c = (c | c <<  8u) & 0x100f00f00f00f00full;
-    c = (c | c <<  4u) & 0x10c30c30c30c30c3ull;
-    c = (c | c <<  2u) & 0x1249249249249249ull;
-    return c;
+    return static_cast<T>(n);
   }
 
-
-  /**
-   * \brief Interleaves bits from two integers
-   *
-   * Both numbers must fit into 16 bits.
-   * \param [in] x X coordinate
-   * \param [in] y Y coordinate
-   * \returns Morton code of x and y
-   */
-  inline uint32_t interleave(uint16_t x, uint16_t y) {
-    return split2(x) | (split2(y) << 1u);
+  template<typename T,int32_t I,int32_t F>
+  DXVK_FORCE_INLINE float decodeFixed(T v){
+    if constexpr(std::is_signed_v<T>)
+      v = static_cast<T>(v<<(sizeof(T)*8-I-F))>>(sizeof(T)*8-I-F);
+    return float(v)/float(1u<<F);
+  }
+
+  /*============================================================================
+   * 12. Morton helpers
+   *==========================================================================*/
+  DXVK_FORCE_INLINE uint32_t split2(uint32_t x){
+    x=(x|(x<<8)) &0x00FF00FFu;
+    x=(x|(x<<4)) &0x0F0F0F0Fu;
+    x=(x|(x<<2)) &0x33333333u;
+    x=(x|(x<<1)) &0x55555555u;
+    return x;
+  }
+  DXVK_FORCE_INLINE uint64_t split3(uint64_t x){
+    x=(x|(x<<32))&0x001F00000000FFFFull;
+    x=(x|(x<<16))&0x001F0000FF0000FFull;
+    x=(x|(x<< 8))&0x100F00F00F00F00Full;
+    x=(x|(x<< 4))&0x10C30C30C30C30C3ull;
+    x=(x|(x<< 2))&0x1249249249249249ull;
+    return x;
+  }
+
+  DXVK_FORCE_INLINE uint32_t interleave(uint16_t x,uint16_t y){
+    #if defined(__BMI2__) && defined(DXVK_ARCH_X86)
+    return _pdep_u32(x,0x55555555u)|_pdep_u32(y,0xAAAAAAAAu);
+    #else
+    return split2(x)|(split2(y)<<1u);
+    #endif
   }
-
-
-  /**
-   * \brief Interleaves bits from three integers
-   *
-   * All three numbers must fit into 16 bits.
-   */
-  inline uint64_t interleave(uint16_t x, uint16_t y, uint16_t z) {
-    return split3(x) | (split3(y) << 1u) | (split3(z) << 2u);
+  DXVK_FORCE_INLINE uint64_t interleave(uint16_t x,uint16_t y,uint16_t z){
+    #if defined(__BMI2__) && defined(DXVK_ARCH_X86_64)
+    return _pdep_u64(x,0x1249249249249249ull)
+    | _pdep_u64(y,0x2492492492492492ull)
+    | _pdep_u64(z,0x4924924924924924ull);
+    #else
+    return split3(x)|(split3(y)<<1u)|(split3(z)<<2u);
+    #endif
   }
 
-
-  /**
-   * \brief 48-bit integer storage type
-   */
-  struct uint48_t {
-    explicit uint48_t(uint64_t n)
-    : a(uint16_t(n)), b(uint16_t(n >> 16)), c(uint16_t(n >> 32)) { }
-
-    uint16_t a;
-    uint16_t b;
-    uint16_t c;
-
-    explicit operator uint64_t () const {
-      // GCC generates worse code if we promote to uint64 directly
-      uint32_t lo = uint32_t(a) | (uint32_t(b) << 16);
-      return uint64_t(lo) | (uint64_t(c) << 32);
+  /*============================================================================
+   * 13. uint48_t helper
+   *==========================================================================*/
+  struct uint48_t{
+    uint16_t a,b,c;
+    explicit uint48_t(uint64_t v):a(v),b(v>>16),c(v>>32){}
+    explicit operator uint64_t()const{
+      uint32_t lo=uint32_t(a)|(uint32_t(b)<<16);
+      return uint64_t(lo)|(uint64_t(c)<<32);
     }
   };
 
-}
+} /* namespace dxvk::bit */
