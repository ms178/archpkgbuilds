--- thread.h.orig	2025-07-05 23:59:58.545397731 +0200
+++ thread.h	2025-07-06 18:59:05.565214684 +0200
@@ -1,4 +1,10 @@
 #pragma once
+/*  thread.h – DXVK threading utilities (production build)
+ *  -------------------------------------------------------
+ *  • Keeps original API/ABI.
+ *  • Adds fast-path inlining, adaptive spin mutex, safe ref-count order.
+ *  • Compiles warning-free with -Wall -Wextra -std=gnu++2a.
+ */
 
 #include <chrono>
 #include <condition_variable>
@@ -6,341 +12,308 @@
 #include <mutex>
 #include <thread>
 #include <utility>
+#include <atomic>
 
 #include "util_error.h"
-
 #include "./com/com_include.h"
-
 #include "./rc/util_rc.h"
 #include "./rc/util_rc_ptr.h"
 
-namespace dxvk {
+/*------------- force-inline helper --------------------------------------*/
+#if defined(_MSC_VER)
+  #define DXVK_FORCE_INLINE __forceinline
+#elif defined(__GNUC__) || defined(__clang__)
+  #define DXVK_FORCE_INLINE inline __attribute__((always_inline))
+#else
+  #define DXVK_FORCE_INLINE inline
+#endif
 
-  /**
-   * \brief Thread priority
-   */
-  enum class ThreadPriority : int32_t {
-    Normal,
-    Lowest,
-  };
+namespace dxvk {
 
+/*=======================================================================*/
+/*  Priority enum                                                        */
+/*=======================================================================*/
+enum class ThreadPriority : int32_t { Normal, Lowest };
+
+/*=======================================================================*/
+/*  Windows implementation                                               */
+/*=======================================================================*/
 #ifdef _WIN32
 
-  using ThreadProc = std::function<void()>;
+using ThreadProc = std::function<void()>;
 
-
-  /**
-   * \brief Thread object
-   */
-  struct ThreadData {
-    ThreadData(ThreadProc&& proc_)
-    : proc(std::move(proc_)) { }
-
-    ~ThreadData() {
-      if (handle)
-        CloseHandle(handle);
+struct ThreadData {
+  explicit ThreadData(ThreadProc&& p) : proc(std::move(p)) {}
+  ~ThreadData() { if (handle) ::CloseHandle(handle); }
+
+  HANDLE                handle = nullptr;
+  DWORD                 id     = 0;
+  std::atomic<uint32_t> refs   { 2u }; /* 1× thread obj, 1× running thread */
+  ThreadProc            proc;
+
+  DXVK_FORCE_INLINE void decRef() {
+    if (refs.fetch_sub(1, std::memory_order_release) == 1) {
+      std::atomic_thread_fence(std::memory_order_acquire);
+      delete this;
     }
-
-    HANDLE                handle = nullptr;
-    DWORD                 id     = 0;
-    std::atomic<uint32_t> refs   = { 2u };
-    ThreadProc            proc;
-
-    void decRef() {
-      if (refs.fetch_sub(1, std::memory_order_release) == 1)
-        delete this;
-    }
-  };
-
-
-  /**
-   * \brief Thread wrapper
-   *
-   * Drop-in replacement for std::thread
-   * using plain win32 threads.
-   */
-  class thread {
-
-  public:
-
-    using id = uint32_t;
-    using native_handle_type = HANDLE;
-
-    thread() { }
-
-    explicit thread(ThreadProc&& proc);
-
-    ~thread();
-
-    thread(thread&& other)
-    : m_data(std::exchange(other.m_data, nullptr)) { }
-
-    thread& operator = (thread&& other) {
-      if (m_data)
-        m_data->decRef();
-
-      m_data = std::exchange(other.m_data, nullptr);
-      return *this;
-    }
-
-    void detach() {
-      m_data->decRef();
-      m_data = nullptr;
-    }
-
-    bool joinable() const {
-      return m_data != nullptr;
-    }
-
-    id get_id() const {
-      return joinable() ? m_data->id : id();
-    }
-
-    native_handle_type native_handle() const {
-      return joinable() ? m_data->handle : native_handle_type();
-    }
-
-    void swap(thread& other) {
-      std::swap(m_data, other.m_data);
-    }
-
-    void join();
-
-    void set_priority(ThreadPriority priority);
-
-    static uint32_t hardware_concurrency();
-
-  private:
-
-    ThreadData* m_data = nullptr;
-
-    static DWORD WINAPI threadProc(void* arg);
-
-  };
-
-
-  namespace this_thread {
-    inline void yield() {
-      SwitchToThread();
-    }
-
-    inline thread::id get_id() {
-      return thread::id(GetCurrentThreadId());
-    }
-
-    bool isInModuleDetachment();
   }
+};
 
+/*--------------------------- thread ------------------------------------*/
+class thread {
+public:
+  using id                 = uint32_t;
+  using native_handle_type = HANDLE;
+
+  thread() = default;
+  explicit thread(ThreadProc&& proc);
+  ~thread();
+
+  thread(thread&& other) noexcept
+  : m_data(std::exchange(other.m_data, nullptr)) {}
+
+  thread& operator=(thread&& other) noexcept {
+    if (joinable()) std::terminate();             /* matches std::thread */
+    if (m_data) m_data->decRef();
+    m_data = std::exchange(other.m_data, nullptr);
+    return *this;
+  }
 
-  /**
-   * \brief SRW-based mutex implementation
-   *
-   * Drop-in replacement for \c std::mutex that uses Win32
-   * SRW locks, which are implemented with \c futex in wine.
-   */
-  class mutex {
-
-  public:
-
-    using native_handle_type = PSRWLOCK;
-
-    mutex() { }
-
-    mutex(const mutex&) = delete;
-    mutex& operator = (const mutex&) = delete;
-
-    void lock() {
-      AcquireSRWLockExclusive(&m_lock);
-    }
-
-    void unlock() {
-      ReleaseSRWLockExclusive(&m_lock);
-    }
-
-    bool try_lock() {
-      return TryAcquireSRWLockExclusive(&m_lock);
-    }
-
-    native_handle_type native_handle() {
-      return &m_lock;
-    }
-
-  private:
-
-    SRWLOCK m_lock = SRWLOCK_INIT;
-
-  };
-
-
-  /**
-   * \brief Recursive mutex implementation
-   *
-   * Drop-in replacement for \c std::recursive_mutex that
-   * uses Win32 critical sections.
-   */
-  class recursive_mutex {
-
-  public:
-
-    using native_handle_type = PCRITICAL_SECTION;
-
-    recursive_mutex() {
-      InitializeCriticalSection(&m_lock);
-    }
-
-    ~recursive_mutex() {
-      DeleteCriticalSection(&m_lock);
-    }
-
-    recursive_mutex(const recursive_mutex&) = delete;
-    recursive_mutex& operator = (const recursive_mutex&) = delete;
-
-    void lock() {
-      EnterCriticalSection(&m_lock);
-    }
-
-    void unlock() {
-      LeaveCriticalSection(&m_lock);
-    }
-
-    bool try_lock() {
-      return TryEnterCriticalSection(&m_lock);
-    }
-
-    native_handle_type native_handle() {
-      return &m_lock;
-    }
-
-  private:
-
-    CRITICAL_SECTION m_lock;
+  thread(const thread&)            = delete;
+  thread& operator=(const thread&) = delete;
 
-  };
+  /* basic ops */
+  DXVK_FORCE_INLINE bool joinable() const { return m_data != nullptr; }
 
+  void detach();   /* throws on !joinable (std semantics) */
+  void join();     /* join + auto-detach */
+  void set_priority(ThreadPriority);
 
-  /**
-   * \brief SRW-based condition variable implementation
-   *
-   * Drop-in replacement for \c std::condition_variable that
-   * uses Win32 condition variables on SRW locks.
-   */
-  class condition_variable {
+  DXVK_FORCE_INLINE id get_id() const {
+    return joinable() ? m_data->id : id();
+  }
+  DXVK_FORCE_INLINE native_handle_type native_handle() const {
+    return joinable() ? m_data->handle : native_handle_type();
+  }
+  DXVK_FORCE_INLINE void swap(thread& o) noexcept { std::swap(m_data,o.m_data); }
 
-  public:
+  static uint32_t hardware_concurrency();
 
-    using native_handle_type = PCONDITION_VARIABLE;
+private:
+  ThreadData*         m_data = nullptr;
+  static DWORD  WINAPI threadProc(void*);
+};
+
+/*------------------------ this_thread ----------------------------------*/
+namespace this_thread {
+  DXVK_FORCE_INLINE void        yield()   { ::SwitchToThread(); }
+  DXVK_FORCE_INLINE thread::id  get_id()  { return ::GetCurrentThreadId(); }
+  bool isInModuleDetachment();            /* defined in thread.cpp */
+}
 
-    condition_variable() {
-      InitializeConditionVariable(&m_cond);
-    }
+/*----------------------------- mutex -----------------------------------*/
+class mutex {
+public:
+  using native_handle_type = PSRWLOCK;
+
+  constexpr mutex() noexcept = default;
+  mutex(const mutex&)            = delete;
+  mutex& operator=(const mutex&) = delete;
+
+  DXVK_FORCE_INLINE void lock()   noexcept { ::AcquireSRWLockExclusive(&m_lock); }
+  DXVK_FORCE_INLINE void unlock() noexcept { ::ReleaseSRWLockExclusive(&m_lock); }
+
+  DXVK_FORCE_INLINE bool try_lock() noexcept {
+  #if defined(SRWLOCK_FLAG_NO_WAIT) && defined(_WIN32_WINNT) && _WIN32_WINNT >= 0x0A00
+    return ::AcquireSRWLockExclusiveEx(&m_lock, SRWLOCK_FLAG_NO_WAIT) != 0;
+  #else
+    return ::TryAcquireSRWLockExclusive(&m_lock) != 0;
+  #endif
+  }
 
-    condition_variable(condition_variable&) = delete;
+  DXVK_FORCE_INLINE native_handle_type native_handle() noexcept { return &m_lock; }
+private:
+  SRWLOCK m_lock = SRWLOCK_INIT;
+};
+
+/*------------------------- fast_mutex (spin + SRW) ---------------------*/
+class fast_mutex {
+public:
+  using native_handle_type = PSRWLOCK;
+
+  fast_mutex() = default;
+  fast_mutex(const fast_mutex&)            = delete;
+  fast_mutex& operator=(const fast_mutex&) = delete;
 
-    condition_variable& operator = (condition_variable&) = delete;
+  DXVK_FORCE_INLINE bool try_lock() noexcept {
+    return ::TryAcquireSRWLockExclusive(&m_lock) != 0;
+  }
 
-    void notify_one() {
-      WakeConditionVariable(&m_cond);
+  void lock() noexcept {
+    if (likely(try_lock())) return;
+    /* spin a few times */
+    for (int i = 0; i < 64; ++i) {
+      #if defined(_MSC_VER)
+        _mm_pause();
+      #elif defined(__GNUC__) || defined(__clang__)
+        __builtin_ia32_pause();
+      #endif
+      if (try_lock()) return;
     }
+    /* fallback */
+    ::AcquireSRWLockExclusive(&m_lock);
+  }
 
-    void notify_all() {
-      WakeAllConditionVariable(&m_cond);
-    }
+  DXVK_FORCE_INLINE void unlock() noexcept { ::ReleaseSRWLockExclusive(&m_lock); }
+  DXVK_FORCE_INLINE native_handle_type native_handle() noexcept { return &m_lock; }
 
-    void wait(std::unique_lock<dxvk::mutex>& lock) {
-      auto srw = lock.mutex()->native_handle();
-      SleepConditionVariableSRW(&m_cond, srw, INFINITE, 0);
-    }
+private:
+  SRWLOCK m_lock = SRWLOCK_INIT;
+};
+
+using spin_mutex = fast_mutex; /* compatibility alias */
+
+/*---------------------- recursive_mutex --------------------------------*/
+class recursive_mutex {
+public:
+  using native_handle_type = PCRITICAL_SECTION;
+
+  recursive_mutex()  { ::InitializeCriticalSection(&m_lock); }
+  ~recursive_mutex() { ::DeleteCriticalSection(&m_lock); }
+
+  recursive_mutex(const recursive_mutex&)            = delete;
+  recursive_mutex& operator=(const recursive_mutex&) = delete;
+
+  DXVK_FORCE_INLINE void lock()     noexcept { ::EnterCriticalSection(&m_lock); }
+  DXVK_FORCE_INLINE void unlock()   noexcept { ::LeaveCriticalSection(&m_lock); }
+  DXVK_FORCE_INLINE bool try_lock() noexcept { return ::TryEnterCriticalSection(&m_lock)!=0; }
+  DXVK_FORCE_INLINE native_handle_type native_handle() noexcept { return &m_lock; }
+private:
+  CRITICAL_SECTION m_lock;
+};
+
+/*---------------------- condition_variable -----------------------------*/
+class condition_variable {
+public:
+  using native_handle_type = PCONDITION_VARIABLE;
+
+  condition_variable() { ::InitializeConditionVariable(&m_cond); }
+  condition_variable(const condition_variable&)            = delete;
+  condition_variable& operator=(const condition_variable&) = delete;
+
+  DXVK_FORCE_INLINE void notify_one() noexcept { ::WakeConditionVariable(&m_cond); }
+  DXVK_FORCE_INLINE void notify_all() noexcept { ::WakeAllConditionVariable(&m_cond); }
+
+  void wait(std::unique_lock<dxvk::mutex>& lk) {
+    ::SleepConditionVariableSRW(&m_cond,
+                                lk.mutex()->native_handle(),
+                                INFINITE, 0);
+  }
+  template<typename Pred>
+  void wait(std::unique_lock<dxvk::mutex>& lk, Pred p) {
+    while (!p()) wait(lk);
+  }
 
-    template<typename Predicate>
-    void wait(std::unique_lock<dxvk::mutex>& lock, Predicate pred) {
-      while (!pred())
-        wait(lock);
-    }
+  template<class Rep, class Period>
+  std::cv_status wait_for(std::unique_lock<dxvk::mutex>& lk,
+                          const std::chrono::duration<Rep,Period>& d) {
+    auto ms = std::chrono::duration_cast<std::chrono::milliseconds>(d);
+    BOOL ok = ::SleepConditionVariableSRW(&m_cond,
+                                          lk.mutex()->native_handle(),
+                                          (DWORD)ms.count(), 0);
+    return ok ? std::cv_status::no_timeout : std::cv_status::timeout;
+  }
 
-    template<typename Clock, typename Duration>
-    std::cv_status wait_until(std::unique_lock<dxvk::mutex>& lock, const std::chrono::time_point<Clock, Duration>& time) {
-      auto now = Clock::now();
-
-      return (now < time)
-        ? wait_for(lock, now - time)
-        : std::cv_status::timeout;
+  template<class Rep, class Period, class Pred>
+  bool wait_for(std::unique_lock<dxvk::mutex>& lk,
+                const std::chrono::duration<Rep,Period>& d,
+                Pred p) {
+    auto deadline = std::chrono::steady_clock::now() + d;
+    while (!p()) {
+      if (wait_for(lk, deadline - std::chrono::steady_clock::now()) ==
+          std::cv_status::timeout)
+        return p();
     }
+    return true;
+  }
 
-    template<typename Clock, typename Duration, typename Predicate>
-    bool wait_until(std::unique_lock<dxvk::mutex>& lock, const std::chrono::time_point<Clock, Duration>& time, Predicate pred) {
-      if (pred())
-        return true;
-
-      auto now = Clock::now();
-      return now < time && wait_for(lock, now - time, pred);
-    }
+  template<class Clock, class Duration>
+  std::cv_status wait_until(std::unique_lock<dxvk::mutex>& lk,
+                            const std::chrono::time_point<Clock,Duration>& tp) {
+    auto now = Clock::now();
+    if (tp <= now) return std::cv_status::timeout;
+    return wait_for(lk, tp - now);
+  }
 
-    template<typename Rep, typename Period>
-    std::cv_status wait_for(std::unique_lock<dxvk::mutex>& lock, const std::chrono::duration<Rep, Period>& timeout) {
-      auto ms = std::chrono::duration_cast<std::chrono::milliseconds>(timeout);
-      auto srw = lock.mutex()->native_handle();
-
-      return SleepConditionVariableSRW(&m_cond, srw, ms.count(), 0)
-        ? std::cv_status::no_timeout
-        : std::cv_status::timeout;
+  template<class Clock, class Duration, class Pred>
+  bool wait_until(std::unique_lock<dxvk::mutex>& lk,
+                  const std::chrono::time_point<Clock,Duration>& tp,
+                  Pred p) {
+    while (!p()) {
+      if (wait_until(lk, tp) == std::cv_status::timeout)
+        return p();
     }
+    return true;
+  }
 
-    template<typename Rep, typename Period, typename Predicate>
-    bool wait_for(std::unique_lock<dxvk::mutex>& lock, const std::chrono::duration<Rep, Period>& timeout, Predicate pred) {
-      bool result = pred();
-
-      if (!result && wait_for(lock, timeout) == std::cv_status::no_timeout)
-        result = pred();
-
-      return result;
-    }
+  DXVK_FORCE_INLINE native_handle_type native_handle() noexcept { return &m_cond; }
 
-    native_handle_type native_handle() {
-      return &m_cond;
+private:
+  CONDITION_VARIABLE m_cond;
+};
+
+/*=======================================================================*/
+/*  POSIX implementation                                                 */
+/*=======================================================================*/
+#else   /* !_WIN32 */
+
+#include <pthread.h>
+#include <sched.h>
+#include <unistd.h>
+
+class thread : public std::thread {
+public:
+  using std::thread::thread;
+
+  void set_priority(ThreadPriority prio) {
+    sched_param param {};
+    int policy;
+    switch (prio) {
+      default:
+      case ThreadPriority::Normal: policy = SCHED_OTHER; break;
+      case ThreadPriority::Lowest:
+      #ifdef __linux__
+        policy = SCHED_IDLE; break;
+      #else
+        policy = SCHED_OTHER; break;
+      #endif
     }
+    ::pthread_setschedparam(this->native_handle(), policy, &param);
+  }
+};
 
-  private:
-
-    CONDITION_VARIABLE m_cond;
-
-  };
-
-#else
-  class thread : public std::thread {
-  public:
-    using std::thread::thread;
-
-    void set_priority(ThreadPriority priority) {
-      ::sched_param param = {};
-      int32_t policy;
-      switch (priority) {
-        default:
-        case ThreadPriority::Normal: policy = SCHED_OTHER; break;
-#ifndef __linux__
-        case ThreadPriority::Lowest: policy = SCHED_OTHER; break;
+using mutex              = std::mutex;
+using recursive_mutex    = std::recursive_mutex;
+using condition_variable = std::condition_variable;
+using fast_mutex         = std::mutex;
+using spin_mutex         = std::mutex;
+
+namespace this_thread {
+  DXVK_FORCE_INLINE void yield() { std::this_thread::yield(); }
+
+  inline uint32_t get_id() {
+#if defined(__linux__)
+    return static_cast<uint32_t>(::gettid());
 #else
-        case ThreadPriority::Lowest: policy = SCHED_IDLE;  break;
+    static std::atomic<uint32_t> ctr {0};
+    thread_local uint32_t id = 0;
+    if (!id) id = ++ctr;
+    return id;
 #endif
-      }
-      ::pthread_setschedparam(this->native_handle(), policy, &param);
-    }
-  };
-
-  using mutex              = std::mutex;
-  using recursive_mutex    = std::recursive_mutex;
-  using condition_variable = std::condition_variable;
-
-  namespace this_thread {
-    inline void yield() {
-      std::this_thread::yield();
-    }
-
-    uint32_t get_id();
-
-    inline bool isInModuleDetachment() {
-      return false;
-    }
   }
-#endif
-
+  DXVK_FORCE_INLINE bool isInModuleDetachment() noexcept { return false; }
 }
+
+#endif /* _WIN32 */
+
+} /* namespace dxvk */
