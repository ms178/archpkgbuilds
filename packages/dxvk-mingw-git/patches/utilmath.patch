--- util_math.h.orig	2025-07-06 19:24:27.969061208 +0200
+++ util_math.h	2025-07-06 19:29:20.340769126 +0200
@@ -1,40 +1,106 @@
 #pragma once
+/*
+ * util_math.h ── DXVK small math helpers
+ * --------------------------------------
+ * • API/ABI identical to original header.
+ * • Added:
+ *      – high-precision π constants (double / float / long double)
+ *      – branch-hinted clamp()
+ *      – power-of-two-aware align/alignDown
+ *      – NaN-safe fclamp()
+ *      – divCeil()
+ * • Provides dxvk::spirv::pi  and  dxvk::spirv::pi_f so that
+ *   spirv_module.cpp/h compile unchanged.
+ * • All functions are constexpr or force-inlined ⇒ zero runtime cost.
+ */
 
 #include <cmath>
+#include <cstdint>
+#include <type_traits>
+
+/* -------------------------------------------------------------------- *
+ *  force-inline & branch-hint helpers
+ * ------------------------------------------------------------------ */
+#if defined(_MSC_VER)
+#define DXVK_FORCE_INLINE __forceinline
+#elif defined(__GNUC__) || defined(__clang__)
+#define DXVK_FORCE_INLINE inline __attribute__((always_inline))
+#else
+#define DXVK_FORCE_INLINE inline
+#endif
+
+#if defined(__GNUC__) || defined(__clang__)
+#define DXVK_LIKELY(x)   __builtin_expect(!!(x), 1)
+#define DXVK_UNLIKELY(x) __builtin_expect(!!(x), 0)
+#else
+#define DXVK_LIKELY(x)   (x)
+#define DXVK_UNLIKELY(x) (x)
+#endif
 
 namespace dxvk {
-  
-  constexpr size_t CACHE_LINE_SIZE = 64;
-  constexpr double pi = 3.14159265359;
 
+  /* -------------------------------------------------------------------- *
+   *  constants
+   * ------------------------------------------------------------------ */
+  constexpr std::size_t CACHE_LINE_SIZE = 64;
+
+  /* π with full IEEE-754 precision (long double) and convenient aliases */
+  inline constexpr long double pi_ld = 3.141592653589793238462643383279502884L;
+  inline constexpr double      pi    = static_cast<double>(pi_ld);
+  inline constexpr float       pi_f  = static_cast<float>(pi_ld);
+
+  /* Provide π inside dxvk::spirv namespace for SPIR-V code generation */
+  namespace spirv {
+    inline constexpr double pi   = dxvk::pi;
+    inline constexpr float  pi_f = dxvk::pi_f;
+  }
+
+  /* -------------------------------------------------------------------- *
+   *  clamp – branch-hinted, constexpr
+   * ------------------------------------------------------------------ */
   template<typename T>
-  constexpr T clamp(T n, T lo, T hi) {
-    if (n < lo) return lo;
-    if (n > hi) return hi;
-    return n;
+  DXVK_FORCE_INLINE constexpr T clamp(T v, T lo, T hi) {
+    return (DXVK_LIKELY(v >= lo))
+    ? (DXVK_LIKELY(v <= hi) ? v : hi)
+    : lo;
   }
-  
+
+  /* -------------------------------------------------------------------- *
+   *  align / alignDown – power-of-two fast path
+   * ------------------------------------------------------------------ */
   template<typename T, typename U = T>
-  constexpr T align(T what, U to) {
-    return (what + to - 1) & ~(to - 1);
+  DXVK_FORCE_INLINE constexpr T align(T value, U to) {
+    static_assert(std::is_integral_v<T> && std::is_integral_v<U>,
+                  "align requires integral types");
+    return (to & (to - 1)) == 0            /* power-of-two? */
+    ? static_cast<T>((value + to - 1) & ~(to - 1))
+    : static_cast<T>((value + to - 1) / to * to);
   }
 
   template<typename T, typename U = T>
-  constexpr T alignDown(T what, U to) {
-    return (what / to) * to;
+  DXVK_FORCE_INLINE constexpr T alignDown(T value, U to) {
+    static_assert(std::is_integral_v<T> && std::is_integral_v<U>,
+                  "alignDown requires integral types");
+    return (to & (to - 1)) == 0
+    ? static_cast<T>(value & ~(to - 1))
+    : static_cast<T>(value / to * to);
   }
 
-  // Equivalent of std::clamp for use with floating point numbers
-  // Handles (-){INFINITY,NAN} cases.
-  // Will return min in cases of NAN, etc.
-  inline float fclamp(float value, float min, float max) {
-    return std::fmin(
-      std::fmax(value, min), max);
+  /* -------------------------------------------------------------------- *
+   *  fclamp – NaN-safe float clamp
+   * ------------------------------------------------------------------ */
+  DXVK_FORCE_INLINE float fclamp(float v, float lo, float hi) {
+    if (DXVK_UNLIKELY(std::isnan(v))) return lo;  /* NaN → lo */
+      return std::fmin(std::fmax(v, lo), hi);
   }
 
+  /* -------------------------------------------------------------------- *
+   *  divCeil – ceiling integer division
+   * ------------------------------------------------------------------ */
   template<typename T>
-  inline T divCeil(T dividend, T divisor) {
+  DXVK_FORCE_INLINE constexpr T divCeil(T dividend, T divisor) {
+    static_assert(std::is_integral_v<T>, "divCeil requires integral type");
     return (dividend + divisor - 1) / divisor;
   }
-  
-}
+
+} // namespace dxvk
