pkgname=gmp
pkgver=6.3.0
pkgrel=3.1
pkgdesc='A free library for arbitrary precision arithmetic'
arch=(x86_64)
url='https://gmplib.org/'
depends=(gcc-libs sh)
makedepends=(clang llvm lld git)
license=(LGPL3 GPL)
source=(https://gmplib.org/download/gmp/gmp-$pkgver.tar.lz{,.sig})
sha256sums=('2c7f4f0d370801b2849c48c9ef3f59553b5f1d3791d070cffb04599f9fc67b41'
            'SKIP')
validpgpkeys=('343C2FF0FBEE5EC2EDBEF399F3599FF828C67298')   # Niels MÃ¶ller
options=(strip)

prepare() {
  cd $pkgname-$pkgver
  # Ensure we use clang for compilation
  export CC=clang
  export CXX=clang++
  export CC_LD=lld
  export CXX_LD=lld
  export LDFLAGS="-fuse-ld=lld"
  export AR=llvm-ar
  export NM=llvm-nm
  export STRIP=llvm-strip
  export OBJCOPY=llvm-objcopy
  export OBJDUMP=llvm-objdump
  export READELF=llvm-readelf
  export RANLIB=llvm-ranlib
  export HOSTCC=clang
  export HOSTCXX=clang++
  export HOSTAR=llvm-ar
}

build() {
  cd $pkgname-$pkgver

  # Setup cleanup trap (exclude $srcdir/cspgo to preserve cs.profdata)
  trap 'rm -rf "$srcdir/pgo"' EXIT

  # Create directory for PGO profiles
  mkdir -p "$srcdir/pgo"

  # Create directory for CS-PGO profiles
  mkdir -p "$srcdir/cspgo"

  # Common additional flags for both instrumentation phases (compiler flags only)
  local _common_instrument_flags=" -g3 -fno-omit-frame-pointer -mllvm -vp-counters-per-site=10 -mllvm -runtime-counter-relocation -mllvm -enable-value-profiling"

  # --- Stage 1: Build with PGO instrumentation ---
  local _pgo_instrument_flags=" -fprofile-generate=$srcdir/pgo $_common_instrument_flags"
  local _original_cflags="$CFLAGS"
  local _original_cxxflags="$CXXFLAGS"
  local _original_ldflags="$LDFLAGS"
  # Apply PGO flags only to CFLAGS and CXXFLAGS, not LDFLAGS
  CFLAGS+=" $_pgo_instrument_flags"
  CXXFLAGS+=" $_pgo_instrument_flags"

  echo "CFLAGS for PGO instrumentation: $CFLAGS"
  echo "CXXFLAGS for PGO instrumentation: $CXXFLAGS"
  echo "LDFLAGS for PGO instrumentation: $LDFLAGS"

  ./configure --build=${CHOST} \
    --prefix=/usr \
    --enable-cxx

  make

  # Run tests to generate PGO profile data
  echo "Running tests to generate PGO profile data..."
  make check

  # Merge PGO profiles
  echo "Merging PGO profiles..."
  llvm-profdata merge -output="$srcdir/pgo/default.profdata" "$srcdir"/pgo/*.profraw

  # Clean up build directory for the next stage
  make distclean

  # --- Stage 2: Build with CS-PGO instrumentation ---
  local _cspgo_instrument_flags=" -fprofile-use=$srcdir/pgo/default.profdata -fcs-profile-generate=$srcdir/cspgo $_common_instrument_flags"
  # Apply CS-PGO flags only to CFLAGS and CXXFLAGS, not LDFLAGS
  CFLAGS="$_original_cflags $_cspgo_instrument_flags"
  CXXFLAGS="$_original_cxxflags $_cspgo_instrument_flags"
  LDFLAGS="$_original_ldflags"

  echo "CFLAGS for CS-PGO instrumentation: $CFLAGS"
  echo "CXXFLAGS for CS-PGO instrumentation: $CXXFLAGS"
  echo "LDFLAGS for CS-PGO instrumentation: $LDFLAGS"

  ./configure --build=${CHOST} \
    --prefix=/usr \
    --enable-cxx

  make

  # Run tests to generate CS-PGO profile data
  echo "Running tests to generate CS-PGO profile data..."
  make check

  # Merge CS-PGO profiles with PGO profiles
  echo "Merging CS-PGO profiles with PGO profiles..."
  llvm-profdata merge -output="$srcdir/cspgo/cs.profdata" "$srcdir/cspgo"/*.profraw "$srcdir/pgo/default.profdata"

  # Clean up build directory for the final stage
  make distclean

  # --- Stage 3: Build with merged CS-PGO data ---
  # Apply CS-PGO optimization flags only to CFLAGS and CXXFLAGS, not LDFLAGS
  CFLAGS="$_original_cflags -fprofile-use=$srcdir/cspgo/cs.profdata"
  CXXFLAGS="$_original_cxxflags -fprofile-use=$srcdir/cspgo/cs.profdata"
  LDFLAGS="$_original_ldflags"

  echo "CFLAGS for CS-PGO optimization: $CFLAGS"
  echo "CXXFLAGS for CS-PGO optimization: $CXXFLAGS"
  echo "LDFLAGS for CS-PGO optimization: $LDFLAGS"

  ./configure --build=${CHOST} \
    --prefix=/usr \
    --enable-cxx

  make
}

check() {
  # Run tests on the final optimized build
  cd "$srcdir/$pkgname-$pkgver"
  make check
}

package() {
  # Install from the source directory (final build)
  cd "$srcdir/$pkgname-$pkgver"
  make DESTDIR="${pkgdir}" install
}
