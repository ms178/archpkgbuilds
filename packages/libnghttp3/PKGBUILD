pkgname=libnghttp3
pkgver=1.9.0
pkgrel=2.4
pkgdesc="HTTP/3 library written in C"
url='https://github.com/ngtcp2/nghttp3'
arch=('x86_64')
license=('MIT')
provides=('libnghttp3.so')
depends=('glibc')
makedepends=('git' 'llvm' 'clang' 'openssl')
source=("https://github.com/ngtcp2/nghttp3/releases/download/v${pkgver}/nghttp3-${pkgver}.tar.xz"{,.asc})
sha256sums=('SKIP')

prepare() {
  cd nghttp3-${pkgver}
  autoreconf -vfi

  # Create PGO workload script   (outer delimiter must be unique)
cat > "$srcdir/pgo-workload.sh" << 'PGO_EOF'
#!/usr/bin/env bash
# nghttp3 / QPACK – comprehensive PGO workload (auto‑detects CLI options)

set -euo pipefail

WD=$1           # work‑directory
BD=$2           # directory containing example binaries
mkdir -p "$WD"
cd       "$WD"

##############################################################################
# Locate qpack binary
##############################################################################
QPACK="$BD/qpack"
[[ -x $QPACK ]] || QPACK="$BD/nghttp3-qpack"
[[ -x $QPACK ]] || { echo "qpack binary not found" >&2; exit 1; }

##############################################################################
# Inspect --help once and derive supported flags
##############################################################################
help=$("$QPACK" --help 2>&1 || true)

# verbose / stats flag (optional)
if   grep -q -- '--stat'    <<<"$help"; then VERB_FLAG=(--stat)
elif grep -q -- '--verbose' <<<"$help"; then VERB_FLAG=(--verbose)
elif grep -q -E '\s-v[ ,]'  <<<"$help"; then VERB_FLAG=(-v)
else VERB_FLAG=(); fi

# dynamic‑table capacity flag
if grep -q -- '--max-table-capacity' <<<"$help"; then
    CAP_FLAG_LONG='--max-table-capacity='
    cap_use() { roundtrip "$1" "${@:2}" "${CAP_FLAG_LONG}$3"; }
elif grep -q -E '\s-t[ ,]' <<<"$help"; then
    cap_use() { roundtrip "$1" "${@:2}" -t "$3"; }
else
    cap_use() { :; }   # option unsupported -> no‑op
fi

# blocked‑stream flag
if grep -q -- '--max-blocked-streams' <<<"$help"; then
    BLK_FLAG_LONG='--max-blocked-streams='
    blk_use() { roundtrip "$1" "${@:2}" "${BLK_FLAG_LONG}$3"; }
elif grep -q -E '\s-b[ ,]' <<<"$help"; then
    blk_use() { roundtrip "$1" "${@:2}" -b "$3"; }
else
    blk_use() { :; }
fi

##############################################################################
# Helper functions
##############################################################################
add() { printf '%s\t%s\n' "$2" "$3" >> "$1"; }      # file name value
roundtrip() {                                       # hdrfile [extra opts...]
  local f=$1; shift
  local base=${f%.*}
  "$QPACK" "$@" encode "$f" "$base.enc"
  "$QPACK" "$@" decode "$base.enc" "$base.dec" || true
}

random_hdr() {                                      # file lines
  local f=$1 n=$2; : >"$f"
  add "$f" :method GET; add "$f" :scheme https
  add "$f" :path "/rnd$RANDOM"; add "$f" :authority example.com
  for ((i=0;i<n;i++)); do
    printf 'x-r%02d\t' "$i" >>"$f"
    head -c $((RANDOM%64+4)) /dev/urandom | base64 -w0 >>"$f"
    echo >>"$f"
  done
}

##############################################################################
# Build deterministic header sets
##############################################################################
typical=typical.txt; : >"$typical"
add "$typical" :method GET
add "$typical" :scheme https
add "$typical" :path /index.html
add "$typical" :authority localhost:8443
add "$typical" accept \
 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'
add "$typical" accept-encoding 'gzip, deflate, br'
add "$typical" accept-language 'en-US,en;q=0.5'
add "$typical" user-agent 'Mozilla/5.0'

many=many.txt; : >"$many"
add "$many" :method GET; add "$many" :scheme https
add "$many" :path /many.html; add "$many" :authority localhost:8443
for i in {1..100}; do add "$many" "x-h$i" "$i"; done

huge=huge.txt; : >"$huge"
add "$huge" :method GET; add "$huge" :scheme https
add "$huge" :path /huge.html; add "$huge" :authority localhost:8443
{ printf 'x-big\t'; head -c 65536 </dev/zero | tr '\0' A; echo; } >>"$huge"

invalid=invalid.txt; : >"$invalid"
add "$invalid" :method GET; add "$invalid" :scheme https
add "$invalid" :path /bad.html; add "$invalid" :authority localhost:8443
printf 'x-bad\t\377\377\n' >>"$invalid"

# 30 random header files
for i in {1..30}; do random_hdr "rnd-$i.txt" $((RANDOM%150+1)); done

##############################################################################
# PASS 1 – deterministic feature matrix
##############################################################################
echo ">>> PASS 1"
for f in "$typical" "$many" "$huge"; do
  roundtrip "$f" "${VERB_FLAG[@]}"
  for cap in 0 256 1024 4096 16384; do cap_use "$f" "" "$cap"; done
  for blk in 0 1 8;                 do blk_use "$f" "" "$blk"; done
done
roundtrip "$invalid" || true

##############################################################################
# PASS 2 – parallel random headers
##############################################################################
echo ">>> PASS 2"
export QPACK; export -f roundtrip
find . -name 'rnd-*.txt' -print0 | \
  xargs -0 -n1 -P"$(nproc)" bash -c 'roundtrip "$1"' _

##############################################################################
# PASS 3 – encoder‑state evolution
##############################################################################
echo ">>> PASS 3"
for i in {1..200}; do
  cap=$(( (i*128)%16384 + 256 ))
  cap_use "$typical" "" "$cap"
done

echo "QPACK workload finished OK."
PGO_EOF

chmod +x "$srcdir/pgo-workload.sh"
}

build() {
  cd nghttp3-${pkgver}

  pgo_dir="$srcdir/pgo-data"
  mkdir -p "${pgo_dir}/standard" "${pgo_dir}/cs"

  orig_cflags="$CFLAGS"
  orig_cxxflags="$CXXFLAGS"
  orig_ldflags="$LDFLAGS"

  export CC=clang
  export CXX=clang++

  # Phase 1: standard instrumentation
  msg2 "== Building with standard PGO instrumentation"
  export CFLAGS="${orig_cflags} -fprofile-generate=${pgo_dir}/standard -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=128 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"
  export CXXFLAGS="${orig_cxxflags} -fprofile-generate=${pgo_dir}/standard -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=128 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"
  export LDFLAGS="${orig_ldflags} -fprofile-generate=${pgo_dir}/standard -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=128 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"

  ./configure --prefix=/usr
  make clean
  make
  make check || true

  msg2 "Running custom workload (standard)"
  mkdir -p "$srcdir/http3-test"
  "$srcdir/pgo-workload.sh" "$srcdir/http3-test" "$(pwd)/examples" || true
  llvm-profdata merge -output="${pgo_dir}/standard.profdata" "${pgo_dir}/standard/"

  # Phase 2: CS instrumentation
  msg2 "== Building with context-sensitive PGO instrumentation"
  export CFLAGS="${orig_cflags} -fprofile-use=${pgo_dir}/standard.profdata -fcs-profile-generate=${pgo_dir}/cs -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=128 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"
  export CXXFLAGS="${orig_cxxflags} -fprofile-use=${pgo_dir}/standard.profdata -fcs-profile-generate=${pgo_dir}/cs -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=128 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"
  export LDFLAGS="${orig_ldflags} -fprofile-use=${pgo_dir}/standard.profdata -fcs-profile-generate=${pgo_dir}/cs -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=128 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"

  ./configure --prefix=/usr
  make clean
  make
  make check || true

  msg2 "Running custom workload (CS)"
  rm -rf "$srcdir/http3-test"
  mkdir -p "$srcdir/http3-test"
  "$srcdir/pgo-workload.sh" "$srcdir/http3-test" "$(pwd)/examples" || true
  llvm-profdata merge -output="${pgo_dir}/merged.profdata" "${pgo_dir}/cs/" "${pgo_dir}/standard.profdata"

  # Phase 3: final optimized build
  msg2 "== Building final optimized version with PGO data"
  export CFLAGS="${orig_cflags} -fprofile-use=${pgo_dir}/merged.profdata"
  export CXXFLAGS="${orig_cxxflags} -fprofile-use=${pgo_dir}/merged.profdata"
  export LDFLAGS="${orig_ldflags} -fprofile-use=${pgo_dir}/merged.profdata"

  ./configure --prefix=/usr
  make clean
  make
}

check() {
  cd nghttp3-${pkgver}
  make check
}

package() {
  cd nghttp3-${pkgver}/lib
  make DESTDIR="${pkgdir}" install
  install -Dm644 ../COPYING -t "${pkgdir}/usr/share/licenses/${pkgname}"
}
