pkgname=lcms2-git
pkgver=2.16.r87.g2100e2e
pkgrel=1
pkgdesc="Small-footprint color management engine"
arch=('i686' 'x86_64')
url="https://www.littlecms.com/"
license=('MIT')
depends=('glibc' 'libtiff')
makedepends=('git' 'llvm')
provides=('lcms2' 'liblcms2.so=2-64')
conflicts=('lcms2')
options=('staticlibs' '!strip')
source=("git+https://github.com/mm2/Little-CMS.git")
sha256sums=('SKIP')

pkgver() {
  cd "Little-CMS"
  git describe --long --tags | sed 's/^lcms//;s/\([^-]*-g\)/r\1/;s/-/./g'
}

cleanup_profiles() {
  rm -f "$srcdir"/*.profraw
  rm -rf "$srcdir/bolt_profile"
  rm -rf "$srcdir/bolt_opt"
}

prepare() {
  cd "Little-CMS"
  cleanup_profiles
  mkdir -p "$srcdir/bolt_opt"
  mkdir -p "$srcdir/bolt_profile"
}

build() {
  local _pkgdir="$srcdir/Little-CMS"
  cd "$_pkgdir"

  local CFLAGS_ORIG="$CFLAGS"
  local CXXFLAGS_ORIG="$CXXFLAGS"
  local LDFLAGS_ORIG="$LDFLAGS"

  # Stage 1: Instrumented build for PGO
  export LLVM_PROFILE_FILE="$srcdir/%p.profraw"
  CFLAGS+=" -g3 -fno-omit-frame-pointer -fprofile-generate -mllvm -vp-counters-per-site=10"
  CXXFLAGS+=" -g3 -fno-omit-frame-pointer -fprofile-generate -mllvm -vp-counters-per-site=10"
  LDFLAGS+=" -g3 -fno-omit-frame-pointer -fprofile-generate -mllvm -vp-counters-per-site=10"

  autoreconf -vfi
  ./configure --prefix="/usr" --enable-debug
  make
  make check

  llvm-profdata merge -output="$srcdir/default.profdata" "$srcdir"/*.profraw
  rm -f "$srcdir"/*.profraw

  make clean

  # Stage 2: Build with PGO data
  CFLAGS="$CFLAGS_ORIG -fprofile-use=$srcdir/default.profdata"
  CXXFLAGS="$CXXFLAGS_ORIG -fprofile-use=$srcdir/default.profdata"
  LDFLAGS="$LDFLAGS_ORIG -fprofile-use=$srcdir/default.profdata -Wl,--emit-relocs"

  autoreconf -vfi
  ./configure --prefix="/usr" --disable-debug
  make
}

check() {
  local _pkgdir="$srcdir/Little-CMS"
  local lib_path="src/.libs/liblcms2.so.2.0.17"
  cd "$_pkgdir" || return 1

  # Ensure directories exist
  mkdir -p "$_pkgdir/bolt_profile" || return 1
  mkdir -p "$srcdir/bolt_opt" || return 1

  # Make a clean copy of the library for instrumentation
  cp "$lib_path" "$lib_path.orig" || return 1

  echo "Creating BOLT-instrumented library..."
  llvm-bolt "$lib_path.orig" \
    --instrument --instrumentation-file-append-pid \
    --instrumentation-file="$_pkgdir/bolt_profile/liblcms2.fdata" \
    -o "$lib_path.inst" || return 1

  # Replace library with instrumented version
  mv "$lib_path.inst" "$lib_path" || return 1

  # Set up environment and run tests
  export LD_LIBRARY_PATH="$_pkgdir/src/.libs:$LD_LIBRARY_PATH"
  local instrumented_lib=$(readlink -f "$_pkgdir/$lib_path")
  echo "Using instrumented library: $instrumented_lib"
  echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH"

  LD_PRELOAD="$instrumented_lib" make check || return 1

  # Run a few additional basic tests from testbed
  if [ -d "testbed" ]; then
    cd testbed || return 1
    ./testcms -r
    ./testcms -t
    cd "$_pkgdir" || return 1
  fi

  # Merge profile data
  echo "Merging BOLT profile data..."
  local fdata_files=("$_pkgdir/bolt_profile"/*.fdata)
  if [[ -e "${fdata_files[0]}" ]]; then
    merge-fdata "${fdata_files[@]}" -o "$_pkgdir/bolt_profile/liblcms2.merged.fdata" || return 1
  else
    echo "Warning: No .fdata files found. BOLT optimization will be skipped." >&2
    return 0
  fi

  # Restore original library
  echo "Restoring original library for optimization..."
  mv "$lib_path.orig" "$lib_path" || return 1

  # Final BOLT optimization
  echo "Applying BOLT optimization..."
  llvm-bolt "$lib_path" \
    --data="$_pkgdir/bolt_profile/liblcms2.merged.fdata" \
    --dyno-stats --cu-processing-batch-size=64 --eliminate-unreachable \
    --frame-opt=all --icf=all --jump-tables=aggressive --min-branch-clusters \
    --stoke --sctc-mode=always --plt=all --hot-data --hot-text \
    --frame-opt-rm-stores --peepholes=all --infer-stale-profile=1 \
    --x86-strip-redundant-address-size --indirect-call-promotion=all \
    --reg-reassign --use-aggr-reg-reassign --reorder-blocks=ext-tsp \
    --reorder-functions=cdsort --split-all-cold --split-eh --split-functions \
    --split-strategy=cdsplit \
    -o "$srcdir/bolt_opt/liblcms2.so.bolt" || return 1

  mv "$srcdir/bolt_opt/liblcms2.so.bolt" "$lib_path" || return 1

  # Final verification
  echo "Running final verification..."
  unset LD_PRELOAD
  make check
}

package() {
  cd "Little-CMS"

  make DESTDIR="$pkgdir" install
  install -D -m0644 LICENSE "${pkgdir}/usr/share/licenses/${pkgname}/LICENSE"

  find "$pkgdir" -type f \( -name '*.so*' -o -name '*.a' -o -executable \) -print0 | while IFS= read -r -d '' file; do
    if llvm-strip --strip-unneeded "$file" 2>/dev/null || llvm-strip --strip-all "$file" 2>/dev/null; then
      echo "Stripped: $file"
    else
      echo "Skipping: $file (not a valid object file)" >&2
    fi
  done

  cleanup_profiles
}
