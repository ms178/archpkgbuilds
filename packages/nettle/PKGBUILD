pkgname=nettle
pkgver=3.10.1
pkgrel=3.1
pkgdesc="A low-level cryptographic library (BOLT-optimized)"
arch=('x86_64')
url="https://www.lysator.liu.se/~nisse/nettle"
license=('GPL2')
depends=('glibc' 'gmp')
makedepends=('clang' 'llvm')
provides=('nettle' 'libhogweed.so' 'libnettle.so')
conflicts=('nettle')
checkdepends=('valgrind')
options=(!strip)
source=(https://ftp.gnu.org/gnu/$pkgname/$pkgname-$pkgver.tar.gz{,.sig})
sha256sums=('ccfeff981b0ca71bbd6fbcb054f407c60ffb644389a5be80d6716d5b550c6ce3'
            'SKIP')
validpgpkeys=('343C2FF0FBEE5EC2EDBEF399F3599FF828C67298') # Niels MÃ¶ller <nisse@lysator.liu.se>

prepare() {
  cd $pkgname-$pkgver
  autoreconf -vfi
}

build() {
  cd $pkgname-$pkgver

  # Set compiler to Clang
  export CC=clang
  export CXX=clang++

  # BOLT requires relocations in text section and full debug info
  CFLAGS+=" -Wl,--emit-relocs"
  CXXFLAGS+=" -Wl,--emit-relocs"
  LDFLAGS+=" -Wl,--emit-relocs"

  # First build - instrumented binary
  ./configure \
    --prefix="/usr" \
    --disable-documentation \
    --enable-x86-aesni \
    --enable-x86-sha-ni \
    --enable-x86-pclmul

  make clean
  make -j$(nproc)

  # Create directory for BOLT data
  mkdir -p bolt_data

  # Create perf.data for profile collection
  make -k check 2>/dev/null &
  CHECK_PID=$!
  perf record -e cycles:u -j any,u -p $CHECK_PID
  wait $CHECK_PID

  # Convert perf data to BOLT format
  perf2bolt libnettle.so -p perf.data -o bolt_data/nettle.fdata
  perf2bolt libhogweed.so -p perf.data -o bolt_data/hogweed.fdata

  # Second build - optimized with BOLT
  make clean
  make -j$(nproc)

  # Apply BOLT optimizations to libnettle.so
  llvm-bolt libnettle.so \
    --data bolt_data/nettle.fdata \
    --update-debug-sections \
    --dyno-stats \
    --cu-processing-batch-size=64 \
    --eliminate-unreachable \
    --frame-opt=all \
    --icf=all \
    --jump-tables=aggressive \
    --min-branch-clusters \
    --stoke \
    --sctc-mode=always \
    --plt=all \
    --hot-data \
    --hot-text \
    --frame-opt-rm-stores \
    --peepholes=all \
    --infer-stale-profile=1 \
    --x86-strip-redundant-address-size \
    --indirect-call-promotion=all \
    --reg-reassign \
    --use-aggr-reg-reassign \
    --reorder-blocks=ext-tsp \
    --reorder-functions=cdsort \
    --split-all-cold \
    --split-eh \
    --split-functions \
    --split-strategy=cdsplit \
    -o libnettle.so.bolt

  # Apply BOLT optimizations to libhogweed.so
  llvm-bolt libhogweed.so \
    --data bolt_data/hogweed.fdata \
    --dyno-stats \
    --update-debug-sections \
    --cu-processing-batch-size=64 \
    --eliminate-unreachable \
    --frame-opt=all \
    --icf=all \
    --jump-tables=aggressive \
    --min-branch-clusters \
    --stoke \
    --sctc-mode=always \
    --plt=all \
    --hot-data \
    --hot-text \
    --frame-opt-rm-stores \
    --peepholes=all \
    --infer-stale-profile=1 \
    --x86-strip-redundant-address-size \
    --indirect-call-promotion=all \
    --reg-reassign \
    --use-aggr-reg-reassign \
    --reorder-blocks=ext-tsp \
    --reorder-functions=cdsort \
    --split-all-cold \
    --split-eh \
    --split-functions \
    --split-strategy=cdsplit \
    -o libhogweed.so.bolt

  # Replace original libraries with BOLT-optimized versions
  mv libnettle.so.bolt libnettle.so
  mv libhogweed.so.bolt libhogweed.so
}

check() {
  cd $pkgname-$pkgver
  make -k check
}

package() {
  cd $pkgname-$pkgver

  # Install the libraries and other files
  make DESTDIR="$pkgdir/" install

  # Use llvm-strip only on recognized file formats which works fine with BOLT modified sections wheras strip has issues with several sections
  find "$pkgdir" -type f \( -name '*.so*' -o -name '*.a' -o -executable \) -print0 | while IFS= read -r -d '' file; do
    if llvm-strip --strip-unneeded "$file" 2>/dev/null || llvm-strip --strip-all "$file" 2>/dev/null; then
      echo "Stripped: $file"
    else
      echo "Skipping: $file (not a valid object file)" >&2
    fi
  done
}
