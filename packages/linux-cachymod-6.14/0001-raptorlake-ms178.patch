--- a/kernel/time/hrtimer.c	2025-05-09 09:56:10.000000000 +0200
+++ b/kernel/time/hrtimer.c	2025-05-18 01:36:19.652237940 +0200
@@ -647,15 +647,20 @@ static inline ktime_t hrtimer_update_bas
 {
 	ktime_t *offs_real = &base->clock_base[HRTIMER_BASE_REALTIME].offset;
 	ktime_t *offs_boot = &base->clock_base[HRTIMER_BASE_BOOTTIME].offset;
-	ktime_t *offs_tai = &base->clock_base[HRTIMER_BASE_TAI].offset;
-
+	ktime_t *offs_tai  = &base->clock_base[HRTIMER_BASE_TAI].offset;
 	ktime_t now = ktime_get_update_offsets_now(&base->clock_was_set_seq,
-					    offs_real, offs_boot, offs_tai);
-
-	base->clock_base[HRTIMER_BASE_REALTIME_SOFT].offset = *offs_real;
-	base->clock_base[HRTIMER_BASE_BOOTTIME_SOFT].offset = *offs_boot;
-	base->clock_base[HRTIMER_BASE_TAI_SOFT].offset = *offs_tai;
+											   offs_real, offs_boot,
+											offs_tai);
 
+	#define COPY_SOFT(idx, src) do {					\
+	if (unlikely(base->clock_base[idx].offset != *(src)))	\
+		base->clock_base[idx].offset = *(src);		\
+	} while (0)
+
+	COPY_SOFT(HRTIMER_BASE_REALTIME_SOFT, offs_real);
+	COPY_SOFT(HRTIMER_BASE_BOOTTIME_SOFT,offs_boot);
+	COPY_SOFT(HRTIMER_BASE_TAI_SOFT,     offs_tai);
+	#undef COPY_SOFT
 	return now;
 }
 
@@ -1897,92 +1902,73 @@ static __latent_entropy void hrtimer_run
 void hrtimer_interrupt(struct clock_event_device *dev)
 {
 	struct hrtimer_cpu_base *cpu_base = this_cpu_ptr(&hrtimer_bases);
-	ktime_t expires_next, now, entry_time, delta;
 	unsigned long flags;
-	int retries = 0;
+	ktime_t entry_time, now, delta, expires_next;
+	bool bail_for_resched = false;
+	int   retry;
 
 	BUG_ON(!cpu_base->hres_active);
+
 	cpu_base->nr_events++;
 	dev->next_event = KTIME_MAX;
 
 	raw_spin_lock_irqsave(&cpu_base->lock, flags);
 	entry_time = now = hrtimer_update_base(cpu_base);
-retry:
-	cpu_base->in_hrtirq = 1;
-	/*
-	 * We set expires_next to KTIME_MAX here with cpu_base->lock
-	 * held to prevent that a timer is enqueued in our queue via
-	 * the migration code. This does not affect enqueueing of
-	 * timers which run their callback and need to be requeued on
-	 * this CPU.
-	 */
-	cpu_base->expires_next = KTIME_MAX;
-
-	if (!ktime_before(now, cpu_base->softirq_expires_next)) {
-		cpu_base->softirq_expires_next = KTIME_MAX;
-		cpu_base->softirq_activated = 1;
-		raise_timer_softirq(HRTIMER_SOFTIRQ);
-	}
 
-	__hrtimer_run_queues(cpu_base, now, flags, HRTIMER_ACTIVE_HARD);
+	for (retry = 0; ; retry++) {
+		cpu_base->in_hrtirq    = 1;
+		cpu_base->expires_next = KTIME_MAX;
+
+		if (!ktime_before(now, cpu_base->softirq_expires_next)) {
+			cpu_base->softirq_expires_next = KTIME_MAX;
+			cpu_base->softirq_activated    = 1;
+			raise_timer_softirq(HRTIMER_SOFTIRQ);
+		}
 
-	/* Reevaluate the clock bases for the [soft] next expiry */
-	expires_next = hrtimer_update_next_event(cpu_base);
-	/*
-	 * Store the new expiry value so the migration code can verify
-	 * against it.
-	 */
-	cpu_base->expires_next = expires_next;
-	cpu_base->in_hrtirq = 0;
-	raw_spin_unlock_irqrestore(&cpu_base->lock, flags);
+		__hrtimer_run_queues(cpu_base, now, flags, HRTIMER_ACTIVE_HARD);
 
-	/* Reprogramming necessary ? */
-	if (!tick_program_event(expires_next, 0)) {
-		cpu_base->hang_detected = 0;
-		return;
+		expires_next           = hrtimer_update_next_event(cpu_base);
+		cpu_base->expires_next = expires_next;
+		cpu_base->in_hrtirq    = 0;
+
+		raw_spin_unlock_irqrestore(&cpu_base->lock, flags);
+
+		if (likely(!tick_program_event(expires_next, 0))) {
+			cpu_base->hang_detected = 0;
+			return;
+		}
+
+		cpu_base->nr_retries++;
+
+		if (retry == 2)
+			break;
+		if (need_resched()) {
+			bail_for_resched = true;
+			break;
+		}
+
+		raw_spin_lock_irqsave(&cpu_base->lock, flags);
+		now = hrtimer_update_base(cpu_base);
 	}
 
-	/*
-	 * The next timer was already expired due to:
-	 * - tracing
-	 * - long lasting callbacks
-	 * - being scheduled away when running in a VM
-	 *
-	 * We need to prevent that we loop forever in the hrtimer
-	 * interrupt routine. We give it 3 attempts to avoid
-	 * overreacting on some spurious event.
-	 *
-	 * Acquire base lock for updating the offsets and retrieving
-	 * the current time.
-	 */
-	raw_spin_lock_irqsave(&cpu_base->lock, flags);
-	now = hrtimer_update_base(cpu_base);
-	cpu_base->nr_retries++;
-	if (++retries < 3)
-		goto retry;
-	/*
-	 * Give the system a chance to do something else than looping
-	 * here. We stored the entry time, so we know exactly how long
-	 * we spent here. We schedule the next event this amount of
-	 * time away.
-	 */
-	cpu_base->nr_hangs++;
-	cpu_base->hang_detected = 1;
-	raw_spin_unlock_irqrestore(&cpu_base->lock, flags);
+	delta = ktime_sub(ktime_get(), entry_time);
+
+	if (!bail_for_resched) {
+		cpu_base->nr_hangs++;
+		cpu_base->hang_detected = 1;
+	}
 
-	delta = ktime_sub(now, entry_time);
-	if ((unsigned int)delta > cpu_base->max_hang_time)
-		cpu_base->max_hang_time = (unsigned int) delta;
-	/*
-	 * Limit it to a sensible value as we enforce a longer
-	 * delay. Give the CPU at least 100ms to catch up.
-	 */
 	if (delta > 100 * NSEC_PER_MSEC)
-		expires_next = ktime_add_ns(now, 100 * NSEC_PER_MSEC);
-	else
-		expires_next = ktime_add(now, delta);
+		expires_next = ktime_add_ns(ktime_get(),
+									100 * NSEC_PER_MSEC);
+		else
+			expires_next = ktime_add(ktime_get(), delta);
+
 	tick_program_event(expires_next, 1);
-	pr_warn_once("hrtimer: interrupt took %llu ns\n", ktime_to_ns(delta));
+
+	if (!bail_for_resched)
+		pr_warn_once("hrtimer: interrupt took %llu ns\n",
+					 ktime_to_ns(delta));
 }
 #endif /* !CONFIG_HIGH_RES_TIMERS */
 



--- a/sound/pci/hda/hda_intel.c	2025-05-09 09:56:10.000000000 +0200
+++ b/sound/pci/hda/hda_intel.c	2025-05-18 01:05:45.134796217 +0200
@@ -38,6 +38,7 @@
 #include <linux/acpi.h>
 #include <linux/pgtable.h>
 #include <linux/dmi.h>
+#include <linux/iopoll.h>
 
 #ifdef CONFIG_X86
 /* for snoop control */
@@ -367,13 +368,17 @@ static void set_default_power_save(struc
  */
 /* update bits in a PCI register byte */
 static void update_pci_byte(struct pci_dev *pci, unsigned int reg,
-			    unsigned char mask, unsigned char val)
+							unsigned char mask, unsigned char val)
 {
 	unsigned char data;
 
 	pci_read_config_byte(pci, reg, &data);
+
+	if ((data & mask) == (val & mask))
+		return;
+
 	data &= ~mask;
-	data |= (val & mask);
+	data |= val & mask;
 	pci_write_config_byte(pci, reg, data);
 }
 
@@ -484,28 +489,18 @@ static int intel_get_lctl_scf(struct azx
 static int intel_ml_lctl_set_power(struct azx *chip, int state)
 {
 	struct hdac_bus *bus = azx_bus(chip);
+	void __iomem *lctl_reg = bus->mlcap + AZX_ML_BASE + AZX_REG_ML_LCTL;
 	u32 val;
-	int timeout;
 
-	/*
-	 * Changes to LCTL.SCF are only needed for the first multi-link dealing
-	 * with external codecs
-	 */
-	val = readl(bus->mlcap + AZX_ML_BASE + AZX_REG_ML_LCTL);
+	val  = readl(lctl_reg);
 	val &= ~AZX_ML_LCTL_SPA;
 	val |= state << AZX_ML_LCTL_SPA_SHIFT;
-	writel(val, bus->mlcap + AZX_ML_BASE + AZX_REG_ML_LCTL);
-	/* wait for CPA */
-	timeout = 50;
-	while (timeout) {
-		if (((readl(bus->mlcap + AZX_ML_BASE + AZX_REG_ML_LCTL)) &
-		    AZX_ML_LCTL_CPA) == (state << AZX_ML_LCTL_CPA_SHIFT))
-			return 0;
-		timeout--;
-		udelay(10);
-	}
+	writel(val, lctl_reg);
 
-	return -1;
+	return readl_poll_timeout_atomic(lctl_reg, val,
+									 ((val & AZX_ML_LCTL_CPA) ==
+									 (state << AZX_ML_LCTL_CPA_SHIFT)),
+									 10, 500);
 }
 
 static void intel_init_lctl(struct azx *chip)
@@ -548,29 +543,30 @@ set_spa:
 static void hda_intel_init_chip(struct azx *chip, bool full_reset)
 {
 	struct hdac_bus *bus = azx_bus(chip);
-	struct pci_dev *pci = chip->pci;
-	u32 val;
+	struct pci_dev  *pci = chip->pci;
+	u32 cgctl_orig = 0;
 
 	snd_hdac_set_codec_wakeup(bus, true);
+
 	if (chip->driver_type == AZX_DRIVER_SKL) {
-		pci_read_config_dword(pci, INTEL_HDA_CGCTL, &val);
-		val = val & ~INTEL_HDA_CGCTL_MISCBDCGE;
-		pci_write_config_dword(pci, INTEL_HDA_CGCTL, val);
+		pci_read_config_dword(pci, INTEL_HDA_CGCTL, &cgctl_orig);
+		pci_write_config_dword(pci, INTEL_HDA_CGCTL,
+							   cgctl_orig & ~INTEL_HDA_CGCTL_MISCBDCGE);
 	}
+
 	azx_init_chip(chip, full_reset);
+
 	if (chip->driver_type == AZX_DRIVER_SKL) {
-		pci_read_config_dword(pci, INTEL_HDA_CGCTL, &val);
-		val = val | INTEL_HDA_CGCTL_MISCBDCGE;
-		pci_write_config_dword(pci, INTEL_HDA_CGCTL, val);
+		pci_write_config_dword(pci, INTEL_HDA_CGCTL,
+							   cgctl_orig | INTEL_HDA_CGCTL_MISCBDCGE);
 	}
 
 	snd_hdac_set_codec_wakeup(bus, false);
 
-	/* reduce dma latency to avoid noise */
 	if (HDA_CONTROLLER_IS_APL(pci))
 		bxt_reduce_dma_latency(chip);
 
-	if (bus->mlcap != NULL)
+	if (bus->mlcap)
 		intel_init_lctl(chip);
 }
 
@@ -612,14 +608,12 @@ static int azx_position_ok(struct azx *c
 static int azx_position_check(struct azx *chip, struct azx_dev *azx_dev)
 {
 	struct hda_intel *hda = container_of(chip, struct hda_intel, chip);
-	int ok;
+	int ok = azx_position_ok(chip, azx_dev);
 
-	ok = azx_position_ok(chip, azx_dev);
-	if (ok == 1) {
+	if (likely(ok == 1)) {
 		azx_dev->irq_pending = 0;
 		return ok;
 	} else if (ok == 0) {
-		/* bogus IRQ, process it later */
 		azx_dev->irq_pending = 1;
 		schedule_work(&hda->irq_pending_work);
 	}
@@ -643,73 +637,70 @@ static int azx_position_check(struct azx
 static int azx_position_ok(struct azx *chip, struct azx_dev *azx_dev)
 {
 	struct snd_pcm_substream *substream = azx_dev->core.substream;
-	struct snd_pcm_runtime *runtime = substream->runtime;
+	struct snd_pcm_runtime   *runtime   = substream->runtime;
 	int stream = substream->stream;
 	u32 wallclk;
 	unsigned int pos;
 	snd_pcm_uframes_t hwptr, target;
 
-	/*
-	 * The value of the WALLCLK register is always 0
-	 * on the Loongson controller, so we return directly.
-	 */
-	if (chip->driver_type == AZX_DRIVER_LOONGSON)
+	if (unlikely(chip->driver_type == AZX_DRIVER_LOONGSON))
 		return 1;
 
 	wallclk = azx_readl(chip, WALLCLK) - azx_dev->core.start_wallclk;
-	if (wallclk < (azx_dev->core.period_wallclk * 2) / 3)
-		return -1;	/* bogus (too early) interrupt */
+	if (unlikely(wallclk < (azx_dev->core.period_wallclk * 2) / 3)) {
+		return -1;
+	}
 
-	if (chip->get_position[stream])
+	if (likely(chip->get_position[stream])) {
 		pos = chip->get_position[stream](chip, azx_dev);
-	else { /* use the position buffer as default */
+	} else {
 		pos = azx_get_pos_posbuf(chip, azx_dev);
-		if (!pos || pos == (u32)-1) {
+		if (unlikely(!pos || pos == (u32)-1)) {
 			dev_info(chip->card->dev,
-				 "Invalid position buffer, using LPIB read method instead.\n");
+					 "Invalid position buffer, switching to LPIB\n");
 			chip->get_position[stream] = azx_get_pos_lpib;
 			if (chip->get_position[0] == azx_get_pos_lpib &&
-			    chip->get_position[1] == azx_get_pos_lpib)
+				chip->get_position[1] == azx_get_pos_lpib)
 				azx_bus(chip)->use_posbuf = false;
 			pos = azx_get_pos_lpib(chip, azx_dev);
 			chip->get_delay[stream] = NULL;
 		} else {
 			chip->get_position[stream] = azx_get_pos_posbuf;
 			if (chip->driver_caps & AZX_DCAPS_COUNT_LPIB_DELAY)
-				chip->get_delay[stream] = azx_get_delay_from_lpib;
+				chip->get_delay[stream] =
+				azx_get_delay_from_lpib;
 		}
 	}
 
-	if (pos >= azx_dev->core.bufsize)
+	if (unlikely(pos >= azx_dev->core.bufsize))
 		pos = 0;
 
-	if (WARN_ONCE(!azx_dev->core.period_bytes,
-		      "hda-intel: zero azx_dev->period_bytes"))
-		return -1; /* this shouldn't happen! */
+	if (WARN_ONCE(!azx_dev->core.period_bytes, "hda-intel: zero period_bytes"))
+		return -1;
+
 	if (wallclk < (azx_dev->core.period_wallclk * 5) / 4 &&
-	    pos % azx_dev->core.period_bytes > azx_dev->core.period_bytes / 2)
-		/* NG - it's below the first next period boundary */
+		pos % azx_dev->core.period_bytes >
+		azx_dev->core.period_bytes / 2) {
 		return chip->bdl_pos_adj ? 0 : -1;
-	azx_dev->core.start_wallclk += wallclk;
+		}
 
-	if (azx_dev->core.no_period_wakeup)
-		return 1; /* OK, no need to check period boundary */
+		azx_dev->core.start_wallclk += wallclk;
 
+	if (azx_dev->core.no_period_wakeup)
+		return 1;
 	if (runtime->hw_ptr_base != runtime->hw_ptr_interrupt)
-		return 1; /* OK, already in hwptr updating process */
+		return 1;
 
-	/* check whether the period gets really elapsed */
-	pos = bytes_to_frames(runtime, pos);
+	pos   = bytes_to_frames(runtime, pos);
 	hwptr = runtime->hw_ptr_base + pos;
 	if (hwptr < runtime->status->hw_ptr)
 		hwptr += runtime->buffer_size;
+
 	target = runtime->hw_ptr_interrupt + runtime->period_size;
-	if (hwptr < target) {
-		/* too early wakeup, process it later */
+	if (unlikely(hwptr < target))
 		return chip->bdl_pos_adj ? 0 : -1;
-	}
 
-	return 1; /* OK, it's fine */
+	return 1;
 }
 
 /*
@@ -717,57 +708,57 @@ static int azx_position_ok(struct azx *c
  */
 static void azx_irq_pending_work(struct work_struct *work)
 {
-	struct hda_intel *hda = container_of(work, struct hda_intel, irq_pending_work);
-	struct azx *chip = &hda->chip;
-	struct hdac_bus *bus = azx_bus(chip);
+	struct hda_intel  *hda  = container_of(work, struct hda_intel,
+										   irq_pending_work);
+	struct azx        *chip = &hda->chip;
+	struct hdac_bus   *bus  = azx_bus(chip);
 	struct hdac_stream *s;
 	int pending, ok;
 
 	if (!hda->irq_pending_warned) {
 		dev_info(chip->card->dev,
-			 "IRQ timing workaround is activated for card #%d. Suggest a bigger bdl_pos_adj.\n",
-			 chip->card->number);
+				 "IRQ timing workaround active; try larger bdl_pos_adj\n");
 		hda->irq_pending_warned = 1;
 	}
 
 	for (;;) {
 		pending = 0;
+
 		spin_lock_irq(&bus->reg_lock);
 		list_for_each_entry(s, &bus->stream_list, list) {
 			struct azx_dev *azx_dev = stream_to_azx_dev(s);
-			if (!azx_dev->irq_pending ||
-			    !s->substream ||
-			    !s->running)
+
+			if (!azx_dev->irq_pending || !s->substream || !s->running)
 				continue;
+
 			ok = azx_position_ok(chip, azx_dev);
 			if (ok > 0) {
 				azx_dev->irq_pending = 0;
 				spin_unlock(&bus->reg_lock);
 				snd_pcm_period_elapsed(s->substream);
 				spin_lock(&bus->reg_lock);
-			} else if (ok < 0) {
-				pending = 0;	/* too early */
-			} else
+			} else if (ok == 0) {
 				pending++;
+			}
 		}
 		spin_unlock_irq(&bus->reg_lock);
+
 		if (!pending)
 			return;
-		msleep(1);
+
+		usleep_range(300, 500);
 	}
 }
 
 /* clear irq_pending flags and assure no on-going workq */
 static void azx_clear_irq_pending(struct azx *chip)
 {
-	struct hdac_bus *bus = azx_bus(chip);
+	struct hdac_bus    *bus = azx_bus(chip);
 	struct hdac_stream *s;
 
 	spin_lock_irq(&bus->reg_lock);
-	list_for_each_entry(s, &bus->stream_list, list) {
-		struct azx_dev *azx_dev = stream_to_azx_dev(s);
-		azx_dev->irq_pending = 0;
-	}
+	list_for_each_entry(s, &bus->stream_list, list)
+	stream_to_azx_dev(s)->irq_pending = 0;
 	spin_unlock_irq(&bus->reg_lock);
 }
 


--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c	2025-04-25 10:51:21.000000000 +0200
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c	2025-05-16 20:10:53.257238265 +0200
@@ -24,6 +24,7 @@
 #include <linux/if_macvlan.h>
 #include <linux/if_bridge.h>
 #include <linux/prefetch.h>
+#include <linux/reciprocal_div.h>
 #include <linux/bpf.h>
 #include <linux/bpf_trace.h>
 #include <linux/atomic.h>
@@ -50,6 +51,17 @@
 #include "ixgbe_model.h"
 #include "ixgbe_txrx_common.h"
 
+#define IXGBE_RX_PREFETCH_OFFSET 4
+#define IXGBE_TX_PREFETCH_OFFSET 4
+#ifndef IXGBE_SET_FLAG_FIXED
+#undef  IXGBE_SET_FLAG
+
+#define IXGBE_SET_FLAG(_input, _flag, _result) \
+(((_input) & (_flag)) ? (_result) : 0)
+
+#define IXGBE_SET_FLAG_FIXED
+#endif
+
 char ixgbe_driver_name[] = "ixgbe";
 static const char ixgbe_driver_string[] =
 			      "Intel(R) 10 Gigabit PCI Express Network Driver";
@@ -1613,100 +1625,119 @@ static bool ixgbe_alloc_mapped_page(stru
 }
 
 /**
- * ixgbe_alloc_rx_buffers - Replace used receive buffers
- * @rx_ring: ring to place buffers on
- * @cleaned_count: number of buffers to replace
- **/
-void ixgbe_alloc_rx_buffers(struct ixgbe_ring *rx_ring, u16 cleaned_count)
+ * ixgbe_alloc_rx_buffers - refill Rx ring with fresh pages
+ * @rx_ring:   ring to fill
+ * @cleaned:   number of descriptors freed in the last poll cycle
+ */
+void ixgbe_alloc_rx_buffers(struct ixgbe_ring *rx_ring, u16 cleaned)
 {
 	union ixgbe_adv_rx_desc *rx_desc;
-	struct ixgbe_rx_buffer *bi;
-	u16 i = rx_ring->next_to_use;
-	u16 bufsz;
+	struct ixgbe_rx_buffer  *bi;
+	u16                      i;
 
-	/* nothing to do */
-	if (!cleaned_count)
-		return;
+	/* nothing to do? */
+	if (!cleaned) {
+		return;			/* <-- braces silence clang -Wmisleading-indentation */
+	}
 
+	i       = rx_ring->next_to_use;
 	rx_desc = IXGBE_RX_DESC(rx_ring, i);
-	bi = &rx_ring->rx_buffer_info[i];
-	i -= rx_ring->count;
-
-	bufsz = ixgbe_rx_bufsz(rx_ring);
+	bi      = &rx_ring->rx_buffer_info[i];
 
-	do {
-		if (!ixgbe_alloc_mapped_page(rx_ring, bi))
+	while (cleaned--) {
+		if (unlikely(!ixgbe_alloc_mapped_page(rx_ring, bi)))
 			break;
 
-		/* sync the buffer for use by the device */
+		/* make sure the page is clean for device DMA */
 		dma_sync_single_range_for_device(rx_ring->dev, bi->dma,
-						 bi->page_offset, bufsz,
-						 DMA_FROM_DEVICE);
-
-		/*
-		 * Refresh the desc even if buffer_addrs didn't change
-		 * because each write-back erases this info.
-		 */
-		rx_desc->read.pkt_addr = cpu_to_le64(bi->dma + bi->page_offset);
-
-		rx_desc++;
-		bi++;
-		i++;
-		if (unlikely(!i)) {
+										 bi->page_offset,
+								   ixgbe_rx_bufsz(rx_ring),
+										 DMA_FROM_DEVICE);
+
+		rx_desc->read.pkt_addr =
+		cpu_to_le64(bi->dma + bi->page_offset);
+		rx_desc->wb.upper.length = 0;	/* pre-clear */
+
+		/* advance generic ‑ works for any ring size */
+		if (++i == rx_ring->count) {
+			i       = 0;
 			rx_desc = IXGBE_RX_DESC(rx_ring, 0);
-			bi = rx_ring->rx_buffer_info;
-			i -= rx_ring->count;
+			bi      = rx_ring->rx_buffer_info;
+		} else {
+			++rx_desc;
+			++bi;
 		}
+	}
 
-		/* clear the length for the next_to_use descriptor */
-		rx_desc->wb.upper.length = 0;
-
-		cleaned_count--;
-	} while (cleaned_count);
-
-	i += rx_ring->count;
-
-	if (rx_ring->next_to_use != i) {
-		rx_ring->next_to_use = i;
+	/* nothing was added? */
+	if (rx_ring->next_to_use == i)
+		return;
 
-		/* update next to alloc since we have filled the ring */
-		rx_ring->next_to_alloc = i;
+	rx_ring->next_to_use  = i;
+	rx_ring->next_to_alloc = i;
 
-		/* Force memory writes to complete before letting h/w
-		 * know there are new descriptors to fetch.  (Only
-		 * applicable for weak-ordered memory model archs,
-		 * such as IA-64).
-		 */
-		wmb();
-		writel(i, rx_ring->tail);
-	}
+	/* publish descriptors before doorbell */
+	wmb();
+	writel(i, rx_ring->tail);
 }
 
+/**
+ * ixgbe_set_rsc_gso_size - compute GSO fields for an RSC frame
+ * @ring:    owning ring (current stats not used)
+ * @skb:     coalesced skb
+ * @rx_desc: EOP descriptor that completed the RSC frame
+ *
+ * 82599 family reports MSS in mss_l4_len_idx; X540 does not.
+ */
 static void ixgbe_set_rsc_gso_size(struct ixgbe_ring *ring,
-				   struct sk_buff *skb)
+								   struct sk_buff    *skb,
+								   union ixgbe_adv_rx_desc *rx_desc)
 {
-	u16 hdr_len = skb_headlen(skb);
-
-	/* set gso_size to avoid messing up TCP MSS */
-	skb_shinfo(skb)->gso_size = DIV_ROUND_UP((skb->len - hdr_len),
-						 IXGBE_CB(skb)->append_cnt);
-	skb_shinfo(skb)->gso_type = SKB_GSO_TCPV4;
+	u16 hdr   = skb_transport_offset(skb);
+	u16 append = IXGBE_CB(skb)->append_cnt ?: 1; /* avoid div/0 */
+	u16 mss   = 0;
+
+	#ifdef IXGBE_RXDADV_RSCCMSS_MASK		/* only 82599 has this */
+	{
+		u32 mss_idx = le32_to_cpu(
+			rx_desc->wb.lower.lo_dword.mss_l4_len_idx);
+
+		mss = (mss_idx & IXGBE_RXDADV_RSCCMSS_MASK) >>
+		IXGBE_RXDADV_RSCCMSS_SHIFT;
+	}
+	#endif
+
+	if (!mss)	/* X540 or value missing */
+		mss = DIV_ROUND_UP(skb->len - hdr, append);
+
+	skb_shinfo(skb)->gso_size = mss;
+	skb_shinfo(skb)->gso_segs =
+	DIV_ROUND_UP(skb->len - hdr, mss);
+	skb_shinfo(skb)->gso_type = SKB_GSO_TCPV4; /* RSC does IPv4 TCP */
 }
 
 static void ixgbe_update_rsc_stats(struct ixgbe_ring *rx_ring,
-				   struct sk_buff *skb)
+								   union ixgbe_adv_rx_desc *rx_desc,
+								   struct sk_buff *skb)
 {
-	/* if append_cnt is 0 then frame is not RSC */
-	if (!IXGBE_CB(skb)->append_cnt)
+	if (!IXGBE_CB(skb)->append_cnt) {	/* not RSC */
+		/* wipe stale meta if skb recycled */
+		if (skb_is_gso(skb)) {
+			struct skb_shared_info *sh = skb_shinfo(skb);
+
+			sh->gso_size = 0;
+			sh->gso_type = 0;
+			sh->gso_segs = 0;
+		}
 		return;
+	}
 
 	rx_ring->rx_stats.rsc_count += IXGBE_CB(skb)->append_cnt;
 	rx_ring->rx_stats.rsc_flush++;
 
-	ixgbe_set_rsc_gso_size(rx_ring, skb);
+	ixgbe_set_rsc_gso_size(rx_ring, skb, rx_desc);
 
-	/* gso_size is computed using append_cnt so always clear it last */
-	IXGBE_CB(skb)->append_cnt = 0;
+	IXGBE_CB(skb)->append_cnt = 0;	/* always clear last */
 }
 
 /**
@@ -1720,36 +1751,35 @@ static void ixgbe_update_rsc_stats(struc
  * other fields within the skb.
  **/
 void ixgbe_process_skb_fields(struct ixgbe_ring *rx_ring,
-			      union ixgbe_adv_rx_desc *rx_desc,
-			      struct sk_buff *skb)
+							  union ixgbe_adv_rx_desc *rx_desc,
+							  struct sk_buff *skb)
 {
 	struct net_device *dev = rx_ring->netdev;
-	u32 flags = rx_ring->q_vector->adapter->flags;
+	u32 flags              = rx_ring->q_vector->adapter->flags;
 
-	ixgbe_update_rsc_stats(rx_ring, skb);
+	ixgbe_update_rsc_stats(rx_ring, rx_desc, skb);
 
 	ixgbe_rx_hash(rx_ring, rx_desc, skb);
-
 	ixgbe_rx_checksum(rx_ring, rx_desc, skb);
 
 	if (unlikely(flags & IXGBE_FLAG_RX_HWTSTAMP_ENABLED))
 		ixgbe_ptp_rx_hwtstamp(rx_ring, rx_desc, skb);
 
 	if ((dev->features & NETIF_F_HW_VLAN_CTAG_RX) &&
-	    ixgbe_test_staterr(rx_desc, IXGBE_RXD_STAT_VP)) {
+		ixgbe_test_staterr(rx_desc, IXGBE_RXD_STAT_VP)) {
 		u16 vid = le16_to_cpu(rx_desc->wb.upper.vlan);
-		__vlan_hwaccel_put_tag(skb, htons(ETH_P_8021Q), vid);
-	}
+	__vlan_hwaccel_put_tag(skb, htons(ETH_P_8021Q), vid);
+		}
 
-	if (ixgbe_test_staterr(rx_desc, IXGBE_RXDADV_STAT_SECP))
-		ixgbe_ipsec_rx(rx_ring, rx_desc, skb);
+		if (ixgbe_test_staterr(rx_desc, IXGBE_RXDADV_STAT_SECP))
+			ixgbe_ipsec_rx(rx_ring, rx_desc, skb);
 
-	/* record Rx queue, or update MACVLAN statistics */
-	if (netif_is_ixgbe(dev))
+	if (netif_is_ixgbe(dev)) {
 		skb_record_rx_queue(skb, rx_ring->queue_index);
-	else
-		macvlan_count_rx(netdev_priv(dev), skb->len + ETH_HLEN, true,
-				 false);
+	} else {				/* braces fix clang warn */
+		macvlan_count_rx(netdev_priv(dev),
+						 skb->len + ETH_HLEN, true, false);
+	}
 
 	skb->protocol = eth_type_trans(skb, dev);
 }
@@ -2327,155 +2357,147 @@ static void ixgbe_rx_buffer_flip(struct
  * Returns amount of work completed
  **/
 static int ixgbe_clean_rx_irq(struct ixgbe_q_vector *q_vector,
-			       struct ixgbe_ring *rx_ring,
-			       const int budget)
+							  struct ixgbe_ring   *rx_ring,
+							  const int            budget)
 {
-	unsigned int total_rx_bytes = 0, total_rx_packets = 0, frame_sz = 0;
-	struct ixgbe_adapter *adapter = q_vector->adapter;
-#ifdef IXGBE_FCOE
-	int ddp_bytes;
-	unsigned int mss = 0;
-#endif /* IXGBE_FCOE */
-	u16 cleaned_count = ixgbe_desc_unused(rx_ring);
-	unsigned int offset = rx_ring->rx_offset;
-	unsigned int xdp_xmit = 0;
-	struct xdp_buff xdp;
-	int xdp_res = 0;
+	struct ixgbe_adapter *adapter      = q_vector->adapter;
+	unsigned int          total_pkts   = 0;
+	unsigned int          total_bytes  = 0;
+	unsigned int          xdp_xmit     = 0;
+	u16                   cleaned_cnt  = ixgbe_desc_unused(rx_ring);
+	const unsigned int    offset       = rx_ring->rx_offset;
+	struct xdp_buff       xdp;
+	int                   xdp_res;
 
-	/* Frame size depend on rx_ring setup when PAGE_SIZE=4K */
-#if (PAGE_SIZE < 8192)
+	unsigned int frame_sz = ixgbe_rx_frame_truesize(rx_ring, 0);
+	#if PAGE_SIZE < 8192
 	frame_sz = ixgbe_rx_frame_truesize(rx_ring, 0);
-#endif
+	#endif
 	xdp_init_buff(&xdp, frame_sz, &rx_ring->xdp_rxq);
 
-	while (likely(total_rx_packets < budget)) {
+	while (likely(total_pkts < budget)) {
 		union ixgbe_adv_rx_desc *rx_desc;
-		struct ixgbe_rx_buffer *rx_buffer;
-		struct sk_buff *skb;
-		int rx_buffer_pgcnt;
-		unsigned int size;
-
-		/* return some buffers to hardware, one at a time is too slow */
-		if (cleaned_count >= IXGBE_RX_BUFFER_WRITE) {
-			ixgbe_alloc_rx_buffers(rx_ring, cleaned_count);
-			cleaned_count = 0;
+		struct ixgbe_rx_buffer  *rxb;
+		struct sk_buff          *skb;
+		int                      pagecnt_bias;
+		u32                      staterr;
+		unsigned int             size;
+		u16                      la;
+
+		/* 8-descriptor look-ahead prefetch */
+		la = rx_ring->next_to_clean + IXGBE_RX_PREFETCH_OFFSET; /* 8 */
+		if (la >= rx_ring->count)
+			la -= rx_ring->count;
+		prefetch(IXGBE_RX_DESC(rx_ring, la));
+		prefetch(&rx_ring->rx_buffer_info[la]);
+
+		if (cleaned_cnt >= IXGBE_RX_BUFFER_WRITE) {
+			ixgbe_alloc_rx_buffers(rx_ring, cleaned_cnt);
+			cleaned_cnt = 0;
 		}
 
 		rx_desc = IXGBE_RX_DESC(rx_ring, rx_ring->next_to_clean);
+
+		/* length is in wb.upper.length (16-bit) */
 		size = le16_to_cpu(rx_desc->wb.upper.length);
 		if (!size)
 			break;
 
-		/* This memory barrier is needed to keep us from reading
-		 * any other fields out of the rx_desc until we know the
-		 * descriptor has been written back
-		 */
-		dma_rmb();
+		/* status/error for later use (one load) */
+		staterr = le32_to_cpu(rx_desc->wb.upper.status_error);
+
+		rxb = &rx_ring->rx_buffer_info[rx_ring->next_to_clean];
+		prefetch(page_address(rxb->page) + rxb->page_offset);
+
+		dma_rmb();		/* make rest of desc visible */
+		xdp_res = 0;
 
-		rx_buffer = ixgbe_get_rx_buffer(rx_ring, rx_desc, &skb, size, &rx_buffer_pgcnt);
+		rxb = ixgbe_get_rx_buffer(rx_ring, rx_desc, &skb, size,
+								  &pagecnt_bias);
 
-		/* retrieve a buffer from the ring */
 		if (!skb) {
-			unsigned char *hard_start;
+			void *hard_start = page_address(rxb->page) +
+			rxb->page_offset - offset;
 
-			hard_start = page_address(rx_buffer->page) +
-				     rx_buffer->page_offset - offset;
 			xdp_prepare_buff(&xdp, hard_start, offset, size, true);
 			xdp_buff_clear_frags_flag(&xdp);
-#if (PAGE_SIZE > 4096)
-			/* At larger PAGE_SIZE, frame_sz depend on len size */
+			#if PAGE_SIZE > 4096
 			xdp.frame_sz = ixgbe_rx_frame_truesize(rx_ring, size);
-#endif
+			#endif
 			xdp_res = ixgbe_run_xdp(adapter, rx_ring, &xdp);
 		}
 
 		if (xdp_res) {
 			if (xdp_res & (IXGBE_XDP_TX | IXGBE_XDP_REDIR)) {
 				xdp_xmit |= xdp_res;
-				ixgbe_rx_buffer_flip(rx_ring, rx_buffer, size);
+				ixgbe_rx_buffer_flip(rx_ring, rxb, size);
 			} else {
-				rx_buffer->pagecnt_bias++;
+				rxb->pagecnt_bias++;
 			}
-			total_rx_packets++;
-			total_rx_bytes += size;
+			total_pkts++;
+			total_bytes += size;
 		} else if (skb) {
-			ixgbe_add_rx_frag(rx_ring, rx_buffer, skb, size);
+			ixgbe_add_rx_frag(rx_ring, rxb, skb, size);
 		} else if (ring_uses_build_skb(rx_ring)) {
-			skb = ixgbe_build_skb(rx_ring, rx_buffer,
-					      &xdp, rx_desc);
+			skb = ixgbe_build_skb(rx_ring, rxb, &xdp, rx_desc);
 		} else {
-			skb = ixgbe_construct_skb(rx_ring, rx_buffer,
-						  &xdp, rx_desc);
+			skb = ixgbe_construct_skb(rx_ring, rxb, &xdp, rx_desc);
 		}
 
-		/* exit if we failed to retrieve a buffer */
-		if (!xdp_res && !skb) {
+		if (unlikely(!xdp_res && !skb)) {
 			rx_ring->rx_stats.alloc_rx_buff_failed++;
-			rx_buffer->pagecnt_bias++;
+			rxb->pagecnt_bias++;
 			break;
 		}
 
-		ixgbe_put_rx_buffer(rx_ring, rx_buffer, skb, rx_buffer_pgcnt);
-		cleaned_count++;
+		ixgbe_put_rx_buffer(rx_ring, rxb, skb, pagecnt_bias);
+		cleaned_cnt++;
 
-		/* place incomplete frames back on ring for completion */
-		if (ixgbe_is_non_eop(rx_ring, rx_desc, skb))
+		if (unlikely(ixgbe_is_non_eop(rx_ring, rx_desc, skb)))
 			continue;
 
-		/* verify the packet layout is correct */
 		if (xdp_res || ixgbe_cleanup_headers(rx_ring, rx_desc, skb))
 			continue;
 
-		/* probably a little skewed due to removing CRC */
-		total_rx_bytes += skb->len;
-
-		/* populate checksum, timestamp, VLAN, and protocol */
+		total_bytes += skb->len;
 		ixgbe_process_skb_fields(rx_ring, rx_desc, skb);
 
-#ifdef IXGBE_FCOE
-		/* if ddp, not passing to ULD unless for FCP_RSP or error */
-		if (ixgbe_rx_is_fcoe(rx_ring, rx_desc)) {
-			ddp_bytes = ixgbe_fcoe_ddp(adapter, rx_desc, skb);
-			/* include DDPed FCoE data */
-			if (ddp_bytes > 0) {
-				if (!mss) {
-					mss = rx_ring->netdev->mtu -
-						sizeof(struct fcoe_hdr) -
-						sizeof(struct fc_frame_header) -
-						sizeof(struct fcoe_crc_eof);
-					if (mss > 512)
-						mss &= ~511;
-				}
-				total_rx_bytes += ddp_bytes;
-				total_rx_packets += DIV_ROUND_UP(ddp_bytes,
-								 mss);
-			}
-			if (!ddp_bytes) {
+		#ifdef IXGBE_FCOE
+		if (unlikely(ixgbe_rx_is_fcoe(rx_ring, rx_desc))) {
+			int ddp = ixgbe_fcoe_ddp(adapter, rx_desc, skb);
+			if (ddp <= 0) {
 				dev_kfree_skb_any(skb);
 				continue;
 			}
+			{
+				unsigned int mss = rx_ring->netdev->mtu -
+				sizeof(struct fcoe_hdr) -
+				sizeof(struct fc_frame_header) -
+				sizeof(struct fcoe_crc_eof);
+				if (mss > 512)
+					mss &= ~511;
+				total_bytes += ddp;
+				total_pkts  += DIV_ROUND_UP(ddp, mss);
+			}
 		}
-
-#endif /* IXGBE_FCOE */
+		#endif
 		ixgbe_rx_skb(q_vector, skb);
-
-		/* update budget accounting */
-		total_rx_packets++;
+		total_pkts++;
 	}
 
 	if (xdp_xmit & IXGBE_XDP_REDIR)
 		xdp_do_flush();
-
 	if (xdp_xmit & IXGBE_XDP_TX) {
-		struct ixgbe_ring *ring = ixgbe_determine_xdp_ring(adapter);
-
-		ixgbe_xdp_ring_update_tail_locked(ring);
+		ixgbe_xdp_ring_update_tail_locked(
+			ixgbe_determine_xdp_ring(adapter));
 	}
 
-	ixgbe_update_rx_ring_stats(rx_ring, q_vector, total_rx_packets,
-				   total_rx_bytes);
+	if (cleaned_cnt) {
+		ixgbe_alloc_rx_buffers(rx_ring, cleaned_cnt);
+	}
 
-	return total_rx_packets;
+	ixgbe_update_rx_ring_stats(rx_ring, q_vector, total_pkts, total_bytes);
+	return total_pkts;
 }
 
 /**
@@ -2558,178 +2580,117 @@ static void ixgbe_configure_msix(struct
  *      while increasing bulk throughput.
  **/
 static void ixgbe_update_itr(struct ixgbe_q_vector *q_vector,
-			     struct ixgbe_ring_container *ring_container)
+							 struct ixgbe_ring_container *ring_container)
 {
 	unsigned int itr = IXGBE_ITR_ADAPTIVE_MIN_USECS |
-			   IXGBE_ITR_ADAPTIVE_LATENCY;
-	unsigned int avg_wire_size, packets, bytes;
+	IXGBE_ITR_ADAPTIVE_LATENCY;
+	unsigned int packets, bytes, avg_wire_size;
 	unsigned long next_update = jiffies;
 
-	/* If we don't have any rings just leave ourselves set for maximum
-	 * possible latency so we take ourselves out of the equation.
-	 */
+	/* Opt 3: Cache-hot `ring_container` fields */
+	prefetchw(ring_container);
+
 	if (!ring_container->ring)
 		return;
 
-	/* If we didn't update within up to 1 - 2 jiffies we can assume
-	 * that either packets are coming in so slow there hasn't been
-	 * any work, or that there is so much work that NAPI is dealing
-	 * with interrupt moderation and we don't need to do anything.
-	 */
 	if (time_after(next_update, ring_container->next_update))
 		goto clear_counts;
 
 	packets = ring_container->total_packets;
-
-	/* We have no packets to actually measure against. This means
-	 * either one of the other queues on this vector is active or
-	 * we are a Tx queue doing TSO with too high of an interrupt rate.
-	 *
-	 * When this occurs just tick up our delay by the minimum value
-	 * and hope that this extra delay will prevent us from being called
-	 * without any work on our queue.
-	 */
-	if (!packets) {
+	/* Opt 3: Branch-probability hints */
+	if (unlikely(!packets)) {
 		itr = (q_vector->itr >> 2) + IXGBE_ITR_ADAPTIVE_MIN_INC;
 		if (itr > IXGBE_ITR_ADAPTIVE_MAX_USECS)
 			itr = IXGBE_ITR_ADAPTIVE_MAX_USECS;
-		itr += ring_container->itr & IXGBE_ITR_ADAPTIVE_LATENCY;
+		itr |= ring_container->itr & IXGBE_ITR_ADAPTIVE_LATENCY;
 		goto clear_counts;
 	}
 
 	bytes = ring_container->total_bytes;
 
-	/* If packets are less than 4 or bytes are less than 9000 assume
-	 * insufficient data to use bulk rate limiting approach. We are
-	 * likely latency driven.
-	 */
-	if (packets < 4 && bytes < 9000) {
-		itr = IXGBE_ITR_ADAPTIVE_LATENCY;
+	/* Opt 3: Hot-path first layout */
+	if (likely(packets >= 256)) { /* Common bulk path */
+		itr = IXGBE_ITR_ADAPTIVE_BULK;
 		goto adjust_by_size;
 	}
 
-	/* Between 4 and 48 we can assume that our current interrupt delay
-	 * is only slightly too low. As such we should increase it by a small
-	 * fixed amount.
-	 */
-	if (packets < 48) {
-		itr = (q_vector->itr >> 2) + IXGBE_ITR_ADAPTIVE_MIN_INC;
-		if (itr > IXGBE_ITR_ADAPTIVE_MAX_USECS)
-			itr = IXGBE_ITR_ADAPTIVE_MAX_USECS;
+	if (packets >= 96) { /* 96 <= packets < 256 */
+		itr = q_vector->itr >> 3;
+		if (itr < IXGBE_ITR_ADAPTIVE_MIN_USECS)
+			itr = IXGBE_ITR_ADAPTIVE_MIN_USECS;
 		goto clear_counts;
 	}
 
-	/* Between 48 and 96 is our "goldilocks" zone where we are working
-	 * out "just right". Just report that our current ITR is good for us.
-	 */
-	if (packets < 96) {
+	if (packets >= 48) { /* 48 <= packets < 96 */
 		itr = q_vector->itr >> 2;
 		goto clear_counts;
 	}
 
-	/* If packet count is 96 or greater we are likely looking at a slight
-	 * overrun of the delay we want. Try halving our delay to see if that
-	 * will cut the number of packets in half per interrupt.
-	 */
-	if (packets < 256) {
-		itr = q_vector->itr >> 3;
-		if (itr < IXGBE_ITR_ADAPTIVE_MIN_USECS)
-			itr = IXGBE_ITR_ADAPTIVE_MIN_USECS;
+	if (packets >= 4) { /* 4 <= packets < 48 */
+		itr = (q_vector->itr >> 2) + IXGBE_ITR_ADAPTIVE_MIN_INC;
+		if (itr > IXGBE_ITR_ADAPTIVE_MAX_USECS)
+			itr = IXGBE_ITR_ADAPTIVE_MAX_USECS;
 		goto clear_counts;
 	}
 
-	/* The paths below assume we are dealing with a bulk ITR since number
-	 * of packets is 256 or greater. We are just going to have to compute
-	 * a value and try to bring the count under control, though for smaller
-	 * packet sizes there isn't much we can do as NAPI polling will likely
-	 * be kicking in sooner rather than later.
-	 */
-	itr = IXGBE_ITR_ADAPTIVE_BULK;
-
-adjust_by_size:
-	/* If packet counts are 256 or greater we can assume we have a gross
-	 * overestimation of what the rate should be. Instead of trying to fine
-	 * tune it just use the formula below to try and dial in an exact value
-	 * give the current packet size of the frame.
-	 */
-	avg_wire_size = bytes / packets;
-
-	/* The following is a crude approximation of:
-	 *  wmem_default / (size + overhead) = desired_pkts_per_int
-	 *  rate / bits_per_byte / (size + ethernet overhead) = pkt_rate
-	 *  (desired_pkt_rate / pkt_rate) * usecs_per_sec = ITR value
-	 *
-	 * Assuming wmem_default is 212992 and overhead is 640 bytes per
-	 * packet, (256 skb, 64 headroom, 320 shared info), we can reduce the
-	 * formula down to
-	 *
-	 *  (170 * (size + 24)) / (size + 640) = ITR
-	 *
-	 * We first do some math on the packet size and then finally bitshift
-	 * by 8 after rounding up. We also have to account for PCIe link speed
-	 * difference as ITR scales based on this.
-	 */
+	/* packets < 4 */
+	if (bytes < 9000) {
+		itr = IXGBE_ITR_ADAPTIVE_LATENCY;
+		goto adjust_by_size;
+	}
+
+	/* packets < 4 and bytes >= 9000 (TSO likely) */
+	itr = (q_vector->itr >> 2) + IXGBE_ITR_ADAPTIVE_MIN_INC;
+	if (itr > IXGBE_ITR_ADAPTIVE_MAX_USECS)
+		itr = IXGBE_ITR_ADAPTIVE_MAX_USECS;
+	goto clear_counts;
+
+	adjust_by_size:
+	/* Opt 3: Replace expensive division with reciprocal multiply-shifts */
+	{
+		struct reciprocal_value recip = reciprocal_value(packets);
+		avg_wire_size = reciprocal_divide(bytes, recip);
+	}
+
 	if (avg_wire_size <= 60) {
-		/* Start at 50k ints/sec */
 		avg_wire_size = 5120;
 	} else if (avg_wire_size <= 316) {
-		/* 50K ints/sec to 16K ints/sec */
-		avg_wire_size *= 40;
-		avg_wire_size += 2720;
+		avg_wire_size = avg_wire_size * 40 + 2720;
 	} else if (avg_wire_size <= 1084) {
-		/* 16K ints/sec to 9.2K ints/sec */
-		avg_wire_size *= 15;
-		avg_wire_size += 11452;
+		avg_wire_size = avg_wire_size * 15 + 11452;
 	} else if (avg_wire_size < 1968) {
-		/* 9.2K ints/sec to 8K ints/sec */
-		avg_wire_size *= 5;
-		avg_wire_size += 22420;
+		avg_wire_size = avg_wire_size * 5 + 22420;
 	} else {
-		/* plateau at a limit of 8K ints/sec */
 		avg_wire_size = 32256;
 	}
 
-	/* If we are in low latency mode half our delay which doubles the rate
-	 * to somewhere between 100K to 16K ints/sec
-	 */
 	if (itr & IXGBE_ITR_ADAPTIVE_LATENCY)
 		avg_wire_size >>= 1;
 
-	/* Resultant value is 256 times larger than it needs to be. This
-	 * gives us room to adjust the value as needed to either increase
-	 * or decrease the value based on link speeds of 10G, 2.5G, 1G, etc.
-	 *
-	 * Use addition as we have already recorded the new latency flag
-	 * for the ITR value.
-	 */
 	switch (q_vector->adapter->link_speed) {
-	case IXGBE_LINK_SPEED_10GB_FULL:
-	case IXGBE_LINK_SPEED_100_FULL:
-	default:
-		itr += DIV_ROUND_UP(avg_wire_size,
-				    IXGBE_ITR_ADAPTIVE_MIN_INC * 256) *
-		       IXGBE_ITR_ADAPTIVE_MIN_INC;
-		break;
-	case IXGBE_LINK_SPEED_2_5GB_FULL:
-	case IXGBE_LINK_SPEED_1GB_FULL:
-	case IXGBE_LINK_SPEED_10_FULL:
-		if (avg_wire_size > 8064)
-			avg_wire_size = 8064;
+		case IXGBE_LINK_SPEED_10GB_FULL:
+		case IXGBE_LINK_SPEED_100_FULL:
+		default:
+			itr += DIV_ROUND_UP(avg_wire_size,
+								IXGBE_ITR_ADAPTIVE_MIN_INC * 256) *
+								IXGBE_ITR_ADAPTIVE_MIN_INC;
+								break;
+		case IXGBE_LINK_SPEED_2_5GB_FULL:
+		case IXGBE_LINK_SPEED_1GB_FULL:
+		case IXGBE_LINK_SPEED_10_FULL:
+			if (avg_wire_size > 8064)
+				avg_wire_size = 8064;
 		itr += DIV_ROUND_UP(avg_wire_size,
-				    IXGBE_ITR_ADAPTIVE_MIN_INC * 64) *
-		       IXGBE_ITR_ADAPTIVE_MIN_INC;
-		break;
+							IXGBE_ITR_ADAPTIVE_MIN_INC * 64) *
+							IXGBE_ITR_ADAPTIVE_MIN_INC;
+							break;
 	}
 
-clear_counts:
-	/* write back value */
-	ring_container->itr = itr;
-
-	/* next update should occur within next jiffy */
-	ring_container->next_update = next_update + 1;
-
-	ring_container->total_bytes = 0;
-	ring_container->total_packets = 0;
+	clear_counts:
+	ring_container->itr		 = itr;
+	ring_container->next_update	 = next_update + 1;
+	ring_container->total_bytes	 = 0;
+	ring_container->total_packets	 = 0;
 }
 
 /**
@@ -4313,100 +4274,91 @@ static void ixgbe_rx_desc_queue_enable(s
 }
 
 void ixgbe_configure_rx_ring(struct ixgbe_adapter *adapter,
-			     struct ixgbe_ring *ring)
+							 struct ixgbe_ring    *ring)
 {
-	struct ixgbe_hw *hw = &adapter->hw;
+	struct ixgbe_hw *hw  = &adapter->hw;
+	u64               rdba = ring->dma;
+	u32               rxdctl;
+	u8                reg  = ring->reg_idx;
 	union ixgbe_adv_rx_desc *rx_desc;
-	u64 rdba = ring->dma;
-	u32 rxdctl;
-	u8 reg_idx = ring->reg_idx;
 
+	/* ---------------- DMA-zero bookkeeping -------------------- */
 	xdp_rxq_info_unreg_mem_model(&ring->xdp_rxq);
 	ring->xsk_pool = ixgbe_xsk_pool(adapter, ring);
 	if (ring->xsk_pool) {
 		WARN_ON(xdp_rxq_info_reg_mem_model(&ring->xdp_rxq,
-						   MEM_TYPE_XSK_BUFF_POOL,
-						   NULL));
+										   MEM_TYPE_XSK_BUFF_POOL, NULL));
 		xsk_pool_set_rxq_info(ring->xsk_pool, &ring->xdp_rxq);
 	} else {
 		WARN_ON(xdp_rxq_info_reg_mem_model(&ring->xdp_rxq,
-						   MEM_TYPE_PAGE_SHARED, NULL));
+										   MEM_TYPE_PAGE_SHARED, NULL));
 	}
 
-	/* disable queue to avoid use of these values while updating state */
-	rxdctl = IXGBE_READ_REG(hw, IXGBE_RXDCTL(reg_idx));
+	/* ---------------- disable queue while we update ------------ */
+	rxdctl = IXGBE_READ_REG(hw, IXGBE_RXDCTL(reg));
 	rxdctl &= ~IXGBE_RXDCTL_ENABLE;
-
-	/* write value back with RXDCTL.ENABLE bit cleared */
-	IXGBE_WRITE_REG(hw, IXGBE_RXDCTL(reg_idx), rxdctl);
-	IXGBE_WRITE_FLUSH(hw);
-
-	IXGBE_WRITE_REG(hw, IXGBE_RDBAL(reg_idx), (rdba & DMA_BIT_MASK(32)));
-	IXGBE_WRITE_REG(hw, IXGBE_RDBAH(reg_idx), (rdba >> 32));
-	IXGBE_WRITE_REG(hw, IXGBE_RDLEN(reg_idx),
-			ring->count * sizeof(union ixgbe_adv_rx_desc));
-	/* Force flushing of IXGBE_RDLEN to prevent MDD */
+	IXGBE_WRITE_REG(hw, IXGBE_RXDCTL(reg), rxdctl);
 	IXGBE_WRITE_FLUSH(hw);
 
-	IXGBE_WRITE_REG(hw, IXGBE_RDH(reg_idx), 0);
-	IXGBE_WRITE_REG(hw, IXGBE_RDT(reg_idx), 0);
-	ring->tail = adapter->io_addr + IXGBE_RDT(reg_idx);
+	/* ---------------- base, len, head/tail --------------------- */
+	IXGBE_WRITE_REG(hw, IXGBE_RDBAL(reg),  rdba & DMA_BIT_MASK(32));
+	IXGBE_WRITE_REG(hw, IXGBE_RDBAH(reg),  rdba >> 32);
+	IXGBE_WRITE_REG(hw, IXGBE_RDLEN(reg),
+					ring->count * sizeof(union ixgbe_adv_rx_desc));
+	IXGBE_WRITE_FLUSH(hw);		/* prevent MDD */
+
+	IXGBE_WRITE_REG(hw, IXGBE_RDH(reg), 0);
+	IXGBE_WRITE_REG(hw, IXGBE_RDT(reg), 0);
+	ring->tail = adapter->io_addr + IXGBE_RDT(reg);
 
 	ixgbe_configure_srrctl(adapter, ring);
 	ixgbe_configure_rscctl(adapter, ring);
 
+	/* ---------------- per-family tweaks ------------------------ */
 	if (hw->mac.type == ixgbe_mac_82598EB) {
-		/*
-		 * enable cache line friendly hardware writes:
-		 * PTHRESH=32 descriptors (half the internal cache),
-		 * this also removes ugly rx_no_buffer_count increment
-		 * HTHRESH=4 descriptors (to minimize latency on fetch)
-		 * WTHRESH=8 burst writeback up to two cache lines
-		 */
 		rxdctl &= ~0x3FFFFF;
-		rxdctl |=  0x080420;
-#if (PAGE_SIZE < 8192)
-	/* RXDCTL.RLPML does not work on 82599 */
+		rxdctl |= 0x080420;		/* Intel default 82598 */
+		#if PAGE_SIZE < 8192
 	} else if (hw->mac.type != ixgbe_mac_82599EB) {
-		rxdctl &= ~(IXGBE_RXDCTL_RLPMLMASK |
-			    IXGBE_RXDCTL_RLPML_EN);
-
-		/* Limit the maximum frame size so we don't overrun the skb.
-		 * This can happen in SRIOV mode when the MTU of the VF is
-		 * higher than the MTU of the PF.
-		 */
+		rxdctl &= ~(IXGBE_RXDCTL_RLPMLMASK | IXGBE_RXDCTL_RLPML_EN);
 		if (ring_uses_build_skb(ring) &&
-		    !test_bit(__IXGBE_RX_3K_BUFFER, &ring->state))
+			!test_bit(__IXGBE_RX_3K_BUFFER, &ring->state))
 			rxdctl |= IXGBE_MAX_2K_FRAME_BUILD_SKB |
-				  IXGBE_RXDCTL_RLPML_EN;
-#endif
+			IXGBE_RXDCTL_RLPML_EN;
+		#endif
 	}
 
-	ring->rx_offset = ixgbe_rx_offset(ring);
+	/* ---------------- X540: enable write-back watermark -------- */
+	if (hw->mac.type == ixgbe_mac_X540) {
+		#define IXGBE_RXDCTL_WTHRESH_MASK  (0x3F << 16)
+		#define IXGBE_RXDCTL_WTHRESH_SHIFT 16
+		rxdctl &= ~IXGBE_RXDCTL_WTHRESH_MASK;
+		rxdctl |= 31 << IXGBE_RXDCTL_WTHRESH_SHIFT; /* burst-2-cl */
+	}
 
+	/* ---------------- XSK pool RLPML override ------------------ */
+	ring->rx_offset = ixgbe_rx_offset(ring);
 	if (ring->xsk_pool && hw->mac.type != ixgbe_mac_82599EB) {
-		u32 xsk_buf_len = xsk_pool_get_rx_frame_size(ring->xsk_pool);
+		u32 xsk_len = xsk_pool_get_rx_frame_size(ring->xsk_pool);
 
-		rxdctl &= ~(IXGBE_RXDCTL_RLPMLMASK |
-			    IXGBE_RXDCTL_RLPML_EN);
-		rxdctl |= xsk_buf_len | IXGBE_RXDCTL_RLPML_EN;
-
-		ring->rx_buf_len = xsk_buf_len;
+		rxdctl &= ~(IXGBE_RXDCTL_RLPMLMASK | IXGBE_RXDCTL_RLPML_EN);
+		rxdctl |=  xsk_len | IXGBE_RXDCTL_RLPML_EN;
+		ring->rx_buf_len = xsk_len;
 	}
 
-	/* initialize rx_buffer_info */
+	/* ---------------- clear software ring ---------------------- */
 	memset(ring->rx_buffer_info, 0,
-	       sizeof(struct ixgbe_rx_buffer) * ring->count);
+		   sizeof(struct ixgbe_rx_buffer) * ring->count);
 
-	/* initialize Rx descriptor 0 */
 	rx_desc = IXGBE_RX_DESC(ring, 0);
 	rx_desc->wb.upper.length = 0;
 
-	/* enable receive descriptor ring */
+	/* ---------------- enable queue ----------------------------- */
 	rxdctl |= IXGBE_RXDCTL_ENABLE;
-	IXGBE_WRITE_REG(hw, IXGBE_RXDCTL(reg_idx), rxdctl);
+	IXGBE_WRITE_REG(hw, IXGBE_RXDCTL(reg), rxdctl);
 
 	ixgbe_rx_desc_queue_enable(adapter, ring);
+
 	if (ring->xsk_pool)
 		ixgbe_alloc_rx_buffers_zc(ring, ixgbe_desc_unused(ring));
 	else
@@ -8591,34 +8543,24 @@ no_csum:
 	ixgbe_tx_ctxtdesc(tx_ring, vlan_macip_lens, fceof_saidx, type_tucmd, 0);
 }
 
-#define IXGBE_SET_FLAG(_input, _flag, _result) \
-	((_flag <= _result) ? \
-	 ((u32)(_input & _flag) * (_result / _flag)) : \
-	 ((u32)(_input & _flag) / (_flag / _result)))
-
-static u32 ixgbe_tx_cmd_type(struct sk_buff *skb, u32 tx_flags)
+static inline __maybe_unused
+u32 ixgbe_tx_cmd_type(const struct sk_buff *skb, u32 tx_flags)
 {
-	/* set type for advanced descriptor with frame checksum insertion */
-	u32 cmd_type = IXGBE_ADVTXD_DTYP_DATA |
-		       IXGBE_ADVTXD_DCMD_DEXT |
-		       IXGBE_ADVTXD_DCMD_IFCS;
-
-	/* set HW vlan bit if vlan is present */
-	cmd_type |= IXGBE_SET_FLAG(tx_flags, IXGBE_TX_FLAGS_HW_VLAN,
-				   IXGBE_ADVTXD_DCMD_VLE);
-
-	/* set segmentation enable bits for TSO/FSO */
-	cmd_type |= IXGBE_SET_FLAG(tx_flags, IXGBE_TX_FLAGS_TSO,
-				   IXGBE_ADVTXD_DCMD_TSE);
+	u32 cmd = IXGBE_ADVTXD_DTYP_DATA |
+	IXGBE_ADVTXD_DCMD_DEXT |
+	IXGBE_ADVTXD_DCMD_IFCS;
+
+	cmd |= IXGBE_SET_FLAG(tx_flags, IXGBE_TX_FLAGS_HW_VLAN,
+						  IXGBE_ADVTXD_DCMD_VLE);
+	cmd |= IXGBE_SET_FLAG(tx_flags, IXGBE_TX_FLAGS_TSO,
+						  IXGBE_ADVTXD_DCMD_TSE);
+	cmd |= IXGBE_SET_FLAG(tx_flags, IXGBE_TX_FLAGS_TSTAMP,
+						  IXGBE_ADVTXD_MAC_TSTAMP);
 
-	/* set timestamp bit if present */
-	cmd_type |= IXGBE_SET_FLAG(tx_flags, IXGBE_TX_FLAGS_TSTAMP,
-				   IXGBE_ADVTXD_MAC_TSTAMP);
+	if (skb->no_fcs)
+		cmd &= ~IXGBE_ADVTXD_DCMD_IFCS;
 
-	/* insert frame checksum */
-	cmd_type ^= IXGBE_SET_FLAG(skb->no_fcs, 1, IXGBE_ADVTXD_DCMD_IFCS);
-
-	return cmd_type;
+	return cmd;
 }
 
 static void ixgbe_tx_olinfo_status(union ixgbe_adv_tx_desc *tx_desc,
@@ -8654,12 +8596,27 @@ static void ixgbe_tx_olinfo_status(union
 
 static int __ixgbe_maybe_stop_tx(struct ixgbe_ring *tx_ring, u16 size)
 {
-	if (!netif_subqueue_try_stop(tx_ring->netdev, tx_ring->queue_index,
-				     ixgbe_desc_unused(tx_ring), size))
-		return -EBUSY;
+	/* fast exit: ring still has descriptors */
+	if (likely(ixgbe_desc_unused(tx_ring) >= size)) {
+		return 0;
+	}
 
-	++tx_ring->tx_stats.restart_queue;
-	return 0;
+	/* try to stop the sub-queue; return 0 if it succeeded OR if it was
+	 * already stopped/became free before we could stop it.
+	 * Only increment restart_queue and return -EBUSY if *we* actually
+	 * stopped it.
+	 */
+	if (!netif_subqueue_try_stop(tx_ring->netdev,
+		tx_ring->queue_index,
+		ixgbe_desc_unused(tx_ring), size)) {
+		return 0; /* Queue was not stopped by us (either already free or stopped by someone else) */
+		}
+
+		/* This line is executed ONLY if netif_subqueue_try_stop returned true (non-zero),
+		 * meaning we successfully stopped the queue.
+		 */
+		++tx_ring->tx_stats.restart_queue;
+	return -EBUSY; /* We successfully stopped the queue */
 }
 
 static inline int ixgbe_maybe_stop_tx(struct ixgbe_ring *tx_ring, u16 size)
@@ -8670,305 +8627,365 @@ static inline int ixgbe_maybe_stop_tx(st
 	return __ixgbe_maybe_stop_tx(tx_ring, size);
 }
 
-static int ixgbe_tx_map(struct ixgbe_ring *tx_ring,
-			struct ixgbe_tx_buffer *first,
-			const u8 hdr_len)
-{
-	struct sk_buff *skb = first->skb;
-	struct ixgbe_tx_buffer *tx_buffer;
-	union ixgbe_adv_tx_desc *tx_desc;
-	skb_frag_t *frag;
-	dma_addr_t dma;
-	unsigned int data_len, size;
-	u32 tx_flags = first->tx_flags;
-	u32 cmd_type = ixgbe_tx_cmd_type(skb, tx_flags);
-	u16 i = tx_ring->next_to_use;
+/* --------------------------------------------------------------- */
+/* DMA helpers – fall back if RELAXED is not available             */
+/* --------------------------------------------------------------- */
+#ifndef DMA_ATTR_RELAXED
+#ifdef DMA_ATTR_WEAK_ORDERING
+#define DMA_ATTR_RELAXED DMA_ATTR_WEAK_ORDERING
+#endif
+#endif
 
-	tx_desc = IXGBE_TX_DESC(tx_ring, i);
+#ifdef DMA_ATTR_RELAXED
+#define IXGBE_MAP_SINGLE(dev, buf, len) \
+dma_map_single_attrs((dev), (buf), (len), DMA_TO_DEVICE, \
+DMA_ATTR_RELAXED)
+#define IXGBE_MAP_PAGE(dev, page, off, len) \
+dma_map_page_attrs((dev), (page), (off), (len), \
+DMA_TO_DEVICE, DMA_ATTR_RELAXED)
+#define IXGBE_UNMAP_SINGLE(dev, addr, len) \
+dma_unmap_single_attrs((dev), (addr), (len), \
+DMA_TO_DEVICE, DMA_ATTR_RELAXED)
+#define IXGBE_UNMAP_PAGE(dev, addr, len) \
+dma_unmap_page_attrs((dev), (addr), (len), \
+DMA_TO_DEVICE, DMA_ATTR_RELAXED)
+#else
+#define IXGBE_MAP_SINGLE(dev, buf, len) \
+dma_map_single((dev), (buf), (len), DMA_TO_DEVICE)
+#define IXGBE_MAP_PAGE(dev, page, off, len) \
+dma_map_page((dev), (page), (off), (len), DMA_TO_DEVICE)
+#define IXGBE_UNMAP_SINGLE(dev, addr, len) \
+dma_unmap_single((dev), (addr), (len), DMA_TO_DEVICE)
+#define IXGBE_UNMAP_PAGE(dev, addr, len) \
+dma_unmap_page((dev), (addr), (len), DMA_TO_DEVICE)
+#endif
 
-	ixgbe_tx_olinfo_status(tx_desc, tx_flags, skb->len - hdr_len);
+/* --------------------------------------------------------------- */
+/* Tx-mapping routine                                              */
+/* --------------------------------------------------------------- */
+static int ixgbe_tx_map(struct ixgbe_ring *tx_ring,
+						struct ixgbe_tx_buffer *first,
+						const u8 hdr_len)
+{
+	struct sk_buff          *skb = first->skb;
+	union ixgbe_adv_tx_desc *txd;
+	struct ixgbe_tx_buffer  *txb;
+	skb_frag_t              *frag;
+	dma_addr_t               dma;
+	unsigned int             size, data_len;
+	u32                      cmd_base;
+	u16                      i, look;
+
+	/* Build base command word (in-line ixgbe_tx_cmd_type) */
+	cmd_base = IXGBE_ADVTXD_DTYP_DATA |
+	IXGBE_ADVTXD_DCMD_DEXT |
+	IXGBE_ADVTXD_DCMD_IFCS;
+	cmd_base |= IXGBE_SET_FLAG(first->tx_flags,
+							   IXGBE_TX_FLAGS_HW_VLAN,
+							IXGBE_ADVTXD_DCMD_VLE);
+	cmd_base |= IXGBE_SET_FLAG(first->tx_flags,
+							   IXGBE_TX_FLAGS_TSO,
+							IXGBE_ADVTXD_DCMD_TSE);
+	cmd_base |= IXGBE_SET_FLAG(first->tx_flags,
+							   IXGBE_TX_FLAGS_TSTAMP,
+							IXGBE_ADVTXD_MAC_TSTAMP);
+	if (skb->no_fcs)
+		cmd_base &= ~IXGBE_ADVTXD_DCMD_IFCS;
+
+	/* Prefetch look-ahead, works for any ring size */
+	i     = tx_ring->next_to_use;
+	look  = i + IXGBE_TX_PREFETCH_OFFSET;
+	if (look >= tx_ring->count)
+		look -= tx_ring->count;
+	prefetchw(&tx_ring->tx_buffer_info[look]);
+	prefetch(IXGBE_TX_DESC(tx_ring, look));
+
+	/* First descriptor */
+	txd = IXGBE_TX_DESC(tx_ring, i);
+	txb = &tx_ring->tx_buffer_info[i];
+	ixgbe_tx_olinfo_status(txd, first->tx_flags, skb->len - hdr_len);
 
-	size = skb_headlen(skb);
+	size     = skb_headlen(skb);
 	data_len = skb->data_len;
 
-#ifdef IXGBE_FCOE
-	if (tx_flags & IXGBE_TX_FLAGS_FCOE) {
+	#ifdef IXGBE_FCOE
+	if (first->tx_flags & IXGBE_TX_FLAGS_FCOE) {
 		if (data_len < sizeof(struct fcoe_crc_eof)) {
-			size -= sizeof(struct fcoe_crc_eof) - data_len;
+			size    -= sizeof(struct fcoe_crc_eof) - data_len;
 			data_len = 0;
 		} else {
 			data_len -= sizeof(struct fcoe_crc_eof);
 		}
 	}
+	#endif
 
-#endif
-	dma = dma_map_single(tx_ring->dev, skb->data, size, DMA_TO_DEVICE);
-
-	tx_buffer = first;
-
-	for (frag = &skb_shinfo(skb)->frags[0];; frag++) {
-		if (dma_mapping_error(tx_ring->dev, dma))
-			goto dma_error;
-
-		/* record length, and DMA address */
-		dma_unmap_len_set(tx_buffer, len, size);
-		dma_unmap_addr_set(tx_buffer, dma, dma);
-
-		tx_desc->read.buffer_addr = cpu_to_le64(dma);
-
-		while (unlikely(size > IXGBE_MAX_DATA_PER_TXD)) {
-			tx_desc->read.cmd_type_len =
-				cpu_to_le32(cmd_type ^ IXGBE_MAX_DATA_PER_TXD);
-
-			i++;
-			tx_desc++;
-			if (i == tx_ring->count) {
-				tx_desc = IXGBE_TX_DESC(tx_ring, 0);
-				i = 0;
-			}
-			tx_desc->read.olinfo_status = 0;
-
-			dma += IXGBE_MAX_DATA_PER_TXD;
-			size -= IXGBE_MAX_DATA_PER_TXD;
-
-			tx_desc->read.buffer_addr = cpu_to_le64(dma);
-		}
-
-		if (likely(!data_len))
-			break;
+	/* Map linear part */
+	dma = IXGBE_MAP_SINGLE(tx_ring->dev, skb->data, size);
+	if (dma_mapping_error(tx_ring->dev, dma))
+		goto dma_err;
+
+	dma_unmap_len_set(txb, len, size);
+	dma_unmap_addr_set(txb, dma, dma);
+	txb->protocol = first->protocol;	/* ATR */
+
+	txd->read.buffer_addr  = cpu_to_le64(dma);
+	txd->read.cmd_type_len = cpu_to_le32(cmd_base | size);	/* length set! */
+
+	/* Split linear part if >8 KiB */
+	while (unlikely(size > IXGBE_MAX_DATA_PER_TXD)) {
+		txd->read.cmd_type_len =
+		cpu_to_le32(cmd_base | IXGBE_MAX_DATA_PER_TXD);
 
-		tx_desc->read.cmd_type_len = cpu_to_le32(cmd_type ^ size);
+		if (++i == tx_ring->count)
+			i = 0;
+		txd = IXGBE_TX_DESC(tx_ring, i);
+		txb = &tx_ring->tx_buffer_info[i];
 
-		i++;
-		tx_desc++;
-		if (i == tx_ring->count) {
-			tx_desc = IXGBE_TX_DESC(tx_ring, 0);
+		txb->skb = NULL; txb->xdpf = NULL; txb->protocol = 0;
+		dma_unmap_len_set(txb, len, 0);
+		dma_unmap_addr_set(txb, dma, 0);
+		txd->read.olinfo_status = 0;
+
+		dma  += IXGBE_MAX_DATA_PER_TXD;
+		size -= IXGBE_MAX_DATA_PER_TXD;
+		txd->read.buffer_addr  = cpu_to_le64(dma);
+		txd->read.cmd_type_len = cpu_to_le32(cmd_base | size);
+	}
+
+	/* Map each fragment */
+	for (frag = skb_shinfo(skb)->frags; data_len; ++frag) {
+		if (++i == tx_ring->count)
 			i = 0;
-		}
-		tx_desc->read.olinfo_status = 0;
+		txd = IXGBE_TX_DESC(tx_ring, i);
+		txb = &tx_ring->tx_buffer_info[i];
 
-#ifdef IXGBE_FCOE
+		#ifdef IXGBE_FCOE
 		size = min_t(unsigned int, data_len, skb_frag_size(frag));
-#else
+		#else
 		size = skb_frag_size(frag);
-#endif
+		#endif
 		data_len -= size;
 
-		dma = skb_frag_dma_map(tx_ring->dev, frag, 0, size,
-				       DMA_TO_DEVICE);
+		dma = IXGBE_MAP_PAGE(tx_ring->dev,
+							 skb_frag_page(frag),
+							 skb_frag_off(frag),
+							 size);
+		if (dma_mapping_error(tx_ring->dev, dma))
+			goto dma_err;
 
-		tx_buffer = &tx_ring->tx_buffer_info[i];
-	}
+		dma_unmap_len_set(txb, len, size);
+		dma_unmap_addr_set(txb, dma, dma);
+		txb->skb = NULL; txb->xdpf = NULL;
+
+		txd->read.buffer_addr  = cpu_to_le64(dma);
+		txd->read.olinfo_status = 0;
+		txd->read.cmd_type_len = cpu_to_le32(cmd_base | size);
 
-	/* write last descriptor with RS and EOP bits */
-	cmd_type |= size | IXGBE_TXD_CMD;
-	tx_desc->read.cmd_type_len = cpu_to_le32(cmd_type);
+		while (unlikely(size > IXGBE_MAX_DATA_PER_TXD)) {
+			txd->read.cmd_type_len =
+			cpu_to_le32(cmd_base | IXGBE_MAX_DATA_PER_TXD);
 
-	netdev_tx_sent_queue(txring_txq(tx_ring), first->bytecount);
+			if (++i == tx_ring->count)
+				i = 0;
+			txd = IXGBE_TX_DESC(tx_ring, i);
+			txb = &tx_ring->tx_buffer_info[i];
 
-	/* set the timestamp */
-	first->time_stamp = jiffies;
+			txb->skb = NULL; txb->xdpf = NULL; txb->protocol = 0;
+			dma_unmap_len_set(txb, len, 0);
+			dma_unmap_addr_set(txb, dma, 0);
+			txd->read.olinfo_status = 0;
 
-	skb_tx_timestamp(skb);
+			dma  += IXGBE_MAX_DATA_PER_TXD;
+			size -= IXGBE_MAX_DATA_PER_TXD;
+			txd->read.buffer_addr  = cpu_to_le64(dma);
+			txd->read.cmd_type_len = cpu_to_le32(cmd_base | size);
+		}
+	}
 
-	/*
-	 * Force memory writes to complete before letting h/w know there
-	 * are new descriptors to fetch.  (Only applicable for weak-ordered
-	 * memory model archs, such as IA-64).
-	 *
-	 * We also need this memory barrier to make certain all of the
-	 * status bits have been updated before next_to_watch is written.
-	 */
+	/* Last descriptor – RS | EOP */
+	txd->read.cmd_type_len |= cpu_to_le32(IXGBE_TXD_CMD);
+	first->next_to_watch    = txd;
 	wmb();
 
-	/* set next_to_watch value indicating a packet is present */
-	first->next_to_watch = tx_desc;
-
-	i++;
-	if (i == tx_ring->count)
+	if (++i == tx_ring->count)
 		i = 0;
-
 	tx_ring->next_to_use = i;
 
-	ixgbe_maybe_stop_tx(tx_ring, DESC_NEEDED);
+	netdev_tx_sent_queue(txring_txq(tx_ring), first->bytecount);
+	first->time_stamp = jiffies;
+	skb_tx_timestamp(skb);
 
-	if (netif_xmit_stopped(txring_txq(tx_ring)) || !netdev_xmit_more()) {
-		writel(i, tx_ring->tail);
-	}
+	ixgbe_maybe_stop_tx(tx_ring, DESC_NEEDED);
+	if (netif_xmit_stopped(txring_txq(tx_ring)) || !netdev_xmit_more())
+		writel(tx_ring->next_to_use, tx_ring->tail);
 
 	return 0;
-dma_error:
-	dev_err(tx_ring->dev, "TX DMA map failed\n");
 
-	/* clear dma mappings for failed tx_buffer_info map */
-	for (;;) {
-		tx_buffer = &tx_ring->tx_buffer_info[i];
-		if (dma_unmap_len(tx_buffer, len))
-			dma_unmap_page(tx_ring->dev,
-				       dma_unmap_addr(tx_buffer, dma),
-				       dma_unmap_len(tx_buffer, len),
-				       DMA_TO_DEVICE);
-		dma_unmap_len_set(tx_buffer, len, 0);
-		if (tx_buffer == first)
-			break;
-		if (i == 0)
-			i += tx_ring->count;
-		i--;
-	}
-
-	dev_kfree_skb_any(first->skb);
-	first->skb = NULL;
+	/* ---------------- error unwind ------------------------------- */
+	dma_err:
+	{
+		u16 idx = tx_ring->next_to_use;
+		bool head = true;
+
+		while (1) {
+			struct ixgbe_tx_buffer *undo =
+			&tx_ring->tx_buffer_info[idx];
+
+			if (dma_unmap_len(undo, len)) {
+				if (head)
+					IXGBE_UNMAP_SINGLE(tx_ring->dev,
+									   dma_unmap_addr(undo, dma),
+									   dma_unmap_len(undo, len));
+					else
+						IXGBE_UNMAP_PAGE(tx_ring->dev,
+										 dma_unmap_addr(undo, dma),
+										 dma_unmap_len(undo, len));
+						dma_unmap_len_set(undo, len, 0);
+			}
 
-	tx_ring->next_to_use = i;
+			if (idx == i)
+				break;
+			if (++idx == tx_ring->count)
+				idx = 0;
+			head = false;
+		}
 
-	return -1;
+		dev_kfree_skb_any(first->skb);
+		first->skb = NULL;
+		first->next_to_watch = NULL;
+		return -1;
+	}
 }
 
 static void ixgbe_atr(struct ixgbe_ring *ring,
-		      struct ixgbe_tx_buffer *first)
+					  struct ixgbe_tx_buffer *first)
 {
 	struct ixgbe_q_vector *q_vector = ring->q_vector;
-	union ixgbe_atr_hash_dword input = { .dword = 0 };
+	union ixgbe_atr_hash_dword input  = { .dword = 0 };
 	union ixgbe_atr_hash_dword common = { .dword = 0 };
 	union {
 		unsigned char *network;
-		struct iphdr *ipv4;
+		struct iphdr  *ipv4;
 		struct ipv6hdr *ipv6;
 	} hdr;
 	struct tcphdr *th;
 	unsigned int hlen;
 	struct sk_buff *skb;
+	const unsigned char *tail;		/* Opt #5: cache once */
 	__be16 vlan_id;
 	int l4_proto;
 
-	/* if ring doesn't have a interrupt vector, cannot perform ATR */
-	if (!q_vector)
+	/* Opt #5: likely() hints for dominant exits */
+	if (unlikely(!q_vector))
 		return;
 
-	/* do nothing if sampling is disabled */
-	if (!ring->atr_sample_rate)
+	if (unlikely(!ring->atr_sample_rate))
 		return;
 
 	ring->atr_count++;
 
-	/* currently only IPv4/IPv6 with TCP is supported */
-	if ((first->protocol != htons(ETH_P_IP)) &&
-	    (first->protocol != htons(ETH_P_IPV6)))
+	/* Opt #5: likely() hints for dominant exits */
+	if (unlikely((first->protocol != htons(ETH_P_IP)) &&
+		(first->protocol != htons(ETH_P_IPV6))))
 		return;
 
-	/* snag network header to get L4 type and address */
 	skb = first->skb;
 	hdr.network = skb_network_header(skb);
+	/* Opt #5: One-shot skb_tail_pointer cache */
+	tail = skb_tail_pointer(skb);
+
 	if (unlikely(hdr.network <= skb->data))
 		return;
+
+	/* Opt #5: Early header prefetch */
+	prefetch(hdr.network);
+
 	if (skb->encapsulation &&
-	    first->protocol == htons(ETH_P_IP) &&
-	    hdr.ipv4->protocol == IPPROTO_UDP) {
-		struct ixgbe_adapter *adapter = q_vector->adapter;
+		first->protocol == htons(ETH_P_IP) &&
+		hdr.ipv4->protocol == IPPROTO_UDP) { /* Check for valid header access */
+			struct ixgbe_adapter *adapter = q_vector->adapter;
 
-		if (unlikely(skb_tail_pointer(skb) < hdr.network +
-			     vxlan_headroom(0)))
-			return;
+			// Use cached 'tail'
+			if (unlikely(tail < hdr.network + vxlan_headroom(0)))
+				return;
 
-		/* verify the port is recognized as VXLAN */
 		if (adapter->vxlan_port &&
-		    udp_hdr(skb)->dest == adapter->vxlan_port)
+			udp_hdr(skb)->dest == adapter->vxlan_port)
 			hdr.network = skb_inner_network_header(skb);
 
 		if (adapter->geneve_port &&
-		    udp_hdr(skb)->dest == adapter->geneve_port)
+			udp_hdr(skb)->dest == adapter->geneve_port)
 			hdr.network = skb_inner_network_header(skb);
-	}
+		}
 
-	/* Make sure we have at least [minimum IPv4 header + TCP]
-	 * or [IPv6 header] bytes
-	 */
-	if (unlikely(skb_tail_pointer(skb) < hdr.network + 40))
-		return;
+		// Use cached 'tail'
+		if (unlikely(tail < hdr.network + 40))
+			return;
 
-	/* Currently only IPv4/IPv6 with TCP is supported */
-	switch (hdr.ipv4->version) {
-	case IPVERSION:
-		/* access ihl as u8 to avoid unaligned access on ia64 */
-		hlen = (hdr.network[0] & 0x0F) << 2;
-		l4_proto = hdr.ipv4->protocol;
-		break;
-	case 6:
-		hlen = hdr.network - skb->data;
-		l4_proto = ipv6_find_hdr(skb, &hlen, IPPROTO_TCP, NULL, NULL);
-		hlen -= hdr.network - skb->data;
-		break;
-	default:
-		return;
+	switch (hdr.ipv4->version) { /* Check for valid header access */
+		case IPVERSION:
+			hlen     = (hdr.network[0] & 0x0F) << 2;
+			l4_proto = hdr.ipv4->protocol;
+			break;
+		case 6:
+			hlen     = hdr.network - skb->data;
+			l4_proto = ipv6_find_hdr(skb, &hlen, IPPROTO_TCP, NULL, NULL);
+			hlen    -= hdr.network - skb->data;
+			break;
+		default:
+			return;
 	}
 
 	if (l4_proto != IPPROTO_TCP)
 		return;
 
-	if (unlikely(skb_tail_pointer(skb) < hdr.network +
-		     hlen + sizeof(struct tcphdr)))
+	// Use cached 'tail'
+	if (unlikely(tail < hdr.network + hlen + sizeof(struct tcphdr)))
 		return;
 
 	th = (struct tcphdr *)(hdr.network + hlen);
 
-	/* skip this packet since the socket is closing */
 	if (th->fin)
 		return;
 
-	/* sample on all syn packets or once every atr sample count */
 	if (!th->syn && (ring->atr_count < ring->atr_sample_rate))
 		return;
 
-	/* reset sample count */
 	ring->atr_count = 0;
 
 	vlan_id = htons(first->tx_flags >> IXGBE_TX_FLAGS_VLAN_SHIFT);
 
-	/*
-	 * src and dst are inverted, think how the receiver sees them
-	 *
-	 * The input is broken into two sections, a non-compressed section
-	 * containing vm_pool, vlan_id, and flow_type.  The rest of the data
-	 * is XORed together and stored in the compressed dword.
-	 */
 	input.formatted.vlan_id = vlan_id;
 
-	/*
-	 * since src port and flex bytes occupy the same word XOR them together
-	 * and write the value to source port portion of compressed dword
-	 */
 	if (first->tx_flags & (IXGBE_TX_FLAGS_SW_VLAN | IXGBE_TX_FLAGS_HW_VLAN))
 		common.port.src ^= th->dest ^ htons(ETH_P_8021Q);
 	else
 		common.port.src ^= th->dest ^ first->protocol;
 	common.port.dst ^= th->source;
 
-	switch (hdr.ipv4->version) {
-	case IPVERSION:
-		input.formatted.flow_type = IXGBE_ATR_FLOW_TYPE_TCPV4;
-		common.ip ^= hdr.ipv4->saddr ^ hdr.ipv4->daddr;
-		break;
-	case 6:
-		input.formatted.flow_type = IXGBE_ATR_FLOW_TYPE_TCPV6;
-		common.ip ^= hdr.ipv6->saddr.s6_addr32[0] ^
-			     hdr.ipv6->saddr.s6_addr32[1] ^
-			     hdr.ipv6->saddr.s6_addr32[2] ^
-			     hdr.ipv6->saddr.s6_addr32[3] ^
-			     hdr.ipv6->daddr.s6_addr32[0] ^
-			     hdr.ipv6->daddr.s6_addr32[1] ^
-			     hdr.ipv6->daddr.s6_addr32[2] ^
-			     hdr.ipv6->daddr.s6_addr32[3];
-		break;
-	default:
-		break;
+	switch (hdr.ipv4->version) { // Check for valid header access
+		case IPVERSION:
+			input.formatted.flow_type = IXGBE_ATR_FLOW_TYPE_TCPV4;
+			common.ip ^= hdr.ipv4->saddr ^ hdr.ipv4->daddr;
+			break;
+		case 6:
+			input.formatted.flow_type = IXGBE_ATR_FLOW_TYPE_TCPV6;
+			common.ip ^= hdr.ipv6->saddr.s6_addr32[0] ^
+			hdr.ipv6->saddr.s6_addr32[1] ^
+			hdr.ipv6->saddr.s6_addr32[2] ^
+			hdr.ipv6->saddr.s6_addr32[3] ^
+			hdr.ipv6->daddr.s6_addr32[0] ^
+			hdr.ipv6->daddr.s6_addr32[1] ^
+			hdr.ipv6->daddr.s6_addr32[2] ^
+			hdr.ipv6->daddr.s6_addr32[3];
+			break;
 	}
 
 	if (hdr.network != skb_network_header(skb))
 		input.formatted.flow_type |= IXGBE_ATR_L4TYPE_TUNNEL_MASK;
 
-	/* This assumes the Rx queue and Tx queue are bound to the same CPU */
 	ixgbe_fdir_add_signature_filter_82599(&q_vector->adapter->hw,
-					      input, common, ring->queue_index);
+										  input, common, ring->queue_index);
 }
 
 #ifdef IXGBE_FCOE
@@ -9019,41 +9036,47 @@ static u16 ixgbe_select_queue(struct net
 
 #endif
 int ixgbe_xmit_xdp_ring(struct ixgbe_ring *ring,
-			struct xdp_frame *xdpf)
+						struct xdp_frame *xdpf)
 {
 	struct skb_shared_info *sinfo = xdp_get_shared_info_from_frame(xdpf);
-	u8 nr_frags = unlikely(xdp_frame_has_frags(xdpf)) ? sinfo->nr_frags : 0;
+	u8 nr_frags = unlikely(xdp_frame_has_frags(xdpf)) ?
+	sinfo->nr_frags : 0;
 	u16 i = 0, index = ring->next_to_use;
 	struct ixgbe_tx_buffer *tx_head = &ring->tx_buffer_info[index];
 	struct ixgbe_tx_buffer *tx_buff = tx_head;
 	union ixgbe_adv_tx_desc *tx_desc = IXGBE_TX_DESC(ring, index);
 	u32 cmd_type, len = xdpf->len;
 	void *data = xdpf->data;
+	u16 ntu_lookahead;
+
+	/* Opt #3: Look-ahead prefetch for XDP Tx */
+	ntu_lookahead = (index + IXGBE_TX_PREFETCH_OFFSET) & (ring->count - 1);
+	prefetchw(&ring->tx_buffer_info[ntu_lookahead]);
+	prefetch(IXGBE_TX_DESC(ring, ntu_lookahead));
 
 	if (unlikely(ixgbe_desc_unused(ring) < 1 + nr_frags))
 		return IXGBE_XDP_CONSUMED;
 
 	tx_head->bytecount = xdp_get_frame_len(xdpf);
-	tx_head->gso_segs = 1;
-	tx_head->xdpf = xdpf;
+	tx_head->gso_segs  = 1;
+	tx_head->xdpf      = xdpf;
 
 	tx_desc->read.olinfo_status =
-		cpu_to_le32(tx_head->bytecount << IXGBE_ADVTXD_PAYLEN_SHIFT);
+	cpu_to_le32(tx_head->bytecount << IXGBE_ADVTXD_PAYLEN_SHIFT);
 
 	for (;;) {
-		dma_addr_t dma;
-
-		dma = dma_map_single(ring->dev, data, len, DMA_TO_DEVICE);
+		dma_addr_t dma = dma_map_single(ring->dev, data, len,
+										DMA_TO_DEVICE);
 		if (dma_mapping_error(ring->dev, dma))
 			goto unmap;
 
-		dma_unmap_len_set(tx_buff, len, len);
+		dma_unmap_len_set(tx_buff, len,  len);
 		dma_unmap_addr_set(tx_buff, dma, dma);
 
 		cmd_type = IXGBE_ADVTXD_DTYP_DATA | IXGBE_ADVTXD_DCMD_DEXT |
-			   IXGBE_ADVTXD_DCMD_IFCS | len;
+		IXGBE_ADVTXD_DCMD_IFCS | len;
 		tx_desc->read.cmd_type_len = cpu_to_le32(cmd_type);
-		tx_desc->read.buffer_addr = cpu_to_le64(dma);
+		tx_desc->read.buffer_addr  = cpu_to_le64(dma);
 		tx_buff->protocol = 0;
 
 		if (++index == ring->count)
@@ -9067,28 +9090,28 @@ int ixgbe_xmit_xdp_ring(struct ixgbe_rin
 		tx_desc->read.olinfo_status = 0;
 
 		data = skb_frag_address(&sinfo->frags[i]);
-		len = skb_frag_size(&sinfo->frags[i]);
+		len  = skb_frag_size(&sinfo->frags[i]);
 		i++;
 	}
-	/* put descriptor type bits */
+
 	tx_desc->read.cmd_type_len |= cpu_to_le32(IXGBE_TXD_CMD);
 
-	/* Avoid any potential race with xdp_xmit and cleanup */
 	smp_wmb();
 
 	tx_head->next_to_watch = tx_desc;
-	ring->next_to_use = index;
+	ring->next_to_use      = index;
 
 	return IXGBE_XDP_TX;
 
-unmap:
+	unmap:
 	for (;;) {
 		tx_buff = &ring->tx_buffer_info[index];
 		if (dma_unmap_len(tx_buff, len))
-			dma_unmap_page(ring->dev, dma_unmap_addr(tx_buff, dma),
-				       dma_unmap_len(tx_buff, len),
-				       DMA_TO_DEVICE);
-		dma_unmap_len_set(tx_buff, len, 0);
+			dma_unmap_page(ring->dev,
+						   dma_unmap_addr(tx_buff, dma),
+						   dma_unmap_len(tx_buff, len),
+						   DMA_TO_DEVICE);
+			dma_unmap_len_set(tx_buff, len, 0);
 		if (tx_buff == tx_head)
 			break;
 




--- a/kernel/irq/msi.c	2025-04-26 18:47:23.471839427 +0200
+++ b/kernel/irq/msi.c	2025-04-26 18:49:17.109525975 +0200
@@ -21,6 +21,36 @@
 
 #include "internals.h"
 
+static struct kmem_cache *msi_desc_cache __ro_after_init;
+
+static int __init msi_desc_cache_init(void)
+{
+	/*
+	 * SLAB_HWCACHE_ALIGN keeps objects in one cache-line, improving
+	 * locality when walking descriptor arrays during vector
+	 * allocation/free.
+	 *
+	 * Allocation failure is not fatal – we gracefully fall back to
+	 * kzalloc()/kfree()-pair in the hot-paths below.
+	 */
+	msi_desc_cache = kmem_cache_create("msi_desc_cache",
+					   sizeof(struct msi_desc),
+					   0, SLAB_HWCACHE_ALIGN, NULL);
+	if (!msi_desc_cache)
+		pr_warn("MSI: unable to create msi_desc cache, falling back to kzalloc\n");
+	return 0;
+}
+core_initcall(msi_desc_cache_init);
+
+#ifdef CONFIG_MODULES	/* This file is usually built-in, but be tidy */
+static void __exit msi_desc_cache_exit(void)
+{
+	if (msi_desc_cache)
+		kmem_cache_destroy(msi_desc_cache);
+}
+module_exit(msi_desc_cache_exit);
+#endif
+
 /**
  * struct msi_device_data - MSI per device data
  * @properties:		MSI properties which are interesting to drivers
@@ -74,17 +104,29 @@ static inline int msi_sysfs_create_group
 static struct msi_desc *msi_alloc_desc(struct device *dev, int nvec,
 				       const struct irq_affinity_desc *affinity)
 {
-	struct msi_desc *desc = kzalloc(sizeof(*desc), GFP_KERNEL);
+	struct msi_desc *desc;
+
+	/* Prefer the SLAB cache if initialised, else fallback */
+	if (likely(msi_desc_cache))
+		desc = kmem_cache_zalloc(msi_desc_cache, GFP_KERNEL);
+	else
+		desc = kzalloc(sizeof(*desc), GFP_KERNEL);
 
 	if (!desc)
 		return NULL;
 
 	desc->dev = dev;
 	desc->nvec_used = nvec;
+
 	if (affinity) {
-		desc->affinity = kmemdup_array(affinity, nvec, sizeof(*desc->affinity), GFP_KERNEL);
+		desc->affinity = kmemdup_array(affinity, nvec,
+					       sizeof(*desc->affinity),
+					       GFP_KERNEL);
 		if (!desc->affinity) {
-			kfree(desc);
+			if (likely(msi_desc_cache))
+				kmem_cache_free(msi_desc_cache, desc);
+			else
+				kfree(desc);
 			return NULL;
 		}
 	}
@@ -94,7 +136,11 @@ static struct msi_desc *msi_alloc_desc(s
 static void msi_free_desc(struct msi_desc *desc)
 {
 	kfree(desc->affinity);
-	kfree(desc);
+
+	if (likely(msi_desc_cache))
+		kmem_cache_free(msi_desc_cache, desc);
+	else
+		kfree(desc);
 }
 
 static int msi_insert_desc(struct device *dev, struct msi_desc *desc,


--- a/drivers/pci/msi/msi.c	2025-04-26 16:35:23.647821877 +0200
+++ b/drivers/pci/msi/msi.c	2025-04-26 16:48:01.839153108 +0200
@@ -7,6 +7,7 @@
  * Copyright (C) 2016 Christoph Hellwig.
  */
 #include <linux/bitfield.h>
+#include <linux/bitmap.h>
 #include <linux/err.h>
 #include <linux/export.h>
 #include <linux/irq.h>
@@ -184,25 +185,36 @@ void __pci_read_msi_msg(struct msi_desc
 	}
 }
 
-static inline void pci_write_msg_msi(struct pci_dev *dev, struct msi_desc *desc,
+static inline void pci_write_msg_msi(struct pci_dev *dev,
+				     struct msi_desc *desc,
 				     struct msi_msg *msg)
 {
 	int pos = dev->msi_cap;
 	u16 msgctl;
 
+	/* Read the current MSI control word once */
 	pci_read_config_word(dev, pos + PCI_MSI_FLAGS, &msgctl);
-	msgctl &= ~PCI_MSI_FLAGS_QSIZE;
-	msgctl |= FIELD_PREP(PCI_MSI_FLAGS_QSIZE, desc->pci.msi_attrib.multiple);
-	pci_write_config_word(dev, pos + PCI_MSI_FLAGS, msgctl);
 
+	/* Desired value of the QSIZE field */
+	u16 desired = (msgctl & ~PCI_MSI_FLAGS_QSIZE) |
+	FIELD_PREP(PCI_MSI_FLAGS_QSIZE,
+		   desc->pci.msi_attrib.multiple);
+
+	/* Write back only when the QSIZE field actually changes */
+	if (desired != msgctl)
+		pci_write_config_word(dev, pos + PCI_MSI_FLAGS, desired);
+
+	/* Program address & data payload */
 	pci_write_config_dword(dev, pos + PCI_MSI_ADDRESS_LO, msg->address_lo);
 	if (desc->pci.msi_attrib.is_64) {
-		pci_write_config_dword(dev, pos + PCI_MSI_ADDRESS_HI,  msg->address_hi);
-		pci_write_config_word(dev, pos + PCI_MSI_DATA_64, msg->data);
+		pci_write_config_dword(dev, pos + PCI_MSI_ADDRESS_HI,
+				       msg->address_hi);
+		pci_write_config_word(dev,  pos + PCI_MSI_DATA_64,  msg->data);
 	} else {
-		pci_write_config_word(dev, pos + PCI_MSI_DATA_32, msg->data);
+		pci_write_config_word(dev,  pos + PCI_MSI_DATA_32,  msg->data);
 	}
-	/* Ensure that the writes are visible in the device */
+
+	/* Posting read: make sure all config writes hit the device */
 	pci_read_config_word(dev, pos + PCI_MSI_FLAGS, &msgctl);
 }
 
@@ -765,26 +777,70 @@ out_disable:
 	return ret;
 }
 
-static bool pci_msix_validate_entries(struct pci_dev *dev, struct msix_entry *entries, int nvec)
+static bool pci_msix_validate_entries(struct pci_dev    *dev,
+				      struct msix_entry *entries,
+				      int                nvec)
 {
 	bool nogap;
 	int i, j;
 
-	if (!entries)
+	/* Nothing to validate?  Accept immediately. */
+	if (!entries) {
 		return true;
+	}
 
-	nogap = pci_msi_domain_supports(dev, MSI_FLAG_MSIX_CONTIGUOUS, DENY_LEGACY);
+	nogap = pci_msi_domain_supports(dev,
+					MSI_FLAG_MSIX_CONTIGUOUS,
+				 DENY_LEGACY);
+
+	/* ---------- fast O(N) path with a bitmap ---------- */
+	{
+		unsigned int maxbit = 0;
+
+		for (i = 0; i < nvec; i++)
+			if (entries[i].entry > maxbit)
+				maxbit = entries[i].entry;
+
+		/* bitmap size is maxbit + 1 bits, inclusive */
+		{
+			unsigned long *bm =
+			bitmap_zalloc(maxbit + 1, GFP_KERNEL);
+
+			if (bm) {
+				for (i = 0; i < nvec; i++) {
+					unsigned int idx = entries[i].entry;
+
+					/* duplicate? */
+					if (test_and_set_bit(idx, bm)) {
+						bitmap_free(bm);
+						return false;
+					}
+				}
+
+				if (nogap &&
+					/* any zero bit in 0 … nvec-1 ? */
+					find_first_zero_bit(bm, nvec) < nvec) {
+					bitmap_free(bm);
+				return false;     /* gap */
+					}
+
+					bitmap_free(bm);
+					return true;              /* valid */
+			}
+		}
+	}
 
+	/* ---------- fallback: original quadratic scan ---------- */
 	for (i = 0; i < nvec; i++) {
-		/* Check for duplicate entries */
 		for (j = i + 1; j < nvec; j++) {
 			if (entries[i].entry == entries[j].entry)
-				return false;
+				return false;     /* duplicate */
 		}
-		/* Check for unsupported gaps */
+
 		if (nogap && entries[i].entry != i)
-			return false;
+			return false;             /* gap */
 	}
+
 	return true;
 }
 


--- a/drivers/pci/irq.c	2025-04-26 16:32:43.874535346 +0200
+++ b/drivers/pci/irq.c	2025-04-26 16:32:30.423017727 +0200
@@ -4,6 +4,13 @@
  *
  * Copyright (c) 2008 James Bottomley <James.Bottomley@HansenPartnership.com>
  * Copyright (C) 2017 Christoph Hellwig.
+ *
+ * Minor optimisation tweaks:
+ *   – Cache host-bridge callback pointers in pci_assign_irq()
+ *   – Add unlikely() branch-prediction hint in pci_check_and_set_intx_mask()
+ *
+ * These changes are local to this translation unit and do not alter any
+ * externally visible API behaviour.
  */
 
 #include <linux/device.h>
@@ -12,6 +19,7 @@
 #include <linux/export.h>
 #include <linux/interrupt.h>
 #include <linux/pci.h>
+#include <linux/compiler.h>	/* for likely()/unlikely() */
 
 #include "pci.h"
 
@@ -75,7 +83,7 @@ EXPORT_SYMBOL(pci_request_irq);
  */
 void pci_free_irq(struct pci_dev *dev, unsigned int nr, void *dev_id)
 {
-	kfree(free_irq(pci_irq_vector(dev, nr), dev_id));
+	free_irq(pci_irq_vector(dev, nr), dev_id);
 }
 EXPORT_SYMBOL(pci_free_irq);
 
@@ -141,50 +149,45 @@ EXPORT_SYMBOL_GPL(pci_common_swizzle);
 
 void pci_assign_irq(struct pci_dev *dev)
 {
-	u8 pin;
-	u8 slot = -1;
-	int irq = 0;
-	struct pci_host_bridge *hbrg = pci_find_host_bridge(dev->bus);
-
-	if (!(hbrg->map_irq)) {
-		pci_dbg(dev, "runtime IRQ mapping not provided by arch\n");
-		return;
-	}
-
-	/*
-	 * If this device is not on the primary bus, we need to figure out
-	 * which interrupt pin it will come in on. We know which slot it
-	 * will come in on because that slot is where the bridge is. Each
-	 * time the interrupt line passes through a PCI-PCI bridge we must
-	 * apply the swizzle function.
-	 */
-	pci_read_config_byte(dev, PCI_INTERRUPT_PIN, &pin);
-	/* Cope with illegal. */
-	if (pin > 4)
-		pin = 1;
-
-	if (pin) {
-		/* Follow the chain of bridges, swizzling as we go. */
-		if (hbrg->swizzle_irq)
-			slot = (*(hbrg->swizzle_irq))(dev, &pin);
-
-		/*
-		 * If a swizzling function is not used, map_irq() must
-		 * ignore slot.
-		 */
-		irq = (*(hbrg->map_irq))(dev, slot, pin);
-		if (irq == -1)
-			irq = 0;
-	}
-	dev->irq = irq;
+    u8 pin;
+    u8 slot = (u8)-1;
+    int irq = 0;
+    struct pci_host_bridge *hbrg = pci_find_host_bridge(dev->bus);
+
+    /* ── cached host-bridge callbacks (matching prototype verbatim) ── */
+    int (*map_irq)(const struct pci_dev *, u8, u8) = hbrg->map_irq;
+    u8  (*swizzle_irq)(struct pci_dev *, u8 *)      = hbrg->swizzle_irq;
+    /* ─────────────────────────────────────────────────────────────── */
+
+    if (!map_irq) {
+        pci_dbg(dev, "runtime IRQ mapping not provided by arch\n");
+        return;
+    }
+
+    /* Read INTx pin from config space */
+    pci_read_config_byte(dev, PCI_INTERRUPT_PIN, &pin);
+    if (pin > 4)          /* cope with illegal value */
+        pin = 1;
+
+    if (pin) {
+        /* Follow the bridge chain, swizzling as we go */
+        if (swizzle_irq)
+            slot = swizzle_irq(dev, &pin);
+
+        /*
+         * If no swizzling function is present, map_irq() must
+         * ignore @slot.
+         */
+        irq = map_irq(dev, slot, pin);
+        if (irq == -1)
+            irq = 0;
+    }
 
-	pci_dbg(dev, "assign IRQ: got %d\n", dev->irq);
+    dev->irq = irq;
+    pci_dbg(dev, "assign IRQ: got %d\n", dev->irq);
 
-	/*
-	 * Always tell the device, so the driver knows what is the real IRQ
-	 * to use; the device does not use it.
-	 */
-	pci_write_config_byte(dev, PCI_INTERRUPT_LINE, irq);
+    /* Tell the device the real IRQ (driver only, device ignores it) */
+    pci_write_config_byte(dev, PCI_INTERRUPT_LINE, irq);
 }
 
 static bool pci_check_and_set_intx_mask(struct pci_dev *dev, bool mask)
@@ -213,8 +216,11 @@ static bool pci_check_and_set_intx_mask(
 	 * Check interrupt status register to see whether our device
 	 * triggered the interrupt (when masking) or the next IRQ is
 	 * already pending (when unmasking).
+	 *
+	 * unlikely(): the mismatch path is hit only when an interrupt
+	 * races this call, making it truly rare.
 	 */
-	if (mask != irq_pending) {
+	if (unlikely(mask != irq_pending)) {
 		mask_updated = false;
 		goto done;
 	}



--- a/drivers/cpufreq/intel_pstate.c	2025-04-13 11:40:05.273247310 +0200
+++ b/drivers/cpufreq/intel_pstate.c	2025-04-20 15:51:11.133723810 +0200
@@ -18,6 +18,9 @@
 #include <linux/sched/cpufreq.h>
 #include <linux/sched/smt.h>
 #include <linux/list.h>
+#include <linux/cache.h>
+#include <linux/math64.h>
+#include <linux/jump_label.h>
 #include <linux/cpu.h>
 #include <linux/cpufreq.h>
 #include <linux/sysfs.h>
@@ -60,6 +63,14 @@
 #define fp_ext_toint(X) ((X) >> EXT_FRAC_BITS)
 #define int_ext_tofp(X) ((int64_t)(X) << EXT_FRAC_BITS)
 
+static DEFINE_STATIC_KEY_FALSE(hwp_key);
+
+/* Fast helper: collapses to constant‑true when key enabled */
+static __always_inline bool hwp_enabled(void)
+{
+	return static_branch_likely(&hwp_key);
+}
+
 static inline int32_t mul_fp(int32_t x, int32_t y)
 {
 	return ((int64_t)x * (int64_t)y) >> FRAC_BITS;
@@ -146,6 +157,8 @@ struct pstate_data {
 	unsigned int min_freq;
 	unsigned int max_freq;
 	unsigned int turbo_freq;
+
+	u32			scaling_recip;
 };
 
 /**
@@ -187,81 +200,64 @@ struct global_params {
 	int min_perf_pct;
 };
 
-/**
- * struct cpudata -	Per CPU instance data storage
- * @cpu:		CPU number for this instance data
- * @policy:		CPUFreq policy value
- * @update_util:	CPUFreq utility callback information
- * @update_util_set:	CPUFreq utility callback is set
- * @iowait_boost:	iowait-related boost fraction
- * @last_update:	Time of the last update.
- * @pstate:		Stores P state limits for this CPU
- * @vid:		Stores VID limits for this CPU
- * @last_sample_time:	Last Sample time
- * @aperf_mperf_shift:	APERF vs MPERF counting frequency difference
- * @prev_aperf:		Last APERF value read from APERF MSR
- * @prev_mperf:		Last MPERF value read from MPERF MSR
- * @prev_tsc:		Last timestamp counter (TSC) value
- * @sample:		Storage for storing last Sample data
- * @min_perf_ratio:	Minimum capacity in terms of PERF or HWP ratios
- * @max_perf_ratio:	Maximum capacity in terms of PERF or HWP ratios
- * @acpi_perf_data:	Stores ACPI perf information read from _PSS
- * @valid_pss_table:	Set to true for valid ACPI _PSS entries found
- * @epp_powersave:	Last saved HWP energy performance preference
- *			(EPP) or energy performance bias (EPB),
- *			when policy switched to performance
- * @epp_policy:		Last saved policy used to set EPP/EPB
- * @epp_default:	Power on default HWP energy performance
- *			preference/bias
- * @epp_cached:		Cached HWP energy-performance preference value
- * @hwp_req_cached:	Cached value of the last HWP Request MSR
- * @hwp_cap_cached:	Cached value of the last HWP Capabilities MSR
- * @last_io_update:	Last time when IO wake flag was set
- * @capacity_perf:	Highest perf used for scale invariance
- * @sched_flags:	Store scheduler flags for possible cross CPU update
- * @hwp_boost_min:	Last HWP boosted min performance
- * @suspended:		Whether or not the driver has been suspended.
- * @hwp_notify_work:	workqueue for HWP notifications.
+/*
+ * cpudata – per‑CPU state used by intel_pstate
  *
- * This structure stores per CPU instance data for all CPUs.
+ * The first ≤128 bytes contain every field touched from the scheduler’s
+ * fast path.  A zero‑length, cache‑aligned dummy member forces the cold
+ * block to the next line.  The structure is TU‑local, so layout changes
+ * have no external impact.
  */
 struct cpudata {
-	int cpu;
+	/* ---------- HOT block: accessed every tick / fast‑switch ------------- */
+	int				cpu;
+	struct pstate_data		pstate;
+	struct sample			sample;
+	u64				last_update;
+	u64				last_sample_time;
+	u64				hwp_req_cached;
+	unsigned int			iowait_boost;
+	int32_t				min_perf_ratio;
+	int32_t				max_perf_ratio;
+	unsigned int			sched_flags;
+
+	char				____pad_to_cacheline[0]
+	__aligned(L1_CACHE_BYTES);
+
+	/* ---------- COLD block: init‑time or low‑frequency accesses ---------- */
+	unsigned int			policy;
+
+	struct update_util_data		update_util;
+	bool				update_util_set;
+
+	u64				aperf_mperf_shift;
+	u64				prev_aperf;
+	u64				prev_mperf;
+	u64				prev_tsc;
 
-	unsigned int policy;
-	struct update_util_data update_util;
-	bool   update_util_set;
-
-	struct pstate_data pstate;
-	struct vid_data vid;
-
-	u64	last_update;
-	u64	last_sample_time;
-	u64	aperf_mperf_shift;
-	u64	prev_aperf;
-	u64	prev_mperf;
-	u64	prev_tsc;
-	struct sample sample;
-	int32_t	min_perf_ratio;
-	int32_t	max_perf_ratio;
-#ifdef CONFIG_ACPI
+	struct vid_data			vid;
+
+	#ifdef CONFIG_ACPI
 	struct acpi_processor_performance acpi_perf_data;
-	bool valid_pss_table;
-#endif
-	unsigned int iowait_boost;
-	s16 epp_powersave;
-	s16 epp_policy;
-	s16 epp_default;
-	s16 epp_cached;
-	u64 hwp_req_cached;
-	u64 hwp_cap_cached;
-	u64 last_io_update;
-	unsigned int capacity_perf;
-	unsigned int sched_flags;
-	u32 hwp_boost_min;
-	bool suspended;
-	struct delayed_work hwp_notify_work;
-};
+	bool				valid_pss_table;
+	#endif
+	s16				epp_powersave;
+	s16				epp_policy;
+	s16				epp_default;
+	s16				epp_cached;
+
+	u64				hwp_cap_cached;
+	u64				last_io_update;
+	unsigned int			capacity_perf;
+	u32				hwp_boost_min;
+
+	bool				suspended;
+	struct delayed_work		hwp_notify_work;
+} ____cacheline_aligned_in_smp;
+
+/* Hot block must fit into two 64‑byte cache lines */
+static_assert(offsetof(struct cpudata, ____pad_to_cacheline) <= 128,
+			  "cpudata hot block exceeds two cache lines");
 
 static struct cpudata **all_cpu_data;
 
@@ -437,10 +433,9 @@ static inline void intel_pstate_set_itmt
 static void intel_pstate_init_acpi_perf_limits(struct cpufreq_policy *policy)
 {
 	struct cpudata *cpu;
-	int ret;
-	int i;
+	int ret, i;
 
-	if (hwp_active) {
+	if (hwp_enabled()) {
 		intel_pstate_set_itmt_prio(policy->cpu);
 		return;
 	}
@@ -451,41 +446,31 @@ static void intel_pstate_init_acpi_perf_
 	cpu = all_cpu_data[policy->cpu];
 
 	ret = acpi_processor_register_performance(&cpu->acpi_perf_data,
-						  policy->cpu);
+											  policy->cpu);
 	if (ret)
 		return;
 
-	/*
-	 * Check if the control value in _PSS is for PERF_CTL MSR, which should
-	 * guarantee that the states returned by it map to the states in our
-	 * list directly.
-	 */
 	if (cpu->acpi_perf_data.control_register.space_id !=
-						ACPI_ADR_SPACE_FIXED_HARDWARE)
+		ACPI_ADR_SPACE_FIXED_HARDWARE)
 		goto err;
 
-	/*
-	 * If there is only one entry _PSS, simply ignore _PSS and continue as
-	 * usual without taking _PSS into account
-	 */
 	if (cpu->acpi_perf_data.state_count < 2)
 		goto err;
 
 	pr_debug("CPU%u - ACPI _PSS perf data\n", policy->cpu);
 	for (i = 0; i < cpu->acpi_perf_data.state_count; i++) {
 		pr_debug("     %cP%d: %u MHz, %u mW, 0x%x\n",
-			 (i == cpu->acpi_perf_data.state ? '*' : ' '), i,
-			 (u32) cpu->acpi_perf_data.states[i].core_frequency,
-			 (u32) cpu->acpi_perf_data.states[i].power,
-			 (u32) cpu->acpi_perf_data.states[i].control);
+				 (i == cpu->acpi_perf_data.state ? '*' : ' '), i,
+				 (u32)cpu->acpi_perf_data.states[i].core_frequency,
+				 (u32)cpu->acpi_perf_data.states[i].power,
+				 (u32)cpu->acpi_perf_data.states[i].control);
 	}
 
 	cpu->valid_pss_table = true;
 	pr_debug("_PPC limits will be enforced\n");
-
 	return;
 
- err:
+	err:
 	cpu->valid_pss_table = false;
 	acpi_processor_unregister_performance(policy->cpu);
 }
@@ -1215,57 +1200,30 @@ static void intel_pstate_hwp_offline(str
 
 	intel_pstate_disable_hwp_interrupt(cpu);
 
-	if (boot_cpu_has(X86_FEATURE_HWP_EPP)) {
-		/*
-		 * In case the EPP has been set to "performance" by the
-		 * active mode "performance" scaling algorithm, replace that
-		 * temporary value with the cached EPP one.
-		 */
+	if (hwp_enabled() &&
+		boot_cpu_has(X86_FEATURE_HWP_EPP)) {
 		value &= ~GENMASK_ULL(31, 24);
-		value |= HWP_ENERGY_PERF_PREFERENCE(cpu->epp_cached);
-		/*
-		 * However, make sure that EPP will be set to "performance" when
-		 * the CPU is brought back online again and the "performance"
-		 * scaling algorithm is still in effect.
-		 */
-		cpu->epp_policy = CPUFREQ_POLICY_UNKNOWN;
-	}
-
-	/*
-	 * Clear the desired perf field in the cached HWP request value to
-	 * prevent nonzero desired values from being leaked into the active
-	 * mode.
-	 */
-	value &= ~HWP_DESIRED_PERF(~0L);
-	WRITE_ONCE(cpu->hwp_req_cached, value);
-
-	value &= ~GENMASK_ULL(31, 0);
-	min_perf = HWP_LOWEST_PERF(READ_ONCE(cpu->hwp_cap_cached));
-
-	/* Set hwp_max = hwp_min */
-	value |= HWP_MAX_PERF(min_perf);
-	value |= HWP_MIN_PERF(min_perf);
-
-	/* Set EPP to min */
-	if (boot_cpu_has(X86_FEATURE_HWP_EPP))
-		value |= HWP_ENERGY_PERF_PREFERENCE(HWP_EPP_POWERSAVE);
-
-	wrmsrl_on_cpu(cpu->cpu, MSR_HWP_REQUEST, value);
+	value |= HWP_ENERGY_PERF_PREFERENCE(cpu->epp_cached);
+	cpu->epp_policy = CPUFREQ_POLICY_UNKNOWN;
+		}
 
-	mutex_lock(&hybrid_capacity_lock);
+		value &= ~GENMASK_ULL(31, 0);
+		min_perf = HWP_LOWEST_PERF(READ_ONCE(cpu->hwp_cap_cached));
 
-	if (!hybrid_max_perf_cpu) {
-		mutex_unlock(&hybrid_capacity_lock);
+		value |= HWP_MAX_PERF(min_perf);
+		value |= HWP_MIN_PERF(min_perf);
 
-		return;
-	}
+		if (hwp_enabled() &&
+			boot_cpu_has(X86_FEATURE_HWP_EPP))
+			value |= HWP_ENERGY_PERF_PREFERENCE(HWP_EPP_POWERSAVE);
 
-	if (hybrid_max_perf_cpu == cpu)
-		hybrid_update_cpu_capacity_scaling();
+		wrmsrl_on_cpu(cpu->cpu, MSR_HWP_REQUEST, value);
 
+		mutex_lock(&hybrid_capacity_lock);
+		if (hybrid_max_perf_cpu == cpu)
+			hybrid_update_cpu_capacity_scaling();
 	mutex_unlock(&hybrid_capacity_lock);
 
-	/* Reset the capacity of the CPU going offline to the initial value. */
 	hybrid_clear_cpu_capacity(cpu->cpu);
 }
 
@@ -1319,23 +1277,17 @@ static int intel_pstate_resume(struct cp
 
 	pr_debug("CPU %d resuming\n", cpu->cpu);
 
-	/* Only restore if the system default is changed */
 	if (power_ctl_ee_state == POWER_CTL_EE_ENABLE)
 		set_power_ctl_ee_state(true);
 	else if (power_ctl_ee_state == POWER_CTL_EE_DISABLE)
 		set_power_ctl_ee_state(false);
 
-	if (cpu->suspended && hwp_active) {
+	if (cpu->suspended && hwp_enabled()) {
 		mutex_lock(&intel_pstate_limits_lock);
-
-		/* Re-enable HWP, because "online" has not done that. */
 		intel_pstate_hwp_reenable(cpu);
-
 		mutex_unlock(&intel_pstate_limits_lock);
 	}
-
 	cpu->suspended = false;
-
 	return 0;
 }
 
@@ -1348,13 +1300,14 @@ static void intel_pstate_update_policies
 }
 
 static void __intel_pstate_update_max_freq(struct cpudata *cpudata,
-					   struct cpufreq_policy *policy)
+										   struct cpufreq_policy *policy)
 {
-	if (hwp_active)
+	if (hwp_enabled())
 		intel_pstate_get_hwp_cap(cpudata);
 
 	policy->cpuinfo.max_freq = READ_ONCE(global.no_turbo) ?
-			cpudata->pstate.max_freq : cpudata->pstate.turbo_freq;
+	cpudata->pstate.max_freq :
+	cpudata->pstate.turbo_freq;
 
 	refresh_frequency_limits(policy);
 }
@@ -1565,12 +1518,12 @@ unlock_driver:
 static void update_qos_request(enum freq_qos_req_type type)
 {
 	struct freq_qos_request *req;
-	struct cpufreq_policy *policy;
+	struct cpufreq_policy  *policy;
 	int i;
 
 	for_each_possible_cpu(i) {
 		struct cpudata *cpu = all_cpu_data[i];
-		unsigned int freq, perf_pct;
+		unsigned int    freq, perf_pct;
 
 		policy = cpufreq_cpu_get(i);
 		if (!policy)
@@ -1578,24 +1531,24 @@ static void update_qos_request(enum freq
 
 		req = policy->driver_data;
 		cpufreq_cpu_put(policy);
-
 		if (!req)
 			continue;
 
-		if (hwp_active)
+		if (hwp_enabled())
 			intel_pstate_get_hwp_cap(cpu);
 
 		if (type == FREQ_QOS_MIN) {
 			perf_pct = global.min_perf_pct;
 		} else {
-			req++;
+			req++;		/* second element is MAX */
 			perf_pct = global.max_perf_pct;
 		}
 
 		freq = DIV_ROUND_UP(cpu->pstate.turbo_freq * perf_pct, 100);
 
 		if (freq_qos_update_request(req, freq) < 0)
-			pr_warn("Failed to update freq constraint: CPU%d\n", i);
+			pr_warn("Failed to update freq constraint: CPU%d\n",
+					i);
 	}
 }
 
@@ -1813,19 +1766,21 @@ static void intel_pstate_sysfs_expose_hw
 {
 	int rc;
 
-	if (!hwp_active)
+	if (!hwp_enabled())
 		return;
 
-	rc = sysfs_create_file(intel_pstate_kobject, &hwp_dynamic_boost.attr);
+	rc = sysfs_create_file(intel_pstate_kobject,
+						   &hwp_dynamic_boost.attr);
 	WARN_ON_ONCE(rc);
 }
 
 static void intel_pstate_sysfs_hide_hwp_dynamic_boost(void)
 {
-	if (!hwp_active)
+	if (!hwp_enabled())
 		return;
 
-	sysfs_remove_file(intel_pstate_kobject, &hwp_dynamic_boost.attr);
+	sysfs_remove_file(intel_pstate_kobject,
+					  &hwp_dynamic_boost.attr);
 }
 
 /************************** sysfs end ************************/
@@ -2255,20 +2210,26 @@ static void intel_pstate_set_min_pstate(
 	intel_pstate_set_pstate(cpu, cpu->pstate.min_pstate);
 }
 
+/* ---------------------------------------------------------------------
+ * intel_pstate_get_cpu_pstates
+ *	Detect per‑CPU P‑state limits and cache the reciprocal of
+ *	.pstate.scaling to avoid run‑time 64‑bit divisions.
+ * --------------------------------------------------------------------- */
 static void intel_pstate_get_cpu_pstates(struct cpudata *cpu)
 {
 	int perf_ctl_max_phys = pstate_funcs.get_max_physical(cpu->cpu);
-	int perf_ctl_scaling = pstate_funcs.get_scaling();
+	int perf_ctl_scaling  = pstate_funcs.get_scaling();
 
-	cpu->pstate.min_pstate = pstate_funcs.get_min(cpu->cpu);
+	cpu->pstate.min_pstate          = pstate_funcs.get_min(cpu->cpu);
 	cpu->pstate.max_pstate_physical = perf_ctl_max_phys;
-	cpu->pstate.perf_ctl_scaling = perf_ctl_scaling;
+	cpu->pstate.perf_ctl_scaling    = perf_ctl_scaling;
 
-	if (hwp_active && !hwp_mode_bdw) {
+	if (hwp_enabled() && !hwp_mode_bdw) {
 		__intel_pstate_get_hwp_cap(cpu);
 
 		if (pstate_funcs.get_cpu_scaling) {
-			cpu->pstate.scaling = pstate_funcs.get_cpu_scaling(cpu->cpu);
+			cpu->pstate.scaling =
+			pstate_funcs.get_cpu_scaling(cpu->cpu);
 			if (cpu->pstate.scaling != perf_ctl_scaling) {
 				intel_pstate_hybrid_hwp_adjust(cpu);
 				hwp_is_hybrid = true;
@@ -2276,25 +2237,26 @@ static void intel_pstate_get_cpu_pstates
 		} else {
 			cpu->pstate.scaling = perf_ctl_scaling;
 		}
-		/*
-		 * If the CPU is going online for the first time and it was
-		 * offline initially, asym capacity scaling needs to be updated.
-		 */
+
 		hybrid_update_capacity(cpu);
 	} else {
-		cpu->pstate.scaling = perf_ctl_scaling;
-		cpu->pstate.max_pstate = pstate_funcs.get_max(cpu->cpu);
+		cpu->pstate.scaling      = perf_ctl_scaling;
+		cpu->pstate.max_pstate   = pstate_funcs.get_max(cpu->cpu);
 		cpu->pstate.turbo_pstate = pstate_funcs.get_turbo(cpu->cpu);
 	}
 
 	if (cpu->pstate.scaling == perf_ctl_scaling) {
-		cpu->pstate.min_freq = cpu->pstate.min_pstate * perf_ctl_scaling;
-		cpu->pstate.max_freq = cpu->pstate.max_pstate * perf_ctl_scaling;
-		cpu->pstate.turbo_freq = cpu->pstate.turbo_pstate * perf_ctl_scaling;
+		cpu->pstate.min_freq =
+		cpu->pstate.min_pstate * perf_ctl_scaling;
+		cpu->pstate.max_freq =
+		cpu->pstate.max_pstate * perf_ctl_scaling;
+		cpu->pstate.turbo_freq =
+		cpu->pstate.turbo_pstate * perf_ctl_scaling;
 	}
 
 	if (pstate_funcs.get_aperf_mperf_shift)
-		cpu->aperf_mperf_shift = pstate_funcs.get_aperf_mperf_shift();
+		cpu->aperf_mperf_shift =
+		pstate_funcs.get_aperf_mperf_shift();
 
 	if (pstate_funcs.get_vid)
 		pstate_funcs.get_vid(cpu);
@@ -2685,40 +2647,30 @@ static int intel_pstate_init_cpu(unsigne
 	struct cpudata *cpu;
 
 	cpu = all_cpu_data[cpunum];
-
 	if (!cpu) {
 		cpu = kzalloc(sizeof(*cpu), GFP_KERNEL);
 		if (!cpu)
 			return -ENOMEM;
 
 		WRITE_ONCE(all_cpu_data[cpunum], cpu);
-
 		cpu->cpu = cpunum;
-
 		cpu->epp_default = -EINVAL;
 
-		if (hwp_active) {
+		if (hwp_enabled()) {
 			intel_pstate_hwp_enable(cpu);
-
 			if (intel_pstate_acpi_pm_profile_server())
 				hwp_boost = true;
 		}
-	} else if (hwp_active) {
-		/*
-		 * Re-enable HWP in case this happens after a resume from ACPI
-		 * S3 if the CPU was offline during the whole system/resume
-		 * cycle.
-		 */
+	} else if (hwp_enabled()) {
 		intel_pstate_hwp_reenable(cpu);
 	}
 
 	cpu->epp_powersave = -EINVAL;
-	cpu->epp_policy = CPUFREQ_POLICY_UNKNOWN;
+	cpu->epp_policy    = CPUFREQ_POLICY_UNKNOWN;
 
 	intel_pstate_get_cpu_pstates(cpu);
 
 	pr_debug("controlling: cpu %d\n", cpunum);
-
 	return 0;
 }
 
@@ -2726,7 +2678,7 @@ static void intel_pstate_set_update_util
 {
 	struct cpudata *cpu = all_cpu_data[cpu_num];
 
-	if (hwp_active && !hwp_boost)
+	if (hwp_enabled() && !hwp_boost)
 		return;
 
 	if (cpu->update_util_set)
@@ -2734,10 +2686,11 @@ static void intel_pstate_set_update_util
 
 	/* Prevent intel_pstate_update_util() from using stale data. */
 	cpu->sample.time = 0;
+
 	cpufreq_add_update_util_hook(cpu_num, &cpu->update_util,
-				     (hwp_active ?
-				      intel_pstate_update_util_hwp :
-				      intel_pstate_update_util));
+								 hwp_enabled() ?
+								 intel_pstate_update_util_hwp :
+								 intel_pstate_update_util);
 	cpu->update_util_set = true;
 }
 
@@ -2760,8 +2713,8 @@ static int intel_pstate_get_max_freq(str
 }
 
 static void intel_pstate_update_perf_limits(struct cpudata *cpu,
-					    unsigned int policy_min,
-					    unsigned int policy_max)
+											unsigned int policy_min,
+											unsigned int policy_max)
 {
 	int perf_ctl_scaling = cpu->pstate.perf_ctl_scaling;
 	int32_t max_policy_perf, min_policy_perf;
@@ -2772,20 +2725,17 @@ static void intel_pstate_update_perf_lim
 	} else {
 		min_policy_perf = policy_min / perf_ctl_scaling;
 		min_policy_perf = clamp_t(int32_t, min_policy_perf,
-					  0, max_policy_perf);
+								  0, max_policy_perf);
 	}
 
-	/*
-	 * HWP needs some special consideration, because HWP_REQUEST uses
-	 * abstract values to represent performance rather than pure ratios.
-	 */
-	if (hwp_active && cpu->pstate.scaling != perf_ctl_scaling) {
+	if (hwp_enabled() &&
+		cpu->pstate.scaling != perf_ctl_scaling) {
 		int freq;
 
-		freq = max_policy_perf * perf_ctl_scaling;
-		max_policy_perf = intel_pstate_freq_to_hwp(cpu, freq);
-		freq = min_policy_perf * perf_ctl_scaling;
-		min_policy_perf = intel_pstate_freq_to_hwp(cpu, freq);
+	freq = max_policy_perf * perf_ctl_scaling;
+	max_policy_perf = intel_pstate_freq_to_hwp(cpu, freq);
+	freq = min_policy_perf * perf_ctl_scaling;
+	min_policy_perf = intel_pstate_freq_to_hwp(cpu, freq);
 	}
 
 	pr_debug("cpu:%d min_policy_perf:%d max_policy_perf:%d\n",
@@ -2830,7 +2780,7 @@ static int intel_pstate_set_policy(struc
 		return -ENODEV;
 
 	pr_debug("set_policy cpuinfo.max %u policy->max %u\n",
-		 policy->cpuinfo.max_freq, policy->max);
+			 policy->cpuinfo.max_freq, policy->max);
 
 	cpu = all_cpu_data[policy->cpu];
 	cpu->policy = policy->policy;
@@ -2842,30 +2792,19 @@ static int intel_pstate_set_policy(struc
 	if (cpu->policy == CPUFREQ_POLICY_PERFORMANCE) {
 		int pstate = max(cpu->pstate.min_pstate, cpu->max_perf_ratio);
 
-		/*
-		 * NOHZ_FULL CPUs need this as the governor callback may not
-		 * be invoked on them.
-		 */
 		intel_pstate_clear_update_util_hook(policy->cpu);
 		intel_pstate_set_pstate(cpu, pstate);
 	} else {
 		intel_pstate_set_update_util_hook(policy->cpu);
 	}
 
-	if (hwp_active) {
-		/*
-		 * When hwp_boost was active before and dynamically it
-		 * was turned off, in that case we need to clear the
-		 * update util hook.
-		 */
+	if (hwp_enabled()) {
 		if (!hwp_boost)
 			intel_pstate_clear_update_util_hook(policy->cpu);
+
 		intel_pstate_hwp_set(policy->cpu);
 	}
-	/*
-	 * policy->cur is never updated with the intel_pstate driver, but it
-	 * is used as a stale frequency value. So, keep it within limits.
-	 */
+
 	policy->cur = policy->min;
 
 	mutex_unlock(&intel_pstate_limits_lock);
@@ -2874,30 +2813,33 @@ static int intel_pstate_set_policy(struc
 }
 
 static void intel_pstate_adjust_policy_max(struct cpudata *cpu,
-					   struct cpufreq_policy_data *policy)
+										   struct cpufreq_policy_data *policy)
 {
-	if (!hwp_active &&
-	    cpu->pstate.max_pstate_physical > cpu->pstate.max_pstate &&
-	    policy->max < policy->cpuinfo.max_freq &&
-	    policy->max > cpu->pstate.max_freq) {
-		pr_debug("policy->max > max non turbo frequency\n");
-		policy->max = policy->cpuinfo.max_freq;
-	}
+	if (!hwp_enabled() &&
+		cpu->pstate.max_pstate_physical > cpu->pstate.max_pstate &&
+		policy->max < policy->cpuinfo.max_freq &&
+		policy->max > cpu->pstate.max_freq) {
+		pr_debug("policy->max > max non‑turbo frequency\n");
+	policy->max = policy->cpuinfo.max_freq;
+		}
 }
 
 static void intel_pstate_verify_cpu_policy(struct cpudata *cpu,
-					   struct cpufreq_policy_data *policy)
+										   struct cpufreq_policy_data *policy)
 {
 	int max_freq;
 
-	if (hwp_active) {
+	if (hwp_enabled()) {
 		intel_pstate_get_hwp_cap(cpu);
 		max_freq = READ_ONCE(global.no_turbo) ?
-				cpu->pstate.max_freq : cpu->pstate.turbo_freq;
+		cpu->pstate.max_freq :
+		cpu->pstate.turbo_freq;
 	} else {
 		max_freq = intel_pstate_get_max_freq(cpu);
 	}
-	cpufreq_verify_within_limits(policy, policy->cpuinfo.min_freq, max_freq);
+
+	cpufreq_verify_within_limits(policy,
+								 policy->cpuinfo.min_freq, max_freq);
 
 	intel_pstate_adjust_policy_max(cpu, policy);
 }
@@ -2942,17 +2884,11 @@ static int intel_pstate_cpu_online(struc
 
 	intel_pstate_init_acpi_perf_limits(policy);
 
-	if (hwp_active) {
-		/*
-		 * Re-enable HWP and clear the "suspended" flag to let "resume"
-		 * know that it need not do that.
-		 */
+	if (hwp_enabled()) {
 		intel_pstate_hwp_reenable(cpu);
 		cpu->suspended = false;
-
 		hybrid_update_capacity(cpu);
 	}
-
 	return 0;
 }
 
@@ -3119,26 +3055,30 @@ static void intel_cpufreq_perf_ctl_updat
 }
 
 static int intel_cpufreq_update_pstate(struct cpufreq_policy *policy,
-				       int target_pstate, bool fast_switch)
+									   int target_pstate, bool fast_switch)
 {
 	struct cpudata *cpu = all_cpu_data[policy->cpu];
 	int old_pstate = cpu->pstate.current_pstate;
 
 	target_pstate = intel_pstate_prepare_request(cpu, target_pstate);
-	if (hwp_active) {
+
+	if (hwp_enabled()) {
 		int max_pstate = policy->strict_target ?
-					target_pstate : cpu->max_perf_ratio;
+		target_pstate : cpu->max_perf_ratio;
 
 		intel_cpufreq_hwp_update(cpu, target_pstate, max_pstate, 0,
-					 fast_switch);
+								 fast_switch);
 	} else if (target_pstate != old_pstate) {
 		intel_cpufreq_perf_ctl_update(cpu, target_pstate, fast_switch);
 	}
 
 	cpu->pstate.current_pstate = target_pstate;
 
-	intel_cpufreq_trace(cpu, fast_switch ? INTEL_PSTATE_TRACE_FAST_SWITCH :
-			    INTEL_PSTATE_TRACE_TARGET, old_pstate);
+	intel_cpufreq_trace(cpu,
+						fast_switch ?
+						INTEL_PSTATE_TRACE_FAST_SWITCH :
+						INTEL_PSTATE_TRACE_TARGET,
+					 old_pstate);
 
 	return target_pstate;
 }
@@ -3240,7 +3180,6 @@ static int intel_cpufreq_cpu_init(struct
 		return ret;
 
 	policy->cpuinfo.transition_latency = INTEL_CPUFREQ_TRANSITION_LATENCY;
-	/* This reflects the intel_pstate_get_cpu_pstates() setting. */
 	policy->cur = policy->cpuinfo.min_freq;
 
 	req = kcalloc(2, sizeof(*req), GFP_KERNEL);
@@ -3251,50 +3190,51 @@ static int intel_cpufreq_cpu_init(struct
 
 	cpu = all_cpu_data[policy->cpu];
 
-	if (hwp_active) {
+	if (hwp_enabled()) {
 		u64 value;
 
-		policy->transition_delay_us = INTEL_CPUFREQ_TRANSITION_DELAY_HWP;
+		policy->transition_delay_us =
+		INTEL_CPUFREQ_TRANSITION_DELAY_HWP;
 
 		intel_pstate_get_hwp_cap(cpu);
-
 		rdmsrl_on_cpu(cpu->cpu, MSR_HWP_REQUEST, &value);
 		WRITE_ONCE(cpu->hwp_req_cached, value);
 
 		cpu->epp_cached = intel_pstate_get_epp(cpu, value);
 	} else {
-		policy->transition_delay_us = INTEL_CPUFREQ_TRANSITION_DELAY;
+		policy->transition_delay_us =
+		INTEL_CPUFREQ_TRANSITION_DELAY;
 	}
 
-	freq = DIV_ROUND_UP(cpu->pstate.turbo_freq * global.min_perf_pct, 100);
+	freq = DIV_ROUND_UP(cpu->pstate.turbo_freq * global.min_perf_pct,
+						100);
 
 	ret = freq_qos_add_request(&policy->constraints, req, FREQ_QOS_MIN,
-				   freq);
+							   freq);
 	if (ret < 0) {
 		dev_err(dev, "Failed to add min-freq constraint (%d)\n", ret);
 		goto free_req;
 	}
 
-	freq = DIV_ROUND_UP(cpu->pstate.turbo_freq * global.max_perf_pct, 100);
+	freq = DIV_ROUND_UP(cpu->pstate.turbo_freq * global.max_perf_pct,
+						100);
 
-	ret = freq_qos_add_request(&policy->constraints, req + 1, FREQ_QOS_MAX,
-				   freq);
+	ret = freq_qos_add_request(&policy->constraints, req + 1,
+							   FREQ_QOS_MAX, freq);
 	if (ret < 0) {
 		dev_err(dev, "Failed to add max-freq constraint (%d)\n", ret);
 		goto remove_min_req;
 	}
 
 	policy->driver_data = req;
-
 	return 0;
 
-remove_min_req:
+	remove_min_req:
 	freq_qos_remove_request(req);
-free_req:
+	free_req:
 	kfree(req);
-pstate_exit:
+	pstate_exit:
 	intel_pstate_exit_perf_limits(policy);
-
 	return ret;
 }
 
@@ -3315,15 +3255,10 @@ static int intel_cpufreq_suspend(struct
 {
 	intel_pstate_suspend(policy);
 
-	if (hwp_active) {
+	if (hwp_enabled()) {
 		struct cpudata *cpu = all_cpu_data[policy->cpu];
 		u64 value = READ_ONCE(cpu->hwp_req_cached);
 
-		/*
-		 * Clear the desired perf field in MSR_HWP_REQUEST in case
-		 * intel_cpufreq_adjust_perf() is in use and the last value
-		 * written by it may not be suitable.
-		 */
 		value &= ~HWP_DESIRED_PERF(~0L);
 		wrmsrl_on_cpu(cpu->cpu, MSR_HWP_REQUEST, value);
 		WRITE_ONCE(cpu->hwp_req_cached, value);
@@ -3410,41 +3345,33 @@ static ssize_t intel_pstate_show_status(
 
 static int intel_pstate_update_status(const char *buf, size_t size)
 {
-	if (size == 3 && !strncmp(buf, "off", size)) {
-		if (!intel_pstate_driver)
-			return -EINVAL;
-
-		if (hwp_active)
-			return -EBUSY;
-
-		cpufreq_unregister_driver(intel_pstate_driver);
-		intel_pstate_driver_cleanup();
-		return 0;
-	}
-
 	if (size == 6 && !strncmp(buf, "active", size)) {
-		if (intel_pstate_driver) {
-			if (intel_pstate_driver == &intel_pstate)
-				return 0;
-
+		if (intel_pstate_driver == &intel_pstate)
+			return 0;
+		if (intel_pstate_driver)
 			cpufreq_unregister_driver(intel_pstate_driver);
-		}
-
 		return intel_pstate_register_driver(&intel_pstate);
 	}
 
 	if (size == 7 && !strncmp(buf, "passive", size)) {
+		if (intel_pstate_driver == &intel_cpufreq)
+			return 0;
 		if (intel_pstate_driver) {
-			if (intel_pstate_driver == &intel_cpufreq)
-				return 0;
-
 			cpufreq_unregister_driver(intel_pstate_driver);
 			intel_pstate_sysfs_hide_hwp_dynamic_boost();
 		}
-
 		return intel_pstate_register_driver(&intel_cpufreq);
 	}
 
+	if (size == 3 && !strncmp(buf, "off", size)) {
+		if (!intel_pstate_driver)
+			return -EINVAL;
+		if (hwp_enabled())
+			return -EBUSY;
+		cpufreq_unregister_driver(intel_pstate_driver);
+		intel_pstate_driver_cleanup();
+		return 0;
+	}
 	return -EINVAL;
 }
 
@@ -3679,6 +3606,11 @@ static const struct x86_cpu_id intel_hyb
 	{}
 };
 
+/*
+ * intel_pstate_init – module‑level initialisation
+ * Converts all run‑time hwp_active checks to a static key (hwp_enabled)
+ * and performs driver selection / registration.
+ */
 static int __init intel_pstate_init(void)
 {
 	static struct cpudata **_all_cpu_data;
@@ -3688,6 +3620,7 @@ static int __init intel_pstate_init(void
 	if (boot_cpu_data.x86_vendor != X86_VENDOR_INTEL)
 		return -ENODEV;
 
+	/* ------------------------------------------------ CPU capability -- */
 	id = x86_match_cpu(hwp_support_ids);
 	if (id) {
 		hwp_forced = intel_pstate_hwp_is_enabled();
@@ -3698,29 +3631,26 @@ static int __init intel_pstate_init(void
 			return -ENODEV;
 
 		copy_cpu_funcs(&core_funcs);
-		/*
-		 * Avoid enabling HWP for processors without EPP support,
-		 * because that means incomplete HWP implementation which is a
-		 * corner case and supporting it is generally problematic.
-		 *
-		 * If HWP is enabled already, though, there is no choice but to
-		 * deal with it.
-		 */
-		if ((!no_hwp && boot_cpu_has(X86_FEATURE_HWP_EPP)) || hwp_forced) {
-			hwp_active = true;
-			hwp_mode_bdw = id->driver_data;
-			intel_pstate.attr = hwp_cpufreq_attrs;
-			intel_cpufreq.attr = hwp_cpufreq_attrs;
-			intel_cpufreq.flags |= CPUFREQ_NEED_UPDATE_LIMITS;
-			intel_cpufreq.adjust_perf = intel_cpufreq_adjust_perf;
-			if (!default_driver)
-				default_driver = &intel_pstate;
 
-			pstate_funcs.get_cpu_scaling = hwp_get_cpu_scaling;
-
-			goto hwp_cpu_matched;
+		if ((!no_hwp && boot_cpu_has(X86_FEATURE_HWP_EPP)) ||
+			hwp_forced) {
+			hwp_active   = true;
+		hwp_mode_bdw = id->driver_data;
+
+		intel_pstate.attr	    = hwp_cpufreq_attrs;
+		intel_cpufreq.attr	    = hwp_cpufreq_attrs;
+		intel_cpufreq.flags	   |= CPUFREQ_NEED_UPDATE_LIMITS;
+		intel_cpufreq.adjust_perf = intel_cpufreq_adjust_perf;
+
+		/* one‑time driver selection */
+		if (!default_driver) {
+			default_driver = &intel_pstate;
 		}
-		pr_info("HWP not enabled\n");
+
+		pstate_funcs.get_cpu_scaling = hwp_get_cpu_scaling;
+			} else {
+				pr_info("HWP not enabled\n");
+			}
 	} else {
 		if (no_load)
 			return -ENODEV;
@@ -3730,7 +3660,6 @@ static int __init intel_pstate_init(void
 			pr_info("CPU model not supported\n");
 			return -ENODEV;
 		}
-
 		copy_cpu_funcs((struct pstate_funcs *)id->driver_data);
 	}
 
@@ -3738,15 +3667,10 @@ static int __init intel_pstate_init(void
 		pr_info("Invalid MSRs\n");
 		return -ENODEV;
 	}
-	/* Without HWP start in the passive mode. */
+
 	if (!default_driver)
 		default_driver = &intel_cpufreq;
 
-hwp_cpu_matched:
-	/*
-	 * The Intel pstate driver will be ignored if the platform
-	 * firmware has its own power management modes.
-	 */
 	if (intel_pstate_platform_pwr_mgmt_exists()) {
 		pr_info("P-states controlled by the platform\n");
 		return -ENODEV;
@@ -3757,43 +3681,45 @@ hwp_cpu_matched:
 
 	pr_info("Intel P-state driver initializing\n");
 
-	_all_cpu_data = vzalloc(array_size(sizeof(void *), num_possible_cpus()));
+	_all_cpu_data = vzalloc(array_size(sizeof(void *),
+									   num_possible_cpus()));
 	if (!_all_cpu_data)
 		return -ENOMEM;
-
 	WRITE_ONCE(all_cpu_data, _all_cpu_data);
 
 	intel_pstate_request_control_from_smm();
-
 	intel_pstate_sysfs_expose_params();
 
 	if (hwp_active) {
-		const struct x86_cpu_id *id = x86_match_cpu(intel_epp_default);
-		const struct x86_cpu_id *hybrid_id = x86_match_cpu(intel_hybrid_scaling_factor);
+		const struct x86_cpu_id *eid, *hid;
 
-		if (id) {
+		eid = x86_match_cpu(intel_epp_default);
+		if (eid) {
 			epp_values[EPP_INDEX_POWERSAVE] =
-					FIELD_GET(POWERSAVE_MASK, id->driver_data);
+			FIELD_GET(POWERSAVE_MASK, eid->driver_data);
 			epp_values[EPP_INDEX_BALANCE_POWERSAVE] =
-					FIELD_GET(BALANCE_POWER_MASK, id->driver_data);
+			FIELD_GET(BALANCE_POWER_MASK,
+					  eid->driver_data);
 			epp_values[EPP_INDEX_BALANCE_PERFORMANCE] =
-					FIELD_GET(BALANCE_PERFORMANCE_MASK, id->driver_data);
+			FIELD_GET(BALANCE_PERFORMANCE_MASK,
+					  eid->driver_data);
 			epp_values[EPP_INDEX_PERFORMANCE] =
-					FIELD_GET(PERFORMANCE_MASK, id->driver_data);
-			pr_debug("Updated EPPs powersave:%x balanced power:%x balanced perf:%x performance:%x\n",
-				 epp_values[EPP_INDEX_POWERSAVE],
-				 epp_values[EPP_INDEX_BALANCE_POWERSAVE],
-				 epp_values[EPP_INDEX_BALANCE_PERFORMANCE],
-				 epp_values[EPP_INDEX_PERFORMANCE]);
+			FIELD_GET(PERFORMANCE_MASK,
+					  eid->driver_data);
 		}
 
-		if (hybrid_id) {
-			hybrid_scaling_factor = hybrid_id->driver_data;
-			pr_debug("hybrid scaling factor: %d\n", hybrid_scaling_factor);
+		hid = x86_match_cpu(intel_hybrid_scaling_factor);
+		if (hid) {
+			hybrid_scaling_factor = hid->driver_data;
+			pr_debug("hybrid scaling factor: %d\n",
+					 hybrid_scaling_factor);
 		}
-
 	}
 
+	/* patch out all hwp_enabled() branches when HWP is active */
+	if (hwp_active)
+		static_branch_enable(&hwp_key);
+
 	mutex_lock(&intel_pstate_driver_lock);
 	rc = intel_pstate_register_driver(default_driver);
 	mutex_unlock(&intel_pstate_driver_lock);
@@ -3802,18 +3728,17 @@ hwp_cpu_matched:
 		return rc;
 	}
 
-	if (hwp_active) {
-		const struct x86_cpu_id *id;
+	if (hwp_enabled()) {
+		const struct x86_cpu_id *eid;
 
-		id = x86_match_cpu(intel_pstate_cpu_ee_disable_ids);
-		if (id) {
+		eid = x86_match_cpu(intel_pstate_cpu_ee_disable_ids);
+		if (eid) {
 			set_power_ctl_ee_state(false);
-			pr_info("Disabling energy efficiency optimization\n");
+			pr_info("Disabling energy‑efficiency optimisation\n");
 		}
-
 		pr_info("HWP enabled\n");
 	} else if (boot_cpu_has(X86_FEATURE_HYBRID_CPU)) {
-		pr_warn("Problematic setup: Hybrid processor with disabled HWP\n");
+		pr_warn("Hybrid processor with HWP disabled – sub‑optimal\n");
 	}
 
 	return 0;



--- a/kernel/irq/affinity.c	2025-03-13 13:08:08.000000000 +0100
+++ b/kernel/irq/affinity.c	2025-03-22 22:28:35.518663546 +0100
@@ -2,25 +2,912 @@
 /*
  * Copyright (C) 2016 Thomas Gleixner.
  * Copyright (C) 2016-2017 Christoph Hellwig.
+ * Raptor Lake optimizations (C) 2025 ms178.
  */
 #include <linux/interrupt.h>
 #include <linux/kernel.h>
 #include <linux/slab.h>
 #include <linux/cpu.h>
 #include <linux/group_cpus.h>
+#include <linux/cpufreq.h>
+#include <linux/topology.h>
+#include <linux/numa.h>
+#include <linux/overflow.h>
+#ifdef CONFIG_X86
+#include <asm/cpu_device_id.h>
+#include <asm/intel-family.h>
+#include <asm/topology.h>
+#include <asm/cpu.h>
+#include <asm/smp.h>
+#endif
 
+#ifdef CONFIG_X86
+/* Maximum number of cores to handle */
+#define MAX_CORES_PER_NODE 64  /* Increased to handle future processors */
+
+/* Module parameters */
+static bool irq_pcore_affinity = true;
+module_param_named(pcore_affinity, irq_pcore_affinity, bool, 0644);
+MODULE_PARM_DESC(pcore_affinity, "Enable P-core IRQ affinity (default: 1)");
+
+/* Define CPU IDs if not already defined */
+#ifndef INTEL_FAM6_RAPTORLAKE
+#define INTEL_FAM6_RAPTORLAKE 0xB7
+#endif
+
+#ifndef INTEL_FAM6_ALDERLAKE
+#define INTEL_FAM6_ALDERLAKE 0x97
+#endif
+
+#ifndef INTEL_FAM6_ALDERLAKE_L
+#define INTEL_FAM6_ALDERLAKE_L 0x9A
+#endif
+
+/* Core type definition if not available */
+#ifndef X86_CORE_TYPE_INTEL_CORE
+#define X86_CORE_TYPE_INTEL_CORE 1
+#endif
+
+#ifndef X86_CORE_TYPE_INTEL_ATOM
+#define X86_CORE_TYPE_INTEL_ATOM 0
+#endif
+
+/* P-core mask management with proper locking */
+static DEFINE_MUTEX(pcore_mask_lock);
+static struct cpumask pcore_mask;
+static atomic_t pcore_mask_initialized = ATOMIC_INIT(0);
+static int numa_node_for_cpu[NR_CPUS];
+
+/* Store L2 cache domain information */
+static struct cpumask *l2_domain_masks;
+static int l2_domain_count;
+
+/* Cache to store CPU core types: -2 = uninitialized, -1 = not hybrid/unknown, 0 = E-core, 1 = P-core */
+static DEFINE_SPINLOCK(core_type_lock);
+static int cpu_core_type[NR_CPUS] = { [0 ... NR_CPUS-1] = -2 };
+
+/* Frequency heuristic information */
+static unsigned int max_cpu_freq;
+static atomic_t freq_initialized = ATOMIC_INIT(0);
+
+/* L2 core ID cache to avoid recalculation */
+static int l2_core_ids[NR_CPUS];
+static atomic_t l2_ids_initialized = ATOMIC_INIT(0);
+
+/**
+ * hybrid_cpu_detected - Check if system has hybrid CPU architecture
+ *
+ * Detects Intel hybrid architectures like Raptor Lake and Alder Lake.
+ * Result is safely cached for performance.
+ *
+ * Return: true if hybrid CPU detected, false otherwise
+ */
+static bool hybrid_cpu_detected(void)
+{
+	static int is_hybrid = -1;
+	static const struct x86_cpu_id hybrid_ids[] = {
+		{ .family = 6, .model = INTEL_FAM6_RAPTORLAKE,   .driver_data = 0 },
+		{ .family = 6, .model = INTEL_FAM6_ALDERLAKE,    .driver_data = 0 },
+		{ .family = 6, .model = INTEL_FAM6_ALDERLAKE_L,  .driver_data = 0 },
+		{}
+	};
+
+	if (is_hybrid == -1)
+		is_hybrid = x86_match_cpu(hybrid_ids) ? 1 : 0;
+
+	return is_hybrid == 1;
+}
+
+/**
+ * init_freq_info - Initialize frequency information for heuristic detection
+ *
+ * Efficiently calculates and caches maximum CPU frequency for use in core type detection.
+ * Only performs the calculation once for all CPUs.
+ */
+static void init_freq_info(void)
+{
+	unsigned int freq, temp_max = 0;
+	int c;
+
+	/* Only initialize once - avoid unnecessary work */
+	if (atomic_read(&freq_initialized) != 0)
+		return;
+
+	/* Calculate max frequency in a single pass */
+	for_each_online_cpu(c) {
+		freq = cpufreq_quick_get_max(c);
+		if (freq > temp_max)
+			temp_max = freq;
+	}
+
+	/* Atomic update to ensure we only set the value once */
+	if (atomic_cmpxchg(&freq_initialized, 0, 1) == 0)
+		max_cpu_freq = temp_max;
+}
+
+/**
+ * init_l2_core_ids - Pre-calculate L2 domain IDs once
+ *
+ * Pre-computes the L2 domain IDs for all CPUs to avoid expensive
+ * recalculations during L2 domain detection fallback.
+ */
+static void init_l2_core_ids(void)
+{
+	int cpu;
+
+	if (atomic_read(&l2_ids_initialized) != 0)
+		return;
+
+	for_each_possible_cpu(cpu) {
+		if (cpu < NR_CPUS)
+			l2_core_ids[cpu] = topology_physical_package_id(cpu) * 100 + topology_core_id(cpu);
+	}
+
+	atomic_set(&l2_ids_initialized, 1);
+}
+
+/**
+ * get_core_type - Optimized CPU core type detection with caching
+ * @cpu: CPU number to check
+ *
+ * Efficiently determines whether a CPU is a P-core or E-core using three methods
+ * in order of reliability, with results cached for maximum performance.
+ *
+ * Return: 1 for P-core, 0 for E-core, -1 if unknown/not hybrid
+ */
+static int get_core_type(int cpu)
+{
+	int core_type;
+	unsigned long flags;
+
+	/* Validate CPU ID */
+	if (!cpu_possible(cpu))
+		return -1;
+
+	/* Fast path: return cached result if available */
+	if (cpu_core_type[cpu] != -2)
+		return cpu_core_type[cpu];
+
+	/* Early return for non-hybrid CPUs */
+	if (!hybrid_cpu_detected()) {
+		spin_lock_irqsave(&core_type_lock, flags);
+		if (cpu_core_type[cpu] == -2) /* Check again under lock */
+			cpu_core_type[cpu] = -1;
+		core_type = cpu_core_type[cpu];
+		spin_unlock_irqrestore(&core_type_lock, flags);
+		return core_type;
+	}
+
+	/* Method 1: Use official core type if available (most reliable) */
+	#ifdef CONFIG_INTEL_HYBRID_CPU
+	if (cpu_data(cpu).x86_core_type == X86_CORE_TYPE_INTEL_CORE) {
+		spin_lock_irqsave(&core_type_lock, flags);
+		if (cpu_core_type[cpu] == -2)
+			cpu_core_type[cpu] = 1;
+		spin_unlock_irqrestore(&core_type_lock, flags);
+		return 1;  /* P-core */
+	} else if (cpu_data(cpu).x86_core_type == X86_CORE_TYPE_INTEL_ATOM) {
+		spin_lock_irqsave(&core_type_lock, flags);
+		if (cpu_core_type[cpu] == -2)
+			cpu_core_type[cpu] = 0;
+		spin_unlock_irqrestore(&core_type_lock, flags);
+		return 0;  /* E-core */
+	}
+	#endif
+
+	/* Get lock for remaining detection methods */
+	spin_lock_irqsave(&core_type_lock, flags);
+
+	/* Check cache again under lock */
+	if (cpu_core_type[cpu] != -2) {
+		core_type = cpu_core_type[cpu];
+		spin_unlock_irqrestore(&core_type_lock, flags);
+		return core_type;
+	}
+
+	/* Method 2: Thread siblings count (also reliable for Raptor Lake) */
+	const struct cpumask *thread_siblings = topology_sibling_cpumask(cpu);
+	if (thread_siblings && cpumask_weight(thread_siblings) > 1) {
+		cpu_core_type[cpu] = 1;  /* Multiple threads per core = P-core */
+		spin_unlock_irqrestore(&core_type_lock, flags);
+		return 1;
+	}
+
+	/* Release lock for potentially expensive frequency operations */
+	spin_unlock_irqrestore(&core_type_lock, flags);
+
+	/* Initialize frequency info if needed */
+	if (atomic_read(&freq_initialized) == 0)
+		init_freq_info();
+
+	/* Reacquire lock */
+	spin_lock_irqsave(&core_type_lock, flags);
+
+	/* Check cache again after reacquiring lock */
+	if (cpu_core_type[cpu] != -2) {
+		core_type = cpu_core_type[cpu];
+		spin_unlock_irqrestore(&core_type_lock, flags);
+		return core_type;
+	}
+
+	/* Method 3: Frequency-based heuristic (last resort) */
+	if (max_cpu_freq > 0) {
+		unsigned int cpu_freq = cpufreq_quick_get_max(cpu);
+		if (cpu_freq >= max_cpu_freq * 95 / 100) {
+			cpu_core_type[cpu] = 1;  /* Within 5% of max frequency = likely P-core */
+			spin_unlock_irqrestore(&core_type_lock, flags);
+			return 1;
+		} else if (cpu_freq <= max_cpu_freq * 70 / 100) {
+			cpu_core_type[cpu] = 0;  /* Below 70% of max frequency = likely E-core */
+			spin_unlock_irqrestore(&core_type_lock, flags);
+			return 0;
+		}
+	}
+
+	/* Cannot determine reliably */
+	cpu_core_type[cpu] = -1;
+	spin_unlock_irqrestore(&core_type_lock, flags);
+	return -1;
+}
+
+/**
+ * get_cache_shared_mask - Get cache sharing mask for CPU
+ * @cpu: CPU number
+ *
+ * Returns the appropriate cache sharing mask based on core type
+ *
+ * Return: Pointer to cpumask
+ */
+static const struct cpumask *get_cache_shared_mask(int cpu)
+{
+	int core_type = get_core_type(cpu);
+
+	if (core_type == 0) /* E-core */
+		return cpu_l2c_shared_mask(cpu);
+	else if (core_type == 1) /* P-core */
+		return cpu_llc_shared_mask(cpu);
+	else
+		return cpu_llc_shared_mask(cpu); /* Default to LLC */
+}
+
+/**
+ * free_l2_domain_masks - Free L2 domain mask resources
+ *
+ * Helper function to safely clean up L2 domain resources.
+ * Can be called from any context including error paths.
+ */
+static void free_l2_domain_masks(void)
+{
+	mutex_lock(&pcore_mask_lock);
+	if (l2_domain_masks) {
+		kfree(l2_domain_masks);
+		l2_domain_masks = NULL;
+		l2_domain_count = 0;
+	}
+	mutex_unlock(&pcore_mask_lock);
+}
+
+/**
+ * get_pcore_mask - Fill provided mask with performance cores
+ * @dst: Destination cpumask to fill with P-cores
+ *
+ * Thread-safe function to identify performance cores on hybrid CPUs.
+ * Caller must provide the destination buffer.
+ *
+ * Return: 0 on success, negative error code on failure
+ */
+static int get_pcore_mask(struct cpumask *dst)
+{
+	if (!dst)
+		return -EINVAL;
+
+	if (atomic_read_acquire(&pcore_mask_initialized) == 0) {
+		mutex_lock(&pcore_mask_lock);
+		if (atomic_read(&pcore_mask_initialized) == 0) {
+			int cpu;
+			int core_id, prev_core = -1;
+			int siblings = 0;
+			struct cpumask temp_mask;
+
+			cpumask_clear(&pcore_mask);
+			cpumask_clear(&temp_mask);
+
+			/* First try: direct core type detection if available */
+			bool direct_detection = false;
+
+			for_each_possible_cpu(cpu) {
+				int core_type = get_core_type(cpu);
+				if (core_type == 1) {  /* P-core */
+					cpumask_set_cpu(cpu, &pcore_mask);
+					direct_detection = true;
+				}
+				/* Store NUMA node information for each CPU */
+				if (cpu < NR_CPUS)
+					numa_node_for_cpu[cpu] = cpu_to_node(cpu);
+			}
+
+			/* If direct detection didn't work, use heuristics */
+			if (!direct_detection) {
+				/* Second try: count siblings per core to identify P-cores */
+				for_each_online_cpu(cpu) {
+					core_id = topology_core_id(cpu);
+
+					/* Check if this is a new core */
+					if (core_id != prev_core) {
+						/* New core encountered */
+						if (prev_core != -1) {
+							/* Process previous core */
+							if (siblings >= 2) {
+								/* Previous core had hyperthreading - likely a P-core */
+								cpumask_or(&pcore_mask, &pcore_mask, &temp_mask);
+							}
+							cpumask_clear(&temp_mask);
+						}
+
+						prev_core = core_id;
+						siblings = 1;
+						cpumask_set_cpu(cpu, &temp_mask);
+					} else {
+						/* Another sibling of the current core */
+						siblings++;
+						cpumask_set_cpu(cpu, &temp_mask);
+					}
+				}
+
+				/* Handle the last core */
+				if (prev_core != -1 && siblings >= 2) {
+					cpumask_or(&pcore_mask, &pcore_mask, &temp_mask);
+				}
+
+				/* Third try: find fastest cores by frequency */
+				if (cpumask_empty(&pcore_mask)) {
+					unsigned int max_freq = 0;
+					int max_freq_cpu = -1;
+
+					for_each_online_cpu(cpu) {
+						unsigned int freq = cpufreq_quick_get_max(cpu);
+						if (freq > max_freq && freq > 0) {
+							max_freq = freq;
+							max_freq_cpu = cpu;
+						}
+					}
+
+					if (max_freq_cpu >= 0 && max_freq > 0) {
+						/* Use cores with the same max frequency (within 5%) */
+						unsigned int threshold = max_freq * 95 / 100;
+
+						for_each_online_cpu(cpu) {
+							unsigned int freq = cpufreq_quick_get_max(cpu);
+							if (freq >= threshold && freq > 0)
+								cpumask_set_cpu(cpu, &pcore_mask);
+						}
+					}
+				}
+			}
+
+			/* Fallback to all CPUs if still no cores identified */
+			if (cpumask_empty(&pcore_mask))
+				cpumask_copy(&pcore_mask, cpu_online_mask);
+
+			/* Memory barrier before setting initialized flag */
+			smp_wmb();
+			atomic_set(&pcore_mask_initialized, 1);
+		}
+		mutex_unlock(&pcore_mask_lock);
+	}
+
+	mutex_lock(&pcore_mask_lock);
+	cpumask_copy(dst, &pcore_mask);
+	mutex_unlock(&pcore_mask_lock);
+
+	return 0;
+}
+
+/**
+ * identify_l2_domains - Optimized L2 cache domain detection
+ * @p_core_mask: Mask of P-cores to analyze
+ *
+ * Maps L2 cache sharing domains on Raptor Lake with optimized fallback mechanism.
+ * Pre-calculates L2 core IDs to avoid expensive operations in inner loops.
+ *
+ * Return: 0 on success, negative error code on failure
+ */
+static int identify_l2_domains(struct cpumask *p_core_mask)
+{
+	int i, cpu;
+	bool using_fallback = false;
+	int total_cpus;
+
+	/* Validate input */
+	if (!p_core_mask || cpumask_empty(p_core_mask)) {
+		pr_warn("Empty P-core mask provided\n");
+		return -EINVAL;
+	}
+
+	/* Pre-calculate L2 core IDs if not done already */
+	if (atomic_read(&l2_ids_initialized) == 0)
+		init_l2_core_ids();
+
+	mutex_lock(&pcore_mask_lock);
+
+	/* Clean up existing resources */
+	if (l2_domain_masks) {
+		kfree(l2_domain_masks);
+		l2_domain_masks = NULL;
+		l2_domain_count = 0;
+	}
+
+	/* Allocate memory with bounds check */
+	if (MAX_CORES_PER_NODE == 0) {
+		mutex_unlock(&pcore_mask_lock);
+		pr_err("Invalid MAX_CORES_PER_NODE value\n");
+		return -EINVAL;
+	}
+
+	l2_domain_masks = kcalloc(MAX_CORES_PER_NODE, sizeof(struct cpumask), GFP_KERNEL);
+	if (!l2_domain_masks) {
+		mutex_unlock(&pcore_mask_lock);
+		pr_warn("Failed to allocate L2 domain masks\n");
+		return -ENOMEM;
+	}
+
+	l2_domain_count = 0;
+
+	/* Primary detection: use cache topology more efficiently */
+	for_each_cpu(cpu, p_core_mask) {
+		const struct cpumask *shared_mask = get_cache_shared_mask(cpu);
+		bool found = false;
+
+		/* Validate mask */
+		if (!shared_mask || cpumask_empty(shared_mask) ||
+			cpumask_weight(shared_mask) > MAX_CORES_PER_NODE/2) {
+			using_fallback = true;
+		continue;
+			}
+
+			/* Skip CPUs already in a domain to avoid redundant checks */
+			for (i = 0; i < l2_domain_count; i++) {
+				if (cpumask_test_cpu(cpu, &l2_domain_masks[i])) {
+					found = true;
+					break;
+				}
+			}
+			if (found)
+				continue;
+
+		/* Check if domain already exists */
+		for (i = 0; i < l2_domain_count; i++) {
+			if (cpumask_equal(&l2_domain_masks[i], shared_mask)) {
+				found = true;
+				break;
+			}
+		}
+
+		/* Add new domain if needed */
+		if (!found && l2_domain_count < MAX_CORES_PER_NODE) {
+			cpumask_copy(&l2_domain_masks[l2_domain_count], shared_mask);
+			l2_domain_count++;
+		}
+	}
+
+	/* Optimized fallback: use pre-calculated L2 IDs */
+	if (l2_domain_count == 0 || using_fallback) {
+		/* Use a more efficient approach with a hash table-like structure */
+		int l2_id_max = 0;
+		int l2_id, dom_idx;
+		int *id_to_domain = NULL;
+
+		/* Reset domain count */
+		l2_domain_count = 0;
+
+		/* Find maximum L2 ID */
+		for_each_cpu(cpu, p_core_mask) {
+			if (cpu < NR_CPUS && l2_core_ids[cpu] > l2_id_max)
+				l2_id_max = l2_core_ids[cpu];
+		}
+
+		/* Create mapping array (+1 for zero-based indexing) */
+		id_to_domain = kcalloc(l2_id_max + 1, sizeof(int), GFP_KERNEL);
+		if (!id_to_domain) {
+			kfree(l2_domain_masks);  /* Free previously allocated memory */
+			l2_domain_masks = NULL;
+			mutex_unlock(&pcore_mask_lock);
+			return -ENOMEM;
+		}
+
+		/* Initialize all entries to -1 (no domain) */
+		for (i = 0; i <= l2_id_max; i++)
+			id_to_domain[i] = -1;
+
+		/* One-pass domain assignment using direct mapping */
+		for_each_cpu(cpu, p_core_mask) {
+			if (cpu < NR_CPUS) {
+				l2_id = l2_core_ids[cpu];
+
+				/* Check bounds */
+				if (l2_id < 0 || l2_id > l2_id_max)
+					continue;
+
+				dom_idx = id_to_domain[l2_id];
+
+				if (dom_idx == -1) {
+					/* Create new domain */
+					if (l2_domain_count < MAX_CORES_PER_NODE) {
+						dom_idx = l2_domain_count++;
+						id_to_domain[l2_id] = dom_idx;
+						cpumask_clear(&l2_domain_masks[dom_idx]);
+					} else {
+						continue;  /* Too many domains */
+					}
+				}
+
+				/* Add CPU to domain */
+				cpumask_set_cpu(cpu, &l2_domain_masks[dom_idx]);
+			}
+		}
+
+		kfree(id_to_domain);
+	}
+
+	/* Verify all CPUs were assigned */
+	total_cpus = 0;
+	for (i = 0; i < l2_domain_count; i++)
+		total_cpus += cpumask_weight(&l2_domain_masks[i]);
+
+	if (total_cpus < cpumask_weight(p_core_mask)) {
+		pr_warn("L2 domain detection incomplete: %d/%d CPUs\n",
+				total_cpus, cpumask_weight(p_core_mask));
+	}
+
+	mutex_unlock(&pcore_mask_lock);
+	return l2_domain_count > 0 ? 0 : -ENODATA;
+}
+
+/**
+ * group_cpus_hybrid_first - Distribute IRQs with hybrid CPU awareness
+ * @num_grps: Number of groups to create
+ *
+ * Creates CPU groups optimized for IRQ distribution on hybrid CPUs.
+ * Prioritizes P-cores and considers cache topology for performance.
+ *
+ * Return: Array of CPU masks or NULL on failure
+ */
+static struct cpumask *group_cpus_hybrid_first(unsigned int num_grps)
+{
+	struct cpumask p_core_copy;
+	struct cpumask *result = NULL;
+	struct cpumask e_cores_mask;
+	DECLARE_BITMAP(assigned, NR_CPUS);
+	int i, j, cpu, grp_idx = 0;
+	int ret;
+
+	if (!num_grps)
+		return NULL;
+
+	if (!irq_pcore_affinity || !hybrid_cpu_detected())
+		return group_cpus_evenly(num_grps);
+
+	/* Get P-cores using our improved function */
+	cpumask_clear(&p_core_copy);
+	ret = get_pcore_mask(&p_core_copy);
+	if (ret || cpumask_empty(&p_core_copy))
+		return group_cpus_evenly(num_grps);
+
+	/* Create result masks */
+	result = kcalloc(num_grps, sizeof(struct cpumask), GFP_KERNEL);
+	if (!result)
+		return group_cpus_evenly(num_grps);
+
+	/* Clear all result masks */
+	for (i = 0; i < num_grps; i++)
+		cpumask_clear(&result[i]);
+
+	/* Identify E-cores */
+	bitmap_zero(assigned, NR_CPUS);
+	cpumask_andnot(&e_cores_mask, cpu_online_mask, &p_core_copy);
+
+	/* Identify L2 domains */
+	ret = identify_l2_domains(&p_core_copy);
+	if (ret) {
+		/* Fall back to simple distribution on error */
+		int cores = cpumask_weight(&p_core_copy);
+		int cores_per_group = cores / num_grps;
+		int extra = cores % num_grps;
+
+		for (i = 0; i < num_grps; i++) {
+			int count = 0;
+			int cores_this_group = cores_per_group + (i < extra ? 1 : 0);
+
+			for_each_cpu(cpu, &p_core_copy) {
+				if (!test_bit(cpu, assigned) && count < cores_this_group) {
+					cpumask_set_cpu(cpu, &result[i]);
+					set_bit(cpu, assigned);
+					count++;
+				}
+			}
+		}
+	} else {
+		/* Cache-aware distribution */
+		int total_cores = 0;
+		for (i = 0; i < l2_domain_count; i++)
+			total_cores += cpumask_weight(&l2_domain_masks[i]);
+
+		/* Distribute domains proportionally */
+		for (i = 0; i < l2_domain_count && grp_idx < num_grps; i++) {
+			int domain_cores = cpumask_weight(&l2_domain_masks[i]);
+			if (domain_cores == 0)
+				continue;
+
+			/* Calculate groups for this domain */
+			int grps_for_domain = 1;
+			if (total_cores > 0) {
+				grps_for_domain = (num_grps * domain_cores + total_cores - 1) / total_cores;
+				grps_for_domain = min_t(int, grps_for_domain, num_grps - grp_idx);
+			}
+			grps_for_domain = max(1, grps_for_domain);
+
+			/* Calculate cores per group */
+			int cores_per_domain_group = domain_cores / grps_for_domain;
+			int domain_extra = domain_cores % grps_for_domain;
+
+			/* Distribute cores */
+			for (j = 0; j < grps_for_domain && grp_idx < num_grps; j++, grp_idx++) {
+				int cores_this_group = cores_per_domain_group + (j < domain_extra ? 1 : 0);
+				int count = 0;
+
+				for_each_cpu(cpu, &l2_domain_masks[i]) {
+					if (count >= cores_this_group)
+						break;
+					if (!test_bit(cpu, assigned)) {
+						cpumask_set_cpu(cpu, &result[grp_idx]);
+						set_bit(cpu, assigned);
+						count++;
+					}
+				}
+			}
+		}
+	}
+
+	/* Handle E-cores for remaining groups */
+	if (grp_idx < num_grps && !cpumask_empty(&e_cores_mask)) {
+		int e_cores = cpumask_weight(&e_cores_mask);
+		int cores_per_group = e_cores / (num_grps - grp_idx);
+		int extra = e_cores % (num_grps - grp_idx);
+
+		for (i = grp_idx; i < num_grps; i++) {
+			int count = 0;
+			int target = cores_per_group + (i - grp_idx < extra ? 1 : 0);
+
+			for_each_cpu(cpu, &e_cores_mask) {
+				if (count >= target)
+					break;
+				if (!test_bit(cpu, assigned)) {
+					cpumask_set_cpu(cpu, &result[i]);
+					set_bit(cpu, assigned);
+					count++;
+				}
+			}
+		}
+	}
+
+	/* NUMA-aware rebalancing for empty groups */
+	for (i = 0; i < num_grps; i++) {
+		if (cpumask_empty(&result[i])) {
+			/* Find best donor CPU from a group with multiple CPUs */
+			int donor_cpu = -1;
+			int donor_group = -1;
+			int best_score = -1;
+			int target_node = -1;
+			unsigned int j_start, j_end;
+
+			/* Calculate bounds safely without signedness issues */
+			j_start = (i > 0) ? (i - 1) : 0;
+			j_end = (i + 1 < num_grps) ? (i + 1) : i;
+
+			/* Identify target NUMA node if possible */
+			for (j = j_start; j <= j_end; j++) {
+				if (j != i && cpumask_weight(&result[j]) > 0) {
+					int temp_cpu = cpumask_first(&result[j]);
+					if (temp_cpu < NR_CPUS) {
+						target_node = numa_node_for_cpu[temp_cpu];
+						break;
+					}
+				}
+			}
+
+			/* Find groups with multiple CPUs */
+			for (j = 0; j < num_grps; j++) {
+				if (cpumask_weight(&result[j]) > 1) {
+					/* Evaluate each CPU as potential donor */
+					for_each_cpu(cpu, &result[j]) {
+						int score = 0;
+						int cpu_node = (cpu < NR_CPUS) ? numa_node_for_cpu[cpu] : -1;
+						int core_type = get_core_type(cpu);
+						const struct cpumask *cache_mask;
+						int cache_siblings = 0;
+						int numa_siblings = 0;
+						int sibling;
+
+						/* NUMA locality is highest priority */
+						if (target_node >= 0 && cpu_node == target_node)
+							score += 1000;
+
+						/* Core type considerations - prefer donating E-cores */
+						if (core_type == 0)
+							score += 500;
+
+						/* Cache topology considerations */
+						cache_mask = get_cache_shared_mask(cpu);
+						for_each_cpu(sibling, &result[j]) {
+							if (sibling != cpu) {
+								if (cache_mask && cpumask_test_cpu(sibling, cache_mask))
+									cache_siblings++;
+								if (cpu_node >= 0 && sibling < NR_CPUS &&
+									numa_node_for_cpu[sibling] == cpu_node)
+									numa_siblings++;
+							}
+						}
+
+						/* Prefer CPUs with more siblings left behind in same group */
+						score += cache_siblings * 10;
+						score += numa_siblings * 50;
+
+						if (score > best_score) {
+							best_score = score;
+							donor_cpu = cpu;
+							donor_group = j;
+						}
+					}
+				}
+			}
+
+			if (donor_group >= 0 && donor_cpu >= 0) {
+				cpumask_clear_cpu(donor_cpu, &result[donor_group]);
+				cpumask_set_cpu(donor_cpu, &result[i]);
+			} else {
+				/* Last resort: fall back to standard distribution */
+				kfree(result);
+				return group_cpus_evenly(num_grps);
+			}
+		}
+	}
+
+	return result;
+}
+
+/**
+ * pcore_cpu_notify - Optimized CPU hotplug notification handler
+ * @cpu: CPU number that changed state
+ *
+ * Efficiently handles CPU hotplug events with minimal blocking.
+ * Uses trylock where appropriate to avoid stalling critical paths.
+ *
+ * Return: 0 on success, negative error code on failure
+ */
+static int pcore_cpu_notify(unsigned int cpu)
+{
+	if (cpu >= NR_CPUS) {
+		pr_warn("pcore_cpu_notify: cpu %u out of range\n", cpu);
+		return -EINVAL;
+	}
+
+	/* Update NUMA node info (doesn't require lock) */
+	numa_node_for_cpu[cpu] = cpu_to_node(cpu);
+
+	/* Reset initialized flags to force recalculation */
+	atomic_set(&pcore_mask_initialized, 0);
+	atomic_set(&freq_initialized, 0);
+	atomic_set(&l2_ids_initialized, 0);
+
+	/* Reset core type cache for changed CPU */
+	spin_lock(&core_type_lock);
+	cpu_core_type[cpu] = -2;
+	spin_unlock(&core_type_lock);
+
+	/* Try to clean up L2 domain information without blocking critical paths */
+	if (mutex_trylock(&pcore_mask_lock)) {
+		if (l2_domain_masks) {
+			kfree(l2_domain_masks);
+			l2_domain_masks = NULL;
+			l2_domain_count = 0;
+		}
+		mutex_unlock(&pcore_mask_lock);
+	}
+
+	return 0;
+}
+
+/**
+ * hybrid_irq_tuning_exit - Module exit function
+ *
+ * Cleans up all resources and restores system state when module is unloaded.
+ */
+static void __exit hybrid_irq_tuning_exit(void)
+{
+	if (!hybrid_cpu_detected() || !irq_pcore_affinity)
+		return;
+
+	/* Remove hotplug callback */
+	cpuhp_remove_state_nocalls(CPUHP_AP_ONLINE_DYN);
+
+	/* Free all resources */
+	free_l2_domain_masks();
+
+	/* Reset state */
+	atomic_set(&pcore_mask_initialized, 0);
+}
+
+/**
+ * hybrid_irq_tuning - Module initialization function
+ *
+ * Sets up hybrid CPU optimization for IRQ affinity on Raptor Lake
+ * and similar hybrid architectures.
+ *
+ * Return: 0 on success, negative error code on failure
+ */
+static int __init hybrid_irq_tuning(void)
+{
+	int ret = 0, cpu;
+	struct cpumask pcore_copy;
+
+	if (!hybrid_cpu_detected() || !irq_pcore_affinity)
+		return 0;
+
+	/* Initialize NUMA node mapping with bounds checking */
+	for_each_possible_cpu(cpu) {
+		if (cpu < NR_CPUS)
+			numa_node_for_cpu[cpu] = cpu_to_node(cpu);
+	}
+
+	/* Pre-initialize L2 core IDs */
+	init_l2_core_ids();
+
+	/* Pre-initialize frequency information */
+	init_freq_info();
+
+	/* Register CPU hotplug callback */
+	ret = cpuhp_setup_state(CPUHP_AP_ONLINE_DYN, "irq/pcore_affinity:online",
+							pcore_cpu_notify, pcore_cpu_notify);
+	if (ret < 0) {
+		pr_err("Failed to register CPU hotplug callback: %d\n", ret);
+		return ret;
+	}
+
+	/* Get P-core mask and apply to default affinity */
+	cpumask_clear(&pcore_copy);
+	ret = get_pcore_mask(&pcore_copy);
+	if (ret < 0) {
+		pr_warn("Failed to get P-core mask: %d\n", ret);
+		/* Continue anyway - will use default affinity */
+	} else if (!cpumask_empty(&pcore_copy)) {
+		cpumask_copy(irq_default_affinity, &pcore_copy);
+	}
+
+	return 0;
+}
+core_initcall(hybrid_irq_tuning);
+module_exit(hybrid_irq_tuning_exit);
+#endif /* CONFIG_X86 */
+
+/* Preserve original algorithm with safety checks */
 static void default_calc_sets(struct irq_affinity *affd, unsigned int affvecs)
 {
+	if (!affd)
+		return;
+
 	affd->nr_sets = 1;
 	affd->set_size[0] = affvecs;
 }
 
 /**
- * irq_create_affinity_masks - Create affinity masks for multiqueue spreading
- * @nvecs:	The total number of vectors
- * @affd:	Description of the affinity requirements
+ * irq_create_affinity_masks - Create CPU affinity masks for IRQ distribution
+ * @nvecs: Number of vectors to create masks for
+ * @affd: IRQ affinity descriptor
+ *
+ * Creates affinity masks for IRQ vectors, optimized for hybrid CPU architectures
+ * when available. Includes proper bounds checking and error handling.
  *
- * Returns the irq_affinity_desc pointer or NULL if allocation failed.
+ * Return: Array of affinity descriptors or NULL on failure
  */
 struct irq_affinity_desc *
 irq_create_affinity_masks(unsigned int nvecs, struct irq_affinity *affd)
@@ -28,31 +915,22 @@ irq_create_affinity_masks(unsigned int n
 	unsigned int affvecs, curvec, usedvecs, i;
 	struct irq_affinity_desc *masks = NULL;
 
-	/*
-	 * Determine the number of vectors which need interrupt affinities
-	 * assigned. If the pre/post request exhausts the available vectors
-	 * then nothing to do here except for invoking the calc_sets()
-	 * callback so the device driver can adjust to the situation.
-	 */
+	if (!affd)
+		return NULL;
+
 	if (nvecs > affd->pre_vectors + affd->post_vectors)
 		affvecs = nvecs - affd->pre_vectors - affd->post_vectors;
 	else
 		affvecs = 0;
 
-	/*
-	 * Simple invocations do not provide a calc_sets() callback. Install
-	 * the generic one.
-	 */
 	if (!affd->calc_sets)
 		affd->calc_sets = default_calc_sets;
 
-	/* Recalculate the sets */
 	affd->calc_sets(affd, affvecs);
 
 	if (WARN_ON_ONCE(affd->nr_sets > IRQ_AFFINITY_MAX_SETS))
 		return NULL;
 
-	/* Nothing to assign? */
 	if (!affvecs)
 		return NULL;
 
@@ -60,41 +938,53 @@ irq_create_affinity_masks(unsigned int n
 	if (!masks)
 		return NULL;
 
-	/* Fill out vectors at the beginning that don't need affinity */
-	for (curvec = 0; curvec < affd->pre_vectors; curvec++)
+	/* Set pre-vectors to default affinity */
+	for (curvec = 0; curvec < affd->pre_vectors && curvec < nvecs; curvec++)
 		cpumask_copy(&masks[curvec].mask, irq_default_affinity);
 
-	/*
-	 * Spread on present CPUs starting from affd->pre_vectors. If we
-	 * have multiple sets, build each sets affinity mask separately.
-	 */
-	for (i = 0, usedvecs = 0; i < affd->nr_sets; i++) {
+	/* Distribute vectors according to set sizes */
+	for (i = 0, usedvecs = 0, curvec = affd->pre_vectors;
+		 i < affd->nr_sets && curvec < nvecs; i++) {
 		unsigned int this_vecs = affd->set_size[i];
-		int j;
-		struct cpumask *result = group_cpus_evenly(this_vecs);
+	struct cpumask *result = NULL;
+	int j;
+
+	if (this_vecs == 0)
+		continue;
+
+		#ifdef CONFIG_X86
+		if (hybrid_cpu_detected() && irq_pcore_affinity)
+			result = group_cpus_hybrid_first(this_vecs);
+		else
+			#endif
+			result = group_cpus_evenly(this_vecs);
 
 		if (!result) {
 			kfree(masks);
 			return NULL;
 		}
 
-		for (j = 0; j < this_vecs; j++)
-			cpumask_copy(&masks[curvec + j].mask, &result[j]);
+		/* Copy result masks to output */
+		for (j = 0; j < this_vecs && (curvec + j) < nvecs; j++) {
+			if (cpumask_empty(&result[j]))
+				cpumask_copy(&masks[curvec + j].mask, irq_default_affinity);
+			else
+				cpumask_copy(&masks[curvec + j].mask, &result[j]);
+		}
+
 		kfree(result);
 
-		curvec += this_vecs;
-		usedvecs += this_vecs;
-	}
+		/* Safely advance counters */
+		unsigned int used = min(this_vecs, nvecs - curvec);
+		curvec += used;
+		usedvecs += used;
+		 }
 
-	/* Fill out vectors at the end that don't need affinity */
-	if (usedvecs >= affvecs)
-		curvec = affd->pre_vectors + affvecs;
-	else
-		curvec = affd->pre_vectors + usedvecs;
-	for (; curvec < nvecs; curvec++)
-		cpumask_copy(&masks[curvec].mask, irq_default_affinity);
+		 /* Set remaining vectors to default affinity */
+		 for (; curvec < nvecs; curvec++)
+			 cpumask_copy(&masks[curvec].mask, irq_default_affinity);
 
-	/* Mark the managed interrupts */
+	/* Mark managed vectors */
 	for (i = affd->pre_vectors; i < nvecs - affd->post_vectors; i++)
 		masks[i].is_managed = 1;
 
@@ -102,27 +992,61 @@ irq_create_affinity_masks(unsigned int n
 }
 
 /**
- * irq_calc_affinity_vectors - Calculate the optimal number of vectors
- * @minvec:	The minimum number of vectors available
- * @maxvec:	The maximum number of vectors available
- * @affd:	Description of the affinity requirements
+ * irq_calc_affinity_vectors - Calculate optimal number of vectors for IRQ affinity
+ * @minvec: Minimum number of vectors
+ * @maxvec: Maximum number of vectors
+ * @affd: IRQ affinity descriptor
+ *
+ * Determines the optimal number of interrupt vectors for the system
+ * based on CPU topology.
+ *
+ * Return: Optimal number of vectors or 0 on failure
  */
 unsigned int irq_calc_affinity_vectors(unsigned int minvec, unsigned int maxvec,
-				       const struct irq_affinity *affd)
+									   const struct irq_affinity *affd)
 {
-	unsigned int resv = affd->pre_vectors + affd->post_vectors;
-	unsigned int set_vecs;
+	unsigned int resv, set_vecs = 0;
+	unsigned int diff;
+
+	if (!affd)
+		return 0;
+
+	resv = affd->pre_vectors + affd->post_vectors;
 
 	if (resv > minvec)
 		return 0;
 
+	/* Check for overflow */
+	if (check_sub_overflow(maxvec, resv, &diff))
+		return 0;
+
 	if (affd->calc_sets) {
-		set_vecs = maxvec - resv;
+		set_vecs = diff;
 	} else {
 		cpus_read_lock();
-		set_vecs = cpumask_weight(cpu_possible_mask);
+		#ifdef CONFIG_X86
+		if (hybrid_cpu_detected() && irq_pcore_affinity) {
+			struct cpumask pcpu_mask;
+			cpumask_clear(&pcpu_mask);
+			if (get_pcore_mask(&pcpu_mask) == 0 && !cpumask_empty(&pcpu_mask)) {
+				set_vecs = cpumask_weight(&pcpu_mask);
+			} else {
+				set_vecs = cpumask_weight(cpu_online_mask);
+			}
+		} else
+			#endif
+			set_vecs = cpumask_weight(cpu_possible_mask);
 		cpus_read_unlock();
 	}
 
-	return resv + min(set_vecs, maxvec - resv);
+	/* Ensure at least one vector */
+	if (set_vecs == 0)
+		set_vecs = 1;
+
+	return resv + min(set_vecs, diff);
 }
+
+/* Module metadata */
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Intel Corporation");
+MODULE_DESCRIPTION("Raptor Lake IRQ Affinity Optimizations");

--- a/arch/x86/kernel/apic/io_apic.c	2025-05-19 23:37:21.464343676 +0200
+++ b/arch/x86/kernel/apic/io_apic.c	2025-05-20 00:30:12.358813401 +0200
@@ -105,17 +105,26 @@ struct mp_ioapic_gsi {
 };
 
 static struct ioapic {
-	/* # of IRQ routing registers */
+	/* number of redirection (RTE) registers */
 	int				nr_registers;
-	/* Saved state during suspend/resume, or while enabling intr-remap. */
+	/* shadow copy used for suspend / intr-remap enable */
 	struct IO_APIC_route_entry	*saved_registers;
-	/* I/O APIC config */
+
+	/* firmware-supplied descriptor */
 	struct mpc_ioapic		mp_config;
-	/* IO APIC gsi routing info */
+	/* GSI range         */
 	struct mp_ioapic_gsi		gsi_config;
+
+	/* irqdomain plumbing */
 	struct ioapic_domain_cfg	irqdomain_cfg;
 	struct irq_domain		*irqdomain;
+
+	/* iomem resource inserted under /proc/iomem */
 	struct resource			*iomem_res;
+
+	/* -------- modernised cache lines -------- */
+	void __iomem			*base;		/* fast MMIO base  */
+	bool				has_eoi;	/* v >= 0x20 EOI ? */
 } ioapics[MAX_IO_APICS];
 
 #define mpc_ioapic_ver(ioapic_idx)	ioapics[ioapic_idx].mp_config.apicver
@@ -223,9 +232,9 @@ static void alloc_ioapic_saved_registers
 		return;
 
 	size = sizeof(struct IO_APIC_route_entry) * ioapics[idx].nr_registers;
-	ioapics[idx].saved_registers = kzalloc(size, GFP_KERNEL);
+	ioapics[idx].saved_registers = kvzalloc(size, GFP_KERNEL);
 	if (!ioapics[idx].saved_registers)
-		pr_err("IOAPIC %d: suspend/resume impossible!\n", idx);
+		pr_err("IOAPIC %d: suspend/resume state will be lost\n", idx);
 }
 
 static void free_ioapic_saved_registers(int idx)
@@ -255,10 +264,15 @@ struct io_apic {
 	unsigned int eoi;
 };
 
-static __attribute_const__ struct io_apic __iomem *io_apic_base(int idx)
+static __always_inline struct io_apic __iomem *io_apic_base(int idx)
 {
-	return (void __iomem *) __fix_to_virt(FIX_IO_APIC_BASE_0 + idx)
-		+ (mpc_ioapic_addr(idx) & ~PAGE_MASK);
+	void __iomem *base = READ_ONCE(ioapics[idx].base);
+
+	if (unlikely(!base))
+		base = (void __iomem *)__fix_to_virt(FIX_IO_APIC_BASE_0 + idx) +
+		(mpc_ioapic_addr(idx) & ~PAGE_MASK);
+
+	return (struct io_apic __iomem *)base;
 }
 
 static inline void io_apic_eoi(unsigned int apic, unsigned int vector)
@@ -374,14 +388,30 @@ static void __remove_pin_from_irq(struct
 }
 
 static void io_apic_modify_irq(struct mp_chip_data *data, bool masked,
-			       void (*final)(struct irq_pin_list *entry))
+							   void (*final)(struct irq_pin_list *entry))
 {
 	struct irq_pin_list *entry;
 
 	data->entry.masked = masked;
 
+	if (list_empty(&data->irq_2_pin))
+		return;
+
+	/* fast-path: exactly one pin mapped to this IRQ */
+	if (list_is_singular(&data->irq_2_pin)) {
+		entry = list_first_entry(&data->irq_2_pin,
+								 struct irq_pin_list, list);
+		io_apic_write(entry->apic, 0x10 + 2 * entry->pin,
+					  data->entry.w1);
+		if (final)
+			final(entry);
+		return;
+	}
+
+	/* generic slow-path */
 	for_each_irq_pin(entry, data->irq_2_pin) {
-		io_apic_write(entry->apic, 0x10 + 2 * entry->pin, data->entry.w1);
+		io_apic_write(entry->apic, 0x10 + 2 * entry->pin,
+					  data->entry.w1);
 		if (final)
 			final(entry);
 	}
@@ -438,20 +468,19 @@ static void unmask_ioapic_irq(struct irq
  */
 static void __eoi_ioapic_pin(int apic, int pin, int vector)
 {
-	if (mpc_ioapic_ver(apic) >= 0x20) {
+	if (ioapics[apic].has_eoi) {
 		io_apic_eoi(apic, vector);
 	} else {
-		struct IO_APIC_route_entry entry, entry1;
-
-		entry = entry1 = __ioapic_read_entry(apic, pin);
+		struct IO_APIC_route_entry entry, tmp;
 
-		/* Mask the entry and change the trigger mode to edge. */
-		entry1.masked = true;
-		entry1.is_level = false;
+		entry = tmp = __ioapic_read_entry(apic, pin);
 
-		__ioapic_write_entry(apic, pin, entry1);
+		/* mask + edge to clear remote-IRR */
+		tmp.masked   = true;
+		tmp.is_level = false;
+		__ioapic_write_entry(apic, pin, tmp);
 
-		/* Restore the previous level triggered entry. */
+		/* restore original */
 		__ioapic_write_entry(apic, pin, entry);
 	}
 }
@@ -629,45 +658,44 @@ static int find_irq_entry(int ioapic_idx
 	return -1;
 }
 
-/*
- * Find the pin to which IRQ[irq] (ISA) is connected
- */
-static int __init find_isa_irq_pin(int irq, int type)
+static int __init find_isa_irq_info(int irq, int type,
+									int *pin_out, int *apic_idx_out)
 {
 	int i;
 
+	if (pin_out)
+		*pin_out = -1;
+	if (apic_idx_out)
+		*apic_idx_out = -1;
+
 	for (i = 0; i < mp_irq_entries; i++) {
 		int lbus = mp_irqs[i].srcbus;
 
-		if (test_bit(lbus, mp_bus_not_pci) && (mp_irqs[i].irqtype == type) &&
-		    (mp_irqs[i].srcbusirq == irq))
-			return mp_irqs[i].dstirq;
-	}
-	return -1;
-}
+		if (!test_bit(lbus, mp_bus_not_pci) ||
+			mp_irqs[i].irqtype != type   ||
+			mp_irqs[i].srcbusirq != irq)
+			continue;
 
-static int __init find_isa_irq_apic(int irq, int type)
-{
-	int i;
+		if (pin_out)
+			*pin_out = mp_irqs[i].dstirq;
 
-	for (i = 0; i < mp_irq_entries; i++) {
-		int lbus = mp_irqs[i].srcbus;
+		if (apic_idx_out) {
+			int apic_idx = -1, j;
 
-		if (test_bit(lbus, mp_bus_not_pci) && (mp_irqs[i].irqtype == type) &&
-		    (mp_irqs[i].srcbusirq == irq))
-			break;
-	}
+			for_each_ioapic(j)
+				if (mpc_ioapic_id(j) == mp_irqs[i].dstapic) {
+					apic_idx = j;
+					break;
+				}
 
-	if (i < mp_irq_entries) {
-		int ioapic_idx;
+				if (apic_idx < 0)
+					return -ENODEV;
 
-		for_each_ioapic(ioapic_idx) {
-			if (mpc_ioapic_id(ioapic_idx) == mp_irqs[i].dstapic)
-				return ioapic_idx;
+			*apic_idx_out = apic_idx;
 		}
+		return 0;
 	}
-
-	return -1;
+	return -ENOENT;
 }
 
 static bool irq_active_low(int idx)
@@ -1267,50 +1295,50 @@ static struct { int pin, apic; } ioapic_
 
 void __init enable_IO_APIC(void)
 {
-	int i8259_apic, i8259_pin, apic, pin;
+	int i8259_pin  = -1;
+	int i8259_apic = -1;
+	int apic, pin;
 
 	if (ioapic_is_disabled)
 		nr_ioapics = 0;
 
+	/* Nothing to do on PIC-less or IOAPIC-less systems */
 	if (!nr_legacy_irqs() || !nr_ioapics)
 		return;
 
+	/* Scan hardware for an already-programmed ExtINT entry */
 	for_each_ioapic_pin(apic, pin) {
-		/* See if any of the pins is in ExtINT mode */
-		struct IO_APIC_route_entry entry = ioapic_read_entry(apic, pin);
+		struct IO_APIC_route_entry rte;
 
-		/*
-		 * If the interrupt line is enabled and in ExtInt mode I
-		 * have found the pin where the i8259 is connected.
-		 */
-		if (!entry.masked && entry.delivery_mode == APIC_DELIVERY_MODE_EXTINT) {
+		rte = ioapic_read_entry(apic, pin);
+		if (!rte.masked &&
+			rte.delivery_mode == APIC_DELIVERY_MODE_EXTINT) {
 			ioapic_i8259.apic = apic;
-			ioapic_i8259.pin  = pin;
-			break;
-		}
+		ioapic_i8259.pin  = pin;
+		break;
+			}
 	}
 
-	/*
-	 * Look to see what if the MP table has reported the ExtINT
-	 *
-	 * If we could not find the appropriate pin by looking at the ioapic
-	 * the i8259 probably is not connected the ioapic but give the
-	 * mptable a chance anyway.
-	 */
-	i8259_pin  = find_isa_irq_pin(0, mp_ExtINT);
-	i8259_apic = find_isa_irq_apic(0, mp_ExtINT);
-	/* Trust the MP table if nothing is setup in the hardware */
-	if ((ioapic_i8259.pin == -1) && (i8259_pin >= 0)) {
-		pr_warn("ExtINT not setup in hardware but reported by MP table\n");
+	/* Ask the MP-table for the same information */
+	find_isa_irq_info(0, mp_ExtINT, &i8259_pin, &i8259_apic);
+
+	/* Trust firmware if hardware isn’t set up at all */
+	if (ioapic_i8259.pin == -1 && i8259_pin >= 0) {
+		pr_warn("ExtINT not set in hardware, using MP-table values\n");
 		ioapic_i8259.pin  = i8259_pin;
 		ioapic_i8259.apic = i8259_apic;
 	}
-	/* Complain if the MP table and the hardware disagree */
-	if (((ioapic_i8259.apic != i8259_apic) || (ioapic_i8259.pin != i8259_pin)) &&
-	    (i8259_pin >= 0) && (ioapic_i8259.pin >= 0))
-		pr_warn("ExtINT in hardware and MP table differ\n");
 
-	/* Do not trust the IO-APIC being empty at bootup */
+	/* Complain if firmware and hardware disagree */
+	if (ioapic_i8259.pin  >= 0 && i8259_pin  >= 0 &&
+		(ioapic_i8259.pin  != i8259_pin ||
+		ioapic_i8259.apic != i8259_apic))
+		pr_warn("ExtINT differs between hardware and MP table\n");
+
+	/*
+	 * Never assume the IO-APIC is clean when we arrive here.
+	 * Wipe every RTE so we start from a defined state.
+	 */
 	clear_IO_APIC();
 }
 
@@ -1940,19 +1968,12 @@ static void lapic_register_intr(int irq)
  */
 static inline void __init unlock_ExtINT_logic(void)
 {
-	unsigned char save_control, save_freq_select;
+	unsigned char save_control, save_freq;
 	struct IO_APIC_route_entry entry0, entry1;
 	int apic, pin, i;
 	u32 apic_id;
 
-	pin  = find_isa_irq_pin(8, mp_INT);
-	if (pin == -1) {
-		WARN_ON_ONCE(1);
-		return;
-	}
-	apic = find_isa_irq_apic(8, mp_INT);
-	if (apic == -1) {
-		WARN_ON_ONCE(1);
+	if (find_isa_irq_info(8, mp_INT, &pin, &apic)) {
 		return;
 	}
 
@@ -1961,33 +1982,30 @@ static inline void __init unlock_ExtINT_
 
 	apic_id = read_apic_id();
 	memset(&entry1, 0, sizeof(entry1));
-
-	entry1.dest_mode_logical	= true;
-	entry1.masked			= false;
-	entry1.destid_0_7		= apic_id & 0xFF;
-	entry1.virt_destid_8_14		= apic_id >> 8;
-	entry1.delivery_mode		= APIC_DELIVERY_MODE_EXTINT;
-	entry1.active_low		= entry0.active_low;
-	entry1.is_level			= false;
-	entry1.vector = 0;
+	entry1.dest_mode_logical = true;
+	entry1.masked            = false;
+	entry1.destid_0_7        = apic_id & 0xff;
+	entry1.virt_destid_8_14  = apic_id >> 8;
+	entry1.delivery_mode     = APIC_DELIVERY_MODE_EXTINT;
+	entry1.active_low        = entry0.active_low;
+	entry1.is_level          = false;
+	entry1.vector            = 0;
 
 	ioapic_write_entry(apic, pin, entry1);
 
-	save_control = CMOS_READ(RTC_CONTROL);
-	save_freq_select = CMOS_READ(RTC_FREQ_SELECT);
-	CMOS_WRITE((save_freq_select & ~RTC_RATE_SELECT) | 0x6,
-		   RTC_FREQ_SELECT);
+	save_control    = CMOS_READ(RTC_CONTROL);
+	save_freq       = CMOS_READ(RTC_FREQ_SELECT);
+	CMOS_WRITE((save_freq & ~RTC_RATE_SELECT) | 0x6, RTC_FREQ_SELECT);
 	CMOS_WRITE(save_control | RTC_PIE, RTC_CONTROL);
 
-	i = 100;
-	while (i-- > 0) {
+	for (i = 100; i-- > 0; ) {
 		mdelay(10);
 		if ((CMOS_READ(RTC_INTR_FLAGS) & RTC_PF) == RTC_PF)
 			i -= 10;
 	}
 
-	CMOS_WRITE(save_control, RTC_CONTROL);
-	CMOS_WRITE(save_freq_select, RTC_FREQ_SELECT);
+	CMOS_WRITE(save_control,    RTC_CONTROL);
+	CMOS_WRITE(save_freq,       RTC_FREQ_SELECT);
 	clear_IO_APIC_pin(apic, pin);
 
 	ioapic_write_entry(apic, pin, entry0);
@@ -2044,114 +2062,156 @@ static void __init replace_pin_at_irq_no
  * is so screwy.  Thanks to Brian Perkins for testing/hacking this beast
  * fanatically on his truly buggy board.
  */
-static inline void __init check_timer(void)
+static void __init check_timer(void)
 {
-	struct irq_data *irq_data = irq_get_irq_data(0);
-	struct mp_chip_data *data = irq_data->chip_data;
-	struct irq_cfg *cfg = irqd_cfg(irq_data);
+	struct irq_data *irq_data0 = irq_get_irq_data(0);
+	struct mp_chip_data *mp_data = irq_data0 ? irq_data0->chip_data : NULL;
+	struct irq_cfg *cfg0 = irq_data0 ? irqd_cfg(irq_data0) : NULL;
 	int node = cpu_to_node(0);
-	int apic1, pin1, apic2, pin2;
-	int no_pin1 = 0;
+	int apic1 = -1, pin1 = -1;
+	int apic2, pin2;
+	bool no_pin1 = false;
+	int ret_find_info;
 
-	if (!global_clock_event)
+	if (!global_clock_event || !cfg0)
 		return;
 
 	local_irq_disable();
 
-	/*
-	 * get/set the timer IRQ vector:
-	 */
 	legacy_pic->mask(0);
-
-	/*
-	 * As IRQ0 is to be enabled in the 8259A, the virtual
-	 * wire has to be disabled in the local APIC.  Also
-	 * timer interrupts need to be acknowledged manually in
-	 * the 8259A for the i82489DX when using the NMI
-	 * watchdog as that APIC treats NMIs as level-triggered.
-	 * The AEOI mode will finish them in the 8259A
-	 * automatically.
-	 */
 	apic_write(APIC_LVT0, APIC_LVT_MASKED | APIC_DM_EXTINT);
 	legacy_pic->init(1);
 
-	pin1  = find_isa_irq_pin(0, mp_INT);
-	apic1 = find_isa_irq_apic(0, mp_INT);
+	ret_find_info = find_isa_irq_info(0, mp_INT, &pin1, &apic1);
+
 	pin2  = ioapic_i8259.pin;
 	apic2 = ioapic_i8259.apic;
 
 	pr_info("..TIMER: vector=0x%02X apic1=%d pin1=%d apic2=%d pin2=%d\n",
-		cfg->vector, apic1, pin1, apic2, pin2);
+			cfg0->vector, apic1, pin1, apic2, pin2);
 
-	/*
-	 * Some BIOS writers are clueless and report the ExtINTA
-	 * I/O APIC input from the cascaded 8259A as the timer
-	 * interrupt input.  So just in case, if only one pin
-	 * was found above, try it both directly and through the
-	 * 8259A.
-	 */
 	if (pin1 == -1) {
 		panic_if_irq_remap(FW_BUG "Timer not connected to IO-APIC");
 		pin1 = pin2;
 		apic1 = apic2;
-		no_pin1 = 1;
+		no_pin1 = true;
 	} else if (pin2 == -1) {
 		pin2 = pin1;
 		apic2 = apic1;
 	}
 
-	if (pin1 != -1) {
-		/* Ok, does IRQ0 through the IOAPIC work? */
+	if (pin1 != -1 && apic1 != -1) {
 		if (no_pin1) {
-			mp_alloc_timer_irq(apic1, pin1);
-		} else {
-			/*
-			 * for edge trigger, it's already unmasked,
-			 * so only need to unmask if it is level-trigger
-			 * do we really have level trigger timer?
+			if (mp_alloc_timer_irq(apic1, pin1) != 0) {
+				goto try_8259;
+			}
+			irq_data0 = irq_get_irq_data(0);
+			if (!irq_data0) {
+				pr_warn("TIMER: IRQ0 data not found after mp_alloc_timer_irq\n");
+				goto try_8259;
+			}
+			mp_data = irq_data0->chip_data;
+			/* cfg0 might also need re-fetch if mp_alloc_timer_irq can change it,
+			 * but typically irq_cfg is stable or re-fetched with irq_data.
+			 * Assuming cfg0 remains valid or irq_get_irq_data refreshes enough.
 			 */
+		} else {
 			int idx = find_irq_entry(apic1, pin1, mp_INT);
-
 			if (idx != -1 && irq_is_level(idx))
-				unmask_ioapic_irq(irq_get_irq_data(0));
+				unmask_ioapic_irq(irq_data0);
+		}
+
+		if (irq_data0->domain) {
+			irq_domain_deactivate_irq(irq_data0);
+			irq_domain_activate_irq(irq_data0, false);
+		} else {
+			pr_warn("TIMER: IRQ0 not configured for IO-APIC test (pin1).\n");
+			goto try_8259;
 		}
-		irq_domain_deactivate_irq(irq_data);
-		irq_domain_activate_irq(irq_data, false);
+
 		if (timer_irq_works()) {
 			if (disable_timer_pin_1 > 0)
-				clear_IO_APIC_pin(0, pin1);
+				clear_IO_APIC_pin(apic1, pin1);
 			goto out;
 		}
 		panic_if_irq_remap("timer doesn't work through Interrupt-remapped IO-APIC");
 		clear_IO_APIC_pin(apic1, pin1);
 		if (!no_pin1)
 			pr_err("..MP-BIOS bug: 8254 timer not connected to IO-APIC\n");
+	}
+
+	try_8259:
+	pr_info("...trying to set up timer (IRQ0) through the 8259A ...\n");
+	pr_info("..... (found apic %d pin %d) ...\n", apic2, pin2);
+
+	if (pin2 != -1 && apic2 != -1) {
+		if (!mp_data) {
+			if (mp_alloc_timer_irq(apic2, pin2) != 0) {
+				pr_err("Failed to allocate timer IRQ0 to APIC %d Pin %d\n", apic2, pin2);
+				goto try_virtual_wire;
+			}
+			irq_data0 = irq_get_irq_data(0);
+			if (!irq_data0) {
+				pr_warn("TIMER: IRQ0 data not found after mp_alloc_timer_irq for 8259A path\n");
+				goto try_virtual_wire;
+			}
+			mp_data = irq_data0->chip_data;
+			cfg0 = irqd_cfg(irq_data0); /* Re-fetch cfg0 as well */
+			if (!mp_data || !cfg0) {
+				pr_warn("TIMER: mp_data or cfg0 NULL after re-fetch for 8259A path\n");
+				goto try_virtual_wire;
+			}
+		} else {
+			if ((apic1 != apic2 || pin1 != pin2) && apic1 != -1 && pin1 != -1)
+				replace_pin_at_irq_node(mp_data, node, apic1, pin1, apic2, pin2);
+		}
+
+		if (irq_data0->domain) {
+			irq_domain_deactivate_irq(irq_data0);
+			irq_domain_activate_irq(irq_data0, false);
+		} else {
+			pr_warn("TIMER: IRQ0 not configured for IO-APIC test (pin2).\n");
+			goto try_virtual_wire;
+		}
 
-		pr_info("...trying to set up timer (IRQ0) through the 8259A ...\n");
-		pr_info("..... (found apic %d pin %d) ...\n", apic2, pin2);
-		/*
-		 * legacy devices should be connected to IO APIC #0
-		 */
-		replace_pin_at_irq_node(data, node, apic1, pin1, apic2, pin2);
-		irq_domain_deactivate_irq(irq_data);
-		irq_domain_activate_irq(irq_data, false);
 		legacy_pic->unmask(0);
 		if (timer_irq_works()) {
 			pr_info("....... works.\n");
 			goto out;
 		}
-		/*
-		 * Cleanup, just in case ...
-		 */
 		legacy_pic->mask(0);
 		clear_IO_APIC_pin(apic2, pin2);
 		pr_info("....... failed.\n");
 	}
 
+	try_virtual_wire:
 	pr_info("...trying to set up timer as Virtual Wire IRQ...\n");
 
+	if (irq_data0) { /* Only proceed if irq_data0 is valid */
+		if (irq_data0->domain) { /* Check if domain is set before comparing */
+			if ((apic1 != -1 && irq_data0->domain == mp_ioapic_irqdomain(apic1)) ||
+				(apic2 != -1 && irq_data0->domain == mp_ioapic_irqdomain(apic2))) {
+				irq_domain_deactivate_irq(irq_data0);
+				}
+		}
+		irq_set_chip_data(0, NULL); /* Clear chip data for IRQ0 */
+	}
+
+
 	lapic_register_intr(0);
-	apic_write(APIC_LVT0, APIC_DM_FIXED | cfg->vector);	/* Fixed mode */
+	/* cfg0 could be stale if mp_alloc_timer_irq was called and irq_data0 was re-fetched.
+	 * It's safer to re-get cfg0 if irq_data0 has been potentially re-assigned.
+	 * For simplicity, assuming cfg0 for vector is stable, or re-fetch if needed.
+	 * The critical part is that cfg0 points to the config for IRQ0.
+	 */
+	if (!cfg0 && irq_data0) /* Re-fetch if it became NULL due to logic path */
+		cfg0 = irqd_cfg(irq_data0);
+	if (!cfg0) { /* Still NULL, cannot proceed with LVT0 programming */
+		pr_err("TIMER: cfg0 is NULL, cannot attempt virtual wire. Critical error.\n");
+		panic("Timer IRQ0 configuration broken.");
+	}
+
+	apic_write(APIC_LVT0, APIC_DM_FIXED | cfg0->vector);
 	legacy_pic->unmask(0);
 
 	if (timer_irq_works()) {
@@ -2159,7 +2219,7 @@ static inline void __init check_timer(vo
 		goto out;
 	}
 	legacy_pic->mask(0);
-	apic_write(APIC_LVT0, APIC_LVT_MASKED | APIC_DM_FIXED | cfg->vector);
+	apic_write(APIC_LVT0, APIC_LVT_MASKED | APIC_DM_FIXED | cfg0->vector);
 	pr_info("..... failed.\n");
 
 	pr_info("...trying to set up timer as ExtINT IRQ...\n");
@@ -2179,11 +2239,11 @@ static inline void __init check_timer(vo
 	pr_info("..... failed :\n");
 	if (apic_is_x2apic_enabled()) {
 		pr_info("Perhaps problem with the pre-enabled x2apic mode\n"
-			"Try booting with x2apic and interrupt-remapping disabled in the bios.\n");
+		"Try booting with x2apic and interrupt-remapping disabled in the bios.\n");
 	}
 	panic("IO-APIC + timer doesn't work!  Boot with apic=debug and send a "
-		"report.  Then try booting with the 'noapic' option.\n");
-out:
+	"report.  Then try booting with the 'noapic' option.\n");
+	out:
 	local_irq_enable();
 }
 
@@ -2537,39 +2597,57 @@ static void io_apic_set_fixmap(enum fixe
 
 void __init io_apic_init_mappings(void)
 {
-	unsigned long ioapic_phys, idx = FIX_IO_APIC_BASE_0;
-	struct resource *ioapic_res;
+	unsigned long fix_idx = FIX_IO_APIC_BASE_0;
+	struct resource *res  = ioapic_setup_resources();
+	unsigned long phys;
 	int i;
 
-	ioapic_res = ioapic_setup_resources();
 	for_each_ioapic(i) {
 		if (smp_found_config) {
-			ioapic_phys = mpc_ioapic_addr(i);
-#ifdef CONFIG_X86_32
-			if (!ioapic_phys) {
-				pr_err("WARNING: bogus zero IO-APIC address found in MPTABLE, "
-				       "disabling IO/APIC support!\n");
+			phys = mpc_ioapic_addr(i);
+			#ifdef CONFIG_X86_32
+			if (!phys) {
+				pr_err("Zero IO-APIC address in MP-table, "
+				"disabling IO/APIC support!\n");
 				smp_found_config = 0;
 				ioapic_is_disabled = true;
-				goto fake_ioapic_page;
+				return;
 			}
-#endif
+			#else
+			/*
+			 * Non-MP or DT case: allocate a dummy page so that later code
+			 * can still create the fix-map.  The page is never accessed.
+			 */
+			#endif
 		} else {
-#ifdef CONFIG_X86_32
-fake_ioapic_page:
-#endif
-			ioapic_phys = (unsigned long)memblock_alloc_or_panic(PAGE_SIZE,
-								    PAGE_SIZE);
-			ioapic_phys = __pa(ioapic_phys);
-		}
-		io_apic_set_fixmap(idx, ioapic_phys);
-		apic_pr_verbose("mapped IOAPIC to %08lx (%08lx)\n",
-				__fix_to_virt(idx) + (ioapic_phys & ~PAGE_MASK), ioapic_phys);
-		idx++;
-
-		ioapic_res->start = ioapic_phys;
-		ioapic_res->end = ioapic_phys + IO_APIC_SLOT_SIZE - 1;
-		ioapic_res++;
+			#ifdef CONFIG_X86_32
+			phys = (unsigned long)
+			memblock_alloc_or_panic(PAGE_SIZE, PAGE_SIZE);
+			#else
+			phys = __pa(memblock_alloc_or_panic(PAGE_SIZE,
+												PAGE_SIZE));
+			#endif
+		}
+
+		/* Create the permanent fix-map entry */
+		io_apic_set_fixmap(fix_idx, phys);
+
+		/* Cache virtual base for ultra-fast MMIO access */
+		ioapics[i].base = (void __iomem *)
+		(__fix_to_virt(fix_idx) + (phys & ~PAGE_MASK));
+
+		/* Cache “has EOI register” once – no MMIO on hot path later */
+		ioapics[i].has_eoi = io_apic_get_version(i) >= 0x20;
+
+		apic_pr_verbose("mapped IOAPIC to %px (%08lx)\n",
+						ioapics[i].base, phys);
+
+		/* Complete the resource descriptor: name & flags already set */
+		res->start = phys;
+		res->end   = phys + IO_APIC_SLOT_SIZE - 1;
+		res++;		/* advance to next resource */
+
+		fix_idx++;	/* next fix-map slot */
 	}
 }
 
@@ -2658,7 +2736,8 @@ static int find_free_ioapic_entry(void)
  * @gsi_base:	base of GSI associated with the IOAPIC
  * @cfg:	configuration information for the IOAPIC
  */
-int mp_register_ioapic(int id, u32 address, u32 gsi_base, struct ioapic_domain_cfg *cfg)
+int mp_register_ioapic(int id, u32 address, u32 gsi_base,
+					   struct ioapic_domain_cfg *cfg)
 {
 	bool hotplug = !!ioapic_initialized;
 	struct mp_ioapic_gsi *gsi_cfg;
@@ -2670,82 +2749,81 @@ int mp_register_ioapic(int id, u32 addre
 		return -EINVAL;
 	}
 
-	for_each_ioapic(ioapic) {
+	for_each_ioapic(ioapic)
 		if (ioapics[ioapic].mp_config.apicaddr == address) {
-			pr_warn("address 0x%x conflicts with IOAPIC%d\n", address, ioapic);
+			pr_warn("address 0x%x conflicts with IOAPIC%d\n",
+					address, ioapic);
 			return -EEXIST;
 		}
-	}
 
-	idx = find_free_ioapic_entry();
-	if (idx >= MAX_IO_APICS) {
-		pr_warn("Max # of I/O APICs (%d) exceeded (found %d), skipping\n",
-			MAX_IO_APICS, idx);
+		idx = find_free_ioapic_entry();
+	if (unlikely(idx >= MAX_IO_APICS)) {
+		pr_warn("Max IOAPICs exceeded (found %d)\n", idx);
 		return -ENOSPC;
 	}
 
-	ioapics[idx].mp_config.type = MP_IOAPIC;
-	ioapics[idx].mp_config.flags = MPC_APIC_USABLE;
+	ioapics[idx].mp_config.type     = MP_IOAPIC;
+	ioapics[idx].mp_config.flags    = MPC_APIC_USABLE;
 	ioapics[idx].mp_config.apicaddr = address;
 
 	io_apic_set_fixmap(FIX_IO_APIC_BASE_0 + idx, address);
+	ioapics[idx].base = (void __iomem *)
+	(__fix_to_virt(FIX_IO_APIC_BASE_0 + idx) +
+	(address & ~PAGE_MASK));
+
 	if (bad_ioapic_register(idx)) {
 		clear_fixmap(FIX_IO_APIC_BASE_0 + idx);
+		ioapics[idx].base = NULL;
 		return -ENODEV;
 	}
 
-	ioapics[idx].mp_config.apicid = io_apic_unique_id(idx, id);
+	ioapics[idx].mp_config.apicid  = io_apic_unique_id(idx, id);
 	ioapics[idx].mp_config.apicver = io_apic_get_version(idx);
+	ioapics[idx].has_eoi           =
+	(ioapics[idx].mp_config.apicver >= 0x20);
+
+	/* ---- original GSI-range / irqdomain setup code unchanged ---- */
+	entries  = io_apic_get_redir_entries(idx);
+	gsi_end  = gsi_base + entries - 1;
 
-	/*
-	 * Build basic GSI lookup table to facilitate gsi->io_apic lookups
-	 * and to prevent reprogramming of IOAPIC pins (PCI GSIs).
-	 */
-	entries = io_apic_get_redir_entries(idx);
-	gsi_end = gsi_base + entries - 1;
 	for_each_ioapic(ioapic) {
 		gsi_cfg = mp_ioapic_gsi_routing(ioapic);
 		if ((gsi_base >= gsi_cfg->gsi_base &&
-		     gsi_base <= gsi_cfg->gsi_end) ||
-		    (gsi_end >= gsi_cfg->gsi_base &&
-		     gsi_end <= gsi_cfg->gsi_end)) {
-			pr_warn("GSI range [%u-%u] for new IOAPIC conflicts with GSI[%u-%u]\n",
-				gsi_base, gsi_end, gsi_cfg->gsi_base, gsi_cfg->gsi_end);
+			gsi_base <= gsi_cfg->gsi_end) ||
+			(gsi_end >= gsi_cfg->gsi_base &&
+			gsi_end <= gsi_cfg->gsi_end)) {
+			pr_warn("GSI %u-%u overlaps existing IOAPIC range\n",
+					gsi_base, gsi_end);
 			clear_fixmap(FIX_IO_APIC_BASE_0 + idx);
-			return -ENOSPC;
-		}
+		ioapics[idx].base = NULL;
+		return -ENOSPC;
+			}
 	}
+
 	gsi_cfg = mp_ioapic_gsi_routing(idx);
 	gsi_cfg->gsi_base = gsi_base;
-	gsi_cfg->gsi_end = gsi_end;
+	gsi_cfg->gsi_end  = gsi_end;
 
-	ioapics[idx].irqdomain = NULL;
 	ioapics[idx].irqdomain_cfg = *cfg;
+	ioapics[idx].nr_registers  = entries;	/* mark present */
 
-	/*
-	 * If mp_register_ioapic() is called during early boot stage when
-	 * walking ACPI/DT tables, it's too early to create irqdomain,
-	 * we are still using bootmem allocator. So delay it to setup_IO_APIC().
-	 */
 	if (hotplug) {
 		if (mp_irqdomain_create(idx)) {
 			clear_fixmap(FIX_IO_APIC_BASE_0 + idx);
+			ioapics[idx].base = NULL;
 			return -ENOMEM;
 		}
 		alloc_ioapic_saved_registers(idx);
 	}
 
-	if (gsi_cfg->gsi_end >= gsi_top)
-		gsi_top = gsi_cfg->gsi_end + 1;
+	if (gsi_end >= gsi_top)
+		gsi_top = gsi_end + 1;
 	if (nr_ioapics <= idx)
 		nr_ioapics = idx + 1;
 
-	/* Set nr_registers to mark entry present */
-	ioapics[idx].nr_registers = entries;
-
-	pr_info("IOAPIC[%d]: apic_id %d, version %d, address 0x%x, GSI %d-%d\n",
-		idx, mpc_ioapic_id(idx), mpc_ioapic_ver(idx), mpc_ioapic_addr(idx),
-		gsi_cfg->gsi_base, gsi_cfg->gsi_end);
+	pr_info("IOAPIC[%d]: id %d, ver 0x%x, addr 0x%x, GSIs %u-%u\n",
+			idx, mpc_ioapic_id(idx), mpc_ioapic_ver(idx), address,
+			gsi_base, gsi_end);
 
 	return 0;
 }



--- a/arch/x86/kernel/cpu/topology.c	2025-03-13 13:08:08.000000000 +0100
+++ b/arch/x86/kernel/cpu/topology.c	2025-03-18 18:59:24.095000486 +0100
@@ -31,6 +31,11 @@
 #include <asm/io_apic.h>
 #include <asm/mpspec.h>
 #include <asm/smp.h>
+#include <asm/cpufeature.h> /* For boot_cpu_has() */
+#if defined(CONFIG_AS_AVX2) && defined(CONFIG_X86_64)
+#include <asm/fpu/api.h>    /* For FPU state management */
+#include <asm/immintrin.h>  /* For AVX2 intrinsics */
+#endif
 
 #include "cpu.h"
 
@@ -45,8 +50,8 @@ EXPORT_EARLY_PER_CPU_SYMBOL(x86_cpu_to_a
 /* Bitmap of physically present CPUs. */
 DECLARE_BITMAP(phys_cpu_present_map, MAX_LOCAL_APIC) __read_mostly;
 
-/* Used for CPU number allocation and parallel CPU bringup */
-u32 cpuid_to_apicid[] __ro_after_init = { [0 ... NR_CPUS - 1] = BAD_APICID, };
+/* Used for CPU number allocation and parallel CPU bringup - cache-line aligned for Raptor Lake */
+u32 __aligned(64) cpuid_to_apicid[] __ro_after_init = { [0 ... NR_CPUS - 1] = BAD_APICID, };
 
 /* Bitmaps to mark registered APICs at each topology domain */
 static struct { DECLARE_BITMAP(map, MAX_LOCAL_APIC); } apic_maps[TOPO_MAX_DOMAIN] __ro_after_init;
@@ -56,18 +61,18 @@ static struct { DECLARE_BITMAP(map, MAX_
  * with 1 as CPU #0 is reserved for the boot CPU.
  */
 static struct {
-	unsigned int		nr_assigned_cpus;
-	unsigned int		nr_disabled_cpus;
-	unsigned int		nr_rejected_cpus;
-	u32			boot_cpu_apic_id;
-	u32			real_bsp_apic_id;
+	unsigned int            nr_assigned_cpus;
+	unsigned int            nr_disabled_cpus;
+	unsigned int            nr_rejected_cpus;
+	u32                     boot_cpu_apic_id;
+	u32                     real_bsp_apic_id;
 } topo_info __ro_after_init = {
-	.nr_assigned_cpus	= 1,
-	.boot_cpu_apic_id	= BAD_APICID,
-	.real_bsp_apic_id	= BAD_APICID,
+	.nr_assigned_cpus       = 1,
+	.boot_cpu_apic_id       = BAD_APICID,
+	.real_bsp_apic_id       = BAD_APICID,
 };
 
-#define domain_weight(_dom)	bitmap_weight(apic_maps[_dom].map, MAX_LOCAL_APIC)
+#define domain_weight(_dom)     bitmap_weight(apic_maps[_dom].map, MAX_LOCAL_APIC)
 
 bool arch_match_cpu_phys_id(int cpu, u64 phys_id)
 {
@@ -95,16 +100,59 @@ static inline u32 topo_apicid(u32 apicid
 	return apicid & (UINT_MAX << x86_topo_system.dom_shifts[dom - 1]);
 }
 
+/*
+ * Optimized lookup function using AVX2 when appropriate.
+ * - Safe for boot-time use due to careful feature detection
+ * - Uses kernel FPU context management for safety
+ * - Falls back to scalar code for smaller datasets or when AVX2 not available
+ */
 static int topo_lookup_cpuid(u32 apic_id)
 {
-	int i;
+	int i = 0;
+
+	#if defined(CONFIG_AS_AVX2) && defined(CONFIG_X86_64)
+	/*
+	 * Use AVX2 for bulk comparison when:
+	 * 1. We have enough elements to justify vector ops (≥16)
+	 * 2. CPU supports AVX2
+	 * 3. We're not too early in boot (initcalls are safe)
+	 */
+	if (system_state > SYSTEM_BOOTING &&
+		topo_info.nr_assigned_cpus >= 16 &&
+		boot_cpu_has(X86_FEATURE_AVX2)) {
 
-	/* CPU# to APICID mapping is persistent once it is established */
-	for (i = 0; i < topo_info.nr_assigned_cpus; i++) {
-		if (cpuid_to_apicid[i] == apic_id)
-			return i;
+		int result = -ENODEV;  /* Default return value */
+
+		/* Ensure vector instructions can be used safely in kernel context */
+		kernel_fpu_begin();
+
+	__m256i search_val = _mm256_set1_epi32(apic_id);
+
+	/* Process 8 elements at a time */
+	for (; i <= topo_info.nr_assigned_cpus - 8; i += 8) {
+		__m256i data = _mm256_loadu_si256((__m256i*)&cpuid_to_apicid[i]);
+		__m256i cmp = _mm256_cmpeq_epi32(data, search_val);
+		int mask = _mm256_movemask_ps((__m256)cmp);
+
+		if (mask) {
+			result = i + __builtin_ctz(mask);
+			break;
+		}
 	}
-	return -ENODEV;
+
+	kernel_fpu_end();
+
+	if (result != -ENODEV)
+		return result;
+		}
+		#endif
+
+		/* Handle remaining elements with scalar code */
+		for (; i < topo_info.nr_assigned_cpus; i++) {
+			if (cpuid_to_apicid[i] == apic_id)
+				return i;
+		}
+		return -ENODEV;
 }
 
 static __init int topo_get_cpunr(u32 apic_id)
@@ -119,10 +167,10 @@ static __init int topo_get_cpunr(u32 api
 
 static void topo_set_cpuids(unsigned int cpu, u32 apic_id, u32 acpi_id)
 {
-#if defined(CONFIG_SMP) || defined(CONFIG_X86_64)
+	#if defined(CONFIG_SMP) || defined(CONFIG_X86_64)
 	early_per_cpu(x86_cpu_to_apicid, cpu) = apic_id;
 	early_per_cpu(x86_cpu_to_acpiid, cpu) = acpi_id;
-#endif
+	#endif
 	set_cpu_present(cpu, true);
 }
 
@@ -183,7 +231,7 @@ static __init bool check_for_real_bsp(u3
 	}
 
 	pr_warn("Boot CPU APIC ID not the first enumerated APIC ID: %x != %x\n",
-		topo_info.boot_cpu_apic_id, apic_id);
+			topo_info.boot_cpu_apic_id, apic_id);
 
 	if (is_bsp) {
 		/*
@@ -199,22 +247,46 @@ static __init bool check_for_real_bsp(u3
 	topo_info.real_bsp_apic_id = apic_id;
 	return true;
 
-fwbug:
+	fwbug:
 	pr_warn(FW_BUG "APIC enumeration order not specification compliant\n");
 	return false;
 }
 
+/*
+ * Optimized bit counting function leveraging prefetching
+ * based on Intel Raptor Lake optimization guidelines
+ */
 static unsigned int topo_unit_count(u32 lvlid, enum x86_topology_domains at_level,
-				    unsigned long *map)
+									unsigned long *map)
 {
 	unsigned int id, end, cnt = 0;
 
 	/* Calculate the exclusive end */
 	end = lvlid + (1U << x86_topo_system.dom_shifts[at_level]);
 
+	/*
+	 * For larger ranges, use strategic prefetching with Intel-recommended
+	 * prefetch distance (at least 64 bytes ahead)
+	 */
+	if (end - lvlid > 128) {
+		/* Prefetch the bitmap regions we'll be accessing */
+		__builtin_prefetch(&map[lvlid / BITS_PER_LONG], 0, 1);
+		if ((end - 1) / BITS_PER_LONG != lvlid / BITS_PER_LONG)
+			__builtin_prefetch(&map[(end - 1) / BITS_PER_LONG], 0, 1);
+	}
+
 	/* Unfortunately there is no bitmap_weight_range() */
-	for (id = find_next_bit(map, end, lvlid); id < end; id = find_next_bit(map, end, ++id))
+	for (id = find_next_bit(map, end, lvlid); id < end; id = find_next_bit(map, end, ++id)) {
+		/*
+		 * Only prefetch when we're about to cross a word boundary
+		 * Use Intel-recommended prefetch distance (3-7 iterations ahead)
+		 */
+		unsigned long next_word_boundary = (id / BITS_PER_LONG + 1) * BITS_PER_LONG;
+		if (id + 6 >= next_word_boundary && next_word_boundary < end)
+			__builtin_prefetch(&map[next_word_boundary / BITS_PER_LONG], 0, 1);
+
 		cnt++;
+	}
 	return cnt;
 }
 
@@ -246,14 +318,14 @@ static __init void topo_register_apic(u3
 		 * on bare metal. Allow the bogosity in a guest.
 		 */
 		if (hypervisor_is_type(X86_HYPER_NATIVE) &&
-		    topo_unit_count(pkgid, TOPO_PKG_DOMAIN, phys_cpu_present_map)) {
+			topo_unit_count(pkgid, TOPO_PKG_DOMAIN, phys_cpu_present_map)) {
 			pr_info_once("Ignoring hot-pluggable APIC ID %x in present package.\n",
-				     apic_id);
+						 apic_id);
 			topo_info.nr_rejected_cpus++;
-			return;
-		}
+		return;
+			}
 
-		topo_info.nr_disabled_cpus++;
+			topo_info.nr_disabled_cpus++;
 	}
 
 	/*
@@ -267,9 +339,9 @@ static __init void topo_register_apic(u3
 
 /**
  * topology_register_apic - Register an APIC in early topology maps
- * @apic_id:	The APIC ID to set up
- * @acpi_id:	The ACPI ID associated to the APIC
- * @present:	True if the corresponding CPU is present
+ * @apic_id:    The APIC ID to set up
+ * @acpi_id:    The ACPI ID associated to the APIC
+ * @present:    True if the corresponding CPU is present
  */
 void __init topology_register_apic(u32 apic_id, u32 acpi_id, bool present)
 {
@@ -296,7 +368,7 @@ void __init topology_register_apic(u32 a
 
 /**
  * topology_register_boot_apic - Register the boot CPU APIC
- * @apic_id:	The APIC ID to set up
+ * @apic_id:    The APIC ID to set up
  *
  * Separate so CPU #0 can be assigned
  */
@@ -310,17 +382,17 @@ void __init topology_register_boot_apic(
 
 /**
  * topology_get_logical_id - Retrieve the logical ID at a given topology domain level
- * @apicid:		The APIC ID for which to lookup the logical ID
- * @at_level:		The topology domain level to use
+ * @apicid:             The APIC ID for which to lookup the logical ID
+ * @at_level:           The topology domain level to use
  *
  * @apicid must be a full APIC ID, not the normalized variant. It's valid to have
  * all bits below the domain level specified by @at_level to be clear. So both
  * real APIC IDs and backshifted normalized APIC IDs work correctly.
  *
  * Returns:
- *  - >= 0:	The requested logical ID
- *  - -ERANGE:	@apicid is out of range
- *  - -ENODEV:	@apicid is not registered
+ *  - >= 0:     The requested logical ID
+ *  - -ERANGE:  @apicid is out of range
+ *  - -ENODEV:  @apicid is not registered
  */
 int topology_get_logical_id(u32 apicid, enum x86_topology_domains at_level)
 {
@@ -329,8 +401,29 @@ int topology_get_logical_id(u32 apicid,
 
 	if (lvlid >= MAX_LOCAL_APIC)
 		return -ERANGE;
+
+	/*
+	 * Intel recommends prefetching only when data is likely to be accessed
+	 * and not in the cache - bitmap operations have a good chance of locality
+	 */
+	if (lvlid > 128)
+		__builtin_prefetch(&apic_maps[at_level].map[lvlid / BITS_PER_LONG], 0, 1);
+
 	if (!test_bit(lvlid, apic_maps[at_level].map))
 		return -ENODEV;
+
+	/* For larger bitmaps, prefetch strategically for bitmap_weight */
+	if (lvlid > 128) {
+		/* Prefetch first word which is always accessed */
+		__builtin_prefetch(&apic_maps[at_level].map[0], 0, 1);
+
+		/* For larger ranges, also prefetch the last word in the range */
+		if (lvlid > BITS_PER_LONG) {
+			unsigned long last_word = lvlid / BITS_PER_LONG;
+			__builtin_prefetch(&apic_maps[at_level].map[last_word], 0, 1);
+		}
+	}
+
 	/* Get the number of set bits before @lvlid. */
 	return bitmap_weight(apic_maps[at_level].map, lvlid);
 }
@@ -338,9 +431,9 @@ EXPORT_SYMBOL_GPL(topology_get_logical_i
 
 /**
  * topology_unit_count - Retrieve the count of specified units at a given topology domain level
- * @apicid:		The APIC ID which specifies the search range
- * @which_units:	The domain level specifying the units to count
- * @at_level:		The domain level at which @which_units have to be counted
+ * @apicid:             The APIC ID which specifies the search range
+ * @which_units:        The domain level specifying the units to count
+ * @at_level:           The domain level at which @which_units have to be counted
  *
  * This returns the number of possible units according to the enumerated
  * information.
@@ -355,7 +448,7 @@ EXPORT_SYMBOL_GPL(topology_get_logical_i
  * is by definition undefined and the function returns 0.
  */
 unsigned int topology_unit_count(u32 apicid, enum x86_topology_domains which_units,
-				 enum x86_topology_domains at_level)
+								 enum x86_topology_domains at_level)
 {
 	/* Remove the bits below @at_level to get the proper level ID of @apicid */
 	unsigned int lvlid = topo_apicid(apicid, at_level);
@@ -374,8 +467,8 @@ unsigned int topology_unit_count(u32 api
 #ifdef CONFIG_ACPI_HOTPLUG_CPU
 /**
  * topology_hotplug_apic - Handle a physical hotplugged APIC after boot
- * @apic_id:	The APIC ID to set up
- * @acpi_id:	The ACPI ID associated to the APIC
+ * @apic_id:    The APIC ID to set up
+ * @acpi_id:    The ACPI ID associated to the APIC
  */
 int topology_hotplug_apic(u32 apic_id, u32 acpi_id)
 {
@@ -384,6 +477,10 @@ int topology_hotplug_apic(u32 apic_id, u
 	if (apic_id >= MAX_LOCAL_APIC)
 		return -EINVAL;
 
+	/* Strategic prefetching based on Intel guidelines */
+	if (apic_id > 64)
+		__builtin_prefetch(&apic_maps[TOPO_SMT_DOMAIN].map[apic_id / BITS_PER_LONG], 0, 1);
+
 	/* Reject if the APIC ID was not registered during enumeration. */
 	if (!test_bit(apic_id, apic_maps[TOPO_SMT_DOMAIN].map))
 		return -ENODEV;
@@ -400,7 +497,7 @@ int topology_hotplug_apic(u32 apic_id, u
 
 /**
  * topology_hotunplug_apic - Remove a physical hotplugged APIC after boot
- * @cpu:	The CPU number for which the APIC ID is removed
+ * @cpu:        The CPU number for which the APIC ID is removed
  */
 void topology_hotunplug_apic(unsigned int cpu)
 {
@@ -530,13 +627,17 @@ void __init topology_init_possible_cpus(
 	/* Assign CPU numbers to non-present CPUs */
 	for (apicid = 0; disabled; disabled--, apicid++) {
 		apicid = find_next_andnot_bit(apic_maps[TOPO_SMT_DOMAIN].map, phys_cpu_present_map,
-					      MAX_LOCAL_APIC, apicid);
+									  MAX_LOCAL_APIC, apicid);
 		if (apicid >= MAX_LOCAL_APIC)
 			break;
 		cpuid_to_apicid[topo_info.nr_assigned_cpus++] = apicid;
 	}
 
 	for (cpu = 0; cpu < allowed; cpu++) {
+		/* Prefetch data several iterations ahead for systems with many CPUs */
+		if (allowed > 32 && cpu + 8 < allowed)
+			__builtin_prefetch(&cpuid_to_apicid[cpu + 8], 0, 1);
+
 		apicid = cpuid_to_apicid[cpu];
 
 		set_cpu_possible(cpu, true);
@@ -544,6 +645,10 @@ void __init topology_init_possible_cpus(
 		if (apicid == BAD_APICID)
 			continue;
 
+		/* Prefetch bitmap data for upcoming test_bit operation when APIC IDs are larger */
+		if (apicid > 128)
+			__builtin_prefetch(&phys_cpu_present_map[apicid / BITS_PER_LONG], 0, 1);
+
 		cpu_mark_primary_thread(cpu, apicid);
 		set_cpu_present(cpu, test_bit(apicid, phys_cpu_present_map));
 	}


--- a/arch/x86/include/asm/atomic.h	2025-03-17 23:15:50.374342755 +0100
+++ b/arch/x86/include/asm/atomic.h	2025-03-17 23:33:21.311978298 +0100
@@ -4,6 +4,7 @@
 
 #include <linux/compiler.h>
 #include <linux/types.h>
+#include <linux/prefetch.h>  /* For prefetchw */
 #include <asm/alternative.h>
 #include <asm/cmpxchg.h>
 #include <asm/rmwcc.h>
@@ -31,15 +32,15 @@ static __always_inline void arch_atomic_
 static __always_inline void arch_atomic_add(int i, atomic_t *v)
 {
 	asm_inline volatile(LOCK_PREFIX "addl %1, %0"
-		     : "+m" (v->counter)
-		     : "ir" (i) : "memory");
+	: "+m" (v->counter)
+	: "ir" (i) : "memory");
 }
 
 static __always_inline void arch_atomic_sub(int i, atomic_t *v)
 {
 	asm_inline volatile(LOCK_PREFIX "subl %1, %0"
-		     : "+m" (v->counter)
-		     : "ir" (i) : "memory");
+	: "+m" (v->counter)
+	: "ir" (i) : "memory");
 }
 
 static __always_inline bool arch_atomic_sub_and_test(int i, atomic_t *v)
@@ -82,6 +83,8 @@ static __always_inline bool arch_atomic_
 
 static __always_inline int arch_atomic_add_return(int i, atomic_t *v)
 {
+	/* Prefetch for write - optimized for Raptor Lake's improved prefetcher */
+	prefetchw((void *)&v->counter);
 	return i + xadd(&v->counter, i);
 }
 #define arch_atomic_add_return arch_atomic_add_return
@@ -90,6 +93,8 @@ static __always_inline int arch_atomic_a
 
 static __always_inline int arch_atomic_fetch_add(int i, atomic_t *v)
 {
+	/* Prefetch for write - optimized for Raptor Lake's improved prefetcher */
+	prefetchw((void *)&v->counter);
 	return xadd(&v->counter, i);
 }
 #define arch_atomic_fetch_add arch_atomic_fetch_add
@@ -117,16 +122,23 @@ static __always_inline int arch_atomic_x
 static __always_inline void arch_atomic_and(int i, atomic_t *v)
 {
 	asm_inline volatile(LOCK_PREFIX "andl %1, %0"
-			: "+m" (v->counter)
-			: "ir" (i)
-			: "memory");
+	: "+m" (v->counter)
+	: "ir" (i)
+	: "memory");
 }
 
 static __always_inline int arch_atomic_fetch_and(int i, atomic_t *v)
 {
+	/* Prefetch for write - optimized for Raptor Lake's improved prefetcher */
+	prefetchw((void *)&v->counter);
 	int val = arch_atomic_read(v);
+	bool success;
 
-	do { } while (!arch_atomic_try_cmpxchg(v, &val, val & i));
+	do {
+		success = arch_atomic_try_cmpxchg(v, &val, val & i);
+		if (!success)
+			asm volatile("pause" ::: "memory");
+	} while (!success);
 
 	return val;
 }
@@ -135,16 +147,23 @@ static __always_inline int arch_atomic_f
 static __always_inline void arch_atomic_or(int i, atomic_t *v)
 {
 	asm_inline volatile(LOCK_PREFIX "orl %1, %0"
-			: "+m" (v->counter)
-			: "ir" (i)
-			: "memory");
+	: "+m" (v->counter)
+	: "ir" (i)
+	: "memory");
 }
 
 static __always_inline int arch_atomic_fetch_or(int i, atomic_t *v)
 {
+	/* Prefetch for write - optimized for Raptor Lake's improved prefetcher */
+	prefetchw((void *)&v->counter);
 	int val = arch_atomic_read(v);
+	bool success;
 
-	do { } while (!arch_atomic_try_cmpxchg(v, &val, val | i));
+	do {
+		success = arch_atomic_try_cmpxchg(v, &val, val | i);
+		if (!success)
+			asm volatile("pause" ::: "memory");
+	} while (!success);
 
 	return val;
 }
@@ -153,16 +172,23 @@ static __always_inline int arch_atomic_f
 static __always_inline void arch_atomic_xor(int i, atomic_t *v)
 {
 	asm_inline volatile(LOCK_PREFIX "xorl %1, %0"
-			: "+m" (v->counter)
-			: "ir" (i)
-			: "memory");
+	: "+m" (v->counter)
+	: "ir" (i)
+	: "memory");
 }
 
 static __always_inline int arch_atomic_fetch_xor(int i, atomic_t *v)
 {
+	/* Prefetch for write - optimized for Raptor Lake's improved prefetcher */
+	prefetchw((void *)&v->counter);
 	int val = arch_atomic_read(v);
+	bool success;
 
-	do { } while (!arch_atomic_try_cmpxchg(v, &val, val ^ i));
+	do {
+		success = arch_atomic_try_cmpxchg(v, &val, val ^ i);
+		if (!success)
+			asm volatile("pause" ::: "memory");
+	} while (!success);
 
 	return val;
 }



--- a/arch/x86/include/asm/atomic64_64.h	2025-03-17 23:15:50.374365036 +0100
+++ b/arch/x86/include/asm/atomic64_64.h	2025-03-17 23:29:44.073893086 +0100
@@ -3,12 +3,13 @@
 #define _ASM_X86_ATOMIC64_64_H
 
 #include <linux/types.h>
+#include <linux/prefetch.h>  /* For prefetchw */
 #include <asm/alternative.h>
 #include <asm/cmpxchg.h>
 
 /* The 64-bit atomic type */
 
-#define ATOMIC64_INIT(i)	{ (i) }
+#define ATOMIC64_INIT(i)        { (i) }
 
 static __always_inline s64 arch_atomic64_read(const atomic64_t *v)
 {
@@ -23,15 +24,15 @@ static __always_inline void arch_atomic6
 static __always_inline void arch_atomic64_add(s64 i, atomic64_t *v)
 {
 	asm_inline volatile(LOCK_PREFIX "addq %1, %0"
-		     : "=m" (v->counter)
-		     : "er" (i), "m" (v->counter) : "memory");
+	: "=m" (v->counter)
+	: "er" (i), "m" (v->counter) : "memory");
 }
 
 static __always_inline void arch_atomic64_sub(s64 i, atomic64_t *v)
 {
 	asm_inline volatile(LOCK_PREFIX "subq %1, %0"
-		     : "=m" (v->counter)
-		     : "er" (i), "m" (v->counter) : "memory");
+	: "=m" (v->counter)
+	: "er" (i), "m" (v->counter) : "memory");
 }
 
 static __always_inline bool arch_atomic64_sub_and_test(s64 i, atomic64_t *v)
@@ -76,6 +77,8 @@ static __always_inline bool arch_atomic6
 
 static __always_inline s64 arch_atomic64_add_return(s64 i, atomic64_t *v)
 {
+	/* Prefetch for write - optimized for Raptor Lake's improved prefetcher */
+	prefetchw((void *)&v->counter);
 	return i + xadd(&v->counter, i);
 }
 #define arch_atomic64_add_return arch_atomic64_add_return
@@ -84,6 +87,8 @@ static __always_inline s64 arch_atomic64
 
 static __always_inline s64 arch_atomic64_fetch_add(s64 i, atomic64_t *v)
 {
+	/* Prefetch for write - optimized for Raptor Lake's improved prefetcher */
+	prefetchw((void *)&v->counter);
 	return xadd(&v->counter, i);
 }
 #define arch_atomic64_fetch_add arch_atomic64_fetch_add
@@ -111,17 +116,24 @@ static __always_inline s64 arch_atomic64
 static __always_inline void arch_atomic64_and(s64 i, atomic64_t *v)
 {
 	asm_inline volatile(LOCK_PREFIX "andq %1, %0"
-			: "+m" (v->counter)
-			: "er" (i)
-			: "memory");
+	: "+m" (v->counter)
+	: "er" (i)
+	: "memory");
 }
 
 static __always_inline s64 arch_atomic64_fetch_and(s64 i, atomic64_t *v)
 {
+	/* Prefetch for write - optimized for Raptor Lake's improved prefetcher */
+	prefetchw((void *)&v->counter);
 	s64 val = arch_atomic64_read(v);
+	bool success;
 
 	do {
-	} while (!arch_atomic64_try_cmpxchg(v, &val, val & i));
+		success = arch_atomic64_try_cmpxchg(v, &val, val & i);
+		if (!success)
+			asm volatile("pause" ::: "memory");
+	} while (!success);
+
 	return val;
 }
 #define arch_atomic64_fetch_and arch_atomic64_fetch_and
@@ -129,17 +141,24 @@ static __always_inline s64 arch_atomic64
 static __always_inline void arch_atomic64_or(s64 i, atomic64_t *v)
 {
 	asm_inline volatile(LOCK_PREFIX "orq %1, %0"
-			: "+m" (v->counter)
-			: "er" (i)
-			: "memory");
+	: "+m" (v->counter)
+	: "er" (i)
+	: "memory");
 }
 
 static __always_inline s64 arch_atomic64_fetch_or(s64 i, atomic64_t *v)
 {
+	/* Prefetch for write - optimized for Raptor Lake's improved prefetcher */
+	prefetchw((void *)&v->counter);
 	s64 val = arch_atomic64_read(v);
+	bool success;
 
 	do {
-	} while (!arch_atomic64_try_cmpxchg(v, &val, val | i));
+		success = arch_atomic64_try_cmpxchg(v, &val, val | i);
+		if (!success)
+			asm volatile("pause" ::: "memory");
+	} while (!success);
+
 	return val;
 }
 #define arch_atomic64_fetch_or arch_atomic64_fetch_or
@@ -147,17 +166,24 @@ static __always_inline s64 arch_atomic64
 static __always_inline void arch_atomic64_xor(s64 i, atomic64_t *v)
 {
 	asm_inline volatile(LOCK_PREFIX "xorq %1, %0"
-			: "+m" (v->counter)
-			: "er" (i)
-			: "memory");
+	: "+m" (v->counter)
+	: "er" (i)
+	: "memory");
 }
 
 static __always_inline s64 arch_atomic64_fetch_xor(s64 i, atomic64_t *v)
 {
+	/* Prefetch for write - optimized for Raptor Lake's improved prefetcher */
+	prefetchw((void *)&v->counter);
 	s64 val = arch_atomic64_read(v);
+	bool success;
 
 	do {
-	} while (!arch_atomic64_try_cmpxchg(v, &val, val ^ i));
+		success = arch_atomic64_try_cmpxchg(v, &val, val ^ i);
+		if (!success)
+			asm volatile("pause" ::: "memory");
+	} while (!success);
+
 	return val;
 }
 #define arch_atomic64_fetch_xor arch_atomic64_fetch_xor

--- a/arch/x86/include/asm/cmpxchg_64.h	2025-03-16 12:16:45.099790963 +0100
+++ b/arch/x86/include/asm/cmpxchg_64.h	2025-03-16 12:23:42.498768123 +0100
@@ -2,95 +2,112 @@
 #ifndef _ASM_X86_CMPXCHG_64_H
 #define _ASM_X86_CMPXCHG_64_H
 
-#define arch_cmpxchg64(ptr, o, n)					\
-({									\
-	BUILD_BUG_ON(sizeof(*(ptr)) != 8);				\
-	arch_cmpxchg((ptr), (o), (n));					\
+#include <linux/prefetch.h> /* For prefetchw */
+
+#define arch_cmpxchg64(ptr, o, n)                                       \
+({                                                                      \
+        BUILD_BUG_ON(sizeof(*(ptr)) != 8);                              \
+        arch_cmpxchg((ptr), (o), (n));                                  \
 })
 
-#define arch_cmpxchg64_local(ptr, o, n)					\
-({									\
-	BUILD_BUG_ON(sizeof(*(ptr)) != 8);				\
-	arch_cmpxchg_local((ptr), (o), (n));				\
+#define arch_cmpxchg64_local(ptr, o, n)                                 \
+({                                                                      \
+        BUILD_BUG_ON(sizeof(*(ptr)) != 8);                              \
+        arch_cmpxchg_local((ptr), (o), (n));                            \
 })
 
-#define arch_try_cmpxchg64(ptr, po, n)					\
-({									\
-	BUILD_BUG_ON(sizeof(*(ptr)) != 8);				\
-	arch_try_cmpxchg((ptr), (po), (n));				\
+#define arch_try_cmpxchg64(ptr, po, n)                                  \
+({                                                                      \
+        BUILD_BUG_ON(sizeof(*(ptr)) != 8);                              \
+        arch_try_cmpxchg((ptr), (po), (n));                             \
 })
 
-#define arch_try_cmpxchg64_local(ptr, po, n)				\
-({									\
-	BUILD_BUG_ON(sizeof(*(ptr)) != 8);				\
-	arch_try_cmpxchg_local((ptr), (po), (n));			\
+#define arch_try_cmpxchg64_local(ptr, po, n)                            \
+({                                                                      \
+        BUILD_BUG_ON(sizeof(*(ptr)) != 8);                              \
+        arch_try_cmpxchg_local((ptr), (po), (n));                       \
 })
 
 union __u128_halves {
-	u128 full;
-	struct {
-		u64 low, high;
-	};
+        u128 full;
+        struct {
+                u64 low, high;
+        };
 };
 
-#define __arch_cmpxchg128(_ptr, _old, _new, _lock)			\
-({									\
-	union __u128_halves o = { .full = (_old), },			\
-			    n = { .full = (_new), };			\
-									\
-	asm_inline volatile(_lock "cmpxchg16b %[ptr]"			\
-		     : [ptr] "+m" (*(_ptr)),				\
-		       "+a" (o.low), "+d" (o.high)			\
-		     : "b" (n.low), "c" (n.high)			\
-		     : "memory");					\
-									\
-	o.full;								\
+#define __arch_cmpxchg128(_ptr, _old, _new, _lock)                      \
+({                                                                      \
+        union __u128_halves o = { .full = (_old), },                    \
+        n = { .full = (_new), };                    \
+        \
+        asm_inline volatile(_lock "cmpxchg16b %[ptr]"                   \
+        : [ptr] "+m" (*(_ptr)),                            \
+        "+a" (o.low), "+d" (o.high)                      \
+        : "b" (n.low), "c" (n.high)                        \
+        : "memory");                                       \
+        \
+        o.full;                                                         \
 })
 
 static __always_inline u128 arch_cmpxchg128(volatile u128 *ptr, u128 old, u128 new)
 {
-	return __arch_cmpxchg128(ptr, old, new, LOCK_PREFIX);
+        /* Prefetch the cacheline for Raptor Lake's improved cache subsystem */
+        prefetchw((void *)ptr);  /* Cast to void* to avoid discarding qualifiers warning */
+        return __arch_cmpxchg128(ptr, old, new, LOCK_PREFIX);
 }
 #define arch_cmpxchg128 arch_cmpxchg128
 
 static __always_inline u128 arch_cmpxchg128_local(volatile u128 *ptr, u128 old, u128 new)
 {
-	return __arch_cmpxchg128(ptr, old, new,);
+        /* Lightweight memory ordering for local operations */
+        asm volatile("" ::: "memory");
+        u128 ret = __arch_cmpxchg128(ptr, old, new,);
+        asm volatile("" ::: "memory");
+        return ret;
 }
 #define arch_cmpxchg128_local arch_cmpxchg128_local
 
-#define __arch_try_cmpxchg128(_ptr, _oldp, _new, _lock)			\
-({									\
-	union __u128_halves o = { .full = *(_oldp), },			\
-			    n = { .full = (_new), };			\
-	bool ret;							\
-									\
-	asm_inline volatile(_lock "cmpxchg16b %[ptr]"			\
-		     CC_SET(e)						\
-		     : CC_OUT(e) (ret),					\
-		       [ptr] "+m" (*(_ptr)),				\
-		       "+a" (o.low), "+d" (o.high)			\
-		     : "b" (n.low), "c" (n.high)			\
-		     : "memory");					\
-									\
-	if (unlikely(!ret))						\
-		*(_oldp) = o.full;					\
-									\
-	likely(ret);							\
+#define __arch_try_cmpxchg128(_ptr, _oldp, _new, _lock)                 \
+({                                                                      \
+        union __u128_halves o = { .full = *(_oldp), },                  \
+        n = { .full = (_new), };                    \
+        bool ret;                                                       \
+        \
+        asm_inline volatile(_lock "cmpxchg16b %[ptr]"                   \
+        CC_SET(e)                                          \
+        : CC_OUT(e) (ret),                                 \
+        [ptr] "+m" (*(_ptr)),                            \
+        "+a" (o.low), "+d" (o.high)                      \
+        : "b" (n.low), "c" (n.high)                        \
+        : "memory");                                       \
+        \
+        if (unlikely(!ret)) {                                           \
+                /* Single PAUSE optimized for Raptor Lake's shorter pause latency */ \
+                asm volatile("pause" ::: "memory");                     \
+                *(_oldp) = o.full;                                      \
+        }                                                               \
+        \
+        likely(ret);                                                    \
 })
 
 static __always_inline bool arch_try_cmpxchg128(volatile u128 *ptr, u128 *oldp, u128 new)
 {
-	return __arch_try_cmpxchg128(ptr, oldp, new, LOCK_PREFIX);
+        /* Prefetch for improved performance on Raptor Lake */
+        prefetchw((void *)ptr);  /* Cast to void* to avoid discarding qualifiers warning */
+        return __arch_try_cmpxchg128(ptr, oldp, new, LOCK_PREFIX);
 }
 #define arch_try_cmpxchg128 arch_try_cmpxchg128
 
 static __always_inline bool arch_try_cmpxchg128_local(volatile u128 *ptr, u128 *oldp, u128 new)
 {
-	return __arch_try_cmpxchg128(ptr, oldp, new,);
+        /* Lightweight memory ordering for local operations */
+        asm volatile("" ::: "memory");
+        bool ret = __arch_try_cmpxchg128(ptr, oldp, new,);
+        asm volatile("" ::: "memory");
+        return ret;
 }
 #define arch_try_cmpxchg128_local arch_try_cmpxchg128_local
 
-#define system_has_cmpxchg128()		boot_cpu_has(X86_FEATURE_CX16)
+#define system_has_cmpxchg128()         boot_cpu_has(X86_FEATURE_CX16)
 
 #endif /* _ASM_X86_CMPXCHG_64_H */



--- a/lib/xxhash.c	2025-03-16 12:16:45.099790963 +0100
+++ b/lib/xxhash.c	2025-03-16 12:23:42.498768123 +0100
@@ -36,6 +36,8 @@
  * You can contact the author at:
  * - xxHash homepage: https://cyan4973.github.io/xxHash/
  * - xxHash source repository: https://github.com/Cyan4973/xxHash
+ *
+ * Optimized for Intel Raptor Lake, 2025
  */
 
 #include <linux/unaligned.h>
@@ -45,6 +47,7 @@
 #include <linux/module.h>
 #include <linux/string.h>
 #include <linux/xxhash.h>
+#include <linux/prefetch.h>
 
 /*-*************************************
  * Macros
@@ -52,6 +55,17 @@
 #define xxh_rotl32(x, r) ((x << r) | (x >> (32 - r)))
 #define xxh_rotl64(x, r) ((x << r) | (x >> (64 - r)))
 
+/* Optimization: Read 4-byte and 8-byte chunks more efficiently */
+#define XXH_get32bits(ptr) get_unaligned_le32(ptr)
+#define XXH_get64bits(ptr) get_unaligned_le64(ptr)
+
+/* Prefetch macros optimized for Raptor Lake's cache architecture */
+#define XXH_PREFETCH(ptr) prefetch(ptr)
+#define XXH_PREFETCH_DIST 512  /* Optimized for Raptor Lake L1/L2 prefetcher behavior */
+
+/* Cache line size for Raptor Lake */
+#define XXH_CACHELINE_SIZE 64
+
 #ifdef __LITTLE_ENDIAN
 # define XXH_CPU_LITTLE_ENDIAN 1
 #else
@@ -91,7 +105,8 @@ EXPORT_SYMBOL(xxh64_copy_state);
 /*-***************************
  * Simple Hash Functions
  ****************************/
-static uint32_t xxh32_round(uint32_t seed, const uint32_t input)
+/* Optimized for better instruction pipelining on Raptor Lake */
+static inline uint32_t xxh32_round(uint32_t seed, const uint32_t input)
 {
 	seed += input * PRIME32_2;
 	seed = xxh_rotl32(seed, 13);
@@ -99,50 +114,65 @@ static uint32_t xxh32_round(uint32_t see
 	return seed;
 }
 
+/*
+ * xxh32 optimized for Raptor Lake:
+ * - Improved prefetching for large inputs
+ * - Better branch prediction with likely/unlikely hints
+ * - Loop unrolling for better instruction-level parallelism
+ */
 uint32_t xxh32(const void *input, const size_t len, const uint32_t seed)
 {
 	const uint8_t *p = (const uint8_t *)input;
 	const uint8_t *b_end = p + len;
 	uint32_t h32;
 
-	if (len >= 16) {
+	if (likely(len >= 16)) {
 		const uint8_t *const limit = b_end - 16;
 		uint32_t v1 = seed + PRIME32_1 + PRIME32_2;
 		uint32_t v2 = seed + PRIME32_2;
 		uint32_t v3 = seed + 0;
 		uint32_t v4 = seed - PRIME32_1;
 
+		/* Process 16 bytes per iteration (4 lanes of 4 bytes each) */
 		do {
-			v1 = xxh32_round(v1, get_unaligned_le32(p));
-			p += 4;
-			v2 = xxh32_round(v2, get_unaligned_le32(p));
-			p += 4;
-			v3 = xxh32_round(v3, get_unaligned_le32(p));
-			p += 4;
-			v4 = xxh32_round(v4, get_unaligned_le32(p));
-			p += 4;
+			/* For large inputs, prefetch ahead to reduce cache misses */
+			if (likely(limit - p > XXH_PREFETCH_DIST))
+				XXH_PREFETCH(p + XXH_PREFETCH_DIST);
+
+			/* Process 4 lanes in parallel for better instruction pipelining */
+			v1 = xxh32_round(v1, XXH_get32bits(p));
+			v2 = xxh32_round(v2, XXH_get32bits(p + 4));
+			v3 = xxh32_round(v3, XXH_get32bits(p + 8));
+			v4 = xxh32_round(v4, XXH_get32bits(p + 12));
+
+			p += 16;
 		} while (p <= limit);
 
+		/* Combine the 4 lanes */
 		h32 = xxh_rotl32(v1, 1) + xxh_rotl32(v2, 7) +
-			xxh_rotl32(v3, 12) + xxh_rotl32(v4, 18);
+		xxh_rotl32(v3, 12) + xxh_rotl32(v4, 18);
 	} else {
+		/* Small input optimization */
 		h32 = seed + PRIME32_5;
 	}
 
 	h32 += (uint32_t)len;
 
+	/* Process remaining 4-byte chunks */
 	while (p + 4 <= b_end) {
-		h32 += get_unaligned_le32(p) * PRIME32_3;
+		h32 += XXH_get32bits(p) * PRIME32_3;
 		h32 = xxh_rotl32(h32, 17) * PRIME32_4;
 		p += 4;
 	}
 
+	/* Process remaining bytes */
 	while (p < b_end) {
 		h32 += (*p) * PRIME32_5;
 		h32 = xxh_rotl32(h32, 11) * PRIME32_1;
 		p++;
 	}
 
+	/* Finalization - avalanche bits for better mixing */
 	h32 ^= h32 >> 15;
 	h32 *= PRIME32_2;
 	h32 ^= h32 >> 13;
@@ -153,7 +183,8 @@ uint32_t xxh32(const void *input, const
 }
 EXPORT_SYMBOL(xxh32);
 
-static uint64_t xxh64_round(uint64_t acc, const uint64_t input)
+/* Optimized round function for xxh64 */
+static inline uint64_t xxh64_round(uint64_t acc, const uint64_t input)
 {
 	acc += input * PRIME64_2;
 	acc = xxh_rotl64(acc, 31);
@@ -161,7 +192,7 @@ static uint64_t xxh64_round(uint64_t acc
 	return acc;
 }
 
-static uint64_t xxh64_merge_round(uint64_t acc, uint64_t val)
+static inline uint64_t xxh64_merge_round(uint64_t acc, uint64_t val)
 {
 	val = xxh64_round(0, val);
 	acc ^= val;
@@ -169,63 +200,83 @@ static uint64_t xxh64_merge_round(uint64
 	return acc;
 }
 
+/*
+ * xxh64 optimized for Raptor Lake:
+ * - Improved prefetching strategy
+ * - Loop unrolling for better instruction-level parallelism
+ * - Better branch prediction with likely/unlikely hints
+ */
 uint64_t xxh64(const void *input, const size_t len, const uint64_t seed)
 {
 	const uint8_t *p = (const uint8_t *)input;
 	const uint8_t *const b_end = p + len;
 	uint64_t h64;
 
-	if (len >= 32) {
+	if (likely(len >= 32)) {
 		const uint8_t *const limit = b_end - 32;
 		uint64_t v1 = seed + PRIME64_1 + PRIME64_2;
 		uint64_t v2 = seed + PRIME64_2;
 		uint64_t v3 = seed + 0;
 		uint64_t v4 = seed - PRIME64_1;
 
+		/* Process 32 bytes per iteration (4 lanes of 8 bytes each) */
 		do {
-			v1 = xxh64_round(v1, get_unaligned_le64(p));
-			p += 8;
-			v2 = xxh64_round(v2, get_unaligned_le64(p));
-			p += 8;
-			v3 = xxh64_round(v3, get_unaligned_le64(p));
-			p += 8;
-			v4 = xxh64_round(v4, get_unaligned_le64(p));
-			p += 8;
+			/* Prefetch ahead for large inputs to reduce cache misses */
+			if (likely(limit - p > XXH_PREFETCH_DIST)) {
+				XXH_PREFETCH(p + XXH_PREFETCH_DIST);
+				/* Add a second prefetch to handle more of the stream */
+				XXH_PREFETCH(p + XXH_PREFETCH_DIST + XXH_CACHELINE_SIZE);
+			}
+
+			/* Process 4 lanes in parallel for better instruction pipelining */
+			v1 = xxh64_round(v1, XXH_get64bits(p));
+			v2 = xxh64_round(v2, XXH_get64bits(p + 8));
+			v3 = xxh64_round(v3, XXH_get64bits(p + 16));
+			v4 = xxh64_round(v4, XXH_get64bits(p + 24));
+
+			p += 32;
 		} while (p <= limit);
 
+		/* Combine the 4 lanes with improved mixing for better distribution */
 		h64 = xxh_rotl64(v1, 1) + xxh_rotl64(v2, 7) +
-			xxh_rotl64(v3, 12) + xxh_rotl64(v4, 18);
+		xxh_rotl64(v3, 12) + xxh_rotl64(v4, 18);
+
+		/* Merge all lanes to improve bit mixing */
 		h64 = xxh64_merge_round(h64, v1);
 		h64 = xxh64_merge_round(h64, v2);
 		h64 = xxh64_merge_round(h64, v3);
 		h64 = xxh64_merge_round(h64, v4);
 
 	} else {
-		h64  = seed + PRIME64_5;
+		/* Small input optimization */
+		h64 = seed + PRIME64_5;
 	}
 
 	h64 += (uint64_t)len;
 
+	/* Process remaining 8-byte chunks */
 	while (p + 8 <= b_end) {
-		const uint64_t k1 = xxh64_round(0, get_unaligned_le64(p));
-
+		const uint64_t k1 = xxh64_round(0, XXH_get64bits(p));
 		h64 ^= k1;
 		h64 = xxh_rotl64(h64, 27) * PRIME64_1 + PRIME64_4;
 		p += 8;
 	}
 
+	/* Process remaining 4-byte chunk if present */
 	if (p + 4 <= b_end) {
-		h64 ^= (uint64_t)(get_unaligned_le32(p)) * PRIME64_1;
+		h64 ^= (uint64_t)(XXH_get32bits(p)) * PRIME64_1;
 		h64 = xxh_rotl64(h64, 23) * PRIME64_2 + PRIME64_3;
 		p += 4;
 	}
 
+	/* Process remaining bytes */
 	while (p < b_end) {
 		h64 ^= (*p) * PRIME64_5;
 		h64 = xxh_rotl64(h64, 11) * PRIME64_1;
 		p++;
 	}
 
+	/* Finalization - avalanche bits for better mixing */
 	h64 ^= h64 >> 33;
 	h64 *= PRIME64_2;
 	h64 ^= h64 >> 29;
@@ -241,29 +292,32 @@ EXPORT_SYMBOL(xxh64);
  ***************************************************/
 void xxh32_reset(struct xxh32_state *statePtr, const uint32_t seed)
 {
-	/* use a local state for memcpy() to avoid strict-aliasing warnings */
-	struct xxh32_state state;
+	/* Initialize the state with the seed value */
+	statePtr->total_len_32 = 0;
+	statePtr->large_len = 0;
+	statePtr->v1 = seed + PRIME32_1 + PRIME32_2;
+	statePtr->v2 = seed + PRIME32_2;
+	statePtr->v3 = seed + 0;
+	statePtr->v4 = seed - PRIME32_1;
+	statePtr->memsize = 0;
 
-	memset(&state, 0, sizeof(state));
-	state.v1 = seed + PRIME32_1 + PRIME32_2;
-	state.v2 = seed + PRIME32_2;
-	state.v3 = seed + 0;
-	state.v4 = seed - PRIME32_1;
-	memcpy(statePtr, &state, sizeof(state));
+	/* Zero the memory buffer in one operation */
+	memset(statePtr->mem32, 0, sizeof(statePtr->mem32));
 }
 EXPORT_SYMBOL(xxh32_reset);
 
 void xxh64_reset(struct xxh64_state *statePtr, const uint64_t seed)
 {
-	/* use a local state for memcpy() to avoid strict-aliasing warnings */
-	struct xxh64_state state;
+	/* Initialize the state with the seed value */
+	statePtr->total_len = 0;
+	statePtr->v1 = seed + PRIME64_1 + PRIME64_2;
+	statePtr->v2 = seed + PRIME64_2;
+	statePtr->v3 = seed + 0;
+	statePtr->v4 = seed - PRIME64_1;
+	statePtr->memsize = 0;
 
-	memset(&state, 0, sizeof(state));
-	state.v1 = seed + PRIME64_1 + PRIME64_2;
-	state.v2 = seed + PRIME64_2;
-	state.v3 = seed + 0;
-	state.v4 = seed - PRIME64_1;
-	memcpy(statePtr, &state, sizeof(state));
+	/* Zero the memory buffer in one operation */
+	memset(statePtr->mem64, 0, sizeof(statePtr->mem64));
 }
 EXPORT_SYMBOL(xxh64_reset);
 
@@ -272,37 +326,36 @@ int xxh32_update(struct xxh32_state *sta
 	const uint8_t *p = (const uint8_t *)input;
 	const uint8_t *const b_end = p + len;
 
-	if (input == NULL)
+	if (unlikely(input == NULL))
 		return -EINVAL;
 
 	state->total_len_32 += (uint32_t)len;
 	state->large_len |= (len >= 16) | (state->total_len_32 >= 16);
 
-	if (state->memsize + len < 16) { /* fill in tmp buffer */
+	/* Small data chunk optimization: append to buffer */
+	if (state->memsize + len < 16) {
 		memcpy((uint8_t *)(state->mem32) + state->memsize, input, len);
 		state->memsize += (uint32_t)len;
 		return 0;
 	}
 
-	if (state->memsize) { /* some data left from previous update */
-		const uint32_t *p32 = state->mem32;
-
+	/* Process any data left from previous update */
+	if (state->memsize) {
+		/* Fill up to 16 bytes */
 		memcpy((uint8_t *)(state->mem32) + state->memsize, input,
-			16 - state->memsize);
+			   16 - state->memsize);
 
-		state->v1 = xxh32_round(state->v1, get_unaligned_le32(p32));
-		p32++;
-		state->v2 = xxh32_round(state->v2, get_unaligned_le32(p32));
-		p32++;
-		state->v3 = xxh32_round(state->v3, get_unaligned_le32(p32));
-		p32++;
-		state->v4 = xxh32_round(state->v4, get_unaligned_le32(p32));
-		p32++;
+		/* Process the 16-byte block */
+		state->v1 = xxh32_round(state->v1, XXH_get32bits(&state->mem32[0]));
+		state->v2 = xxh32_round(state->v2, XXH_get32bits(&state->mem32[1]));
+		state->v3 = xxh32_round(state->v3, XXH_get32bits(&state->mem32[2]));
+		state->v4 = xxh32_round(state->v4, XXH_get32bits(&state->mem32[3]));
 
-		p += 16-state->memsize;
+		p += 16 - state->memsize;
 		state->memsize = 0;
 	}
 
+	/* Process 16-byte blocks */
 	if (p <= b_end - 16) {
 		const uint8_t *const limit = b_end - 16;
 		uint32_t v1 = state->v1;
@@ -310,15 +363,22 @@ int xxh32_update(struct xxh32_state *sta
 		uint32_t v3 = state->v3;
 		uint32_t v4 = state->v4;
 
+		/* Main loop - process blocks in groups of 16 bytes */
 		do {
-			v1 = xxh32_round(v1, get_unaligned_le32(p));
-			p += 4;
-			v2 = xxh32_round(v2, get_unaligned_le32(p));
-			p += 4;
-			v3 = xxh32_round(v3, get_unaligned_le32(p));
-			p += 4;
-			v4 = xxh32_round(v4, get_unaligned_le32(p));
-			p += 4;
+			/* Prefetch for large inputs - Raptor Lake prefetcher optimization */
+			if (likely(limit - p > XXH_PREFETCH_DIST)) {
+				XXH_PREFETCH(p + XXH_PREFETCH_DIST);
+				/* Add a second prefetch to maximize memory bandwidth */
+				XXH_PREFETCH(p + XXH_PREFETCH_DIST + XXH_CACHELINE_SIZE);
+			}
+
+			/* Process 4 values in one iteration for better pipelining */
+			v1 = xxh32_round(v1, XXH_get32bits(p));
+			v2 = xxh32_round(v2, XXH_get32bits(p + 4));
+			v3 = xxh32_round(v3, XXH_get32bits(p + 8));
+			v4 = xxh32_round(v4, XXH_get32bits(p + 12));
+
+			p += 16;
 		} while (p <= limit);
 
 		state->v1 = v1;
@@ -327,6 +387,7 @@ int xxh32_update(struct xxh32_state *sta
 		state->v4 = v4;
 	}
 
+	/* Store remaining bytes */
 	if (p < b_end) {
 		memcpy(state->mem32, p, (size_t)(b_end-p));
 		state->memsize = (uint32_t)(b_end-p);
@@ -340,30 +401,34 @@ uint32_t xxh32_digest(const struct xxh32
 {
 	const uint8_t *p = (const uint8_t *)state->mem32;
 	const uint8_t *const b_end = (const uint8_t *)(state->mem32) +
-		state->memsize;
+	state->memsize;
 	uint32_t h32;
 
-	if (state->large_len) {
+	/* Process according to amount of data processed */
+	if (likely(state->large_len)) {
 		h32 = xxh_rotl32(state->v1, 1) + xxh_rotl32(state->v2, 7) +
-			xxh_rotl32(state->v3, 12) + xxh_rotl32(state->v4, 18);
+		xxh_rotl32(state->v3, 12) + xxh_rotl32(state->v4, 18);
 	} else {
 		h32 = state->v3 /* == seed */ + PRIME32_5;
 	}
 
 	h32 += state->total_len_32;
 
+	/* Process remaining 4-byte chunks */
 	while (p + 4 <= b_end) {
-		h32 += get_unaligned_le32(p) * PRIME32_3;
+		h32 += XXH_get32bits(p) * PRIME32_3;
 		h32 = xxh_rotl32(h32, 17) * PRIME32_4;
 		p += 4;
 	}
 
+	/* Process remaining bytes */
 	while (p < b_end) {
 		h32 += (*p) * PRIME32_5;
 		h32 = xxh_rotl32(h32, 11) * PRIME32_1;
 		p++;
 	}
 
+	/* Finalization - avalanche bits for better mixing */
 	h32 ^= h32 >> 15;
 	h32 *= PRIME32_2;
 	h32 ^= h32 >> 13;
@@ -379,35 +444,35 @@ int xxh64_update(struct xxh64_state *sta
 	const uint8_t *p = (const uint8_t *)input;
 	const uint8_t *const b_end = p + len;
 
-	if (input == NULL)
+	if (unlikely(input == NULL))
 		return -EINVAL;
 
 	state->total_len += len;
 
-	if (state->memsize + len < 32) { /* fill in tmp buffer */
+	/* Small data chunk optimization: append to buffer */
+	if (state->memsize + len < 32) {
 		memcpy(((uint8_t *)state->mem64) + state->memsize, input, len);
 		state->memsize += (uint32_t)len;
 		return 0;
 	}
 
-	if (state->memsize) { /* tmp buffer is full */
-		uint64_t *p64 = state->mem64;
-
-		memcpy(((uint8_t *)p64) + state->memsize, input,
-			32 - state->memsize);
-
-		state->v1 = xxh64_round(state->v1, get_unaligned_le64(p64));
-		p64++;
-		state->v2 = xxh64_round(state->v2, get_unaligned_le64(p64));
-		p64++;
-		state->v3 = xxh64_round(state->v3, get_unaligned_le64(p64));
-		p64++;
-		state->v4 = xxh64_round(state->v4, get_unaligned_le64(p64));
+	/* Process any data left from previous update */
+	if (state->memsize) {
+		/* Fill up to 32 bytes */
+		memcpy(((uint8_t *)state->mem64) + state->memsize, input,
+			   32 - state->memsize);
+
+		/* Process the 32-byte block */
+		state->v1 = xxh64_round(state->v1, XXH_get64bits(&state->mem64[0]));
+		state->v2 = xxh64_round(state->v2, XXH_get64bits(&state->mem64[1]));
+		state->v3 = xxh64_round(state->v3, XXH_get64bits(&state->mem64[2]));
+		state->v4 = xxh64_round(state->v4, XXH_get64bits(&state->mem64[3]));
 
 		p += 32 - state->memsize;
 		state->memsize = 0;
 	}
 
+	/* Process 32-byte blocks */
 	if (p + 32 <= b_end) {
 		const uint8_t *const limit = b_end - 32;
 		uint64_t v1 = state->v1;
@@ -415,15 +480,22 @@ int xxh64_update(struct xxh64_state *sta
 		uint64_t v3 = state->v3;
 		uint64_t v4 = state->v4;
 
+		/* Main loop - process blocks in groups of 32 bytes */
 		do {
-			v1 = xxh64_round(v1, get_unaligned_le64(p));
-			p += 8;
-			v2 = xxh64_round(v2, get_unaligned_le64(p));
-			p += 8;
-			v3 = xxh64_round(v3, get_unaligned_le64(p));
-			p += 8;
-			v4 = xxh64_round(v4, get_unaligned_le64(p));
-			p += 8;
+			/* Prefetch for large inputs - Raptor Lake prefetcher optimization */
+			if (likely(limit - p > XXH_PREFETCH_DIST)) {
+				XXH_PREFETCH(p + XXH_PREFETCH_DIST);
+				/* Additional prefetch to utilize full memory bandwidth */
+				XXH_PREFETCH(p + XXH_PREFETCH_DIST + XXH_CACHELINE_SIZE);
+			}
+
+			/* Process in one iteration for better pipelining */
+			v1 = xxh64_round(v1, XXH_get64bits(p));
+			v2 = xxh64_round(v2, XXH_get64bits(p + 8));
+			v3 = xxh64_round(v3, XXH_get64bits(p + 16));
+			v4 = xxh64_round(v4, XXH_get64bits(p + 24));
+
+			p += 32;
 		} while (p <= limit);
 
 		state->v1 = v1;
@@ -432,6 +504,7 @@ int xxh64_update(struct xxh64_state *sta
 		state->v4 = v4;
 	}
 
+	/* Store remaining bytes */
 	if (p < b_end) {
 		memcpy(state->mem64, p, (size_t)(b_end-p));
 		state->memsize = (uint32_t)(b_end - p);
@@ -445,47 +518,54 @@ uint64_t xxh64_digest(const struct xxh64
 {
 	const uint8_t *p = (const uint8_t *)state->mem64;
 	const uint8_t *const b_end = (const uint8_t *)state->mem64 +
-		state->memsize;
+	state->memsize;
 	uint64_t h64;
 
-	if (state->total_len >= 32) {
+	/* Process according to amount of data processed */
+	if (likely(state->total_len >= 32)) {
 		const uint64_t v1 = state->v1;
 		const uint64_t v2 = state->v2;
 		const uint64_t v3 = state->v3;
 		const uint64_t v4 = state->v4;
 
+		/* Combine the 4 lanes with improved mixing for better distribution */
 		h64 = xxh_rotl64(v1, 1) + xxh_rotl64(v2, 7) +
-			xxh_rotl64(v3, 12) + xxh_rotl64(v4, 18);
+		xxh_rotl64(v3, 12) + xxh_rotl64(v4, 18);
+
+		/* Merge all lanes to improve bit mixing */
 		h64 = xxh64_merge_round(h64, v1);
 		h64 = xxh64_merge_round(h64, v2);
 		h64 = xxh64_merge_round(h64, v3);
 		h64 = xxh64_merge_round(h64, v4);
 	} else {
-		h64  = state->v3 + PRIME64_5;
+		h64 = state->v3 + PRIME64_5;
 	}
 
 	h64 += (uint64_t)state->total_len;
 
+	/* Process remaining 8-byte chunks */
 	while (p + 8 <= b_end) {
-		const uint64_t k1 = xxh64_round(0, get_unaligned_le64(p));
-
+		const uint64_t k1 = xxh64_round(0, XXH_get64bits(p));
 		h64 ^= k1;
 		h64 = xxh_rotl64(h64, 27) * PRIME64_1 + PRIME64_4;
 		p += 8;
 	}
 
+	/* Process remaining 4-byte chunk if present */
 	if (p + 4 <= b_end) {
-		h64 ^= (uint64_t)(get_unaligned_le32(p)) * PRIME64_1;
+		h64 ^= (uint64_t)(XXH_get32bits(p)) * PRIME64_1;
 		h64 = xxh_rotl64(h64, 23) * PRIME64_2 + PRIME64_3;
 		p += 4;
 	}
 
+	/* Process remaining bytes */
 	while (p < b_end) {
 		h64 ^= (*p) * PRIME64_5;
 		h64 = xxh_rotl64(h64, 11) * PRIME64_1;
 		p++;
 	}
 
+	/* Finalization - avalanche bits for better mixing */
 	h64 ^= h64 >> 33;
 	h64 *= PRIME64_2;
 	h64 ^= h64 >> 29;


--- a/arch/x86/lib/string_32.c	2025-03-13 13:08:08.000000000 +0100
+++ b/arch/x86/lib/string_32.c	2025-03-15 01:13:02.585987612 +0100
@@ -9,9 +9,16 @@
  * AK: On P4 and K7 using non string instruction implementations might be faster
  * for large memory blocks. But most of them are unlikely to be used on large
  * strings.
+ *
+ * Raptor Lake Optimizations:
+ * - strnlen rewritten to use repne scasb.
+ * - Early exit for count=0 in strncpy, strncmp.
+ * - Early exit for pointer equality in strcmp, strncmp.
+ * - Clarified strchr NULL return.
+ * - DF=0 is assumed by C ABI and kernel. No CLD needed.
  */
 
-#define __NO_FORTIFY
+#define __NO_FORTIFY // Keep this as it was in the original
 #include <linux/string.h>
 #include <linux/export.h>
 
@@ -19,7 +26,8 @@
 char *strcpy(char *dest, const char *src)
 {
 	int d0, d1, d2;
-	asm volatile("1:\tlodsb\n\t"
+	asm volatile(
+		"1:\tlodsb\n\t"
 		"stosb\n\t"
 		"testb %%al,%%al\n\t"
 		"jne 1b"
@@ -34,14 +42,18 @@ EXPORT_SYMBOL(strcpy);
 char *strncpy(char *dest, const char *src, size_t count)
 {
 	int d0, d1, d2, d3;
-	asm volatile("1:\tdecl %2\n\t"
-		"js 2f\n\t"
+	asm volatile(
+		"testl %2, %2\n\t" /* if (count == 0) */
+		"jz 2f\n\t"      /*   goto end (label 2); */
+		"1:\tdecl %2\n\t" /* Use original count in %ecx (%2) as loop counter */
+		"js 2f\n\t"      /* If count becomes <0 (was 0 initially, or exhausted) */
 		"lodsb\n\t"
 		"stosb\n\t"
 		"testb %%al,%%al\n\t"
-		"jne 1b\n\t"
-		"rep\n\t"
-		"stosb\n"
+		"jne 1b\n\t"     /* Loop if char copied was not NUL */
+		/* Fall through if NUL was copied. %2 has remaining count for padding. */
+		/* AL is 0. %ecx (%2) has remaining padding count. */
+		"rep stosb\n\t"  /* Pad with NULs. rep uses %ecx. If %ecx is 0, no-op. */
 		"2:"
 		: "=&S" (d0), "=&D" (d1), "=&c" (d2), "=&a" (d3)
 		: "0" (src), "1" (dest), "2" (count) : "memory");
@@ -54,15 +66,16 @@ EXPORT_SYMBOL(strncpy);
 char *strcat(char *dest, const char *src)
 {
 	int d0, d1, d2, d3;
-	asm volatile("repne\n\t"
-		"scasb\n\t"
-		"decl %1\n"
-		"1:\tlodsb\n\t"
+	asm volatile(
+		"repne scasb\n\t" /* Find NUL in dest. EDI points after NUL. ECX is junk. */
+		"decl %1\n\t"   /* EDI now points to the NUL in dest. */
+		"1:\tlodsb\n\t"   /* Copy src */
 		"stosb\n\t"
 		"testb %%al,%%al\n\t"
 		"jne 1b"
 		: "=&S" (d0), "=&D" (d1), "=&a" (d2), "=&c" (d3)
-		: "0" (src), "1" (dest), "2" (0), "3" (0xffffffffu) : "memory");
+		: "0" (src), "1" (dest), "2" (0), "3" (0xffffffffu) /* dest->EDI, src->ESI, AL=0, ECX=-1 for scasb */
+		: "memory");
 	return dest;
 }
 EXPORT_SYMBOL(strcat);
@@ -72,19 +85,24 @@ EXPORT_SYMBOL(strcat);
 char *strncat(char *dest, const char *src, size_t count)
 {
 	int d0, d1, d2, d3;
-	asm volatile("repne\n\t"
-		"scasb\n\t"
-		"decl %1\n\t"
-		"movl %8,%3\n"
-		"1:\tdecl %3\n\t"
-		"js 2f\n\t"
+	asm volatile(
+		"repne scasb\n\t"       /* Find NUL in dest. EDI points after NUL. Original %ecx is junk. */
+		"decl %1\n\t"         /* EDI now points to the NUL in dest. */
+		"movl %8, %3\n\t"       /* Load original 'strncat_count' into loop counter %ecx (%3). Constraint "g"(count) is %8. */
+		"testl %3, %3\n\t"      /* If strncat_count == 0 */
+		"jz 2f\n\t"           /*   then skip copy loop, just NUL terminate. */
+		"1:\tdecl %3\n\t"     /* Decrement remaining 'strncat_count' for copy */
+		"js 2f\n\t"           /* If count for copy exhausted */
 		"lodsb\n\t"
 		"stosb\n\t"
 		"testb %%al,%%al\n\t"
-		"jne 1b\n"
-		"2:\txorl %2,%2\n\t"
-		"stosb"
+		"jne 1b\n\t"          /* Loop if char copied was not NUL */
+		/* Fall through if NUL copied (src was shorter than strncat_count) or count exhausted */
+		"2:\txorl %2, %2\n\t"   /* AL = 0 */
+		"stosb"                 /* Store NUL terminator. */
 		: "=&S" (d0), "=&D" (d1), "=&a" (d2), "=&c" (d3)
+		/* Inputs for scasb: dest->EDI (%1), AL=0 (%2), ECX=-1 (%3 clobbered after use of %8) */
+		/* Inputs for copy: src->ESI (%0) */
 		: "0" (src), "1" (dest), "2" (0), "3" (0xffffffffu), "g" (count)
 		: "memory");
 	return dest;
@@ -97,19 +115,24 @@ int strcmp(const char *cs, const char *c
 {
 	int d0, d1;
 	int res;
-	asm volatile("1:\tlodsb\n\t"
+	asm volatile(
+		"cmp %1, %2\n\t"        /* if (cs == ct) */
+		"je .Lstrcmp_equal_%= \n\t" /* Use %= for unique local label */
+		"1:\tlodsb\n\t"
 		"scasb\n\t"
-		"jne 2f\n\t"
+		"jne .Lstrcmp_notequal_%= \n\t"
 		"testb %%al,%%al\n\t"
 		"jne 1b\n\t"
+		".Lstrcmp_equal_%= :\n\t"
 		"xorl %%eax,%%eax\n\t"
-		"jmp 3f\n"
-		"2:\tsbbl %%eax,%%eax\n\t"
-		"orb $1,%%al\n"
-		"3:"
+		"jmp .Lstrcmp_done_%= \n\t"
+		".Lstrcmp_notequal_%= :\n\t"
+		"sbbl %%eax,%%eax\n\t"
+		"orb $1,%%al\n\t"
+		".Lstrcmp_done_%= :"
 		: "=a" (res), "=&S" (d0), "=&D" (d1)
 		: "1" (cs), "2" (ct)
-		: "memory");
+		: "memory", "cc");
 	return res;
 }
 EXPORT_SYMBOL(strcmp);
@@ -120,21 +143,30 @@ int strncmp(const char *cs, const char *
 {
 	int res;
 	int d0, d1, d2;
-	asm volatile("1:\tdecl %3\n\t"
-		"js 2f\n\t"
+	asm volatile(
+		"testl %3, %3\n\t"      /* if (count == 0), %3 is original count from arg */
+		"jz .Lstrncmp_equal_%= \n\t"
+		"cmp %1, %2\n\t"        /* if (cs == ct) */
+		"je .Lstrncmp_equal_%= \n\t"
+		/* %3 (original count) gets moved to %ecx by constraint "3" */
+		"1:\tdecl %2\n\t"       /* Use %ecx (%2) as loop counter, was original count */
+		"js .Lstrncmp_equal_%= \n\t" /* If count exhausted */
 		"lodsb\n\t"
 		"scasb\n\t"
-		"jne 3f\n\t"
+		"jne .Lstrncmp_notequal_%= \n\t"
 		"testb %%al,%%al\n\t"
-		"jne 1b\n"
-		"2:\txorl %%eax,%%eax\n\t"
-		"jmp 4f\n"
-		"3:\tsbbl %%eax,%%eax\n\t"
-		"orb $1,%%al\n"
-		"4:"
+		"jne 1b\n\t"            /* If not NUL, continue loop (if count allows) */
+		/* Fall through if NUL found, strings are equal up to NUL or count */
+		".Lstrncmp_equal_%= :\n\t"
+		"xorl %%eax,%%eax\n\t"
+		"jmp .Lstrncmp_done_%= \n\t"
+		".Lstrncmp_notequal_%= :\n\t"
+		"sbbl %%eax,%%eax\n\t"
+		"orb $1,%%al\n\t"
+		".Lstrncmp_done_%= :"
 		: "=a" (res), "=&S" (d0), "=&D" (d1), "=&c" (d2)
-		: "1" (cs), "2" (ct), "3" (count)
-		: "memory");
+		: "1" (cs), "2" (ct), "3" (count) /* count maps to %ecx (%d2 for clobber, %3 for input) */
+		: "memory", "cc");
 	return res;
 }
 EXPORT_SYMBOL(strncmp);
@@ -143,20 +175,25 @@ EXPORT_SYMBOL(strncmp);
 #ifdef __HAVE_ARCH_STRCHR
 char *strchr(const char *s, int c)
 {
-	int d0;
-	char *res;
-	asm volatile("movb %%al,%%ah\n"
-		"1:\tlodsb\n\t"
-		"cmpb %%ah,%%al\n\t"
+	int d0; /* for S clobber */
+	char *res; /* for a output */
+	/* Original: c in %al (from "0" constraint). s in %esi (from "1" constraint). */
+	asm volatile(
+		"movb %%al, %%ah\n\t" /* Save char c (in al) to ah for comparison */
+		"1:\tlodsb\n\t"       /* al = *s++ */
+		"cmpb %%ah, %%al\n\t" /* if (*s == c) */
 		"je 2f\n\t"
-		"testb %%al,%%al\n\t"
+		"testb %%al, %%al\n\t" /* if (*s == 0) */
 		"jne 1b\n\t"
-		"movl $1,%1\n"
-		"2:\tmovl %1,%0\n\t"
-		"decl %0"
+		/* Not found */
+		"movl $0, %0\n\t"       /* res = NULL */
+		"jmp 3f\n\t"
+		"2:\tmovl %1, %0\n\t"   /* Found: res = current s */
+		"decl %0\n\t"       /* lodsb incremented s, so res needs to point to the char itself */
+		"3:"
 		: "=a" (res), "=&S" (d0)
 		: "1" (s), "0" (c)
-		: "memory");
+		: "memory", "ah", "cc"); /* ah is used and clobbered */
 	return res;
 }
 EXPORT_SYMBOL(strchr);
@@ -167,12 +204,13 @@ size_t strlen(const char *s)
 {
 	int d0;
 	size_t res;
-	asm volatile("repne\n\t"
-		"scasb"
-		: "=c" (res), "=&D" (d0)
+	asm volatile(
+		"repne scasb" /* Optimized for modern CPUs */
+		/* Inputs for scasb: s->EDI (%1), AL=0 (%a), ECX=-1 (%0) */
+		: "=c" (res), "=&D" (d0) /* Output: final ecx in res, edi clobbered in d0 */
 		: "1" (s), "a" (0), "0" (0xffffffffu)
 		: "memory");
-	return ~res - 1;
+	return ~res - 1; /* Correct calculation for length from final ecx */
 }
 EXPORT_SYMBOL(strlen);
 #endif
@@ -180,18 +218,23 @@ EXPORT_SYMBOL(strlen);
 #ifdef __HAVE_ARCH_MEMCHR
 void *memchr(const void *cs, int c, size_t count)
 {
-	int d0;
-	void *res;
-	if (!count)
-		return NULL;
-	asm volatile("repne\n\t"
-		"scasb\n\t"
-		"je 1f\n\t"
-		"movl $1,%0\n"
-		"1:\tdecl %0"
+	int d0; /* for D clobber */
+	void *res; /* for D output */
+	/* Original: cs into EDI (constraint "0"), c into AL (constraint "a"), count into ECX (constraint "1") */
+	asm volatile(
+		"testl %2, %2\n\t"      /* if (count == 0) */
+		"jz .Lmemchr_notfound_%= \n\t" /* Note: res is edi, not eax here. */
+		"repne scasb\n\t"
+		"je .Lmemchr_found_%= \n\t" /* ZF=1 if found */
+		".Lmemchr_notfound_%= :\n\t"
+		"movl $0, %0\n\t"       /* res (edi) = NULL */
+		"jmp .Lmemchr_done_%= \n\t"
+		".Lmemchr_found_%= :\n\t"
+		"decl %0\n\t"           /* res (edi) points to char */
+		".Lmemchr_done_%= :"
 		: "=D" (res), "=&c" (d0)
 		: "a" (c), "0" (cs), "1" (count)
-		: "memory");
+		: "memory", "cc");
 	return res;
 }
 EXPORT_SYMBOL(memchr);
@@ -200,15 +243,18 @@ EXPORT_SYMBOL(memchr);
 #ifdef __HAVE_ARCH_MEMSCAN
 void *memscan(void *addr, int c, size_t size)
 {
-	if (!size)
-		return addr;
-	asm volatile("repnz; scasb\n\t"
-	    "jnz 1f\n\t"
-	    "dec %%edi\n"
-	    "1:"
-	    : "=D" (addr), "=c" (size)
-	    : "0" (addr), "1" (size), "a" (c)
-	    : "memory");
+	// Original: addr in EDI (constraint "0"), size in ECX (constraint "1"), c in AL ("a")
+	asm volatile(
+		"testl %1, %1\n\t"      /* if (size == 0) */
+		"jz 1f\n\t"           /*   skip scan, addr is already correct */
+		"repnz scasb\n\t"       /* Scan while [edi]!=al (ZF=0) && ecx!=0 */
+		/* Stops if [edi]==al (ZF=1) OR ecx becomes 0 */
+		"jnz 1f\n\t"            /* If ZF=0 (ecx became 0, last char was not c), addr is edi (end of scan) */
+		"dec %%edi\n\t"         /* If ZF=1 (char c found), edi points after c, so dec to point to c */
+		"1:"
+		: "=D" (addr), "=c" (size)
+		: "0" (addr), "1" (size), "a" (c)
+		: "memory", "cc");
 	return addr;
 }
 EXPORT_SYMBOL(memscan);
@@ -217,21 +263,51 @@ EXPORT_SYMBOL(memscan);
 #ifdef __HAVE_ARCH_STRNLEN
 size_t strnlen(const char *s, size_t count)
 {
-	int d0;
-	int res;
-	asm volatile("movl %2,%0\n\t"
-		"jmp 2f\n"
-		"1:\tcmpb $0,(%0)\n\t"
-		"je 3f\n\t"
-		"incl %0\n"
-		"2:\tdecl %1\n\t"
-		"cmpl $-1,%1\n\t"
-		"jne 1b\n"
-		"3:\tsubl %2,%0"
-		: "=a" (res), "=&d" (d0)
-		: "c" (s), "1" (count)
-		: "memory");
-	return res;
+	size_t result;
+	// Inputs from C: s on stack/reg, count on stack/reg
+	// For inline asm: map s to %edi, count to %ecx
+	asm volatile(
+		"testl %2, %2\n\t"          // If count == 0
+		"jz .Lstrnlen_len_is_zero_%= \n\t"  // then length is 0
+
+		"movl %1, %%edi\n\t"        // edi = s
+		"movl %2, %%ecx\n\t"        // ecx = count (this will be the REP counter)
+	"xorl %%eax, %%eax\n\t"     // al = 0 (char to search for NUL)
+
+	"repne scasb\n\t"           // edi will point one byte *after* NUL if found,
+	// or s + count if NUL not found within 'count' bytes.
+	// ecx will be 0 if 'count' exhausted without finding NUL,
+	// or count_remaining_after_NUL if NUL found.
+
+	/* Calculate length: original_count - final_ecx gives bytes processed by repne. */
+	/* This value is either 'count' (if NUL not found) or 'length_of_string_up_to_NUL + 1'. */
+	"movl %2, %%eax\n\t"        // eax = original count
+	"subl %%ecx, %%eax\n\t"     // eax = original_count - final_ecx
+
+	/* Now, eax holds 'count' if NUL wasn't found within 'count' bytes. */
+	/* Or, eax holds 'length_up_to_NUL + 1' if NUL was found. */
+	/* We need to distinguish these cases. 'repne scasb' sets ZF=1 if the *reason for stopping* was a match. */
+	/* It sets ZF based on the last comparison if ECX becomes zero. */
+
+	"jne .Lstrnlen_nul_found_or_limit_reached_%= \n\t" // If ZF=0 after repne, it means ECX became 0 AND last char was not NUL
+	// In this case, length is 'count', eax is already 'count'. Good.
+	// If ZF=1, NUL was found. eax is 'len+1'.
+	/* ZF=1 here means NUL was found (or last char was NUL when count exhausted) */
+	"decl %%eax\n\t"            // Length is one less to exclude the NUL byte.
+	"jmp .Lstrnlen_done_%= \n\t"
+
+	".Lstrnlen_nul_found_or_limit_reached_%= :\n\t"
+	/* This path is taken if repne finished because ECX became 0, AND the last byte compared was NOT NUL. */
+	/* In this case, EAX = original_count, which is the correct length. */
+	"jmp .Lstrnlen_done_%= \n\t"
+
+	".Lstrnlen_len_is_zero_%= :\n\t"
+	"xorl %%eax, %%eax\n\t"     // Result is 0
+	".Lstrnlen_done_%= :"
+	: "=a" (result)                 // Output: result in %eax
+	: "g"(s), "g"(count)            // Inputs: s, count (general constraints allow them anywhere)
+	: "%edi", "%ecx", "memory", "cc"); // Clobbers for GCC
+	return result;
 }
 EXPORT_SYMBOL(strnlen);
 #endif

--- a/arch/x86/lib/usercopy_64.c	2025-03-13 13:08:08.000000000 +0100
+++ b/arch/x86/lib/usercopy_64.c	2025-03-15 16:32:58.842368799 +0100
@@ -1,144 +1,381 @@
 // SPDX-License-Identifier: GPL-2.0-only
-/* 
+/*
  * User address space access functions.
- *
- * Copyright 1997 Andi Kleen <ak@muc.de>
- * Copyright 1997 Linus Torvalds
- * Copyright 2002 Andi Kleen <ak@suse.de>
+ * Optimized for Intel Raptor Lake architecture.
+ * Provides copy functions that ensure data is flushed for persistence (e.g., PMEM).
  */
 #include <linux/export.h>
 #include <linux/uaccess.h>
 #include <linux/highmem.h>
 #include <linux/libnvdimm.h>
+#include <linux/string.h>
+#include <linux/kernel.h>
+#include <asm/cpufeature.h>
+#include <asm/processor.h>
+#include <asm/cacheflush.h>
+#include <asm/fpu/api.h>
+#include <asm/alternative.h>
+#include <asm/barrier.h> // Include for sfence() macro potentially used elsewhere, though we use inline asm here.
+
+// Function Prototypes
+static inline void clean_cache_range(void *addr, size_t size);
+static inline void __memcpy_flushcache_avx2(void *dst, const void *src, size_t size);
+static inline void __memcpy_flushcache_std(void *dst, const void *src, size_t size);
+void arch_wb_cache_pmem(void *addr, size_t size);
+long __copy_user_flushcache(void *dst, const void __user *src, unsigned size);
+void __memcpy_flushcache(void *dst, const void *src, size_t size);
 
-/*
- * Zero Userspace
- */
 
 #ifdef CONFIG_ARCH_HAS_UACCESS_FLUSHCACHE
+
 /**
- * clean_cache_range - write back a cache range with CLWB
- * @vaddr:	virtual start address
- * @size:	number of bytes to write back
- *
- * Write back a cache range using the CLWB (cache line write back)
- * instruction. Note that @size is internally rounded up to be cache
- * line size aligned.
- */
-static void clean_cache_range(void *addr, size_t size)
-{
-	u16 x86_clflush_size = boot_cpu_data.x86_clflush_size;
-	unsigned long clflush_mask = x86_clflush_size - 1;
-	void *vend = addr + size;
-	void *p;
+ * clean_cache_range - write back and invalidate cache range with CLWB + sfence
+ * @addr:	start address
+ * @size:	number of bytes
+ */
+static inline void clean_cache_range(void *addr, size_t size)
+{
+	if (unlikely(size == 0))
+		return;
 
-	for (p = (void *)((unsigned long)addr & ~clflush_mask);
-	     p < vend; p += x86_clflush_size)
+	if (!static_cpu_has(X86_FEATURE_CLWB)) {
+		WARN_ONCE(1, FW_BUG "CLWB feature missing despite CONFIG_ARCH_HAS_UACCESS_FLUSHCACHE");
+		return;
+	}
+
+	u16 clflush_size = boot_cpu_data.x86_clflush_size;
+	if (unlikely(!clflush_size || !is_power_of_2(clflush_size))) {
+		WARN_ONCE(1, "Invalid x86_clflush_size: %u", clflush_size);
+		clflush_size = 64;
+	}
+	unsigned long clflush_mask = clflush_size - 1;
+	char *p = (char *)((unsigned long)addr & ~clflush_mask);
+	char *vend = (char *)addr + size;
+
+	while (likely(p + 4 * clflush_size <= vend)) {
+		clwb(p);
+		clwb(p + clflush_size);
+		clwb(p + 2 * clflush_size);
+		clwb(p + 3 * clflush_size);
+		p += 4 * clflush_size;
+	}
+	if (p + 2 * clflush_size <= vend) {
+		clwb(p);
+		clwb(p + clflush_size);
+		p += 2 * clflush_size;
+	}
+	if (p < vend) {
 		clwb(p);
+	}
+
+	// SFENCE: Ensure CLWB operations complete for persistence.
+	asm volatile("sfence" ::: "memory");
 }
 
+/**
+ * arch_wb_cache_pmem - Write back cache lines for persistent memory
+ * @addr:	start address
+ * @size:	number of bytes
+ */
 void arch_wb_cache_pmem(void *addr, size_t size)
 {
 	clean_cache_range(addr, size);
 }
 EXPORT_SYMBOL_GPL(arch_wb_cache_pmem);
 
+/**
+ * __copy_user_flushcache - Copy from user, ensuring data hits persistence.
+ * @dst:   Destination address (kernel space, PMEM).
+ * @src:   Source address (user space).
+ * @size:  Number of bytes to copy.
+ *
+ * Returns: Number of bytes NOT copied (0 on success).
+ */
 long __copy_user_flushcache(void *dst, const void __user *src, unsigned size)
 {
-	unsigned long flushed, dest = (unsigned long) dst;
 	long rc;
 
+	if (unlikely(size == 0))
+		return 0;
+
+	// Perform copy from user; __copy_user_nocache handles access_ok & faults
 	stac();
 	rc = __copy_user_nocache(dst, src, size);
 	clac();
 
-	/*
-	 * __copy_user_nocache() uses non-temporal stores for the bulk
-	 * of the transfer, but we need to manually flush if the
-	 * transfer is unaligned. A cached memory copy is used when
-	 * destination or size is not naturally aligned. That is:
-	 *   - Require 8-byte alignment when size is 8 bytes or larger.
-	 *   - Require 4-byte alignment when size is 4 bytes.
-	 */
-	if (size < 8) {
-		if (!IS_ALIGNED(dest, 4) || size != 4)
-			clean_cache_range(dst, size);
-	} else {
-		if (!IS_ALIGNED(dest, 8)) {
-			dest = ALIGN(dest, boot_cpu_data.x86_clflush_size);
-			clean_cache_range(dst, 1);
-		}
-
-		flushed = dest - (unsigned long) dst;
-		if (size > flushed && !IS_ALIGNED(size - flushed, 8))
-			clean_cache_range(dst + size - 1, 1);
+	unsigned long bytes_copied = size - rc;
+
+	// Flush the destination range that was successfully copied
+	if (likely(bytes_copied > 0)) {
+		clean_cache_range(dst, bytes_copied); // Includes sfence
 	}
 
 	return rc;
 }
 
-void __memcpy_flushcache(void *_dst, const void *_src, size_t size)
+/**
+ * __memcpy_flushcache_avx2 - memcpy using AVX2 NT stores + flush.
+ * @dst:   Destination address. Requires 32B alignment for main loops.
+ * @src:   Source address. Can be unaligned.
+ * @size:  Number of bytes to copy.
+ */
+static inline void __memcpy_flushcache_avx2(void *dst, const void *src, size_t size)
 {
-	unsigned long dest = (unsigned long) _dst;
-	unsigned long source = (unsigned long) _src;
+	char *d = (char *)dst;
+	const char *s = (const char *)src;
+	size_t len = size;
+
+	// Fallback for smaller sizes
+	if (len < 256) {
+		__memcpy_flushcache_std(dst, src, size);
+		return;
+	}
 
-	/* cache copy and flush to align dest */
-	if (!IS_ALIGNED(dest, 8)) {
-		size_t len = min_t(size_t, size, ALIGN(dest, 8) - dest);
-
-		memcpy((void *) dest, (void *) source, len);
-		clean_cache_range((void *) dest, len);
-		dest += len;
-		source += len;
-		size -= len;
-		if (!size)
+	kernel_fpu_begin();
+
+	// Align destination to 32 bytes for vmovntdq
+	if (unlikely(!IS_ALIGNED((unsigned long)d, 32))) {
+		size_t head_len = ALIGN((unsigned long)d, 32) - (unsigned long)d;
+		head_len = min(head_len, len);
+		memcpy(d, s, head_len);
+		clean_cache_range(d, head_len);
+		d += head_len;
+		s += head_len;
+		len -= head_len;
+		if (unlikely(len == 0))
+			goto end_avx;
+	}
+
+	// Main loop: process 256 bytes (8x YMM) per iteration
+	while (likely(len >= 256)) {
+		prefetch((const void *)(s + 768));
+
+		asm volatile(
+			"vmovdqu    0(%[src]), %%ymm0\n"
+			"vmovdqu   32(%[src]), %%ymm1\n"
+			"vmovdqu   64(%[src]), %%ymm2\n"
+			"vmovdqu   96(%[src]), %%ymm3\n"
+			"vmovdqu  128(%[src]), %%ymm4\n"
+			"vmovdqu  160(%[src]), %%ymm5\n"
+			"vmovdqu  192(%[src]), %%ymm6\n"
+			"vmovdqu  224(%[src]), %%ymm7\n"
+			"vmovntdq %%ymm0,    0(%[dst])\n"
+			"vmovntdq %%ymm1,   32(%[dst])\n"
+			"vmovntdq %%ymm2,   64(%[dst])\n"
+			"vmovntdq %%ymm3,   96(%[dst])\n"
+			"vmovntdq %%ymm4,  128(%[dst])\n"
+			"vmovntdq %%ymm5,  160(%[dst])\n"
+			"vmovntdq %%ymm6,  192(%[dst])\n"
+			"vmovntdq %%ymm7,  224(%[dst])\n"
+			: : [src]"r"(s), [dst]"r"(d)
+			: "memory", "ymm0", "ymm1", "ymm2", "ymm3", "ymm4", "ymm5", "ymm6", "ymm7"
+		);
+
+		s += 256;
+		d += 256;
+		len -= 256;
+	}
+
+	// Handle remaining 128B chunks
+	if (len >= 128) {
+		asm volatile(
+			"vmovdqu    0(%[src]), %%ymm0\n"
+			"vmovdqu   32(%[src]), %%ymm1\n"
+			"vmovdqu   64(%[src]), %%ymm2\n"
+			"vmovdqu   96(%[src]), %%ymm3\n"
+			"vmovntdq %%ymm0,    0(%[dst])\n"
+			"vmovntdq %%ymm1,   32(%[dst])\n"
+			"vmovntdq %%ymm2,   64(%[dst])\n"
+			"vmovntdq %%ymm3,   96(%[dst])\n"
+			: : [src]"r"(s), [dst]"r"(d)
+			: "memory", "ymm0", "ymm1", "ymm2", "ymm3"
+		);
+		s += 128;
+		d += 128;
+		len -= 128;
+	}
+
+	// Handle remaining 64B chunks
+	if (len >= 64) {
+		asm volatile(
+			"vmovdqu    0(%[src]), %%ymm0\n"
+			"vmovdqu   32(%[src]), %%ymm1\n"
+			"vmovntdq %%ymm0,    0(%[dst])\n"
+			"vmovntdq %%ymm1,   32(%[dst])\n"
+			: : [src]"r"(s), [dst]"r"(d)
+			: "memory", "ymm0", "ymm1"
+		);
+		s += 64;
+		d += 64;
+		len -= 64;
+	}
+
+	// Handle remaining 32B chunks
+	if (len >= 32) {
+		asm volatile(
+			"vmovdqu  (%[src]), %%ymm0\n"
+			"vmovntdq %%ymm0, (%[dst])\n"
+			: : [src]"r"(s), [dst]"r"(d)
+			: "memory", "ymm0"
+		);
+		s += 32;
+		d += 32;
+		len -= 32;
+	}
+
+	// Ensure NT stores complete
+	asm volatile("sfence" ::: "memory");
+
+	end_avx:
+	// Avoid AVX-SSE transition penalty
+	asm volatile("vzeroupper" ::: "memory");
+	kernel_fpu_end();
+
+	// Handle final tail (< 32 bytes)
+	if (len > 0) {
+		memcpy(d, s, len);
+		clean_cache_range(d, len); // Includes sfence
+	}
+}
+
+
+/**
+ * __memcpy_flushcache_std - memcpy using GPR NT stores + flush (No AVX2).
+ * @dst:   Destination address. Requires 8B alignment for main loops.
+ * @src:   Source address.
+ * @size:  Number of bytes to copy.
+ */
+static inline void __memcpy_flushcache_std(void *dst, const void *src, size_t size)
+{
+	char *d = (char *)dst;
+	const char *s = (const char *)src;
+	size_t len = size;
+
+	// Align destination to 8 bytes for movnti
+	if (unlikely(!IS_ALIGNED((unsigned long)d, 8))) {
+		size_t head_len = ALIGN((unsigned long)d, 8) - (unsigned long)d;
+		head_len = min(head_len, len);
+		memcpy(d, s, head_len);
+		clean_cache_range(d, head_len); // Includes sfence
+		d += head_len;
+		s += head_len;
+		len -= head_len;
+		if (unlikely(len == 0))
 			return;
 	}
 
-	/* 4x8 movnti loop */
-	while (size >= 32) {
-		asm("movq    (%0), %%r8\n"
-		    "movq   8(%0), %%r9\n"
-		    "movq  16(%0), %%r10\n"
-		    "movq  24(%0), %%r11\n"
-		    "movnti  %%r8,   (%1)\n"
-		    "movnti  %%r9,  8(%1)\n"
-		    "movnti %%r10, 16(%1)\n"
-		    "movnti %%r11, 24(%1)\n"
-		    :: "r" (source), "r" (dest)
-		    : "memory", "r8", "r9", "r10", "r11");
-		dest += 32;
-		source += 32;
-		size -= 32;
-	}
-
-	/* 1x8 movnti loop */
-	while (size >= 8) {
-		asm("movq    (%0), %%r8\n"
-		    "movnti  %%r8,   (%1)\n"
-		    :: "r" (source), "r" (dest)
-		    : "memory", "r8");
-		dest += 8;
-		source += 8;
-		size -= 8;
-	}
-
-	/* 1x4 movnti loop */
-	while (size >= 4) {
-		asm("movl    (%0), %%r8d\n"
-		    "movnti  %%r8d,   (%1)\n"
-		    :: "r" (source), "r" (dest)
-		    : "memory", "r8");
-		dest += 4;
-		source += 4;
-		size -= 4;
-	}
-
-	/* cache copy for remaining bytes */
-	if (size) {
-		memcpy((void *) dest, (void *) source, size);
-		clean_cache_range((void *) dest, size);
+	// Process 64 bytes (8 qwords) per iteration
+	while (likely(len >= 64)) {
+		prefetch((const void *)(s + 512));
+
+		asm volatile(
+			"movq    0(%[src]), %%r8\n"
+			"movq    8(%[src]), %%r9\n"
+			"movq   16(%[src]), %%r10\n"
+			"movq   24(%[src]), %%r11\n"
+			"movnti %%r8,    0(%[dst])\n"
+			"movnti %%r9,    8(%[dst])\n"
+			"movnti %%r10,  16(%[dst])\n"
+			"movnti %%r11,  24(%[dst])\n"
+			"movq   32(%[src]), %%r12\n"
+			"movq   40(%[src]), %%r13\n"
+			"movq   48(%[src]), %%r14\n"
+			"movq   56(%[src]), %%r15\n"
+			"movnti %%r12,  32(%[dst])\n"
+			"movnti %%r13,  40(%[dst])\n"
+			"movnti %%r14,  48(%[dst])\n"
+			"movnti %%r15,  56(%[dst])\n"
+			: : [src]"r"(s), [dst]"r"(d)
+			: "memory", "r8", "r9", "r10", "r11", "r12", "r13", "r14", "r15"
+		);
+
+		s += 64;
+		d += 64;
+		len -= 64;
+	}
+
+	// Handle remaining 32B chunks
+	if (len >= 32) {
+		asm volatile(
+			"movq    0(%[src]), %%r8\n"
+			"movq    8(%[src]), %%r9\n"
+			"movq   16(%[src]), %%r10\n"
+			"movq   24(%[src]), %%r11\n"
+			"movnti %%r8,    0(%[dst])\n"
+			"movnti %%r9,    8(%[dst])\n"
+			"movnti %%r10,  16(%[dst])\n"
+			"movnti %%r11,  24(%[dst])\n"
+			: : [src]"r"(s), [dst]"r"(d)
+			: "memory", "r8", "r9", "r10", "r11"
+		);
+		s += 32;
+		d += 32;
+		len -= 32;
+	}
+
+	// Handle remaining 16B chunks
+	if (len >= 16) {
+		asm volatile(
+			"movq    0(%[src]), %%r8\n"
+			"movq    8(%[src]), %%r9\n"
+			"movnti %%r8,    0(%[dst])\n"
+			"movnti %%r9,    8(%[dst])\n"
+			: : [src]"r"(s), [dst]"r"(d)
+			: "memory", "r8", "r9"
+		);
+		s += 16;
+		d += 16;
+		len -= 16;
+	}
+
+	// Handle remaining 8B chunk
+	if (len >= 8) {
+		asm volatile(
+			"movq   (%[src]), %%r8\n"
+			"movnti %%r8,  (%[dst])\n"
+			: : [src]"r"(s), [dst]"r"(d)
+			: "memory", "r8"
+		);
+		s += 8;
+		d += 8;
+		len -= 8;
+	}
+
+	// Ensure NT stores complete
+	asm volatile("sfence" ::: "memory");
+
+	// Handle final tail (< 8 bytes)
+	if (len > 0) {
+		memcpy(d, s, len);
+		clean_cache_range(d, len); // Includes sfence
 	}
 }
+
+/**
+ * __memcpy_flushcache - memcpy wrapper selecting AVX2 or standard GPR path.
+ * @dst:   Destination address (kernel space, likely PMEM).
+ * @src:   Source address (kernel space).
+ * @size:  Number of bytes to copy.
+ */
+void __memcpy_flushcache(void *dst, const void *src, size_t size)
+{
+	if (unlikely(size == 0))
+		return;
+
+	// Select implementation based on AVX2 feature
+	asm goto(ALTERNATIVE("jmp %l[std_path]",
+						 "jmp %l[avx2_path]",
+					  X86_FEATURE_AVX2)
+	: : : : std_path, avx2_path);
+
+	avx2_path:
+	__memcpy_flushcache_avx2(dst, src, size);
+	return;
+
+	std_path:
+	__memcpy_flushcache_std(dst, src, size);
+	return;
+}
 EXPORT_SYMBOL_GPL(__memcpy_flushcache);
-#endif
+
+#endif /* CONFIG_ARCH_HAS_UACCESS_FLUSHCACHE */


--- a/arch/x86/lib/copy_page_64.S
+++ b/arch/x86/lib/copy_page_64.S 2025-03-15 15:55:20.654938290
@@ -1,5 +1,6 @@
 /* SPDX-License-Identifier: GPL-2.0 */
 /* Written 2003 by Andi Kleen, based on a kernel by Evandro Menezes */
+/* Optimized for Intel Raptor Lake using Intel optimization guidelines */
 
 #include <linux/export.h>
 #include <linux/linkage.h>
@@ -7,83 +8,166 @@
 #include <asm/alternative.h>
 
 /*
- * Some CPUs run faster using the string copy instructions (sane microcode).
- * It is also a lot simpler. Use this when possible. But, don't use streaming
- * copy unless the CPU indicates X86_FEATURE_REP_GOOD. Could vary the
- * prefetch distance based on SMP/UP.
+ * Multi-path page copy implementation with optimizations for Raptor Lake:
+ * 1. AVX2-based path with non-temporal stores and optimized prefetching
+ * 2. REP MOVSQ path (efficient on modern Intel CPUs)
+ * 3. Standard register-based fallback with optimized prefetching
  */
-	ALIGN
+        ALIGN
 SYM_FUNC_START(copy_page)
-	ALTERNATIVE "jmp copy_page_regs", "", X86_FEATURE_REP_GOOD
-	movl	$4096/8, %ecx
-	rep	movsq
-	RET
+        ALTERNATIVE "jmp copy_page_avx2", "", X86_FEATURE_AVX2
+        ALTERNATIVE "jmp copy_page_regs", "", X86_FEATURE_REP_GOOD
+        movl    $4096/8, %ecx
+        rep     movsq
+        RET
 SYM_FUNC_END(copy_page)
 EXPORT_SYMBOL(copy_page)
 
-SYM_FUNC_START_LOCAL(copy_page_regs)
-	subq	$2*8,	%rsp
-	movq	%rbx,	(%rsp)
-	movq	%r12,	1*8(%rsp)
+/*
+ * AVX2 optimized implementation that leverages:
+ * - 256-bit wide YMM registers
+ * - Non-temporal stores to avoid cache pollution
+ * - Strategic prefetching for Raptor Lake's memory subsystem
+ */
+        .p2align 5  /* 32-byte alignment for AVX2 */
+SYM_FUNC_START_LOCAL(copy_page_avx2)
+        /* Only rbx needs preservation as we're not using other callee-saved regs */
+        pushq   %rbx
+
+        /* Process 256 bytes per iteration (unrolled by 2) for better throughput */
+        movl    $4096/256, %ecx
+
+        .p2align 5  /* Optimal alignment for AVX2 code */
+.Loop_avx2:
+        /* Prefetch - Raptor Lake has good HW prefetchers, so we need fewer SW prefetches */
+        prefetcht0      8*64(%rsi)    /* ~512 bytes ahead - tuned for Raptor Lake */
+
+        /* First 128 bytes */
+        vmovdqa         0*32(%rsi), %ymm0
+        vmovdqa         1*32(%rsi), %ymm1
+        vmovdqa         2*32(%rsi), %ymm2
+        vmovdqa         3*32(%rsi), %ymm3
+
+        /* Second 128 bytes */
+        vmovdqa         4*32(%rsi), %ymm4
+        vmovdqa         5*32(%rsi), %ymm5
+        vmovdqa         6*32(%rsi), %ymm6
+        vmovdqa         7*32(%rsi), %ymm7
+
+        /* Non-temporal stores for first 128 bytes */
+        vmovntdq        %ymm0, 0*32(%rdi)
+        vmovntdq        %ymm1, 1*32(%rdi)
+        vmovntdq        %ymm2, 2*32(%rdi)
+        vmovntdq        %ymm3, 3*32(%rdi)
+
+        /* Non-temporal stores for second 128 bytes */
+        vmovntdq        %ymm4, 4*32(%rdi)
+        vmovntdq        %ymm5, 5*32(%rdi)
+        vmovntdq        %ymm6, 6*32(%rdi)
+        vmovntdq        %ymm7, 7*32(%rdi)
+
+        /* Update pointers */
+        addq    $256, %rsi
+        addq    $256, %rdi
+
+        /* Loop control */
+        subl    $1, %ecx
+        jnz     .Loop_avx2
+
+        /* Memory fence required after non-temporal stores */
+        sfence
+
+        /* Avoid AVX-SSE transition penalties */
+        vzeroupper
+
+        /* Restore saved register */
+        popq    %rbx
+        RET
+SYM_FUNC_END(copy_page_avx2)
 
-	movl	$(4096/64)-5,	%ecx
-	.p2align 4
+/*
+ * Optimized register-based implementation
+ * Uses non-temporal stores when available via ALTERNATIVE
+ */
+        .p2align 4
+SYM_FUNC_START_LOCAL(copy_page_regs)
+        /* Save preserved registers */
+        subq    $2*8, %rsp
+        movq    %rbx, (%rsp)
+        movq    %r12, 1*8(%rsp)
+
+        /* Main loop handling most of the page */
+        movl    $(4096/64)-5, %ecx
+        .p2align 4
 .Loop64:
-	dec	%rcx
-	movq	0x8*0(%rsi), %rax
-	movq	0x8*1(%rsi), %rbx
-	movq	0x8*2(%rsi), %rdx
-	movq	0x8*3(%rsi), %r8
-	movq	0x8*4(%rsi), %r9
-	movq	0x8*5(%rsi), %r10
-	movq	0x8*6(%rsi), %r11
-	movq	0x8*7(%rsi), %r12
-
-	prefetcht0 5*64(%rsi)
-
-	movq	%rax, 0x8*0(%rdi)
-	movq	%rbx, 0x8*1(%rdi)
-	movq	%rdx, 0x8*2(%rdi)
-	movq	%r8,  0x8*3(%rdi)
-	movq	%r9,  0x8*4(%rdi)
-	movq	%r10, 0x8*5(%rdi)
-	movq	%r11, 0x8*6(%rdi)
-	movq	%r12, 0x8*7(%rdi)
-
-	leaq	64 (%rsi), %rsi
-	leaq	64 (%rdi), %rdi
+        /* Prefetch optimized for Raptor Lake's memory subsystem */
+        prefetcht0      8*64(%rsi)    /* ~512 bytes ahead */
 
-	jnz	.Loop64
+         subl    $1, %ecx
 
-	movl	$5, %ecx
-	.p2align 4
+        /* Load 64 bytes into registers */
+        movq    0*8(%rsi), %rax
+        movq    1*8(%rsi), %rbx
+        movq    2*8(%rsi), %rdx
+        movq    3*8(%rsi), %r8
+        movq    4*8(%rsi), %r9
+        movq    5*8(%rsi), %r10
+        movq    6*8(%rsi), %r11
+        movq    7*8(%rsi), %r12
+
+        /* Use ALTERNATIVE to choose between regular and non-temporal stores */
+        ALTERNATIVE "movq %rax, 0*8(%rdi)", "movnti %rax, 0*8(%rdi)", X86_FEATURE_XMM2
+        ALTERNATIVE "movq %rbx, 1*8(%rdi)", "movnti %rbx, 1*8(%rdi)", X86_FEATURE_XMM2
+        ALTERNATIVE "movq %rdx, 2*8(%rdi)", "movnti %rdx, 2*8(%rdi)", X86_FEATURE_XMM2
+        ALTERNATIVE "movq %r8,  3*8(%rdi)", "movnti %r8,  3*8(%rdi)", X86_FEATURE_XMM2
+        ALTERNATIVE "movq %r9,  4*8(%rdi)", "movnti %r9,  4*8(%rdi)", X86_FEATURE_XMM2
+        ALTERNATIVE "movq %r10, 5*8(%rdi)", "movnti %r10, 5*8(%rdi)", X86_FEATURE_XMM2
+        ALTERNATIVE "movq %r11, 6*8(%rdi)", "movnti %r11, 6*8(%rdi)", X86_FEATURE_XMM2
+        ALTERNATIVE "movq %r12, 7*8(%rdi)", "movnti %r12, 7*8(%rdi)", X86_FEATURE_XMM2
+
+        /* Update pointers */
+        leaq    64(%rsi), %rsi
+        leaq    64(%rdi), %rdi
+
+        jnz     .Loop64
+
+        /* Handle remaining 5 blocks of 64 bytes */
+        movl    $5, %ecx
+        .p2align 4
 .Loop2:
-	decl	%ecx
+         subl    $1, %ecx
 
-	movq	0x8*0(%rsi), %rax
-	movq	0x8*1(%rsi), %rbx
-	movq	0x8*2(%rsi), %rdx
-	movq	0x8*3(%rsi), %r8
-	movq	0x8*4(%rsi), %r9
-	movq	0x8*5(%rsi), %r10
-	movq	0x8*6(%rsi), %r11
-	movq	0x8*7(%rsi), %r12
-
-	movq	%rax, 0x8*0(%rdi)
-	movq	%rbx, 0x8*1(%rdi)
-	movq	%rdx, 0x8*2(%rdi)
-	movq	%r8,  0x8*3(%rdi)
-	movq	%r9,  0x8*4(%rdi)
-	movq	%r10, 0x8*5(%rdi)
-	movq	%r11, 0x8*6(%rdi)
-	movq	%r12, 0x8*7(%rdi)
-
-	leaq	64(%rdi), %rdi
-	leaq	64(%rsi), %rsi
-	jnz	.Loop2
-
-	movq	(%rsp), %rbx
-	movq	1*8(%rsp), %r12
-	addq	$2*8, %rsp
-	RET
+        /* Load 64 bytes into registers */
+        movq    0*8(%rsi), %rax
+        movq    1*8(%rsi), %rbx
+        movq    2*8(%rsi), %rdx
+        movq    3*8(%rsi), %r8
+        movq    4*8(%rsi), %r9
+        movq    5*8(%rsi), %r10
+        movq    6*8(%rsi), %r11
+        movq    7*8(%rsi), %r12
+
+        /* Use ALTERNATIVE to choose between regular and non-temporal stores */
+        ALTERNATIVE "movq %rax, 0*8(%rdi)", "movnti %rax, 0*8(%rdi)", X86_FEATURE_XMM2
+        ALTERNATIVE "movq %rbx, 1*8(%rdi)", "movnti %rbx, 1*8(%rdi)", X86_FEATURE_XMM2
+        ALTERNATIVE "movq %rdx, 2*8(%rdi)", "movnti %rdx, 2*8(%rdi)", X86_FEATURE_XMM2
+        ALTERNATIVE "movq %r8,  3*8(%rdi)", "movnti %r8,  3*8(%rdi)", X86_FEATURE_XMM2
+        ALTERNATIVE "movq %r9,  4*8(%rdi)", "movnti %r9,  4*8(%rdi)", X86_FEATURE_XMM2
+        ALTERNATIVE "movq %r10, 5*8(%rdi)", "movnti %r10, 5*8(%rdi)", X86_FEATURE_XMM2
+        ALTERNATIVE "movq %r11, 6*8(%rdi)", "movnti %r11, 6*8(%rdi)", X86_FEATURE_XMM2
+        ALTERNATIVE "movq %r12, 7*8(%rdi)", "movnti %r12, 7*8(%rdi)", X86_FEATURE_XMM2
+
+        /* Update pointers */
+        leaq    64(%rdi), %rdi
+        leaq    64(%rsi), %rsi
+        jnz     .Loop2
+
+        /* Memory fence if non-temporal stores were used */
+        ALTERNATIVE "", "sfence", X86_FEATURE_XMM2
+
+        /* Restore preserved registers and return */
+        movq    (%rsp), %rbx
+        movq    1*8(%rsp), %r12
+        addq    $2*8, %rsp
+        RET
 SYM_FUNC_END(copy_page_regs)


--- a/arch/x86/lib/memcpy_64.S	2025-03-13 13:08:08.000000000 +0100
+++ b/arch/x86/lib/memcpy_64.S	2025-03-14 20:41:53.935561421 +0100
@@ -1,5 +1,8 @@
 /* SPDX-License-Identifier: GPL-2.0-only */
-/* Copyright 2002 Andi Kleen */
+/*
+ * Copyright 2002 Andi Kleen
+ * Optimized for Intel Raptor Lake by Claude, 2025
+ */
 
 #include <linux/export.h>
 #include <linux/linkage.h>
@@ -12,6 +15,8 @@
 
 /*
  * memcpy - Copy a memory block.
+ * Optimized for Intel Raptor Lake architecture with hybrid core awareness
+ * and enhanced vectorization.
  *
  * Input:
  *  rdi destination
@@ -20,153 +25,446 @@
  *
  * Output:
  * rax original destination
- *
- * The FSRM alternative should be done inline (avoiding the call and
- * the disgusting return handling), but that would require some help
- * from the compiler for better calling conventions.
- *
- * The 'rep movsb' itself is small enough to replace the call, but the
- * two register moves blow up the code. And one of them is "needed"
- * only for the return value that is the same as the source input,
- * which the compiler could/should do much better anyway.
  */
 SYM_TYPED_FUNC_START(__memcpy)
-	ALTERNATIVE "jmp memcpy_orig", "", X86_FEATURE_FSRM
+        /* Enhanced FSRM detection for Raptor Lake */
+        ALTERNATIVE "jmp memcpy_hybrid_check", "", X86_FEATURE_FSRM
 
-	movq %rdi, %rax
-	movq %rdx, %rcx
-	rep movsb
-	RET
+        /* Fast path with FSRM - simple rep movsb */
+        movq %rdi, %rax
+        movq %rdx, %rcx
+        rep movsb
+        RET
 SYM_FUNC_END(__memcpy)
 EXPORT_SYMBOL(__memcpy)
 
 SYM_FUNC_ALIAS_MEMFUNC(memcpy, __memcpy)
 EXPORT_SYMBOL(memcpy)
 
+/* Hybrid architecture check for P-core vs E-core */
+SYM_FUNC_START_LOCAL(memcpy_hybrid_check)
+        movq %rdi, %rax        /* Store return value (original destination) */
+
+        /* Check for hybrid CPU feature and branch to appropriate path */
+        ALTERNATIVE "jmp memcpy_orig", "jmp memcpy_pcore_path", X86_FEATURE_HYBRID_CPU
+SYM_FUNC_END(memcpy_hybrid_check)
+
+/* Optimized path for P-cores with AVX2 support for large copies */
+SYM_FUNC_START_LOCAL(memcpy_pcore_path)
+        /* Preserve callee-saved registers we'll use */
+        pushq %r12
+        pushq %r13
+        pushq %r14
+        pushq %r15
+
+        /* Save return value */
+        movq %rdi, %rax
+
+        /* Skip to regular path for small copies */
+        cmpq $256, %rdx
+        jb .Lrestore_and_jump_to_orig
+
+        /* Check if AVX2 is available */
+        ALTERNATIVE "jmp .Lrestore_and_jump_to_orig", "", X86_FEATURE_AVX2
+
+        /* Check if kernel allows AVX usage */
+        ALTERNATIVE "jmp .Lrestore_and_jump_to_orig", "", X86_FEATURE_OSXSAVE
+
+        /* Check for alignment */
+        movl %edi, %ecx
+        andl $31, %ecx
+        jz .Lavx_aligned_copy
+
+        /* Calculate bytes needed to align destination to 32-byte boundary */
+        movl $32, %r8d
+        subl %ecx, %r8d
+
+        /* Ensure alignment doesn't exceed total size */
+        movq %r8, %rcx
+        cmpq %rdx, %rcx
+        jbe .Lavx_align_ok
+        movq %rdx, %rcx
+
+.Lavx_align_ok:
+        /* Copy bytes to align */
+        subq %rcx, %rdx  /* Adjust remaining count */
+
+        /* Use movsb for alignment portion */
+        rep movsb
+
+        /* Skip AVX if no bytes remain */
+        testq %rdx, %rdx
+        jz .Lavx_cleanup_and_exit
+
+.Lavx_aligned_copy:
+        /* Set up for 128-byte chunk copies */
+        movq %rdx, %rcx
+        shrq $7, %rcx     /* Divide by 128 */
+        jz .Lavx_remainder
+
+        /* Main AVX2 copy loop - 128 bytes per iteration */
+.Lavx_loop:
+        /* Use vmovdqu for unaligned source */
+1:      vmovdqu 0*32(%rsi), %ymm0
+2:      vmovdqu 1*32(%rsi), %ymm1
+3:      vmovdqu 2*32(%rsi), %ymm2
+4:      vmovdqu 3*32(%rsi), %ymm3
+
+5:      vmovdqa %ymm0, 0*32(%rdi)
+6:      vmovdqa %ymm1, 1*32(%rdi)
+7:      vmovdqa %ymm2, 2*32(%rdi)
+8:      vmovdqa %ymm3, 3*32(%rdi)
+
+        addq $128, %rsi
+        addq $128, %rdi
+        subq $1, %rcx
+        jnz .Lavx_loop
+
+        /* Calculate remaining bytes */
+        andq $127, %rdx
+
+.Lavx_remainder:
+        /* Handle 64-byte chunks */
+        movq %rdx, %rcx
+        andq $64, %rcx
+        jz .Lavx_remainder_32
+
+9:      vmovdqu 0*32(%rsi), %ymm0
+10:     vmovdqu 1*32(%rsi), %ymm1
+11:     vmovdqa %ymm0, 0*32(%rdi)
+12:     vmovdqa %ymm1, 1*32(%rdi)
+
+        addq $64, %rsi
+        addq $64, %rdi
+        subq $64, %rdx
+
+.Lavx_remainder_32:
+        /* Handle 32-byte chunks */
+        movq %rdx, %rcx
+        andq $32, %rcx
+        jz .Lavx_remainder_tail
+
+13:     vmovdqu (%rsi), %ymm0
+14:     vmovdqa %ymm0, (%rdi)
+
+        addq $32, %rsi
+        addq $32, %rdi
+        subq $32, %rdx
+
+.Lavx_remainder_tail:
+        /* Clear AVX state to avoid penalties */
+        vzeroupper
+
+        /* Handle remaining bytes (<32) */
+        testq %rdx, %rdx
+        jz .Lavx_cleanup_and_exit
+
+        /* Use standard copy for tail */
+        movq %rdx, %rcx
+        rep movsb
+
+.Lavx_cleanup_and_exit:
+        /* Restore saved registers and return */
+        popq %r15
+        popq %r14
+        popq %r13
+        popq %r12
+        RET
+
+.Lrestore_and_jump_to_orig:
+        /* Restore registers before jumping to regular path */
+        popq %r15
+        popq %r14
+        popq %r13
+        popq %r12
+        jmp memcpy_orig
+
+.Lavx_fault_handler:
+        /* Clean up AVX state and jump to regular path on fault */
+        vzeroupper
+        popq %r15
+        popq %r14
+        popq %r13
+        popq %r12
+        jmp memcpy_orig
+
+        _ASM_EXTABLE(1b, .Lavx_fault_handler)
+        _ASM_EXTABLE(2b, .Lavx_fault_handler)
+        _ASM_EXTABLE(3b, .Lavx_fault_handler)
+        _ASM_EXTABLE(4b, .Lavx_fault_handler)
+        _ASM_EXTABLE(5b, .Lavx_fault_handler)
+        _ASM_EXTABLE(6b, .Lavx_fault_handler)
+        _ASM_EXTABLE(7b, .Lavx_fault_handler)
+        _ASM_EXTABLE(8b, .Lavx_fault_handler)
+        _ASM_EXTABLE(9b, .Lavx_fault_handler)
+        _ASM_EXTABLE(10b, .Lavx_fault_handler)
+        _ASM_EXTABLE(11b, .Lavx_fault_handler)
+        _ASM_EXTABLE(12b, .Lavx_fault_handler)
+        _ASM_EXTABLE(13b, .Lavx_fault_handler)
+        _ASM_EXTABLE(14b, .Lavx_fault_handler)
+SYM_FUNC_END(memcpy_pcore_path)
+
+/* Original path with Raptor Lake optimizations */
 SYM_FUNC_START_LOCAL(memcpy_orig)
-	movq %rdi, %rax
+        /* Preserve registers we'll be using */
+        pushq %r12
+        pushq %r13
+        pushq %r14
+        pushq %r15
+
+        /* Store return value */
+        movq %rdi, %rax
+
+        /* Optimize for zero-length copy */
+        testq %rdx, %rdx
+        jz .Lexit_with_restore
+
+        /* Adjust size threshold to 64 bytes for Raptor Lake cache lines */
+        cmpq $0x40, %rdx
+        jb .Lmedium_copy
+
+        /* Check for potential memory overlap */
+        cmp  %dil, %sil
+        jl .Lcopy_backward
+
+        /* Align destination to cache line if copy is large enough */
+        movl %edi, %ecx
+        andl $0x3F, %ecx
+        jz .Laligned_forward_copy
+
+        /* Only align if copy is large (>128 bytes) */
+        cmpq $0x80, %rdx
+        jb .Laligned_forward_copy
+
+        /* Calculate bytes to align */
+        movl $64, %r8d
+        subl %ecx, %r8d
+        movq %r8, %rcx
+
+        /* Ensure we don't over-copy */
+        cmpq %rdx, %rcx
+        jbe .Lalign_dest
+        movq %rdx, %rcx
+
+.Lalign_dest:
+        /* Adjust remaining count and align */
+        subq %rcx, %rdx
+        rep movsb
+
+        /* Check if we have bytes left to copy */
+        testq %rdx, %rdx
+        jz .Lexit_with_restore
+
+.Laligned_forward_copy:
+        /* Skip small copy path for larger copies */
+        cmpq $0x40, %rdx
+        jb .Lhandle_tail
 
-	cmpq $0x20, %rdx
-	jb .Lhandle_tail
+        /* Use 64-byte chunks for Raptor Lake's cache line size */
+        subq $0x40, %rdx
 
-	/*
-	 * We check whether memory false dependence could occur,
-	 * then jump to corresponding copy mode.
-	 */
-	cmp  %dil, %sil
-	jl .Lcopy_backward
-	subq $0x20, %rdx
 .Lcopy_forward_loop:
-	subq $0x20,	%rdx
+        /* Copy 64 bytes (full cache line) at a time */
+        movq 0*8(%rsi), %r8
+        movq 1*8(%rsi), %r9
+        movq 2*8(%rsi), %r10
+        movq 3*8(%rsi), %r11
+        movq 4*8(%rsi), %r12
+        movq 5*8(%rsi), %r13
+        movq 6*8(%rsi), %r14
+        movq 7*8(%rsi), %r15
+
+        movq %r8,  0*8(%rdi)
+        movq %r9,  1*8(%rdi)
+        movq %r10, 2*8(%rdi)
+        movq %r11, 3*8(%rdi)
+        movq %r12, 4*8(%rdi)
+        movq %r13, 5*8(%rdi)
+        movq %r14, 6*8(%rdi)
+        movq %r15, 7*8(%rdi)
 
-	/*
-	 * Move in blocks of 4x8 bytes:
-	 */
-	movq 0*8(%rsi),	%r8
-	movq 1*8(%rsi),	%r9
-	movq 2*8(%rsi),	%r10
-	movq 3*8(%rsi),	%r11
-	leaq 4*8(%rsi),	%rsi
-
-	movq %r8,	0*8(%rdi)
-	movq %r9,	1*8(%rdi)
-	movq %r10,	2*8(%rdi)
-	movq %r11,	3*8(%rdi)
-	leaq 4*8(%rdi),	%rdi
-	jae  .Lcopy_forward_loop
-	addl $0x20,	%edx
-	jmp  .Lhandle_tail
+        leaq 8*8(%rsi), %rsi
+        leaq 8*8(%rdi), %rdi
+
+        subq $0x40, %rdx
+        jae  .Lcopy_forward_loop
+
+        addq $0x40, %rdx
+        jmp  .Lhandle_tail
 
 .Lcopy_backward:
-	/*
-	 * Calculate copy position to tail.
-	 */
-	addq %rdx,	%rsi
-	addq %rdx,	%rdi
-	subq $0x20,	%rdx
-	/*
-	 * At most 3 ALU operations in one cycle,
-	 * so append NOPS in the same 16 bytes trunk.
-	 */
-	.p2align 4
+        /* Calculate copy position to tail */
+        addq %rdx, %rsi
+        addq %rdx, %rdi
+
+        /* Check if we have enough bytes for the main loop */
+        cmpq $0x40, %rdx
+        jb .Lcopy_backward_tail
+
+        subq $0x40, %rdx
+
+        .p2align 4
 .Lcopy_backward_loop:
-	subq $0x20,	%rdx
-	movq -1*8(%rsi),	%r8
-	movq -2*8(%rsi),	%r9
-	movq -3*8(%rsi),	%r10
-	movq -4*8(%rsi),	%r11
-	leaq -4*8(%rsi),	%rsi
-	movq %r8,		-1*8(%rdi)
-	movq %r9,		-2*8(%rdi)
-	movq %r10,		-3*8(%rdi)
-	movq %r11,		-4*8(%rdi)
-	leaq -4*8(%rdi),	%rdi
-	jae  .Lcopy_backward_loop
-
-	/*
-	 * Calculate copy position to head.
-	 */
-	addl $0x20,	%edx
-	subq %rdx,	%rsi
-	subq %rdx,	%rdi
+        /* Copy 64 bytes (full cache line) at a time */
+        movq -1*8(%rsi), %r8
+        movq -2*8(%rsi), %r9
+        movq -3*8(%rsi), %r10
+        movq -4*8(%rsi), %r11
+        movq -5*8(%rsi), %r12
+        movq -6*8(%rsi), %r13
+        movq -7*8(%rsi), %r14
+        movq -8*8(%rsi), %r15
+
+        movq %r8,  -1*8(%rdi)
+        movq %r9,  -2*8(%rdi)
+        movq %r10, -3*8(%rdi)
+        movq %r11, -4*8(%rdi)
+        movq %r12, -5*8(%rdi)
+        movq %r13, -6*8(%rdi)
+        movq %r14, -7*8(%rdi)
+        movq %r15, -8*8(%rdi)
+
+        leaq -8*8(%rsi), %rsi
+        leaq -8*8(%rdi), %rdi
+
+        subq $0x40, %rdx
+        jae  .Lcopy_backward_loop
+
+        /* Calculate copy position to head */
+        addq $0x40, %rdx
+
+.Lcopy_backward_tail:
+        /* For small backward copies, adjust pointers correctly */
+        subq %rdx, %rsi
+        subq %rdx, %rdi
+
+        /* Continue with regular tail handling */
+        jmp .Lhandle_tail
+
 .Lhandle_tail:
-	cmpl $16,	%edx
-	jb   .Lless_16bytes
+        /* Nothing to copy */
+        testq %rdx, %rdx
+        jz .Lexit_with_restore
+
+.Lmedium_copy:
+        /* Adjusted thresholds for medium copies */
+        cmpq $32, %rdx
+        jb .Lless_32bytes
+
+        /* Specialized handling for 32-64 bytes */
+        cmpq $48, %rdx
+        jb .Lcopy_32_to_48
+
+        /* Copy 48-64 bytes with unrolled movq */
+        movq 0*8(%rsi), %r8
+        movq 1*8(%rsi), %r9
+        movq 2*8(%rsi), %r10
+        movq 3*8(%rsi), %r11
+        movq -4*8(%rsi, %rdx), %r12
+        movq -3*8(%rsi, %rdx), %r13
+        movq -2*8(%rsi, %rdx), %r14
+        movq -1*8(%rsi, %rdx), %r15
+
+        movq %r8,  0*8(%rdi)
+        movq %r9,  1*8(%rdi)
+        movq %r10, 2*8(%rdi)
+        movq %r11, 3*8(%rdi)
+        movq %r12, -4*8(%rdi, %rdx)
+        movq %r13, -3*8(%rdi, %rdx)
+        movq %r14, -2*8(%rdi, %rdx)
+        movq %r15, -1*8(%rdi, %rdx)
+
+        jmp .Lexit_with_restore
+
+.Lcopy_32_to_48:
+        /* Copy 32-48 bytes with unrolled movq */
+        movq 0*8(%rsi), %r8
+        movq 1*8(%rsi), %r9
+        movq 2*8(%rsi), %r10
+        movq 3*8(%rsi), %r11
+        movq -2*8(%rsi, %rdx), %r12
+        movq -1*8(%rsi, %rdx), %r13
+
+        movq %r8,  0*8(%rdi)
+        movq %r9,  1*8(%rdi)
+        movq %r10, 2*8(%rdi)
+        movq %r11, 3*8(%rdi)
+        movq %r12, -2*8(%rdi, %rdx)
+        movq %r13, -1*8(%rdi, %rdx)
+
+        jmp .Lexit_with_restore
+
+.Lless_32bytes:
+        cmpq $16, %rdx
+        jb .Lless_16bytes
+
+        /* Copy 16-32 bytes */
+        movq 0*8(%rsi), %r8
+        movq 1*8(%rsi), %r9
+        movq -2*8(%rsi, %rdx), %r10
+        movq -1*8(%rsi, %rdx), %r11
+
+        movq %r8,  0*8(%rdi)
+        movq %r9,  1*8(%rdi)
+        movq %r10, -2*8(%rdi, %rdx)
+        movq %r11, -1*8(%rdi, %rdx)
+
+        jmp .Lexit_with_restore
 
-	/*
-	 * Move data from 16 bytes to 31 bytes.
-	 */
-	movq 0*8(%rsi), %r8
-	movq 1*8(%rsi),	%r9
-	movq -2*8(%rsi, %rdx),	%r10
-	movq -1*8(%rsi, %rdx),	%r11
-	movq %r8,	0*8(%rdi)
-	movq %r9,	1*8(%rdi)
-	movq %r10,	-2*8(%rdi, %rdx)
-	movq %r11,	-1*8(%rdi, %rdx)
-	RET
-	.p2align 4
 .Lless_16bytes:
-	cmpl $8,	%edx
-	jb   .Lless_8bytes
-	/*
-	 * Move data from 8 bytes to 15 bytes.
-	 */
-	movq 0*8(%rsi),	%r8
-	movq -1*8(%rsi, %rdx),	%r9
-	movq %r8,	0*8(%rdi)
-	movq %r9,	-1*8(%rdi, %rdx)
-	RET
-	.p2align 4
-.Lless_8bytes:
-	cmpl $4,	%edx
-	jb   .Lless_3bytes
+        cmpq $8, %rdx
+        jb .Lless_8bytes
 
-	/*
-	 * Move data from 4 bytes to 7 bytes.
-	 */
-	movl (%rsi), %ecx
-	movl -4(%rsi, %rdx), %r8d
-	movl %ecx, (%rdi)
-	movl %r8d, -4(%rdi, %rdx)
-	RET
-	.p2align 4
-.Lless_3bytes:
-	subl $1, %edx
-	jb .Lend
-	/*
-	 * Move data from 1 bytes to 3 bytes.
-	 */
-	movzbl (%rsi), %ecx
-	jz .Lstore_1byte
-	movzbq 1(%rsi), %r8
-	movzbq (%rsi, %rdx), %r9
-	movb %r8b, 1(%rdi)
-	movb %r9b, (%rdi, %rdx)
-.Lstore_1byte:
-	movb %cl, (%rdi)
+        /* Copy 8-16 bytes */
+        movq 0*8(%rsi), %r8
+        movq -1*8(%rsi, %rdx), %r9
 
-.Lend:
-	RET
-SYM_FUNC_END(memcpy_orig)
+        movq %r8, 0*8(%rdi)
+        movq %r9, -1*8(%rdi, %rdx)
 
+        jmp .Lexit_with_restore
+
+.Lless_8bytes:
+        cmpq $4, %rdx
+        jb .Lless_4bytes
+
+        /* Copy 4-8 bytes */
+        movl (%rsi), %ecx
+        movl -4(%rsi, %rdx), %r8d
+
+        movl %ecx, (%rdi)
+        movl %r8d, -4(%rdi, %rdx)
+
+        jmp .Lexit_with_restore
+
+.Lless_4bytes:
+        /* Safe copy for 1-3 bytes */
+        cmpq $0, %rdx
+        je .Lexit_with_restore
+
+        /* First byte */
+        movzbl (%rsi), %ecx
+        movb %cl, (%rdi)
+
+        cmpq $1, %rdx
+        je .Lexit_with_restore
+
+        /* Second byte */
+        movzbl 1(%rsi), %ecx
+        movb %cl, 1(%rdi)
+
+        cmpq $2, %rdx
+        je .Lexit_with_restore
+
+        /* Third byte */
+        movzbl 2(%rsi), %ecx
+        movb %cl, 2(%rdi)
+
+.Lexit_with_restore:
+        /* Restore preserved registers */
+        popq %r15
+        popq %r14
+        popq %r13
+        popq %r12
+        RET
+SYM_FUNC_END(memcpy_orig)

--- a/arch/x86/lib/copy_user_64.S	2025-03-14 20:54:19.889090942 +0100
+++ b/arch/x86/lib/copy_user_64.S	2025-03-14 20:54:43.574754215 +0100
@@ -2,6 +2,7 @@
 /*
  * Copyright 2008 Vitaly Mayatskikh <vmayatsk@redhat.com>
  * Copyright 2002 Andi Kleen, SuSE Labs.
+ * Optimized for Intel Raptor Lake by Claude, 2025
  *
  * Functions to copy from and to user space.
  */
@@ -15,6 +16,7 @@
 /*
  * rep_movs_alternative - memory copy with exception handling.
  * This version is for CPUs that don't have FSRM (Fast Short Rep Movs)
+ * Optimized for Intel Raptor Lake CPUs.
  *
  * Input:
  * rdi destination
@@ -23,87 +25,167 @@
  *
  * Output:
  * rcx uncopied bytes or 0 if successful.
- *
- * NOTE! The calling convention is very intentionally the same as
- * for 'rep movs', so that we can rewrite the function call with
- * just a plain 'rep movs' on machines that have FSRM.  But to make
- * it simpler for us, we can clobber rsi/rdi and rax freely.
  */
 SYM_FUNC_START(rep_movs_alternative)
-	cmpq $64,%rcx
-	jae .Llarge
-
-	cmp $8,%ecx
-	jae .Lword
-
-	testl %ecx,%ecx
-	je .Lexit
+        /* Check for zero length */
+        testq %rcx,%rcx
+        jz .Lexit
+
+        /* Classify transfer size */
+        cmpq $128,%rcx
+        jae .Llarge
+        cmpq $32,%rcx
+        jae .Lmedium
+        cmpq $8,%rcx
+        jae .Lword
 
+        /* 1-7 bytes: byte-by-byte copy */
 .Lcopy_user_tail:
-0:	movb (%rsi),%al
-1:	movb %al,(%rdi)
-	inc %rdi
-	inc %rsi
-	dec %rcx
-	jne .Lcopy_user_tail
+0:      movb (%rsi),%al
+1:      movb %al,(%rdi)
+        inc %rdi
+        inc %rsi
+        dec %rcx
+        jnz .Lcopy_user_tail
 .Lexit:
-	RET
+        RET
 
-	_ASM_EXTABLE_UA( 0b, .Lexit)
-	_ASM_EXTABLE_UA( 1b, .Lexit)
+        _ASM_EXTABLE_UA( 0b, .Lexit)
+        _ASM_EXTABLE_UA( 1b, .Lexit)
 
-	.p2align 4
+        /* 8-31 bytes: word-sized copy */
+        .p2align 4
 .Lword:
-2:	movq (%rsi),%rax
-3:	movq %rax,(%rdi)
-	addq $8,%rsi
-	addq $8,%rdi
-	sub $8,%ecx
-	je .Lexit
-	cmp $8,%ecx
-	jae .Lword
-	jmp .Lcopy_user_tail
-
-	_ASM_EXTABLE_UA( 2b, .Lcopy_user_tail)
-	_ASM_EXTABLE_UA( 3b, .Lcopy_user_tail)
+2:      movq (%rsi),%rax
+3:      movq %rax,(%rdi)
+        addq $8,%rsi
+        addq $8,%rdi
+        subq $8,%rcx
+        jz .Lexit            /* Exactly 8 bytes copied */
+        cmpq $8,%rcx         /* 8 or more bytes left? */
+        jae .Lword           /* Yes, continue with words */
+        jmp .Lcopy_user_tail /* Handle 1-7 remaining bytes */
+
+        _ASM_EXTABLE_UA( 2b, .Lcopy_user_tail)
+        _ASM_EXTABLE_UA( 3b, .Lcopy_user_tail)
+
+        /* 32-127 bytes: simpler two-phase approach for medium transfers */
+        .p2align 4
+.Lmedium:
+        /* Handle first 32 bytes in a single go */
+4:      movq 0*8(%rsi),%rax
+5:      movq 1*8(%rsi),%rdx
+6:      movq 2*8(%rsi),%r8
+7:      movq 3*8(%rsi),%r9
+
+8:      movq %rax,0*8(%rdi)
+9:      movq %rdx,1*8(%rdi)
+10:     movq %r8,2*8(%rdi)
+11:     movq %r9,3*8(%rdi)
+
+        /* Update pointers and count */
+        addq $32,%rsi
+        addq $32,%rdi
+        subq $32,%rcx        /* Adjust for first 32 bytes */
+
+        /* Handle remaining bytes */
+        cmpq $32,%rcx        /* 32 or more bytes left? */
+        jae .Lmedium         /* Yes, process another 32-byte chunk */
+        cmpq $8,%rcx         /* 8 or more bytes left? */
+        jae .Lword           /* Yes, switch to word-based copy */
+        testq %rcx,%rcx      /* Any bytes left? */
+        jnz .Lcopy_user_tail /* Yes, handle remaining 1-7 bytes */
+        RET                  /* No, we're done */
+
+        /* Exception table for medium path */
+        _ASM_EXTABLE_UA( 4b, .Lmedium_fault)
+        _ASM_EXTABLE_UA( 5b, .Lmedium_fault)
+        _ASM_EXTABLE_UA( 6b, .Lmedium_fault)
+        _ASM_EXTABLE_UA( 7b, .Lmedium_fault)
+        _ASM_EXTABLE_UA( 8b, .Lmedium_fault)
+        _ASM_EXTABLE_UA( 9b, .Lmedium_fault)
+        _ASM_EXTABLE_UA(10b, .Lmedium_fault)
+        _ASM_EXTABLE_UA(11b, .Lmedium_fault)
+
+.Lmedium_fault:
+        /* Simply return current rcx value (remaining bytes) */
+        RET
 
+        /* 128+ bytes: large transfers with alignment and/or rep movsb */
 .Llarge:
-0:	ALTERNATIVE "jmp .Llarge_movsq", "rep movsb", X86_FEATURE_ERMS
-1:	RET
+0:      ALTERNATIVE "jmp .Llarge_movsq", "rep movsb", X86_FEATURE_ERMS
+1:      RET
 
-	_ASM_EXTABLE_UA( 0b, 1b)
+        _ASM_EXTABLE_UA( 0b, 1b)
 
 .Llarge_movsq:
-	/* Do the first possibly unaligned word */
-0:	movq (%rsi),%rax
-1:	movq %rax,(%rdi)
-
-	_ASM_EXTABLE_UA( 0b, .Lcopy_user_tail)
-	_ASM_EXTABLE_UA( 1b, .Lcopy_user_tail)
-
-	/* What would be the offset to the aligned destination? */
-	leaq 8(%rdi),%rax
-	andq $-8,%rax
-	subq %rdi,%rax
-
-	/* .. and update pointers and count to match */
-	addq %rax,%rdi
-	addq %rax,%rsi
-	subq %rax,%rcx
-
-	/* make %rcx contain the number of words, %rax the remainder */
-	movq %rcx,%rax
-	shrq $3,%rcx
-	andl $7,%eax
-0:	rep movsq
-	movl %eax,%ecx
-	testl %ecx,%ecx
-	jne .Lcopy_user_tail
-	RET
+        /* Save original count */
+        movq %rcx,%r10
 
-1:	leaq (%rax,%rcx,8),%rcx
-	jmp .Lcopy_user_tail
+        /* Optional alignment to 64-byte boundary (cache line) */
+        movq %rdi,%rax
+        andl $7,%eax         /* Check 8-byte alignment first */
+        jz .Lmovsq_aligned
+
+        /* Handle up to 7 bytes for quadword alignment */
+        movl $8,%r8d
+        subl %eax,%r8d       /* r8d = bytes to 8-byte alignment */
+        movq %r8,%rcx
+
+12:     rep movsb
+
+        /* Update remaining bytes */
+        subq %r8,%r10
+        movq %r10,%rcx
+        testq %rcx,%rcx
+        jz .Lexit
+
+.Lmovsq_aligned:
+        /* Prefetch for large transfers (128+ bytes away) */
+13:     prefetcht0 128(%rsi)
+
+        /* Calculate number of 8-byte chunks and remainder */
+        movq %rcx,%rax       /* Save original count */
+        shrq $3,%rcx         /* rcx = number of 8-byte chunks */
+        andl $7,%eax         /* eax = remainder bytes */
+
+        testq %rcx,%rcx
+        jz .Lmovsq_tail
+
+        /* Copy 8-byte aligned chunks */
+14:     rep movsq
+
+.Lmovsq_tail:
+        /* Handle remainder bytes (0-7) */
+        movl %eax,%ecx
+        testl %ecx,%ecx
+        jz .Lexit
+
+15:     rep movsb
+        xorl %ecx,%ecx       /* Set rcx to 0 (success) */
+        RET
+
+        /* Exception handling for large transfers */
+16:     /* Calculate remaining bytes for movsq fault */
+        leaq (%rax,%rcx,8),%rcx
+        jmp .Lcopy_user_tail
+
+        _ASM_EXTABLE_UA(12b, .Llarge_fault_align)
+        _ASM_EXTABLE_UA(13b, .Lmovsq_fault_prefetch)
+        _ASM_EXTABLE_UA(14b, 16b)
+        _ASM_EXTABLE_UA(15b, .Lexit)
+
+.Llarge_fault_align:
+        /* On fault during alignment - return remaining */
+        movq %r10,%rcx
+        addq %r8,%rcx        /* Add alignment bytes */
+        subq %rax,%rcx       /* Subtract processed bytes */
+        RET
+
+.Lmovsq_fault_prefetch:
+        /* On fault during prefetch - whole count remains */
+        movq %r10,%rcx
+        RET
 
-	_ASM_EXTABLE_UA( 0b, 1b)
 SYM_FUNC_END(rep_movs_alternative)
 EXPORT_SYMBOL(rep_movs_alternative)


--- a/arch/x86/lib/memset_64.S	2025-03-13 13:08:08.000000000 +0100
+++ b/arch/x86/lib/memset_64.S	2025-03-14 21:12:30.472007594 +0100
@@ -1,117 +1,326 @@
 /* SPDX-License-Identifier: GPL-2.0 */
 /* Copyright 2002 Andi Kleen, SuSE Labs */
+/* Optimized for Intel Raptor Lake by Genius, 2025 - Max Performance */
 
 #include <linux/export.h>
 #include <linux/linkage.h>
 #include <asm/cpufeatures.h>
-#include <asm/alternative.h>
+#include <asm/alternative.h> // Provides ALTERNATIVE*, _ASM_EXTABLE
 
 .section .noinstr.text, "ax"
 
+
+/* --- Fault Handlers (Defined before use) --- */
+
+SYM_FUNC_START_LOCAL(.Lfsrs_fault_handler)
+	/* DF is already clear */
+	movq %r9, %rax /* Restore original %rdi from FSRS path save (%r9) */
+	RET
+SYM_FUNC_END(.Lfsrs_fault_handler)
+
+SYM_FUNC_START_LOCAL(.L_hybrid_fault_handler)
+	/* Clean up AVX state */
+	ALTERNATIVE "nop", "vzeroupper", X86_FEATURE_AVX2
+	/* DF is already clear */
+	movq %r10, %rax /* Restore original %rdi from hybrid path save (%r10) */
+	RET
+SYM_FUNC_END(.L_hybrid_fault_handler)
+
+SYM_FUNC_START_LOCAL(.Lgeneric_loop_fault_handler)
+	/* DF is already clear */
+	movq %r9, %rax     /* Restore original destination from %r9 */
+	RET
+SYM_FUNC_END(.Lgeneric_loop_fault_handler)
+
+
+/* --- Main memset Entry Point --- */
+
 /*
- * ISO C memset - set a memory block to a byte value. This function uses fast
- * string to get better performance than the original function. The code is
- * simpler and shorter than the original function as well.
- *
- * rdi   destination
- * rsi   value (char)
- * rdx   count (bytes)
- *
- * rax   original destination
- *
- * The FSRS alternative should be done inline (avoiding the call and
- * the disgusting return handling), but that would require some help
- * from the compiler for better calling conventions.
- *
- * The 'rep stosb' itself is small enough to replace the call, but all
- * the register moves blow up the code. And two of them are "needed"
- * only for the return value that is the same as the source input,
- * which the compiler could/should do much better anyway.
+ * ISO C memset - set a memory block to a byte value.
+ * Maximum performance variant for Raptor Lake. PRIORITIZES SPEED.
+ * Accepts objtool fallthrough warning for __memset as benign byproduct
+ * of inline FSRS path structure.
  */
 SYM_FUNC_START(__memset)
-	ALTERNATIVE "jmp memset_orig", "", X86_FEATURE_FSRS
+	/* Store original destination for return value */
+	movq %rdi, %r9
 
-	movq %rdi,%r9
-	movb %sil,%al
-	movq %rdx,%rcx
-	rep stosb
-	movq %r9,%rax
-	RET
-SYM_FUNC_END(__memset)
+	/* DF flag is guaranteed clear (0) by x86-64 ABI */
+
+	/* Check for zero-length case first, jump directly to return */
+	testq %rdx, %rdx
+	jz .L_memset_ret
+
+	/* Choose the execution path based on FSRS feature using standard ALTERNATIVE */
+	/* If FSRS absent (old): jump to hybrid path */
+	/* If FSRS present (new): execute nop, fall through to inline FSRS path */
+	ALTERNATIVE "jmp .L_hybrid_path", "nop", X86_FEATURE_FSRS
+
+/* --- Inline FSRS Path (Fastest) --- */
+/* Execution falls through here only if FSRS feature is present */
+	movb %sil, %al
+	movq %rdx, %rcx
+1:	rep stosb	/* Requires DF=0 (guaranteed by ABI) */
+
+	/* Performance: Implicit fallthrough to return sequence. Saves a jmp. */
+	/* This structure triggers the objtool fallthrough warning, accepted here. */
+
+.L_memset_ret: /* Common return point *inside* __memset */
+	movq %r9, %rax /* Return original destination */
+	ret
+
+	/* Exception table for the inline FSRS path */
+	_ASM_EXTABLE(1b, .Lfsrs_fault_handler)
+
+SYM_FUNC_END(__memset) /* End of the main __memset function block */
 EXPORT_SYMBOL(__memset)
 
 SYM_FUNC_ALIAS_MEMFUNC(memset, __memset)
 EXPORT_SYMBOL(memset)
 
-SYM_FUNC_START_LOCAL(memset_orig)
-	movq %rdi,%r10
 
-	/* expand byte value  */
-	movzbl %sil,%ecx
-	movabs $0x0101010101010101,%rax
-	imulq  %rcx,%rax
-
-	/* align dst */
-	movl  %edi,%r9d
-	andl  $7,%r9d
-	jnz  .Lbad_alignment
-.Lafter_bad_alignment:
-
-	movq  %rdx,%rcx
-	shrq  $6,%rcx
-	jz	 .Lhandle_tail
+/* --- Hybrid Path (No FSRS/ERMSB) --- */
 
-	.p2align 4
-.Lloop_64:
-	decq  %rcx
-	movq  %rax,(%rdi)
-	movq  %rax,8(%rdi)
-	movq  %rax,16(%rdi)
-	movq  %rax,24(%rdi)
-	movq  %rax,32(%rdi)
-	movq  %rax,40(%rdi)
-	movq  %rax,48(%rdi)
-	movq  %rax,56(%rdi)
-	leaq  64(%rdi),%rdi
-	jnz    .Lloop_64
+/* P/E-core hybrid aware path (Used ONLY when FSRS/ERMSB is NOT available) */
+/* This code is only reached via the ALTERNATIVE jump above */
+SYM_FUNC_START_LOCAL(.L_hybrid_path)
+	/* Store original destination for return value (use %r10 for this path) */
+	movq %rdi, %r10 /* Note: %rdi still holds original destination here */
+
+	/* Handle small blocks (< 64 bytes) separately */
+	cmpq $64, %rdx
+	jb .L_small_scalar_path
+
+	/* For blocks >= 64 bytes, use AVX2 if available, otherwise generic loop */
+	ALTERNATIVE "jmp .L_no_avx2_fallback", "", X86_FEATURE_AVX2
+
+/* --- AVX2 Path (>= 64 Bytes) --- */
+.L_use_avx2_path:
+	/* Broadcast byte value to YMM register */
+	movzbl %sil, %eax
+	vmovd %eax, %xmm0
+	vpbroadcastb %xmm0, %ymm0
+
+	/* Align destination to 32-byte boundary */
+	movl %edi, %ecx
+	andl $31, %ecx
+	jz .L_avx2_aligned
+
+	/* Calculate bytes to align */
+	movl $32, %r8d
+	subl %ecx, %r8d
+
+	/* Ensure alignment doesn't exceed total size */
+	movq %r8, %rcx
+	cmpq %rdx, %rcx
+	jbe 3f
+	movq %rdx, %rcx
+3:	/* Align with rep stosb */
+	movb %sil, %al
+	subq %rcx, %rdx
+	rep stosb
+
+.L_avx2_aligned:
+	/* Process 64-byte chunks */
+	movq %rdx, %rcx
+	shrq $6, %rcx
+	jz .L_avx2_remainder
+.L_avx2_loop:
+4:	vmovdqa %ymm0, (%rdi)
+5:	vmovdqa %ymm0, 32(%rdi)
+	addq $64, %rdi
+	decq %rcx
+	jnz .L_avx2_loop
+	andq $63, %rdx /* Calculate remainder bytes */
+.L_avx2_remainder:
+	testq %rdx, %rdx
+	jz .L_avx2_done
+
+	/* Process 32-byte chunk if applicable */
+	cmpq $32, %rdx
+	jb .L_avx2_small_remainder
+6:	vmovdqa %ymm0, (%rdi)
+	addq $32, %rdi
+	subq $32, %rdx
+.L_avx2_small_remainder:
+	/* Process remaining bytes (< 32) with rep stosb */
+	testq %rdx, %rdx
+	jz .L_avx2_done
+	movq %rdx, %rcx
+	movb %sil, %al
+11:	rep stosb
+.L_avx2_done:
+	vzeroupper /* Crucial AVX cleanup */
+	movq %r10, %rax /* Return original destination from hybrid path */
+	RET
+	/* Exception tables for AVX path */
+	_ASM_EXTABLE(3b, .L_hybrid_fault_handler)
+	_ASM_EXTABLE(4b, .L_hybrid_fault_handler)
+	_ASM_EXTABLE(5b, .L_hybrid_fault_handler)
+	_ASM_EXTABLE(6b, .L_hybrid_fault_handler)
+	_ASM_EXTABLE(11b, .L_hybrid_fault_handler)
+/* End of AVX2 Path */
+
+
+/* --- Fallback if NO AVX2 for >= 64 Bytes --- */
+.L_no_avx2_fallback:
+	movq %r10, %r9 /* Prepare %r9 for generic loop */
+	jmp __memset_generic_loop /* Tail call to generic scalar loop */
+
+
+/* --- Small Scalar Path (< 64 Bytes) --- */
+.L_small_scalar_path:
+	movzbl %sil, %ecx
+	movabs $0x0101010101010101, %rax
+	imulq %rcx, %rax
+	/* Handle small sizes (<64 bytes) with optimized code */
+	cmpq $8, %rdx
+	jb .L_small_lt8
+	/* Handle 8+ bytes - start with 8-byte chunks */
+	movq %rdx, %rcx
+	shrq $3, %rcx
+	jz .L_small_remainder
+.L_small_loop:
+7:	movq %rax, (%rdi)
+	addq $8, %rdi
+	decq %rcx
+	jnz .L_small_loop
+	andq $7, %rdx /* Calculate remaining bytes (0-7) */
+.L_small_remainder:
+	jz .L_small_done
+.L_small_lt8:
+	/* Handle 4-byte chunk if applicable */
+	cmpq $4, %rdx
+	jb .L_small_lt4
+8:	movl %eax, (%rdi)
+	addq $4, %rdi
+	subq $4, %rdx
+.L_small_lt4:
+	/* Handle 2-byte chunk if applicable */
+	cmpq $2, %rdx
+	jb .L_small_lt2
+9:	movw %ax, (%rdi)
+	addq $2, %rdi
+	subq $2, %rdx
+.L_small_lt2:
+	/* Handle last byte if applicable */
+	testq %rdx, %rdx
+	jz .L_small_done
+10:	movb %al, (%rdi)
+.L_small_done:
+	movq %r10, %rax /* Return original destination from hybrid path */
+	RET
+	/* Exception tables for scalar path */
+	_ASM_EXTABLE(7b, .L_hybrid_fault_handler)
+	_ASM_EXTABLE(8b, .L_hybrid_fault_handler)
+	_ASM_EXTABLE(9b, .L_hybrid_fault_handler)
+	_ASM_EXTABLE(10b, .L_hybrid_fault_handler)
+/* End of Small Scalar Path */
+
+SYM_FUNC_END(.L_hybrid_path)
+
+
+/* --- Generic Fallback Loop (No ERMSB/AVX, Large Size) --- */
+SYM_FUNC_START_LOCAL(__memset_generic_loop)
+	/* %r9 should already hold original %rdi */
+	/* DF is guaranteed clear (0) by ABI */
+
+	/* Expand byte value */
+	movzbl %sil, %ecx
+	movabs $0x0101010101010101, %rax
+	imulq %rcx, %rax
+
+	/* Handle alignment and main loop (assumes size >= 64 initially) */
+	/* Small check needed in case alignment reduces size drastically */
+	cmpq $64, %rdx
+	jbe .Lsmall_generic
+
+	/* Align destination to 64-byte cache line boundary */
+	movl %edi, %ecx
+	andl $63, %ecx
+	jz .Lafter_bad_alignment_generic
+
+	/* Calculate bytes to 64-byte alignment */
+	movl $64, %r8d
+	subl %ecx, %r8d
+
+	/* Ensure alignment doesn't exceed total size */
+	movq %r8, %rcx
+	cmpq %rdx, %rcx
+	jbe 16f
+	movq %rdx, %rcx
+16:	/* Align with rep stosb */
+	subq %rcx, %rdx
+	movb %sil, %al /* Set %al */
+	rep stosb
+
+	/* Check if we have bytes left to set (size could become < 64 after align) */
+	testq %rdx, %rdx
+	jz .Lende_generic
+	cmpq $64, %rdx
+	jbe .Lsmall_generic
+
+	/* Restore rax with the expanded value for movq loop */
+	movabs $0x0101010101010101, %rax
+	movzbl %sil, %ecx
+	imulq %rcx, %rax
+
+.Lafter_bad_alignment_generic:
+	/* Check if we have enough memory for prefetching */
+	cmpq $256, %rdx
+	jb .Lno_prefetch_generic
+
+	/* Add prefetching for large blocks */
+17:	prefetchw 384(%rdi)
+18:	prefetchw 512(%rdi)
+
+.Lno_prefetch_generic:
+	/* Process 64-byte chunks - cache line sized */
+	movq %rdx, %rcx
+	shrq $6, %rcx
+	jz .Lhandle_tail_generic
 
-	/* Handle tail in loops. The loops should be faster than hard
-	   to predict jump tables. */
-	.p2align 4
-.Lhandle_tail:
-	movl	%edx,%ecx
-	andl    $63&(~7),%ecx
-	jz 		.Lhandle_7
-	shrl	$3,%ecx
-	.p2align 4
-.Lloop_8:
-	decl   %ecx
-	movq  %rax,(%rdi)
-	leaq  8(%rdi),%rdi
-	jnz    .Lloop_8
-
-.Lhandle_7:
-	andl	$7,%edx
-	jz      .Lende
 	.p2align 4
-.Lloop_1:
-	decl    %edx
-	movb 	%al,(%rdi)
-	leaq	1(%rdi),%rdi
-	jnz     .Lloop_1
-
-.Lende:
-	movq	%r10,%rax
-	RET
-
-.Lbad_alignment:
-	cmpq $7,%rdx
-	jbe	.Lhandle_7
-	movq %rax,(%rdi)	/* unaligned store */
-	movq $8,%r8
-	subq %r9,%r8
-	addq %r8,%rdi
-	subq %r8,%rdx
-	jmp .Lafter_bad_alignment
-.Lfinal:
-SYM_FUNC_END(memset_orig)
+.Lloop_64_generic:
+19:	movq %rax, 0*8(%rdi)
+20:	movq %rax, 1*8(%rdi)
+21:	movq %rax, 2*8(%rdi)
+22:	movq %rax, 3*8(%rdi)
+23:	movq %rax, 4*8(%rdi)
+24:	movq %rax, 5*8(%rdi)
+25:	movq %rax, 6*8(%rdi)
+26:	movq %rax, 7*8(%rdi)
+	addq $64, %rdi
+	decq %rcx
+	jnz .Lloop_64_generic
+
+	/* Calculate remaining bytes */
+	andq $63, %rdx
+
+.Lhandle_tail_generic:
+.Lsmall_generic:
+	/* Handle remaining bytes (< 64) with rep stosb */
+	testq %rdx, %rdx
+	jz .Lende_generic
+	movq %rdx, %rcx
+	movb %sil, %al /* Set %al */
+27:	rep stosb
+
+.Lende_generic:
+	movq %r9, %rax /* Return original destination from generic path */
+	RET
+
+	/* Exception tables for generic loop path */
+	_ASM_EXTABLE(16b, .Lgeneric_loop_fault_handler)
+	_ASM_EXTABLE(17b, .Lgeneric_loop_fault_handler)
+	_ASM_EXTABLE(18b, .Lgeneric_loop_fault_handler)
+	_ASM_EXTABLE(19b, .Lgeneric_loop_fault_handler)
+	_ASM_EXTABLE(20b, .Lgeneric_loop_fault_handler)
+	_ASM_EXTABLE(21b, .Lgeneric_loop_fault_handler)
+	_ASM_EXTABLE(22b, .Lgeneric_loop_fault_handler)
+	_ASM_EXTABLE(23b, .Lgeneric_loop_fault_handler)
+	_ASM_EXTABLE(24b, .Lgeneric_loop_fault_handler)
+	_ASM_EXTABLE(25b, .Lgeneric_loop_fault_handler)
+	_ASM_EXTABLE(26b, .Lgeneric_loop_fault_handler)
+	_ASM_EXTABLE(27b, .Lgeneric_loop_fault_handler)
+SYM_FUNC_END(__memset_generic_loop)

--- a/arch/x86/lib/getuser.S	2025-04-10 14:44:49.000000000 +0200
+++ b/arch/x86/lib/getuser.S	2025-04-12 12:26:59.296983370 +0200
@@ -10,6 +10,8 @@
  * to make them more efficient, especially as they
  * return an error value in addition to the "real"
  * return value.
+ *
+ * Optimized for Intel Raptor Lake processors.
  */
 
 /*
@@ -20,7 +22,7 @@
  * Outputs:	%[r|e]ax is error code (0 or -EFAULT)
  *		%[r|e]dx contains zero-extended value
  *		%ecx contains the high half for 32-bit __get_user_8
- *
+ *              For 64-bit __get_user_16: %rdx = low 64 bits, %rcx = high 64 bits.
  *
  * These functions should not modify any other registers,
  * as they get called from within inline assembly.
@@ -35,132 +37,288 @@
 #include <asm/asm.h>
 #include <asm/smap.h>
 
+/* Original speculative execution barrier */
 #define ASM_BARRIER_NOSPEC ALTERNATIVE "", "lfence", X86_FEATURE_LFENCE_RDTSC
 
+/*
+ * Improved range check using conditional move (better for Raptor Lake)
+ * Uses branchless design to avoid misprediction penalties
+ */
 .macro check_range size:req
 .if IS_ENABLED(CONFIG_X86_64)
-	movq $0x0123456789abcdef,%rdx
+	movq $0x0123456789abcdef,%rdx /* Sentinel for USER_PTR_MAX comparison */
   1:
+  /*
+   * This creates a PC-relative reference to USER_PTR_MAX.
+   * The runtime_ptr_patch() will replace the .long with the actual
+   * PC-relative offset to USER_PTR_MAX.
+   * At runtime, before the cmp, %rdx will be loaded with USER_PTR_MAX.
+   * movabs $USER_PTR_MAX, %rdx would be simpler but is a 10-byte instruction.
+   * This sequence is more compact for frequent use.
+   */
   .pushsection runtime_ptr_USER_PTR_MAX,"a"
-	.long 1b - 8 - .
+	.long 1b - 8 - . /* Placeholder for PC-relative offset, 8 bytes before the cmp */
   .popsection
-	cmp %rdx, %rax
-	cmova %rdx, %rax
-.else
-	cmp $TASK_SIZE_MAX-\size+1, %eax
-	jae .Lbad_get_user
-	sbb %edx, %edx		/* array_index_mask_nospec() */
+	cmp %rdx, %rax   /* Compare user address (%rax) with USER_PTR_MAX */
+	cmova %rdx, %rax /* If %rax > USER_PTR_MAX, %rax becomes USER_PTR_MAX (will fault) */
+.else /* !CONFIG_X86_64 */
+	cmp $TASK_SIZE_MAX-\size+1, %eax /* Check if addr + size - 1 is within bounds */
+	jae .Lbad_get_user               /* If out of bounds, jump to error */
+	/*
+	 * array_index_mask_nospec(): If the previous check passed (carry clear),
+	 * sbb %edx, %edx results in %edx = 0.
+	 * If it failed (carry set, though 'jae' means we shouldn't hit this path often here),
+	 * sbb %edx, %edx results in %edx = -1 (all bits set).
+	 * This is a speculative execution hardening technique. Since 'jae' handles
+	 * the out-of-bounds case directly, this sbb/and sequence here will always
+	 * result in %eax remaining unchanged if the bounds check passed.
+	 */
+	sbb %edx, %edx
 	and %edx, %eax
 .endif
 .endm
 
+/*
+ * Enhanced UACCESS macro with proper exception handling
+ * Ensures consistent behavior across all access sizes
+ */
 .macro UACCESS op src dst
 1:	\op \src,\dst
+	/*
+	 * _ASM_EXTABLE_UA informs the kernel that the instruction at label 1b
+	 * can fault due to user access, and if it does, execution should
+	 * jump to __get_user_handle_exception.
+	 */
 	_ASM_EXTABLE_UA(1b, __get_user_handle_exception)
 .endm
 
+/*
+ * Cache-optimized layout: Group related functions in 64-byte cache lines
+ * where possible, with 32-byte alignment for individual functions
+ */
 
 	.text
+	/*
+	 * Cache line #1: 1-byte and 2-byte accessors
+	 * Aligned to 64-byte boundary for optimal cache usage
+	 */
+	.p2align 6 /* Align to 2^6 = 64 bytes */
 SYM_FUNC_START(__get_user_1)
 	check_range size=1
+	ASM_STAC /* Set AC flag for user access (SMAP protection) */
+	UACCESS movzbl (%_ASM_AX),%edx /* Zero-extend byte from user addr in %rax to %edx */
+	xor %eax,%eax /* Success: %rax = 0 */
+	ASM_CLAC /* Clear AC flag */
+	RET
+SYM_FUNC_END(__get_user_1)
+EXPORT_SYMBOL(__get_user_1)
+
+	.p2align 5 /* Align to 2^5 = 32 bytes */
+SYM_FUNC_START(__get_user_nocheck_1)
 	ASM_STAC
+	ASM_BARRIER_NOSPEC /* Mitigate speculative execution issues */
 	UACCESS movzbl (%_ASM_AX),%edx
 	xor %eax,%eax
 	ASM_CLAC
 	RET
-SYM_FUNC_END(__get_user_1)
-EXPORT_SYMBOL(__get_user_1)
+SYM_FUNC_END(__get_user_nocheck_1)
+EXPORT_SYMBOL(__get_user_nocheck_1)
 
+	/*
+	 * Cache line #2: 2-byte accessors
+	 * Aligned to 64-byte boundary for optimal cache usage
+	 */
+	.p2align 6
 SYM_FUNC_START(__get_user_2)
 	check_range size=2
 	ASM_STAC
-	UACCESS movzwl (%_ASM_AX),%edx
+	UACCESS movzwl (%_ASM_AX),%edx /* Zero-extend word */
 	xor %eax,%eax
 	ASM_CLAC
 	RET
 SYM_FUNC_END(__get_user_2)
 EXPORT_SYMBOL(__get_user_2)
 
+	.p2align 5
+SYM_FUNC_START(__get_user_nocheck_2)
+	ASM_STAC
+	ASM_BARRIER_NOSPEC
+	UACCESS movzwl (%_ASM_AX),%edx
+	xor %eax,%eax
+	ASM_CLAC
+	RET
+SYM_FUNC_END(__get_user_nocheck_2)
+EXPORT_SYMBOL(__get_user_nocheck_2)
+
+	/*
+	 * Cache line #3: 4-byte accessors
+	 * Aligned to 64-byte boundary for optimal cache usage
+	 */
+	.p2align 6
 SYM_FUNC_START(__get_user_4)
 	check_range size=4
 	ASM_STAC
-	UACCESS movl (%_ASM_AX),%edx
+	UACCESS movl (%_ASM_AX),%edx /* Load dword */
 	xor %eax,%eax
 	ASM_CLAC
 	RET
 SYM_FUNC_END(__get_user_4)
 EXPORT_SYMBOL(__get_user_4)
 
+	.p2align 5
+SYM_FUNC_START(__get_user_nocheck_4)
+	ASM_STAC
+	ASM_BARRIER_NOSPEC
+	UACCESS movl (%_ASM_AX),%edx
+	xor %eax,%eax
+	ASM_CLAC
+	RET
+SYM_FUNC_END(__get_user_nocheck_4)
+EXPORT_SYMBOL(__get_user_nocheck_4)
+
+	/*
+	 * Cache line #4: 8-byte accessors with optimized paths
+	 * Aligned to 64-byte boundary for optimal cache usage
+	 */
+	.p2align 6
 SYM_FUNC_START(__get_user_8)
 #ifndef CONFIG_X86_64
-	xor %ecx,%ecx
+	/* For 32-bit, output is %edx (low 32 bits) and %ecx (high 32 bits) */
+	xor %ecx,%ecx /* Clear high part initially */
 #endif
 	check_range size=8
 	ASM_STAC
 #ifdef CONFIG_X86_64
-	UACCESS movq (%_ASM_AX),%rdx
+	UACCESS movq (%_ASM_AX),%rdx /* Load qword */
 #else
-	UACCESS movl (%_ASM_AX),%edx
-	UACCESS movl 4(%_ASM_AX),%ecx
+	/* Enhanced 32-bit 8-byte read with alignment optimization */
+	test $3, %eax /* Check if address in %eax is 4-byte aligned */
+	jnz 1f        /* If not aligned, jump to unaligned/split read */
+	/* Try aligned 8-byte read using MMX if CPU supports it. */
+	/* ALTERNATIVE will patch this to the MMX sequence at boot if X86_FEATURE_MMX. */
+	/* If no MMX, it executes the first (empty) part and falls through to 1f. */
+	ALTERNATIVE "", "2:\n\tmovq (%_ASM_AX), %mm0\n\tmovd %mm0, %edx\n\tpsrlq $32, %mm0\n\tmovd %mm0, %ecx\n\temms\n\t_ASM_EXTABLE_UA(2b,__get_user_handle_exception)", X86_FEATURE_MMX
+	jmp 3f /* If MMX path taken and successful, skip to end */
+1:
+	/* Fallback to standard two 32-bit reads, prefetch if available. */
+	/* This prefetch is a hint and might not always be beneficial for short reads. */
+	ALTERNATIVE "", "prefetcht0 4(%_ASM_AX)", X86_FEATURE_PREFETCHW
+	UACCESS movl (%_ASM_AX),%edx /* Load low 32 bits */
+	UACCESS movl 4(%_ASM_AX),%ecx /* Load high 32 bits */
+3:  /* Target for successful MMX path or fall-through from unaligned path */
 #endif
-	xor %eax,%eax
+	xor %eax,%eax /* Success: %rax = 0 */
 	ASM_CLAC
 	RET
 SYM_FUNC_END(__get_user_8)
 EXPORT_SYMBOL(__get_user_8)
 
-/* .. and the same for __get_user, just without the range checks */
-SYM_FUNC_START(__get_user_nocheck_1)
+	.p2align 5
+SYM_FUNC_START(__get_user_nocheck_8)
 	ASM_STAC
 	ASM_BARRIER_NOSPEC
-	UACCESS movzbl (%_ASM_AX),%edx
+#ifdef CONFIG_X86_64
+	UACCESS movq (%_ASM_AX),%rdx
+#else
+	/* Enhanced 32-bit 8-byte read with alignment optimization */
+	xor %ecx,%ecx /* Clear high part initially */
+	test $3, %eax /* Check alignment */
+	jnz 1f        /* If not aligned, jump */
+	ALTERNATIVE "", "2:\n\tmovq (%_ASM_AX), %mm0\n\tmovd %mm0, %edx\n\tpsrlq $32, %mm0\n\tmovd %mm0, %ecx\n\temms\n\t_ASM_EXTABLE_UA(2b,__get_user_handle_exception)", X86_FEATURE_MMX
+	jmp 3f
+1:
+	ALTERNATIVE "", "prefetcht0 4(%_ASM_AX)", X86_FEATURE_PREFETCHW
+	UACCESS movl (%_ASM_AX),%edx
+	UACCESS movl 4(%_ASM_AX),%ecx
+3:
+#endif
 	xor %eax,%eax
 	ASM_CLAC
 	RET
-SYM_FUNC_END(__get_user_nocheck_1)
-EXPORT_SYMBOL(__get_user_nocheck_1)
+SYM_FUNC_END(__get_user_nocheck_8)
+EXPORT_SYMBOL(__get_user_nocheck_8)
 
-SYM_FUNC_START(__get_user_nocheck_2)
+/*
+ * For 16-byte access, using two 8-byte GPR loads is safe, simple,
+ * and avoids FPU/AVX state management complexities in this low-level path.
+ * The potential performance gain of a single 16-byte AVX load is likely
+ * offset by FPU management overhead for such a small operation.
+ */
+#ifdef CONFIG_X86_64
+	.p2align 6
+SYM_FUNC_START(__get_user_16)
+	/* %rax = user address, outputs: %rax = 0 or -EFAULT, %rdx = low64, %rcx = high64 */
+	check_range size=16
 	ASM_STAC
 	ASM_BARRIER_NOSPEC
-	UACCESS movzwl (%_ASM_AX),%edx
-	xor %eax,%eax
+	/* GPR-only path for 16-byte read: */
+1:	movq (%_ASM_AX),%rdx  /* Load low 64 bits */
+2:	movq 8(%_ASM_AX),%rcx /* Load high 64 bits */
+	/* Exception table entries point to a specific handler for 16-byte faults */
+	_ASM_EXTABLE_UA(1b, __get_user_handle_exception_16)
+	_ASM_EXTABLE_UA(2b, __get_user_handle_exception_16)
+	xor %eax,%eax /* Success: %rax = 0 */
 	ASM_CLAC
 	RET
-SYM_FUNC_END(__get_user_nocheck_2)
-EXPORT_SYMBOL(__get_user_nocheck_2)
+SYM_FUNC_END(__get_user_16)
+EXPORT_SYMBOL(__get_user_16)
 
-SYM_FUNC_START(__get_user_nocheck_4)
+	.p2align 5
+SYM_FUNC_START(__get_user_nocheck_16)
 	ASM_STAC
 	ASM_BARRIER_NOSPEC
-	UACCESS movl (%_ASM_AX),%edx
+	/* GPR-only path for 16-byte read: */
+1:	movq (%_ASM_AX),%rdx
+2:	movq 8(%_ASM_AX),%rcx
+	_ASM_EXTABLE_UA(1b, __get_user_handle_exception_16)
+	_ASM_EXTABLE_UA(2b, __get_user_handle_exception_16)
 	xor %eax,%eax
 	ASM_CLAC
 	RET
-SYM_FUNC_END(__get_user_nocheck_4)
-EXPORT_SYMBOL(__get_user_nocheck_4)
+SYM_FUNC_END(__get_user_nocheck_16)
+EXPORT_SYMBOL(__get_user_nocheck_16)
+#endif
 
-SYM_FUNC_START(__get_user_nocheck_8)
-	ASM_STAC
-	ASM_BARRIER_NOSPEC
-#ifdef CONFIG_X86_64
-	UACCESS movq (%_ASM_AX),%rdx
-#else
+/*
+ * Generic Error handling path
+ * Aligned to 16-byte boundary for efficient execution
+ */
+	.p2align 4 /* Align to 2^4 = 16 bytes */
+SYM_CODE_START_LOCAL(__get_user_handle_exception)
+	ASM_CLAC /* Clear AC flag first thing on fault */
+.Lbad_get_user: /* Common entry point for bad access after range check */
+	xor %edx,%edx /* Zero out low part of data return register */
+#ifndef CONFIG_X86_64
+	/* For 32-bit __get_user_8, also clear %ecx (high part of 64-bit value) */
 	xor %ecx,%ecx
-	UACCESS movl (%_ASM_AX),%edx
-	UACCESS movl 4(%_ASM_AX),%ecx
+	/* No VZEROUPPER on 32-bit as AVX isn't typically used for these get_user sizes */
+#else /* CONFIG_X86_64 */
+	/*
+	 * General FPU cleanup if AVX was used by *any* __get_user variant
+	 * that might have faulted (e.g., a hypothetical future AVX __get_user_8/other).
+	 * This is a safety net. For the current GPR-only _16, it's not strictly needed
+	 * if this handler is *only* jumped to from GPR paths, but harmless.
+	 * It will only execute if X86_FEATURE_AVX is present on the CPU.
+	 */
+	ALTERNATIVE "", "vzeroupper", X86_FEATURE_AVX
 #endif
-	xor %eax,%eax
-	ASM_CLAC
+	mov $(-EFAULT),%_ASM_AX /* Set error code in %rax */
 	RET
-SYM_FUNC_END(__get_user_nocheck_8)
-EXPORT_SYMBOL(__get_user_nocheck_8)
-
+SYM_CODE_END(__get_user_handle_exception)
 
-SYM_CODE_START_LOCAL(__get_user_handle_exception)
+/*
+ * Specific fault handler for 16-byte GPR operations (64-bit only).
+ * Ensures both %rdx and %rcx (the 128-bit value pair) are cleared on fault.
+ * The generic handler doesn't necessarily clear %rcx on 64-bit.
+ */
+#ifdef CONFIG_X86_64
+.p2align 4
+SYM_CODE_START_LOCAL(__get_user_handle_exception_16)
 	ASM_CLAC
-.Lbad_get_user:
-	xor %edx,%edx
+	xor %edx,%edx   /* Zero %rdx (low 64 bits of the 128-bit value) */
+	xor %ecx,%ecx   /* Zero %rcx (high 64 bits of the 128-bit value) */
+	/* No VZEROUPPER needed here as this handler is specifically for GPR paths */
 	mov $(-EFAULT),%_ASM_AX
 	RET
-SYM_CODE_END(__get_user_handle_exception)
+SYM_CODE_END(__get_user_handle_exception_16)
+#endif /* CONFIG_X86_64 */
