pkgname=nodejs
pkgver=23.6.0
pkgrel=3.1
pkgdesc='Evented I/O for V8 javascript'
arch=('x86_64')
url='https://nodejs.org/'
license=('MIT')
options=(!strip)
depends=(
  'brotli'
  'c-ares'
  'icu'
  'libnghttp2'
  'libnghttp3'
  'libngtcp2'
  'libuv'
  'openssl'
  'zlib'
)
makedepends=(
  'git'
  'procps-ng'
  'python'
  'llvm'
  'perf'
)

source=("git+https://github.com/nodejs/node.git#tag=v$pkgver?signed"
        "0001-test-make-test-crypto-hash-compatible-with-OpenSSL-3.patch"
        "0002-test-adjust-OpenSSL-error-code-for-3.4.0.patch"
        "0001-test-disable-openssl-3.4.0-incompatible-tests.patch")
sha512sums=('SKIP')

prepare() {

  export LDFLAGS+=" -Wl,--emit-relocs"

  cd node
  patch -Np1 -i ../0001-test-make-test-crypto-hash-compatible-with-OpenSSL-3.patch
  #patch -Np1 -i ../0002-test-adjust-OpenSSL-error-code-for-3.4.0.patch
  patch -Np1 -i ../0001-test-disable-openssl-3.4.0-incompatible-tests.patch
}

build() {
  cd node

  ./configure \
    --prefix=/usr \
    --with-intl=system-icu \
    --without-npm \
    --shared \
    --shared-openssl \
    --shared-zlib \
    --shared-libuv \
    --experimental-http-parser \
    --shared-nghttp2 \
    --shared-nghttp3 \
    --shared-ngtcp2 \
    --shared-cares \
    --shared-brotli

  make -j$(nproc)

  # Statt make test ein spezifisches Test-Target verwenden
  # das keine Abhängigkeit von der problematischen CRC-Implementierung hat
  perf record --max-size=6G -F 1700 -e cycles:u,cache-misses:u,branch-misses:u -b -o perf.data -- \
    timeout 120 make test-js-native-api || :

  # Fügen Sie Fehlerprüfung hinzu
  if [ ! -f perf.data ]; then
    echo "Perf data collection failed"
    exit 1
  fi

  # Convert perf data to BOLT format
  perf2bolt ./out/Release/node -p perf.data -o node.fdata || exit 1

  # Rest des BOLT-Optimierungsprozesses wie gehabt
  llvm-bolt ./out/Release/node -o ./out/Release/node.bolt \
    --data ./node.fdata \
    --dyno-stats \
    --cu-processing-batch-size=64 \
    --eliminate-unreachable \
    --frame-opt=all \
    --icf=all \
    --jump-tables=aggressive \
    --min-branch-clusters \
    --stoke \
    --sctc-mode=always \
    --plt=all \
    --hot-data \
    --hot-text \
    --frame-opt-rm-stores \
    --peepholes=all \
    --infer-stale-profile=1 \
    --x86-strip-redundant-address-size \
    --indirect-call-promotion=all \
    --reg-reassign \
    --use-aggr-reg-reassign \
    --reorder-blocks=ext-tsp \
    --reorder-functions=cdsort \
    --split-all-cold \
    --split-eh \
    --split-functions \
    --split-strategy=cdsplit \
    --skip-funcs=Builtins_.*

  mv ./out/Release/node.bolt ./out/Release/node
}

#check() {
#  cd node
#  make test || :
#}

package() {
  cd node
  make DESTDIR="$pkgdir" install
  install -Dm644 LICENSE -t "$pkgdir"/usr/share/licenses/nodejs/

  # Use llvm-strip only on recognized file formats
  find "$pkgdir" -type f \( -name '*.so*' -o -name '*.a' -o -executable \) -print0 | while IFS= read -r -d '' file; do
    if llvm-strip --strip-unneeded "$file" 2>/dev/null || llvm-strip --strip-all "$file" 2>/dev/null; then
      echo "Stripped: $file"
    else
      echo "Skipping: $file (not a valid object file)" >&2
    fi
  done

  cd "$pkgdir"/usr/lib
  ln -s libnode.so.* libnode.so
}
