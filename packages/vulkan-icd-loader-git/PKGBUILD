pkgname=vulkan-icd-loader-git
pkgver=1.4.329.r2.g66f2ce1f4
pkgrel=1
arch=(x86_64)
pkgdesc='Vulkan Installable Client Driver (ICD) Loader (PGO Optimized)'
url=https://www.khronos.org/vulkan
license=(Apache-2.0)
makedepends=(
  cmake
  python-lxml
  libx11
  libxrandr
  wayland
  vulkan-headers-git
  git
  clang
  llvm
  lld
)
depends=(glibc)
optdepends=('vulkan-driver: packaged vulkan driver')
provides=("vulkan-icd-loader" libvulkan.so)
conflicts=("vulkan-icd-loader")
source=("vulkan-icd-loader"::git+https://github.com/KhronosGroup/Vulkan-Loader.git)
sha256sums=('SKIP')

pkgver() {
  cd vulkan-icd-loader
  git describe --long --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g'
}

prepare() {
  cd vulkan-icd-loader
  git submodule update --init --recursive
}

build() {
  # PGO directories
  local pgo_dir="$srcdir/pgo-data"
  mkdir -p "$pgo_dir"

  # Use clang/lld
  export CC=clang
  export CXX=clang++

  # Store original flags
  local orig_cflags="$CFLAGS"
  local orig_cxxflags="$CXXFLAGS"
  local orig_ldflags="$LDFLAGS -fuse-ld=lld"

  # Common CMake options
  local cmake_common=(
    -S vulkan-icd-loader
    -D CMAKE_INSTALL_PREFIX=/usr
    -D VULKAN_HEADERS_INSTALL_DIR=/usr
    -D CMAKE_INSTALL_LIBDIR=lib
    -D CMAKE_INSTALL_SYSCONFDIR=/etc
    -D CMAKE_INSTALL_DATADIR=/share
    -D BUILD_WSI_XCB_SUPPORT=On
    -D BUILD_WSI_XLIB_SUPPORT=On
    -D BUILD_WSI_WAYLAND_SUPPORT=On
    -D CMAKE_BUILD_TYPE=Release
    -D CMAKE_C_STANDARD=23
    -D CMAKE_CXX_STANDARD=23
    -G Ninja
  )

  ######################################################################
  # STAGE 1: Standard PGO Instrumentation
  ######################################################################
  msg2 "════════════════════════════════════════════════════════════"
  msg2 "STAGE 1/3: Standard PGO Instrumentation"
  msg2 "════════════════════════════════════════════════════════════"

  export CFLAGS="$orig_cflags -fprofile-generate"
  export CXXFLAGS="$orig_cxxflags -fprofile-generate"
  export LDFLAGS="$orig_ldflags -fprofile-generate"
  export LLVM_PROFILE_FILE="$pgo_dir/stage1-%p-%m.profraw"

  cmake -B build-stage1 "${cmake_common[@]}" \
    -D UPDATE_DEPS=ON \
    -D BUILD_TESTS=ON \
    -D CMAKE_SKIP_RPATH=False \
    -D CMAKE_BUILD_WITH_INSTALL_RPATH=True \
    -D CMAKE_INSTALL_RPATH="\$ORIGIN/../loader"

  cmake --build build-stage1

  # Run comprehensive Vulkan loader training workload
  msg2 "Running Stage 1 training workload..."

  # Test 1: Core loader tests
  msg2 "  [1/8] Core loader tests..."
  ctest --test-dir build-stage1 --output-on-failure 2>&1 | head -200 || true

  # Test 2: Repeat tests to exercise hot paths
  msg2 "  [2/8] Repeated test execution..."
  for i in {1..5}; do
    ctest --test-dir build-stage1 -R LoaderTest 2>&1 | head -50 || true
  done

  # Test 3: Layer enumeration tests
  msg2 "  [3/8] Layer enumeration..."
  for i in {1..3}; do
    ctest --test-dir build-stage1 -R LayerTest 2>&1 | head -50 || true
  done

  # Test 4: ICD enumeration tests
  msg2 "  [4/8] ICD enumeration..."
  for i in {1..3}; do
    ctest --test-dir build-stage1 -R ICD 2>&1 | head -50 || true
  done

  # Test 5: Extension tests
  msg2 "  [5/8] Extension handling..."
  ctest --test-dir build-stage1 -R Extension 2>&1 | head -50 || true

  # Test 6: Environment variable configurations
  msg2 "  [6/8] Environment variable paths..."
  export VK_LAYER_PATH="$srcdir/test-layers"
  export VK_ICD_FILENAMES="$srcdir/test-icd.json"
  mkdir -p "$srcdir/test-layers"

  for i in {1..3}; do
    ctest --test-dir build-stage1 -R Loader 2>&1 | head -50 || true
  done

  unset VK_LAYER_PATH VK_ICD_FILENAMES

  # Test 7: Multi-threaded scenarios
  msg2 "  [7/8] Parallel test execution..."
  ctest --test-dir build-stage1 -j"$(nproc)" 2>&1 | head -100 || true

  # Test 8: Regression tests
  msg2 "  [8/8] Regression tests..."
  ctest --test-dir build-stage1 -R Regression 2>&1 | head -50 || true

  # Collect and merge Stage 1 profiles
  msg2 "Collecting Stage 1 profiles..."
  local prof_count=$(find "$pgo_dir" -name "stage1-*.profraw" 2>/dev/null | wc -l)
  msg2 "  Found $prof_count profile files"

  if [[ $prof_count -eq 0 ]]; then
    error "No Stage 1 profiles generated!"
    return 1
  fi

  llvm-profdata merge -output="$pgo_dir/stage1.profdata" "$pgo_dir"/stage1-*.profraw || {
    error "Failed to merge Stage 1 profiles"
    return 1
  }

  local prof_size=$(stat -c%s "$pgo_dir/stage1.profdata" 2>/dev/null || echo '0')
  msg2 "✓ Stage 1: $prof_size bytes"

  ######################################################################
  # STAGE 2: Context-Sensitive PGO
  ######################################################################
  msg2 "════════════════════════════════════════════════════════════"
  msg2 "STAGE 2/3: CS-PGO Instrumentation"
  msg2 "════════════════════════════════════════════════════════════"

  unset LLVM_PROFILE_FILE

  export CFLAGS="$orig_cflags -fprofile-use=$pgo_dir/stage1.profdata -fcs-profile-generate"
  export CXXFLAGS="$orig_cxxflags -fprofile-use=$pgo_dir/stage1.profdata -fcs-profile-generate"
  export LDFLAGS="$orig_ldflags -fprofile-use=$pgo_dir/stage1.profdata -fcs-profile-generate"
  export LLVM_PROFILE_FILE="$pgo_dir/stage2-%p-%m.profraw"

  cmake -B build-stage2 "${cmake_common[@]}" \
    -D UPDATE_DEPS=ON \
    -D BUILD_TESTS=ON \
    -D CMAKE_SKIP_RPATH=False \
    -D CMAKE_BUILD_WITH_INSTALL_RPATH=True \
    -D CMAKE_INSTALL_RPATH="\$ORIGIN/../loader"

  cmake --build build-stage2

  # Run abbreviated workload for CS-PGO
  msg2 "Running Stage 2 training workload..."

  msg2 "  → CS-PGO tests..."
  ctest --test-dir build-stage2 --output-on-failure 2>&1 | head -100 || true

  for i in {1..3}; do
    ctest --test-dir build-stage2 -R LoaderTest 2>&1 | head -30 || true
  done

  # Merge CS profiles
  msg2 "Collecting Stage 2 profiles..."
  local cs_count=$(find "$pgo_dir" -name "stage2-*.profraw" 2>/dev/null | wc -l)
  msg2 "  Found $cs_count CS profile files"

  if [[ $cs_count -gt 0 ]]; then
    llvm-profdata merge -output="$pgo_dir/stage2.profdata" "$pgo_dir"/stage2-*.profraw || {
      msg2 "⚠ Failed to merge Stage 2 profiles, using Stage 1"
      cp "$pgo_dir/stage1.profdata" "$pgo_dir/merged.profdata"
    }

    if [[ -f "$pgo_dir/stage2.profdata" ]]; then
      llvm-profdata merge \
        -output="$pgo_dir/merged.profdata" \
        "$pgo_dir/stage1.profdata" \
        "$pgo_dir/stage2.profdata" || {
        msg2 "⚠ Failed to merge combined profiles, using Stage 1"
        cp "$pgo_dir/stage1.profdata" "$pgo_dir/merged.profdata"
      }

      local merged_size=$(stat -c%s "$pgo_dir/merged.profdata" 2>/dev/null || echo '0')
      msg2 "✓ Merged: $merged_size bytes (Standard + CS-PGO)"
    fi
  else
    msg2 "⚠ No CS profiles, using Stage 1"
    cp "$pgo_dir/stage1.profdata" "$pgo_dir/merged.profdata"
  fi

  ######################################################################
  # STAGE 3: Final Optimized Build
  ######################################################################
  msg2 "════════════════════════════════════════════════════════════"
  msg2 "STAGE 3/3: Final Optimized Build"
  msg2 "════════════════════════════════════════════════════════════"

  unset LLVM_PROFILE_FILE

  export CFLAGS="$orig_cflags -fprofile-use=$pgo_dir/merged.profdata"
  export CXXFLAGS="$orig_cxxflags -fprofile-use=$pgo_dir/merged.profdata"
  export LDFLAGS="$orig_ldflags -fprofile-use=$pgo_dir/merged.profdata"

  cmake -B build "${cmake_common[@]}" \
    -D CMAKE_SKIP_RPATH=True \
    -D BUILD_TESTS=OFF

  cmake --build build

  msg2 "✓ PGO optimization complete"
  msg2 "════════════════════════════════════════════════════════════"
}

package() {
  DESTDIR="${pkgdir}" cmake --install build
  install -Dm644 vulkan-icd-loader/LICENSE.txt \
    -t "${pkgdir}/usr/share/licenses/$pkgname"
}

# vim:set sw=2 sts=-1 et:
