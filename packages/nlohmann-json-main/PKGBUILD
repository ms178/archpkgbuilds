pkgname=nlohmann-json
pkgver=3.12.0
# Increment pkgrel for PGO addition
pkgrel=2.2
# tests are tracked in a separate repo
# https://github.com/nlohmann/json_test_data
_test_pkgver=3.1.0
pkgdesc="JSON for Modern C++ (PGO+CS-PGO optimized)" # Updated description
arch=('x86_64') # PGO is architecture-specific
url="https://github.com/nlohmann/json"
license=(MIT)
# Add PGO build dependencies
makedepends=(
  cmake
  git
  ninja # Recommended generator for multi-stage builds
  clang # Needed for PGO
  llvm  # Needed for llvm-profdata
)
# Add !strip option for PGO symbols
options=(!strip)
source=(
  # Use standard naming convention for source directory
  "$pkgname-$pkgver::git+$url.git#tag=v$pkgver"
  "json_test_data-$_test_pkgver.tar.gz::https://github.com/nlohmann/json_test_data/archive/v$_test_pkgver.tar.gz"
)
sha512sums=('9980bd1a6b39a02a87495564f35e9d6a1d9f359d654c3009040da62ba6ad33747767703c680fe5c7e269887939c0f9a7335b41c7459983e10069925eb9f72347'
            'db6c411b37f2154f5dd1ed90f4e8fa0907f4a736cd0ff79943bcacf9da422285ff142bb6a7dc6022b236090083166ac1ab197be3f480d8dc50b26a91a9477821')
b2sums=('06e798f1ae980cf7644ff8712bb3aaff00d32803d5bf47f84b754f291a09ffc3918a321d951e736c0c68329eaa1a7a3f082b5db2a01d949ae7ec4d42f22a4422'
        '809be0728a0b9d007fcc752911bdf6f7e548d6e3ec59871ea2b16d87d8248ca4dd2f681a1d0f82c618463294188ad41d6d965b8bdc39c70fdcf4b939d4121e9c')

prepare() {
  # No specific preparation needed here anymore if we use CMake variable for test data
  # The test data archive unpacks to json_test_data-${_test_pkgver}
  msg "Test data is available in $srcdir/json_test_data-${_test_pkgver}"
}

build() {
  # Define source directory for clarity
  local _sourcedir="$srcdir/$pkgname-$pkgver"

  # --- Setup ---
  # Use clang toolchain
  export CC="clang"
  export CXX="clang++"
  export LD="lld" # Optional: lld is generally faster

  # Save original flags from makepkg.conf
  local _original_cflags="$CFLAGS"
  local _original_cxxflags="$CXXFLAGS"
  local _original_ldflags="$LDFLAGS"

  # Define profile directories
  local PGO_DATA_DIR="$srcdir/pgo_data"
  local CS_PGO_DATA_DIR="$srcdir/cspgo_data"
  mkdir -p "$PGO_DATA_DIR" "$CS_PGO_DATA_DIR"

  # Ensure cleanup on exit
  trap 'rm -rf "$PGO_DATA_DIR" "$CS_PGO_DATA_DIR" build-*' EXIT

  # Common CMake options
  # Tests MUST be enabled to generate profiles
  local _common_cmake_options=(
    -D BUILD_TESTING=ON
    -D CMAKE_INSTALL_PREFIX=/usr
    -D CMAKE_INSTALL_LIBDIR=/usr/lib
    -D JSON_BuildTests=ON
    -D JSON_MultipleHeaders=ON
    # Point CMake to the location of the unpacked test data
    -D JSON_TestDataDirectory="$srcdir/json_test_data-${_test_pkgver}"
    -W no-dev
  )
  # Flag to track if PGO fails
  local pgo_failed=false
  # --- End Setup ---


  # --- Stage 1: PGO Instrumentation Build ---
  msg "Stage 1: Building PGO instrumented build..."
  export CFLAGS="$_original_cflags"
  export CXXFLAGS="$_original_cxxflags"
  export LDFLAGS="$_original_ldflags"
  # Add flags for PGO instrumentation and debug info
  local _pgo_instr_flags="-fprofile-generate=$PGO_DATA_DIR -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"
  export CFLAGS+=" $_pgo_instr_flags"
  export CXXFLAGS+=" $_pgo_instr_flags"
  export LDFLAGS+=" $_pgo_instr_flags"

  cmake \
    -B build-stage1 \
    -S "$_sourcedir" \
    -G Ninja \
    -D CMAKE_BUILD_TYPE=None \
    "${_common_cmake_options[@]}" || { error "CMake configuration failed (Stage 1)"; return 1; }

  ninja -C build-stage1 || { error "Ninja build failed (Stage 1)"; return 1; }

  # --- Stage 1: PGO Training Run ---
  msg "Stage 1: Running PGO training (ctest)..."
  # Set where the profile data should be written (though compiler often handles this)
  export LLVM_PROFILE_FILE="${PGO_DATA_DIR}/nlohmann-json-%p_%m.profraw"
  # Run ctest within the build directory
  ( # Subshell to contain cd and env vars if needed
    cd build-stage1
    if ! ctest --output-on-failure -j$(nproc); then
      warning "Note: Some tests failed during PGO training (Stage 1), but proceeding."
    fi
  ) || warning "Subshell for ctest (Stage 1) exited with non-zero status."
  unset LLVM_PROFILE_FILE

  # --- Stage 1: Merge PGO Profiles ---
  msg "Stage 1: Merging PGO profiles..."
  find "$PGO_DATA_DIR" -name '*.profraw' -print -quit | grep -q .
  if [ $? -ne 0 ]; then
      error "No raw PGO profile data (*.profraw) generated. Aborting."
      return 1
  fi
  if ! llvm-profdata merge -output="${PGO_DATA_DIR}/default.profdata" "${PGO_DATA_DIR}"/*.profraw; then
       error "llvm-profdata merge failed (Stage 1). Aborting."
       return 1
  fi
  if [ ! -s "${PGO_DATA_DIR}/default.profdata" ]; then
       error "Merged PGO profile data is empty or missing (Stage 1). Aborting."
       return 1
  fi
  rm -f "${PGO_DATA_DIR}"/*.profraw
  # --- End Stage 1 ---


  # --- Stage 2: CS-PGO Instrumentation Build ---
  msg "Stage 2: Building CS-PGO instrumented build..."
  export CFLAGS="$_original_cflags"
  export CXXFLAGS="$_original_cxxflags"
  export LDFLAGS="$_original_ldflags"
  # Use PGO data from Stage 1, enable CS profile generation
  local _cspgo_instr_flags="-fprofile-use=${PGO_DATA_DIR}/default.profdata -fcs-profile-generate=$CS_PGO_DATA_DIR -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"
  export CFLAGS+=" $_cspgo_instr_flags"
  export CXXFLAGS+=" $_cspgo_instr_flags"
  export LDFLAGS+=" $_cspgo_instr_flags"

  cmake \
    -B build-stage2 \
    -S "$_sourcedir" \
    -G Ninja \
    -D CMAKE_BUILD_TYPE=None \
    "${_common_cmake_options[@]}" || { error "CMake configuration failed (Stage 2)"; return 1; }

  ninja -C build-stage2 || { error "Ninja build failed (Stage 2)"; return 1; }

  # --- Stage 2: CS-PGO Training Run ---
  msg "Stage 2: Running CS-PGO training (ctest)..."
  export LLVM_PROFILE_FILE="${CS_PGO_DATA_DIR}/nlohmann-json-cs-%p_%m.profraw"
  ( # Subshell
    cd build-stage2
    if ! ctest --output-on-failure -j$(nproc); then
      warning "Note: Some tests failed during CS-PGO training (Stage 2), but proceeding."
    fi
  ) || warning "Subshell for ctest (Stage 2) exited with non-zero status."
  unset LLVM_PROFILE_FILE

  # --- Stage 2: Merge CS-PGO Profiles ---
  msg "Stage 2: Merging CS-PGO profiles..."
  find "$CS_PGO_DATA_DIR" -name '*.profraw' -print -quit | grep -q .
  if [ $? -ne 0 ]; then
      warning "No raw CS-PGO profile data (*.profraw) generated. Final build will use only Stage 1 PGO data."
      cp "${PGO_DATA_DIR}/default.profdata" "${CS_PGO_DATA_DIR}/cs.profdata" || { error "Failed to copy fallback profile data."; return 1; }
  else
    # Merge CS raw files *and* the default profile from stage 1
    if ! llvm-profdata merge -output="${CS_PGO_DATA_DIR}/cs.profdata" "${CS_PGO_DATA_DIR}"/*.profraw "${PGO_DATA_DIR}/default.profdata"; then
        error "llvm-profdata merge failed (Stage 2). Aborting."
        return 1
    fi
    rm -f "${CS_PGO_DATA_DIR}"/*.profraw
  fi
  if [ ! -s "${CS_PGO_DATA_DIR}/cs.profdata" ]; then
      error "Final merged CS-PGO profile data is empty or missing (Stage 2). Aborting."
      return 1
  fi
  # --- End Stage 2 ---


  # --- Stage 3: Final Optimized Build ---
  msg "Stage 3: Building final CS-PGO optimized build..."
  export CFLAGS="$_original_cflags"
  export CXXFLAGS="$_original_cxxflags"
  export LDFLAGS="$_original_ldflags"
  # Use the final merged CS-PGO profile data
  local _final_opt_flags="-fprofile-use=${CS_PGO_DATA_DIR}/cs.profdata"
  export CFLAGS+=" $_final_opt_flags"
  export CXXFLAGS+=" $_final_opt_flags"
  # Apply PGO flags to linker as well if linking occurs (e.g., for tests)
  export LDFLAGS+=" $_final_opt_flags"

  cmake \
    -B build-final \
    -S "$_sourcedir" \
    -G Ninja \
    -D CMAKE_BUILD_TYPE=Release \
    "${_common_cmake_options[@]}" || { error "CMake configuration failed (Stage 3)"; return 1; }

  ninja -C build-final || { error "Ninja build failed (Stage 3)"; return 1; }
  # --- End Stage 3 ---

  msg "CS-PGO build process completed successfully."
}

check() {
  # Define final build directory
  local _builddir="build-final"
  if [ ! -d "$_builddir" ]; then
      error "Final build directory '$_builddir' not found for check()."
      return 1
  fi
  msg "Running final checks (ctest) on optimized build in '$_builddir'..."
  # Run ctest within the final build directory
  ctest --test-dir "$_builddir" --output-on-failure -j$(nproc) || error "ctest failed in check(). Review test output."
}

package() {
  # Define final build directory
  local _builddir="build-final"
  local _sourcedir="$srcdir/$pkgname-$pkgver"

  if [ ! -d "$_builddir" ]; then
      error "Final build directory '$_builddir' not found for package(). Cannot install."
      return 1
  fi
  msg "Installing package from '$_builddir'..."
  # Install from the final build directory
  DESTDIR="$pkgdir" cmake --install "$_builddir" || error "cmake --install failed"

  # Install documentation and license manually from source dir
  install -vDm 644 "$_sourcedir/README.md" -t "$pkgdir/usr/share/doc/$pkgname/"
  install -vDm 644 "$_sourcedir/LICENSE.MIT" -t "$pkgdir/usr/share/licenses/$pkgname/"

  # Standard stripping logic respecting !strip option
  # Note: For a header-only lib, there might not be much to strip in /usr/lib
  # It will primarily affect any test executables if they were accidentally installed
  if [[ ! " ${options[@]} " =~ " !strip " ]]; then
    msg "Stripping binaries (if any)..."
    find "$pkgdir" -type f -print0 | while IFS= read -r -d '' file; do
        if file -b --mime-type "$file" | grep -qE 'application/(x-executable|x-sharedlib)'; then
            msg2 "Stripping: $file"
            if ! llvm-strip --strip-unneeded "$file" 2>/dev/null; then
                 warning "llvm-strip --strip-unneeded failed on $file"
            fi
        fi
    done
  else
      msg "Skipping stripping due to !strip option."
  fi
}
