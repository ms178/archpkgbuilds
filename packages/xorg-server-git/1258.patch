From b092b78941335f2aa08aa4f8ca6256abfc5c692d Mon Sep 17 00:00:00 2001
From: "Enrico Weigelt, metux IT consult" <info@metux.net>
Date: Wed, 24 Jan 2024 20:04:37 +0100
Subject: [PATCH] rename old symbol PANORAMIX to XINERAMA

PANORAMIX was the original working title of the extension, before it became
official standard. Just nobody cared about fixing the symbols to the official
naming.

Signed-off-by: Enrico Weigelt, metux IT consult <info@metux.net>
---
 Xext/saver.c                   |  16 ++--
 Xext/shape.c                   |  36 ++++-----
 Xext/shm.c                     |  20 ++---
 Xext/xtest.c                   |   4 +-
 Xext/xvdisp.c                  |  14 ++--
 Xext/xvmain.c                  |  12 +--
 Xi/xiquerypointer.c            |   8 +-
 composite/compext.c            |   4 +-
 composite/compoverlay.c        |   8 +-
 composite/compwindow.c         |   8 +-
 damageext/damageext.c          |  24 +++---
 dbe/dbe.c                      |   4 +-
 dix/colormap.c                 |  12 +--
 dix/dispatch.c                 |  20 ++---
 dix/dixfonts.c                 |   4 +-
 dix/enterleave.c               |  16 ++--
 dix/events.c                   | 136 ++++++++++++++++-----------------
 dix/getevents.c                |   8 +-
 dix/main.c                     |  16 ++--
 dix/resource.c                 |   8 +-
 dix/window.c                   |  24 +++---
 dri3/dri3.c                    |   4 +-
 hw/xfree86/common/xf86Config.c |   4 +-
 hw/xfree86/common/xf86DGA.c    |   8 +-
 hw/xfree86/common/xf86Mode.c   |   4 +-
 hw/xfree86/common/xf86RandR.c  |   4 +-
 hw/xfree86/dri/dri.c           |   4 +-
 hw/xfree86/dri2/dri2ext.c      |   4 +-
 hw/xfree86/modes/xf86RandR12.c |   8 +-
 include/cursor.h               |   4 +-
 include/dix.h                  |   4 +-
 include/extinit.h              |   4 +-
 include/globals.h              |   4 +-
 include/input.h                |   4 +-
 include/inputstr.h             |   4 +-
 include/meson.build            |   2 +-
 include/xorg-server.h.meson.in |   2 +-
 mi/miexpose.c                  |   8 +-
 mi/miinitext.c                 |   4 +-
 mi/mipointer.c                 |   4 +-
 os/utils.c                     |  16 ++--
 present/present_screen.c       |   4 +-
 randr/randr.c                  |   4 +-
 randr/rrxinerama.c             |   4 +-
 record/record.c                |   8 +-
 render/picture.c               |  12 +--
 render/picturestr.h            |   4 +-
 render/render.c                |  20 ++---
 xfixes/region.c                |   4 +-
 xfixes/xfixes.c                |   4 +-
 xfixes/xfixesint.h             |   4 +-
 51 files changed, 285 insertions(+), 285 deletions(-)

diff --git a/Xext/saver.c b/Xext/saver.c
index fd6153c313..2ffcd5940c 100644
--- a/Xext/saver.c
+++ b/Xext/saver.c
@@ -47,10 +47,10 @@ in this Software without prior written authorization from the X Consortium.
 #include "colormapst.h"
 #include "xace.h"
 #include "inputstr.h"
-#ifdef PANORAMIX
+#ifdef XINERAMA
 #include "panoramiX.h"
 #include "panoramiXsrv.h"
-#endif
+#endif /* XINERAMA */
 #ifdef DPMSExtension
 #include <X11/extensions/dpmsconst.h>
 #include "dpmsproc.h"
@@ -601,9 +601,9 @@ ScreenSaverHandle(ScreenPtr pScreen, int xstate, Bool force)
             ret = TRUE;
 
     }
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (noPanoramiXExtension || !pScreen->myNum)
-#endif
+#endif /* XINERAMA */
         SendScreenSaverNotify(pScreen, state, force);
     return ret;
 }
@@ -1093,7 +1093,7 @@ ScreenSaverUnsetAttributes(ClientPtr client)
 static int
 ProcScreenSaverSetAttributes(ClientPtr client)
 {
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (!noPanoramiXExtension) {
         REQUEST(xScreenSaverSetAttributesReq);
         PanoramiXRes *draw;
@@ -1172,7 +1172,7 @@ ProcScreenSaverSetAttributes(ClientPtr client)
 
         return status;
     }
-#endif
+#endif /* XINERAMA */
 
     return ScreenSaverSetAttributes(client);
 }
@@ -1180,7 +1180,7 @@ ProcScreenSaverSetAttributes(ClientPtr client)
 static int
 ProcScreenSaverUnsetAttributes(ClientPtr client)
 {
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (!noPanoramiXExtension) {
         REQUEST(xScreenSaverUnsetAttributesReq);
         PanoramiXRes *draw;
@@ -1200,7 +1200,7 @@ ProcScreenSaverUnsetAttributes(ClientPtr client)
 
         stuff->drawable = draw->info[0].id;
     }
-#endif
+#endif /* XINERAMA */
 
     return ScreenSaverUnsetAttributes(client);
 }
diff --git a/Xext/shape.c b/Xext/shape.c
index e7c7a45b01..c5839198c6 100644
--- a/Xext/shape.c
+++ b/Xext/shape.c
@@ -64,10 +64,10 @@ static void SShapeNotifyEvent(xShapeNotifyEvent * /* from */ ,
  * externally by the Xfixes extension and are now defined in window.h
  */
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
 #include "panoramiX.h"
 #include "panoramiXsrv.h"
-#endif
+#endif /* XINERAMA */
 
 static int ShapeEventBase = 0;
 static RESTYPE ClientType, ShapeEventType;      /* resource types for event masks */
@@ -296,7 +296,7 @@ ProcShapeRectangles(ClientPtr client)
                          stuff->xOff, stuff->yOff, createDefault);
 }
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
 static int
 ProcPanoramiXShapeRectangles(ClientPtr client)
 {
@@ -319,7 +319,7 @@ ProcPanoramiXShapeRectangles(ClientPtr client)
     }
     return result;
 }
-#endif
+#endif /* XINERAMA */
 
 /**************
  * ProcShapeMask
@@ -394,7 +394,7 @@ ProcShapeMask(ClientPtr client)
                          stuff->xOff, stuff->yOff, createDefault);
 }
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
 static int
 ProcPanoramiXShapeMask(ClientPtr client)
 {
@@ -428,7 +428,7 @@ ProcPanoramiXShapeMask(ClientPtr client)
     }
     return result;
 }
-#endif
+#endif /* XINERAMA */
 
 /************
  * ProcShapeCombine
@@ -522,7 +522,7 @@ ProcShapeCombine(ClientPtr client)
                          stuff->xOff, stuff->yOff, createDefault);
 }
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
 static int
 ProcPanoramiXShapeCombine(ClientPtr client)
 {
@@ -551,7 +551,7 @@ ProcPanoramiXShapeCombine(ClientPtr client)
     }
     return result;
 }
-#endif
+#endif /* XINERAMA */
 
 /*************
  * ProcShapeOffset
@@ -593,7 +593,7 @@ ProcShapeOffset(ClientPtr client)
     return Success;
 }
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
 static int
 ProcPanoramiXShapeOffset(ClientPtr client)
 {
@@ -616,7 +616,7 @@ ProcPanoramiXShapeOffset(ClientPtr client)
     }
     return result;
 }
-#endif
+#endif /* XINERAMA */
 
 static int
 ProcShapeQueryExtents(ClientPtr client)
@@ -1034,32 +1034,32 @@ ProcShapeDispatch(ClientPtr client)
     case X_ShapeQueryVersion:
         return ProcShapeQueryVersion(client);
     case X_ShapeRectangles:
-#ifdef PANORAMIX
+#ifdef XINERAMA
         if (!noPanoramiXExtension)
             return ProcPanoramiXShapeRectangles(client);
         else
-#endif
+#endif /* XINERAMA */
             return ProcShapeRectangles(client);
     case X_ShapeMask:
-#ifdef PANORAMIX
+#ifdef XINERAMA
         if (!noPanoramiXExtension)
             return ProcPanoramiXShapeMask(client);
         else
-#endif
+#endif /* XINERAMA */
             return ProcShapeMask(client);
     case X_ShapeCombine:
-#ifdef PANORAMIX
+#ifdef XINERAMA
         if (!noPanoramiXExtension)
             return ProcPanoramiXShapeCombine(client);
         else
-#endif
+#endif /* XINERAMA */
             return ProcShapeCombine(client);
     case X_ShapeOffset:
-#ifdef PANORAMIX
+#ifdef XINERAMA
         if (!noPanoramiXExtension)
             return ProcPanoramiXShapeOffset(client);
         else
-#endif
+#endif /* XINERAMA */
             return ProcShapeOffset(client);
     case X_ShapeQueryExtents:
         return ProcShapeQueryExtents(client);
diff --git a/Xext/shm.c b/Xext/shm.c
index 071bd1a41e..ecf3064f99 100644
--- a/Xext/shm.c
+++ b/Xext/shm.c
@@ -88,10 +88,10 @@ in this Software without prior written authorization from The Open Group.
 #define SHMPERM_MODE(p)		p->mode
 #endif
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
 #include "panoramiX.h"
 #include "panoramiXsrv.h"
-#endif
+#endif /* XINERAMA */
 
 #include "extinit.h"
 
@@ -731,7 +731,7 @@ ProcShmGetImage(ClientPtr client)
     return Success;
 }
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
 static int
 ProcPanoramiXShmPutImage(ClientPtr client)
 {
@@ -1027,7 +1027,7 @@ ProcPanoramiXShmCreatePixmap(ClientPtr client)
 
     return result;
 }
-#endif
+#endif /* XINERAMA */
 
 static PixmapPtr
 fbShmCreatePixmap(ScreenPtr pScreen,
@@ -1347,22 +1347,22 @@ ProcShmDispatch(ClientPtr client)
     case X_ShmDetach:
         return ProcShmDetach(client);
     case X_ShmPutImage:
-#ifdef PANORAMIX
+#ifdef XINERAMA
         if (!noPanoramiXExtension)
             return ProcPanoramiXShmPutImage(client);
-#endif
+#endif /* XINERAMA */
         return ProcShmPutImage(client);
     case X_ShmGetImage:
-#ifdef PANORAMIX
+#ifdef XINERAMA
         if (!noPanoramiXExtension)
             return ProcPanoramiXShmGetImage(client);
-#endif
+#endif /* XINERAMA */
         return ProcShmGetImage(client);
     case X_ShmCreatePixmap:
-#ifdef PANORAMIX
+#ifdef XINERAMA
         if (!noPanoramiXExtension)
             return ProcPanoramiXShmCreatePixmap(client);
-#endif
+#endif /* XINERAMA */
         return ProcShmCreatePixmap(client);
 #ifdef SHM_FD_PASSING
     case X_ShmAttachFd:
diff --git a/Xext/xtest.c b/Xext/xtest.c
index f03d8c9519..264937dfa0 100644
--- a/Xext/xtest.c
+++ b/Xext/xtest.c
@@ -75,10 +75,10 @@ static InternalEvent *xtest_evlist;
  */
 DeviceIntPtr xtestpointer, xtestkeyboard;
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
 #include "panoramiX.h"
 #include "panoramiXsrv.h"
-#endif
+#endif /* XINERAMA */
 
 static int XTestSwapFakeInput(ClientPtr /* client */ ,
                               xReq *    /* req */
diff --git a/Xext/xvdisp.c b/Xext/xvdisp.c
index 5232b37d6a..258b87ddd7 100644
--- a/Xext/xvdisp.c
+++ b/Xext/xvdisp.c
@@ -48,12 +48,12 @@ SOFTWARE.
 
 #include "xvdisp.h"
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
 #include "panoramiX.h"
 #include "panoramiXsrv.h"
 
 unsigned long XvXRTPort;
-#endif
+#endif /* XINERAMA */
 
 static int
 SWriteQueryExtensionReply(ClientPtr client, xvQueryExtensionReply * rep)
@@ -1433,7 +1433,7 @@ SProcXvDispatch(ClientPtr client)
     return SXvProcVector[stuff->data] (client);
 }
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
 static int
 XineramaXvStopVideo(ClientPtr client)
 {
@@ -1541,7 +1541,7 @@ XineramaXvShmPutImage(ClientPtr client)
 }
 #else
 #define XineramaXvShmPutImage ProcXvShmPutImage
-#endif
+#endif /* MITSHM */
 
 static int
 XineramaXvPutImage(ClientPtr client)
@@ -1796,17 +1796,17 @@ XineramifyXv(void)
     XvProcVector[xv_PutImage] = XineramaXvPutImage;
     XvProcVector[xv_ShmPutImage] = XineramaXvShmPutImage;
 }
-#endif                          /* PANORAMIX */
+#endif /* XINERAMA */
 
 void
 XvResetProcVector(void)
 {
-#ifdef PANORAMIX
+#ifdef XINERAMA
     XvProcVector[xv_PutVideo] = ProcXvPutVideo;
     XvProcVector[xv_PutStill] = ProcXvPutStill;
     XvProcVector[xv_StopVideo] = ProcXvStopVideo;
     XvProcVector[xv_SetPortAttribute] = ProcXvSetPortAttribute;
     XvProcVector[xv_PutImage] = ProcXvPutImage;
     XvProcVector[xv_ShmPutImage] = ProcXvShmPutImage;
-#endif
+#endif /* XINERAMA */
 }
diff --git a/Xext/xvmain.c b/Xext/xvmain.c
index 2a08f8744a..3380895606 100644
--- a/Xext/xvmain.c
+++ b/Xext/xvmain.c
@@ -100,10 +100,10 @@ SOFTWARE.
 #include <X11/extensions/Xvproto.h>
 #include "xvdix.h"
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
 #include "panoramiX.h"
 #include "panoramiXsrv.h"
-#endif
+#endif /* XINERAMA */
 #include "xvdisp.h"
 
 static DevPrivateKeyRec XvScreenKeyRec;
@@ -163,9 +163,9 @@ XvExtensionInit(void)
             ErrorF("XvExtensionInit: Unable to allocate resource types\n");
             return;
         }
-#ifdef PANORAMIX
+#ifdef XINERAMA
         XineramaRegisterConnectionBlockCallback(XineramifyXv);
-#endif
+#endif /* XINERAMA */
         XvScreenGeneration = serverGeneration;
     }
 
@@ -256,9 +256,9 @@ XvScreenInit(ScreenPtr pScreen)
             ErrorF("XvScreenInit: Unable to allocate resource types\n");
             return BadAlloc;
         }
-#ifdef PANORAMIX
+#ifdef XINERAMA
         XineramaRegisterConnectionBlockCallback(XineramifyXv);
-#endif
+#endif /* XINERAMA */
         XvScreenGeneration = serverGeneration;
     }
 
diff --git a/Xi/xiquerypointer.c b/Xi/xiquerypointer.c
index 2b05ac5f39..27602399bc 100644
--- a/Xi/xiquerypointer.c
+++ b/Xi/xiquerypointer.c
@@ -46,9 +46,9 @@
 #include "scrnintstr.h"
 #include "xkbsrv.h"
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
 #include "panoramiXsrv.h"
-#endif
+#endif /* XINERAMA */
 
 #include "inpututils.h"
 #include "xiquerypointer.h"
@@ -182,7 +182,7 @@ ProcXIQueryPointer(ClientPtr client)
         rep.win_y = 0;
     }
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (!noPanoramiXExtension) {
         rep.root_x += double_to_fp1616(screenInfo.screens[0]->x);
         rep.root_y += double_to_fp1616(screenInfo.screens[0]->y);
@@ -191,7 +191,7 @@ ProcXIQueryPointer(ClientPtr client)
             rep.win_y += double_to_fp1616(screenInfo.screens[0]->y);
         }
     }
-#endif
+#endif /* XINERAMA */
 
     WriteReplyToClient(client, sizeof(xXIQueryPointerReply), &rep);
     if (buttons)
diff --git a/composite/compext.c b/composite/compext.c
index 31ebbbf675..88d4eb8a4c 100644
--- a/composite/compext.c
+++ b/composite/compext.c
@@ -588,7 +588,7 @@ CompositeExtensionInit(void)
     noCompositeExtension = FALSE;
 }
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
 #include "panoramiXsrv.h"
 
 int (*PanoramiXSaveCompositeVector[CompositeNumberRequests]) (ClientPtr);
@@ -939,4 +939,4 @@ PanoramiXCompositeReset(void)
         ProcCompositeVector[i] = PanoramiXSaveCompositeVector[i];
 }
 
-#endif
+#endif /* XINERAMA */
diff --git a/composite/compoverlay.c b/composite/compoverlay.c
index eb2d86e0d7..d4cd311ef7 100644
--- a/composite/compoverlay.c
+++ b/composite/compoverlay.c
@@ -48,9 +48,9 @@
 #include "compint.h"
 #include "xace.h"
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
 #include "panoramiXsrv.h"
-#endif
+#endif /* XINERAMA */
 
 /*
  * Delete the given overlay client list element from its screen list.
@@ -135,14 +135,14 @@ compCreateOverlayWindow(ScreenPtr pScreen)
     int h = pScreen->height;
     int x = 0, y = 0;
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (!noPanoramiXExtension) {
         x = -pScreen->x;
         y = -pScreen->y;
         w = PanoramiXPixWidth;
         h = PanoramiXPixHeight;
     }
-#endif
+#endif /* XINERAMA */
 
     pWin = cs->pOverlayWin =
         CreateWindow(cs->overlayWid, pRoot, x, y, w, h, 0,
diff --git a/composite/compwindow.c b/composite/compwindow.c
index 7b4af9ee58..e06f5100bb 100644
--- a/composite/compwindow.c
+++ b/composite/compwindow.c
@@ -47,9 +47,9 @@
 
 #include "compint.h"
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
 #include "panoramiXsrv.h"
-#endif
+#endif /* XINERAMA */
 
 #ifdef COMPOSITE_DEBUG
 static int
@@ -199,12 +199,12 @@ updateOverlayWindow(ScreenPtr pScreen)
     int w = pScreen->width;
     int h = pScreen->height;
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (!noPanoramiXExtension) {
         w = PanoramiXPixWidth;
         h = PanoramiXPixHeight;
     }
-#endif
+#endif /* XINERAMA */
 
     cs = GetCompScreen(pScreen);
     if ((pWin = cs->pOverlayWin) != NULL) {
diff --git a/damageext/damageext.c b/damageext/damageext.c
index c8194da073..98f8983e32 100644
--- a/damageext/damageext.c
+++ b/damageext/damageext.c
@@ -30,7 +30,7 @@
 #include "protocol-versions.h"
 #include "extinit.h"
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
 #include "panoramiX.h"
 #include "panoramiXsrv.h"
 
@@ -42,7 +42,7 @@ typedef struct {
 static RESTYPE XRT_DAMAGE;
 static int (*PanoramiXSaveDamageCreate) (ClientPtr);
 
-#endif
+#endif /* XINERAMA */
 
 static unsigned char DamageReqCode;
 static int DamageEventBase;
@@ -67,7 +67,7 @@ DamageNoteCritical(ClientPtr pClient)
 static void
 damageGetGeometry(DrawablePtr draw, int *x, int *y, int *w, int *h)
 {
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (!noPanoramiXExtension && draw->type == DRAWABLE_WINDOW) {
         WindowPtr win = (WindowPtr)draw;
 
@@ -79,7 +79,7 @@ damageGetGeometry(DrawablePtr draw, int *x, int *y, int *w, int *h)
             return;
         }
     }
-#endif
+#endif /* XINERAMA */
 
     *x = draw->x;
     *y = draw->y;
@@ -318,7 +318,7 @@ ProcDamageDestroy(ClientPtr client)
     return Success;
 }
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
 static RegionPtr
 DamageExtSubtractWindowClip(DamageExtPtr pDamageExt)
 {
@@ -366,7 +366,7 @@ DamageExtFreeWindowClip(RegionPtr reg)
     if (reg != &PanoramiXScreenRegion)
         RegionDestroy(reg);
 }
-#endif
+#endif /* XINERAMA */
 
 /*
  * DamageSubtract intersects with borderClip, so we must reconstruct the
@@ -377,7 +377,7 @@ DamageExtSubtract(DamageExtPtr pDamageExt, const RegionPtr pRegion)
 {
     DamagePtr pDamage = pDamageExt->pDamage;
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (!noPanoramiXExtension) {
         RegionPtr damage = DamageRegion(pDamage);
         RegionSubtract(damage, damage, pRegion);
@@ -395,7 +395,7 @@ DamageExtSubtract(DamageExtPtr pDamageExt, const RegionPtr pRegion)
 
         return RegionNotEmpty(damage);
     }
-#endif
+#endif /* XINERAMA */
 
     return DamageSubtract(pDamage, pRegion);
 }
@@ -603,7 +603,7 @@ SDamageNotifyEvent(xDamageNotifyEvent * from, xDamageNotifyEvent * to)
     cpswaps(from->geometry.height, to->geometry.height);
 }
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
 
 static void
 PanoramiXDamageReport(DamagePtr pDamage, RegionPtr pRegion, void *closure)
@@ -722,7 +722,7 @@ PanoramiXDamageReset(void)
     ProcDamageVector[X_DamageCreate] = PanoramiXSaveDamageCreate;
 }
 
-#endif /* PANORAMIX */
+#endif /* XINERAMA */
 
 void
 DamageExtensionInit(void)
@@ -751,10 +751,10 @@ DamageExtensionInit(void)
             (EventSwapPtr) SDamageNotifyEvent;
         SetResourceTypeErrorValue(DamageExtType,
                                   extEntry->errorBase + BadDamage);
-#ifdef PANORAMIX
+#ifdef XINERAMA
         if (XRT_DAMAGE)
             SetResourceTypeErrorValue(XRT_DAMAGE,
                                       extEntry->errorBase + BadDamage);
-#endif
+#endif /* XINERAMA */
     }
 }
diff --git a/dbe/dbe.c b/dbe/dbe.c
index cdab3e9e51..29db4ecebe 100644
--- a/dbe/dbe.c
+++ b/dbe/dbe.c
@@ -1367,10 +1367,10 @@ DbeExtensionInit(void)
     int nStubbedScreens = 0;
     Bool ddxInitSuccess;
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (!noPanoramiXExtension)
         return;
-#endif
+#endif /* XINERAMA */
 
     /* Create the resource types. */
     dbeDrawableResType =
diff --git a/dix/colormap.c b/dix/colormap.c
index 7a00d14d64..1c3759853f 100644
--- a/dix/colormap.c
+++ b/dix/colormap.c
@@ -462,9 +462,9 @@ TellNoMap(WindowPtr pwin, Colormap * pmid)
             .u.colormap.state = ColormapUninstalled
         };
         xE.u.u.type = ColormapNotify;
-#ifdef PANORAMIX
+#ifdef XINERAMA
         if (noPanoramiXExtension || !pwin->drawable.pScreen->myNum)
-#endif
+#endif /* XINERAMA */
             DeliverEvents(pwin, &xE, 1, (WindowPtr) NULL);
         if (pwin->optional) {
             pwin->optional->colormap = None;
@@ -481,10 +481,10 @@ TellLostMap(WindowPtr pwin, void *value)
 {
     Colormap *pmid = (Colormap *) value;
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (!noPanoramiXExtension && pwin->drawable.pScreen->myNum)
         return WT_STOPWALKING;
-#endif
+#endif /* XINERAMA */
     if (wColormap(pwin) == *pmid) {
         /* This should be call to DeliverEvent */
         xEvent xE = {
@@ -506,10 +506,10 @@ TellGainedMap(WindowPtr pwin, void *value)
 {
     Colormap *pmid = (Colormap *) value;
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (!noPanoramiXExtension && pwin->drawable.pScreen->myNum)
         return WT_STOPWALKING;
-#endif
+#endif /* XINERAMA */
     if (wColormap(pwin) == *pmid) {
         /* This should be call to DeliverEvent */
         xEvent xE = {
diff --git a/dix/dispatch.c b/dix/dispatch.c
index eaac39b7c9..e0e6933a79 100644
--- a/dix/dispatch.c
+++ b/dix/dispatch.c
@@ -2618,9 +2618,9 @@ ProcAllocColor(ClientPtr client)
         if ((rc = AllocColor(pmap, &acr.red, &acr.green, &acr.blue,
                              &acr.pixel, client->index)))
             return rc;
-#ifdef PANORAMIX
+#ifdef XINERAMA
         if (noPanoramiXExtension || !pmap->pScreen->myNum)
-#endif
+#endif /* XINERAMA */
             WriteReplyToClient(client, sizeof(xAllocColorReply), &acr);
         return Success;
 
@@ -2659,9 +2659,9 @@ ProcAllocNamedColor(ClientPtr client)
                                  &ancr.screenRed, &ancr.screenGreen,
                                  &ancr.screenBlue, &ancr.pixel, client->index)))
                 return rc;
-#ifdef PANORAMIX
+#ifdef XINERAMA
             if (noPanoramiXExtension || !pcmp->pScreen->myNum)
-#endif
+#endif /* XINERAMA */
                 WriteReplyToClient(client, sizeof(xAllocNamedColorReply),
                                    &ancr);
             return Success;
@@ -2713,9 +2713,9 @@ ProcAllocColorCells(ClientPtr client)
             free(ppixels);
             return rc;
         }
-#ifdef PANORAMIX
+#ifdef XINERAMA
         if (noPanoramiXExtension || !pcmp->pScreen->myNum)
-#endif
+#endif /* XINERAMA */
         {
             xAllocColorCellsReply accr = {
                 .type = X_Reply,
@@ -2782,9 +2782,9 @@ ProcAllocColorPlanes(ClientPtr client)
             return rc;
         }
         acpr.length = bytes_to_int32(length);
-#ifdef PANORAMIX
+#ifdef XINERAMA
         if (noPanoramiXExtension || !pcmp->pScreen->myNum)
-#endif
+#endif /* XINERAMA */
         {
             WriteReplyToClient(client, sizeof(xAllocColorPlanesReply), &acpr);
             client->pSwapReplyFunc = (ReplySwapPtr) Swap32Write;
@@ -3717,12 +3717,12 @@ SendConnSetup(ClientPtr client, const char *reason)
 #endif
     /* fill in the "currentInputMask" */
     root = (xWindowRoot *) (lConnectionInfo + connBlockScreenStart);
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (noPanoramiXExtension)
         numScreens = screenInfo.numScreens;
     else
         numScreens = ((xConnSetup *) ConnectionInfo)->numRoots;
-#endif
+#endif /* XINERAMA */
 
     for (i = 0; i < numScreens; i++) {
         unsigned int j;
diff --git a/dix/dixfonts.c b/dix/dixfonts.c
index 9608e4b1fb..b7819120f2 100644
--- a/dix/dixfonts.c
+++ b/dix/dixfonts.c
@@ -1328,9 +1328,9 @@ doPolyText(ClientPtr client, PTclosurePtr c)
     if (c->err != Success)
         err = c->err;
     if (err != Success && c->client != serverClient) {
-#ifdef PANORAMIX
+#ifdef XINERAMA
         if (noPanoramiXExtension || !c->pGC->pScreen->myNum)
-#endif
+#endif /* XINERAMA */
             SendErrorToClient(c->client, c->reqType, 0, 0, err);
     }
     if (ClientIsAsleep(client)) {
diff --git a/dix/enterleave.c b/dix/enterleave.c
index c1e6ac600e..7cdd15b675 100644
--- a/dix/enterleave.c
+++ b/dix/enterleave.c
@@ -1242,10 +1242,10 @@ CoreFocusPointerRootNoneSwitch(DeviceIntPtr dev,
     int i;
     int nscreens = screenInfo.numScreens;
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (!noPanoramiXExtension)
         nscreens = 1;
-#endif
+#endif /* XINERAMA */
 
     for (i = 0; i < nscreens; i++) {
         root = screenInfo.screens[i]->root;
@@ -1286,10 +1286,10 @@ CoreFocusToPointerRootOrNone(DeviceIntPtr dev, WindowPtr A,
     int i;
     int nscreens = screenInfo.numScreens;
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (!noPanoramiXExtension)
         nscreens = 1;
-#endif
+#endif /* XINERAMA */
 
     if (!HasFocus(A)) {
         WindowPtr child = FirstFocusChild(A);
@@ -1333,10 +1333,10 @@ CoreFocusFromPointerRootOrNone(DeviceIntPtr dev,
     int i;
     int nscreens = screenInfo.numScreens;
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (!noPanoramiXExtension)
         nscreens = 1;
-#endif
+#endif /* XINERAMA */
 
     for (i = 0; i < nscreens; i++) {
         root = screenInfo.screens[i]->root;
@@ -1423,10 +1423,10 @@ DeviceFocusEvents(DeviceIntPtr dev, WindowPtr from, WindowPtr to, int mode)
     in = (to == NoneWin) ? NotifyDetailNone : NotifyPointerRoot;
     /* wrong values if neither, but then not referenced */
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (!noPanoramiXExtension)
         nscreens = 1;
-#endif
+#endif /* XINERAMA */
 
     if ((to == NullWindow) || (to == PointerRootWin)) {
         if ((from == NullWindow) || (from == PointerRootWin)) {
diff --git a/dix/events.c b/dix/events.c
index 2a5c2683a9..505c38cdf3 100644
--- a/dix/events.c
+++ b/dix/events.c
@@ -116,10 +116,10 @@ Equipment Corporation.
 #include "cursorstr.h"
 
 #include "dixstruct.h"
-#ifdef PANORAMIX
+#ifdef XINERAMA
 #include "panoramiX.h"
 #include "panoramiXsrv.h"
-#endif
+#endif /* XINERAMA */
 #include "globals.h"
 
 #include <X11/extensions/XKBproto.h>
@@ -505,17 +505,17 @@ SyntheticMotion(DeviceIntPtr dev, int x, int y)
 {
     int screenno = 0;
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (!noPanoramiXExtension)
         screenno = dev->spriteInfo->sprite->screen->myNum;
-#endif
+#endif /* XINERAMA */
     PostSyntheticMotion(dev, x, y, screenno,
                         (syncEvents.playingEvents) ? syncEvents.time.
                         milliseconds : currentTime.milliseconds);
 
 }
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
 static void PostNewCursor(DeviceIntPtr pDev);
 
 static Bool
@@ -650,7 +650,7 @@ XineramaConfineCursorToWindow(DeviceIntPtr pDev,
     CheckPhysLimits(pDev, pSprite->current, generateEvents, FALSE, NULL);
 }
 
-#endif                          /* PANORAMIX */
+#endif /* XINERAMA */
 
 /**
  * Modifies the filter for the given protocol event type to the given masks.
@@ -726,12 +726,12 @@ CheckPhysLimits(DeviceIntPtr pDev, CursorPtr cursor, Bool generateEvents,
     if (!cursor)
         return;
     new = pSprite->hotPhys;
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (!noPanoramiXExtension)
         /* I don't care what the DDX has to say about it */
         pSprite->physLimits = pSprite->hotLimits;
     else
-#endif
+#endif /* XINERAMA */
     {
         if (pScreen)
             new.pScreen = pScreen;
@@ -755,16 +755,16 @@ CheckPhysLimits(DeviceIntPtr pDev, CursorPtr cursor, Bool generateEvents,
     if (pSprite->hotShape)
         ConfineToShape(pDev, pSprite->hotShape, &new.x, &new.y);
     if ((
-#ifdef PANORAMIX
+#ifdef XINERAMA
             noPanoramiXExtension &&
-#endif
+#endif /* XINERAMA */
             (pScreen != pSprite->hotPhys.pScreen)) ||
         (new.x != pSprite->hotPhys.x) || (new.y != pSprite->hotPhys.y)) {
-#ifdef PANORAMIX
+#ifdef XINERAMA
         if (!noPanoramiXExtension)
             XineramaSetCursorPosition(pDev, new.x, new.y, generateEvents);
         else
-#endif
+#endif /* XINERAMA */
         {
             if (pScreen != pSprite->hotPhys.pScreen)
                 pSprite->hotPhys = new;
@@ -775,11 +775,11 @@ CheckPhysLimits(DeviceIntPtr pDev, CursorPtr cursor, Bool generateEvents,
             SyntheticMotion(pDev, new.x, new.y);
     }
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
     /* Tell DDX what the limits are */
     if (!noPanoramiXExtension)
         XineramaConstrainCursor(pDev);
-#endif
+#endif /* XINERAMA */
 }
 
 static void
@@ -813,7 +813,7 @@ CheckVirtualMotion(DeviceIntPtr pDev, QdEventPtr qe, WindowPtr pWin)
     if (pWin) {
         BoxRec lims;
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
         if (!noPanoramiXExtension) {
             int x, y, off_x, off_y, i;
 
@@ -841,7 +841,7 @@ CheckVirtualMotion(DeviceIntPtr pDev, QdEventPtr qe, WindowPtr pWin)
             }
         }
         else
-#endif
+#endif /* XINERAMA */
         {
             if (pSprite->hot.pScreen != pWin->drawable.pScreen) {
                 pSprite->hot.pScreen = pWin->drawable.pScreen;
@@ -859,14 +859,14 @@ CheckVirtualMotion(DeviceIntPtr pDev, QdEventPtr qe, WindowPtr pWin)
         else if (pSprite->hot.y >= lims.y2)
             pSprite->hot.y = lims.y2 - 1;
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
         if (!noPanoramiXExtension) {
             if (RegionNumRects(&pSprite->Reg2) > 1)
                 reg = &pSprite->Reg2;
 
         }
         else
-#endif
+#endif /* XINERAMA */
         {
             if (wBoundingShape(pWin))
                 reg = &pWin->borderSize;
@@ -881,9 +881,9 @@ CheckVirtualMotion(DeviceIntPtr pDev, QdEventPtr qe, WindowPtr pWin)
             ev->root_y = pSprite->hot.y;
         }
     }
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (noPanoramiXExtension)   /* No typo. Only set the root win if disabled */
-#endif
+#endif /* XINERAMA */
         RootWindow(pDev->spriteInfo->sprite) = pSprite->hot.pScreen->root;
 }
 
@@ -900,12 +900,12 @@ ConfineCursorToWindow(DeviceIntPtr pDev, WindowPtr pWin, Bool generateEvents,
     else {
         ScreenPtr pScreen = pWin->drawable.pScreen;
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
         if (!noPanoramiXExtension) {
             XineramaConfineCursorToWindow(pDev, pWin, generateEvents);
             return;
         }
-#endif
+#endif /* XINERAMA */
         pSprite->hotLimits = *RegionExtents(&pWin->borderSize);
         pSprite->hotShape = wBoundingShape(pWin) ? &pWin->borderSize
             : NullRegion;
@@ -941,12 +941,12 @@ ChangeToCursor(DeviceIntPtr pDev, CursorPtr cursor)
             (pSprite->current->bits->yhot != cursor->bits->yhot))
             CheckPhysLimits(pDev, cursor, FALSE, pSprite->confined,
                             (ScreenPtr) NULL);
-#ifdef PANORAMIX
+#ifdef XINERAMA
         /* XXX: is this really necessary?? (whot) */
         if (!noPanoramiXExtension)
             pScreen = pSprite->screen;
         else
-#endif
+#endif /* XINERAMA */
             pScreen = pSprite->hotPhys.pScreen;
 
         (*pScreen->DisplayCursor) (pDev, pScreen, cursor);
@@ -1047,7 +1047,7 @@ GetSpritePosition(DeviceIntPtr pDev, int *px, int *py)
     *py = pSprite->hotPhys.y;
 }
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
 int
 XineramaGetCursorScreen(DeviceIntPtr pDev)
 {
@@ -1058,7 +1058,7 @@ XineramaGetCursorScreen(DeviceIntPtr pDev)
         return 0;
     }
 }
-#endif                          /* PANORAMIX */
+#endif /* XINERAMA */
 
 #define TIMESLOP (5 * 60 * 1000)        /* 5 minutes */
 
@@ -1182,12 +1182,12 @@ EnqueueEvent(InternalEvent *ev, DeviceIntPtr device)
     }
 
     if (event->type == ET_Motion) {
-#ifdef PANORAMIX
+#ifdef XINERAMA
         if (!noPanoramiXExtension) {
             event->root_x += pSprite->screen->x - screenInfo.screens[0]->x;
             event->root_y += pSprite->screen->y - screenInfo.screens[0]->y;
         }
-#endif
+#endif /* XINERAMA */
         pSprite->hotPhys.x = event->root_x;
         pSprite->hotPhys.y = event->root_y;
         /* do motion compression, but not if from different devices */
@@ -1245,7 +1245,7 @@ PlayReleasedEvents(void)
                 CheckVirtualMotion(pDev, qe, NullWindow);
             syncEvents.time.months = qe->months;
             syncEvents.time.milliseconds = qe->event->any.time;
-#ifdef PANORAMIX
+#ifdef XINERAMA
             /* Translate back to the sprite screen since processInputProc
                will translate from sprite screen to screen 0 upon reentry
                to the DIX layer */
@@ -1273,7 +1273,7 @@ PlayReleasedEvents(void)
                 }
 
             }
-#endif
+#endif /* XINERAMA */
             (*qe->device->public.processInputProc) (qe->event, qe->device);
             free(qe);
             for (dev = inputInfo.devices; dev && dev->deviceGrab.sync.frozen;
@@ -2496,7 +2496,7 @@ DeliverRawEvent(RawDeviceEvent *ev, DeviceIntPtr device)
    Only works for core events.
 */
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
 static int
 XineramaTryClientEventsResult(ClientPtr client,
                               GrabPtr grab, Mask mask, Mask filter)
@@ -2510,7 +2510,7 @@ XineramaTryClientEventsResult(ClientPtr client,
     }
     return 0;
 }
-#endif
+#endif /* XINERAMA */
 
 /**
  * Try to deliver events to the interested parties.
@@ -2530,11 +2530,11 @@ MaybeDeliverEventsToClient(WindowPtr pWin, xEvent *pEvents,
     if (pWin->eventMask & filter) {
         if (wClient(pWin) == dontClient)
             return 0;
-#ifdef PANORAMIX
+#ifdef XINERAMA
         if (!noPanoramiXExtension && pWin->drawable.pScreen->myNum)
             return XineramaTryClientEventsResult(wClient(pWin), NullGrab,
                                                  pWin->eventMask, filter);
-#endif
+#endif /* XINERAMA */
         if (XaceHook(XACE_RECEIVE_ACCESS, wClient(pWin), pWin, pEvents, count))
             return 1;           /* don't send, but pretend we did */
         return TryClientEvents(wClient(pWin), NULL, pEvents, count,
@@ -2544,11 +2544,11 @@ MaybeDeliverEventsToClient(WindowPtr pWin, xEvent *pEvents,
         if (other->mask & filter) {
             if (SameClient(other, dontClient))
                 return 0;
-#ifdef PANORAMIX
+#ifdef XINERAMA
             if (!noPanoramiXExtension && pWin->drawable.pScreen->myNum)
                 return XineramaTryClientEventsResult(rClient(other), NullGrab,
                                                      other->mask, filter);
-#endif
+#endif /* XINERAMA */
             if (XaceHook(XACE_RECEIVE_ACCESS, rClient(other), pWin, pEvents,
                          count))
                 return 1;       /* don't send, but pretend we did */
@@ -2921,10 +2921,10 @@ DeliverEvents(WindowPtr pWin, xEvent *xE, int count, WindowPtr otherParent)
     DeviceIntRec dummy;
     int deliveries;
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (!noPanoramiXExtension && pWin->drawable.pScreen->myNum)
         return count;
-#endif
+#endif /* XINERAMA */
 
     if (!count)
         return 0;
@@ -2989,7 +2989,7 @@ PointInBorderSize(WindowPtr pWin, int x, int y)
     if (RegionContainsPoint(&pWin->borderSize, x, y, &box))
         return TRUE;
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (!noPanoramiXExtension &&
         XineramaSetWindowPntrs(inputInfo.pointer, pWin)) {
         SpritePtr pSprite = inputInfo.pointer->spriteInfo->sprite;
@@ -3004,7 +3004,7 @@ PointInBorderSize(WindowPtr pWin, int x, int y)
                 return TRUE;
         }
     }
-#endif
+#endif /* XINERAMA */
     return FALSE;
 }
 
@@ -3144,7 +3144,7 @@ CheckMotion(DeviceEvent *ev, DeviceIntPtr pDev)
             return FALSE;
         }
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
         if (!noPanoramiXExtension) {
             /* Motion events entering DIX get translated to Screen 0
                coordinates.  Replayed events have already been
@@ -3153,7 +3153,7 @@ CheckMotion(DeviceEvent *ev, DeviceIntPtr pDev)
             ev->root_y += pSprite->screen->y - screenInfo.screens[0]->y;
         }
         else
-#endif
+#endif /* XINERAMA */
         {
             if (pSprite->hot.pScreen != pSprite->hotPhys.pScreen) {
                 pSprite->hot.pScreen = pSprite->hotPhys.pScreen;
@@ -3179,13 +3179,13 @@ CheckMotion(DeviceEvent *ev, DeviceIntPtr pDev)
 
         if ((pSprite->hotPhys.x != ev->root_x) ||
             (pSprite->hotPhys.y != ev->root_y)) {
-#ifdef PANORAMIX
+#ifdef XINERAMA
             if (!noPanoramiXExtension) {
                 XineramaSetCursorPosition(pDev, pSprite->hotPhys.x,
                                           pSprite->hotPhys.y, FALSE);
             }
             else
-#endif
+#endif /* XINERAMA */
             {
                 (*pSprite->hotPhys.pScreen->SetCursorPosition) (pDev,
                                                                 pSprite->
@@ -3245,7 +3245,7 @@ WindowsRestructured(void)
     }
 }
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
 /* This was added to support reconfiguration under Xdmx.  The problem is
  * that if the 0th screen (i.e., screenInfo.screens[0]) is moved to an origin
  * other than 0,0, the information in the private sprite structure must
@@ -3297,7 +3297,7 @@ ReinitializeRootWindow(WindowPtr win, int xoff, int yoff)
         pDev = pDev->next;
     }
 }
-#endif
+#endif /* XINERAMA */
 
 /**
  * Initialize a sprite for the given device and set it to some sane values. If
@@ -3396,7 +3396,7 @@ InitializeSprite(DeviceIntPtr pDev, WindowPtr pWin)
                                        pSprite->hot.y, FALSE);
         (*pScreen->DisplayCursor) (pDev, pScreen, pSprite->current);
     }
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (!noPanoramiXExtension) {
         pSprite->hotLimits.x1 = -screenInfo.screens[0]->x;
         pSprite->hotLimits.y1 = -screenInfo.screens[0]->y;
@@ -3410,7 +3410,7 @@ InitializeSprite(DeviceIntPtr pDev, WindowPtr pWin)
         RegionNull(&pSprite->Reg1);
         RegionNull(&pSprite->Reg2);
     }
-#endif
+#endif /* XINERAMA */
 }
 
 void FreeSprite(DeviceIntPtr dev)
@@ -3476,7 +3476,7 @@ UpdateSpriteForScreen(DeviceIntPtr pDev, ScreenPtr pScreen)
     (*pScreen->ConstrainCursor) (pDev, pScreen, &pSprite->physLimits);
     (*pScreen->DisplayCursor) (pDev, pScreen, pSprite->current);
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (!noPanoramiXExtension) {
         pSprite->hotLimits.x1 = -screenInfo.screens[0]->x;
         pSprite->hotLimits.y1 = -screenInfo.screens[0]->y;
@@ -3485,7 +3485,7 @@ UpdateSpriteForScreen(DeviceIntPtr pDev, ScreenPtr pScreen)
         pSprite->physLimits = pSprite->hotLimits;
         pSprite->screen = pScreen;
     }
-#endif
+#endif /* XINERAMA */
 }
 
 /*
@@ -3518,7 +3518,7 @@ NewCurrentScreen(DeviceIntPtr pDev, ScreenPtr newScreen, int x, int y)
 
     pSprite->hotPhys.x = x;
     pSprite->hotPhys.y = y;
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (!noPanoramiXExtension) {
         pSprite->hotPhys.x += newScreen->x - screenInfo.screens[0]->x;
         pSprite->hotPhys.y += newScreen->y - screenInfo.screens[0]->y;
@@ -3545,12 +3545,12 @@ NewCurrentScreen(DeviceIntPtr pDev, ScreenPtr newScreen, int x, int y)
         }
     }
     else
-#endif
+#endif /* XINERAMA */
     if (newScreen != pSprite->hotPhys.pScreen)
         ConfineCursorToWindow(ptr, newScreen->root, TRUE, FALSE);
 }
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
 
 static Bool
 XineramaPointInWindowIsVisible(WindowPtr pWin, int x, int y)
@@ -3657,7 +3657,7 @@ XineramaWarpPointer(ClientPtr client)
     return Success;
 }
 
-#endif
+#endif /* XINERAMA */
 
 /**
  * Server-side protocol handling for WarpPointer request.
@@ -3689,10 +3689,10 @@ ProcWarpPointer(ClientPtr client)
         dev = dev->lastSlave;
     pSprite = dev->spriteInfo->sprite;
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (!noPanoramiXExtension)
         return XineramaWarpPointer(client);
-#endif
+#endif /* XINERAMA */
 
     if (stuff->dstWid != None) {
         rc = dixLookupWindow(&dest, stuff->dstWid, client, DixGetAttrAccess);
@@ -3771,7 +3771,7 @@ BorderSizeNotEmpty(DeviceIntPtr pDev, WindowPtr pWin)
     if (RegionNotEmpty(&pWin->borderSize))
         return TRUE;
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (!noPanoramiXExtension && XineramaSetWindowPntrs(pDev, pWin)) {
         int i;
 
@@ -3781,7 +3781,7 @@ BorderSizeNotEmpty(DeviceIntPtr pDev, WindowPtr pWin)
                 return TRUE;
         }
     }
-#endif
+#endif /* XINERAMA */
     return FALSE;
 }
 
@@ -5418,7 +5418,7 @@ ProcQueryPointer(ClientPtr client)
         rep.winY = 0;
     }
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (!noPanoramiXExtension) {
         rep.rootX += screenInfo.screens[0]->x;
         rep.rootY += screenInfo.screens[0]->y;
@@ -5427,7 +5427,7 @@ ProcQueryPointer(ClientPtr client)
             rep.winY += screenInfo.screens[0]->y;
         }
     }
-#endif
+#endif /* XINERAMA */
 
     if (rc == BadAccess) {
         rep.mask = 0;
@@ -5977,10 +5977,10 @@ CheckCursorConfinement(WindowPtr pWin)
     WindowPtr confineTo;
     DeviceIntPtr pDev;
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (!noPanoramiXExtension && pWin->drawable.pScreen->myNum)
         return;
-#endif
+#endif /* XINERMA */
 
     for (pDev = inputInfo.devices; pDev; pDev = pDev->next) {
         if (DevHasCursor(pDev)) {
@@ -6041,11 +6041,11 @@ ProcRecolorCursor(ClientPtr client)
 
     for (nscr = 0; nscr < screenInfo.numScreens; nscr++) {
         pscr = screenInfo.screens[nscr];
-#ifdef PANORAMIX
+#ifdef XINERAMA
         if (!noPanoramiXExtension)
             displayed = (pscr == pSprite->screen);
         else
-#endif
+#endif /* XINERAMA */
             displayed = (pscr == pSprite->hotPhys.pScreen);
         (*pscr->RecolorCursor) (PickPointer(client), pscr, pCursor,
                                 (pCursor == pSprite->current) && displayed);
@@ -6070,9 +6070,9 @@ ProcRecolorCursor(ClientPtr client)
 void
 WriteEventsToClient(ClientPtr pClient, int count, xEvent *events)
 {
-#ifdef PANORAMIX
+#ifdef XINERAMA
     xEvent eventCopy;
-#endif
+#endif /* XINERAMA */
     xEvent *eventTo, *eventFrom;
     int i, eventlength = sizeof(xEvent);
 
@@ -6086,7 +6086,7 @@ WriteEventsToClient(ClientPtr pClient, int count, xEvent *events)
     /* Let XKB rewrite the state, as it depends on client preferences. */
     XkbFilterEvents(pClient, count, events);
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (!noPanoramiXExtension &&
         (screenInfo.screens[0]->x || screenInfo.screens[0]->y)) {
         switch (events->u.u.type) {
@@ -6117,7 +6117,7 @@ WriteEventsToClient(ClientPtr pClient, int count, xEvent *events)
             break;
         }
     }
-#endif
+#endif /* XINERAMA */
 
     if (EventCallback) {
         EventInfoRec eventinfo;
diff --git a/dix/getevents.c b/dix/getevents.c
index c39ef33716..91f22abfa7 100644
--- a/dix/getevents.c
+++ b/dix/getevents.c
@@ -55,10 +55,10 @@
 #include <X11/extensions/XKBproto.h>
 #include "xkbsrv.h"
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
 #include "panoramiX.h"
 #include "panoramiXsrv.h"
-#endif
+#endif /* XINERAMA */
 
 #include <X11/extensions/XI.h>
 #include <X11/extensions/XI2.h>
@@ -2139,7 +2139,7 @@ PostSyntheticMotion(DeviceIntPtr pDev,
 {
     DeviceEvent ev;
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
     /* Translate back to the sprite screen since processInputProc
        will translate from sprite screen to screen 0 upon reentry
        to the DIX layer. */
@@ -2147,7 +2147,7 @@ PostSyntheticMotion(DeviceIntPtr pDev,
         x += screenInfo.screens[0]->x - screenInfo.screens[screen]->x;
         y += screenInfo.screens[0]->y - screenInfo.screens[screen]->y;
     }
-#endif
+#endif /* XINERAMA */
 
     memset(&ev, 0, sizeof(DeviceEvent));
     init_device_event(&ev, pDev, time, EVENT_SOURCE_NORMAL);
diff --git a/dix/main.c b/dix/main.c
index 5964120c65..1b857b431f 100644
--- a/dix/main.c
+++ b/dix/main.c
@@ -106,11 +106,11 @@ Equipment Corporation.
 #include "registry.h"
 #include "client.h"
 #include "exevents.h"
-#ifdef PANORAMIX
+#ifdef XINERAMA
 #include "panoramiXsrv.h"
 #else
 #include "dixevents.h"          /* InitEvents() */
-#endif
+#endif /* XINERAMA */
 
 #ifdef DPMSExtension
 #include <X11/extensions/dpmsconst.h>
@@ -231,13 +231,13 @@ dix_main(int argc, char *argv[], char *envp[])
             FatalError("could not open default cursor font");
         }
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
         /*
          * Consolidate window and colourmap information for each screen
          */
         if (!noPanoramiXExtension)
             PanoramiXConsolidate();
-#endif
+#endif /* XINERAMA */
 
         for (i = 0; i < screenInfo.numScreens; i++)
             InitRootWindow(screenInfo.screens[i]->root);
@@ -251,14 +251,14 @@ dix_main(int argc, char *argv[], char *envp[])
 
         dixCloseRegistry();
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
         if (!noPanoramiXExtension) {
             if (!PanoramiXCreateConnectionBlock()) {
                 FatalError("could not create connection block info");
             }
         }
         else
-#endif
+#endif /* XINERAMA */
         {
             if (!CreateConnectionBlock()) {
                 FatalError("could not create connection block info");
@@ -280,7 +280,7 @@ dix_main(int argc, char *argv[], char *envp[])
         FreeScreenSaverTimer();
         CloseDownExtensions();
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
         {
             Bool remember_it = noPanoramiXExtension;
 
@@ -290,7 +290,7 @@ dix_main(int argc, char *argv[], char *envp[])
         }
 #else
         FreeAllResources();
-#endif
+#endif /* XINERAMA */
 
         CloseInput();
 
diff --git a/dix/resource.c b/dix/resource.c
index 53c4fcfba5..05bcfb77cf 100644
--- a/dix/resource.c
+++ b/dix/resource.c
@@ -134,10 +134,10 @@ Equipment Corporation.
 #include "dixevents.h"
 #include "dixgrabs.h"
 #include "cursor.h"
-#ifdef PANORAMIX
+#ifdef XINERAMA
 #include "panoramiX.h"
 #include "panoramiXsrv.h"
-#endif
+#endif /* XINERAMA */
 #include "xace.h"
 #include <assert.h>
 #include "registry.h"
@@ -1176,7 +1176,7 @@ LegalNewID(XID id, ClientPtr client)
     void *val;
     int rc;
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
     XID minid, maxid;
 
     if (!noPanoramiXExtension) {
@@ -1186,7 +1186,7 @@ LegalNewID(XID id, ClientPtr client)
         if ((id >= minid) && (id <= maxid))
             return TRUE;
     }
-#endif                          /* PANORAMIX */
+#endif /* XINERAMA */
     if (client->clientAsMask == (id & ~RESOURCE_ID_MASK)) {
         rc = dixLookupResourceByClass(&val, id, RC_ANY, serverClient,
                                       DixGetAttrAccess);
diff --git a/dix/window.c b/dix/window.c
index 284aa6dd76..c751e62b93 100644
--- a/dix/window.c
+++ b/dix/window.c
@@ -116,10 +116,10 @@ Equipment Corporation.
 #include "gcstruct.h"
 #include "servermd.h"
 #include "mivalidate.h"
-#ifdef PANORAMIX
+#ifdef XINERAMA
 #include "panoramiX.h"
 #include "panoramiXsrv.h"
-#endif
+#endif /* XINERAMA */
 #include "dixevents.h"
 #include "globals.h"
 #include "mi.h"                 /* miPaintWindow */
@@ -2298,12 +2298,12 @@ ConfigureWindow(WindowPtr pWin, Mask mask, XID *vlist, ClientPtr client)
         };
         event.u.u.type = ConfigureRequest;
         event.u.u.detail = (mask & CWStackMode) ? smode : Above;
-#ifdef PANORAMIX
+#ifdef XINERAMA
         if (!noPanoramiXExtension && (!pParent || !pParent->parent)) {
             event.u.configureRequest.x += screenInfo.screens[0]->x;
             event.u.configureRequest.y += screenInfo.screens[0]->y;
         }
-#endif
+#endif /* XINERAMA */
         if (MaybeDeliverEventsToClient(pParent, &event, 1,
                                        SubstructureRedirectMask, client) == 1)
             return Success;
@@ -2381,12 +2381,12 @@ ConfigureWindow(WindowPtr pWin, Mask mask, XID *vlist, ClientPtr client)
             .u.configureNotify.override = pWin->overrideRedirect
         };
         event.u.u.type = ConfigureNotify;
-#ifdef PANORAMIX
+#ifdef XINERAMA
         if (!noPanoramiXExtension && (!pParent || !pParent->parent)) {
             event.u.configureNotify.x += screenInfo.screens[0]->x;
             event.u.configureNotify.y += screenInfo.screens[0]->y;
         }
-#endif
+#endif /* XINERAMA */
         DeliverEvents(pWin, &event, 1, NullWindow);
     }
     if (mask & CWBorderWidth) {
@@ -2526,12 +2526,12 @@ ReparentWindow(WindowPtr pWin, WindowPtr pParent,
         .u.reparent.override = pWin->overrideRedirect
     };
     event.u.u.type = ReparentNotify;
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (!noPanoramiXExtension && !pParent->parent) {
         event.u.reparent.x += screenInfo.screens[0]->x;
         event.u.reparent.y += screenInfo.screens[0]->y;
     }
-#endif
+#endif /* XINERAMA */
     DeliverEvents(pWin, &event, 1, pParent);
 
     /* take out of sibling chain */
@@ -2790,7 +2790,7 @@ UnrealizeTree(WindowPtr pWin, Bool fromConfigure)
         if (pChild->realized) {
             pChild->realized = FALSE;
             pChild->visibility = VisibilityNotViewable;
-#ifdef PANORAMIX
+#ifdef XINERAMA
             if (!noPanoramiXExtension && !pChild->drawable.pScreen->myNum) {
                 PanoramiXRes *win;
                 int rc = dixLookupResourceByType((void **) &win,
@@ -2801,7 +2801,7 @@ UnrealizeTree(WindowPtr pWin, Bool fromConfigure)
                 if (rc == Success)
                     win->u.win.visibility = VisibilityNotViewable;
             }
-#endif
+#endif /* XINERAMA */
             (*Unrealize) (pChild);
             DeleteWindowFromAnyEvents(pChild, FALSE);
             if (pChild->viewable) {
@@ -3018,7 +3018,7 @@ SendVisibilityNotify(WindowPtr pWin)
     xEvent event;
     unsigned int visibility = pWin->visibility;
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
     /* This is not quite correct yet, but it's close */
     if (!noPanoramiXExtension) {
         PanoramiXRes *win;
@@ -3079,7 +3079,7 @@ SendVisibilityNotify(WindowPtr pWin)
 
         win->u.win.visibility = visibility;
     }
-#endif
+#endif /* XINERAMA */
 
     event = (xEvent) {
         .u.visibility.window = pWin->drawable.id,
diff --git a/dri3/dri3.c b/dri3/dri3.c
index 1912529695..58f56ffdb9 100644
--- a/dri3/dri3.c
+++ b/dri3/dri3.c
@@ -75,10 +75,10 @@ dri3_extension_init(void)
     if (dri3_screen_generation != serverGeneration)
         return;
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (!noPanoramiXExtension)
         return;
-#endif
+#endif /* XINERAMA */
 
     extension = AddExtension(DRI3_NAME, DRI3NumberEvents, DRI3NumberErrors,
                              proc_dri3_dispatch, sproc_dri3_dispatch,
diff --git a/hw/xfree86/common/xf86Config.c b/hw/xfree86/common/xf86Config.c
index 41acb25aa2..fbc4a4761c 100644
--- a/hw/xfree86/common/xf86Config.c
+++ b/hw/xfree86/common/xf86Config.c
@@ -936,7 +936,7 @@ configServerFlags(XF86ConfFlagsPtr flagsconf, XF86OptionPtr layoutopts)
                i, MAX_TIME_IN_MIN);
 #endif
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
     from = X_DEFAULT;
     if (!noPanoramiXExtension)
         from = X_CMDLINE;
@@ -946,7 +946,7 @@ configServerFlags(XF86ConfFlagsPtr flagsconf, XF86OptionPtr layoutopts)
     }
     if (!noPanoramiXExtension)
         xf86Msg(from, "Xinerama: enabled\n");
-#endif
+#endif /* XINERAMA */
 
 #ifdef DRI2
     xf86Info.dri2 = FALSE;
diff --git a/hw/xfree86/common/xf86DGA.c b/hw/xfree86/common/xf86DGA.c
index fa70ba2f03..26682336aa 100644
--- a/hw/xfree86/common/xf86DGA.c
+++ b/hw/xfree86/common/xf86DGA.c
@@ -174,11 +174,11 @@ DGAInit(ScreenPtr pScreen, DGAFunctionPtr funcs, DGAModePtr modes, int num)
     for (i = 0; i < num; i++)
         modes[i].num = i + 1;
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (!noPanoramiXExtension)
         for (i = 0; i < num; i++)
             modes[i].flags &= ~DGA_PIXMAP_AVAILABLE;
-#endif
+#endif /* XINERAMA */
 
     return TRUE;
 }
@@ -223,11 +223,11 @@ DGAReInitModes(ScreenPtr pScreen, DGAModePtr modes, int num)
     for (i = 0; i < num; i++)
         modes[i].num = i + 1;
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (!noPanoramiXExtension)
         for (i = 0; i < num; i++)
             modes[i].flags &= ~DGA_PIXMAP_AVAILABLE;
-#endif
+#endif /* XINERAMA */
 
     return TRUE;
 }
diff --git a/hw/xfree86/common/xf86Mode.c b/hw/xfree86/common/xf86Mode.c
index 136cd15d01..733c159269 100644
--- a/hw/xfree86/common/xf86Mode.c
+++ b/hw/xfree86/common/xf86Mode.c
@@ -1625,10 +1625,10 @@ xf86ValidateModes(ScrnInfoPtr scrp, DisplayModePtr availModes,
     }
 
     /* Lookup each mode */
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (noPanoramiXExtension)
         validateAllDefaultModes = TRUE;
-#endif
+#endif /* XINERAMA */
 
     for (p = scrp->modes;; p = p->next) {
         Bool repeat;
diff --git a/hw/xfree86/common/xf86RandR.c b/hw/xfree86/common/xf86RandR.c
index 08f656b302..497063bec7 100644
--- a/hw/xfree86/common/xf86RandR.c
+++ b/hw/xfree86/common/xf86RandR.c
@@ -406,11 +406,11 @@ xf86RandRInit(ScreenPtr pScreen)
     XF86RandRInfoPtr randrp;
     ScrnInfoPtr scrp = xf86ScreenToScrn(pScreen);
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
     /* XXX disable RandR when using Xinerama */
     if (!noPanoramiXExtension)
         return TRUE;
-#endif
+#endif /* XINERAMA */
 
     xf86RandRKey = &xf86RandRKeyRec;
 
diff --git a/hw/xfree86/dri/dri.c b/hw/xfree86/dri/dri.c
index d1b092bdb4..f95f9cc1bf 100644
--- a/hw/xfree86/dri/dri.c
+++ b/hw/xfree86/dri/dri.c
@@ -378,7 +378,7 @@ DRIScreenInit(ScreenPtr pScreen, DRIInfoPtr pDRIInfo, int *pDRMFD)
         return FALSE;
     }
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
     /*
      * If Xinerama is on, don't allow DRI to initialise.  It won't be usable
      * anyway.
@@ -388,7 +388,7 @@ DRIScreenInit(ScreenPtr pScreen, DRIInfoPtr pDRIInfo, int *pDRMFD)
                   "Direct rendering is not supported when Xinerama is enabled\n");
         return FALSE;
     }
-#endif
+#endif /* XINERAMA */
     if (drm_server_inited == FALSE) {
         drmSetServerInfo(&DRIDRMServerInfo);
         drm_server_inited = TRUE;
diff --git a/hw/xfree86/dri2/dri2ext.c b/hw/xfree86/dri2/dri2ext.c
index 4f98639aa5..8611bcf0ac 100644
--- a/hw/xfree86/dri2/dri2ext.c
+++ b/hw/xfree86/dri2/dri2ext.c
@@ -683,10 +683,10 @@ DRI2ExtensionInit(void)
 {
     ExtensionEntry *dri2Extension;
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (!noPanoramiXExtension)
         return;
-#endif
+#endif /* XINERAMA */
 
     dri2Extension = AddExtension(DRI2_NAME,
                                  DRI2NumberEvents,
diff --git a/hw/xfree86/modes/xf86RandR12.c b/hw/xfree86/modes/xf86RandR12.c
index 39a38c741d..117c27c1ce 100644
--- a/hw/xfree86/modes/xf86RandR12.c
+++ b/hw/xfree86/modes/xf86RandR12.c
@@ -755,11 +755,11 @@ xf86RandR12CreateScreenResources(ScreenPtr pScreen)
     int width, height;
     int mmWidth, mmHeight;
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
     /* XXX disable RandR when using Xinerama */
     if (!noPanoramiXExtension)
         return TRUE;
-#endif
+#endif /* XINERAMA */
 
     config = XF86_CRTC_CONFIG_PTR(pScrn);
     randrp = XF86RANDRINFO(pScreen);
@@ -845,7 +845,7 @@ xf86RandR12Init(ScreenPtr pScreen)
     rrScrPrivPtr rp;
     XF86RandRInfoPtr randrp;
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
     /* XXX disable RandR when using Xinerama */
     if (!noPanoramiXExtension) {
         if (xf86NumScreens == 1)
@@ -853,7 +853,7 @@ xf86RandR12Init(ScreenPtr pScreen)
         else
             return TRUE;
     }
-#endif
+#endif /* XINERAMA */
 
     if (xf86RandR12Generation != serverGeneration)
         xf86RandR12Generation = serverGeneration;
diff --git a/include/cursor.h b/include/cursor.h
index 281d88ba0b..1a3868dc88 100644
--- a/include/cursor.h
+++ b/include/cursor.h
@@ -129,8 +129,8 @@ extern _X_EXPORT void GetSpritePosition(struct _DeviceIntRec * /* pDev */ ,
                                         int * /*px */ ,
                                         int * /*py */ );
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
 extern _X_EXPORT int XineramaGetCursorScreen(struct _DeviceIntRec *pDev);
-#endif                          /* PANORAMIX */
+#endif                          /* XINERAMA */
 
 #endif                          /* CURSOR_H */
diff --git a/include/dix.h b/include/dix.h
index 0dcd09b659..8b87cb2cdf 100644
--- a/include/dix.h
+++ b/include/dix.h
@@ -570,10 +570,10 @@ IsInterferingGrab(ClientPtr /* client */ ,
                   DeviceIntPtr /* dev */ ,
                   xEvent * /* events */ );
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
 extern _X_EXPORT void
 ReinitializeRootWindow(WindowPtr win, int xoff, int yoff);
-#endif
+#endif /* XINERAMA */
 
 #ifdef RANDR
 extern _X_EXPORT void
diff --git a/include/extinit.h b/include/extinit.h
index 59d18962fd..996fdab586 100644
--- a/include/extinit.h
+++ b/include/extinit.h
@@ -81,10 +81,10 @@ extern _X_EXPORT Bool noGlxExtension;
 extern void GlxExtensionInit(void);
 #endif
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
 extern _X_EXPORT Bool noPanoramiXExtension;
 extern void PanoramiXExtensionInit(void);
-#endif
+#endif /* XINERAMA */
 
 #ifdef RANDR
 extern _X_EXPORT Bool noRRExtension;
diff --git a/include/globals.h b/include/globals.h
index 341ce832c0..094a4668aa 100644
--- a/include/globals.h
+++ b/include/globals.h
@@ -30,9 +30,9 @@ extern _X_EXPORT char *SeatId;
 extern _X_EXPORT char *ConnectionInfo;
 extern _X_EXPORT sig_atomic_t inSignalContext;
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
 extern _X_EXPORT Bool PanoramiXExtensionDisabledHack;
-#endif
+#endif /* XINERAMA */
 
 #ifdef XSELINUX
 #define SELINUX_MODE_DEFAULT    0
diff --git a/include/input.h b/include/input.h
index fd5b7c4df3..ffde7abde7 100644
--- a/include/input.h
+++ b/include/input.h
@@ -548,9 +548,9 @@ extern _X_EXPORT int GetProximityEvents(InternalEvent *events,
 extern _X_EXPORT void QueueProximityEvents(DeviceIntPtr pDev,
                                            int type, const ValuatorMask *mask);
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
 _X_EXPORT
-#endif
+#endif /* XINERAMA */
 extern void PostSyntheticMotion(DeviceIntPtr pDev,
                                 int x, int y, int screen, unsigned long time);
 
diff --git a/include/inputstr.h b/include/inputstr.h
index 24dd48841e..7bd31c2624 100644
--- a/include/inputstr.h
+++ b/include/inputstr.h
@@ -223,13 +223,13 @@ typedef struct _SpriteRec {
     WindowPtr win;              /* window of logical position */
     HotSpot hot;                /* logical pointer position */
     HotSpot hotPhys;            /* physical pointer position */
-#ifdef PANORAMIX
+#ifdef XINERAMA
     ScreenPtr screen;           /* all others are in Screen 0 coordinates */
     RegionRec Reg1;             /* Region 1 for confining motion */
     RegionRec Reg2;             /* Region 2 for confining virtual motion */
     WindowPtr windows[MAXSCREENS];
     WindowPtr confineWin;       /* confine window */
-#endif
+#endif /* XINERAMA */
     /* The window trace information is used at dix/events.c to avoid having
      * to compute all the windows between the root and the current pointer
      * window each time a button or key goes down. The grabs on each of those
diff --git a/include/meson.build b/include/meson.build
index 236b953636..d71817ba0c 100644
--- a/include/meson.build
+++ b/include/meson.build
@@ -216,7 +216,7 @@ if build_glx
 endif
 conf_data.set('HAS_SHM', build_mitshm ? '1' : false)
 conf_data.set('MITSHM', build_mitshm ? '1' : false)
-conf_data.set('PANORAMIX', build_xinerama ? '1' : false)
+conf_data.set('XINERAMA', build_xinerama ? '1' : false)
 conf_data.set('PRESENT', '1')
 conf_data.set('RANDR', '1')
 conf_data.set('RES', build_res ? '1' : false)
diff --git a/include/xorg-server.h.meson.in b/include/xorg-server.h.meson.in
index 093801cad6..ac41657693 100644
--- a/include/xorg-server.h.meson.in
+++ b/include/xorg-server.h.meson.in
@@ -72,7 +72,7 @@
 #mesondefine MITSHM
 
 /* Internal define for Xinerama */
-#mesondefine PANORAMIX
+#mesondefine XINERAMA
 
 /* Support Present extension */
 #mesondefine PRESENT
diff --git a/mi/miexpose.c b/mi/miexpose.c
index 6239365b5f..e9817ccd85 100644
--- a/mi/miexpose.c
+++ b/mi/miexpose.c
@@ -93,10 +93,10 @@ Equipment Corporation.
 
 #include "globals.h"
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
 #include "panoramiX.h"
 #include "panoramiXsrv.h"
-#endif
+#endif /* XINERAMA */
 
 /*
     machine-independent graphics exposure code.  any device that uses
@@ -323,7 +323,7 @@ miSendExposures(WindowPtr pWin, RegionPtr pRgn, int dx, int dy)
         pe->u.expose.count = i;
     }
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (!noPanoramiXExtension) {
         int scrnum = pWin->drawable.pScreen->myNum;
         int x = 0, y = 0;
@@ -354,7 +354,7 @@ miSendExposures(WindowPtr pWin, RegionPtr pRgn, int dx, int dy)
                 pEvent[i].u.expose.y += y;
             }
     }
-#endif
+#endif /* XINERAMA */
 
     DeliverEvents(pWin, pEvent, numRects, NullWindow);
 
diff --git a/mi/miinitext.c b/mi/miinitext.c
index 26c1eb03c3..8cd11b097b 100644
--- a/mi/miinitext.c
+++ b/mi/miinitext.c
@@ -124,9 +124,9 @@ static const ExtensionModule staticExtensions[] = {
 #ifdef XCSECURITY
     {SecurityExtensionInit, "SECURITY", &noSecurityExtension},
 #endif
-#ifdef PANORAMIX
+#ifdef XINERAMA
     {PanoramiXExtensionInit, "XINERAMA", &noPanoramiXExtension},
-#endif
+#endif /* XINERAMA */
     /* must be before Render to layer DisplayCursor correctly */
     {XFixesExtensionInit, "XFIXES", &noXFixesExtension},
 #ifdef XF86BIGFONT
diff --git a/mi/mipointer.c b/mi/mipointer.c
index 8cf0035140..aca7e9bf42 100644
--- a/mi/mipointer.c
+++ b/mi/mipointer.c
@@ -394,9 +394,9 @@ miPointerWarpCursor(DeviceIntPtr pDev, ScreenPtr pScreen, int x, int y)
      * updated to the second screen, and we never receive any events.
      * (FDO bug #18668) */
     if (changedScreen
-#ifdef PANORAMIX
+#ifdef XINERAMA
         && noPanoramiXExtension
-#endif
+#endif /* XINERAMA */
         ) {
             DeviceIntPtr master = GetMaster(pDev, MASTER_POINTER);
             /* Hack for CVE-2023-5380: if we're moving
diff --git a/os/utils.c b/os/utils.c
index 1620442c13..8cb2b4f513 100644
--- a/os/utils.c
+++ b/os/utils.c
@@ -164,10 +164,10 @@ Bool noXFree86DRIExtension = FALSE;
 Bool noXFree86VidModeExtension = FALSE;
 #endif
 Bool noXFixesExtension = FALSE;
-#ifdef PANORAMIX
+#ifdef XINERAMA
 /* Xinerama is disabled by default unless enabled via +xinerama */
 Bool noPanoramiXExtension = TRUE;
-#endif
+#endif /* XINERAMA */
 #ifdef XSELINUX
 Bool noSELinuxExtension = FALSE;
 int selinuxEnforcingState = SELINUX_MODE_DEFAULT;
@@ -192,9 +192,9 @@ Bool enableIndirectGLX = FALSE;
 
 Bool AllowByteSwappedClients = FALSE;
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
 Bool PanoramiXExtensionDisabledHack = FALSE;
-#endif
+#endif /* XINERAMA */
 
 int auditTrailLevel = 1;
 
@@ -578,10 +578,10 @@ UseMsg(void)
     ErrorF("-v                     screen-saver without video blanking\n");
     ErrorF("-wr                    create root window with white background\n");
     ErrorF("-maxbigreqsize         set maximal bigrequest size \n");
-#ifdef PANORAMIX
+#ifdef XINERAMA
     ErrorF("+xinerama              Enable XINERAMA extension\n");
     ErrorF("-xinerama              Disable XINERAMA extension\n");
-#endif
+#endif /* XINERAMA */
     ErrorF
         ("-dumbSched             Disable smart scheduling and threaded input, enable old behavior\n");
     ErrorF("-schedInterval int     Set scheduler interval in msec\n");
@@ -980,7 +980,7 @@ ProcessCommandLine(int argc, char *argv[])
                 UseMsg();
             }
         }
-#ifdef PANORAMIX
+#ifdef XINERAMA
         else if (strcmp(argv[i], "+xinerama") == 0) {
             noPanoramiXExtension = FALSE;
         }
@@ -990,7 +990,7 @@ ProcessCommandLine(int argc, char *argv[])
         else if (strcmp(argv[i], "-disablexineramaextension") == 0) {
             PanoramiXExtensionDisabledHack = TRUE;
         }
-#endif
+#endif /* XINERAMA */
         else if (strcmp(argv[i], "-I") == 0) {
             /* ignore all remaining arguments */
             break;
diff --git a/present/present_screen.c b/present/present_screen.c
index ef56ff779a..f193d9e4e4 100644
--- a/present/present_screen.c
+++ b/present/present_screen.c
@@ -243,10 +243,10 @@ present_extension_init(void)
     ExtensionEntry *extension;
     int i;
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (!noPanoramiXExtension)
         return;
-#endif
+#endif /* XINERAMA */
 
     extension = AddExtension(PRESENT_NAME, PresentNumberEvents, PresentNumberErrors,
                              proc_present_dispatch, sproc_present_dispatch,
diff --git a/randr/randr.c b/randr/randr.c
index 6d02c25777..65db0cc807 100644
--- a/randr/randr.c
+++ b/randr/randr.c
@@ -446,9 +446,9 @@ RRExtensionInit(void)
     RRCrtcInitErrorValue();
     RROutputInitErrorValue();
     RRProviderInitErrorValue();
-#ifdef PANORAMIX
+#ifdef XINERAMA
     RRXineramaExtensionInit();
-#endif
+#endif /* XINERAMA */
 }
 
 void
diff --git a/randr/rrxinerama.c b/randr/rrxinerama.c
index 5f01e953c9..675a1125fb 100644
--- a/randr/rrxinerama.c
+++ b/randr/rrxinerama.c
@@ -414,10 +414,10 @@ SProcRRXineramaDispatch(ClientPtr client)
 void
 RRXineramaExtensionInit(void)
 {
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (!noPanoramiXExtension)
         return;
-#endif
+#endif /* XINERAMA */
 
     if (noRRXineramaExtension)
       return;
diff --git a/record/record.c b/record/record.c
index e123867a7d..edef2e98e0 100644
--- a/record/record.c
+++ b/record/record.c
@@ -49,12 +49,12 @@ and Jim Haggerty of Metheus.
 #include <stdio.h>
 #include <assert.h>
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
 #include "globals.h"
 #include "panoramiX.h"
 #include "panoramiXsrv.h"
 #include "cursor.h"
-#endif
+#endif /* XINERAMA */
 
 #include "protocol-versions.h"
 
@@ -713,7 +713,7 @@ RecordSendProtocolEvents(RecordClientsAndProtocolPtr pRCAP,
             xEvent swappedEvent;
             xEvent *pEvToRecord = pev;
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
             xEvent shiftedEvent;
 
             if (!noPanoramiXExtension &&
@@ -730,7 +730,7 @@ RecordSendProtocolEvents(RecordClientsAndProtocolPtr pRCAP,
                     screenInfo.screens[scr]->y - screenInfo.screens[0]->y;
                 pEvToRecord = &shiftedEvent;
             }
-#endif                          /* PANORAMIX */
+#endif /* XINERAMA */
 
             if (pContext->pRecordingClient->swapped) {
                 (*EventSwapVector[pEvToRecord->u.u.type & 0177])
diff --git a/render/picture.c b/render/picture.c
index 2be4b1954f..5b895ee212 100644
--- a/render/picture.c
+++ b/render/picture.c
@@ -41,9 +41,9 @@
 #include "servermd.h"
 #include "picturestr.h"
 #include "xace.h"
-#ifdef PANORAMIX
+#ifdef XINERAMA
 #include "panoramiXsrv.h"
-#endif
+#endif /* XINERAMA */
 
 DevPrivateKeyRec PictureScreenPrivateKeyRec;
 DevPrivateKeyRec PictureWindowPrivateKeyRec;
@@ -1001,7 +1001,7 @@ CreateConicalGradientPicture(Picture pid, xPointFixed * center, xFixed angle,
 static int
 cpAlphaMap(void **result, XID id, ScreenPtr screen, ClientPtr client, Mask mode)
 {
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (!noPanoramiXExtension) {
         PanoramiXRes *res;
         int err = dixLookupResourceByType((void **)&res, id, XRT_PICTURE,
@@ -1010,14 +1010,14 @@ cpAlphaMap(void **result, XID id, ScreenPtr screen, ClientPtr client, Mask mode)
             return err;
         id = res->info[screen->myNum].id;
     }
-#endif
+#endif /* XINERAMA */
     return dixLookupResourceByType(result, id, PictureType, client, mode);
 }
 
 static int
 cpClipMask(void **result, XID id, ScreenPtr screen, ClientPtr client, Mask mode)
 {
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (!noPanoramiXExtension) {
         PanoramiXRes *res;
         int err = dixLookupResourceByType((void **)&res, id, XRT_PIXMAP,
@@ -1026,7 +1026,7 @@ cpClipMask(void **result, XID id, ScreenPtr screen, ClientPtr client, Mask mode)
             return err;
         id = res->info[screen->myNum].id;
     }
-#endif
+#endif /* XINERAMA */
     return dixLookupResourceByType(result, id, RT_PIXMAP, client, mode);
 }
 
diff --git a/render/picturestr.h b/render/picturestr.h
index dd25a272d1..3ac7960195 100644
--- a/render/picturestr.h
+++ b/render/picturestr.h
@@ -545,10 +545,10 @@ CreateConicalGradientPicture(Picture pid,
                              int nStops,
                              xFixed * stops, xRenderColor * colors, int *error);
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
 extern void PanoramiXRenderInit(void);
 extern void PanoramiXRenderReset(void);
-#endif
+#endif /* XINERAMA */
 
 /*
  * matrix.c
diff --git a/render/render.c b/render/render.c
index 456f156d43..eb68b1d3bb 100644
--- a/render/render.c
+++ b/render/render.c
@@ -48,10 +48,10 @@
 #include "xace.h"
 #include "protocol-versions.h"
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
 #include "panoramiX.h"
 #include "panoramiXsrv.h"
-#endif
+#endif /* XINERAMA */
 
 #include <stdint.h>
 
@@ -219,9 +219,9 @@ typedef struct _RenderClient {
 
 #define GetRenderClient(pClient) ((RenderClientPtr)dixLookupPrivate(&(pClient)->devPrivates, RenderClientPrivateKey))
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
 RESTYPE XRT_PICTURE;
-#endif
+#endif /* XINERAMA */
 
 void
 RenderExtensionInit(void)
@@ -242,10 +242,10 @@ RenderExtensionInit(void)
     if (!extEntry)
         return;
     RenderErrBase = extEntry->errorBase;
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (XRT_PICTURE)
         SetResourceTypeErrorValue(XRT_PICTURE, RenderErrBase + BadPicture);
-#endif
+#endif /* XINERAMA */
     SetResourceTypeErrorValue(PictureType, RenderErrBase + BadPicture);
     SetResourceTypeErrorValue(PictFormatType, RenderErrBase + BadPictFormat);
     SetResourceTypeErrorValue(GlyphSetType, RenderErrBase + BadGlyphSet);
@@ -330,14 +330,14 @@ ProcRenderQueryPictFormats(ClientPtr client)
 
     REQUEST_SIZE_MATCH(xRenderQueryPictFormatsReq);
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
     if (noPanoramiXExtension)
         numScreens = screenInfo.numScreens;
     else
         numScreens = ((xConnSetup *) ConnectionInfo)->numRoots;
 #else
     numScreens = screenInfo.numScreens;
-#endif
+#endif /* XINERAMA */
     ndepth = nformat = nvisual = 0;
     for (s = 0; s < numScreens; s++) {
         pScreen = screenInfo.screens[s];
@@ -2573,7 +2573,7 @@ SProcRenderDispatch(ClientPtr client)
         return BadRequest;
 }
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
 #define VERIFY_XIN_PICTURE(pPicture, pid, client, mode) {\
     int rc = dixLookupResourceByType((void **)&(pPicture), pid,\
                                      XRT_PICTURE, client, mode);\
@@ -3321,4 +3321,4 @@ PanoramiXRenderReset(void)
     RenderErrBase = 0;
 }
 
-#endif                          /* PANORAMIX */
+#endif /* XINERAMA */
diff --git a/xfixes/region.c b/xfixes/region.c
index 7c0a7d2fe1..33bc8f244f 100644
--- a/xfixes/region.c
+++ b/xfixes/region.c
@@ -815,7 +815,7 @@ SProcXFixesExpandRegion(ClientPtr client)
     return (*ProcXFixesVector[stuff->xfixesReqType]) (client);
 }
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
 #include "panoramiX.h"
 #include "panoramiXsrv.h"
 
@@ -925,4 +925,4 @@ PanoramiXFixesSetPictureClipRegion(ClientPtr client)
     return result;
 }
 
-#endif
+#endif /* XINERAMA */
diff --git a/xfixes/xfixes.c b/xfixes/xfixes.c
index 3d044f918d..a7012816cc 100644
--- a/xfixes/xfixes.c
+++ b/xfixes/xfixes.c
@@ -254,7 +254,7 @@ XFixesExtensionInit(void)
     }
 }
 
-#ifdef PANORAMIX
+#ifdef XINERAMA
 
 int (*PanoramiXSaveXFixesVector[XFixesNumberRequests]) (ClientPtr);
 
@@ -284,4 +284,4 @@ PanoramiXFixesReset(void)
         ProcXFixesVector[i] = PanoramiXSaveXFixesVector[i];
 }
 
-#endif
+#endif /* XINERAMA */
diff --git a/xfixes/xfixesint.h b/xfixes/xfixesint.h
index a1dd6fe63d..5d64e94d18 100644
--- a/xfixes/xfixesint.h
+++ b/xfixes/xfixesint.h
@@ -310,10 +310,10 @@ Bool
  XFixesShouldDisconnectClient(ClientPtr client);
 
 /* Xinerama */
-#ifdef PANORAMIX
+#ifdef XINERAMA
 extern int (*PanoramiXSaveXFixesVector[XFixesNumberRequests]) (ClientPtr);
 void PanoramiXFixesInit(void);
 void PanoramiXFixesReset(void);
-#endif
+#endif /* XINERAMA */
 
 #endif                          /* _XFIXESINT_H_ */
-- 
GitLab

