From f37448e30d3904c439152cb64820ad0b277dc663 Mon Sep 17 00:00:00 2001
From: Konstantin <ria.freelander@gmail.com>
Date: Thu, 21 Sep 2023 18:06:14 +0300
Subject: [PATCH 1/5] glamor_egl: add RenderingAPI option

This allows to choose between Glamor on OpenGL and Glamor on OpenGL ES
via an option.

Reviewed-by: Adam Jackson <ajax@redhat.com>
Signed-off-by: Konstantin <ria.freelander@gmail.com>
---
 glamor/glamor_egl.c | 37 +++++++++++++++++++++++++++++++++----
 1 file changed, 33 insertions(+), 4 deletions(-)

diff --git a/glamor/glamor_egl.c b/glamor/glamor_egl.c
index c35b10d832..9fdc33b861 100644
--- a/glamor/glamor_egl.c
+++ b/glamor/glamor_egl.c
@@ -28,6 +28,7 @@
  */
 
 #include "dix-config.h"
+#include <strings.h>
 
 #define GLAMOR_FOR_XORG
 #include <unistd.h>
@@ -955,11 +956,24 @@ glamor_egl_free_screen(ScrnInfoPtr scrn)
     }
 }
 
+enum {
+    GLAMOREGLOPT_RENDERING_API,
+};
+
+static const OptionInfoRec GlamorEGLOptions[] = {
+    { GLAMOREGLOPT_RENDERING_API, "RenderingAPI", OPTV_STRING, {0}, FALSE },
+    { -1, NULL, OPTV_NONE, {0}, FALSE },
+};
+
 Bool
 glamor_egl_init(ScrnInfoPtr scrn, int fd)
 {
     struct glamor_egl_screen_private *glamor_egl;
     const GLubyte *renderer;
+    OptionInfoPtr options;
+    const char *api = NULL;
+    Bool es_allowed = TRUE;
+    Bool force_es = FALSE;
 
     glamor_egl = calloc(sizeof(*glamor_egl), 1);
     if (glamor_egl == NULL)
@@ -967,6 +981,16 @@ glamor_egl_init(ScrnInfoPtr scrn, int fd)
     if (xf86GlamorEGLPrivateIndex == -1)
         xf86GlamorEGLPrivateIndex = xf86AllocateScrnInfoPrivateIndex();
 
+    options = xnfalloc(sizeof(GlamorEGLOptions));
+    memcpy(options, GlamorEGLOptions, sizeof(GlamorEGLOptions));
+    xf86ProcessOptions(scrn->scrnIndex, scrn->options, options);
+    api = xf86GetOptValString(options, GLAMOREGLOPT_RENDERING_API);
+    if (api && !strncasecmp(api, "gles", 4))
+        force_es = TRUE;
+    else if (api && !strncasecmp(api, "gl", 2))
+        es_allowed = FALSE;
+    free(options);
+
     scrn->privates[xf86GlamorEGLPrivateIndex].ptr = glamor_egl;
     glamor_egl->fd = fd;
     glamor_egl->gbm = gbm_create_device(glamor_egl->fd);
@@ -1004,6 +1028,9 @@ glamor_egl_init(ScrnInfoPtr scrn, int fd)
     GLAMOR_CHECK_EGL_EXTENSION(KHR_surfaceless_context);
     GLAMOR_CHECK_EGL_EXTENSION(KHR_no_config_context);
 
+    if(force_es)
+        goto es2;
+
     if (eglBindAPI(EGL_OPENGL_API)) {
         static const EGLint config_attribs_core[] = {
             EGL_CONTEXT_OPENGL_PROFILE_MASK_KHR,
@@ -1039,20 +1066,22 @@ glamor_egl_init(ScrnInfoPtr scrn, int fd)
 
         if (epoxy_gl_version() < 21) {
             xf86DrvMsg(scrn->scrnIndex, X_INFO,
-                       "glamor: Ignoring GL < 2.1, falling back to GLES.\n");
+                       "glamor: Ignoring GL < 2.1, %s.\n",
+                       es_allowed ? "falling back to GLES" : "giving up" );
             eglDestroyContext(glamor_egl->display, glamor_egl->context);
             glamor_egl->context = EGL_NO_CONTEXT;
         }
     }
 
-    if (glamor_egl->context == EGL_NO_CONTEXT) {
+es2:
+    if (glamor_egl->context == EGL_NO_CONTEXT && es_allowed) {
         static const EGLint config_attribs[] = {
             EGL_CONTEXT_CLIENT_VERSION, 2,
             EGL_NONE
         };
         if (!eglBindAPI(EGL_OPENGL_ES_API)) {
             xf86DrvMsg(scrn->scrnIndex, X_ERROR,
-                       "glamor: Failed to bind either GL or GLES APIs.\n");
+                       "glamor: Failed to bind GL ES API.\n");
             goto error;
         }
 
@@ -1062,7 +1091,7 @@ glamor_egl_init(ScrnInfoPtr scrn, int fd)
 
         if (glamor_egl->context == EGL_NO_CONTEXT) {
             xf86DrvMsg(scrn->scrnIndex, X_ERROR,
-                       "glamor: Failed to create GL or GLES2 contexts\n");
+                       "glamor: Failed to create GL ES context\n");
             goto error;
         }
 
-- 
GitLab


From 464019ada2c07af4e272fc7cefc171dc6501997d Mon Sep 17 00:00:00 2001
From: Konstantin <ria.freelander@gmail.com>
Date: Thu, 21 Sep 2023 17:07:43 +0300
Subject: [PATCH 2/5] glamor_egl: add info message about context API

It is useful to know on what context we are running, and
we need to show it into xorg.log

Reviewed-by: Adam Jackson <ajax@redhat.com>
Signed-off-by: Konstantin <ria.freelander@gmail.com>
---
 glamor/glamor_egl.c | 12 ++++++++++++
 1 file changed, 12 insertions(+)

diff --git a/glamor/glamor_egl.c b/glamor/glamor_egl.c
index 9fdc33b861..34fc2fc6db 100644
--- a/glamor/glamor_egl.c
+++ b/glamor/glamor_egl.c
@@ -1073,6 +1073,13 @@ glamor_egl_init(ScrnInfoPtr scrn, int fd)
         }
     }
 
+    if (glamor_egl->context != EGL_NO_CONTEXT) {
+        xf86DrvMsg(scrn->scrnIndex, X_INFO,
+            "glamor: Using OpenGL %d.%d context.\n",
+            epoxy_gl_version() / 10,
+            epoxy_gl_version() % 10);
+    }
+
 es2:
     if (glamor_egl->context == EGL_NO_CONTEXT && es_allowed) {
         static const EGLint config_attribs[] = {
@@ -1101,6 +1108,11 @@ es2:
                        "Failed to make GLES2 context current\n");
             goto error;
         }
+
+        xf86DrvMsg(scrn->scrnIndex, X_INFO,
+                "glamor: Using OpenGL ES %d.%d context.\n",
+                epoxy_gl_version() / 10,
+                epoxy_gl_version() % 10);
     }
 
     renderer = glGetString(GL_RENDERER);
-- 
GitLab


From 37e6c999838576b4bbd5cc94a316e4953a35c0b1 Mon Sep 17 00:00:00 2001
From: Konstantin <ria.freelander@gmail.com>
Date: Fri, 22 Sep 2023 12:29:52 +0300
Subject: [PATCH 3/5] xorg.conf.man: document new RenderingAPI option

Reviewed-by: Adam Jackson <ajax@redhat.com>
Signed-off-by: Konstantin <ria.freelander@gmail.com>
---
 hw/xfree86/man/xorg.conf.man | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/hw/xfree86/man/xorg.conf.man b/hw/xfree86/man/xorg.conf.man
index d057f26ecd..7c5e5391e1 100644
--- a/hw/xfree86/man/xorg.conf.man
+++ b/hw/xfree86/man/xorg.conf.man
@@ -2096,6 +2096,14 @@ use for the screen. This may be used to select an alternate implementation
 for development, debugging, or alternate feature sets.
 Default: mesa.
 .TP 7
+.BI "Option \*RenderingAPI\*q \*q" string \*q
+This option specifies an rendering API for use in conjunction with Glamor
+accel method. You can specify OpenGL with a value "gl" and OpenGL ES with a 
+value "gles", and the default is both, when Glamor fallbacks to gles if GL 2.1 is
+not available. This may be useful for embedded and old cards, where GL ES
+feature set works faster than GL feature set.
+Default: gl.
+.TP 7
 .BI "Option \*qInitPrimary\*q \*q" boolean \*q
 Use the Int10 module to initialize the primary graphics card.
 Normally, only secondary cards are soft-booted using the Int10 module, as the
-- 
GitLab


From 16104b6ab7af8ecb90da54c2cae23dde92c11950 Mon Sep 17 00:00:00 2001
From: Konstantin <ria.freelander@gmail.com>
Date: Fri, 22 Sep 2023 12:24:20 +0300
Subject: [PATCH 4/5] Xwayland: add "gles" command line option

This will force Glamor run on GL ES even if GL version is more than 2.0

Signed-off-by: Konstantin <ria.freelander@gmail.com>
---
 hw/xwayland/xwayland-glamor-gbm.c |  6 ++++++
 hw/xwayland/xwayland-screen.c     |  8 ++++++++
 hw/xwayland/xwayland-screen.h     |  5 +++++
 hw/xwayland/xwayland.c            | 10 ++++++++++
 4 files changed, 29 insertions(+)

diff --git a/hw/xwayland/xwayland-glamor-gbm.c b/hw/xwayland/xwayland-glamor-gbm.c
index cfcd39a354..d17c194f1f 100644
--- a/hw/xwayland/xwayland-glamor-gbm.c
+++ b/hw/xwayland/xwayland-glamor-gbm.c
@@ -1048,6 +1048,9 @@ xwl_glamor_maybe_destroy_context(struct xwl_screen *xwl_screen)
 static Bool
 xwl_glamor_try_big_gl_api(struct xwl_screen *xwl_screen)
 {
+    if (xwl_screen->gles)
+        return FALSE;
+
     static const EGLint config_attribs_core[] = {
         EGL_CONTEXT_OPENGL_PROFILE_MASK_KHR,
         EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT_KHR,
@@ -1093,6 +1096,9 @@ xwl_glamor_try_big_gl_api(struct xwl_screen *xwl_screen)
 static Bool
 xwl_glamor_try_gles_api(struct xwl_screen *xwl_screen)
 {
+    if (xwl_screen->big_gl)
+        return FALSE;
+
     const EGLint gles_attribs[] = {
         EGL_CONTEXT_CLIENT_VERSION,
         2,
diff --git a/hw/xwayland/xwayland-screen.c b/hw/xwayland/xwayland-screen.c
index cc14e0771e..960ff88b90 100644
--- a/hw/xwayland/xwayland-screen.c
+++ b/hw/xwayland/xwayland-screen.c
@@ -787,6 +787,14 @@ xwl_screen_init(ScreenPtr pScreen, int argc, char **argv)
             ErrorF("Xwayland glamor: this build does not have EGLStream support\n");
 #endif
         }
+#ifdef XWL_HAS_GLAMOR
+        else if (strcmp(argv[i], "-glamor") == 0) {
+            if (strncmp(argv[i + 1], "es", 2))
+                xwl_screen->gles = TRUE;
+            else if (strncmp(argv[i + 1], "gl", 2))
+                xwl_screen->big_gl = TRUE;
+        }
+#endif
         else if (strcmp(argv[i], "-force-xrandr-emulation") == 0) {
             xwl_screen->force_xrandr_emulation = 1;
         }
diff --git a/hw/xwayland/xwayland-screen.h b/hw/xwayland/xwayland-screen.h
index bd66dd6818..3f1cc6c8d5 100644
--- a/hw/xwayland/xwayland-screen.h
+++ b/hw/xwayland/xwayland-screen.h
@@ -145,6 +145,11 @@ struct xwl_screen {
     int libdecor_fd;
     struct libdecor *libdecor_context;
 #endif
+#ifdef XWL_HAS_GLAMOR
+    /* This options forces glamor to try only one rendering API. */
+    Bool gles;
+    Bool big_gl;
+#endif
 };
 
 /* Apps which use randr/vidmode to change the mode when going fullscreen,
diff --git a/hw/xwayland/xwayland.c b/hw/xwayland/xwayland.c
index 3f9c5c2699..47ce0664d7 100644
--- a/hw/xwayland/xwayland.c
+++ b/hw/xwayland/xwayland.c
@@ -102,6 +102,9 @@ ddxUseMsg(void)
     ErrorF("-eglstream             use eglstream backend for nvidia GPUs\n");
 #endif
     ErrorF("-shm                   use shared memory for passing buffers\n");
+#ifdef XWL_HAS_GLAMOR
+    ErrorF("-glamor api            use given API for Glamor acceleration. Incompatible with -shm option\n");
+#endif
     ErrorF("-verbose [n]           verbose startup messages\n");
     ErrorF("-version               show the server version and exit\n");
     ErrorF("-noTouchPointerEmulation  disable touch pointer emulation\n");
@@ -207,6 +210,13 @@ ddxProcessArgument(int argc, char *argv[], int i)
     else if (strcmp(argv[i], "-shm") == 0) {
         return 1;
     }
+#ifdef XWL_HAS_GLAMOR
+    else if (strcmp(argv[i], "-glamor") == 0) {
+        CHECK_FOR_REQUIRED_ARGUMENTS(1);
+        /* Only check here, actual work inside xwayland-screen.c */
+        return 2;
+    }
+#endif
     else if (strcmp(argv[i], "-verbose") == 0) {
         if (++i < argc && argv[i]) {
             char *end;
-- 
GitLab


From 17be550df232fef9ad388e8b9979f4b5a87d2007 Mon Sep 17 00:00:00 2001
From: Konstantin <ria.freelander@gmail.com>
Date: Fri, 22 Sep 2023 12:33:38 +0300
Subject: [PATCH 5/5] Xwayland: document new "gles" option

Signed-off-by: Konstantin <ria.freelander@gmail.com>
---
 hw/xwayland/man/Xwayland.man | 11 +++++++++++
 1 file changed, 11 insertions(+)

diff --git a/hw/xwayland/man/Xwayland.man b/hw/xwayland/man/Xwayland.man
index 9ecb650010..b530bb2971 100644
--- a/hw/xwayland/man/Xwayland.man
+++ b/hw/xwayland/man/Xwayland.man
@@ -80,6 +80,15 @@ Sets the geometry of the \fIXwayland\fP window to \fIWxH\fP when running rootful
 
 This option is not compatible with rootless mode (\fI-rootless\fP).
 .TP 8
+.B \-glamor \fIfd\fP
+Use given rendering API for Glamor acceleration. Possible options are \fIgl\fP and \fIes\fP.
+If \fIXwayland\fP was compiled with Glamor support, this option will instruct \fIXwayland\fP
+to use only requested API for Glamor. This works only for Glamor GBM backend. Without this
+option and without \fI-shm\fP option, \fIXwayland\fP tries the OpenGL rendering API first,
+and fallback to GL ES if GL version is less than 2.1.
+
+This option is not compatible with \fI-shm\fP option.
+.TP 8
 .B \-host-grab
 Disable host keyboard shorcuts and confine the pointer when running rootful.
 
@@ -123,6 +132,8 @@ to be an X window manager as well.
 .BI \-shm
 Force the shared memory backend instead of glamor (if available) for passing
 buffers to the Wayland server.
+
+This option is not compatible with \fI-glamor\fP option.
 .TP 8
 .BR \-verbose " [\fIn\fP]"
 Sets the verbosity level for information printed on stderr.  If the
-- 
GitLab

