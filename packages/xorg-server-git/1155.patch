From 5876776367fb06740eb86dbff42b3c72b8e26a69 Mon Sep 17 00:00:00 2001
From: Konstantin Pugin <ria.freelander@gmail.com>
Date: Thu, 21 Jul 2022 00:46:07 +0300
Subject: [PATCH 1/4] glamor: add glvnd_vendor private

This commit adds an ability to store a glvnd vendor in Glamor
structures, which can be used for initialize some vendor-based values
without hooking into DDX internals. Also this adds setting this value
into Xorg and Xwayland

Signed-off-by: Konstantin Pugin <ria.freelander@gmail.com>
Reviewed-by: Adam Jackson <ajax@redhat.com>
Acked-by: Emma Anholt <emma@anholt.net>
---
 glamor/glamor.c               | 16 ++++++++++++++++
 glamor/glamor.h               |  6 ++++++
 glamor/glamor_egl.c           |  5 +++++
 glamor/glamor_priv.h          |  2 ++
 hw/xwayland/xwayland-glamor.c |  1 +
 5 files changed, 30 insertions(+)

diff --git a/glamor/glamor.c b/glamor/glamor.c
index a2cee41a03..4d40f8a89f 100644
--- a/glamor/glamor.c
+++ b/glamor/glamor.c
@@ -951,6 +951,22 @@ glamor_fini(ScreenPtr screen)
     /* Do nothing currently. */
 }
 
+void
+glamor_set_glvnd_vendor(ScreenPtr screen, const char* vendor_name)
+{
+    glamor_screen_private *glamor_priv = glamor_get_screen_private(screen);
+
+    glamor_priv->glvnd_vendor = vendor_name;
+}
+
+const char*
+glamor_get_glvnd_vendor(ScreenPtr screen)
+{
+    glamor_screen_private *glamor_priv = glamor_get_screen_private(screen);
+
+    return glamor_priv->glvnd_vendor;
+}
+
 void
 glamor_enable_dri3(ScreenPtr screen)
 {
diff --git a/glamor/glamor.h b/glamor/glamor.h
index 31157471d1..a0b3783d9d 100644
--- a/glamor/glamor.h
+++ b/glamor/glamor.h
@@ -120,6 +120,12 @@ extern _X_EXPORT void glamor_clear_pixmap(PixmapPtr pixmap);
 
 extern _X_EXPORT void glamor_block_handler(ScreenPtr screen);
 
+/* This function should be called after glamor_init,
+ * but before adding a glamor GLX provider */
+extern _X_EXPORT void glamor_set_glvnd_vendor(ScreenPtr screen,
+                                              const char* vendor);
+extern _X_EXPORT const char* glamor_get_glvnd_vendor(ScreenPtr screen);
+
 extern _X_EXPORT PixmapPtr glamor_create_pixmap(ScreenPtr screen, int w, int h,
                                                 int depth, unsigned int usage);
 extern _X_EXPORT Bool glamor_destroy_pixmap(PixmapPtr pixmap);
diff --git a/glamor/glamor_egl.c b/glamor/glamor_egl.c
index c35b10d832..6efbc1c012 100644
--- a/glamor/glamor_egl.c
+++ b/glamor/glamor_egl.c
@@ -887,6 +887,7 @@ glamor_egl_screen_init(ScreenPtr screen, struct glamor_context *glamor_ctx)
 #ifdef DRI3
     glamor_screen_private *glamor_priv = glamor_get_screen_private(screen);
 #endif
+    const char* gbm_backend_name;
 
     glamor_egl->saved_close_screen = screen->CloseScreen;
     screen->CloseScreen = glamor_egl_close_screen;
@@ -899,6 +900,10 @@ glamor_egl_screen_init(ScreenPtr screen, struct glamor_context *glamor_ctx)
 
     glamor_ctx->make_current = glamor_egl_make_current;
 
+    gbm_backend_name = gbm_device_get_backend_name(glamor_egl->gbm);
+    /* Mesa uses "drm" as backend name, in that case, just do nothing */
+    if (gbm_backend_name && strcmp(gbm_backend_name, "drm") != 0)
+        glamor_set_glvnd_vendor(screen, gbm_backend_name);
 #ifdef DRI3
     /* Tell the core that we have the interfaces for import/export
      * of pixmaps.
diff --git a/glamor/glamor_priv.h b/glamor/glamor_priv.h
index d8da1a0c12..d5b070a1bf 100644
--- a/glamor/glamor_priv.h
+++ b/glamor/glamor_priv.h
@@ -329,6 +329,8 @@ typedef struct glamor_screen_private {
     int flags;
     ScreenPtr screen;
     int dri3_enabled;
+    /* glvnd vendor */
+    const char* glvnd_vendor;
 
     Bool suppress_gl_out_of_memory_logging;
     Bool logged_any_fbo_allocation_failure;
diff --git a/hw/xwayland/xwayland-glamor.c b/hw/xwayland/xwayland-glamor.c
index c6aa8eb172..b4fba65c05 100644
--- a/hw/xwayland/xwayland-glamor.c
+++ b/hw/xwayland/xwayland-glamor.c
@@ -77,6 +77,7 @@ glamor_egl_screen_init(ScreenPtr screen, struct glamor_context *glamor_ctx)
 {
     struct xwl_screen *xwl_screen = xwl_screen_get(screen);
 
+    glamor_set_glvnd_vendor(screen, xwl_screen->glvnd_vendor);
     glamor_enable_dri3(screen);
     glamor_ctx->ctx = xwl_screen->egl_context;
     glamor_ctx->display = xwl_screen->egl_display;
-- 
GitLab


From a84a4263d416e1716e354d7d3fe9557cccf4837e Mon Sep 17 00:00:00 2001
From: Adam Jackson <ajax@redhat.com>
Date: Wed, 26 Aug 2020 18:22:22 -0400
Subject: [PATCH 2/4] glamor: Lift the GLX EGL backend from Xwayland

This code is almost entirely ddx-agnostic already, and I'd like to use
it from the other EGL glamor consumers. Which, right now that's just
Xorg, but soon it'll be Xephyr too.

Acked-by: Emma Anholt <emma@anholt.net>
---
 .../glamor_glx_provider.c                     | 19 ++++++++++---------
 .../glamor_glx_provider.h                     |  4 ++--
 glamor/meson.build                            |  5 ++++-
 hw/xwayland/meson.build                       |  4 ----
 hw/xwayland/xwayland-glamor.c                 |  2 +-
 5 files changed, 17 insertions(+), 17 deletions(-)
 rename hw/xwayland/xwayland-glx.c => glamor/glamor_glx_provider.c (97%)
 rename hw/xwayland/xwayland-glx.h => glamor/glamor_glx_provider.h (94%)

diff --git a/hw/xwayland/xwayland-glx.c b/glamor/glamor_glx_provider.c
similarity index 97%
rename from hw/xwayland/xwayland-glx.c
rename to glamor/glamor_glx_provider.c
index 4689b9ed6e..77ccc3c8b1 100644
--- a/hw/xwayland/xwayland-glx.c
+++ b/glamor/glamor_glx_provider.c
@@ -30,21 +30,18 @@
  * can do, which often does not include things like multisample visuals.
  */
 
-#include <xwayland-config.h>
+#include <dix-config.h>
 
 #define MESA_EGL_NO_X11_HEADERS
 #define EGL_NO_X11
-// #include <EGL/egl.h>
 #include <epoxy/egl.h>
 #include "glxserver.h"
 #include "glxutil.h"
 #include "compint.h"
 #include <X11/extensions/composite.h>
-#include "glamor_context.h"
+#include "glamor_priv.h"
 #include "glamor.h"
 
-#include "xwayland-screen.h"
-
 /* Can't get these from <GL/glx.h> since it pulls in client headers */
 #define GLX_RGBA_BIT		0x00000001
 #define GLX_WINDOW_BIT		0x00000001
@@ -364,12 +361,16 @@ static __GLXscreen *
 egl_screen_probe(ScreenPtr pScreen)
 {
     struct egl_screen *screen;
-    struct xwl_screen *xwl_screen = xwl_screen_get(pScreen);
+    glamor_screen_private *glamor_screen;
     __GLXscreen *base;
 
     if (enableIndirectGLX)
         return NULL; /* not implemented */
 
+    glamor_screen = glamor_get_screen_private(pScreen);
+    if (!glamor_screen)
+        return NULL;
+
     if (!(screen = calloc(1, sizeof *screen)))
         return NULL;
 
@@ -378,7 +379,7 @@ egl_screen_probe(ScreenPtr pScreen)
     base->createDrawable = egl_create_glx_drawable;
     /* base.swapInterval = NULL; */
 
-    screen->display = xwl_screen->glamor_ctx->display;
+    screen->display = glamor_screen->ctx.display;
 
     __glXInitExtensionEnableBits(screen->base.glx_enable_bits);
     __glXEnableExtension(base->glx_enable_bits, "GLX_ARB_context_flush_control");
@@ -402,8 +403,8 @@ egl_screen_probe(ScreenPtr pScreen)
         return NULL;
     }
 
-    if (!screen->base.glvnd && xwl_screen->glvnd_vendor)
-        screen->base.glvnd = strdup(xwl_screen->glvnd_vendor);
+    if (!screen->base.glvnd && glamor_screen->glvnd_vendor)
+        screen->base.glvnd = strdup(glamor_screen->glvnd_vendor);
 
     if (!screen->base.glvnd)
         screen->base.glvnd = strdup("mesa");
diff --git a/hw/xwayland/xwayland-glx.h b/glamor/glamor_glx_provider.h
similarity index 94%
rename from hw/xwayland/xwayland-glx.h
rename to glamor/glamor_glx_provider.h
index 62c9fb7ce7..b0db90e47b 100644
--- a/hw/xwayland/xwayland-glx.h
+++ b/glamor/glamor_glx_provider.h
@@ -27,11 +27,11 @@
 #ifndef XWAYLAND_GLX_H
 #define XWAYLAND_GLX_H
 
-#include <xwayland-config.h>
+#include <dix-config.h>
 
 #ifdef GLXEXT
 #include "glx_extinit.h"
-extern __GLXprovider glamor_provider;
+extern _X_EXPORT __GLXprovider glamor_provider;
 #endif
 
 #endif /* XWAYLAND_GLX_H */
diff --git a/glamor/meson.build b/glamor/meson.build
index 4a3f6241a5..d4cb1859ac 100644
--- a/glamor/meson.build
+++ b/glamor/meson.build
@@ -33,6 +33,9 @@ srcs_glamor = [
     'glamor_sync.c',
 ]
 
+if build_glx
+    srcs_glamor += 'glamor_glx_provider.c'
+endif
 if build_xv
     srcs_glamor += 'glamor_xv.c'
 endif
@@ -41,7 +44,7 @@ epoxy_dep = dependency('epoxy')
 
 glamor = static_library('glamor',
     srcs_glamor,
-    include_directories: inc,
+    include_directories: [inc, glx_inc],
     dependencies: [
         common_dep,
         epoxy_dep,
diff --git a/hw/xwayland/meson.build b/hw/xwayland/meson.build
index 54529b64e9..0d9155fdad 100644
--- a/hw/xwayland/meson.build
+++ b/hw/xwayland/meson.build
@@ -7,7 +7,6 @@ srcs = [
     'xwayland-drm-lease.h',
     'xwayland-drm-lease.c',
     'xwayland-glamor.h',
-    'xwayland-glx.h',
     'xwayland-pixmap.c',
     'xwayland-pixmap.h',
     'xwayland-present.h',
@@ -105,9 +104,6 @@ xwayland_glamor = []
 eglstream_srcs = []
 if build_glamor
     srcs += 'xwayland-glamor.c'
-    if build_glx
-        srcs += 'xwayland-glx.c'
-    endif
     if gbm_dep.found()
         srcs += [
                   'xwayland-glamor-gbm.c',
diff --git a/hw/xwayland/xwayland-glamor.c b/hw/xwayland/xwayland-glamor.c
index b4fba65c05..e962ccc157 100644
--- a/hw/xwayland/xwayland-glamor.c
+++ b/hw/xwayland/xwayland-glamor.c
@@ -33,6 +33,7 @@
 
 #include <glamor.h>
 #include <glamor_context.h>
+#include <glamor_glx_provider.h>
 #ifdef GLXEXT
 #include "glx_extinit.h"
 #endif
@@ -42,7 +43,6 @@
 #include <drm_fourcc.h>
 
 #include "xwayland-glamor.h"
-#include "xwayland-glx.h"
 #include "xwayland-screen.h"
 #include "xwayland-window.h"
 #include "xwayland-window-buffers.h"
-- 
GitLab


From 9a998645b6f0a98b46036e4eeea277ff02a6a78d Mon Sep 17 00:00:00 2001
From: Konstantin Pugin <ria.freelander@gmail.com>
Date: Thu, 21 Jul 2022 00:49:13 +0300
Subject: [PATCH 3/4] xorg: initialize glamor provider

This allows Xorg to use Glamor GLX when Glamor is requested,
and eliminates usage of DRI2 in case of Glamor.

Signed-off-by: Konstantin Pugin <ria.freelander@gmail.com>
Reviewed-by: Adam Jackson <ajax@redhat.com>
Acked-by: Emma Anholt <emma@anholt.net>
---
 glamor/glamor_egl.c               | 11 +++++++++++
 hw/xfree86/glamor_egl/meson.build |  2 +-
 2 files changed, 12 insertions(+), 1 deletion(-)

diff --git a/glamor/glamor_egl.c b/glamor/glamor_egl.c
index 6efbc1c012..44cd9b269a 100644
--- a/glamor/glamor_egl.c
+++ b/glamor/glamor_egl.c
@@ -46,6 +46,7 @@
 
 #include "glamor.h"
 #include "glamor_priv.h"
+#include "glamor_glx_provider.h"
 #include "dri3.h"
 
 struct glamor_egl_screen_private {
@@ -886,6 +887,9 @@ glamor_egl_screen_init(ScreenPtr screen, struct glamor_context *glamor_ctx)
         glamor_egl_get_screen_private(scrn);
 #ifdef DRI3
     glamor_screen_private *glamor_priv = glamor_get_screen_private(screen);
+#endif
+#ifdef GLXEXT
+    static Bool vendor_initialized = FALSE;
 #endif
     const char* gbm_backend_name;
 
@@ -927,6 +931,13 @@ glamor_egl_screen_init(ScreenPtr screen, struct glamor_context *glamor_ctx)
         }
     }
 #endif
+#ifdef GLXEXT
+    if(!vendor_initialized) {
+        GlxPushProvider(&glamor_provider);
+        xorgGlxCreateVendor();
+        vendor_initialized = TRUE;
+    }
+#endif
 }
 
 static void glamor_egl_cleanup(struct glamor_egl_screen_private *glamor_egl)
diff --git a/hw/xfree86/glamor_egl/meson.build b/hw/xfree86/glamor_egl/meson.build
index 7eae058125..dd1cafcd97 100644
--- a/hw/xfree86/glamor_egl/meson.build
+++ b/hw/xfree86/glamor_egl/meson.build
@@ -15,7 +15,7 @@ shared_module(
         dependency('libdrm', version: '>= 2.4.46'),
         gbm_dep,
     ],
-    link_with: glamor,
+    link_with: [glamor, libxserver_glx],
 
     install: true,
     install_dir: module_dir,
-- 
GitLab


From 147fc86d9624da5ed26ff0309d5b393732b15269 Mon Sep 17 00:00:00 2001
From: Konstantin <ria.freelander@gmail.com>
Date: Tue, 10 Oct 2023 17:36:50 +0300
Subject: [PATCH 4/4] glamor_egl: add support of GlxVendorLibrary option

Same semantics as in glxdri2.c, and same purpose.

Signed-off-by: Konstantin <ria.freelander@gmail.com>
---
 glamor/glamor_egl.c | 32 ++++++++++++++++++++++++++++----
 1 file changed, 28 insertions(+), 4 deletions(-)

diff --git a/glamor/glamor_egl.c b/glamor/glamor_egl.c
index 44cd9b269a..5a9d0bf962 100644
--- a/glamor/glamor_egl.c
+++ b/glamor/glamor_egl.c
@@ -59,6 +59,7 @@ struct glamor_egl_screen_private {
     int fd;
     struct gbm_device *gbm;
     int dmabuf_capable;
+    Bool force_vendor; /* if GLVND vendor is forced from options */
 
     CloseScreenProcPtr saved_close_screen;
     DestroyPixmapProcPtr saved_destroy_pixmap;
@@ -904,10 +905,13 @@ glamor_egl_screen_init(ScreenPtr screen, struct glamor_context *glamor_ctx)
 
     glamor_ctx->make_current = glamor_egl_make_current;
 
-    gbm_backend_name = gbm_device_get_backend_name(glamor_egl->gbm);
-    /* Mesa uses "drm" as backend name, in that case, just do nothing */
-    if (gbm_backend_name && strcmp(gbm_backend_name, "drm") != 0)
-        glamor_set_glvnd_vendor(screen, gbm_backend_name);
+    /* Use dynamic logic only if vendor is not forced via xorg.conf */
+    if (!glamor_egl->force_vendor) {
+        gbm_backend_name = gbm_device_get_backend_name(glamor_egl->gbm);
+        /* Mesa uses "drm" as backend name, in that case, just do nothing */
+        if (gbm_backend_name && strcmp(gbm_backend_name, "drm") != 0)
+            glamor_set_glvnd_vendor(screen, gbm_backend_name);
+    }
 #ifdef DRI3
     /* Tell the core that we have the interfaces for import/export
      * of pixmaps.
@@ -971,11 +975,22 @@ glamor_egl_free_screen(ScrnInfoPtr scrn)
     }
 }
 
+enum {
+    GLAMOREGLOPT_VENDOR_LIBRARY,
+};
+
+static const OptionInfoRec GlamorEGLOptions[] = {
+    { GLAMOREGLOPT_VENDOR_LIBRARY, "GlxVendorLibrary", OPTV_STRING, {0}, FALSE },
+    { -1, NULL, OPTV_NONE, {0}, FALSE },
+};
+
 Bool
 glamor_egl_init(ScrnInfoPtr scrn, int fd)
 {
     struct glamor_egl_screen_private *glamor_egl;
     const GLubyte *renderer;
+    OptionInfoPtr options;
+    const char* glvnd_vendor = NULL;
 
     glamor_egl = calloc(sizeof(*glamor_egl), 1);
     if (glamor_egl == NULL)
@@ -991,6 +1006,15 @@ glamor_egl_init(ScrnInfoPtr scrn, int fd)
         goto error;
     }
 
+    options = xnfalloc(sizeof(GlamorEGLOptions));
+    memcpy(options, GlamorEGLOptions, sizeof(GlamorEGLOptions));
+    xf86ProcessOptions(scrn->scrnIndex, scrn->options, options);
+    glvnd_vendor = xf86GetOptValString(options, GLAMOREGLOPT_VENDOR_LIBRARY);
+    if (glvnd_vendor) {
+        glamor_set_glvnd_vendor(xf86ScrnToScreen(scrn), glvnd_vendor);
+        glamor_egl->force_vendor = TRUE;
+    }
+
     glamor_egl->display = glamor_egl_get_display(EGL_PLATFORM_GBM_MESA,
                                                  glamor_egl->gbm);
     if (!glamor_egl->display) {
-- 
GitLab

