From be10196e99d78d22791ca882b8c52fe792a68b73 Mon Sep 17 00:00:00 2001
From: Raul Fernandes <rgfernandes@gmail.com>
Date: Mon, 29 Apr 2019 18:25:55 -0300
Subject: [PATCH] Optimize ResourceClientBits() funtion

The LimitClients variable could be set in three different places: os/osinit.c, os/utils.c and hw/xfree86/common/xf86Config.c.
In these places, it checks if the variable is 64, 128, 256, 512, 1024 or 2048.
So we can optimize ResourceClientBits() to start looking in 7th bit (value of 64).
Another optimization is to avoid calling repeatedly the ResourceClientBits() function as the variable LimitClients is set only once.
So call ResourceClientBits() only when setting LimitClients.
The macros defined in include/resource.h is replaced by global variables and calculated together LimitClients too avoiding to recalculate every time is used.
It can lead to a speedup of ~1% in xserver.
---
 Xext/hashtable.c               |  2 +-
 Xext/xres.c                    |  2 +-
 dix/dispatch.c                 |  4 +--
 dix/resource.c                 | 45 ++++++++++++++--------------------
 hw/xfree86/common/xf86Config.c |  6 ++++-
 include/resource.h             | 11 ++++-----
 os/osinit.c                    |  3 +++
 os/utils.c                     |  4 +++
 test/xi2/protocol-common.h     |  2 +-
 9 files changed, 41 insertions(+), 38 deletions(-)

diff --git a/Xext/hashtable.c b/Xext/hashtable.c
index 3434c9948..1dccbe858 100644
--- a/Xext/hashtable.c
+++ b/Xext/hashtable.c
@@ -254,7 +254,7 @@ unsigned
 ht_resourceid_hash(void * cdata, const void * data, int numBits)
 {
     const XID* idPtr = data;
-    XID id = *idPtr & RESOURCE_ID_MASK;
+    XID id = *idPtr & ResourceIdMask;
     (void) cdata;
     return HashResourceID(id, numBits);
 }
diff --git a/Xext/xres.c b/Xext/xres.c
index 7a7aabc9b..0d5e10730 100644
--- a/Xext/xres.c
+++ b/Xext/xres.c
@@ -251,7 +251,7 @@ ProcXResQueryClients(ClientPtr client)
 
         for (i = 0; i < num_clients; i++) {
             scratch.resource_base = clients[current_clients[i]]->clientAsMask;
-            scratch.resource_mask = RESOURCE_ID_MASK;
+            scratch.resource_mask = ResourceIdMask;
 
             if (client->swapped) {
                 swapl(&scratch.resource_base);
diff --git a/dix/dispatch.c b/dix/dispatch.c
index f20e1963e..752e540fe 100644
--- a/dix/dispatch.c
+++ b/dix/dispatch.c
@@ -3524,7 +3524,7 @@ InitClient(ClientPtr client, int i, void *ospriv)
     client->index = i;
     xorg_list_init(&client->ready);
     xorg_list_init(&client->output_pending);
-    client->clientAsMask = ((Mask) i) << CLIENTOFFSET;
+    client->clientAsMask = ((Mask) i) << ClientOffset;
     client->closeDownMode = i ? DestroyAll : RetainPermanent;
     client->requestVector = InitialVector;
     client->osPrivate = ospriv;
@@ -3656,7 +3656,7 @@ SendConnSetup(ClientPtr client, const char *reason)
     client->requestVector = client->swapped ? SwappedProcVector : ProcVector;
     client->sequence = 0;
     ((xConnSetup *) lConnectionInfo)->ridBase = client->clientAsMask;
-    ((xConnSetup *) lConnectionInfo)->ridMask = RESOURCE_ID_MASK;
+    ((xConnSetup *) lConnectionInfo)->ridMask = ResourceIdMask;
 #ifdef MATCH_CLIENT_ENDIAN
     ((xConnSetup *) lConnectionInfo)->imageByteOrder = ClientOrder(client);
     ((xConnSetup *) lConnectionInfo)->bitmapBitOrder = ClientOrder(client);
diff --git a/dix/resource.c b/dix/resource.c
index 6c0be2e04..0ce7b0241 100644
--- a/dix/resource.c
+++ b/dix/resource.c
@@ -600,18 +600,6 @@ CreateNewResourceClass(void)
 
 static ClientResourceRec clientTable[MAXCLIENTS];
 
-static unsigned int
-ilog2(int val)
-{
-    int bits;
-
-    if (val <= 0)
-	return 0;
-    for (bits = 0; val != 0; bits++)
-	val >>= 1;
-    return bits - 1;
-}
-
 /*****************
  * ResourceClientBits
  *    Returns the client bit offset in the client + resources ID field
@@ -620,12 +608,17 @@ ilog2(int val)
 unsigned int
 ResourceClientBits(void)
 {
-    static unsigned int cached = 0;
-
-    if (cached == 0)
-      cached = ilog2(LimitClients);
+    int val = LimitClients;
+    unsigned int bits;
 
-    return cached;
+    if (val <= 0)
+        return 0;
+    // LimitClients cannot be less than 64
+    bits = 7;
+    val >>= 7;
+    for (; val != 0; bits++)
+        val >>= 1;
+    return bits - 1;
 }
 
 /*****************
@@ -663,7 +656,7 @@ InitClientResources(ClientPtr client)
      */
     clientTable[i].fakeID = client->clientAsMask |
         (client->index ? SERVER_BIT : SERVER_MINID);
-    clientTable[i].endFakeID = (clientTable[i].fakeID | RESOURCE_ID_MASK) + 1;
+    clientTable[i].endFakeID = (clientTable[i].fakeID | ResourceIdMask) + 1;
     for (j = 0; j < INITBUCKETS; j++) {
         clientTable[i].resources[j] = NULL;
     }
@@ -676,7 +669,7 @@ HashResourceID(XID id, unsigned int numBits)
     static XID mask;
 
     if (!mask)
-        mask = RESOURCE_ID_MASK;
+        mask = ResourceIdMask;
     id &= mask;
     if (numBits < 9)
         return (id ^ (id >> numBits) ^ (id >> (numBits<<1))) & ~((~0U) << numBits);
@@ -709,10 +702,10 @@ GetXIDRange(int client, Bool server, XID *minp, XID *maxp)
     int i;
     XID goodid;
 
-    id = (Mask) client << CLIENTOFFSET;
+    id = (Mask) client << ClientOffset;
     if (server)
         id |= client ? SERVER_BIT : SERVER_MINID;
-    maxid = id | RESOURCE_ID_MASK;
+    maxid = id | ResourceIdMask;
     goodid = 0;
     for (resp = clientTable[client].resources, i = clientTable[client].buckets;
          --i >= 0;) {
@@ -757,7 +750,7 @@ GetXIDList(ClientPtr pClient, unsigned count, XID *pids)
     XID maxid;
     void *val;
 
-    maxid = id | RESOURCE_ID_MASK;
+    maxid = id | ResourceIdMask;
     while ((found < count) && (id <= maxid)) {
         rc = dixLookupResourceByClass(&val, id, RC_ANY, serverClient,
                                       DixGetAttrAccess);
@@ -790,8 +783,8 @@ FakeClientID(int client)
         if (!client)
             FatalError("FakeClientID: server internal ids exhausted\n");
         MarkClientException(clients[client]);
-        id = ((Mask) client << CLIENTOFFSET) | (SERVER_BIT * 3);
-        maxid = id | RESOURCE_ID_MASK;
+        id = ((Mask) client << ClientOffset) | (SERVER_BIT * 3);
+        maxid = id | ResourceIdMask;
     }
     clientTable[client].fakeID = id + 1;
     clientTable[client].endFakeID = maxid + 1;
@@ -1179,12 +1172,12 @@ LegalNewID(XID id, ClientPtr client)
     if (!noPanoramiXExtension) {
         minid = client->clientAsMask | (client->index ?
                                         SERVER_BIT : SERVER_MINID);
-        maxid = (clientTable[client->index].fakeID | RESOURCE_ID_MASK) + 1;
+        maxid = (clientTable[client->index].fakeID | ResourceIdMask) + 1;
         if ((id >= minid) && (id <= maxid))
             return TRUE;
     }
 #endif                          /* PANORAMIX */
-    if (client->clientAsMask == (id & ~RESOURCE_ID_MASK)) {
+    if (client->clientAsMask == (id & ~ResourceIdMask)) {
         rc = dixLookupResourceByClass(&val, id, RC_ANY, serverClient,
                                       DixGetAttrAccess);
         return rc == BadValue;
diff --git a/hw/xfree86/common/xf86Config.c b/hw/xfree86/common/xf86Config.c
index 75657fead..bb65ec95c 100644
--- a/hw/xfree86/common/xf86Config.c
+++ b/hw/xfree86/common/xf86Config.c
@@ -959,10 +959,14 @@ configServerFlags(XF86ConfFlagsPtr flagsconf, XF86OptionPtr layoutopts)
         } else {
             from = X_CONFIG;
             LimitClients = i;
+            const int resource_client_bits = ResourceClientBits();
+            ClientOffset = (RESOURCE_AND_CLIENT_COUNT - resource_client_bits);
+            ResourceClientMask = (((1 << resource_client_bits) - 1) << ClientOffset);
+            ResourceIdMask = ((1 << ClientOffset) - 1);
         }
     }
     xf86Msg(from, "Max clients allowed: %i, resource mask: 0x%x\n",
-	    LimitClients, RESOURCE_ID_MASK);
+	    LimitClients, ResourceIdMask);
 }
 
 Bool
diff --git a/include/resource.h b/include/resource.h
index 6caf846c4..ad789d537 100644
--- a/include/resource.h
+++ b/include/resource.h
@@ -88,16 +88,15 @@ typedef uint32_t RESTYPE;
 extern _X_EXPORT unsigned int ResourceClientBits(void);
 /* bits and fields within a resource id */
 #define RESOURCE_AND_CLIENT_COUNT   29  /* 29 bits for XIDs */
-#define RESOURCE_CLIENT_BITS        ResourceClientBits() /* client field offset */
-#define CLIENTOFFSET	    (RESOURCE_AND_CLIENT_COUNT - RESOURCE_CLIENT_BITS)
+extern _X_EXPORT unsigned int ClientOffset;
 /* resource field */
-#define RESOURCE_ID_MASK	((1 << CLIENTOFFSET) - 1)
+extern _X_EXPORT unsigned int ResourceIdMask;
 /* client field */
-#define RESOURCE_CLIENT_MASK	(((1 << RESOURCE_CLIENT_BITS) - 1) << CLIENTOFFSET)
+extern _X_EXPORT unsigned int ResourceClientMask;
 /* extract the client mask from an XID */
-#define CLIENT_BITS(id) ((id) & RESOURCE_CLIENT_MASK)
+#define CLIENT_BITS(id) ((id) & ResourceClientMask)
 /* extract the client id from an XID */
-#define CLIENT_ID(id) ((int)(CLIENT_BITS(id) >> CLIENTOFFSET))
+#define CLIENT_ID(id) ((int)(CLIENT_BITS(id) >> ClientOffset))
 #define SERVER_BIT		(Mask)0x40000000        /* use illegal bit */
 
 #ifdef INVALID
diff --git a/os/osinit.c b/os/osinit.c
index 8575319ff..2bda5df59 100644
--- a/os/osinit.c
+++ b/os/osinit.c
@@ -87,6 +87,9 @@ int limitNoFile = -1;
 
 /* The actual user defined max number of clients */
 int LimitClients = LIMITCLIENTS;
+unsigned int ClientOffset = (29 - 8);
+unsigned int ResourceClientMask = (((1 << 8) - 1) << (29 - 8)/*ClientOffset*/);
+unsigned int ResourceIdMask = ((1 << (29 - 8)/*ClientOffset*/) - 1);
 
 static OsSigWrapperPtr OsSigWrapper = NULL;
 
diff --git a/os/utils.c b/os/utils.c
index c594acc2b..bb1103242 100644
--- a/os/utils.c
+++ b/os/utils.c
@@ -838,6 +838,10 @@ ProcessCommandLine(int argc, char *argv[])
 	{
 	    if (++i < argc) {
 		LimitClients = atoi(argv[i]);
+		const int resource_client_bits = ResourceClientBits();
+		ClientOffset = (RESOURCE_AND_CLIENT_COUNT - resource_client_bits);
+		ResourceClientMask = (((1 << resource_client_bits) - 1) << ClientOffset);
+		ResourceIdMask = ((1 << ClientOffset) - 1);
 		if (LimitClients != 64 &&
 		    LimitClients != 128 &&
 		    LimitClients != 256 &&
diff --git a/test/xi2/protocol-common.h b/test/xi2/protocol-common.h
index 742ce348f..5fe50f372 100644
--- a/test/xi2/protocol-common.h
+++ b/test/xi2/protocol-common.h
@@ -58,7 +58,7 @@
 /* default client index */
 #define CLIENT_INDEX            1
 /* default client mask for resources and windows */
-#define CLIENT_MASK             ((CLIENT_INDEX) << CLIENTOFFSET)
+#define CLIENT_MASK             ((CLIENT_INDEX) << ClientOffset)
 /* default client sequence number for replies */
 #define CLIENT_SEQUENCE         0x100
 /* default root window id */
-- 
GitLab

