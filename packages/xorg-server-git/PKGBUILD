# Maintainer: Marcus Seyfarth <marcus85@gmx.de>
# Contributor: JustKidding <jk@vin.ovh>
# Contributor: Yurii Kolesnykov <root@yurikoles.com>
# Based on extra/xorg-server by
# AndyRTR <andyrtr@archlinux.org>
# Jan de Groot <jgc@archlinux.org>

pkgbase=xorg-server-git
pkgname=(
  xorg-server-git
  xorg-server-common-git
  xorg-server-devel-git
  xorg-server-xvfb-git
  xorg-server-xephyr-git
)
_pkgbase=xserver
pkgver=21.1.99.1.r0.gdd5c2595a
pkgrel=1
arch=('x86_64')
license=('custom')
groups=('xorg')
url="https://xorg.freedesktop.org"
options=('strip')

# Build-time/runtime deps and training tools (non-interactive)
makedepends=(
  git meson xorgproto-git pixman libx11 mesa xtrans libxkbfile libxfont2
  libpciaccess libxv libxcvt libxmu libxrender libxi libxaw libxtst libxres
  xorg-xkbcomp xorg-util-macros xorg-font-util libepoxy xcb-util xcb-util-image
  xcb-util-renderutil xcb-util-wm xcb-util-keysyms libxshmfence libunwind systemd
  clang llvm
  # Training clients (short, time-bounded)
  xorg-xdpyinfo xorg-xprop xorg-xrandr xorg-x11perf xclip mesa-utils
  glmark2 vulkan-tools
)

_srcurl=git+https://gitlab.freedesktop.org/xorg/xserver.git
source=(
  "$_srcurl"
  xvfb-run
  xvfb-run.1
  732.patch
  1244.patch
  ms178-2.patch
)
sha512sums=('SKIP'
            '87c79b4a928e74463f96f58d277558783eac9b8ea6ba00d6bbbb67ad84c4d65b3792d960ea2a70089ae18162e82ae572a49ad36df169c974cc99dbaa51f63eb2'
            'de5e2cb3c6825e6cf1f07ca0d52423e17f34d70ec7935e9dd24be5fb9883bf1e03b50ff584931bd3b41095c510ab2aa44d2573fd5feaebdcb59363b65607ff22'
            'SKIP'
            'SKIP')

# Append-only instrumentation flags (don’t override user flags)
_extra_instr='-g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling'

pkgver() {
  cd "${_pkgbase}"
  # Replace latest tag prefix and normalize version using meson version
  local _meson_ver _git_ver _git_tag
  _meson_ver=$(grep -m 1 version meson.build | cut -d"'" -f 2)
  _git_ver=$(git describe --long --tags 2>/dev/null \
             | sed 's/^xorg\.server\.//; s/KATEX_INLINE_OPEN[^-]*-gKATEX_INLINE_CLOSE/r\1/g; s/-/./g') || \
    _git_ver="$_meson_ver.r0.g$(git rev-parse --short HEAD)"
  _git_tag=$(git describe --tags --abbrev=0 2>/dev/null \
             | sed 's/^xorg\.server\.//') || _git_tag="$_meson_ver"
  printf '%s' "${_git_ver/${_git_tag}/$_meson_ver}"
}

prepare() {
  # fresh build dirs (makepkg --noextract friendly)
  rm -rf build-pgo build-final fakeinstall bolt bolt_inst

  # apply any .patch files shipped in source=()
  for srcfile in "${source[@]}"; do
    local s="${srcfile%%::*}"; s="${s##*/}"
    [[ $s = *.patch ]] || continue
    echo "Applying patch $s..."
    patch --directory="$_pkgbase" --forward --strip=1 < "$s"
  done
}

# Start a nested Xvfb and run a curated, non-interactive workload inside it.
# Arguments:
#   $1 = path to staged bin dir (e.g. ${inst}/usr/bin)
#   $2 = mode: pgo | bolt (only affects logging)
_run_xserver_workload_xvfb() {
  local bindir="$1" mode="${2:-pgo}"
  local xvfb="$bindir/Xvfb"
  command -v xdpyinfo >/dev/null 2>&1 || { echo "[workload] xdpyinfo missing"; return 0; }
  [[ -x "$xvfb" ]] || { echo "[workload] $xvfb not executable; skip Xvfb workload"; return 0; }

  local d=":93"
  "$xvfb" "$d" -screen 0 1280x720x24 -nolisten tcp >/dev/null 2>&1 &
  local srv=$!
  for _ in {1..50}; do DISPLAY="$d" xdpyinfo >/dev/null 2>&1 && break; sleep 0.1; done
  DISPLAY="$d" xdpyinfo >/dev/null 2>&1 || { echo "[workload] Xvfb failed ($mode)"; kill "$srv" 2>/dev/null || true; return 0; }

  echo "[workload] Xvfb workload ($mode) on $d"
  # fast, deterministic tasks that exit naturally
  DISPLAY="$d" xdpyinfo -ext all >/dev/null 2>&1 || true
  DISPLAY="$d" xrandr --query >/dev/null 2>&1 || true
  DISPLAY="$d" xprop -root >/dev/null 2>&1 || true
  echo pgo-test | DISPLAY="$d" xclip -selection clipboard >/dev/null 2>&1 || true
  DISPLAY="$d" xclip -o -selection clipboard >/dev/null 2>&1 || true
  DISPLAY="$d" glxinfo -B >/dev/null 2>&1 || true

  # curated x11perf micro-tests (short)
  DISPLAY="$d" x11perf -time 1 -rect10 >/dev/null 2>&1 || true
  DISPLAY="$d" x11perf -time 1 -fillrect10 >/dev/null 2>&1 || true
  DISPLAY="$d" x11perf -time 1 -copyarea10 >/dev/null 2>&1 || true
  DISPLAY="$d" x11perf -time 1 -line10 >/dev/null 2>&1 || true
  DISPLAY="$d" x11perf -time 1 -text >/dev/null 2>&1 || true
  DISPLAY="$d" x11perf -time 1 -putimage10 >/dev/null 2>&1 || true

  # limited-duration graphics clients (exercise window/event paths)
  timeout -k 2 7 DISPLAY="$d" glmark2 -b terrain:duration=2000 >/dev/null 2>&1 || true
  timeout -k 2 7 DISPLAY="$d" glmark2 -b shading:shading=phong:duration=2000 >/dev/null 2>&1 || true
  timeout -k 2 6 DISPLAY="$d" vkcube >/dev/null 2>&1 || true

  kill -INT "$srv" 2>/dev/null || true
  wait "$srv" 2>/dev/null || true
}

build() {
  # sanitize hardened flags known to break Xorg modules (but do NOT pass env flags to Meson)
  local SAN_CFLAGS="${CFLAGS/-fno-plt}"
  local SAN_CXXFLAGS="${CXXFLAGS/-fno-plt}"
  local SAN_LDFLAGS="${LDFLAGS/-Wl,-z,now}"

  # staging and profile dirs
  local gen_dir="$srcdir/pgo-gen"
  mkdir -p "$gen_dir" "$srcdir/bolt" "$srcdir/bolt_inst" "$srcdir/bolt_profile"
  mkdir -p fakeinstall

  # Compose flags for each pass. We pass them via -D*c_args and -D*c_link_args ONLY.
  local c_args_gen="$SAN_CFLAGS $_extra_instr -fprofile-generate=$gen_dir"
  local cxx_args_gen="$SAN_CXXFLAGS $_extra_instr -fprofile-generate=$gen_dir"
  local link_args_gen="$SAN_LDFLAGS -fprofile-generate=$gen_dir"

  local c_args_fin="$SAN_CFLAGS"
  local cxx_args_fin="$SAN_CXXFLAGS"
  local link_args_fin="$SAN_LDFLAGS -Wl,--emit-relocs"

  # PASS 1: PGO-instrumented build (LTO off for speed) — flags via -D*c_args, -D*c_link_args
  echo "==> PASS 1: PGO-instrumented build"
  CFLAGS='' CXXFLAGS='' LDFLAGS='' \
  arch-meson "$_pkgbase" build-pgo \
    -Dipv6=true -Dwerror=false -Db_ndebug=true -Db_pie=false -Db_lto=true \
    -Dc_std=gnu2x -Dcpp_std=gnu++2a --buildtype=release --wrap-mode=nofallback \
    -Ddocs=false -Ddevel-docs=false -Ddocs-pdf=false \
    -Dlibunwind=true -Dagp=false -Dint10=false \
    -Dxvfb=true -Dxnest=true -Dxorg=true -Dxephyr=true -Dxwayland=true \
    -Dglamor=true -Dudev=true -Dudev_kms=true -Ddtrace=false \
    -Dsystemd_logind=true -Dsuid_wrapper=true \
    -Dxkb_dir=/usr/share/X11/xkb -Dxkb_output_dir=/var/lib/xkb \
    -Dc_args="$c_args_gen" -Dcpp_args="$cxx_args_gen" \
    -Dc_link_args="$link_args_gen" -Dcpp_link_args="$link_args_gen"
  ninja -C build-pgo

  # stage PASS 1 for training
  local inst_pgo="$srcdir/inst-pgo"
  DESTDIR="$inst_pgo" ninja -C build-pgo install

  # PGO training: nested Xvfb with non-interactive clients
  echo "==> PASS 1: PGO training workload"
  LLVM_PROFILE_FILE="$gen_dir/xorg-%p.profraw" _run_xserver_workload_xvfb "$inst_pgo/usr/bin" pgo

  # Merge PGO profiles if present
  if compgen -G "$gen_dir"/*.profraw >/dev/null; then
    echo "==> PASS 1: merging PGO profiles"
    llvm-profdata merge -o "$srcdir/xorg.profdata" "$gen_dir"/*.profraw
  else
    echo "==> PASS 1: no PGO profiles produced; continuing without profile-use"
    : > "$srcdir/xorg.profdata" || true
  fi

  # Prepare final pass flags with profile-use
  if [[ -s "$srcdir/xorg.profdata" ]]; then
    c_args_fin+=" -fprofile-use=$srcdir/xorg.profdata -Wno-profile-instr-unprofiled"
    cxx_args_fin+=" -fprofile-use=$srcdir/xorg.profdata -Wno-profile-instr-unprofiled"
    link_args_fin+=" -fprofile-use=$srcdir/xorg.profdata"
  fi

  # PASS 2: Final optimized build (LTO on, flags injected via -D*c_args/link_args)
  echo "==> PASS 2: final optimized build"
  CFLAGS='' CXXFLAGS='' LDFLAGS='' \
  arch-meson "$_pkgbase" build-final \
    -Dipv6=true -Dwerror=false -Db_ndebug=true -Db_pie=false -Db_lto=true \
    -Dc_std=gnu2x -Dcpp_std=gnu++2a --buildtype=release --wrap-mode=nofallback \
    -Ddocs=false -Ddevel-docs=false -Ddocs-pdf=false \
    -Dlibunwind=true -Dagp=false -Dint10=false \
    -Dxvfb=true -Dxnest=true -Dxorg=true -Dxephyr=true -Dxwayland=true \
    -Dglamor=true -Dudev=true -Dudev_kms=true -Ddtrace=false \
    -Dsystemd_logind=true -Dsuid_wrapper=true \
    -Dxkb_dir=/usr/share/X11/xkb -Dxkb_output_dir=/var/lib/xkb \
    -Dc_args="$c_args_fin" -Dcpp_args="$cxx_args_fin" \
    -Dc_link_args="$link_args_fin" -Dcpp_link_args="$link_args_fin"
  ninja -C build-final

  # stage final (will be split into packages later)
  DESTDIR="$PWD/fakeinstall" ninja -C build-final install

  # -------- BOLT instrumentation/training/optimization ----------
  if command -v llvm-bolt >/dev/null 2>&1; then
    echo "==> BOLT: instrumentation"
    local bindir="$PWD/fakeinstall/usr/bin"
    mkdir -p "$srcdir/bolt_inst" "$srcdir/bolt_opt" "$srcdir/bolt_profile" "$srcdir/bolt"

    # target binaries we can train non-interactively (Xvfb, Xephyr). Xorg requires VT/root → skip training.
    local bins=()
    [[ -x "$bindir/Xvfb"   ]] && bins+=("$bindir/Xvfb")
    [[ -x "$bindir/Xephyr" ]] && bins+=("$bindir/Xephyr")

    for b in "${bins[@]}"; do
      local base="$(basename "$b")"
      cp -f "$b" "$srcdir/bolt/${base}.orig"
      if ! llvm-bolt "$b" \
            --relocs \
            --lite \
            --instrument \
            --instrumentation-file="$srcdir/bolt/${base}.fdata" \
            --instrumentation-file-append-pid \
            -o "$srcdir/bolt_inst/${base}"; then
        echo "BOLT: instrumentation failed for $base; skipping"
        continue
      fi
      install -m755 "$srcdir/bolt_inst/${base}" "$b"
    done

    echo "==> BOLT: training (Xvfb)"
    BOLT_INSTRUMENTATION_FILE_APPEND_PID=1 \
      _run_xserver_workload_xvfb "$bindir" bolt

    # Merge per-binary shards and optimize originals
    for orig in "$srcdir"/bolt/*.orig; do
      [[ -f "$orig" ]] || continue
      local base="$(basename "$orig" .orig)"
      local merged="$srcdir/bolt/${base}.merged.fdata"
      # Merge ${base}.fdata.* or fallback to ${base}.fdata
      if compgen -G "$srcdir/bolt/${base}.fdata".* >/dev/null; then
        if command -v merge-fdata >/dev/null 2>&1; then
          merge-fdata "$srcdir/bolt/${base}.fdata".* -o "$merged" || true
        else
          cat "$srcdir/bolt/${base}.fdata".* > "$merged" || true
        fi
      elif [[ -s "$srcdir/bolt/${base}.fdata" ]]; then
        cp -f "$srcdir/bolt/${base}.fdata" "$merged"
      else
        merged=""
      fi

      local out="$srcdir/bolt_opt/$base"
      if [[ -n "$merged" && -s "$merged" ]]; then
        local bolt_help align_flags=(--align-blocks)
        bolt_help="$(llvm-bolt --help 2>&1 || true)"
        grep -q -- '--block-alignment' <<<"$bolt_help" && align_flags=(--align-blocks --block-alignment=32)

        if llvm-bolt "$orig" \
              --relocs \
              --data="$merged" \
              --reorder-blocks=ext-tsp \
              --reorder-functions=cdsort \
              --split-functions \
              --split-strategy=cdsplit \
              --icf=all \
              --jump-tables=move \
              --peepholes=all \
              --reg-reassign --use-aggr-reg-reassign \
              "${align_flags[@]}" \
              --dyno-stats \
              -o "$out"; then
          echo "BOLT: optimized $base"
          install -m755 "$out" "$bindir/$base"
        else
          echo "BOLT: optimization failed for $base; keeping PGO build"
        fi
      else
        echo "BOLT: no profile for $base; keeping PGO build"
      fi
    done
  else
    echo "llvm-bolt not found; skipping BOLT"
  fi
}

_install() {
  local src f dir
  for src; do
    f="${src#fakeinstall/}"
    dir="${pkgdir}/${f%/*}"
    install -m755 -d "${dir}"
    # copy (not move) so fakeroot captures setuid etc.
    cp -av "${src}" "${dir}/"
    rm -rf "${src}"
  done
}

package_xorg-server-common-git() {
  pkgdesc="Xorg server common files (git version)"
  depends=(xkeyboard-config xorg-xkbcomp xorg-setxkbmap)
  provides=(xorg-server-common)
  conflicts=(xorg-server-common)

  _install fakeinstall/usr/lib/xorg/protocol.txt
  install -m644 -Dt "${pkgdir}/var/lib/xkb/" "${_pkgbase}"/xkb/README.compiled
  install -m644 -Dt "${pkgdir}/usr/share/licenses/${pkgname}" "${_pkgbase}"/COPYING
}

package_xorg-server-git() {
  pkgdesc="Xorg X server (git version)"
  depends=(libepoxy libxfont2 pixman xorg-server-common-git libunwind
           dbus libgl xf86-input-libinput nettle libpciaccess libdrm libxshmfence libxcvt)
  provides=('xorg-server' 'x-server' 'X-ABI-VIDEODRV_VERSION=25.3' 'X-ABI-XINPUT_VERSION=24.4' 'X-ABI-EXTENSION_VERSION=10.0')
  conflicts=(xorg-server 'nvidia-utils<=331.20' glamor-egl xf86-video-modesetting)
  replaces=(glamor-egl xf86-video-modesetting)
  install=xorg-server-git.install

  _install fakeinstall/usr/bin/{X,Xorg,gtf}
  _install fakeinstall/usr/lib/Xorg{,.wrap}
  _install fakeinstall/usr/lib/xorg/modules/*
  _install fakeinstall/usr/share/X11/xorg.conf.d/10-quirks.conf
  install -m755 -d "${pkgdir}/etc/X11/xorg.conf.d"
  install -m644 -Dt "${pkgdir}/usr/share/licenses/${pkgname}" "${_pkgbase}"/COPYING
}

package_xorg-server-xephyr-git() {
  pkgdesc="A nested X server that runs as an X application (git)"
  depends=(libxfont2 libgl libepoxy libunwind systemd-libs libxv pixman xorg-server-common-git
           xcb-util-image xcb-util-renderutil xcb-util-wm xcb-util-keysyms nettle libtirpc)
  provides=(xorg-server-xephyr)
  conflicts=(xorg-server-xephyr)

  _install fakeinstall/usr/bin/Xephyr
  install -m644 -Dt "${pkgdir}/usr/share/licenses/${pkgname}" "${_pkgbase}"/COPYING
}

package_xorg-server-xvfb-git() {
  pkgdesc="Virtual framebuffer X server (git)"
  depends=(libxfont2 libunwind pixman xorg-server-common-git xorg-xauth libgl nettle libtirpc systemd-libs)
  provides=(xorg-server-xvfb)
  conflicts=(xorg-server-xvfb)

  _install fakeinstall/usr/bin/Xvfb
  install -m755 "${srcdir}/xvfb-run" "${pkgdir}/usr/bin/"
  # Optional: man page if desired
  # install -m644 "${srcdir}/xvfb-run.1" "${pkgdir}/usr/share/man/man1/"
  install -m644 -Dt "${pkgdir}/usr/share/licenses/${pkgname}" "${_pkgbase}"/COPYING
}

package_xorg-server-devel-git() {
  pkgdesc="Development files for the X.Org X server (git version)"
  depends=(xorgproto-git mesa libpciaccess xorg-util-macros)
  provides=(xorg-server-devel)
  conflicts=(xorg-server-devel)

  _install fakeinstall/usr/include/xorg/*
  _install fakeinstall/usr/lib/pkgconfig/xorg-server.pc
  _install fakeinstall/usr/share/aclocal/xorg-server.m4
  install -m644 -Dt "${pkgdir}/usr/share/licenses/${pkgname}" "${_pkgbase}"/COPYING
}
