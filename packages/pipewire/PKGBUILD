pkgbase=pipewire
pkgname=(
  pipewire
  libpipewire
  alsa-card-profiles
  pipewire-audio
  pipewire-alsa
  pipewire-jack
  pipewire-pulse
  gst-plugin-pipewire
  pipewire-session-manager
  pulse-native-provider
)
pkgver=1.4.9
pkgrel=2.1
epoch=1
pkgdesc="Low-latency audio/video router and processor"
url="https://pipewire.org"
arch=(x86_64)
license=(MIT)
makedepends=(
  alsa-lib
  avahi
  bluez-libs
  dbus
  git
  glib2
  glib2-devel
  gst-plugins-base
  jack2
  libcamera
  libcanberra
  libebur128
  libfdk-aac
  libffado
  libfreeaptx
  liblc3
  libldac
  libmysofa
  libpulse
  libsndfile
  libusb
  libx11
  libxfixes
  lilv
  meson
  ncurses
  opus
  readline
  roc-toolkit
  rtkit
  sbc
  sdl2
  systemd
  valgrind
  webrtc-audio-processing-1
)
checkdepends=(
  desktop-file-utils
  openal
)
source=(
  "git+https://gitlab.freedesktop.org/pipewire/pipewire.git#tag=$pkgver"
)
b2sums=('17b46b195ab0b11902488710a0788172b46209f8b49d4e6eb57d6300d42f14d6ca1578ac85c3c789de7bc348dc8f45ee9010e01ea8eced2071aa961e5ea1b7a0')

prepare() {
  cd pipewire

  # Create directories for PGO profiles
  mkdir -p "$srcdir/pgo/standard" "$srcdir/pgo/context-sensitive"
}

build() {
  # Set compiler to clang for PGO
  export CC=clang
  export CXX=clang++

  local meson_options=(
    -D bluez5-codec-lc3plus=disabled
    -D docs=disabled
    -D man=disabled
    -D jack-devel=true
    -D libjack-path=/usr/lib
    -D rlimits-install=false
    -D selinux=disabled
    -D session-managers=[]
    -D snap=disabled
    -D udevrulesdir=/usr/lib/udev/rules.d
    -D b_pie=false
    -D c_std=gnu18
    -D cpp_std=gnu++17
    -D b_lto=true
    --wrap-mode=nofallback
    -D libcamera=enabled
    -D v4l2=disabled
    -D pipewire-v4l2=disabled
    -D roc=disabled
    -D libffado=disabled
    -D x11=disabled
    -D x11-xfixes=disabled
  )

  # PGO-specific instrumentation flags
  local pgo_instrument_flags="-g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=150 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"

  echo "Stage 1: Building with standard PGO instrumentation"
  arch-meson pipewire build-instrumented \
    "${meson_options[@]}" \
    -D b_lto=false \
    -D b_ndebug=false \
    -Dc_args="$CFLAGS -fprofile-generate=${srcdir}/pgo/standard ${pgo_instrument_flags}" \
    -Dcpp_args="$CXXFLAGS -fprofile-generate=${srcdir}/pgo/standard ${pgo_instrument_flags}" \
    -Dc_link_args="$LDFLAGS -fprofile-generate=${srcdir}/pgo/standard" \
    -Dcpp_link_args="$LDFLAGS -fprofile-generate=${srcdir}/pgo/standard"

  meson compile -C build-instrumented

  echo "Stage 2: Running tests to generate standard profiling data"
  export LLVM_PROFILE_FILE="${srcdir}/pgo/standard/%p.profraw"

  echo "Running unit tests for PGO profiling..."
  cd build-instrumented
  meson test --timeout-multiplier=5 || echo "Some tests failed, continuing with PGO"
  cd ..

  # Check if profile data files were generated
  if [ -z "$(ls ${srcdir}/pgo/standard/*.profraw 2>/dev/null)" ]; then
    echo "Warning: No profile data files (*.profraw) were generated in ${srcdir}/pgo/standard/"
    echo "Continuing with regular build..."

    # Fall back to regular build without PGO
    arch-meson pipewire build "${meson_options[@]}"
    meson compile -C build
    return
  fi

  echo "Merging standard PGO profile data"
  llvm-profdata merge -output="${srcdir}/pgo/standard.profdata" "${srcdir}/pgo/standard"/*.profraw

  echo "Stage 3: Building with context-sensitive PGO instrumentation"
  arch-meson pipewire build-cs-instrumented \
    "${meson_options[@]}" \
    -D b_lto=false \
    -D b_ndebug=false \
    -Dc_args="$CFLAGS -fprofile-use=${srcdir}/pgo/standard.profdata -fcs-profile-generate=${srcdir}/pgo/context-sensitive ${pgo_instrument_flags}" \
    -Dcpp_args="$CXXFLAGS -fprofile-use=${srcdir}/pgo/standard.profdata -fcs-profile-generate=${srcdir}/pgo/context-sensitive ${pgo_instrument_flags}" \
    -Dc_link_args="$LDFLAGS -fprofile-use=${srcdir}/pgo/standard.profdata -fcs-profile-generate=${srcdir}/pgo/context-sensitive" \
    -Dcpp_link_args="$LDFLAGS -fprofile-use=${srcdir}/pgo/standard.profdata -fcs-profile-generate=${srcdir}/pgo/context-sensitive"

  meson compile -C build-cs-instrumented

  echo "Stage 4: Running tests to generate context-sensitive profiling data"
  export LLVM_PROFILE_FILE="${srcdir}/pgo/context-sensitive/%p.profraw"

  echo "Running unit tests for context-sensitive PGO profiling..."
  cd build-cs-instrumented
  meson test --timeout-multiplier=5 || echo "Some tests failed, continuing with PGO"
  cd ..

  # Check if profile data files were generated
  if [ -z "$(ls ${srcdir}/pgo/context-sensitive/*.profraw 2>/dev/null)" ]; then
    echo "Warning: No context-sensitive profile data files were generated"
    echo "Falling back to standard PGO profile"

    echo "Stage 5: Final optimized build using standard profile data"
    arch-meson pipewire build \
      "${meson_options[@]}" \
      -D b_ndebug=true \
      -Dc_args="$CFLAGS -fprofile-use=${srcdir}/pgo/standard.profdata" \
      -Dcpp_args="$CXXFLAGS -fprofile-use=${srcdir}/pgo/standard.profdata" \
      -Dc_link_args="$LDFLAGS -fprofile-use=${srcdir}/pgo/standard.profdata" \
      -Dcpp_link_args="$LDFLAGS -fprofile-use=${srcdir}/pgo/standard.profdata"
  else
    echo "Merging context-sensitive PGO profile data with standard profile"
    llvm-profdata merge -output="${srcdir}/pgo/cs.profdata" "${srcdir}/pgo/context-sensitive"/*.profraw "${srcdir}/pgo/standard.profdata"

    echo "Stage 5: Final optimized build using merged profile data"
    arch-meson pipewire build \
      "${meson_options[@]}" \
      -D b_ndebug=true \
      -Dc_args="$CFLAGS -fprofile-use=${srcdir}/pgo/cs.profdata" \
      -Dcpp_args="$CXXFLAGS -fprofile-use=${srcdir}/pgo/cs.profdata" \
      -Dc_link_args="$LDFLAGS -fprofile-use=${srcdir}/pgo/cs.profdata" \
      -Dcpp_link_args="$LDFLAGS -fprofile-use=${srcdir}/pgo/cs.profdata"
  fi

  meson compile -C build
}

check() {
  # Run tests on the final optimized build
  meson test -C build --print-errorlogs
}

_pick() {
  local p="$1" f d; shift
  for f; do
    d="$srcdir/$p/${f#$pkgdir/}"
    mkdir -p "$(dirname "$d")"
    mv "$f" "$d"
    rmdir -p --ignore-fail-on-non-empty "$(dirname "$f")"
  done
}

_pwname=pipewire-0.3
_spaname=spa-0.2

package_pipewire() {
  license+=(
    # libspa-alsa
    LGPL-2.1-or-later
  )
  depends=(
    "libpipewire=$epoch:$pkgver-$pkgrel" lib$_pwname.so
    dbus libdbus-1.so
    gcc-libs
    glib2 libglib-2.0.so
    glibc
    ncurses libncursesw.so
    readline libreadline.so
    systemd-libs libsystemd.so libudev.so
  )
  optdepends=(
    'gst-plugin-pipewire: GStreamer plugin'
    'pipewire-alsa: ALSA configuration'
    'pipewire-audio: Audio support'
    'pipewire-jack: JACK replacement'
    'pipewire-pulse: PulseAudio replacement'
    'pipewire-session-manager: Session manager'
    'pipewire-libcamera: Libcamera support'
    'realtime-privileges: realtime privileges with rt module'
    'rtkit: realtime privileges with rtkit module'
  )
  install=pipewire.install

  meson install -C build --destdir "$pkgdir"

  (
    cd "$pkgdir"

    # Replace copies with symlinks
    for _f in pipewire-{aes67,avb,pulse}; do
      cmp usr/bin/pipewire usr/bin/$_f
      ln -sf pipewire usr/bin/$_f
    done

    _pick lib usr/include/{$_pwname,$_spaname}
    _pick lib usr/lib/$_spaname/libspa.so*
    _pick lib usr/lib/lib$_pwname.so*
    _pick lib usr/lib/pkgconfig/lib{$_pwname,$_spaname}.pc

    _pick acp usr/lib/udev
    _pick acp usr/share/alsa-card-profile


    _pick libcamera usr/lib/$_spaname/libcamera

    _pick audio usr/bin/pipewire-{aes67,avb}
    _pick audio usr/bin/pw-{cat,loopback,mididump}
    _pick audio usr/bin/pw-{dsd,enc,midi,}play
    _pick audio usr/bin/pw-{midi,}record
    _pick audio usr/bin/spa-{acp-tool,resample}
    _pick audio usr/lib/alsa-lib
    _pick audio usr/lib/$_pwname/libpipewire-module-avb.so
    _pick audio usr/lib/$_pwname/libpipewire-module-echo-cancel.so
    _pick audio usr/lib/$_pwname/libpipewire-module-fallback-sink.so
    _pick audio usr/lib/$_pwname/libpipewire-module-filter-chain*.so
    _pick audio usr/lib/$_pwname/libpipewire-module-loopback.so
    _pick audio usr/lib/$_pwname/libpipewire-module-netjack2*.so
    _pick audio usr/lib/$_pwname/libpipewire-module-parametric-equalizer.so
    _pick audio usr/lib/$_pwname/libpipewire-module-pipe-tunnel.so
    _pick audio usr/lib/$_pwname/libpipewire-module-protocol-simple.so
    _pick audio usr/lib/$_pwname/libpipewire-module-rtp-{sap,sink,source}.so
    _pick audio usr/lib/$_pwname/libpipewire-module-vban*.so
    _pick audio usr/lib/$_spaname/{aec,alsa,audio*,avb,bluez5,filter-graph}
    _pick audio usr/lib/systemd/user/filter-chain.service
    _pick audio usr/share/alsa
    _pick audio usr/share/pipewire/filter-chain*
    _pick audio usr/share/pipewire/pipewire-{aes67,avb}.conf
    _pick audio usr/share/$_spaname/bluez5



    _pick jack-client usr/lib/$_pwname/libpipewire-module-jack{-tunnel,dbus-detect}.so
    _pick jack-client usr/lib/$_spaname/jack


    _pick jack usr/bin/pw-jack
    _pick jack usr/include/jack
    _pick jack usr/lib/libjack*
    _pick jack usr/lib/pkgconfig/jack*.pc
    _pick jack usr/share/pipewire/jack.conf

    _pick pulse usr/bin/pipewire-pulse
    _pick pulse usr/lib/$_pwname/libpipewire-module-protocol-pulse.so
    _pick pulse usr/lib/$_pwname/libpipewire-module-pulse-tunnel.so
    _pick pulse usr/lib/systemd/user/pipewire-pulse.*
    _pick pulse usr/share/glib-2.0/schemas/org.freedesktop.pulseaudio.gschema.xml
    _pick pulse usr/share/pipewire/pipewire-pulse.conf


    _pick gst usr/lib/gstreamer-1.0



    # directories for overrides
    mkdir -p etc/pipewire/{client-rt,client,minimal,pipewire}.conf.d
  )

  install -Dt "$pkgdir/usr/share/licenses/$pkgname" -m644 pipewire/COPYING
}

package_libpipewire() {
  pkgdesc+=" - client library"
  depends=(
    glibc
    gcc-libs
  )
  provides=(lib$_pwname.so)

  mv lib/* "$pkgdir"

  install -Dt "$pkgdir/usr/share/licenses/$pkgname" -m644 pipewire/COPYING
}

package_alsa-card-profiles() {
  pkgdesc+=" - ALSA card profiles"
  license=(LGPL-2.1-or-later)

  mv acp/* "$pkgdir"
}

package_pipewire-libcamera() {
  pkgdesc+=" - Libcamera support"
  depends=(
    gcc-libs
    glibc
    libcamera libcamera-base.so libcamera.so
    pipewire
  )

  mv libcamera/* "$pkgdir"

  install -Dt "$pkgdir/usr/share/licenses/$pkgname" -m644 pipewire/COPYING
}

package_pipewire-audio() {
  pkgdesc+=" - Audio support"
  depends=(
    "libpipewire=$epoch:$pkgver-$pkgrel" lib$_pwname.so
    "pipewire=$epoch:$pkgver-$pkgrel"
    alsa-card-profiles
    alsa-lib libasound.so
    bluez-libs libbluetooth.so
    dbus libdbus-1.so
    gcc-libs
    glib2 libg{lib,object,io}-2.0.so
    glibc
    libebur128
    libfdk-aac libfdk-aac.so
    libfreeaptx libfreeaptx.so
    liblc3 liblc3.so
    libldac libldacBT_enc.so
    libmysofa libmysofa.so
    libsndfile libsndfile.so
    libusb libusb-1.0.so
    lilv liblilv-0.so
    opus libopus.so
    sbc libsbc.so
    systemd-libs
    webrtc-audio-processing-1 libwebrtc-audio-processing-1.so
  )

  mv audio/* "$pkgdir"

  mkdir -p "$pkgdir/etc/alsa/conf.d"
  ln -st "$pkgdir/etc/alsa/conf.d" \
    /usr/share/alsa/alsa.conf.d/50-pipewire.conf

  install -Dt "$pkgdir/usr/share/licenses/$pkgname" -m644 pipewire/COPYING
}

package_pipewire-alsa() {
  pkgdesc+=" - ALSA configuration"
  depends=(
    "pipewire-audio=$epoch:$pkgver-$pkgrel"
    "pipewire=$epoch:$pkgver-$pkgrel"
    pipewire-session-manager
  )

  mkdir -p "$pkgdir/etc/alsa/conf.d"
  ln -st "$pkgdir/etc/alsa/conf.d" \
    /usr/share/alsa/alsa.conf.d/99-pipewire-default.conf

  # Create required directory before installing the file
  mkdir -p "$pkgdir/usr/share/pipewire/media-session.d"
  install -Dm644 /dev/null \
    "$pkgdir/usr/share/pipewire/media-session.d/with-alsa"

  install -Dt "$pkgdir/usr/share/licenses/$pkgname" -m644 pipewire/COPYING
}



package_pipewire-jack() {
  pkgdesc+=" - JACK replacement"
  license+=(
    # libjackserver
    GPL-2.0-only
    LGPL-2.1-or-later
  )
  depends=(
    "libpipewire=$epoch:$pkgver-$pkgrel" lib$_pwname.so
    "pipewire-audio=$epoch:$pkgver-$pkgrel"
    "pipewire=$epoch:$pkgver-$pkgrel"
    glibc
    pipewire-session-manager
    sh
  )
  optdepends=(
    'jack-example-tools: for official JACK example-clients and tools'
  )
  conflicts=(
    jack
    jack2
  )
  provides=(
    jack
    libjack.so
    libjacknet.so
    libjackserver.so
  )

  mv jack/* "$pkgdir"

  # Create required directory before installing the file
  mkdir -p "$pkgdir/usr/share/pipewire/media-session.d"
  install -Dm644 /dev/null \
    "$pkgdir/usr/share/pipewire/media-session.d/with-jack"

  # directories for overrides
  mkdir -p "$pkgdir/etc/pipewire/jack.conf.d"

  install -Dt "$pkgdir/usr/share/licenses/$pkgname" -m644 pipewire/COPYING
}

package_pipewire-pulse() {
  pkgdesc+=" - PulseAudio replacement"
  depends=(
    "libpipewire=$epoch:$pkgver-$pkgrel" lib$_pwname.so
    "pipewire-audio=$epoch:$pkgver-$pkgrel"
    "pipewire=$epoch:$pkgver-$pkgrel"
    avahi libavahi-{client,common}.so
    dbus libdbus-1.so
    dconf
    gcc-libs
    glib2 libg{lib,object,io}-2.0.so
    glibc
    libpulse libpulse.so
    pipewire-session-manager
    systemd-libs libsystemd.so
  )
  provides=(pulse-native-provider)
  conflicts=(pulseaudio)
  install=pipewire-pulse.install

  mv pulse/* "$pkgdir"

  # directory for overrides
  mkdir -p "$pkgdir/etc/pipewire/pipewire-pulse.conf.d"

  # Create required directory before installing the file
  mkdir -p "$pkgdir/usr/share/pipewire/media-session.d"
  install -Dm644 /dev/null \
    "$pkgdir/usr/share/pipewire/media-session.d/with-pulseaudio"

  install -Dt "$pkgdir/usr/share/licenses/$pkgname" -m644 pipewire/COPYING
}

package_gst-plugin-pipewire() {
  pkgdesc="Multimedia graph framework - pipewire plugin"
  depends=(
    "libpipewire=$epoch:$pkgver-$pkgrel" lib$_pwname.so
    "pipewire-audio=$epoch:$pkgver-$pkgrel"
    "pipewire=$epoch:$pkgver-$pkgrel"
    gcc-libs
    glib2 libg{lib,object}-2.0.so
    glibc
    gst-plugins-base-libs
    gstreamer
    pipewire-session-manager
  )

  mv gst/* "$pkgdir"

  install -Dt "$pkgdir/usr/share/licenses/$pkgname" -m644 pipewire/COPYING
}

package_pipewire-session-manager() {
  pkgdesc="Session manager for PipeWire (default provider)"
  license=(CC0-1.0)
  depends=(wireplumber)
}

package_pulse-native-provider() {
  pkgdesc="PulseAudio sound server (default provider)"
  license=(CC0-1.0)
  depends=(pipewire-pulse)
}
