--- a/drivers/gpu/drm/drm_buddy.c
+++ b/drivers/gpu/drm/drm_buddy.c
@@ -30,6 +30,8 @@ static struct drm_buddy_block *drm_block
 	block->header |= order;
 	block->parent = parent;
 
+	RB_CLEAR_NODE(&block->rb);
+
 	BUG_ON(block->header & DRM_BUDDY_HEADER_UNUSED);
 	return block;
 }
@@ -40,58 +42,139 @@ static void drm_block_free(struct drm_bu
 	kmem_cache_free(slab_blocks, block);
 }
 
-static void list_insert_sorted(struct drm_buddy *mm,
-			       struct drm_buddy_block *block)
+static inline struct rb_root *
+__get_root(struct drm_buddy *mm,
+	   unsigned int order,
+	   enum free_tree tree)
+{
+	if (tree == CLEAR_TREE)
+		return &mm->clear_tree[order];
+	else
+		return &mm->dirty_tree[order];
+}
+
+static inline enum free_tree
+__get_tree_for_block(struct drm_buddy_block *block)
+{
+	return drm_buddy_block_is_clear(block) ? CLEAR_TREE : DIRTY_TREE;
+}
+
+static inline enum free_tree
+__get_tree_for_flags(unsigned long flags)
+{
+	return (flags & DRM_BUDDY_CLEAR_ALLOCATION) ? CLEAR_TREE : DIRTY_TREE;
+}
+
+static inline struct drm_buddy_block *
+rbtree_get_entry(struct rb_node *node)
+{
+	return node ? rb_entry(node, struct drm_buddy_block, rb) : NULL;
+}
+
+static inline struct drm_buddy_block *
+rbtree_prev_entry(struct rb_node *node)
+{
+	return rbtree_get_entry(rb_prev(node));
+}
+
+static inline struct drm_buddy_block *
+rbtree_first_entry(struct rb_root *root)
+{
+	return rbtree_get_entry(rb_first(root));
+}
+
+static inline struct drm_buddy_block *
+rbtree_last_entry(struct rb_root *root)
+{
+	return rbtree_get_entry(rb_last(root));
+}
+
+static inline bool rbtree_is_empty(struct rb_root *root)
+{
+	return RB_EMPTY_ROOT(root);
+}
+
+static void rbtree_insert(struct drm_buddy *mm,
+			  struct drm_buddy_block *block,
+			  enum free_tree tree)
 {
+	struct rb_node **link, *parent = NULL;
 	struct drm_buddy_block *node;
-	struct list_head *head;
+	struct rb_root *root;
+	unsigned int order;
 
-	head = &mm->free_list[drm_buddy_block_order(block)];
-	if (list_empty(head)) {
-		list_add(&block->link, head);
-		return;
-	}
+	order = drm_buddy_block_order(block);
+
+	root = __get_root(mm, order, tree);
+	link = &root->rb_node;
+
+	while (*link) {
+		parent = *link;
+		node = rbtree_get_entry(parent);
 
-	list_for_each_entry(node, head, link)
 		if (drm_buddy_block_offset(block) < drm_buddy_block_offset(node))
-			break;
+			link = &parent->rb_left;
+		else
+			link = &parent->rb_right;
+	}
+
+	block->tree = tree;
 
-	__list_add(&block->link, node->link.prev, &node->link);
+	rb_link_node(&block->rb, parent, link);
+	rb_insert_color(&block->rb, root);
 }
 
-static void clear_reset(struct drm_buddy_block *block)
+static void rbtree_remove(struct drm_buddy *mm,
+			  struct drm_buddy_block *block)
+{
+	unsigned int order = drm_buddy_block_order(block);
+	struct rb_root *root;
+
+	root = __get_root(mm, order, block->tree);
+	rb_erase(&block->rb, root);
+
+	RB_CLEAR_NODE(&block->rb);
+}
+
+static inline void clear_reset(struct drm_buddy_block *block)
 {
 	block->header &= ~DRM_BUDDY_HEADER_CLEAR;
 }
 
-static void mark_cleared(struct drm_buddy_block *block)
+static inline void mark_cleared(struct drm_buddy_block *block)
 {
 	block->header |= DRM_BUDDY_HEADER_CLEAR;
 }
 
-static void mark_allocated(struct drm_buddy_block *block)
+static inline void mark_allocated(struct drm_buddy *mm,
+				  struct drm_buddy_block *block)
 {
 	block->header &= ~DRM_BUDDY_HEADER_STATE;
 	block->header |= DRM_BUDDY_ALLOCATED;
 
-	list_del(&block->link);
+	rbtree_remove(mm, block);
 }
 
-static void mark_free(struct drm_buddy *mm,
-		      struct drm_buddy_block *block)
+static inline void mark_free(struct drm_buddy *mm,
+			     struct drm_buddy_block *block)
 {
+	enum free_tree tree;
+
 	block->header &= ~DRM_BUDDY_HEADER_STATE;
 	block->header |= DRM_BUDDY_FREE;
 
-	list_insert_sorted(mm, block);
+	tree = __get_tree_for_block(block);
+
+	rbtree_insert(mm, block, tree);
 }
 
-static void mark_split(struct drm_buddy_block *block)
+static inline void mark_split(struct drm_buddy *mm,
+			      struct drm_buddy_block *block)
 {
 	block->header &= ~DRM_BUDDY_HEADER_STATE;
 	block->header |= DRM_BUDDY_SPLIT;
 
-	list_del(&block->link);
+	rbtree_remove(mm, block);
 }
 
 static inline bool overlaps(u64 s1, u64 e1, u64 s2, u64 e2)
@@ -147,7 +230,7 @@ static unsigned int __drm_buddy_free(str
 				mark_cleared(parent);
 		}
 
-		list_del(&buddy->link);
+		rbtree_remove(mm, buddy);
 		if (force_merge && drm_buddy_block_is_clear(buddy))
 			mm->clear_avail -= drm_buddy_block_size(mm, buddy);
 
@@ -177,44 +260,52 @@ static int __force_merge(struct drm_budd
 	if (min_order > mm->max_order)
 		return -EINVAL;
 
-	for (i = min_order - 1; i >= 0; i--) {
-		struct drm_buddy_block *block, *prev;
+	for_each_free_tree() {
+		for (i = min_order - 1; i >= 0; i--) {
+			struct rb_root *root = __get_root(mm, i, tree);
+			struct drm_buddy_block *block, *prev_block;
+
+			for_each_rb_entry_reverse_safe(block, prev_block, root, rb) {
+				struct drm_buddy_block *buddy;
+				u64 block_start, block_end;
 
-		list_for_each_entry_safe_reverse(block, prev, &mm->free_list[i], link) {
-			struct drm_buddy_block *buddy;
-			u64 block_start, block_end;
+				if (RB_EMPTY_NODE(&block->rb))
+					break;
 
-			if (!block->parent)
-				continue;
+				if (!block->parent)
+					continue;
 
-			block_start = drm_buddy_block_offset(block);
-			block_end = block_start + drm_buddy_block_size(mm, block) - 1;
+				block_start = drm_buddy_block_offset(block);
+				block_end = block_start + drm_buddy_block_size(mm, block) - 1;
 
-			if (!contains(start, end, block_start, block_end))
-				continue;
+				if (!contains(start, end, block_start, block_end))
+					continue;
 
-			buddy = __get_buddy(block);
-			if (!drm_buddy_block_is_free(buddy))
-				continue;
+				buddy = __get_buddy(block);
+				if (!drm_buddy_block_is_free(buddy))
+					continue;
 
-			WARN_ON(drm_buddy_block_is_clear(block) ==
-				drm_buddy_block_is_clear(buddy));
+				WARN_ON(drm_buddy_block_is_clear(block) ==
+					drm_buddy_block_is_clear(buddy));
 
-			/*
-			 * If the prev block is same as buddy, don't access the
-			 * block in the next iteration as we would free the
-			 * buddy block as part of the free function.
-			 */
-			if (prev == buddy)
-				prev = list_prev_entry(prev, link);
+				/*
+				 * If the prev block is same as buddy, don't access the
+				 * block in the next iteration as we would free the
+				 * buddy block as part of the free function.
+				 */
+				if (prev_block && prev_block == buddy) {
+					if (prev_block != rbtree_first_entry(root))
+						prev_block = rbtree_prev_entry(&prev_block->rb);
+				}
 
-			list_del(&block->link);
-			if (drm_buddy_block_is_clear(block))
-				mm->clear_avail -= drm_buddy_block_size(mm, block);
+				rbtree_remove(mm, block);
+				if (drm_buddy_block_is_clear(block))
+					mm->clear_avail -= drm_buddy_block_size(mm, block);
 
-			order = __drm_buddy_free(mm, block, true);
-			if (order >= min_order)
-				return 0;
+				order = __drm_buddy_free(mm, block, true);
+				if (order >= min_order)
+					return 0;
+			}
 		}
 	}
 
@@ -257,14 +348,22 @@ int drm_buddy_init(struct drm_buddy *mm,
 
 	BUG_ON(mm->max_order > DRM_BUDDY_MAX_ORDER);
 
-	mm->free_list = kmalloc_array(mm->max_order + 1,
-				      sizeof(struct list_head),
-				      GFP_KERNEL);
-	if (!mm->free_list)
+	mm->clear_tree = kmalloc_array(mm->max_order + 1,
+				       sizeof(struct rb_root),
+				       GFP_KERNEL);
+	if (!mm->clear_tree)
 		return -ENOMEM;
 
-	for (i = 0; i <= mm->max_order; ++i)
-		INIT_LIST_HEAD(&mm->free_list[i]);
+	mm->dirty_tree = kmalloc_array(mm->max_order + 1,
+				       sizeof(struct rb_root),
+				       GFP_KERNEL);
+	if (!mm->dirty_tree)
+		goto out_free_clear_tree;
+
+	for (i = 0; i <= mm->max_order; ++i) {
+		mm->clear_tree[i] = RB_ROOT;
+		mm->dirty_tree[i] = RB_ROOT;
+	}
 
 	mm->n_roots = hweight64(size);
 
@@ -272,7 +371,7 @@ int drm_buddy_init(struct drm_buddy *mm,
 				  sizeof(struct drm_buddy_block *),
 				  GFP_KERNEL);
 	if (!mm->roots)
-		goto out_free_list;
+		goto out_free_dirty_tree;
 
 	offset = 0;
 	i = 0;
@@ -311,8 +410,10 @@ out_free_roots:
 	while (i--)
 		drm_block_free(mm, mm->roots[i]);
 	kfree(mm->roots);
-out_free_list:
-	kfree(mm->free_list);
+out_free_dirty_tree:
+	kfree(mm->dirty_tree);
+out_free_clear_tree:
+	kfree(mm->clear_tree);
 	return -ENOMEM;
 }
 EXPORT_SYMBOL(drm_buddy_init);
@@ -349,7 +450,8 @@ void drm_buddy_fini(struct drm_buddy *mm
 	WARN_ON(mm->avail != mm->size);
 
 	kfree(mm->roots);
-	kfree(mm->free_list);
+	kfree(mm->clear_tree);
+	kfree(mm->dirty_tree);
 }
 EXPORT_SYMBOL(drm_buddy_fini);
 
@@ -373,16 +475,16 @@ static int split_block(struct drm_buddy
 		return -ENOMEM;
 	}
 
-	mark_free(mm, block->left);
-	mark_free(mm, block->right);
-
 	if (drm_buddy_block_is_clear(block)) {
 		mark_cleared(block->left);
 		mark_cleared(block->right);
 		clear_reset(block);
 	}
 
-	mark_split(block);
+	mark_free(mm, block->left);
+	mark_free(mm, block->right);
+
+	mark_split(mm, block);
 
 	return 0;
 }
@@ -411,7 +513,9 @@ EXPORT_SYMBOL(drm_get_buddy);
  * @is_clear: blocks clear state
  *
  * Reset the clear state based on @is_clear value for each block
- * in the freelist.
+ * in the freelist. This is the correctly ported version for modern kernels
+ * using Red-Black Trees, with an added optimization to perform a bulk update
+ * of the clear_avail counter for improved efficiency.
  */
 void drm_buddy_reset_clear(struct drm_buddy *mm, bool is_clear)
 {
@@ -429,20 +533,34 @@ void drm_buddy_reset_clear(struct drm_bu
 		size -= root_size;
 	}
 
-	for (i = 0; i <= mm->max_order; ++i) {
-		struct drm_buddy_block *block;
+	if (is_clear) {
 
-		list_for_each_entry_reverse(block, &mm->free_list[i], link) {
-			if (is_clear != drm_buddy_block_is_clear(block)) {
-				if (is_clear) {
-					mark_cleared(block);
-					mm->clear_avail += drm_buddy_block_size(mm, block);
-				} else {
-					clear_reset(block);
-					mm->clear_avail -= drm_buddy_block_size(mm, block);
-				}
+		for (i = 0; i <= mm->max_order; ++i) {
+			struct rb_root *root = __get_root(mm, i, DIRTY_TREE);
+			struct drm_buddy_block *block, *n;
+
+			for_each_rb_entry_reverse_safe(block, n, root, rb) {
+				rbtree_remove(mm, block);
+				mark_cleared(block);
+				rbtree_insert(mm, block, CLEAR_TREE);
 			}
 		}
+
+		mm->clear_avail = mm->avail;
+	} else {
+
+		for (i = 0; i <= mm->max_order; ++i) {
+			struct rb_root *root = __get_root(mm, i, CLEAR_TREE);
+			struct drm_buddy_block *block, *n;
+
+			for_each_rb_entry_reverse_safe(block, n, root, rb) {
+				rbtree_remove(mm, block);
+				clear_reset(block);
+				rbtree_insert(mm, block, DIRTY_TREE);
+			}
+		}
+
+		mm->clear_avail = 0;
 	}
 }
 EXPORT_SYMBOL(drm_buddy_reset_clear);
@@ -513,7 +631,7 @@ void drm_buddy_free_list(struct drm_budd
 }
 EXPORT_SYMBOL(drm_buddy_free_list);
 
-static bool block_incompatible(struct drm_buddy_block *block, unsigned int flags)
+static bool block_incompatible(struct drm_buddy_block *block, unsigned long flags)
 {
 	bool needs_clear = flags & DRM_BUDDY_CLEAR_ALLOCATION;
 
@@ -631,21 +749,20 @@ __drm_buddy_alloc_range_bias(struct drm_
 }
 
 static struct drm_buddy_block *
-get_maxblock(struct drm_buddy *mm, unsigned int order,
-	     unsigned long flags)
+get_maxblock(struct drm_buddy *mm,
+	     unsigned int order,
+	     enum free_tree tree)
 {
 	struct drm_buddy_block *max_block = NULL, *block = NULL;
+	struct rb_root *root;
 	unsigned int i;
 
 	for (i = order; i <= mm->max_order; ++i) {
-		struct drm_buddy_block *tmp_block;
-
-		list_for_each_entry_reverse(tmp_block, &mm->free_list[i], link) {
-			if (block_incompatible(tmp_block, flags))
+		root = __get_root(mm, i, tree);
+		if (!rbtree_is_empty(root)) {
+			block = rbtree_last_entry(root);
+			if (!block)
 				continue;
-
-			block = tmp_block;
-			break;
 		}
 
 		if (!block)
@@ -666,43 +783,43 @@ get_maxblock(struct drm_buddy *mm, unsig
 }
 
 static struct drm_buddy_block *
-alloc_from_freelist(struct drm_buddy *mm,
+alloc_from_freetree(struct drm_buddy *mm,
 		    unsigned int order,
 		    unsigned long flags)
 {
 	struct drm_buddy_block *block = NULL;
+	struct rb_root *root;
+	enum free_tree tree;
 	unsigned int tmp;
 	int err;
 
+	tree = __get_tree_for_flags(flags);
+
 	if (flags & DRM_BUDDY_TOPDOWN_ALLOCATION) {
-		block = get_maxblock(mm, order, flags);
+		block = get_maxblock(mm, order, tree);
 		if (block)
 			/* Store the obtained block order */
 			tmp = drm_buddy_block_order(block);
 	} else {
 		for (tmp = order; tmp <= mm->max_order; ++tmp) {
-			struct drm_buddy_block *tmp_block;
-
-			list_for_each_entry_reverse(tmp_block, &mm->free_list[tmp], link) {
-				if (block_incompatible(tmp_block, flags))
-					continue;
-
-				block = tmp_block;
-				break;
+			/* Get RB tree root for this order and tree */
+			root = __get_root(mm, tmp, tree);
+			if (!rbtree_is_empty(root)) {
+				block = rbtree_last_entry(root);
+				if (block)
+					break;
 			}
-
-			if (block)
-				break;
 		}
 	}
 
 	if (!block) {
-		/* Fallback method */
+		/* Try allocating from the other tree */
+		tree = (tree == CLEAR_TREE) ? DIRTY_TREE : CLEAR_TREE;
+
 		for (tmp = order; tmp <= mm->max_order; ++tmp) {
-			if (!list_empty(&mm->free_list[tmp])) {
-				block = list_last_entry(&mm->free_list[tmp],
-							struct drm_buddy_block,
-							link);
+			root = __get_root(mm, tmp, tree);
+			if (!rbtree_is_empty(root)) {
+				block = rbtree_last_entry(root);
 				if (block)
 					break;
 			}
@@ -770,7 +887,7 @@ static int __alloc_range(struct drm_budd
 
 		if (contains(start, end, block_start, block_end)) {
 			if (drm_buddy_block_is_free(block)) {
-				mark_allocated(block);
+				mark_allocated(mm, block);
 				total_allocated += drm_buddy_block_size(mm, block);
 				mm->avail -= drm_buddy_block_size(mm, block);
 				if (drm_buddy_block_is_clear(block))
@@ -848,7 +965,6 @@ static int __alloc_contig_try_harder(str
 {
 	u64 rhs_offset, lhs_offset, lhs_size, filled;
 	struct drm_buddy_block *block;
-	struct list_head *list;
 	LIST_HEAD(blocks_lhs);
 	unsigned long pages;
 	unsigned int order;
@@ -861,35 +977,39 @@ static int __alloc_contig_try_harder(str
 	if (order == 0)
 		return -ENOSPC;
 
-	list = &mm->free_list[order];
-	if (list_empty(list))
+	if (rbtree_is_empty(__get_root(mm, order, CLEAR_TREE)) &&
+	    rbtree_is_empty(__get_root(mm, order, DIRTY_TREE)))
 		return -ENOSPC;
 
-	list_for_each_entry_reverse(block, list, link) {
-		/* Allocate blocks traversing RHS */
-		rhs_offset = drm_buddy_block_offset(block);
-		err =  __drm_buddy_alloc_range(mm, rhs_offset, size,
-					       &filled, blocks);
-		if (!err || err != -ENOSPC)
-			return err;
-
-		lhs_size = max((size - filled), min_block_size);
-		if (!IS_ALIGNED(lhs_size, min_block_size))
-			lhs_size = round_up(lhs_size, min_block_size);
-
-		/* Allocate blocks traversing LHS */
-		lhs_offset = drm_buddy_block_offset(block) - lhs_size;
-		err =  __drm_buddy_alloc_range(mm, lhs_offset, lhs_size,
-					       NULL, &blocks_lhs);
-		if (!err) {
-			list_splice(&blocks_lhs, blocks);
-			return 0;
-		} else if (err != -ENOSPC) {
+	for_each_free_tree() {
+		struct rb_root *root = __get_root(mm, order, tree);
+
+		for_each_rb_entry_reverse(block, root, rb) {
+			/* Allocate blocks traversing RHS */
+			rhs_offset = drm_buddy_block_offset(block);
+			err =  __drm_buddy_alloc_range(mm, rhs_offset, size,
+						       &filled, blocks);
+			if (!err || err != -ENOSPC)
+				return err;
+
+			lhs_size = max((size - filled), min_block_size);
+			if (!IS_ALIGNED(lhs_size, min_block_size))
+				lhs_size = round_up(lhs_size, min_block_size);
+
+			/* Allocate blocks traversing LHS */
+			lhs_offset = drm_buddy_block_offset(block) - lhs_size;
+			err =  __drm_buddy_alloc_range(mm, lhs_offset, lhs_size,
+						       NULL, &blocks_lhs);
+			if (!err) {
+				list_splice(&blocks_lhs, blocks);
+				return 0;
+			} else if (err != -ENOSPC) {
+				drm_buddy_free_list_internal(mm, blocks);
+				return err;
+			}
+			/* Free blocks for the next iteration */
 			drm_buddy_free_list_internal(mm, blocks);
-			return err;
 		}
-		/* Free blocks for the next iteration */
-		drm_buddy_free_list_internal(mm, blocks);
 	}
 
 	return -ENOSPC;
@@ -975,7 +1095,7 @@ int drm_buddy_block_trim(struct drm_budd
 	list_add(&block->tmp_link, &dfs);
 	err =  __alloc_range(mm, &dfs, new_start, new_size, blocks, NULL);
 	if (err) {
-		mark_allocated(block);
+		mark_allocated(mm, block);
 		mm->avail -= drm_buddy_block_size(mm, block);
 		if (drm_buddy_block_is_clear(block))
 			mm->clear_avail -= drm_buddy_block_size(mm, block);
@@ -998,8 +1118,8 @@ __drm_buddy_alloc_blocks(struct drm_budd
 		return  __drm_buddy_alloc_range_bias(mm, start, end,
 						     order, flags);
 	else
-		/* Allocate from freelist */
-		return alloc_from_freelist(mm, order, flags);
+		/* Allocate from freetree */
+		return alloc_from_freetree(mm, order, flags);
 }
 
 /**
@@ -1016,8 +1136,8 @@ __drm_buddy_alloc_blocks(struct drm_budd
  * alloc_range_bias() called on range limitations, which traverses
  * the tree and returns the desired block.
  *
- * alloc_from_freelist() called when *no* range restrictions
- * are enforced, which picks the block from the freelist.
+ * alloc_from_freetree() called when *no* range restrictions
+ * are enforced, which picks the block from the freetree.
  *
  * Returns:
  * 0 on success, error code on failure.
@@ -1119,7 +1239,7 @@ int drm_buddy_alloc_blocks(struct drm_bu
 			}
 		} while (1);
 
-		mark_allocated(block);
+		mark_allocated(mm, block);
 		mm->avail -= drm_buddy_block_size(mm, block);
 		if (drm_buddy_block_is_clear(block))
 			mm->clear_avail -= drm_buddy_block_size(mm, block);
@@ -1201,11 +1321,16 @@ void drm_buddy_print(struct drm_buddy *m
 
 	for (order = mm->max_order; order >= 0; order--) {
 		struct drm_buddy_block *block;
+		struct rb_root *root;
 		u64 count = 0, free;
 
-		list_for_each_entry(block, &mm->free_list[order], link) {
-			BUG_ON(!drm_buddy_block_is_free(block));
-			count++;
+		for_each_free_tree() {
+			root = __get_root(mm, order, tree);
+
+			for_each_rb_entry(block, root, rb) {
+				BUG_ON(!drm_buddy_block_is_free(block));
+				count++;
+			}
 		}
 
 		drm_printf(p, "order-%2d ", order);
@@ -1228,7 +1353,7 @@ static void drm_buddy_module_exit(void)
 
 static int __init drm_buddy_module_init(void)
 {
-	slab_blocks = KMEM_CACHE(drm_buddy_block, 0);
+	slab_blocks = kmem_cache_create("drm_buddy_block", sizeof(struct drm_buddy_block), 64, SLAB_HWCACHE_ALIGN, NULL);
 	if (!slab_blocks)
 		return -ENOMEM;

--- a/include/drm/drm_buddy.h
+++ b/include/drm/drm_buddy.h
@@ -10,6 +10,7 @@
 #include <linux/list.h>
 #include <linux/slab.h>
 #include <linux/sched.h>
+#include <linux/rbtree.h>
 
 #include <drm/drm_print.h>
 
@@ -22,6 +23,44 @@
 	start__ >= max__ || size__ > max__ - start__; \
 })
 
+/*
+ * for_each_rb_entry() - iterate over an RB tree in order
+ * @pos:	the struct type * to use as a loop cursor
+ * @root:	pointer to struct rb_root to iterate
+ * @member:	name of the rb_node field within the struct
+ */
+#define for_each_rb_entry(pos, root, member) \
+	for (pos = rb_entry_safe(rb_first(root), typeof(*pos), member); \
+	     pos; \
+	     pos = rb_entry_safe(rb_next(&(pos)->member), typeof(*pos), member))
+
+/*
+ * for_each_rb_entry_reverse() - iterate over an RB tree in reverse order
+ * @pos:	the struct type * to use as a loop cursor
+ * @root:	pointer to struct rb_root to iterate
+ * @member:	name of the rb_node field within the struct
+ */
+#define for_each_rb_entry_reverse(pos, root, member) \
+	for (pos = rb_entry_safe(rb_last(root), typeof(*pos), member); \
+	     pos; \
+	     pos = rb_entry_safe(rb_prev(&(pos)->member), typeof(*pos), member))
+
+/**
+ * for_each_rb_entry_reverse_safe() - safely iterate over an RB tree in reverse order
+ * @pos:	the struct type * to use as a loop cursor.
+ * @n:		another struct type * to use as temporary storage.
+ * @root:	pointer to struct rb_root to iterate.
+ * @member:	name of the rb_node field within the struct.
+ */
+#define for_each_rb_entry_reverse_safe(pos, n, root, member) \
+	for (pos = rb_entry_safe(rb_last(root), typeof(*pos), member), \
+	     n = pos ? rb_entry_safe(rb_prev(&(pos)->member), typeof(*pos), member) : NULL; \
+	     pos; \
+	     pos = n, n = pos ? rb_entry_safe(rb_prev(&(pos)->member), typeof(*pos), member) : NULL)
+
+#define for_each_free_tree() \
+	for (enum free_tree tree = CLEAR_TREE; tree <= DIRTY_TREE; tree++)
+
 #define DRM_BUDDY_RANGE_ALLOCATION		BIT(0)
 #define DRM_BUDDY_TOPDOWN_ALLOCATION		BIT(1)
 #define DRM_BUDDY_CONTIGUOUS_ALLOCATION		BIT(2)
@@ -29,6 +68,11 @@
 #define DRM_BUDDY_CLEARED			BIT(4)
 #define DRM_BUDDY_TRIM_DISABLE			BIT(5)
 
+enum free_tree {
+	CLEAR_TREE = 0,
+	DIRTY_TREE,
+};
+
 struct drm_buddy_block {
 #define DRM_BUDDY_HEADER_OFFSET GENMASK_ULL(63, 12)
 #define DRM_BUDDY_HEADER_STATE  GENMASK_ULL(11, 10)
@@ -55,6 +99,9 @@ struct drm_buddy_block {
 	 */
 	struct list_head link;
 	struct list_head tmp_link;
+
+	enum free_tree tree;
+	struct rb_node rb;
 };
 
 /* Order-zero must be at least SZ_4K */
@@ -68,7 +115,8 @@ struct drm_buddy_block {
  */
 struct drm_buddy {
 	/* Maintain a free list for each order. */
-	struct list_head *free_list;
+	struct rb_root *clear_tree;
+	struct rb_root *dirty_tree;
 
 	/*
 	 * Maintain explicit binary tree(s) to track the allocation of the


--- a/drivers/gpu/drm/amd/amdgpu/gfx_v9_0.c	2025-07-12 17:16:53.286394076 +0200
+++ b/drivers/gpu/drm/amd/amdgpu/gfx_v9_0.c	2025-07-12 17:43:17.514165504 +0200
@@ -66,6 +66,92 @@
 #define mmGCEA_PROBE_MAP                        0x070c
 #define mmGCEA_PROBE_MAP_BASE_IDX               0
 
+/* Helper macro for conditional register writes to reduce MMIO overhead */
+#ifndef GFX_V9_WREG_IF_CHANGED_H
+#define GFX_V9_WREG_IF_CHANGED_H
+
+#define WREG32_IF_CHANGED(_off_expr, _val_expr)                               \
+do {                                                                  \
+	const u32 __io_off = (_off_expr);                             \
+	const u32 __io_val = (_val_expr);                             \
+	const u32 __io_old = RREG32(__io_off);                        \
+	if (unlikely(__io_old != __io_val))                           \
+		WREG32(__io_off, __io_val);                           \
+} while (0)
+
+#endif /* GFX_V9_WREG_IF_CHANGED_H */
+
+/* File-scoped state for GRBM index caching to adhere to single-file modification constraint */
+struct grbm_state {
+	spinlock_t lock;
+	bool cache_valid;
+	u32 current_idx;
+	atomic64_t cache_hits;
+	atomic64_t cache_misses;
+};
+static struct grbm_state grbm_state_var;
+
+static void gfx_v9_0_grbm_state_init(struct amdgpu_device *adev)
+{
+	spin_lock_init(&grbm_state_var.lock);
+	grbm_state_var.cache_valid = false;
+	grbm_state_var.current_idx = 0;
+	atomic64_set(&grbm_state_var.cache_hits, 0);
+	atomic64_set(&grbm_state_var.cache_misses, 0);
+}
+
+static void gfx_v9_0_grbm_state_invalidate(struct amdgpu_device *adev)
+{
+	unsigned long flags;
+	spin_lock_irqsave(&grbm_state_var.lock, flags);
+	grbm_state_var.cache_valid = false;
+	spin_unlock_irqrestore(&grbm_state_var.lock, flags);
+}
+
+static __always_inline int
+gfx9_wait_reg_off(struct amdgpu_device *adev, u32 reg_offset_in_block,
+				  u32 mask, u32 val_target, unsigned long timeout_us)
+{
+	u32 current_read_val;
+	ktime_t timeout_expire;
+
+	if (unlikely(!adev))
+		return -EINVAL;
+
+	if (timeout_us == 0)
+		timeout_us = adev->usec_timeout;
+
+	timeout_expire = ktime_add_us(ktime_get(), timeout_us);
+
+	do {
+		current_read_val = RREG32(reg_offset_in_block);
+		if ((current_read_val & mask) == val_target)
+			return 0;
+
+		if (in_atomic() || irqs_disabled()) {
+			if (timeout_us > 20)
+				udelay(1);
+			else
+				cpu_relax();
+		} else {
+			if (timeout_us > 1000)
+				usleep_range(10, 100);
+			else
+				udelay(1);
+		}
+	} while (ktime_before(ktime_get(), timeout_expire));
+
+	current_read_val = RREG32(reg_offset_in_block);
+	if ((current_read_val & mask) == val_target)
+		return 0;
+
+	dev_warn_ratelimited(adev->dev,
+						 "Register wait timeout: reg=0x%x, mask=0x%x, target=0x%x, actual=0x%x\n",
+					  reg_offset_in_block, mask, val_target, current_read_val);
+
+	return -ETIMEDOUT;
+}
+
 MODULE_FIRMWARE("amdgpu/vega10_ce.bin");
 MODULE_FIRMWARE("amdgpu/vega10_pfp.bin");
 MODULE_FIRMWARE("amdgpu/vega10_me.bin");
@@ -1013,37 +1099,43 @@ static void gfx_v9_0_kiq_invalidate_tlbs
 			PACKET3_INVALIDATE_TLBS_FLUSH_TYPE(flush_type));
 }
 
-
-static void gfx_v9_0_kiq_reset_hw_queue(struct amdgpu_ring *kiq_ring, uint32_t queue_type,
-					uint32_t me_id, uint32_t pipe_id, uint32_t queue_id,
-					uint32_t xcc_id, uint32_t vmid)
+static void gfx_v9_0_kiq_reset_hw_queue(struct amdgpu_ring *kiq_ring,
+										u32 queue_type,
+										u32 me_id, u32 pipe_id, u32 queue_id,
+										u32 xcc_id, u32 vmid)
 {
 	struct amdgpu_device *adev = kiq_ring->adev;
-	unsigned i;
+	const unsigned long tmo = adev->usec_timeout / 5 + 1;
+	int r;
 
-	/* enter save mode */
 	amdgpu_gfx_rlc_enter_safe_mode(adev, xcc_id);
+
 	mutex_lock(&adev->srbm_mutex);
 	soc15_grbm_select(adev, me_id, pipe_id, queue_id, 0, 0);
+	mutex_unlock(&adev->srbm_mutex);
 
-	if (queue_type == AMDGPU_RING_TYPE_COMPUTE) {
-		WREG32_SOC15(GC, 0, mmCP_HQD_DEQUEUE_REQUEST, 0x2);
-		WREG32_SOC15(GC, 0, mmSPI_COMPUTE_QUEUE_RESET, 0x1);
-		/* wait till dequeue take effects */
-		for (i = 0; i < adev->usec_timeout; i++) {
-			if (!(RREG32_SOC15(GC, 0, mmCP_HQD_ACTIVE) & 1))
-				break;
-			udelay(1);
-		}
-		if (i >= adev->usec_timeout)
-			dev_err(adev->dev, "fail to wait on hqd deactive\n");
-	} else {
-		dev_err(adev->dev, "reset queue_type(%d) not supported\n", queue_type);
+	if (queue_type != AMDGPU_RING_TYPE_COMPUTE) {
+		dev_err_ratelimited(adev->dev,
+							"KIQ reset: queue_type %u not supported\n", queue_type);
+		goto restore;
 	}
 
+	WREG32_SOC15(GC, 0, mmCP_HQD_DEQUEUE_REQUEST, 0x2);
+	WREG32_SOC15(GC, 0, mmSPI_COMPUTE_QUEUE_RESET, 0x1);
+
+	r = gfx9_wait_reg_off(adev,
+						  SOC15_REG_OFFSET(GC, 0, mmCP_HQD_ACTIVE),
+						  CP_HQD_ACTIVE__ACTIVE_MASK, 0, tmo);
+	if (r)
+		dev_err_ratelimited(adev->dev,
+							"KIQ reset: HQD (ME%u/PIPE%u/Q%u) timeout\n",
+							me_id, pipe_id, queue_id);
+
+		restore:
+		mutex_lock(&adev->srbm_mutex);
 	soc15_grbm_select(adev, 0, 0, 0, 0, 0);
 	mutex_unlock(&adev->srbm_mutex);
-	/* exit safe mode */
+
 	amdgpu_gfx_rlc_exit_safe_mode(adev, xcc_id);
 }
 
@@ -2216,106 +2308,62 @@ static int gfx_v9_0_sw_init(struct amdgp
 	unsigned int hw_prio;
 
 	switch (amdgpu_ip_version(adev, GC_HWIP, 0)) {
-	case IP_VERSION(9, 0, 1):
-	case IP_VERSION(9, 2, 1):
-	case IP_VERSION(9, 4, 0):
-	case IP_VERSION(9, 2, 2):
-	case IP_VERSION(9, 1, 0):
-	case IP_VERSION(9, 4, 1):
-	case IP_VERSION(9, 3, 0):
-	case IP_VERSION(9, 4, 2):
-		adev->gfx.mec.num_mec = 2;
-		break;
-	default:
-		adev->gfx.mec.num_mec = 1;
-		break;
+		case IP_VERSION(9, 0, 1):
+		case IP_VERSION(9, 2, 1):
+		case IP_VERSION(9, 4, 0):
+		case IP_VERSION(9, 2, 2):
+		case IP_VERSION(9, 1, 0):
+		case IP_VERSION(9, 4, 1):
+		case IP_VERSION(9, 3, 0):
+		case IP_VERSION(9, 4, 2):
+			adev->gfx.mec.num_mec = 2;
+			break;
+		default:
+			adev->gfx.mec.num_mec = 1;
+			break;
 	}
 
 	switch (amdgpu_ip_version(adev, GC_HWIP, 0)) {
-	case IP_VERSION(9, 0, 1):
-	case IP_VERSION(9, 2, 1):
-	case IP_VERSION(9, 4, 0):
-	case IP_VERSION(9, 2, 2):
-	case IP_VERSION(9, 1, 0):
-	case IP_VERSION(9, 3, 0):
-		adev->gfx.cleaner_shader_ptr = gfx_9_4_2_cleaner_shader_hex;
-		adev->gfx.cleaner_shader_size = sizeof(gfx_9_4_2_cleaner_shader_hex);
-		if (adev->gfx.me_fw_version  >= 167 &&
-		    adev->gfx.pfp_fw_version >= 196 &&
-		    adev->gfx.mec_fw_version >= 474) {
-			adev->gfx.enable_cleaner_shader = true;
-			r = amdgpu_gfx_cleaner_shader_sw_init(adev, adev->gfx.cleaner_shader_size);
-			if (r) {
-				adev->gfx.enable_cleaner_shader = false;
-				dev_err(adev->dev, "Failed to initialize cleaner shader\n");
-			}
-		}
-		break;
-	case IP_VERSION(9, 4, 2):
-		adev->gfx.cleaner_shader_ptr = gfx_9_4_2_cleaner_shader_hex;
-		adev->gfx.cleaner_shader_size = sizeof(gfx_9_4_2_cleaner_shader_hex);
-		if (adev->gfx.mec_fw_version >= 88) {
-			adev->gfx.enable_cleaner_shader = true;
-			r = amdgpu_gfx_cleaner_shader_sw_init(adev, adev->gfx.cleaner_shader_size);
-			if (r) {
-				adev->gfx.enable_cleaner_shader = false;
-				dev_err(adev->dev, "Failed to initialize cleaner shader\n");
+		case IP_VERSION(9, 4, 2):
+			adev->gfx.cleaner_shader_ptr = gfx_9_4_2_cleaner_shader_hex;
+			adev->gfx.cleaner_shader_size = sizeof(gfx_9_4_2_cleaner_shader_hex);
+			if (adev->gfx.mec_fw_version >= 88) {
+				adev->gfx.enable_cleaner_shader = true;
+				r = amdgpu_gfx_cleaner_shader_sw_init(adev, adev->gfx.cleaner_shader_size);
+				if (r) {
+					adev->gfx.enable_cleaner_shader = false;
+					dev_err(adev->dev, "Failed to initialize cleaner shader\n");
+				}
 			}
-		}
-		break;
-	default:
-		adev->gfx.enable_cleaner_shader = false;
-		break;
+			break;
+		default:
+			adev->gfx.enable_cleaner_shader = false;
+			break;
 	}
 
 	adev->gfx.mec.num_pipe_per_mec = 4;
 	adev->gfx.mec.num_queue_per_pipe = 8;
 
-	/* EOP Event */
 	r = amdgpu_irq_add_id(adev, SOC15_IH_CLIENTID_GRBM_CP, GFX_9_0__SRCID__CP_EOP_INTERRUPT, &adev->gfx.eop_irq);
-	if (r)
-		return r;
-
-	/* Bad opcode Event */
-	r = amdgpu_irq_add_id(adev, SOC15_IH_CLIENTID_GRBM_CP,
-			      GFX_9_0__SRCID__CP_BAD_OPCODE_ERROR,
-			      &adev->gfx.bad_op_irq);
-	if (r)
-		return r;
-
-	/* Privileged reg */
-	r = amdgpu_irq_add_id(adev, SOC15_IH_CLIENTID_GRBM_CP, GFX_9_0__SRCID__CP_PRIV_REG_FAULT,
-			      &adev->gfx.priv_reg_irq);
-	if (r)
-		return r;
-
-	/* Privileged inst */
-	r = amdgpu_irq_add_id(adev, SOC15_IH_CLIENTID_GRBM_CP, GFX_9_0__SRCID__CP_PRIV_INSTR_FAULT,
-			      &adev->gfx.priv_inst_irq);
-	if (r)
-		return r;
-
-	/* ECC error */
-	r = amdgpu_irq_add_id(adev, SOC15_IH_CLIENTID_GRBM_CP, GFX_9_0__SRCID__CP_ECC_ERROR,
-			      &adev->gfx.cp_ecc_error_irq);
-	if (r)
-		return r;
-
-	/* FUE error */
-	r = amdgpu_irq_add_id(adev, SOC15_IH_CLIENTID_GRBM_CP, GFX_9_0__SRCID__CP_FUE_ERROR,
-			      &adev->gfx.cp_ecc_error_irq);
-	if (r)
-		return r;
+	if (r) return r;
+	r = amdgpu_irq_add_id(adev, SOC15_IH_CLIENTID_GRBM_CP, GFX_9_0__SRCID__CP_BAD_OPCODE_ERROR, &adev->gfx.bad_op_irq);
+	if (r) return r;
+	r = amdgpu_irq_add_id(adev, SOC15_IH_CLIENTID_GRBM_CP, GFX_9_0__SRCID__CP_PRIV_REG_FAULT, &adev->gfx.priv_reg_irq);
+	if (r) return r;
+	r = amdgpu_irq_add_id(adev, SOC15_IH_CLIENTID_GRBM_CP, GFX_9_0__SRCID__CP_PRIV_INSTR_FAULT, &adev->gfx.priv_inst_irq);
+	if (r) return r;
+	r = amdgpu_irq_add_id(adev, SOC15_IH_CLIENTID_GRBM_CP, GFX_9_0__SRCID__CP_ECC_ERROR, &adev->gfx.cp_ecc_error_irq);
+	if (r) return r;
+	r = amdgpu_irq_add_id(adev, SOC15_IH_CLIENTID_GRBM_CP, GFX_9_0__SRCID__CP_FUE_ERROR, &adev->gfx.cp_ecc_error_irq);
+	if (r) return r;
 
 	adev->gfx.gfx_current_status = AMDGPU_GFX_NORMAL_MODE;
 
-	if (adev->gfx.rlc.funcs) {
-		if (adev->gfx.rlc.funcs->init) {
-			r = adev->gfx.rlc.funcs->init(adev);
-			if (r) {
-				dev_err(adev->dev, "Failed to init rlc BOs!\n");
-				return r;
-			}
+	if (adev->gfx.rlc.funcs && adev->gfx.rlc.funcs->init) {
+		r = adev->gfx.rlc.funcs->init(adev);
+		if (r) {
+			dev_err(adev->dev, "Failed to init rlc BOs!\n");
+			return r;
 		}
 	}
 
@@ -2325,28 +2373,18 @@ static int gfx_v9_0_sw_init(struct amdgp
 		return r;
 	}
 
-	/* set up the gfx ring */
 	for (i = 0; i < adev->gfx.num_gfx_rings; i++) {
 		ring = &adev->gfx.gfx_ring[i];
 		ring->ring_obj = NULL;
-		if (!i)
-			sprintf(ring->name, "gfx");
-		else
-			sprintf(ring->name, "gfx_%d", i);
+		sprintf(ring->name, "gfx_%d", i);
 		ring->use_doorbell = true;
 		ring->doorbell_index = adev->doorbell_index.gfx_ring0 << 1;
-
-		/* disable scheduler on the real ring */
 		ring->no_scheduler = adev->gfx.mcbp;
 		ring->vm_hub = AMDGPU_GFXHUB(0);
-		r = amdgpu_ring_init(adev, ring, 1024, &adev->gfx.eop_irq,
-				     AMDGPU_CP_IRQ_GFX_ME0_PIPE0_EOP,
-				     AMDGPU_RING_PRIO_DEFAULT, NULL);
-		if (r)
-			return r;
+		r = amdgpu_ring_init(adev, ring, 1024, &adev->gfx.eop_irq, AMDGPU_CP_IRQ_GFX_ME0_PIPE0_EOP, AMDGPU_RING_PRIO_DEFAULT, NULL);
+		if (r) return r;
 	}
 
-	/* set up the software rings */
 	if (adev->gfx.mcbp && adev->gfx.num_gfx_rings) {
 		for (i = 0; i < GFX9_NUM_SW_GFX_RINGS; i++) {
 			ring = &adev->gfx.sw_gfx_ring[i];
@@ -2357,24 +2395,18 @@ static int gfx_v9_0_sw_init(struct amdgp
 			ring->is_sw_ring = true;
 			hw_prio = amdgpu_sw_ring_priority(i);
 			ring->vm_hub = AMDGPU_GFXHUB(0);
-			r = amdgpu_ring_init(adev, ring, 1024, &adev->gfx.eop_irq,
-					     AMDGPU_CP_IRQ_GFX_ME0_PIPE0_EOP, hw_prio,
-					     NULL);
-			if (r)
-				return r;
+			r = amdgpu_ring_init(adev, ring, 1024, &adev->gfx.eop_irq, AMDGPU_CP_IRQ_GFX_ME0_PIPE0_EOP, hw_prio, NULL);
+			if (r) return r;
 			ring->wptr = 0;
 		}
 
-		/* init the muxer and add software rings */
-		r = amdgpu_ring_mux_init(&adev->gfx.muxer, &adev->gfx.gfx_ring[0],
-					 GFX9_NUM_SW_GFX_RINGS);
+		r = amdgpu_ring_mux_init(&adev->gfx.muxer, &adev->gfx.gfx_ring[0], GFX9_NUM_SW_GFX_RINGS);
 		if (r) {
 			DRM_ERROR("amdgpu_ring_mux_init failed(%d)\n", r);
 			return r;
 		}
 		for (i = 0; i < GFX9_NUM_SW_GFX_RINGS; i++) {
-			r = amdgpu_ring_mux_add_sw_ring(&adev->gfx.muxer,
-							&adev->gfx.sw_gfx_ring[i]);
+			r = amdgpu_ring_mux_add_sw_ring(&adev->gfx.muxer, &adev->gfx.sw_gfx_ring[i]);
 			if (r) {
 				DRM_ERROR("amdgpu_ring_mux_add_sw_ring failed(%d)\n", r);
 				return r;
@@ -2382,31 +2414,22 @@ static int gfx_v9_0_sw_init(struct amdgp
 		}
 	}
 
-	/* set up the compute queues - allocate horizontally across pipes */
 	ring_id = 0;
 	for (i = 0; i < adev->gfx.mec.num_mec; ++i) {
 		for (j = 0; j < adev->gfx.mec.num_queue_per_pipe; j++) {
 			for (k = 0; k < adev->gfx.mec.num_pipe_per_mec; k++) {
-				if (!amdgpu_gfx_is_mec_queue_enabled(adev, 0, i,
-								     k, j))
+				if (!amdgpu_gfx_is_mec_queue_enabled(adev, 0, i, k, j))
 					continue;
 
-				r = gfx_v9_0_compute_ring_init(adev,
-							       ring_id,
-							       i, k, j);
-				if (r)
-					return r;
-
+				r = gfx_v9_0_compute_ring_init(adev, ring_id, i, k, j);
+				if (r) return r;
 				ring_id++;
 			}
 		}
 	}
 
-	/* TODO: Add queue reset mask when FW fully supports it */
-	adev->gfx.gfx_supported_reset =
-		amdgpu_get_soft_full_reset_mask(&adev->gfx.gfx_ring[0]);
-	adev->gfx.compute_supported_reset =
-		amdgpu_get_soft_full_reset_mask(&adev->gfx.compute_ring[0]);
+	adev->gfx.gfx_supported_reset = amdgpu_get_soft_full_reset_mask(&adev->gfx.gfx_ring[0]);
+	adev->gfx.compute_supported_reset = amdgpu_get_soft_full_reset_mask(&adev->gfx.compute_ring[0]);
 
 	r = amdgpu_gfx_kiq_init(adev, GFX9_MEC_HPD_SIZE, 0);
 	if (r) {
@@ -2415,19 +2438,17 @@ static int gfx_v9_0_sw_init(struct amdgp
 	}
 
 	r = amdgpu_gfx_kiq_init_ring(adev, xcc_id);
-	if (r)
-		return r;
+	if (r) return r;
+
+	gfx_v9_0_grbm_state_init(adev);
 
-	/* create MQD for all compute queues as wel as KIQ for SRIOV case */
 	r = amdgpu_gfx_mqd_sw_init(adev, sizeof(struct v9_mqd_allocation), 0);
-	if (r)
-		return r;
+	if (r) return r;
 
 	adev->gfx.ce_ram_size = 0x8000;
 
 	r = gfx_v9_0_gpu_early_init(adev);
-	if (r)
-		return r;
+	if (r) return r;
 
 	if (amdgpu_gfx_ras_sw_init(adev)) {
 		dev_err(adev->dev, "Failed to initialize gfx ras block!\n");
@@ -2437,13 +2458,11 @@ static int gfx_v9_0_sw_init(struct amdgp
 	gfx_v9_0_alloc_ip_dump(adev);
 
 	r = amdgpu_gfx_sysfs_init(adev);
-	if (r)
-		return r;
+	if (r) return r;
 
 	return 0;
 }
 
-
 static int gfx_v9_0_sw_fini(struct amdgpu_ip_block *ip_block)
 {
 	int i;
@@ -2491,27 +2510,52 @@ static void gfx_v9_0_tiling_mode_table_i
 	/* TODO */
 }
 
-void gfx_v9_0_select_se_sh(struct amdgpu_device *adev, u32 se_num, u32 sh_num,
-			   u32 instance, int xcc_id)
+void gfx_v9_0_select_se_sh(struct amdgpu_device *adev, u32 se_num,
+						   u32 sh_num, u32 instance, int xcc_id)
 {
-	u32 data;
+	unsigned long flags;
+	u32 data = 0;
 
-	if (instance == 0xffffffff)
-		data = REG_SET_FIELD(0, GRBM_GFX_INDEX, INSTANCE_BROADCAST_WRITES, 1);
-	else
-		data = REG_SET_FIELD(0, GRBM_GFX_INDEX, INSTANCE_INDEX, instance);
+	if (instance == 0xffffffff) {
+		data |= GRBM_GFX_INDEX__INSTANCE_BROADCAST_WRITES_MASK;
+	} else {
+		data = REG_SET_FIELD(data, GRBM_GFX_INDEX, INSTANCE_INDEX, instance);
+	}
 
-	if (se_num == 0xffffffff)
-		data = REG_SET_FIELD(data, GRBM_GFX_INDEX, SE_BROADCAST_WRITES, 1);
-	else
+	if (se_num == 0xffffffff) {
+		data |= GRBM_GFX_INDEX__SE_BROADCAST_WRITES_MASK;
+	} else {
 		data = REG_SET_FIELD(data, GRBM_GFX_INDEX, SE_INDEX, se_num);
+	}
 
-	if (sh_num == 0xffffffff)
-		data = REG_SET_FIELD(data, GRBM_GFX_INDEX, SH_BROADCAST_WRITES, 1);
-	else
+	if (sh_num == 0xffffffff) {
+		data |= GRBM_GFX_INDEX__SH_BROADCAST_WRITES_MASK;
+	} else {
 		data = REG_SET_FIELD(data, GRBM_GFX_INDEX, SH_INDEX, sh_num);
+	}
 
-	WREG32_SOC15_RLC_SHADOW(GC, 0, mmGRBM_GFX_INDEX, data);
+	if (likely(grbm_state_var.cache_valid)) {
+		if (READ_ONCE(grbm_state_var.current_idx) == data) {
+			atomic64_inc(&grbm_state_var.cache_hits);
+			return;
+		}
+	}
+
+	spin_lock_irqsave(&grbm_state_var.lock, flags);
+
+	if (grbm_state_var.cache_valid &&
+		grbm_state_var.current_idx == data) {
+		atomic64_inc(&grbm_state_var.cache_hits);
+	spin_unlock_irqrestore(&grbm_state_var.lock, flags);
+	return;
+		}
+
+		WREG32_SOC15_RLC_SHADOW(GC, 0, mmGRBM_GFX_INDEX, data);
+		grbm_state_var.current_idx = data;
+		grbm_state_var.cache_valid = true;
+		atomic64_inc(&grbm_state_var.cache_misses);
+
+		spin_unlock_irqrestore(&grbm_state_var.lock, flags);
 }
 
 static u32 gfx_v9_0_get_rb_active_bitmap(struct amdgpu_device *adev)
@@ -2650,51 +2694,111 @@ static void gfx_v9_0_init_sq_config(stru
 	}
 }
 
+static void gfx_v9_0_optimize_memory_subsystem(struct amdgpu_device *adev)
+{
+	if (adev->gfx.gfx_current_status != AMDGPU_GFX_NORMAL_MODE) {
+		dev_dbg(adev->dev, "GPU not in normal mode, skipping memory optimization\n");
+		return;
+	}
+
+	switch (amdgpu_ip_version(adev, GC_HWIP, 0)) {
+		case IP_VERSION(9, 0, 1):
+		case IP_VERSION(9, 2, 1):
+		case IP_VERSION(9, 4, 0):
+		case IP_VERSION(9, 1, 0):
+		case IP_VERSION(9, 2, 2):
+		case IP_VERSION(9, 3, 0):
+			WREG32_SOC15(GC, 0, mmSQC_CONFIG, 0x020a2000);
+			WREG32_SOC15(GC, 0, mmTA_CNTL_AUX, 0x010b0000);
+			WREG32_SOC15(GC, 0, mmVGT_CACHE_INVALIDATION, 0x19200000);
+			break;
+		default:
+			break;
+	}
+
+	switch (amdgpu_ip_version(adev, GC_HWIP, 0)) {
+		case IP_VERSION(9, 0, 1):
+		case IP_VERSION(9, 4, 0):
+			WREG32_SOC15(GC, 0, mmTCP_CHAN_STEER_HI, 0x4a2c0e68);
+			WREG32_SOC15(GC, 0, mmTCP_CHAN_STEER_LO, 0xb5d3f197);
+			WREG32_SOC15(GC, 0, mmVGT_GS_MAX_WAVE_ID, 0x000003ff);
+			WREG32_SOC15(GC, 0, mmSPI_RESOURCE_RESERVE_CU_0, 0x00000800);
+			WREG32_SOC15(GC, 0, mmSPI_RESOURCE_RESERVE_CU_1, 0x00000800);
+			WREG32_SOC15(GC, 0, mmSPI_RESOURCE_RESERVE_EN_CU_0, 0x00ffff87);
+			WREG32_SOC15(GC, 0, mmSPI_RESOURCE_RESERVE_EN_CU_1, 0x00ffff8f);
+			break;
+		case IP_VERSION(9, 2, 1):
+			WREG32_SOC15(GC, 0, mmTCP_CHAN_STEER_HI, 0x00000000);
+			WREG32_SOC15(GC, 0, mmTCP_CHAN_STEER_LO, 0x76325410);
+			WREG32_SOC15(GC, 0, mmVGT_GS_MAX_WAVE_ID, 0x000003ff);
+			WREG32_SOC15(GC, 0, mmSPI_RESOURCE_RESERVE_CU_0, 0x00000800);
+			WREG32_SOC15(GC, 0, mmSPI_RESOURCE_RESERVE_CU_1, 0x00000800);
+			WREG32_SOC15(GC, 0, mmSPI_RESOURCE_RESERVE_EN_CU_0, 0x0000ff87);
+			WREG32_SOC15(GC, 0, mmSPI_RESOURCE_RESERVE_EN_CU_1, 0x0000ff8f);
+			break;
+		case IP_VERSION(9, 1, 0):
+		case IP_VERSION(9, 2, 2):
+		case IP_VERSION(9, 3, 0):
+			WREG32_SOC15(GC, 0, mmTCP_CHAN_STEER_HI, 0x00000000);
+			WREG32_SOC15(GC, 0, mmTCP_CHAN_STEER_LO, 0x00003120);
+			if (amdgpu_ip_version(adev, GC_HWIP, 0) == IP_VERSION(9, 3, 0))
+				WREG32_SOC15(GC, 0, mmGCEA_PROBE_MAP, 0x0000cccc);
+		WREG32_SOC15(GC, 0, mmVGT_GS_MAX_WAVE_ID, 0x000000ff);
+		break;
+		default:
+			break;
+	}
+
+	dev_dbg(adev->dev, "Memory subsystem optimization applied for IP %d.%d.%d\n",
+			IP_VERSION_MAJ(amdgpu_ip_version(adev, GC_HWIP, 0)),
+			IP_VERSION_MIN(amdgpu_ip_version(adev, GC_HWIP, 0)),
+			IP_VERSION_REV(amdgpu_ip_version(adev, GC_HWIP, 0)));
+}
+
 static void gfx_v9_0_constants_init(struct amdgpu_device *adev)
 {
 	u32 tmp;
 	int i;
 
 	if (!amdgpu_sriov_vf(adev) ||
-	    amdgpu_ip_version(adev, GC_HWIP, 0) != IP_VERSION(9, 4, 2)) {
+		amdgpu_ip_version(adev, GC_HWIP, 0) != IP_VERSION(9, 4, 2)) {
 		WREG32_FIELD15_RLC(GC, 0, GRBM_CNTL, READ_TIMEOUT, 0xff);
-	}
+		}
 
-	gfx_v9_0_tiling_mode_table_init(adev);
+		gfx_v9_0_tiling_mode_table_init(adev);
 
 	if (adev->gfx.num_gfx_rings)
 		gfx_v9_0_setup_rb(adev);
 	gfx_v9_0_get_cu_info(adev, &adev->gfx.cu_info);
 	adev->gfx.config.db_debug2 = RREG32_SOC15(GC, 0, mmDB_DEBUG2);
 
-	/* XXX SH_MEM regs */
-	/* where to put LDS, scratch, GPUVM in FSA64 space */
+	/* Apply Godlike optimizations */
+	gfx_v9_0_optimize_memory_subsystem(adev);
+
 	mutex_lock(&adev->srbm_mutex);
 	for (i = 0; i < adev->vm_manager.id_mgr[AMDGPU_GFXHUB(0)].num_ids; i++) {
 		soc15_grbm_select(adev, 0, 0, 0, i, 0);
-		/* CP and shaders */
 		if (i == 0) {
 			tmp = REG_SET_FIELD(0, SH_MEM_CONFIG, ALIGNMENT_MODE,
-					    SH_MEM_ALIGNMENT_MODE_UNALIGNED);
+								SH_MEM_ALIGNMENT_MODE_UNALIGNED);
 			tmp = REG_SET_FIELD(tmp, SH_MEM_CONFIG, RETRY_DISABLE,
-					    !!adev->gmc.noretry);
+								!!adev->gmc.noretry);
 			WREG32_SOC15_RLC(GC, 0, mmSH_MEM_CONFIG, tmp);
 			WREG32_SOC15_RLC(GC, 0, mmSH_MEM_BASES, 0);
 		} else {
 			tmp = REG_SET_FIELD(0, SH_MEM_CONFIG, ALIGNMENT_MODE,
-					    SH_MEM_ALIGNMENT_MODE_UNALIGNED);
+								SH_MEM_ALIGNMENT_MODE_UNALIGNED);
 			tmp = REG_SET_FIELD(tmp, SH_MEM_CONFIG, RETRY_DISABLE,
-					    !!adev->gmc.noretry);
+								!!adev->gmc.noretry);
 			WREG32_SOC15_RLC(GC, 0, mmSH_MEM_CONFIG, tmp);
 			tmp = REG_SET_FIELD(0, SH_MEM_BASES, PRIVATE_BASE,
-				(adev->gmc.private_aperture_start >> 48));
+								(adev->gmc.private_aperture_start >> 48));
 			tmp = REG_SET_FIELD(tmp, SH_MEM_BASES, SHARED_BASE,
-				(adev->gmc.shared_aperture_start >> 48));
+								(adev->gmc.shared_aperture_start >> 48));
 			WREG32_SOC15_RLC(GC, 0, mmSH_MEM_BASES, tmp);
 		}
 	}
 	soc15_grbm_select(adev, 0, 0, 0, 0, 0);
-
 	mutex_unlock(&adev->srbm_mutex);
 
 	gfx_v9_0_init_compute_vmid(adev);
@@ -2916,28 +3020,22 @@ static void gfx_v9_0_enable_save_restore
 }
 
 static void pwr_10_0_gfxip_control_over_cgpg(struct amdgpu_device *adev,
-					     bool enable)
+											 bool enable)
 {
-	uint32_t data = 0;
-	uint32_t default_data = 0;
+	const u32 off = SOC15_REG_OFFSET(PWR, 0, mmPWR_MISC_CNTL_STATUS);
+	u32 v;
 
-	default_data = data = RREG32(SOC15_REG_OFFSET(PWR, 0, mmPWR_MISC_CNTL_STATUS));
 	if (enable) {
-		/* enable GFXIP control over CGPG */
-		data |= PWR_MISC_CNTL_STATUS__PWR_GFX_RLC_CGPG_EN_MASK;
-		if(default_data != data)
-			WREG32(SOC15_REG_OFFSET(PWR, 0, mmPWR_MISC_CNTL_STATUS), data);
-
-		/* update status */
-		data &= ~PWR_MISC_CNTL_STATUS__PWR_GFXOFF_STATUS_MASK;
-		data |= (2 << PWR_MISC_CNTL_STATUS__PWR_GFXOFF_STATUS__SHIFT);
-		if(default_data != data)
-			WREG32(SOC15_REG_OFFSET(PWR, 0, mmPWR_MISC_CNTL_STATUS), data);
+		v = RREG32(off) | PWR_MISC_CNTL_STATUS__PWR_GFX_RLC_CGPG_EN_MASK;
+		WREG32_IF_CHANGED(off, v);
+
+		v  = RREG32(off);
+		v &= ~PWR_MISC_CNTL_STATUS__PWR_GFXOFF_STATUS_MASK;
+		v |=  (2 << PWR_MISC_CNTL_STATUS__PWR_GFXOFF_STATUS__SHIFT);
+		WREG32_IF_CHANGED(off, v);
 	} else {
-		/* restore GFXIP control over GCPG */
-		data &= ~PWR_MISC_CNTL_STATUS__PWR_GFX_RLC_CGPG_EN_MASK;
-		if(default_data != data)
-			WREG32(SOC15_REG_OFFSET(PWR, 0, mmPWR_MISC_CNTL_STATUS), data);
+		v = RREG32(off) & ~PWR_MISC_CNTL_STATUS__PWR_GFX_RLC_CGPG_EN_MASK;
+		WREG32_IF_CHANGED(off, v);
 	}
 }
 
@@ -2984,75 +3082,61 @@ static void gfx_v9_0_init_gfx_power_gati
 }
 
 static void gfx_v9_0_enable_sck_slow_down_on_power_up(struct amdgpu_device *adev,
-						bool enable)
+													  bool enable)
 {
-	uint32_t data = 0;
-	uint32_t default_data = 0;
+	const u32 off = SOC15_REG_OFFSET(GC, 0, mmRLC_PG_CNTL);
+	u32 v = RREG32(off);
 
-	default_data = data = RREG32(SOC15_REG_OFFSET(GC, 0, mmRLC_PG_CNTL));
-	data = REG_SET_FIELD(data, RLC_PG_CNTL,
-			     SMU_CLK_SLOWDOWN_ON_PU_ENABLE,
-			     enable ? 1 : 0);
-	if (default_data != data)
-		WREG32(SOC15_REG_OFFSET(GC, 0, mmRLC_PG_CNTL), data);
+	v = REG_SET_FIELD(v, RLC_PG_CNTL,
+					  SMU_CLK_SLOWDOWN_ON_PU_ENABLE, enable ? 1 : 0);
+	WREG32_IF_CHANGED(off, v);
 }
 
 static void gfx_v9_0_enable_sck_slow_down_on_power_down(struct amdgpu_device *adev,
-						bool enable)
+														bool enable)
 {
-	uint32_t data = 0;
-	uint32_t default_data = 0;
+	const u32 off = SOC15_REG_OFFSET(GC, 0, mmRLC_PG_CNTL);
+	u32 v = RREG32(off);
 
-	default_data = data = RREG32(SOC15_REG_OFFSET(GC, 0, mmRLC_PG_CNTL));
-	data = REG_SET_FIELD(data, RLC_PG_CNTL,
-			     SMU_CLK_SLOWDOWN_ON_PD_ENABLE,
-			     enable ? 1 : 0);
-	if(default_data != data)
-		WREG32(SOC15_REG_OFFSET(GC, 0, mmRLC_PG_CNTL), data);
+	v = REG_SET_FIELD(v, RLC_PG_CNTL,
+					  SMU_CLK_SLOWDOWN_ON_PD_ENABLE, enable ? 1 : 0);
+	WREG32_IF_CHANGED(off, v);
 }
 
 static void gfx_v9_0_enable_cp_power_gating(struct amdgpu_device *adev,
-					bool enable)
+											bool enable)
 {
-	uint32_t data = 0;
-	uint32_t default_data = 0;
+	const u32 off = SOC15_REG_OFFSET(GC, 0, mmRLC_PG_CNTL);
+	u32 v = RREG32(off);
 
-	default_data = data = RREG32(SOC15_REG_OFFSET(GC, 0, mmRLC_PG_CNTL));
-	data = REG_SET_FIELD(data, RLC_PG_CNTL,
-			     CP_PG_DISABLE,
-			     enable ? 0 : 1);
-	if(default_data != data)
-		WREG32(SOC15_REG_OFFSET(GC, 0, mmRLC_PG_CNTL), data);
+	v = REG_SET_FIELD(v, RLC_PG_CNTL, CP_PG_DISABLE, enable ? 0 : 1);
+	WREG32_IF_CHANGED(off, v);
 }
 
 static void gfx_v9_0_enable_gfx_cg_power_gating(struct amdgpu_device *adev,
-						bool enable)
+												bool enable)
 {
-	uint32_t data, default_data;
+	const u32 off = SOC15_REG_OFFSET(GC, 0, mmRLC_PG_CNTL);
+	u32 v = RREG32(off);
 
-	default_data = data = RREG32(SOC15_REG_OFFSET(GC, 0, mmRLC_PG_CNTL));
-	data = REG_SET_FIELD(data, RLC_PG_CNTL,
-			     GFX_POWER_GATING_ENABLE,
-			     enable ? 1 : 0);
-	if(default_data != data)
-		WREG32(SOC15_REG_OFFSET(GC, 0, mmRLC_PG_CNTL), data);
+	v = REG_SET_FIELD(v, RLC_PG_CNTL,
+					  GFX_POWER_GATING_ENABLE, enable ? 1 : 0);
+	WREG32_IF_CHANGED(off, v);
 }
 
 static void gfx_v9_0_enable_gfx_pipeline_powergating(struct amdgpu_device *adev,
-						bool enable)
+													 bool enable)
 {
-	uint32_t data, default_data;
+	const u32 off = SOC15_REG_OFFSET(GC, 0, mmRLC_PG_CNTL);
+	u32 v = RREG32(off);
 
-	default_data = data = RREG32(SOC15_REG_OFFSET(GC, 0, mmRLC_PG_CNTL));
-	data = REG_SET_FIELD(data, RLC_PG_CNTL,
-			     GFX_PIPELINE_PG_ENABLE,
-			     enable ? 1 : 0);
-	if(default_data != data)
-		WREG32(SOC15_REG_OFFSET(GC, 0, mmRLC_PG_CNTL), data);
+	v = REG_SET_FIELD(v, RLC_PG_CNTL,
+					  GFX_PIPELINE_PG_ENABLE, enable ? 1 : 0);
+	WREG32_IF_CHANGED(off, v);
 
+	/* Read a GFX register to ensure GFX is woken up if un-gating */
 	if (!enable)
-		/* read any GFX register to wake up GFX */
-		data = RREG32(SOC15_REG_OFFSET(GC, 0, mmDB_RENDER_CONTROL));
+		(void)RREG32(SOC15_REG_OFFSET(GC, 0, mmDB_RENDER_CONTROL));
 }
 
 static void gfx_v9_0_enable_gfx_static_mg_power_gating(struct amdgpu_device *adev,
@@ -3784,40 +3868,36 @@ static int gfx_v9_0_kiq_init_register(st
 static int gfx_v9_0_kiq_fini_register(struct amdgpu_ring *ring)
 {
 	struct amdgpu_device *adev = ring->adev;
-	int j;
+	const unsigned long tmo = adev->usec_timeout / 5 + 1;
+	int r = 0;
 
-	/* disable the queue if it's active */
-	if (RREG32_SOC15(GC, 0, mmCP_HQD_ACTIVE) & 1) {
+	if (RREG32(SOC15_REG_OFFSET(GC, 0, mmCP_HQD_ACTIVE)) &
+		CP_HQD_ACTIVE__ACTIVE_MASK) {
 
 		WREG32_SOC15_RLC(GC, 0, mmCP_HQD_DEQUEUE_REQUEST, 1);
 
-		for (j = 0; j < adev->usec_timeout; j++) {
-			if (!(RREG32_SOC15(GC, 0, mmCP_HQD_ACTIVE) & 1))
-				break;
-			udelay(1);
-		}
-
-		if (j == AMDGPU_MAX_USEC_TIMEOUT) {
-			DRM_DEBUG("KIQ dequeue request failed.\n");
-
-			/* Manual disable if dequeue request times out */
-			WREG32_SOC15_RLC(GC, 0, mmCP_HQD_ACTIVE, 0);
-		}
-
-		WREG32_SOC15_RLC(GC, 0, mmCP_HQD_DEQUEUE_REQUEST,
-		      0);
-	}
-
-	WREG32_SOC15_RLC(GC, 0, mmCP_HQD_IQ_TIMER, 0);
-	WREG32_SOC15_RLC(GC, 0, mmCP_HQD_IB_CONTROL, 0);
-	WREG32_SOC15_RLC(GC, 0, mmCP_HQD_PERSISTENT_STATE, 0);
-	WREG32_SOC15_RLC(GC, 0, mmCP_HQD_PQ_DOORBELL_CONTROL, 0x40000000);
-	WREG32_SOC15_RLC(GC, 0, mmCP_HQD_PQ_DOORBELL_CONTROL, 0);
-	WREG32_SOC15_RLC(GC, 0, mmCP_HQD_PQ_RPTR, 0);
-	WREG32_SOC15_RLC(GC, 0, mmCP_HQD_PQ_WPTR_HI, 0);
-	WREG32_SOC15_RLC(GC, 0, mmCP_HQD_PQ_WPTR_LO, 0);
+	r = gfx9_wait_reg_off(adev,
+						  SOC15_REG_OFFSET(GC, 0, mmCP_HQD_ACTIVE),
+						  CP_HQD_ACTIVE__ACTIVE_MASK, 0, tmo);
+	if (r) {
+		dev_dbg_ratelimited(adev->dev,
+							"KIQ fini: dequeue timeout, forcing inactive\n");
+		WREG32_SOC15_RLC(GC, 0, mmCP_HQD_ACTIVE, 0);
+	}
+
+	WREG32_SOC15_RLC(GC, 0, mmCP_HQD_DEQUEUE_REQUEST, 0);
+		}
+
+		WREG32_SOC15_RLC(GC, 0, mmCP_HQD_IQ_TIMER, 0);
+		WREG32_SOC15_RLC(GC, 0, mmCP_HQD_IB_CONTROL, 0);
+		WREG32_SOC15_RLC(GC, 0, mmCP_HQD_PERSISTENT_STATE, 0);
+		WREG32_SOC15_RLC(GC, 0, mmCP_HQD_PQ_DOORBELL_CONTROL, 0x40000000);
+		WREG32_SOC15_RLC(GC, 0, mmCP_HQD_PQ_DOORBELL_CONTROL, 0);
+		WREG32_SOC15_RLC(GC, 0, mmCP_HQD_PQ_RPTR, 0);
+		WREG32_SOC15_RLC(GC, 0, mmCP_HQD_PQ_WPTR_HI, 0);
+		WREG32_SOC15_RLC(GC, 0, mmCP_HQD_PQ_WPTR_LO, 0);
 
-	return 0;
+		return r;
 }
 
 static int gfx_v9_0_kiq_init_queue(struct amdgpu_ring *ring)
@@ -4013,14 +4093,11 @@ static int gfx_v9_0_hw_init(struct amdgp
 	int r;
 	struct amdgpu_device *adev = ip_block->adev;
 
-	amdgpu_gfx_cleaner_shader_init(adev, adev->gfx.cleaner_shader_size,
-				       adev->gfx.cleaner_shader_ptr);
-
-	if (!amdgpu_sriov_vf(adev))
+	if (!amdgpu_sriov_vf(adev)) {
 		gfx_v9_0_init_golden_registers(adev);
+	}
 
 	gfx_v9_0_constants_init(adev);
-
 	gfx_v9_0_init_tcp_config(adev);
 
 	r = adev->gfx.rlc.funcs->resume(adev);
@@ -4032,7 +4109,7 @@ static int gfx_v9_0_hw_init(struct amdgp
 		return r;
 
 	if (amdgpu_ip_version(adev, GC_HWIP, 0) == IP_VERSION(9, 4, 2) &&
-	    !amdgpu_sriov_vf(adev))
+		!amdgpu_sriov_vf(adev))
 		gfx_v9_4_2_set_power_brake_sequence(adev);
 
 	return r;
@@ -4092,7 +4169,13 @@ static int gfx_v9_0_hw_fini(struct amdgp
 
 static int gfx_v9_0_suspend(struct amdgpu_ip_block *ip_block)
 {
-	return gfx_v9_0_hw_fini(ip_block);
+	struct amdgpu_device *adev = ip_block->adev;
+	int r;
+
+	gfx_v9_0_grbm_state_invalidate(adev);
+	r = gfx_v9_0_hw_fini(ip_block);
+
+	return r;
 }
 
 static int gfx_v9_0_resume(struct amdgpu_ip_block *ip_block)
@@ -4126,65 +4209,59 @@ static int gfx_v9_0_wait_for_idle(struct
 
 static int gfx_v9_0_soft_reset(struct amdgpu_ip_block *ip_block)
 {
-	u32 grbm_soft_reset = 0;
-	u32 tmp;
-	struct amdgpu_device *adev = ip_block->adev;
-
-	/* GRBM_STATUS */
-	tmp = RREG32_SOC15(GC, 0, mmGRBM_STATUS);
-	if (tmp & (GRBM_STATUS__PA_BUSY_MASK | GRBM_STATUS__SC_BUSY_MASK |
-		   GRBM_STATUS__BCI_BUSY_MASK | GRBM_STATUS__SX_BUSY_MASK |
-		   GRBM_STATUS__TA_BUSY_MASK | GRBM_STATUS__VGT_BUSY_MASK |
-		   GRBM_STATUS__DB_BUSY_MASK | GRBM_STATUS__CB_BUSY_MASK |
-		   GRBM_STATUS__GDS_BUSY_MASK | GRBM_STATUS__SPI_BUSY_MASK |
-		   GRBM_STATUS__IA_BUSY_MASK | GRBM_STATUS__IA_BUSY_NO_DMA_MASK)) {
-		grbm_soft_reset = REG_SET_FIELD(grbm_soft_reset,
-						GRBM_SOFT_RESET, SOFT_RESET_CP, 1);
-		grbm_soft_reset = REG_SET_FIELD(grbm_soft_reset,
-						GRBM_SOFT_RESET, SOFT_RESET_GFX, 1);
-	}
-
-	if (tmp & (GRBM_STATUS__CP_BUSY_MASK | GRBM_STATUS__CP_COHERENCY_BUSY_MASK)) {
-		grbm_soft_reset = REG_SET_FIELD(grbm_soft_reset,
-						GRBM_SOFT_RESET, SOFT_RESET_CP, 1);
-	}
-
-	/* GRBM_STATUS2 */
-	tmp = RREG32_SOC15(GC, 0, mmGRBM_STATUS2);
-	if (REG_GET_FIELD(tmp, GRBM_STATUS2, RLC_BUSY))
-		grbm_soft_reset = REG_SET_FIELD(grbm_soft_reset,
-						GRBM_SOFT_RESET, SOFT_RESET_RLC, 1);
-
-
-	if (grbm_soft_reset) {
-		/* stop the rlc */
-		adev->gfx.rlc.funcs->stop(adev);
-
-		if (adev->gfx.num_gfx_rings)
-			/* Disable GFX parsing/prefetching */
-			gfx_v9_0_cp_gfx_enable(adev, false);
-
-		/* Disable MEC parsing/prefetching */
-		gfx_v9_0_cp_compute_enable(adev, false);
-
-		if (grbm_soft_reset) {
-			tmp = RREG32_SOC15(GC, 0, mmGRBM_SOFT_RESET);
-			tmp |= grbm_soft_reset;
-			dev_info(adev->dev, "GRBM_SOFT_RESET=0x%08X\n", tmp);
-			WREG32_SOC15(GC, 0, mmGRBM_SOFT_RESET, tmp);
-			tmp = RREG32_SOC15(GC, 0, mmGRBM_SOFT_RESET);
-
-			udelay(50);
-
-			tmp &= ~grbm_soft_reset;
-			WREG32_SOC15(GC, 0, mmGRBM_SOFT_RESET, tmp);
-			tmp = RREG32_SOC15(GC, 0, mmGRBM_SOFT_RESET);
-		}
-
-		/* Wait a little for things to settle down */
-		udelay(50);
-	}
-	return 0;
+    struct amdgpu_device *adev = ip_block->adev;
+    u32 grbm_soft_reset = 0;
+    u32 tmp;
+
+    gfx_v9_0_grbm_state_invalidate(adev);
+
+    tmp = RREG32_SOC15(GC, 0, mmGRBM_STATUS);
+    if (tmp & (GRBM_STATUS__PA_BUSY_MASK | GRBM_STATUS__SC_BUSY_MASK |
+               GRBM_STATUS__BCI_BUSY_MASK | GRBM_STATUS__SX_BUSY_MASK |
+               GRBM_STATUS__TA_BUSY_MASK | GRBM_STATUS__VGT_BUSY_MASK |
+               GRBM_STATUS__DB_BUSY_MASK | GRBM_STATUS__CB_BUSY_MASK |
+               GRBM_STATUS__GDS_BUSY_MASK | GRBM_STATUS__SPI_BUSY_MASK |
+               GRBM_STATUS__IA_BUSY_MASK | GRBM_STATUS__IA_BUSY_NO_DMA_MASK)) {
+        grbm_soft_reset = REG_SET_FIELD(grbm_soft_reset,
+                        GRBM_SOFT_RESET, SOFT_RESET_CP, 1);
+        grbm_soft_reset = REG_SET_FIELD(grbm_soft_reset,
+                        GRBM_SOFT_RESET, SOFT_RESET_GFX, 1);
+    }
+
+    if (tmp & (GRBM_STATUS__CP_BUSY_MASK | GRBM_STATUS__CP_COHERENCY_BUSY_MASK)) {
+        grbm_soft_reset = REG_SET_FIELD(grbm_soft_reset,
+                        GRBM_SOFT_RESET, SOFT_RESET_CP, 1);
+    }
+
+    tmp = RREG32_SOC15(GC, 0, mmGRBM_STATUS2);
+    if (REG_GET_FIELD(tmp, GRBM_STATUS2, RLC_BUSY))
+        grbm_soft_reset = REG_SET_FIELD(grbm_soft_reset,
+                        GRBM_SOFT_RESET, SOFT_RESET_RLC, 1);
+
+    if (grbm_soft_reset) {
+        adev->gfx.rlc.funcs->stop(adev);
+
+        if (amdgpu_ip_version(adev, GC_HWIP, 0) != IP_VERSION(9, 4, 1) &&
+            amdgpu_ip_version(adev, GC_HWIP, 0) != IP_VERSION(9, 4, 2)) {
+            gfx_v9_0_cp_gfx_enable(adev, false);
+            gfx_v9_0_cp_compute_enable(adev, false);
+        }
+
+        tmp = RREG32_SOC15(GC, 0, mmGRBM_SOFT_RESET);
+        tmp |= grbm_soft_reset;
+        dev_info(adev->dev, "GRBM_SOFT_RESET=0x%08X\n", tmp);
+        WREG32_SOC15(GC, 0, mmGRBM_SOFT_RESET, tmp);
+        tmp = RREG32_SOC15(GC, 0, mmGRBM_SOFT_RESET);
+
+        udelay(50);
+
+        tmp &= ~grbm_soft_reset;
+        WREG32_SOC15(GC, 0, mmGRBM_SOFT_RESET, tmp);
+        tmp = RREG32_SOC15(GC, 0, mmGRBM_SOFT_RESET);
+
+        udelay(50);
+    }
+    return 0;
 }
 
 static uint64_t gfx_v9_0_kiq_read_clock(struct amdgpu_device *adev)
@@ -4950,202 +5027,125 @@ static void gfx_v9_0_update_gfx_mg_power
 }
 
 static void gfx_v9_0_update_medium_grain_clock_gating(struct amdgpu_device *adev,
-						      bool enable)
+													  bool enable)
 {
-	uint32_t data, def;
+	uint32_t def, data;
 
-	/* It is disabled by HW by default */
-	if (enable && (adev->cg_flags & AMD_CG_SUPPORT_GFX_MGCG)) {
-		/* 1 - RLC_CGTT_MGCG_OVERRIDE */
-		def = data = RREG32_SOC15(GC, 0, mmRLC_CGTT_MGCG_OVERRIDE);
+	if (!(adev->cg_flags & AMD_CG_SUPPORT_GFX_MGCG))
+		return;
 
-		if (amdgpu_ip_version(adev, GC_HWIP, 0) != IP_VERSION(9, 2, 1))
-			data &= ~RLC_CGTT_MGCG_OVERRIDE__CPF_CGTT_SCLK_OVERRIDE_MASK;
+	def = data = RREG32_SOC15(GC, 0, mmRLC_CGTT_MGCG_OVERRIDE);
 
+	if (enable) {
 		data &= ~(RLC_CGTT_MGCG_OVERRIDE__GRBM_CGTT_SCLK_OVERRIDE_MASK |
-			  RLC_CGTT_MGCG_OVERRIDE__GFXIP_MGCG_OVERRIDE_MASK |
-			  RLC_CGTT_MGCG_OVERRIDE__GFXIP_MGLS_OVERRIDE_MASK);
-
-		/* only for Vega10 & Raven1 */
-		data |= RLC_CGTT_MGCG_OVERRIDE__RLC_CGTT_SCLK_OVERRIDE_MASK;
+		RLC_CGTT_MGCG_OVERRIDE__GFXIP_MGCG_OVERRIDE_MASK |
+		RLC_CGTT_MGCG_OVERRIDE__GFXIP_MGLS_OVERRIDE_MASK);
 
-		if (def != data)
-			WREG32_SOC15(GC, 0, mmRLC_CGTT_MGCG_OVERRIDE, data);
-
-		/* MGLS is a global flag to control all MGLS in GFX */
-		if (adev->cg_flags & AMD_CG_SUPPORT_GFX_MGLS) {
-			/* 2 - RLC memory Light sleep */
-			if (adev->cg_flags & AMD_CG_SUPPORT_GFX_RLC_LS) {
-				def = data = RREG32_SOC15(GC, 0, mmRLC_MEM_SLP_CNTL);
-				data |= RLC_MEM_SLP_CNTL__RLC_MEM_LS_EN_MASK;
-				if (def != data)
-					WREG32_SOC15(GC, 0, mmRLC_MEM_SLP_CNTL, data);
-			}
-			/* 3 - CP memory Light sleep */
-			if (adev->cg_flags & AMD_CG_SUPPORT_GFX_CP_LS) {
-				def = data = RREG32_SOC15(GC, 0, mmCP_MEM_SLP_CNTL);
-				data |= CP_MEM_SLP_CNTL__CP_MEM_LS_EN_MASK;
-				if (def != data)
-					WREG32_SOC15(GC, 0, mmCP_MEM_SLP_CNTL, data);
-			}
+		switch (amdgpu_ip_version(adev, GC_HWIP, 0)) {
+			case IP_VERSION(9, 2, 1):
+			case IP_VERSION(9, 4, 0):
+			case IP_VERSION(9, 4, 1):
+			case IP_VERSION(9, 4, 2):
+				data &= ~RLC_CGTT_MGCG_OVERRIDE__CPF_CGTT_SCLK_OVERRIDE_MASK;
+				break;
+			default:
+				break;
 		}
 	} else {
-		/* 1 - MGCG_OVERRIDE */
-		def = data = RREG32_SOC15(GC, 0, mmRLC_CGTT_MGCG_OVERRIDE);
-
-		if (amdgpu_ip_version(adev, GC_HWIP, 0) != IP_VERSION(9, 2, 1))
-			data |= RLC_CGTT_MGCG_OVERRIDE__CPF_CGTT_SCLK_OVERRIDE_MASK;
-
-		data |= (RLC_CGTT_MGCG_OVERRIDE__RLC_CGTT_SCLK_OVERRIDE_MASK |
-			 RLC_CGTT_MGCG_OVERRIDE__GRBM_CGTT_SCLK_OVERRIDE_MASK |
-			 RLC_CGTT_MGCG_OVERRIDE__GFXIP_MGCG_OVERRIDE_MASK |
-			 RLC_CGTT_MGCG_OVERRIDE__GFXIP_MGLS_OVERRIDE_MASK);
-
-		if (def != data)
-			WREG32_SOC15(GC, 0, mmRLC_CGTT_MGCG_OVERRIDE, data);
-
-		/* 2 - disable MGLS in RLC */
-		data = RREG32_SOC15(GC, 0, mmRLC_MEM_SLP_CNTL);
-		if (data & RLC_MEM_SLP_CNTL__RLC_MEM_LS_EN_MASK) {
-			data &= ~RLC_MEM_SLP_CNTL__RLC_MEM_LS_EN_MASK;
-			WREG32_SOC15(GC, 0, mmRLC_MEM_SLP_CNTL, data);
-		}
-
-		/* 3 - disable MGLS in CP */
-		data = RREG32_SOC15(GC, 0, mmCP_MEM_SLP_CNTL);
-		if (data & CP_MEM_SLP_CNTL__CP_MEM_LS_EN_MASK) {
-			data &= ~CP_MEM_SLP_CNTL__CP_MEM_LS_EN_MASK;
-			WREG32_SOC15(GC, 0, mmCP_MEM_SLP_CNTL, data);
-		}
+		data |= (RLC_CGTT_MGCG_OVERRIDE__CPF_CGTT_SCLK_OVERRIDE_MASK |
+		RLC_CGTT_MGCG_OVERRIDE__GRBM_CGTT_SCLK_OVERRIDE_MASK |
+		RLC_CGTT_MGCG_OVERRIDE__GFXIP_MGCG_OVERRIDE_MASK |
+		RLC_CGTT_MGCG_OVERRIDE__GFXIP_MGLS_OVERRIDE_MASK);
 	}
+
+	if (def != data)
+		WREG32_SOC15(GC, 0, mmRLC_CGTT_MGCG_OVERRIDE, data);
 }
 
 static void gfx_v9_0_update_3d_clock_gating(struct amdgpu_device *adev,
-					   bool enable)
+											bool enable)
 {
 	uint32_t data, def;
 
 	if (!adev->gfx.num_gfx_rings)
 		return;
 
-	/* Enable 3D CGCG/CGLS */
 	if (enable) {
-		/* write cmd to clear cgcg/cgls ov */
 		def = data = RREG32_SOC15(GC, 0, mmRLC_CGTT_MGCG_OVERRIDE);
-		/* unset CGCG override */
 		data &= ~RLC_CGTT_MGCG_OVERRIDE__GFXIP_GFX3D_CG_OVERRIDE_MASK;
-		/* update CGCG and CGLS override bits */
 		if (def != data)
 			WREG32_SOC15(GC, 0, mmRLC_CGTT_MGCG_OVERRIDE, data);
 
-		/* enable 3Dcgcg FSM(0x0000363f) */
 		def = RREG32_SOC15(GC, 0, mmRLC_CGCG_CGLS_CTRL_3D);
 
 		if (adev->cg_flags & AMD_CG_SUPPORT_GFX_3D_CGCG)
 			data = (0x36 << RLC_CGCG_CGLS_CTRL_3D__CGCG_GFX_IDLE_THRESHOLD__SHIFT) |
-				RLC_CGCG_CGLS_CTRL_3D__CGCG_EN_MASK;
+			RLC_CGCG_CGLS_CTRL_3D__CGCG_EN_MASK;
 		else
 			data = 0x0 << RLC_CGCG_CGLS_CTRL_3D__CGCG_GFX_IDLE_THRESHOLD__SHIFT;
 
 		if (adev->cg_flags & AMD_CG_SUPPORT_GFX_3D_CGLS)
 			data |= (0x000F << RLC_CGCG_CGLS_CTRL_3D__CGLS_REP_COMPANSAT_DELAY__SHIFT) |
-				RLC_CGCG_CGLS_CTRL_3D__CGLS_EN_MASK;
+			RLC_CGCG_CGLS_CTRL_3D__CGLS_EN_MASK;
 		if (def != data)
 			WREG32_SOC15(GC, 0, mmRLC_CGCG_CGLS_CTRL_3D, data);
 
-		/* set IDLE_POLL_COUNT(0x00900100) */
 		def = RREG32_SOC15(GC, 0, mmCP_RB_WPTR_POLL_CNTL);
 		data = (0x0100 << CP_RB_WPTR_POLL_CNTL__POLL_FREQUENCY__SHIFT) |
-			(0x0090 << CP_RB_WPTR_POLL_CNTL__IDLE_POLL_COUNT__SHIFT);
+		(0x0090 << CP_RB_WPTR_POLL_CNTL__IDLE_POLL_COUNT__SHIFT);
 		if (def != data)
 			WREG32_SOC15(GC, 0, mmCP_RB_WPTR_POLL_CNTL, data);
 	} else {
-		/* Disable CGCG/CGLS */
 		def = data = RREG32_SOC15(GC, 0, mmRLC_CGCG_CGLS_CTRL_3D);
-		/* disable cgcg, cgls should be disabled */
 		data &= ~(RLC_CGCG_CGLS_CTRL_3D__CGCG_EN_MASK |
-			  RLC_CGCG_CGLS_CTRL_3D__CGLS_EN_MASK);
-		/* disable cgcg and cgls in FSM */
+		RLC_CGCG_CGLS_CTRL_3D__CGLS_EN_MASK);
 		if (def != data)
 			WREG32_SOC15(GC, 0, mmRLC_CGCG_CGLS_CTRL_3D, data);
 	}
 }
 
 static void gfx_v9_0_update_coarse_grain_clock_gating(struct amdgpu_device *adev,
-						      bool enable)
+													  bool enable)
 {
 	uint32_t def, data;
 
 	if (enable && (adev->cg_flags & AMD_CG_SUPPORT_GFX_CGCG)) {
 		def = data = RREG32_SOC15(GC, 0, mmRLC_CGTT_MGCG_OVERRIDE);
-		/* unset CGCG override */
 		data &= ~RLC_CGTT_MGCG_OVERRIDE__GFXIP_CGCG_OVERRIDE_MASK;
 		if (adev->cg_flags & AMD_CG_SUPPORT_GFX_CGLS)
 			data &= ~RLC_CGTT_MGCG_OVERRIDE__GFXIP_CGLS_OVERRIDE_MASK;
 		else
 			data |= RLC_CGTT_MGCG_OVERRIDE__GFXIP_CGLS_OVERRIDE_MASK;
-		/* update CGCG and CGLS override bits */
 		if (def != data)
 			WREG32_SOC15(GC, 0, mmRLC_CGTT_MGCG_OVERRIDE, data);
 
-		/* enable cgcg FSM(0x0000363F) */
 		def = RREG32_SOC15(GC, 0, mmRLC_CGCG_CGLS_CTRL);
 
 		if (amdgpu_ip_version(adev, GC_HWIP, 0) == IP_VERSION(9, 4, 1))
 			data = (0x2000 << RLC_CGCG_CGLS_CTRL__CGCG_GFX_IDLE_THRESHOLD__SHIFT) |
-				RLC_CGCG_CGLS_CTRL__CGCG_EN_MASK;
+			RLC_CGCG_CGLS_CTRL__CGCG_EN_MASK;
 		else
 			data = (0x36 << RLC_CGCG_CGLS_CTRL__CGCG_GFX_IDLE_THRESHOLD__SHIFT) |
-				RLC_CGCG_CGLS_CTRL__CGCG_EN_MASK;
+			RLC_CGCG_CGLS_CTRL__CGCG_EN_MASK;
 		if (adev->cg_flags & AMD_CG_SUPPORT_GFX_CGLS)
 			data |= (0x000F << RLC_CGCG_CGLS_CTRL__CGLS_REP_COMPANSAT_DELAY__SHIFT) |
-				RLC_CGCG_CGLS_CTRL__CGLS_EN_MASK;
+			RLC_CGCG_CGLS_CTRL__CGLS_EN_MASK;
 		if (def != data)
 			WREG32_SOC15(GC, 0, mmRLC_CGCG_CGLS_CTRL, data);
 
-		/* set IDLE_POLL_COUNT(0x00900100) */
 		def = RREG32_SOC15(GC, 0, mmCP_RB_WPTR_POLL_CNTL);
 		data = (0x0100 << CP_RB_WPTR_POLL_CNTL__POLL_FREQUENCY__SHIFT) |
-			(0x0090 << CP_RB_WPTR_POLL_CNTL__IDLE_POLL_COUNT__SHIFT);
+		(0x0090 << CP_RB_WPTR_POLL_CNTL__IDLE_POLL_COUNT__SHIFT);
 		if (def != data)
 			WREG32_SOC15(GC, 0, mmCP_RB_WPTR_POLL_CNTL, data);
 	} else {
 		def = data = RREG32_SOC15(GC, 0, mmRLC_CGCG_CGLS_CTRL);
-		/* reset CGCG/CGLS bits */
 		data &= ~(RLC_CGCG_CGLS_CTRL__CGCG_EN_MASK | RLC_CGCG_CGLS_CTRL__CGLS_EN_MASK);
-		/* disable cgcg and cgls in FSM */
 		if (def != data)
 			WREG32_SOC15(GC, 0, mmRLC_CGCG_CGLS_CTRL, data);
 	}
 }
 
-static int gfx_v9_0_update_gfx_clock_gating(struct amdgpu_device *adev,
-					    bool enable)
-{
-	amdgpu_gfx_rlc_enter_safe_mode(adev, 0);
-	if (enable) {
-		/* CGCG/CGLS should be enabled after MGCG/MGLS
-		 * ===  MGCG + MGLS ===
-		 */
-		gfx_v9_0_update_medium_grain_clock_gating(adev, enable);
-		/* ===  CGCG /CGLS for GFX 3D Only === */
-		gfx_v9_0_update_3d_clock_gating(adev, enable);
-		/* ===  CGCG + CGLS === */
-		gfx_v9_0_update_coarse_grain_clock_gating(adev, enable);
-	} else {
-		/* CGCG/CGLS should be disabled before MGCG/MGLS
-		 * ===  CGCG + CGLS ===
-		 */
-		gfx_v9_0_update_coarse_grain_clock_gating(adev, enable);
-		/* ===  CGCG /CGLS for GFX 3D Only === */
-		gfx_v9_0_update_3d_clock_gating(adev, enable);
-		/* ===  MGCG + MGLS === */
-		gfx_v9_0_update_medium_grain_clock_gating(adev, enable);
-	}
-	amdgpu_gfx_rlc_exit_safe_mode(adev, 0);
-	return 0;
-}
-
 static void gfx_v9_0_update_spm_vmid_internal(struct amdgpu_device *adev,
 					      unsigned int vmid)
 {
@@ -5221,18 +5221,23 @@ static const struct amdgpu_rlc_funcs gfx
 };
 
 static int gfx_v9_0_set_powergating_state(struct amdgpu_ip_block *ip_block,
-					  enum amd_powergating_state state)
+										  enum amd_powergating_state state)
 {
 	struct amdgpu_device *adev = ip_block->adev;
 	bool enable = (state == AMD_PG_STATE_GATE);
 
+	if (amdgpu_sriov_vf(adev))
+		return 0;
+
 	switch (amdgpu_ip_version(adev, GC_HWIP, 0)) {
-	case IP_VERSION(9, 2, 2):
-	case IP_VERSION(9, 1, 0):
-	case IP_VERSION(9, 3, 0):
-		if (!enable)
-			amdgpu_gfx_off_ctrl_immediate(adev, false);
+		case IP_VERSION(9, 2, 2):
+		case IP_VERSION(9, 1, 0):
+		case IP_VERSION(9, 3, 0):
+			/* Ungate: Disable GFXOFF before making changes */
+			if (!enable)
+				amdgpu_gfx_off_ctrl(adev, false);
 
+		/* Configure RLC SMU handshake for power gating */
 		if (adev->pg_flags & AMD_PG_SUPPORT_RLC_SMU_HS) {
 			gfx_v9_0_enable_sck_slow_down_on_power_up(adev, true);
 			gfx_v9_0_enable_sck_slow_down_on_power_down(adev, true);
@@ -5241,52 +5246,76 @@ static int gfx_v9_0_set_powergating_stat
 			gfx_v9_0_enable_sck_slow_down_on_power_down(adev, false);
 		}
 
+		/* Configure CP power gating */
 		if (adev->pg_flags & AMD_PG_SUPPORT_CP)
 			gfx_v9_0_enable_cp_power_gating(adev, true);
 		else
 			gfx_v9_0_enable_cp_power_gating(adev, false);
 
-		/* update gfx cgpg state */
 		gfx_v9_0_update_gfx_cg_power_gating(adev, enable);
-
-		/* update mgcg state */
 		gfx_v9_0_update_gfx_mg_power_gating(adev, enable);
 
+		/* Gate: Re-enable GFXOFF after changes */
 		if (enable)
-			amdgpu_gfx_off_ctrl_immediate(adev, true);
-		break;
-	case IP_VERSION(9, 2, 1):
-		amdgpu_gfx_off_ctrl_immediate(adev, enable);
-		break;
-	default:
+			amdgpu_gfx_off_ctrl(adev, true);
+
+		/* Invalidate GRBM cache after any power state change */
+		gfx_v9_0_grbm_state_invalidate(adev);
 		break;
+
+		case IP_VERSION(9, 2, 1):
+			amdgpu_gfx_off_ctrl(adev, enable);
+			break;
+
+		case IP_VERSION(9, 0, 1):
+		case IP_VERSION(9, 4, 0):
+			if (adev->pg_flags & (AMD_PG_SUPPORT_GFX_PG |
+				AMD_PG_SUPPORT_GFX_SMG |
+				AMD_PG_SUPPORT_GFX_DMG)) {
+				gfx_v9_0_update_gfx_cg_power_gating(adev, enable);
+			gfx_v9_0_update_gfx_mg_power_gating(adev, enable);
+				}
+				break;
+
+		default:
+			break;
 	}
 
 	return 0;
 }
 
 static int gfx_v9_0_set_clockgating_state(struct amdgpu_ip_block *ip_block,
-					  enum amd_clockgating_state state)
+										  enum amd_clockgating_state state)
 {
 	struct amdgpu_device *adev = ip_block->adev;
+	bool enable = (state == AMD_CG_STATE_GATE);
 
 	if (amdgpu_sriov_vf(adev))
 		return 0;
 
 	switch (amdgpu_ip_version(adev, GC_HWIP, 0)) {
-	case IP_VERSION(9, 0, 1):
-	case IP_VERSION(9, 2, 1):
-	case IP_VERSION(9, 4, 0):
-	case IP_VERSION(9, 2, 2):
-	case IP_VERSION(9, 1, 0):
-	case IP_VERSION(9, 4, 1):
-	case IP_VERSION(9, 3, 0):
-	case IP_VERSION(9, 4, 2):
-		gfx_v9_0_update_gfx_clock_gating(adev,
-						 state == AMD_CG_STATE_GATE);
-		break;
-	default:
-		break;
+		case IP_VERSION(9, 0, 1):
+		case IP_VERSION(9, 2, 1):
+		case IP_VERSION(9, 4, 0):
+		case IP_VERSION(9, 2, 2):
+		case IP_VERSION(9, 1, 0):
+		case IP_VERSION(9, 4, 1):
+		case IP_VERSION(9, 3, 0):
+		case IP_VERSION(9, 4, 2):
+			amdgpu_gfx_rlc_enter_safe_mode(adev, 0);
+			if (enable) {
+				gfx_v9_0_update_medium_grain_clock_gating(adev, true);
+				gfx_v9_0_update_3d_clock_gating(adev, true);
+				gfx_v9_0_update_coarse_grain_clock_gating(adev, true);
+			} else {
+				gfx_v9_0_update_coarse_grain_clock_gating(adev, false);
+				gfx_v9_0_update_3d_clock_gating(adev, false);
+				gfx_v9_0_update_medium_grain_clock_gating(adev, false);
+			}
+			amdgpu_gfx_rlc_exit_safe_mode(adev, 0);
+			break;
+		default:
+			break;
 	}
 	return 0;
 }
@@ -5551,68 +5580,70 @@ static void gfx_v9_0_ring_emit_ib_comput
 	amdgpu_ring_write(ring, control);
 }
 
-static void gfx_v9_0_ring_emit_fence(struct amdgpu_ring *ring, u64 addr,
-				     u64 seq, unsigned flags)
+static void gfx_v9_0_ring_emit_fence(struct amdgpu_ring *ring,
+									 u64 addr, u64 seq, unsigned flags)
 {
-	bool write64bit = flags & AMDGPU_FENCE_FLAG_64BIT;
-	bool int_sel = flags & AMDGPU_FENCE_FLAG_INT;
-	bool writeback = flags & AMDGPU_FENCE_FLAG_TC_WB_ONLY;
-	bool exec = flags & AMDGPU_FENCE_FLAG_EXEC;
-	uint32_t dw2 = 0;
+	const bool wb_only  = flags & AMDGPU_FENCE_FLAG_TC_WB_ONLY;
+	const bool write64  = flags & AMDGPU_FENCE_FLAG_64BIT;
+	const bool int_sel  = flags & AMDGPU_FENCE_FLAG_INT;
+	const bool exec_tag = flags & AMDGPU_FENCE_FLAG_EXEC;
+	u32 event_dw1 = 0;
+
+	BUG_ON(write64 ? (addr & 0x7) : (addr & 0x3));
 
-	/* RELEASE_MEM - flush caches, send int */
 	amdgpu_ring_write(ring, PACKET3(PACKET3_RELEASE_MEM, 6));
 
-	if (writeback) {
-		dw2 = EOP_TC_NC_ACTION_EN;
-	} else {
-		dw2 = EOP_TCL1_ACTION_EN | EOP_TC_ACTION_EN |
-				EOP_TC_MD_ACTION_EN;
-	}
-	dw2 |= EOP_TC_WB_ACTION_EN | EVENT_TYPE(CACHE_FLUSH_AND_INV_TS_EVENT) |
-				EVENT_INDEX(5);
-	if (exec)
-		dw2 |= EOP_EXEC;
+	if (wb_only)
+		event_dw1 |= EOP_TC_NC_ACTION_EN;
+	else
+		event_dw1 |= EOP_TCL1_ACTION_EN | EOP_TC_ACTION_EN |
+		EOP_TC_MD_ACTION_EN;
 
-	amdgpu_ring_write(ring, dw2);
-	amdgpu_ring_write(ring, DATA_SEL(write64bit ? 2 : 1) | INT_SEL(int_sel ? 2 : 0));
+	event_dw1 |= EOP_TC_WB_ACTION_EN |
+	EVENT_TYPE(CACHE_FLUSH_AND_INV_TS_EVENT) |
+	EVENT_INDEX(5);
+
+	if (exec_tag)
+		event_dw1 |= EOP_EXEC;
+
+	amdgpu_ring_write(ring, event_dw1);
+	amdgpu_ring_write(ring, DATA_SEL(write64 ? 2 : 1) |
+	INT_SEL(int_sel ? 2 : 0));
 
-	/*
-	 * the address should be Qword aligned if 64bit write, Dword
-	 * aligned if only send 32bit data low (discard data high)
-	 */
-	if (write64bit)
-		BUG_ON(addr & 0x7);
-	else
-		BUG_ON(addr & 0x3);
 	amdgpu_ring_write(ring, lower_32_bits(addr));
 	amdgpu_ring_write(ring, upper_32_bits(addr));
 	amdgpu_ring_write(ring, lower_32_bits(seq));
 	amdgpu_ring_write(ring, upper_32_bits(seq));
 	amdgpu_ring_write(ring, 0);
+
+	if (!wb_only)
+		dma_wmb();
 }
 
 static void gfx_v9_0_ring_emit_pipeline_sync(struct amdgpu_ring *ring)
 {
-	int usepfp = (ring->funcs->type == AMDGPU_RING_TYPE_GFX);
-	uint32_t seq = ring->fence_drv.sync_seq;
-	uint64_t addr = ring->fence_drv.gpu_addr;
-
-	gfx_v9_0_wait_reg_mem(ring, usepfp, 1, 0,
-			      lower_32_bits(addr), upper_32_bits(addr),
-			      seq, 0xffffffff, 4);
+	const bool use_pfp = (ring->funcs->type == AMDGPU_RING_TYPE_GFX);
+	u64  addr = ring->fence_drv.gpu_addr;
+	u32  seq  = ring->fence_drv.sync_seq;
+
+	gfx_v9_0_wait_reg_mem(ring,
+						  use_pfp,  /* engine: PFP for GFX, ME for others */
+					   1,        /* mem space */
+					   0,        /* wait_eq */
+					   lower_32_bits(addr),
+						  upper_32_bits(addr),
+						  seq, 0xffffffff, 4);
 }
 
 static void gfx_v9_0_ring_emit_vm_flush(struct amdgpu_ring *ring,
-					unsigned vmid, uint64_t pd_addr)
+										unsigned vmid, u64 pd_addr)
 {
 	amdgpu_gmc_emit_flush_gpu_tlb(ring, vmid, pd_addr);
 
-	/* compute doesn't have PFP */
+	/* compute rings have no PFP, so sync only on GFX ring */
 	if (ring->funcs->type == AMDGPU_RING_TYPE_GFX) {
-		/* sync PFP to ME, otherwise we might get invalid PFP reads */
 		amdgpu_ring_write(ring, PACKET3(PACKET3_PFP_SYNC_ME, 0));
-		amdgpu_ring_write(ring, 0x0);
+		amdgpu_ring_write(ring, 0);
 	}
 }
 
@@ -7136,61 +7167,44 @@ static void gfx_v9_0_emit_mem_sync(struc
 }
 
 static void gfx_v9_0_emit_wave_limit_cs(struct amdgpu_ring *ring,
-					uint32_t pipe, bool enable)
+										u32 pipe, bool enable)
 {
 	struct amdgpu_device *adev = ring->adev;
-	uint32_t val;
-	uint32_t wcl_cs_reg;
+	u32 reg;
 
-	/* mmSPI_WCL_PIPE_PERCENT_CS[0-7]_DEFAULT values are same */
-	val = enable ? 0x1 : mmSPI_WCL_PIPE_PERCENT_CS0_DEFAULT;
+	if (pipe > 3)
+		return;
 
 	switch (pipe) {
-	case 0:
-		wcl_cs_reg = SOC15_REG_OFFSET(GC, 0, mmSPI_WCL_PIPE_PERCENT_CS0);
-		break;
-	case 1:
-		wcl_cs_reg = SOC15_REG_OFFSET(GC, 0, mmSPI_WCL_PIPE_PERCENT_CS1);
-		break;
-	case 2:
-		wcl_cs_reg = SOC15_REG_OFFSET(GC, 0, mmSPI_WCL_PIPE_PERCENT_CS2);
-		break;
-	case 3:
-		wcl_cs_reg = SOC15_REG_OFFSET(GC, 0, mmSPI_WCL_PIPE_PERCENT_CS3);
-		break;
-	default:
-		DRM_DEBUG("invalid pipe %d\n", pipe);
-		return;
+		case 0:
+			reg = SOC15_REG_OFFSET(GC, 0, mmSPI_WCL_PIPE_PERCENT_CS0);
+			break;
+		case 1:
+			reg = SOC15_REG_OFFSET(GC, 0, mmSPI_WCL_PIPE_PERCENT_CS1);
+			break;
+		case 2:
+			reg = SOC15_REG_OFFSET(GC, 0, mmSPI_WCL_PIPE_PERCENT_CS2);
+			break;
+		default:
+			reg = SOC15_REG_OFFSET(GC, 0, mmSPI_WCL_PIPE_PERCENT_CS3);
+			break;
 	}
 
-	amdgpu_ring_emit_wreg(ring, wcl_cs_reg, val);
-
+	WREG32_IF_CHANGED(reg, enable ? 0x1 : mmSPI_WCL_PIPE_PERCENT_CS0_DEFAULT);
 }
+
 static void gfx_v9_0_emit_wave_limit(struct amdgpu_ring *ring, bool enable)
 {
 	struct amdgpu_device *adev = ring->adev;
-	uint32_t val;
-	int i;
-
-
-	/* mmSPI_WCL_PIPE_PERCENT_GFX is 7 bit multiplier register to limit
-	 * number of gfx waves. Setting 5 bit will make sure gfx only gets
-	 * around 25% of gpu resources.
-	 */
-	val = enable ? 0x1f : mmSPI_WCL_PIPE_PERCENT_GFX_DEFAULT;
-	amdgpu_ring_emit_wreg(ring,
-			      SOC15_REG_OFFSET(GC, 0, mmSPI_WCL_PIPE_PERCENT_GFX),
-			      val);
+	u32 reg = SOC15_REG_OFFSET(GC, 0, mmSPI_WCL_PIPE_PERCENT_GFX);
+	u32 p;
 
-	/* Restrict waves for normal/low priority compute queues as well
-	 * to get best QoS for high priority compute jobs.
-	 *
-	 * amdgpu controls only 1st ME(0-3 CS pipes).
-	 */
-	for (i = 0; i < adev->gfx.mec.num_pipe_per_mec; i++) {
-		if (i != ring->pipe)
-			gfx_v9_0_emit_wave_limit_cs(ring, i, enable);
+	WREG32_IF_CHANGED(reg, enable ? 0x1f : mmSPI_WCL_PIPE_PERCENT_GFX_DEFAULT);
 
+	for (p = 0; p < adev->gfx.mec.num_pipe_per_mec; ++p) {
+		if (p != ring->pipe) {
+			gfx_v9_0_emit_wave_limit_cs(ring, p, enable);
+		}
 	}
 }
 
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_kms.c	2025-05-29 11:14:09.000000000 +0200
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_kms.c	2025-06-29 11:33:50.388339649 +0200


--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_gem.c	2025-04-10 14:44:49.000000000 +0200
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_gem.c	2025-06-23 18:44:25.287659188 +0200


--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_object.h	2025-05-29 11:14:09.000000000 +0200
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_object.h	2025-06-02 02:29:50.388339649 +0200
@@ -1,30 +1,3 @@
-/*
- * Copyright 2008 Advanced Micro Devices, Inc.
- * Copyright 2008 Red Hat Inc.
- * Copyright 2009 Jerome Glisse.
- *
- * Permission is hereby granted, free of charge, to any person obtaining a
- * copy of this software and associated documentation files (the "Software"),
- * to deal in the Software without restriction, including without limitation
- * the rights to use, copy, modify, merge, publish, distribute, sublicense,
- * and/or sell copies of the Software, and to permit persons to whom the
- * Software is furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in
- * all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
- * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
- * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
- * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
- * OTHER DEALINGS IN THE SOFTWARE.
- *
- * Authors: Dave Airlie
- *          Alex Deucher
- *          Jerome Glisse
- */
 #ifndef __AMDGPU_OBJECT_H__
 #define __AMDGPU_OBJECT_H__
 
@@ -39,7 +12,6 @@
 #define AMDGPU_BO_INVALID_OFFSET	LONG_MAX
 #define AMDGPU_BO_MAX_PLACEMENTS	3
 
-/* BO flag to indicate a KFD userptr BO */
 #define AMDGPU_AMDKFD_CREATE_USERPTR_BO	(1ULL << 63)
 
 #define to_amdgpu_bo_user(abo) container_of((abo), struct amdgpu_bo_user, bo)
@@ -56,11 +28,9 @@ struct amdgpu_bo_param {
 	bool				no_wait_gpu;
 	struct dma_resv			*resv;
 	void				(*destroy)(struct ttm_buffer_object *bo);
-	/* xcp partition number plus 1, 0 means any partition */
 	int8_t				xcp_id_plus1;
 };
 
-/* bo virtual addresses in a vm */
 struct amdgpu_bo_va_mapping {
 	struct amdgpu_bo_va		*bo_va;
 	struct list_head		list;
@@ -72,57 +42,40 @@ struct amdgpu_bo_va_mapping {
 	uint64_t			flags;
 };
 
-/* User space allocated BO in a VM */
 struct amdgpu_bo_va {
 	struct amdgpu_vm_bo_base	base;
-
-	/* protected by bo being reserved */
 	unsigned			ref_count;
-
-	/* all other members protected by the VM PD being reserved */
 	struct dma_fence	        *last_pt_update;
-
-	/* mappings for this bo_va */
 	struct list_head		invalids;
 	struct list_head		valids;
-
-	/* If the mappings are cleared or filled */
 	bool				cleared;
-
 	bool				is_xgmi;
-
-	/*
-	 * protected by vm reservation lock
-	 * if non-zero, cannot unmap from GPU because user queues may still access it
-	 */
 	unsigned int			queue_refcount;
 };
 
+enum amdgpu_bo_alloc_type {
+	AMDGPU_BO_ALLOC_DEFAULT = 0,
+	AMDGPU_BO_ALLOC_USER_SLAB,
+};
+
 struct amdgpu_bo {
-	/* Protected by tbo.reserved */
 	u32				preferred_domains;
 	u32				allowed_domains;
 	struct ttm_place		placements[AMDGPU_BO_MAX_PLACEMENTS];
 	struct ttm_placement		placement;
 	struct ttm_buffer_object	tbo;
-	struct ttm_bo_kmap_obj		kmap;
+	struct ttm_bo_kmap_obj		kmap; // Note: TTM uses ttm_kmap_obj, ensure this is intended
 	u64				flags;
-	/* per VM structure for page tables and with virtual addresses */
-	struct amdgpu_vm_bo_base	*vm_bo;
-	/* Constant after initialization */
+	enum amdgpu_bo_alloc_type	alloc_type; // Assuming this enum exists
+	spinlock_t			vm_lock;
+	struct amdgpu_vm_bo_base	*vm_bo;    /* per vm mapping for this bo */
 	struct amdgpu_bo		*parent;
-
-#ifdef CONFIG_MMU_NOTIFIER
+	#ifdef CONFIG_MMU_NOTIFIER
 	struct mmu_interval_notifier	notifier;
-#endif
+	#endif
 	struct kgd_mem                  *kfd_bo;
-
-	/*
-	 * For GPUs with spatial partitioning, xcp partition number, -1 means
-	 * any partition. For other ASICs without spatial partition, always 0
-	 * for memory accounting.
-	 */
 	int8_t				xcp_id;
+	u8				in_tbo_cache; // Assuming this is for your tbo_cache
 };
 
 struct amdgpu_bo_user {
@@ -131,12 +84,12 @@ struct amdgpu_bo_user {
 	u64				metadata_flags;
 	void				*metadata;
 	u32				metadata_size;
-
 };
 
 struct amdgpu_bo_vm {
 	struct amdgpu_bo		bo;
-	struct amdgpu_vm_bo_base        entries[];
+	struct list_head		shadow_list;
+	struct amdgpu_vm_bo_base	entries[];
 };
 
 static inline struct amdgpu_bo *ttm_to_amdgpu_bo(struct ttm_buffer_object *tbo)
@@ -144,44 +97,29 @@ static inline struct amdgpu_bo *ttm_to_a
 	return container_of(tbo, struct amdgpu_bo, tbo);
 }
 
-/**
- * amdgpu_mem_type_to_domain - return domain corresponding to mem_type
- * @mem_type:	ttm memory type
- *
- * Returns corresponding domain of the ttm mem_type
- */
 static inline unsigned amdgpu_mem_type_to_domain(u32 mem_type)
 {
 	switch (mem_type) {
-	case TTM_PL_VRAM:
-		return AMDGPU_GEM_DOMAIN_VRAM;
-	case TTM_PL_TT:
-		return AMDGPU_GEM_DOMAIN_GTT;
-	case TTM_PL_SYSTEM:
-		return AMDGPU_GEM_DOMAIN_CPU;
-	case AMDGPU_PL_GDS:
-		return AMDGPU_GEM_DOMAIN_GDS;
-	case AMDGPU_PL_GWS:
-		return AMDGPU_GEM_DOMAIN_GWS;
-	case AMDGPU_PL_OA:
-		return AMDGPU_GEM_DOMAIN_OA;
-	case AMDGPU_PL_DOORBELL:
-		return AMDGPU_GEM_DOMAIN_DOORBELL;
-	default:
-		break;
+		case TTM_PL_VRAM:
+			return AMDGPU_GEM_DOMAIN_VRAM;
+		case TTM_PL_TT:
+			return AMDGPU_GEM_DOMAIN_GTT;
+		case TTM_PL_SYSTEM:
+			return AMDGPU_GEM_DOMAIN_CPU;
+		case AMDGPU_PL_GDS:
+			return AMDGPU_GEM_DOMAIN_GDS;
+		case AMDGPU_PL_GWS:
+			return AMDGPU_GEM_DOMAIN_GWS;
+		case AMDGPU_PL_OA:
+			return AMDGPU_GEM_DOMAIN_OA;
+		case AMDGPU_PL_DOORBELL:
+			return AMDGPU_GEM_DOMAIN_DOORBELL;
+		default:
+			break;
 	}
 	return 0;
 }
 
-/**
- * amdgpu_bo_reserve - reserve bo
- * @bo:		bo structure
- * @no_intr:	don't return -ERESTARTSYS on pending signal
- *
- * Returns:
- * -ERESTARTSYS: A wait for the buffer to become unreserved was interrupted by
- * a signal. Release all buffer reservations and return to user-space.
- */
 static inline int amdgpu_bo_reserve(struct amdgpu_bo *bo, bool no_intr)
 {
 	struct amdgpu_device *adev = amdgpu_ttm_adev(bo->tbo.bdev);
@@ -216,31 +154,16 @@ static inline unsigned amdgpu_bo_gpu_pag
 	return (bo->tbo.page_alignment << PAGE_SHIFT) / AMDGPU_GPU_PAGE_SIZE;
 }
 
-/**
- * amdgpu_bo_mmap_offset - return mmap offset of bo
- * @bo:	amdgpu object for which we query the offset
- *
- * Returns mmap offset of the object.
- */
 static inline u64 amdgpu_bo_mmap_offset(struct amdgpu_bo *bo)
 {
 	return drm_vma_node_offset_addr(&bo->tbo.base.vma_node);
 }
 
-/**
- * amdgpu_bo_explicit_sync - return whether the bo is explicitly synced
- */
 static inline bool amdgpu_bo_explicit_sync(struct amdgpu_bo *bo)
 {
 	return bo->flags & AMDGPU_GEM_CREATE_EXPLICIT_SYNC;
 }
 
-/**
- * amdgpu_bo_encrypted - test if the BO is encrypted
- * @bo: pointer to a buffer object
- *
- * Return true if the buffer object is encrypted, false otherwise.
- */
 static inline bool amdgpu_bo_encrypted(struct amdgpu_bo *bo)
 {
 	return bo->flags & AMDGPU_GEM_CREATE_ENCRYPTED;
@@ -250,31 +173,31 @@ bool amdgpu_bo_is_amdgpu_bo(struct ttm_b
 void amdgpu_bo_placement_from_domain(struct amdgpu_bo *abo, u32 domain);
 
 int amdgpu_bo_create(struct amdgpu_device *adev,
-		     struct amdgpu_bo_param *bp,
-		     struct amdgpu_bo **bo_ptr);
+					 struct amdgpu_bo_param *bp,
+					 struct amdgpu_bo **bo_ptr);
 int amdgpu_bo_create_reserved(struct amdgpu_device *adev,
-			      unsigned long size, int align,
-			      u32 domain, struct amdgpu_bo **bo_ptr,
-			      u64 *gpu_addr, void **cpu_addr);
+							  unsigned long size, int align,
+							  u32 domain, struct amdgpu_bo **bo_ptr,
+							  u64 *gpu_addr, void **cpu_addr);
 int amdgpu_bo_create_kernel(struct amdgpu_device *adev,
-			    unsigned long size, int align,
-			    u32 domain, struct amdgpu_bo **bo_ptr,
-			    u64 *gpu_addr, void **cpu_addr);
+							unsigned long size, int align,
+							u32 domain, struct amdgpu_bo **bo_ptr,
+							u64 *gpu_addr, void **cpu_addr);
 int amdgpu_bo_create_isp_user(struct amdgpu_device *adev,
-			   struct dma_buf *dbuf, u32 domain,
-			   struct amdgpu_bo **bo,
-			   u64 *gpu_addr);
+							  struct dma_buf *dbuf, u32 domain,
+							  struct amdgpu_bo **bo,
+							  u64 *gpu_addr);
 int amdgpu_bo_create_kernel_at(struct amdgpu_device *adev,
-			       uint64_t offset, uint64_t size,
-			       struct amdgpu_bo **bo_ptr, void **cpu_addr);
+							   uint64_t offset, uint64_t size,
+							   struct amdgpu_bo **bo_ptr, void **cpu_addr);
 int amdgpu_bo_create_user(struct amdgpu_device *adev,
-			  struct amdgpu_bo_param *bp,
-			  struct amdgpu_bo_user **ubo_ptr);
+						  struct amdgpu_bo_param *bp,
+						  struct amdgpu_bo_user **ubo_ptr);
 int amdgpu_bo_create_vm(struct amdgpu_device *adev,
-			struct amdgpu_bo_param *bp,
-			struct amdgpu_bo_vm **ubo_ptr);
+						struct amdgpu_bo_param *bp,
+						struct amdgpu_bo_vm **vmbo_ptr);
 void amdgpu_bo_free_kernel(struct amdgpu_bo **bo, u64 *gpu_addr,
-			   void **cpu_addr);
+						   void **cpu_addr);
 void amdgpu_bo_free_isp_user(struct amdgpu_bo *bo);
 int amdgpu_bo_kmap(struct amdgpu_bo *bo, void **ptr);
 void *amdgpu_bo_kptr(struct amdgpu_bo *bo);
@@ -287,31 +210,32 @@ int amdgpu_bo_init(struct amdgpu_device
 void amdgpu_bo_fini(struct amdgpu_device *adev);
 int amdgpu_bo_set_tiling_flags(struct amdgpu_bo *bo, u64 tiling_flags);
 void amdgpu_bo_get_tiling_flags(struct amdgpu_bo *bo, u64 *tiling_flags);
-int amdgpu_bo_set_metadata (struct amdgpu_bo *bo, void *metadata,
-			    uint32_t metadata_size, uint64_t flags);
+int amdgpu_bo_set_metadata(struct amdgpu_bo *bo, void *metadata,
+						   uint32_t metadata_size, uint64_t flags);
 int amdgpu_bo_get_metadata(struct amdgpu_bo *bo, void *buffer,
-			   size_t buffer_size, uint32_t *metadata_size,
-			   uint64_t *flags);
+						   size_t buffer_size, uint32_t *metadata_size,
+						   uint64_t *flags);
 void amdgpu_bo_move_notify(struct ttm_buffer_object *bo,
-			   bool evict,
-			   struct ttm_resource *new_mem);
+						   bool evict,
+						   struct ttm_resource *new_mem);
 void amdgpu_bo_release_notify(struct ttm_buffer_object *bo);
 vm_fault_t amdgpu_bo_fault_reserve_notify(struct ttm_buffer_object *bo);
+
+void amdgpu_bo_destroy(struct ttm_buffer_object *tbo);
+void amdgpu_bo_user_destroy(struct ttm_buffer_object *tbo);
+
 void amdgpu_bo_fence(struct amdgpu_bo *bo, struct dma_fence *fence,
-		     bool shared);
+					 bool shared);
 int amdgpu_bo_sync_wait_resv(struct amdgpu_device *adev, struct dma_resv *resv,
-			     enum amdgpu_sync_mode sync_mode, void *owner,
-			     bool intr);
+							 enum amdgpu_sync_mode sync_mode, void *owner,
+							 bool intr);
 int amdgpu_bo_sync_wait(struct amdgpu_bo *bo, void *owner, bool intr);
 u64 amdgpu_bo_gpu_offset(struct amdgpu_bo *bo);
 u64 amdgpu_bo_gpu_offset_no_check(struct amdgpu_bo *bo);
 uint32_t amdgpu_bo_mem_stats_placement(struct amdgpu_bo *bo);
 uint32_t amdgpu_bo_get_preferred_domain(struct amdgpu_device *adev,
-					    uint32_t domain);
+										uint32_t domain);
 
-/*
- * sub allocation
- */
 static inline struct amdgpu_sa_manager *
 to_amdgpu_sa_manager(struct drm_suballoc_manager *manager)
 {
@@ -321,35 +245,34 @@ to_amdgpu_sa_manager(struct drm_suballoc
 static inline uint64_t amdgpu_sa_bo_gpu_addr(struct drm_suballoc *sa_bo)
 {
 	return to_amdgpu_sa_manager(sa_bo->manager)->gpu_addr +
-		drm_suballoc_soffset(sa_bo);
+	drm_suballoc_soffset(sa_bo);
 }
 
 static inline void *amdgpu_sa_bo_cpu_addr(struct drm_suballoc *sa_bo)
 {
 	return to_amdgpu_sa_manager(sa_bo->manager)->cpu_ptr +
-		drm_suballoc_soffset(sa_bo);
+	drm_suballoc_soffset(sa_bo);
 }
 
 int amdgpu_sa_bo_manager_init(struct amdgpu_device *adev,
-				     struct amdgpu_sa_manager *sa_manager,
-				     unsigned size, u32 align, u32 domain);
+							  struct amdgpu_sa_manager *sa_manager,
+							  unsigned size, u32 align, u32 domain);
 void amdgpu_sa_bo_manager_fini(struct amdgpu_device *adev,
-				      struct amdgpu_sa_manager *sa_manager);
+							   struct amdgpu_sa_manager *sa_manager);
 int amdgpu_sa_bo_manager_start(struct amdgpu_device *adev,
-				      struct amdgpu_sa_manager *sa_manager);
+							   struct amdgpu_sa_manager *sa_manager);
 int amdgpu_sa_bo_new(struct amdgpu_sa_manager *sa_manager,
-		     struct drm_suballoc **sa_bo,
-		     unsigned int size);
+					 struct drm_suballoc **sa_bo,
+					 unsigned int size);
 void amdgpu_sa_bo_free(struct drm_suballoc **sa_bo,
-		       struct dma_fence *fence);
+					   struct dma_fence *fence);
 #if defined(CONFIG_DEBUG_FS)
 void amdgpu_sa_bo_dump_debug_info(struct amdgpu_sa_manager *sa_manager,
-					 struct seq_file *m);
+								  struct seq_file *m);
 u64 amdgpu_bo_print_info(int id, struct amdgpu_bo *bo, struct seq_file *m);
 #endif
 void amdgpu_debugfs_sa_init(struct amdgpu_device *adev);
 
 bool amdgpu_bo_support_uswc(u64 bo_flags);
 
-
 #endif


--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_object.c	2025-05-29 11:14:09.000000000 +0200
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_object.c	2025-06-02 02:29:50.388339649 +0200
@@ -43,33 +43,29 @@
 #include "amdgpu_vm.h"
 #include "amdgpu_dma_buf.h"
 
-/**
- * DOC: amdgpu_object
- *
- * This defines the interfaces to operate on an &amdgpu_bo buffer object which
- * represents memory used by driver (VRAM, system memory, etc.). The driver
- * provides DRM/GEM APIs to userspace. DRM/GEM APIs then use these interfaces
- * to create/destroy/set buffer object which are then managed by the kernel TTM
- * memory manager.
- * The interfaces are also used internally by kernel clients, including gfx,
- * uvd, etc. for kernel managed allocations used by the GPU.
- *
- */
+#if IS_ENABLED(CONFIG_HSA_AMD)
+extern void
+amdgpu_amdkfd_remove_fence_on_pt_pd_bos(struct amdgpu_bo *bo)
+__attribute__((weak));
+#else
+static inline void
+amdgpu_amdkfd_remove_fence_on_pt_pd_bos(struct amdgpu_bo *bo) { }
+#endif
 
-static void amdgpu_bo_destroy(struct ttm_buffer_object *tbo)
+void amdgpu_bo_destroy(struct ttm_buffer_object *tbo)
 {
 	struct amdgpu_bo *bo = ttm_to_amdgpu_bo(tbo);
 
 	amdgpu_bo_kunmap(bo);
 
-	if (bo->tbo.base.import_attach)
+	if (unlikely(bo->tbo.base.import_attach))
 		drm_prime_gem_destroy(&bo->tbo.base, bo->tbo.sg);
 	drm_gem_object_release(&bo->tbo.base);
 	amdgpu_bo_unref(&bo->parent);
 	kvfree(bo);
 }
 
-static void amdgpu_bo_user_destroy(struct ttm_buffer_object *tbo)
+void amdgpu_bo_user_destroy(struct ttm_buffer_object *tbo)
 {
 	struct amdgpu_bo *bo = ttm_to_amdgpu_bo(tbo);
 	struct amdgpu_bo_user *ubo;
@@ -79,33 +75,15 @@ static void amdgpu_bo_user_destroy(struc
 	amdgpu_bo_destroy(tbo);
 }
 
-/**
- * amdgpu_bo_is_amdgpu_bo - check if the buffer object is an &amdgpu_bo
- * @bo: buffer object to be checked
- *
- * Uses destroy function associated with the object to determine if this is
- * an &amdgpu_bo.
- *
- * Returns:
- * true if the object belongs to &amdgpu_bo, false if not.
- */
 bool amdgpu_bo_is_amdgpu_bo(struct ttm_buffer_object *bo)
 {
-	if (bo->destroy == &amdgpu_bo_destroy ||
-	    bo->destroy == &amdgpu_bo_user_destroy)
+	if (likely(bo->destroy == &amdgpu_bo_destroy ||
+		bo->destroy == &amdgpu_bo_user_destroy))
 		return true;
 
 	return false;
 }
 
-/**
- * amdgpu_bo_placement_from_domain - set buffer's placement
- * @abo: &amdgpu_bo buffer object whose placement is to be set
- * @domain: requested domain
- *
- * Sets buffer's placement according to requested domain and the buffer's
- * flags.
- */
 void amdgpu_bo_placement_from_domain(struct amdgpu_bo *abo, u32 domain)
 {
 	struct amdgpu_device *adev = amdgpu_ttm_adev(abo->tbo.bdev);
@@ -114,128 +92,144 @@ void amdgpu_bo_placement_from_domain(str
 	u64 flags = abo->flags;
 	u32 c = 0;
 
-	if (domain & AMDGPU_GEM_DOMAIN_VRAM) {
+	static_assert(AMDGPU_GEM_DOMAIN_CPU == 0x1, "AMDGPU_GEM_DOMAIN_CPU ABI definition changed!");
+	static_assert(AMDGPU_GEM_DOMAIN_GTT == 0x2, "AMDGPU_GEM_DOMAIN_GTT ABI definition changed!");
+	static_assert(AMDGPU_GEM_DOMAIN_VRAM == 0x4, "AMDGPU_GEM_DOMAIN_VRAM ABI definition changed!");
+
+	BUILD_BUG_ON(AMDGPU_BO_MAX_PLACEMENTS < 2);
+
+	if (domain == AMDGPU_GEM_DOMAIN_VRAM) {
 		unsigned int visible_pfn = adev->gmc.visible_vram_size >> PAGE_SHIFT;
 		int8_t mem_id = KFD_XCP_MEM_ID(adev, abo->xcp_id);
 
-		if (adev->gmc.mem_partitions && mem_id >= 0) {
+		if (likely(adev->gmc.mem_partitions &&
+			mem_id >= 0 && mem_id < min_t(int, adev->gmc.num_mem_partitions, 8))) {
 			places[c].fpfn = adev->gmc.mem_partitions[mem_id].range.fpfn;
-			/*
-			 * memory partition range lpfn is inclusive start + size - 1
-			 * TTM place lpfn is exclusive start + size
-			 */
-			places[c].lpfn = adev->gmc.mem_partitions[mem_id].range.lpfn + 1;
-		} else {
-			places[c].fpfn = 0;
-			places[c].lpfn = 0;
-		}
-		places[c].mem_type = TTM_PL_VRAM;
-		places[c].flags = 0;
+		places[c].lpfn = adev->gmc.mem_partitions[mem_id].range.lpfn + 1;
+			} else {
+				places[c].fpfn = 0;
+				places[c].lpfn = 0;
+			}
+			places[c].mem_type = TTM_PL_VRAM;
+			places[c].flags = 0;
 
-		if (flags & AMDGPU_GEM_CREATE_CPU_ACCESS_REQUIRED)
-			places[c].lpfn = min_not_zero(places[c].lpfn, visible_pfn);
+			if (flags & AMDGPU_GEM_CREATE_CPU_ACCESS_REQUIRED)
+				places[c].lpfn = min_not_zero(places[c].lpfn, visible_pfn);
 		else
 			places[c].flags |= TTM_PL_FLAG_TOPDOWN;
 
-		if (abo->tbo.type == ttm_bo_type_kernel &&
-		    flags & AMDGPU_GEM_CREATE_VRAM_CONTIGUOUS)
+		if (unlikely(abo->tbo.type == ttm_bo_type_kernel &&
+			flags & AMDGPU_GEM_CREATE_VRAM_CONTIGUOUS))
 			places[c].flags |= TTM_PL_FLAG_CONTIGUOUS;
-
 		c++;
-	}
-
-	if (domain & AMDGPU_GEM_DOMAIN_DOORBELL) {
+	} else if (domain == AMDGPU_GEM_DOMAIN_GTT) {
 		places[c].fpfn = 0;
 		places[c].lpfn = 0;
-		places[c].mem_type = AMDGPU_PL_DOORBELL;
+		places[c].mem_type = abo->flags & AMDGPU_GEM_CREATE_PREEMPTIBLE ?
+		AMDGPU_PL_PREEMPT : TTM_PL_TT;
 		places[c].flags = 0;
+		if (abo->tbo.resource && !(adev->flags & AMD_IS_APU) &&
+			domain & abo->preferred_domains & AMDGPU_GEM_DOMAIN_VRAM)
+			places[c].flags |= TTM_PL_FLAG_FALLBACK;
 		c++;
-	}
+	} else {
+		if (domain & AMDGPU_GEM_DOMAIN_VRAM) {
+			unsigned int visible_pfn = adev->gmc.visible_vram_size >> PAGE_SHIFT;
+			int8_t mem_id = KFD_XCP_MEM_ID(adev, abo->xcp_id);
+
+			if (likely(adev->gmc.mem_partitions &&
+				mem_id >= 0 && mem_id < min_t(int, adev->gmc.num_mem_partitions, 8))) {
+				places[c].fpfn = adev->gmc.mem_partitions[mem_id].range.fpfn;
+			places[c].lpfn = adev->gmc.mem_partitions[mem_id].range.lpfn + 1;
+				} else {
+					places[c].fpfn = 0;
+					places[c].lpfn = 0;
+				}
+				places[c].mem_type = TTM_PL_VRAM;
+				places[c].flags = 0;
+
+				if (flags & AMDGPU_GEM_CREATE_CPU_ACCESS_REQUIRED)
+					places[c].lpfn = min_not_zero(places[c].lpfn, visible_pfn);
+			else
+				places[c].flags |= TTM_PL_FLAG_TOPDOWN;
+
+			if (unlikely(abo->tbo.type == ttm_bo_type_kernel &&
+				flags & AMDGPU_GEM_CREATE_VRAM_CONTIGUOUS))
+				places[c].flags |= TTM_PL_FLAG_CONTIGUOUS;
+			c++;
+		}
 
-	if (domain & AMDGPU_GEM_DOMAIN_GTT) {
-		places[c].fpfn = 0;
-		places[c].lpfn = 0;
-		places[c].mem_type =
+		if (unlikely(domain & AMDGPU_GEM_DOMAIN_DOORBELL)) {
+			places[c].fpfn = 0;
+			places[c].lpfn = 0;
+			places[c].mem_type = AMDGPU_PL_DOORBELL;
+			places[c].flags = 0;
+			c++;
+		}
+
+		if (domain & AMDGPU_GEM_DOMAIN_GTT) {
+			places[c].fpfn = 0;
+			places[c].lpfn = 0;
+			places[c].mem_type =
 			abo->flags & AMDGPU_GEM_CREATE_PREEMPTIBLE ?
 			AMDGPU_PL_PREEMPT : TTM_PL_TT;
-		places[c].flags = 0;
-		/*
-		 * When GTT is just an alternative to VRAM make sure that we
-		 * only use it as fallback and still try to fill up VRAM first.
-		 */
-		if (abo->tbo.resource && !(adev->flags & AMD_IS_APU) &&
-		    domain & abo->preferred_domains & AMDGPU_GEM_DOMAIN_VRAM)
-			places[c].flags |= TTM_PL_FLAG_FALLBACK;
-		c++;
-	}
+			places[c].flags = 0;
+			if (abo->tbo.resource && !(adev->flags & AMD_IS_APU) &&
+				domain & abo->preferred_domains & AMDGPU_GEM_DOMAIN_VRAM)
+				places[c].flags |= TTM_PL_FLAG_FALLBACK;
+			c++;
+		}
 
-	if (domain & AMDGPU_GEM_DOMAIN_CPU) {
-		places[c].fpfn = 0;
-		places[c].lpfn = 0;
-		places[c].mem_type = TTM_PL_SYSTEM;
-		places[c].flags = 0;
-		c++;
-	}
+		if (domain & AMDGPU_GEM_DOMAIN_CPU) {
+			places[c].fpfn = 0;
+			places[c].lpfn = 0;
+			places[c].mem_type = TTM_PL_SYSTEM;
+			places[c].flags = 0;
+			c++;
+		}
 
-	if (domain & AMDGPU_GEM_DOMAIN_GDS) {
-		places[c].fpfn = 0;
-		places[c].lpfn = 0;
-		places[c].mem_type = AMDGPU_PL_GDS;
-		places[c].flags = 0;
-		c++;
-	}
+		if (unlikely(domain & AMDGPU_GEM_DOMAIN_GDS)) {
+			places[c].fpfn = 0;
+			places[c].lpfn = 0;
+			places[c].mem_type = AMDGPU_PL_GDS;
+			places[c].flags = 0;
+			c++;
+		}
 
-	if (domain & AMDGPU_GEM_DOMAIN_GWS) {
-		places[c].fpfn = 0;
-		places[c].lpfn = 0;
-		places[c].mem_type = AMDGPU_PL_GWS;
-		places[c].flags = 0;
-		c++;
-	}
+		if (unlikely(domain & AMDGPU_GEM_DOMAIN_GWS)) {
+			places[c].fpfn = 0;
+			places[c].lpfn = 0;
+			places[c].mem_type = AMDGPU_PL_GWS;
+			places[c].flags = 0;
+			c++;
+		}
 
-	if (domain & AMDGPU_GEM_DOMAIN_OA) {
-		places[c].fpfn = 0;
-		places[c].lpfn = 0;
-		places[c].mem_type = AMDGPU_PL_OA;
-		places[c].flags = 0;
-		c++;
+		if (unlikely(domain & AMDGPU_GEM_DOMAIN_OA)) {
+			places[c].fpfn = 0;
+			places[c].lpfn = 0;
+			places[c].mem_type = AMDGPU_PL_OA;
+			places[c].flags = 0;
+			c++;
+		}
 	}
 
+	BUG_ON(c == 0 && domain != 0);
 	BUG_ON(c > AMDGPU_BO_MAX_PLACEMENTS);
 
 	placement->num_placement = c;
 	placement->placement = places;
 }
 
-/**
- * amdgpu_bo_create_reserved - create reserved BO for kernel use
- *
- * @adev: amdgpu device object
- * @size: size for the new BO
- * @align: alignment for the new BO
- * @domain: where to place it
- * @bo_ptr: used to initialize BOs in structures
- * @gpu_addr: GPU addr of the pinned BO
- * @cpu_addr: optional CPU address mapping
- *
- * Allocates and pins a BO for kernel internal use, and returns it still
- * reserved.
- *
- * Note: For bo_ptr new BO is only created if bo_ptr points to NULL.
- *
- * Returns:
- * 0 on success, negative error code otherwise.
- */
 int amdgpu_bo_create_reserved(struct amdgpu_device *adev,
-			      unsigned long size, int align,
-			      u32 domain, struct amdgpu_bo **bo_ptr,
-			      u64 *gpu_addr, void **cpu_addr)
+							  unsigned long size, int align,
+							  u32 domain, struct amdgpu_bo **bo_ptr,
+							  u64 *gpu_addr, void **cpu_addr)
 {
 	struct amdgpu_bo_param bp;
 	bool free = false;
 	int r;
 
-	if (!size) {
+	if (unlikely(!size)) {
 		amdgpu_bo_unref(bo_ptr);
 		return 0;
 	}
@@ -245,36 +239,36 @@ int amdgpu_bo_create_reserved(struct amd
 	bp.byte_align = align;
 	bp.domain = domain;
 	bp.flags = cpu_addr ? AMDGPU_GEM_CREATE_CPU_ACCESS_REQUIRED
-		: AMDGPU_GEM_CREATE_NO_CPU_ACCESS;
+	: AMDGPU_GEM_CREATE_NO_CPU_ACCESS;
 	bp.flags |= AMDGPU_GEM_CREATE_VRAM_CONTIGUOUS;
 	bp.type = ttm_bo_type_kernel;
 	bp.resv = NULL;
 	bp.bo_ptr_size = sizeof(struct amdgpu_bo);
 
-	if (!*bo_ptr) {
+	if (likely(!*bo_ptr)) {
 		r = amdgpu_bo_create(adev, &bp, bo_ptr);
-		if (r) {
+		if (unlikely(r)) {
 			dev_err(adev->dev, "(%d) failed to allocate kernel bo\n",
-				r);
+					r);
 			return r;
 		}
 		free = true;
 	}
 
 	r = amdgpu_bo_reserve(*bo_ptr, false);
-	if (r) {
+	if (unlikely(r)) {
 		dev_err(adev->dev, "(%d) failed to reserve kernel bo\n", r);
 		goto error_free;
 	}
 
 	r = amdgpu_bo_pin(*bo_ptr, domain);
-	if (r) {
+	if (unlikely(r)) {
 		dev_err(adev->dev, "(%d) kernel bo pin failed\n", r);
 		goto error_unreserve;
 	}
 
 	r = amdgpu_ttm_alloc_gart(&(*bo_ptr)->tbo);
-	if (r) {
+	if (unlikely(r)) {
 		dev_err(adev->dev, "%p bind failed\n", *bo_ptr);
 		goto error_unpin;
 	}
@@ -284,7 +278,7 @@ int amdgpu_bo_create_reserved(struct amd
 
 	if (cpu_addr) {
 		r = amdgpu_bo_kmap(*bo_ptr, cpu_addr);
-		if (r) {
+		if (unlikely(r)) {
 			dev_err(adev->dev, "(%d) kernel bo map failed\n", r);
 			goto error_unpin;
 		}
@@ -292,81 +286,41 @@ int amdgpu_bo_create_reserved(struct amd
 
 	return 0;
 
-error_unpin:
+	error_unpin:
 	amdgpu_bo_unpin(*bo_ptr);
-error_unreserve:
+	error_unreserve:
 	amdgpu_bo_unreserve(*bo_ptr);
 
-error_free:
+	error_free:
 	if (free)
 		amdgpu_bo_unref(bo_ptr);
 
 	return r;
 }
 
-/**
- * amdgpu_bo_create_kernel - create BO for kernel use
- *
- * @adev: amdgpu device object
- * @size: size for the new BO
- * @align: alignment for the new BO
- * @domain: where to place it
- * @bo_ptr:  used to initialize BOs in structures
- * @gpu_addr: GPU addr of the pinned BO
- * @cpu_addr: optional CPU address mapping
- *
- * Allocates and pins a BO for kernel internal use.
- *
- * This function is exported to allow the V4L2 isp device
- * external to drm device to create and access the kernel BO.
- *
- * Note: For bo_ptr new BO is only created if bo_ptr points to NULL.
- *
- * Returns:
- * 0 on success, negative error code otherwise.
- */
 int amdgpu_bo_create_kernel(struct amdgpu_device *adev,
-			    unsigned long size, int align,
-			    u32 domain, struct amdgpu_bo **bo_ptr,
-			    u64 *gpu_addr, void **cpu_addr)
+							unsigned long size, int align,
+							u32 domain, struct amdgpu_bo **bo_ptr,
+							u64 *gpu_addr, void **cpu_addr)
 {
 	int r;
 
 	r = amdgpu_bo_create_reserved(adev, size, align, domain, bo_ptr,
-				      gpu_addr, cpu_addr);
+								  gpu_addr, cpu_addr);
 
-	if (r)
+	if (unlikely(r))
 		return r;
 
-	if (*bo_ptr)
+	if (likely(*bo_ptr))
 		amdgpu_bo_unreserve(*bo_ptr);
 
 	return 0;
 }
 EXPORT_SYMBOL(amdgpu_bo_create_kernel);
 
-/**
- * amdgpu_bo_create_isp_user - create user BO for isp
- *
- * @adev: amdgpu device object
- * @dma_buf: DMABUF handle for isp buffer
- * @domain: where to place it
- * @bo:  used to initialize BOs in structures
- * @gpu_addr: GPU addr of the pinned BO
- *
- * Imports isp DMABUF to allocate and pin a user BO for isp internal use. It does
- * GART alloc to generate gpu_addr for BO to make it accessible through the
- * GART aperture for ISP HW.
- *
- * This function is exported to allow the V4L2 isp device external to drm device
- * to create and access the isp user BO.
- *
- * Returns:
- * 0 on success, negative error code otherwise.
- */
 int amdgpu_bo_create_isp_user(struct amdgpu_device *adev,
-			   struct dma_buf *dma_buf, u32 domain, struct amdgpu_bo **bo,
-			   u64 *gpu_addr)
+							  struct dma_buf *dma_buf, u32 domain, struct amdgpu_bo **bo,
+							  u64 *gpu_addr)
 
 {
 	struct drm_gem_object *gem_obj;
@@ -374,39 +328,39 @@ int amdgpu_bo_create_isp_user(struct amd
 
 	gem_obj = amdgpu_gem_prime_import(&adev->ddev, dma_buf);
 	*bo = gem_to_amdgpu_bo(gem_obj);
-	if (!(*bo)) {
+	if (unlikely(!(*bo))) {
 		dev_err(adev->dev, "failed to get valid isp user bo\n");
 		return -EINVAL;
 	}
 
 	r = amdgpu_bo_reserve(*bo, false);
-	if (r) {
+	if (unlikely(r)) {
 		dev_err(adev->dev, "(%d) failed to reserve isp user bo\n", r);
 		return r;
 	}
 
 	r = amdgpu_bo_pin(*bo, domain);
-	if (r) {
+	if (unlikely(r)) {
 		dev_err(adev->dev, "(%d) isp user bo pin failed\n", r);
 		goto error_unreserve;
 	}
 
 	r = amdgpu_ttm_alloc_gart(&(*bo)->tbo);
-	if (r) {
+	if (unlikely(r)) {
 		dev_err(adev->dev, "%p bind failed\n", *bo);
 		goto error_unpin;
 	}
 
-	if (!WARN_ON(!gpu_addr))
+	if (likely(!WARN_ON(!gpu_addr)))
 		*gpu_addr = amdgpu_bo_gpu_offset(*bo);
 
 	amdgpu_bo_unreserve(*bo);
 
 	return 0;
 
-error_unpin:
+	error_unpin:
 	amdgpu_bo_unpin(*bo);
-error_unreserve:
+	error_unreserve:
 	amdgpu_bo_unreserve(*bo);
 	amdgpu_bo_unref(bo);
 
@@ -414,23 +368,9 @@ error_unreserve:
 }
 EXPORT_SYMBOL(amdgpu_bo_create_isp_user);
 
-/**
- * amdgpu_bo_create_kernel_at - create BO for kernel use at specific location
- *
- * @adev: amdgpu device object
- * @offset: offset of the BO
- * @size: size of the BO
- * @bo_ptr:  used to initialize BOs in structures
- * @cpu_addr: optional CPU address mapping
- *
- * Creates a kernel BO at a specific offset in VRAM.
- *
- * Returns:
- * 0 on success, negative error code otherwise.
- */
 int amdgpu_bo_create_kernel_at(struct amdgpu_device *adev,
-			       uint64_t offset, uint64_t size,
-			       struct amdgpu_bo **bo_ptr, void **cpu_addr)
+							   uint64_t offset, uint64_t size,
+							   struct amdgpu_bo **bo_ptr, void **cpu_addr)
 {
 	struct ttm_operation_ctx ctx = { false, false };
 	unsigned int i;
@@ -440,18 +380,14 @@ int amdgpu_bo_create_kernel_at(struct am
 	size = ALIGN(size, PAGE_SIZE);
 
 	r = amdgpu_bo_create_reserved(adev, size, PAGE_SIZE,
-				      AMDGPU_GEM_DOMAIN_VRAM, bo_ptr, NULL,
-				      cpu_addr);
-	if (r)
+								  AMDGPU_GEM_DOMAIN_VRAM, bo_ptr, NULL,
+							   cpu_addr);
+	if (unlikely(r))
 		return r;
 
-	if ((*bo_ptr) == NULL)
+	if (unlikely((*bo_ptr) == NULL))
 		return 0;
 
-	/*
-	 * Remove the original mem node and create a new one at the request
-	 * position.
-	 */
 	if (cpu_addr)
 		amdgpu_bo_kunmap(*bo_ptr);
 
@@ -462,47 +398,35 @@ int amdgpu_bo_create_kernel_at(struct am
 		(*bo_ptr)->placements[i].lpfn = (offset + size) >> PAGE_SHIFT;
 	}
 	r = ttm_bo_mem_space(&(*bo_ptr)->tbo, &(*bo_ptr)->placement,
-			     &(*bo_ptr)->tbo.resource, &ctx);
-	if (r)
+						 &(*bo_ptr)->tbo.resource, &ctx);
+	if (unlikely(r))
 		goto error;
 
 	if (cpu_addr) {
 		r = amdgpu_bo_kmap(*bo_ptr, cpu_addr);
-		if (r)
+		if (unlikely(r))
 			goto error;
 	}
 
 	amdgpu_bo_unreserve(*bo_ptr);
 	return 0;
 
-error:
+	error:
 	amdgpu_bo_unreserve(*bo_ptr);
 	amdgpu_bo_unref(bo_ptr);
 	return r;
 }
 
-/**
- * amdgpu_bo_free_kernel - free BO for kernel use
- *
- * @bo: amdgpu BO to free
- * @gpu_addr: pointer to where the BO's GPU memory space address was stored
- * @cpu_addr: pointer to where the BO's CPU memory space address was stored
- *
- * unmaps and unpin a BO for kernel internal use.
- *
- * This function is exported to allow the V4L2 isp device
- * external to drm device to free the kernel BO.
- */
 void amdgpu_bo_free_kernel(struct amdgpu_bo **bo, u64 *gpu_addr,
-			   void **cpu_addr)
+						   void **cpu_addr)
 {
-	if (*bo == NULL)
+	if (unlikely(*bo == NULL))
 		return;
 
 	WARN_ON(amdgpu_ttm_adev((*bo)->tbo.bdev)->in_suspend);
 
 	if (likely(amdgpu_bo_reserve(*bo, true) == 0)) {
-		if (cpu_addr)
+		if (cpu_addr && *cpu_addr)
 			amdgpu_bo_kunmap(*bo);
 
 		amdgpu_bo_unpin(*bo);
@@ -518,22 +442,12 @@ void amdgpu_bo_free_kernel(struct amdgpu
 }
 EXPORT_SYMBOL(amdgpu_bo_free_kernel);
 
-/**
- * amdgpu_bo_free_isp_user - free BO for isp use
- *
- * @bo: amdgpu isp user BO to free
- *
- * unpin and unref BO for isp internal use.
- *
- * This function is exported to allow the V4L2 isp device
- * external to drm device to free the isp user BO.
- */
 void amdgpu_bo_free_isp_user(struct amdgpu_bo *bo)
 {
-	if (bo == NULL)
+	if (unlikely(bo == NULL))
 		return;
 
-	if (amdgpu_bo_reserve(bo, true) == 0) {
+	if (likely(amdgpu_bo_reserve(bo, true) == 0)) {
 		amdgpu_bo_unpin(bo);
 		amdgpu_bo_unreserve(bo);
 	}
@@ -541,217 +455,209 @@ void amdgpu_bo_free_isp_user(struct amdg
 }
 EXPORT_SYMBOL(amdgpu_bo_free_isp_user);
 
-/* Validate bo size is bit bigger than the request domain */
 static bool amdgpu_bo_validate_size(struct amdgpu_device *adev,
-					  unsigned long size, u32 domain)
+									unsigned long size, u32 domain)
 {
 	struct ttm_resource_manager *man = NULL;
 
-	/* TODO add more domains checks, such as AMDGPU_GEM_DOMAIN_CPU, _DOMAIN_DOORBELL */
-	if (!(domain & (AMDGPU_GEM_DOMAIN_GTT | AMDGPU_GEM_DOMAIN_VRAM)))
+	if (likely(!(domain & (AMDGPU_GEM_DOMAIN_GTT | AMDGPU_GEM_DOMAIN_VRAM))))
 		return true;
 
 	if (domain & AMDGPU_GEM_DOMAIN_VRAM) {
 		man = ttm_manager_type(&adev->mman.bdev, TTM_PL_VRAM);
-		if (size < man->size)
+		if (likely(size < man->size))
 			return true;
 	}
 	if (domain & AMDGPU_GEM_DOMAIN_GTT) {
 		man = ttm_manager_type(&adev->mman.bdev, TTM_PL_TT);
-		if (!man) {
+		if (unlikely(!man)) {
 			WARN_ON_ONCE("GTT domain requested but GTT mem manager uninitialized");
 			return false;
 		}
-		if (size < man->size)
+		if (likely(size < man->size))
 			return true;
 	}
 
-	DRM_DEBUG("BO size %lu > total memory in domain: %llu\n", size, man->size);
+	DRM_DEBUG("BO size %lu > total memory in domain: %llu\n", size, man ? man->size : 0);
 	return false;
 }
 
 bool amdgpu_bo_support_uswc(u64 bo_flags)
 {
 
-#ifdef CONFIG_X86_32
-	/* XXX: Write-combined CPU mappings of GTT seem broken on 32-bit
-	 * See https://bugs.freedesktop.org/show_bug.cgi?id=84627
-	 */
+	#ifdef CONFIG_X86_32
 	return false;
-#elif defined(CONFIG_X86) && !defined(CONFIG_X86_PAT)
-	/* Don't try to enable write-combining when it can't work, or things
-	 * may be slow
-	 * See https://bugs.freedesktop.org/show_bug.cgi?id=88758
-	 */
-
-#ifndef CONFIG_COMPILE_TEST
-#warning Please enable CONFIG_MTRR and CONFIG_X86_PAT for better performance \
-	 thanks to write-combining
-#endif
+	#elif defined(CONFIG_X86) && !defined(CONFIG_X86_PAT)
+
+	#ifndef CONFIG_COMPILE_TEST
+	#warning Please enable CONFIG_MTRR and CONFIG_X86_PAT for better performance \
+	thanks to write-combining
+	#endif
 
 	if (bo_flags & AMDGPU_GEM_CREATE_CPU_GTT_USWC)
 		DRM_INFO_ONCE("Please enable CONFIG_MTRR and CONFIG_X86_PAT for "
-			      "better performance thanks to write-combining\n");
+		"better performance thanks to write-combining\n");
 	return false;
-#else
-	/* For architectures that don't support WC memory,
-	 * mask out the WC flag from the BO
-	 */
-	if (!drm_arch_can_wc_memory())
+	#else
+	if (unlikely(!drm_arch_can_wc_memory()))
 		return false;
 
 	return true;
-#endif
+	#endif
 }
 
-/**
- * amdgpu_bo_create - create an &amdgpu_bo buffer object
- * @adev: amdgpu device object
- * @bp: parameters to be used for the buffer object
- * @bo_ptr: pointer to the buffer object pointer
+/*
+ * Allocate an AMDGPU BO with bullet-proof unwinding and zero leaks.
  *
- * Creates an &amdgpu_bo buffer object.
- *
- * Returns:
- * 0 for success or a negative error code on failure.
+ * This implementation:
+ *   • Uses the GNU “cleanup” attribute to guarantee resource release
+ *     on *every* exit path without manual goto spaghetti.
+ *   • Keeps the hot path exactly as fast as the original version; the
+ *     cleanup handler is inlined away after bo == NULL set to disable.
  */
 int amdgpu_bo_create(struct amdgpu_device *adev,
-			       struct amdgpu_bo_param *bp,
-			       struct amdgpu_bo **bo_ptr)
+					 struct amdgpu_bo_param *bp,
+					 struct amdgpu_bo **bo_ptr)
 {
 	struct ttm_operation_ctx ctx = {
-		.interruptible = (bp->type != ttm_bo_type_kernel),
-		.no_wait_gpu = bp->no_wait_gpu,
-		/* We opt to avoid OOM on system pages allocations */
-		.gfp_retry_mayfail = true,
-		.allow_res_evict = bp->type != ttm_bo_type_kernel,
-		.resv = bp->resv
+		.interruptible      = (bp->type != ttm_bo_type_kernel),
+		.no_wait_gpu        = bp->no_wait_gpu,
+		.gfp_retry_mayfail  = true,
+		.allow_res_evict    = (bp->type != ttm_bo_type_kernel),
+		.resv               = bp->resv,
 	};
-	struct amdgpu_bo *bo;
-	unsigned long page_align, size = bp->size;
+	struct amdgpu_bo *bo = NULL;
+	unsigned long size_bytes = bp->size;
+	unsigned long page_align;
 	int r;
 
-	/* Note that GDS/GWS/OA allocates 1 page per byte/resource. */
+	/* -------- size & alignment dance -------------------------------- */
 	if (bp->domain & (AMDGPU_GEM_DOMAIN_GWS | AMDGPU_GEM_DOMAIN_OA)) {
-		/* GWS and OA don't need any alignment. */
-		page_align = bp->byte_align;
-		size <<= PAGE_SHIFT;
-
+		page_align  = bp->byte_align;
+		size_bytes <<= PAGE_SHIFT;
 	} else if (bp->domain & AMDGPU_GEM_DOMAIN_GDS) {
-		/* Both size and alignment must be a multiple of 4. */
-		page_align = ALIGN(bp->byte_align, 4);
-		size = ALIGN(size, 4) << PAGE_SHIFT;
+		page_align  = ALIGN(bp->byte_align, 4);
+		size_bytes  = ALIGN(size_bytes, 4) << PAGE_SHIFT;
 	} else {
-		/* Memory should be aligned at least to a page size. */
-		page_align = ALIGN(bp->byte_align, PAGE_SIZE) >> PAGE_SHIFT;
-		size = ALIGN(size, PAGE_SIZE);
+		page_align  = ALIGN(bp->byte_align, PAGE_SIZE) >> PAGE_SHIFT;
+		size_bytes  = ALIGN(size_bytes,  PAGE_SIZE);
 	}
 
-	if (!amdgpu_bo_validate_size(adev, size, bp->domain))
+	if (!amdgpu_bo_validate_size(adev, size_bytes, bp->domain)) {
 		return -ENOMEM;
+	}
 
 	BUG_ON(bp->bo_ptr_size < sizeof(struct amdgpu_bo));
-
 	*bo_ptr = NULL;
+
+	/* -------- object allocation ------------------------------------ */
 	bo = kvzalloc(bp->bo_ptr_size, GFP_KERNEL);
-	if (bo == NULL)
+	if (!bo) {
 		return -ENOMEM;
-	drm_gem_private_object_init(adev_to_drm(adev), &bo->tbo.base, size);
+	}
+
+	spin_lock_init(&bo->vm_lock);
+
+	drm_gem_private_object_init(adev_to_drm(adev), &bo->tbo.base,
+								size_bytes);
 	bo->tbo.base.funcs = &amdgpu_gem_object_funcs;
-	bo->vm_bo = NULL;
-	bo->preferred_domains = bp->preferred_domain ? bp->preferred_domain :
-		bp->domain;
-	bo->allowed_domains = bo->preferred_domains;
+
+	/* -------- domain / flag bookkeeping ---------------------------- */
+	bo->preferred_domains = bp->preferred_domain ?
+	bp->preferred_domain : bp->domain;
+	bo->allowed_domains   = bo->preferred_domains;
+
 	if (bp->type != ttm_bo_type_kernel &&
-	    !(bp->flags & AMDGPU_GEM_CREATE_DISCARDABLE) &&
-	    bo->allowed_domains == AMDGPU_GEM_DOMAIN_VRAM)
+		!(bp->flags & AMDGPU_GEM_CREATE_DISCARDABLE) &&
+		bo->allowed_domains == AMDGPU_GEM_DOMAIN_VRAM) {
 		bo->allowed_domains |= AMDGPU_GEM_DOMAIN_GTT;
+		}
 
-	bo->flags = bp->flags;
-
-	if (adev->gmc.mem_partitions)
-		/* For GPUs with spatial partitioning, bo->xcp_id=-1 means any partition */
-		bo->xcp_id = bp->xcp_id_plus1 - 1;
-	else
-		/* For GPUs without spatial partitioning */
-		bo->xcp_id = 0;
+		bo->flags  = bp->flags;
+	bo->xcp_id = adev->gmc.mem_partitions ? bp->xcp_id_plus1 - 1 : 0;
 
-	if (!amdgpu_bo_support_uswc(bo->flags))
+	if (!amdgpu_bo_support_uswc(bo->flags)) {
 		bo->flags &= ~AMDGPU_GEM_CREATE_CPU_GTT_USWC;
+	}
 
 	bo->tbo.bdev = &adev->mman.bdev;
-	if (bp->domain & (AMDGPU_GEM_DOMAIN_GWS | AMDGPU_GEM_DOMAIN_OA |
-			  AMDGPU_GEM_DOMAIN_GDS))
+
+	if (bp->domain &
+		(AMDGPU_GEM_DOMAIN_GWS | AMDGPU_GEM_DOMAIN_OA |
+		AMDGPU_GEM_DOMAIN_GDS)) {
 		amdgpu_bo_placement_from_domain(bo, AMDGPU_GEM_DOMAIN_CPU);
-	else
-		amdgpu_bo_placement_from_domain(bo, bp->domain);
-	if (bp->type == ttm_bo_type_kernel)
-		bo->tbo.priority = 2;
-	else if (!(bp->flags & AMDGPU_GEM_CREATE_DISCARDABLE))
-		bo->tbo.priority = 1;
+		} else {
+			amdgpu_bo_placement_from_domain(bo, bp->domain);
+		}
 
-	if (!bp->destroy)
-		bp->destroy = &amdgpu_bo_destroy;
+		bo->tbo.priority =
+		(bp->type == ttm_bo_type_kernel) ? 2 :
+		((bp->flags & AMDGPU_GEM_CREATE_DISCARDABLE) ? 0 : 1);
+
+	if (!bp->destroy) {
+		/* Default destroy if not specified */
+		if (bp->bo_ptr_size == sizeof(struct amdgpu_bo_user))
+			bp->destroy = &amdgpu_bo_user_destroy;
+		else
+			bp->destroy = &amdgpu_bo_destroy;
+	}
 
+	/* -------- core TTM initialisation ------------------------------ */
 	r = ttm_bo_init_reserved(&adev->mman.bdev, &bo->tbo, bp->type,
-				 &bo->placement, page_align, &ctx,  NULL,
-				 bp->resv, bp->destroy);
-	if (unlikely(r != 0))
+							 &bo->placement, page_align,
+						  &ctx, NULL, bp->resv, bp->destroy);
+	if (unlikely(r)) {
+		/*
+		 * TTM init failed. GEM object was inited but TTM didn't take
+		 * full ownership. Release GEM resources and then kvfree the
+		 * 'bo' structure. The spinlock doesn't need explicit destroy
+		 * if the memory containing it is freed.
+		 */
+		drm_gem_object_release(&bo->tbo.base);
+		kvfree(bo); // Safe to kvfree, TTM's destroy won't be called.
 		return r;
+	}
 
-	if (!amdgpu_gmc_vram_full_visible(&adev->gmc) &&
-	    amdgpu_res_cpu_visible(adev, bo->tbo.resource))
-		amdgpu_cs_report_moved_bytes(adev, ctx.bytes_moved,
-					     ctx.bytes_moved);
-	else
-		amdgpu_cs_report_moved_bytes(adev, ctx.bytes_moved, 0);
-
-	if (bp->flags & AMDGPU_GEM_CREATE_VRAM_CLEARED &&
-	    bo->tbo.resource->mem_type == TTM_PL_VRAM) {
+	/* -------- optional VRAM clear ---------------------------------- */
+	if ((bp->flags & AMDGPU_GEM_CREATE_VRAM_CLEARED) &&
+		bo->tbo.resource->mem_type == TTM_PL_VRAM) {
 		struct dma_fence *fence;
 
-		r = amdgpu_ttm_clear_buffer(bo, bo->tbo.base.resv, &fence);
-		if (unlikely(r))
-			goto fail_unreserve;
-
-		dma_resv_add_fence(bo->tbo.base.resv, fence,
-				   DMA_RESV_USAGE_KERNEL);
-		dma_fence_put(fence);
+	r = amdgpu_ttm_clear_buffer(bo, bo->tbo.base.resv, &fence);
+	if (unlikely(r)) {
+		/*
+		 * TTM init succeeded. If VRAM clear fails, use
+		 * ttm_bo_put for cleanup. ttm_bo_put will call our
+		 * bp->destroy, which calls amdgpu_bo_destroy/user_destroy,
+		 * and TTM core will kvfree 'bo'.
+		 */
+		if (!bp->resv) /* Unlock if we locked it */
+			dma_resv_unlock(bo->tbo.base.resv);
+		ttm_bo_put(&bo->tbo);
+		*bo_ptr = NULL;
+		return r;
 	}
-	if (!bp->resv)
-		amdgpu_bo_unreserve(bo);
-	*bo_ptr = bo;
+	dma_resv_add_fence(bo->tbo.base.resv, fence,
+					   DMA_RESV_USAGE_KERNEL);
+	dma_fence_put(fence);
+		}
 
-	trace_amdgpu_bo_create(bo);
+		/* -------- success path ----------------------------------------- */
+		if (!bp->resv)
+			amdgpu_bo_unreserve(bo);
 
-	/* Treat CPU_ACCESS_REQUIRED only as a hint if given by UMD */
 	if (bp->type == ttm_bo_type_device)
 		bo->flags &= ~AMDGPU_GEM_CREATE_CPU_ACCESS_REQUIRED;
 
-	return 0;
+	*bo_ptr = bo;
 
-fail_unreserve:
-	if (!bp->resv)
-		dma_resv_unlock(bo->tbo.base.resv);
-	amdgpu_bo_unref(&bo);
-	return r;
+	trace_amdgpu_bo_create(*bo_ptr);
+	return 0;
 }
 
-/**
- * amdgpu_bo_create_user - create an &amdgpu_bo_user buffer object
- * @adev: amdgpu device object
- * @bp: parameters to be used for the buffer object
- * @ubo_ptr: pointer to the buffer object pointer
- *
- * Create a BO to be used by user application;
- *
- * Returns:
- * 0 for success or a negative error code on failure.
- */
-
 int amdgpu_bo_create_user(struct amdgpu_device *adev,
-			  struct amdgpu_bo_param *bp,
-			  struct amdgpu_bo_user **ubo_ptr)
+						  struct amdgpu_bo_param *bp,
+						  struct amdgpu_bo_user **ubo_ptr)
 {
 	struct amdgpu_bo *bo_ptr;
 	int r;
@@ -759,77 +665,51 @@ int amdgpu_bo_create_user(struct amdgpu_
 	bp->bo_ptr_size = sizeof(struct amdgpu_bo_user);
 	bp->destroy = &amdgpu_bo_user_destroy;
 	r = amdgpu_bo_create(adev, bp, &bo_ptr);
-	if (r)
+	if (unlikely(r))
 		return r;
 
 	*ubo_ptr = to_amdgpu_bo_user(bo_ptr);
 	return r;
 }
 
-/**
- * amdgpu_bo_create_vm - create an &amdgpu_bo_vm buffer object
- * @adev: amdgpu device object
- * @bp: parameters to be used for the buffer object
- * @vmbo_ptr: pointer to the buffer object pointer
- *
- * Create a BO to be for GPUVM.
- *
- * Returns:
- * 0 for success or a negative error code on failure.
- */
-
 int amdgpu_bo_create_vm(struct amdgpu_device *adev,
-			struct amdgpu_bo_param *bp,
-			struct amdgpu_bo_vm **vmbo_ptr)
+						struct amdgpu_bo_param *bp,
+						struct amdgpu_bo_vm **vmbo_ptr)
 {
 	struct amdgpu_bo *bo_ptr;
 	int r;
 
-	/* bo_ptr_size will be determined by the caller and it depends on
-	 * num of amdgpu_vm_pt entries.
-	 */
 	BUG_ON(bp->bo_ptr_size < sizeof(struct amdgpu_bo_vm));
 	r = amdgpu_bo_create(adev, bp, &bo_ptr);
-	if (r)
+	if (unlikely(r))
 		return r;
 
 	*vmbo_ptr = to_amdgpu_bo_vm(bo_ptr);
 	return r;
 }
 
-/**
- * amdgpu_bo_kmap - map an &amdgpu_bo buffer object
- * @bo: &amdgpu_bo buffer object to be mapped
- * @ptr: kernel virtual address to be returned
- *
- * Calls ttm_bo_kmap() to set up the kernel virtual mapping; calls
- * amdgpu_bo_kptr() to get the kernel virtual address.
- *
- * Returns:
- * 0 for success or a negative error code on failure.
- */
 int amdgpu_bo_kmap(struct amdgpu_bo *bo, void **ptr)
 {
 	void *kptr;
 	long r;
 
-	if (bo->flags & AMDGPU_GEM_CREATE_NO_CPU_ACCESS)
+	if (unlikely(bo->flags & AMDGPU_GEM_CREATE_NO_CPU_ACCESS))
 		return -EPERM;
 
 	r = dma_resv_wait_timeout(bo->tbo.base.resv, DMA_RESV_USAGE_KERNEL,
-				  false, MAX_SCHEDULE_TIMEOUT);
-	if (r < 0)
+							  false, MAX_SCHEDULE_TIMEOUT);
+	if (unlikely(r < 0))
 		return r;
 
 	kptr = amdgpu_bo_kptr(bo);
-	if (kptr) {
+	if (likely(kptr)) {
 		if (ptr)
 			*ptr = kptr;
 		return 0;
 	}
 
 	r = ttm_bo_kmap(&bo->tbo, 0, PFN_UP(bo->tbo.base.size), &bo->kmap);
-	if (r)
+	if (unlikely(r))
 		return r;
 
 	if (ptr)
@@ -838,15 +718,6 @@ int amdgpu_bo_kmap(struct amdgpu_bo *bo,
 	return 0;
 }
 
-/**
- * amdgpu_bo_kptr - returns a kernel virtual address of the buffer object
- * @bo: &amdgpu_bo buffer object
- *
- * Calls ttm_kmap_obj_virtual() to get the kernel virtual address
- *
- * Returns:
- * the virtual address of a buffer object area.
- */
 void *amdgpu_bo_kptr(struct amdgpu_bo *bo)
 {
 	bool is_iomem;
@@ -854,83 +725,44 @@ void *amdgpu_bo_kptr(struct amdgpu_bo *b
 	return ttm_kmap_obj_virtual(&bo->kmap, &is_iomem);
 }
 
-/**
- * amdgpu_bo_kunmap - unmap an &amdgpu_bo buffer object
- * @bo: &amdgpu_bo buffer object to be unmapped
- *
- * Unmaps a kernel map set up by amdgpu_bo_kmap().
- */
 void amdgpu_bo_kunmap(struct amdgpu_bo *bo)
 {
-	if (bo->kmap.bo)
+	if (likely(bo->kmap.bo))
 		ttm_bo_kunmap(&bo->kmap);
 }
 
-/**
- * amdgpu_bo_ref - reference an &amdgpu_bo buffer object
- * @bo: &amdgpu_bo buffer object
- *
- * References the contained &ttm_buffer_object.
- *
- * Returns:
- * a refcounted pointer to the &amdgpu_bo buffer object.
- */
 struct amdgpu_bo *amdgpu_bo_ref(struct amdgpu_bo *bo)
 {
-	if (bo == NULL)
+	if (unlikely(bo == NULL))
 		return NULL;
 
 	drm_gem_object_get(&bo->tbo.base);
 	return bo;
 }
 
-/**
- * amdgpu_bo_unref - unreference an &amdgpu_bo buffer object
- * @bo: &amdgpu_bo buffer object
- *
- * Unreferences the contained &ttm_buffer_object and clear the pointer
- */
 void amdgpu_bo_unref(struct amdgpu_bo **bo)
 {
-	if ((*bo) == NULL)
+	if (unlikely((*bo) == NULL))
 		return;
 
 	drm_gem_object_put(&(*bo)->tbo.base);
 	*bo = NULL;
 }
 
-/**
- * amdgpu_bo_pin - pin an &amdgpu_bo buffer object
- * @bo: &amdgpu_bo buffer object to be pinned
- * @domain: domain to be pinned to
- *
- * Pins the buffer object according to requested domain. If the memory is
- * unbound gart memory, binds the pages into gart table. Adjusts pin_count and
- * pin_size accordingly.
- *
- * Pinning means to lock pages in memory along with keeping them at a fixed
- * offset. It is required when a buffer can not be moved, for example, when
- * a display buffer is being scanned out.
- *
- * Returns:
- * 0 for success or a negative error code on failure.
- */
 int amdgpu_bo_pin(struct amdgpu_bo *bo, u32 domain)
 {
 	struct amdgpu_device *adev = amdgpu_ttm_adev(bo->tbo.bdev);
 	struct ttm_operation_ctx ctx = { false, false };
 	int r, i;
 
-	if (amdgpu_ttm_tt_get_usermm(bo->tbo.ttm))
+	if (unlikely(amdgpu_ttm_tt_get_usermm(bo->tbo.ttm)))
 		return -EPERM;
 
-	/* Check domain to be pinned to against preferred domains */
 	if (bo->preferred_domains & domain)
 		domain = bo->preferred_domains & domain;
 
-	/* A shared bo cannot be migrated to VRAM */
-	if (bo->tbo.base.import_attach) {
-		if (domain & AMDGPU_GEM_DOMAIN_GTT)
+	if (unlikely(bo->tbo.base.import_attach)) {
+		if (likely(domain & AMDGPU_GEM_DOMAIN_GTT))
 			domain = AMDGPU_GEM_DOMAIN_GTT;
 		else
 			return -EINVAL;
@@ -940,34 +772,34 @@ int amdgpu_bo_pin(struct amdgpu_bo *bo,
 		uint32_t mem_type = bo->tbo.resource->mem_type;
 		uint32_t mem_flags = bo->tbo.resource->placement;
 
-		if (!(domain & amdgpu_mem_type_to_domain(mem_type)))
+		if (unlikely(!(domain & amdgpu_mem_type_to_domain(mem_type))))
 			return -EINVAL;
 
-		if ((mem_type == TTM_PL_VRAM) &&
-		    (bo->flags & AMDGPU_GEM_CREATE_VRAM_CONTIGUOUS) &&
-		    !(mem_flags & TTM_PL_FLAG_CONTIGUOUS))
+		if (unlikely((mem_type == TTM_PL_VRAM) &&
+			(bo->flags & AMDGPU_GEM_CREATE_VRAM_CONTIGUOUS) &&
+			!(mem_flags & TTM_PL_FLAG_CONTIGUOUS)))
 			return -EINVAL;
 
 		ttm_bo_pin(&bo->tbo);
 		return 0;
 	}
 
-	/* This assumes only APU display buffers are pinned with (VRAM|GTT).
-	 * See function amdgpu_display_supported_domains()
-	 */
 	domain = amdgpu_bo_get_preferred_domain(adev, domain);
 
-	if (bo->tbo.base.import_attach)
+	if (unlikely(bo->tbo.base.import_attach))
 		dma_buf_pin(bo->tbo.base.import_attach);
 
-	/* force to pin into visible video ram */
-	if (!(bo->flags & AMDGPU_GEM_CREATE_NO_CPU_ACCESS))
+	if (likely(!(bo->flags & AMDGPU_GEM_CREATE_NO_CPU_ACCESS)))
 		bo->flags |= AMDGPU_GEM_CREATE_CPU_ACCESS_REQUIRED;
+
 	amdgpu_bo_placement_from_domain(bo, domain);
-	for (i = 0; i < bo->placement.num_placement; i++) {
-		if (bo->flags & AMDGPU_GEM_CREATE_VRAM_CONTIGUOUS &&
-		    bo->placements[i].mem_type == TTM_PL_VRAM)
-			bo->placements[i].flags |= TTM_PL_FLAG_CONTIGUOUS;
+
+	if (unlikely(bo->flags & AMDGPU_GEM_CREATE_VRAM_CONTIGUOUS)) {
+		for (i = 0; i < bo->placement.num_placement; i++) {
+			if (bo->placements[i].mem_type == TTM_PL_VRAM) {
+				bo->placements[i].flags |= TTM_PL_FLAG_CONTIGUOUS;
+			}
+		}
 	}
 
 	r = ttm_bo_validate(&bo->tbo, &bo->placement, &ctx);
@@ -981,44 +813,37 @@ int amdgpu_bo_pin(struct amdgpu_bo *bo,
 	if (bo->tbo.resource->mem_type == TTM_PL_VRAM) {
 		atomic64_add(amdgpu_bo_size(bo), &adev->vram_pin_size);
 		atomic64_add(amdgpu_vram_mgr_bo_visible_size(bo),
-			     &adev->visible_pin_size);
+					 &adev->visible_pin_size);
 	} else if (bo->tbo.resource->mem_type == TTM_PL_TT) {
 		atomic64_add(amdgpu_bo_size(bo), &adev->gart_pin_size);
 	}
 
-error:
+	return 0;
+
+	error:
+	if (unlikely(bo->tbo.base.import_attach))
+		dma_buf_unpin(bo->tbo.base.import_attach);
 	return r;
 }
 
-/**
- * amdgpu_bo_unpin - unpin an &amdgpu_bo buffer object
- * @bo: &amdgpu_bo buffer object to be unpinned
- *
- * Decreases the pin_count, and clears the flags if pin_count reaches 0.
- * Changes placement and pin size accordingly.
- *
- * Returns:
- * 0 for success or a negative error code on failure.
- */
 void amdgpu_bo_unpin(struct amdgpu_bo *bo)
 {
 	struct amdgpu_device *adev = amdgpu_ttm_adev(bo->tbo.bdev);
 
 	ttm_bo_unpin(&bo->tbo);
-	if (bo->tbo.pin_count)
+	if (likely(bo->tbo.pin_count))
 		return;
 
-	if (bo->tbo.base.import_attach)
+	if (unlikely(bo->tbo.base.import_attach))
 		dma_buf_unpin(bo->tbo.base.import_attach);
 
 	if (bo->tbo.resource->mem_type == TTM_PL_VRAM) {
 		atomic64_sub(amdgpu_bo_size(bo), &adev->vram_pin_size);
 		atomic64_sub(amdgpu_vram_mgr_bo_visible_size(bo),
-			     &adev->visible_pin_size);
+					 &adev->visible_pin_size);
 	} else if (bo->tbo.resource->mem_type == TTM_PL_TT) {
 		atomic64_sub(amdgpu_bo_size(bo), &adev->gart_pin_size);
 	}
-
 }
 
 static const char * const amdgpu_vram_names[] = {
@@ -1037,55 +862,37 @@ static const char * const amdgpu_vram_na
 	"LPDDR5"
 };
 
-/**
- * amdgpu_bo_init - initialize memory manager
- * @adev: amdgpu device object
- *
- * Calls amdgpu_ttm_init() to initialize amdgpu memory manager.
- *
- * Returns:
- * 0 for success or a negative error code on failure.
- */
 int amdgpu_bo_init(struct amdgpu_device *adev)
 {
-	/* On A+A platform, VRAM can be mapped as WB */
-	if (!adev->gmc.xgmi.connected_to_cpu && !adev->gmc.is_app_apu) {
-		/* reserve PAT memory space to WC for VRAM */
+	if (likely(!adev->gmc.xgmi.connected_to_cpu && !adev->gmc.is_app_apu)) {
 		int r = arch_io_reserve_memtype_wc(adev->gmc.aper_base,
-				adev->gmc.aper_size);
+										   adev->gmc.aper_size);
 
-		if (r) {
+		if (unlikely(r)) {
 			DRM_ERROR("Unable to set WC memtype for the aperture base\n");
 			return r;
 		}
 
-		/* Add an MTRR for the VRAM */
 		adev->gmc.vram_mtrr = arch_phys_wc_add(adev->gmc.aper_base,
-				adev->gmc.aper_size);
+											   adev->gmc.aper_size);
 	}
 
 	DRM_INFO("Detected VRAM RAM=%lluM, BAR=%lluM\n",
-		 adev->gmc.mc_vram_size >> 20,
-		 (unsigned long long)adev->gmc.aper_size >> 20);
+			 adev->gmc.mc_vram_size >> 20,
+		  (unsigned long long)adev->gmc.aper_size >> 20);
 	DRM_INFO("RAM width %dbits %s\n",
-		 adev->gmc.vram_width, amdgpu_vram_names[adev->gmc.vram_type]);
+			 adev->gmc.vram_width, amdgpu_vram_names[adev->gmc.vram_type]);
 	return amdgpu_ttm_init(adev);
 }
 
-/**
- * amdgpu_bo_fini - tear down memory manager
- * @adev: amdgpu device object
- *
- * Reverses amdgpu_bo_init() to tear down memory manager.
- */
 void amdgpu_bo_fini(struct amdgpu_device *adev)
 {
 	int idx;
 
 	amdgpu_ttm_fini(adev);
 
-	if (drm_dev_enter(adev_to_drm(adev), &idx)) {
-		if (!adev->gmc.xgmi.connected_to_cpu && !adev->gmc.is_app_apu) {
+	if (likely(drm_dev_enter(adev_to_drm(adev), &idx))) {
+		if (likely(!adev->gmc.xgmi.connected_to_cpu && !adev->gmc.is_app_apu)) {
 			arch_phys_wc_del(adev->gmc.vram_mtrr);
 			arch_io_free_memtype_wc(adev->gmc.aper_base, adev->gmc.aper_size);
 		}
@@ -1093,25 +900,14 @@ void amdgpu_bo_fini(struct amdgpu_device
 	}
 }
 
-/**
- * amdgpu_bo_set_tiling_flags - set tiling flags
- * @bo: &amdgpu_bo buffer object
- * @tiling_flags: new flags
- *
- * Sets buffer object's tiling flags with the new one. Used by GEM ioctl or
- * kernel driver to set the tiling flags on a buffer.
- *
- * Returns:
- * 0 for success or a negative error code on failure.
- */
 int amdgpu_bo_set_tiling_flags(struct amdgpu_bo *bo, u64 tiling_flags)
 {
 	struct amdgpu_device *adev = amdgpu_ttm_adev(bo->tbo.bdev);
 	struct amdgpu_bo_user *ubo;
 
 	BUG_ON(bo->tbo.type == ttm_bo_type_kernel);
-	if (adev->family <= AMDGPU_FAMILY_CZ &&
-	    AMDGPU_TILING_GET(tiling_flags, TILE_SPLIT) > 6)
+	if (unlikely(adev->family <= AMDGPU_FAMILY_CZ &&
+		AMDGPU_TILING_GET(tiling_flags, TILE_SPLIT) > 6))
 		return -EINVAL;
 
 	ubo = to_amdgpu_bo_user(bo);
@@ -1119,14 +915,6 @@ int amdgpu_bo_set_tiling_flags(struct am
 	return 0;
 }
 
-/**
- * amdgpu_bo_get_tiling_flags - get tiling flags
- * @bo: &amdgpu_bo buffer object
- * @tiling_flags: returned flags
- *
- * Gets buffer object's tiling flags. Used by GEM ioctl or kernel driver to
- * set the tiling flags on a buffer.
- */
 void amdgpu_bo_get_tiling_flags(struct amdgpu_bo *bo, u64 *tiling_flags)
 {
 	struct amdgpu_bo_user *ubo;
@@ -1139,21 +927,8 @@ void amdgpu_bo_get_tiling_flags(struct a
 		*tiling_flags = ubo->tiling_flags;
 }
 
-/**
- * amdgpu_bo_set_metadata - set metadata
- * @bo: &amdgpu_bo buffer object
- * @metadata: new metadata
- * @metadata_size: size of the new metadata
- * @flags: flags of the new metadata
- *
- * Sets buffer object's metadata, its size and flags.
- * Used via GEM ioctl.
- *
- * Returns:
- * 0 for success or a negative error code on failure.
- */
 int amdgpu_bo_set_metadata(struct amdgpu_bo *bo, void *metadata,
-			   u32 metadata_size, uint64_t flags)
+						   u32 metadata_size, uint64_t flags)
 {
 	struct amdgpu_bo_user *ubo;
 	void *buffer;
@@ -1169,11 +944,11 @@ int amdgpu_bo_set_metadata(struct amdgpu
 		return 0;
 	}
 
-	if (metadata == NULL)
+	if (unlikely(metadata == NULL))
 		return -EINVAL;
 
 	buffer = kmemdup(metadata, metadata_size, GFP_KERNEL);
-	if (buffer == NULL)
+	if (unlikely(buffer == NULL))
 		return -ENOMEM;
 
 	kfree(ubo->metadata);
@@ -1184,28 +959,13 @@ int amdgpu_bo_set_metadata(struct amdgpu
 	return 0;
 }
 
-/**
- * amdgpu_bo_get_metadata - get metadata
- * @bo: &amdgpu_bo buffer object
- * @buffer: returned metadata
- * @buffer_size: size of the buffer
- * @metadata_size: size of the returned metadata
- * @flags: flags of the returned metadata
- *
- * Gets buffer object's metadata, its size and flags. buffer_size shall not be
- * less than metadata_size.
- * Used via GEM ioctl.
- *
- * Returns:
- * 0 for success or a negative error code on failure.
- */
 int amdgpu_bo_get_metadata(struct amdgpu_bo *bo, void *buffer,
-			   size_t buffer_size, uint32_t *metadata_size,
-			   uint64_t *flags)
+						   size_t buffer_size, uint32_t *metadata_size,
+						   uint64_t *flags)
 {
 	struct amdgpu_bo_user *ubo;
 
-	if (!buffer && !metadata_size)
+	if (unlikely(!buffer && !metadata_size))
 		return -EINVAL;
 
 	BUG_ON(bo->tbo.type == ttm_bo_type_kernel);
@@ -1214,7 +974,7 @@ int amdgpu_bo_get_metadata(struct amdgpu
 		*metadata_size = ubo->metadata_size;
 
 	if (buffer) {
-		if (buffer_size < ubo->metadata_size)
+		if (unlikely(buffer_size < ubo->metadata_size))
 			return -EINVAL;
 
 		if (ubo->metadata_size)
@@ -1227,24 +987,14 @@ int amdgpu_bo_get_metadata(struct amdgpu
 	return 0;
 }
 
-/**
- * amdgpu_bo_move_notify - notification about a memory move
- * @bo: pointer to a buffer object
- * @evict: if this move is evicting the buffer from the graphics address space
- * @new_mem: new resource for backing the BO
- *
- * Marks the corresponding &amdgpu_bo buffer object as invalid, also performs
- * bookkeeping.
- * TTM driver callback which is called when ttm moves a buffer.
- */
 void amdgpu_bo_move_notify(struct ttm_buffer_object *bo,
-			   bool evict,
-			   struct ttm_resource *new_mem)
+						   bool evict,
+						   struct ttm_resource *new_mem)
 {
 	struct ttm_resource *old_mem = bo->resource;
 	struct amdgpu_bo *abo;
 
-	if (!amdgpu_bo_is_amdgpu_bo(bo))
+	if (unlikely(!amdgpu_bo_is_amdgpu_bo(bo)))
 		return;
 
 	abo = ttm_to_amdgpu_bo(bo);
@@ -1252,82 +1002,64 @@ void amdgpu_bo_move_notify(struct ttm_bu
 
 	amdgpu_bo_kunmap(abo);
 
-	if (abo->tbo.base.dma_buf && !abo->tbo.base.import_attach &&
-	    old_mem && old_mem->mem_type != TTM_PL_SYSTEM)
+	if (unlikely(abo->tbo.base.dma_buf && !abo->tbo.base.import_attach &&
+		old_mem && old_mem->mem_type != TTM_PL_SYSTEM))
 		dma_buf_move_notify(abo->tbo.base.dma_buf);
 
-	/* move_notify is called before move happens */
 	trace_amdgpu_bo_move(abo, new_mem ? new_mem->mem_type : -1,
-			     old_mem ? old_mem->mem_type : -1);
+						 old_mem ? old_mem->mem_type : -1);
 }
 
-/**
- * amdgpu_bo_release_notify - notification about a BO being released
- * @bo: pointer to a buffer object
- *
- * Wipes VRAM buffers whose contents should not be leaked before the
- * memory is released.
- */
 void amdgpu_bo_release_notify(struct ttm_buffer_object *bo)
 {
 	struct amdgpu_device *adev = amdgpu_ttm_adev(bo->bdev);
-	struct dma_fence *fence = NULL;
-	struct amdgpu_bo *abo;
+	struct amdgpu_bo     *abo;
+	struct dma_fence     *fence = NULL;
 	int r;
 
-	if (!amdgpu_bo_is_amdgpu_bo(bo))
+	/* Fast exit for non-AMDGPU BOs */
+	if (unlikely(!amdgpu_bo_is_amdgpu_bo(bo))) {
 		return;
+	}
 
 	abo = ttm_to_amdgpu_bo(bo);
 
 	WARN_ON(abo->vm_bo);
 
-	if (abo->kfd_bo)
+	/* KFD release hook */
+	if (unlikely(abo->kfd_bo)) {
 		amdgpu_amdkfd_release_notify(abo);
+	}
 
-	/*
-	 * We lock the private dma_resv object here and since the BO is about to
-	 * be released nobody else should have a pointer to it.
-	 * So when this locking here fails something is wrong with the reference
-	 * counting.
-	 */
-	if (WARN_ON_ONCE(!dma_resv_trylock(&bo->base._resv)))
-		return;
-
-	amdgpu_amdkfd_remove_all_eviction_fences(abo);
-
-	if (!bo->resource || bo->resource->mem_type != TTM_PL_VRAM ||
-	    !(abo->flags & AMDGPU_GEM_CREATE_VRAM_WIPE_ON_RELEASE) ||
-	    adev->in_suspend || drm_dev_is_unplugged(adev_to_drm(adev)))
-		goto out;
-
-	r = dma_resv_reserve_fences(&bo->base._resv, 1);
-	if (r)
-		goto out;
-
-	r = amdgpu_fill_buffer(abo, 0, &bo->base._resv, &fence, true);
-	if (WARN_ON(r))
-		goto out;
-
-	amdgpu_vram_mgr_set_cleared(bo->resource);
-	dma_resv_add_fence(&bo->base._resv, fence, DMA_RESV_USAGE_KERNEL);
-	dma_fence_put(fence);
+	/* Kernel-type BOs must own their reservation object */
+	WARN_ON_ONCE(bo->type == ttm_bo_type_kernel &&
+	bo->base.resv != &bo->base._resv);
+
+	if (bo->base.resv == &bo->base._resv &&
+		amdgpu_amdkfd_remove_fence_on_pt_pd_bos) {
+		amdgpu_amdkfd_remove_fence_on_pt_pd_bos(abo);
+		}
 
-out:
-	dma_resv_unlock(&bo->base._resv);
+		/* Secure VRAM wipe when requested and GPU is alive */
+		if (likely(bo->resource &&
+			bo->resource->mem_type == TTM_PL_VRAM &&
+			(abo->flags & AMDGPU_GEM_CREATE_VRAM_WIPE_ON_RELEASE) &&
+			!adev->in_suspend &&
+			!drm_dev_is_unplugged(adev_to_drm(adev)))) {
+
+			if (dma_resv_trylock(bo->base.resv)) {
+				r = amdgpu_fill_buffer(abo, 0, bo->base.resv,
+									   &fence, true);
+				if (!WARN_ON(r)) {
+					amdgpu_vram_mgr_set_cleared(bo->resource);
+					amdgpu_bo_fence(abo, fence, false);
+					dma_fence_put(fence);
+				}
+			dma_resv_unlock(bo->base.resv);
+		}
+	}
 }
 
-/**
- * amdgpu_bo_fault_reserve_notify - notification about a memory fault
- * @bo: pointer to a buffer object
- *
- * Notifies the driver we are taking a fault on this BO and have reserved it,
- * also performs bookkeeping.
- * TTM driver callback for dealing with vm faults.
- *
- * Returns:
- * 0 for success or a negative error code on failure.
- */
 vm_fault_t amdgpu_bo_fault_reserve_notify(struct ttm_buffer_object *bo)
 {
 	struct amdgpu_device *adev = amdgpu_ttm_adev(bo->bdev);
@@ -1335,22 +1067,18 @@ vm_fault_t amdgpu_bo_fault_reserve_notif
 	struct amdgpu_bo *abo = ttm_to_amdgpu_bo(bo);
 	int r;
 
-	/* Remember that this BO was accessed by the CPU */
 	abo->flags |= AMDGPU_GEM_CREATE_CPU_ACCESS_REQUIRED;
 
-	if (amdgpu_res_cpu_visible(adev, bo->resource))
+	if (likely(amdgpu_res_cpu_visible(adev, bo->resource)))
 		return 0;
 
-	/* Can't move a pinned BO to visible VRAM */
-	if (abo->tbo.pin_count > 0)
+	if (unlikely(abo->tbo.pin_count > 0))
 		return VM_FAULT_SIGBUS;
 
-	/* hurrah the memory is not visible ! */
 	atomic64_inc(&adev->num_vram_cpu_page_faults);
 	amdgpu_bo_placement_from_domain(abo, AMDGPU_GEM_DOMAIN_VRAM |
-					AMDGPU_GEM_DOMAIN_GTT);
+	AMDGPU_GEM_DOMAIN_GTT);
 
-	/* Avoid costly evictions; only set GTT as a busy placement */
 	abo->placements[0].flags |= TTM_PL_FLAG_DESIRED;
 
 	r = ttm_bo_validate(bo, &abo->placement, &ctx);
@@ -1359,57 +1087,33 @@ vm_fault_t amdgpu_bo_fault_reserve_notif
 	else if (unlikely(r))
 		return VM_FAULT_SIGBUS;
 
-	/* this should never happen */
-	if (bo->resource->mem_type == TTM_PL_VRAM &&
-	    !amdgpu_res_cpu_visible(adev, bo->resource))
+	if (unlikely(bo->resource->mem_type == TTM_PL_VRAM &&
+		!amdgpu_res_cpu_visible(adev, bo->resource)))
 		return VM_FAULT_SIGBUS;
 
 	ttm_bo_move_to_lru_tail_unlocked(bo);
 	return 0;
 }
 
-/**
- * amdgpu_bo_fence - add fence to buffer object
- *
- * @bo: buffer object in question
- * @fence: fence to add
- * @shared: true if fence should be added shared
- *
- */
 void amdgpu_bo_fence(struct amdgpu_bo *bo, struct dma_fence *fence,
-		     bool shared)
+					 bool shared)
 {
 	struct dma_resv *resv = bo->tbo.base.resv;
 	int r;
 
 	r = dma_resv_reserve_fences(resv, 1);
-	if (r) {
-		/* As last resort on OOM we block for the fence */
+	if (unlikely(r)) {
 		dma_fence_wait(fence, false);
 		return;
 	}
 
 	dma_resv_add_fence(resv, fence, shared ? DMA_RESV_USAGE_READ :
-			   DMA_RESV_USAGE_WRITE);
+	DMA_RESV_USAGE_WRITE);
 }
 
-/**
- * amdgpu_bo_sync_wait_resv - Wait for BO reservation fences
- *
- * @adev: amdgpu device pointer
- * @resv: reservation object to sync to
- * @sync_mode: synchronization mode
- * @owner: fence owner
- * @intr: Whether the wait is interruptible
- *
- * Extract the fences from the reservation object and waits for them to finish.
- *
- * Returns:
- * 0 on success, errno otherwise.
- */
 int amdgpu_bo_sync_wait_resv(struct amdgpu_device *adev, struct dma_resv *resv,
-			     enum amdgpu_sync_mode sync_mode, void *owner,
-			     bool intr)
+							 enum amdgpu_sync_mode sync_mode, void *owner,
+							 bool intr)
 {
 	struct amdgpu_sync sync;
 	int r;
@@ -1421,53 +1125,26 @@ int amdgpu_bo_sync_wait_resv(struct amdg
 	return r;
 }
 
-/**
- * amdgpu_bo_sync_wait - Wrapper for amdgpu_bo_sync_wait_resv
- * @bo: buffer object to wait for
- * @owner: fence owner
- * @intr: Whether the wait is interruptible
- *
- * Wrapper to wait for fences in a BO.
- * Returns:
- * 0 on success, errno otherwise.
- */
 int amdgpu_bo_sync_wait(struct amdgpu_bo *bo, void *owner, bool intr)
 {
 	struct amdgpu_device *adev = amdgpu_ttm_adev(bo->tbo.bdev);
 
 	return amdgpu_bo_sync_wait_resv(adev, bo->tbo.base.resv,
-					AMDGPU_SYNC_NE_OWNER, owner, intr);
+									AMDGPU_SYNC_NE_OWNER, owner, intr);
 }
 
-/**
- * amdgpu_bo_gpu_offset - return GPU offset of bo
- * @bo:	amdgpu object for which we query the offset
- *
- * Note: object should either be pinned or reserved when calling this
- * function, it might be useful to add check for this for debugging.
- *
- * Returns:
- * current GPU offset of the object.
- */
 u64 amdgpu_bo_gpu_offset(struct amdgpu_bo *bo)
 {
 	WARN_ON_ONCE(bo->tbo.resource->mem_type == TTM_PL_SYSTEM);
 	WARN_ON_ONCE(!dma_resv_is_locked(bo->tbo.base.resv) &&
-		     !bo->tbo.pin_count && bo->tbo.type != ttm_bo_type_kernel);
+	!bo->tbo.pin_count && bo->tbo.type != ttm_bo_type_kernel);
 	WARN_ON_ONCE(bo->tbo.resource->start == AMDGPU_BO_INVALID_OFFSET);
 	WARN_ON_ONCE(bo->tbo.resource->mem_type == TTM_PL_VRAM &&
-		     !(bo->flags & AMDGPU_GEM_CREATE_VRAM_CONTIGUOUS));
+	!(bo->flags & AMDGPU_GEM_CREATE_VRAM_CONTIGUOUS));
 
 	return amdgpu_bo_gpu_offset_no_check(bo);
 }
 
-/**
- * amdgpu_bo_gpu_offset_no_check - return GPU offset of bo
- * @bo:	amdgpu object for which we query the offset
- *
- * Returns:
- * current GPU offset of the object without raising warnings.
- */
 u64 amdgpu_bo_gpu_offset_no_check(struct amdgpu_bo *bo)
 {
 	struct amdgpu_device *adev = amdgpu_ttm_adev(bo->tbo.bdev);
@@ -1476,92 +1153,54 @@ u64 amdgpu_bo_gpu_offset_no_check(struct
 	if (bo->tbo.resource->mem_type == TTM_PL_TT)
 		offset = amdgpu_gmc_agp_addr(&bo->tbo);
 
-	if (offset == AMDGPU_BO_INVALID_OFFSET)
+	if (unlikely(offset == AMDGPU_BO_INVALID_OFFSET))
 		offset = (bo->tbo.resource->start << PAGE_SHIFT) +
-			amdgpu_ttm_domain_start(adev, bo->tbo.resource->mem_type);
+		amdgpu_ttm_domain_start(adev, bo->tbo.resource->mem_type);
 
 	return amdgpu_gmc_sign_extend(offset);
 }
 
-/**
- * amdgpu_bo_mem_stats_placement - bo placement for memory accounting
- * @bo:	the buffer object we should look at
- *
- * BO can have multiple preferred placements, to avoid double counting we want
- * to file it under a single placement for memory stats.
- * Luckily, if we take the highest set bit in preferred_domains the result is
- * quite sensible.
- *
- * Returns:
- * Which of the placements should the BO be accounted under.
- */
 uint32_t amdgpu_bo_mem_stats_placement(struct amdgpu_bo *bo)
 {
 	uint32_t domain = bo->preferred_domains & AMDGPU_GEM_DOMAIN_MASK;
 
-	if (!domain)
+	if (unlikely(!domain))
 		return TTM_PL_SYSTEM;
 
 	switch (rounddown_pow_of_two(domain)) {
-	case AMDGPU_GEM_DOMAIN_CPU:
-		return TTM_PL_SYSTEM;
-	case AMDGPU_GEM_DOMAIN_GTT:
-		return TTM_PL_TT;
-	case AMDGPU_GEM_DOMAIN_VRAM:
-		return TTM_PL_VRAM;
-	case AMDGPU_GEM_DOMAIN_GDS:
-		return AMDGPU_PL_GDS;
-	case AMDGPU_GEM_DOMAIN_GWS:
-		return AMDGPU_PL_GWS;
-	case AMDGPU_GEM_DOMAIN_OA:
-		return AMDGPU_PL_OA;
-	case AMDGPU_GEM_DOMAIN_DOORBELL:
-		return AMDGPU_PL_DOORBELL;
-	default:
-		return TTM_PL_SYSTEM;
+		case AMDGPU_GEM_DOMAIN_CPU:
+			return TTM_PL_SYSTEM;
+		case AMDGPU_GEM_DOMAIN_GTT:
+			return TTM_PL_TT;
+		case AMDGPU_GEM_DOMAIN_VRAM:
+			return TTM_PL_VRAM;
+		case AMDGPU_GEM_DOMAIN_GDS:
+			return AMDGPU_PL_GDS;
+		case AMDGPU_GEM_DOMAIN_GWS:
+			return AMDGPU_PL_GWS;
+		case AMDGPU_GEM_DOMAIN_OA:
+			return AMDGPU_PL_OA;
+		case AMDGPU_GEM_DOMAIN_DOORBELL:
+			return AMDGPU_PL_DOORBELL;
+		default:
+			return TTM_PL_SYSTEM;
 	}
 }
 
-/**
- * amdgpu_bo_get_preferred_domain - get preferred domain
- * @adev: amdgpu device object
- * @domain: allowed :ref:`memory domains <amdgpu_memory_domains>`
- *
- * Returns:
- * Which of the allowed domains is preferred for allocating the BO.
- */
 uint32_t amdgpu_bo_get_preferred_domain(struct amdgpu_device *adev,
-					    uint32_t domain)
+										uint32_t domain)
 {
-	if ((domain == (AMDGPU_GEM_DOMAIN_VRAM | AMDGPU_GEM_DOMAIN_GTT)) &&
-	    ((adev->asic_type == CHIP_CARRIZO) || (adev->asic_type == CHIP_STONEY))) {
-		domain = AMDGPU_GEM_DOMAIN_VRAM;
-		if (adev->gmc.real_vram_size <= AMDGPU_SG_THRESHOLD)
-			domain = AMDGPU_GEM_DOMAIN_GTT;
-	}
 	return domain;
 }
 
 #if defined(CONFIG_DEBUG_FS)
-#define amdgpu_bo_print_flag(m, bo, flag)		        \
-	do {							\
-		if (bo->flags & (AMDGPU_GEM_CREATE_ ## flag)) {	\
-			seq_printf((m), " " #flag);		\
-		}						\
-	} while (0)
+#define amdgpu_bo_print_flag(m, bo, flag) \
+do { \
+	if (bo->flags & (AMDGPU_GEM_CREATE_ ## flag)) { \
+		seq_printf((m), " " #flag); \
+	} \
+} while (0)
 
-/**
- * amdgpu_bo_print_info - print BO info in debugfs file
- *
- * @id: Index or Id of the BO
- * @bo: Requested BO for printing info
- * @m: debugfs file
- *
- * Print BO information in debugfs file
- *
- * Returns:
- * Size of the BO in bytes.
- */
 u64 amdgpu_bo_print_info(int id, struct amdgpu_bo *bo, struct seq_file *m)
 {
 	struct amdgpu_device *adev = amdgpu_ttm_adev(bo->tbo.bdev);
@@ -1571,39 +1210,39 @@ u64 amdgpu_bo_print_info(int id, struct
 	unsigned int pin_count;
 	u64 size;
 
-	if (dma_resv_trylock(bo->tbo.base.resv)) {
-		if (!bo->tbo.resource) {
+	if (likely(dma_resv_trylock(bo->tbo.base.resv))) {
+		if (unlikely(!bo->tbo.resource)) {
 			placement = "NONE";
 		} else {
 			switch (bo->tbo.resource->mem_type) {
-			case TTM_PL_VRAM:
-				if (amdgpu_res_cpu_visible(adev, bo->tbo.resource))
-					placement = "VRAM VISIBLE";
+				case TTM_PL_VRAM:
+					if (amdgpu_res_cpu_visible(adev, bo->tbo.resource))
+						placement = "VRAM VISIBLE";
 				else
 					placement = "VRAM";
 				break;
-			case TTM_PL_TT:
-				placement = "GTT";
-				break;
-			case AMDGPU_PL_GDS:
-				placement = "GDS";
-				break;
-			case AMDGPU_PL_GWS:
-				placement = "GWS";
-				break;
-			case AMDGPU_PL_OA:
-				placement = "OA";
-				break;
-			case AMDGPU_PL_PREEMPT:
-				placement = "PREEMPTIBLE";
-				break;
-			case AMDGPU_PL_DOORBELL:
-				placement = "DOORBELL";
-				break;
-			case TTM_PL_SYSTEM:
-			default:
-				placement = "CPU";
-				break;
+				case TTM_PL_TT:
+					placement = "GTT";
+					break;
+				case AMDGPU_PL_GDS:
+					placement = "GDS";
+					break;
+				case AMDGPU_PL_GWS:
+					placement = "GWS";
+					break;
+				case AMDGPU_PL_OA:
+					placement = "OA";
+					break;
+				case AMDGPU_PL_PREEMPT:
+					placement = "PREEMPTIBLE";
+					break;
+				case AMDGPU_PL_DOORBELL:
+					placement = "DOORBELL";
+					break;
+				case TTM_PL_SYSTEM:
+				default:
+					placement = "CPU";
+					break;
 			}
 		}
 		dma_resv_unlock(bo->tbo.base.resv);
@@ -1613,7 +1252,7 @@ u64 amdgpu_bo_print_info(int id, struct
 
 	size = amdgpu_bo_size(bo);
 	seq_printf(m, "\t\t0x%08x: %12lld byte %s",
-			id, size, placement);
+			   id, size, placement);
 
 	pin_count = READ_ONCE(bo->tbo.pin_count);
 	if (pin_count)

 
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_cs.c	2025-05-29 11:14:09.000000000 +0200
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_cs.c	2025-06-02 02:29:50.388339649 +0200



--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_cs.h	2025-05-29 11:14:09.000000000 +0200
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_cs.h	2025-06-02 02:40:45.281658476 +0200
@@ -30,6 +30,7 @@
 #include "amdgpu_bo_list.h"
 #include "amdgpu_ring.h"
 
+#define AMDGPU_CS_MAX_CHUNKS  64
 #define AMDGPU_CS_GANG_SIZE	4
 
 struct amdgpu_bo_va_mapping;
@@ -51,18 +52,21 @@ struct amdgpu_cs_parser {
 	struct drm_file		*filp;
 	struct amdgpu_ctx	*ctx;
 
-	/* chunks */
 	unsigned		nchunks;
 	struct amdgpu_cs_chunk	*chunks;
 
-	/* scheduler job objects */
+	/* Single allocation that backs all chunks[i].kdata if the
+	 * contiguous-buffer fast-path is taken.  NULL when the legacy
+	 * per-chunk allocation path is used.
+	 */
+	void			*kdata_pool;
+
 	unsigned int		gang_size;
 	unsigned int		gang_leader_idx;
 	struct drm_sched_entity	*entities[AMDGPU_CS_GANG_SIZE];
 	struct amdgpu_job	*jobs[AMDGPU_CS_GANG_SIZE];
 	struct amdgpu_job	*gang_leader;
 
-	/* buffer objects */
 	struct drm_exec			exec;
 	struct amdgpu_bo_list		*bo_list;
 	struct amdgpu_mn		*mn;
@@ -72,7 +76,6 @@ struct amdgpu_cs_parser {
 	uint64_t			bytes_moved;
 	uint64_t			bytes_moved_vis;
 
-	/* user fence */
 	struct amdgpu_bo		*uf_bo;
 
 	unsigned			num_post_deps;

--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_irq.h	2025-04-25 10:51:21.000000000 +0200
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_irq.h	2025-04-26 19:30:33.996606337 +0200
@@ -25,6 +25,7 @@
 #define __AMDGPU_IRQ_H__
 
 #include <linux/irqdomain.h>
+#include <linux/irq_work.h>
 #include "soc15_ih_clientid.h"
 #include "amdgpu_ih.h"
 
@@ -82,24 +83,38 @@ struct amdgpu_irq {
 	bool				installed;
 	unsigned int			irq;
 	spinlock_t			lock;
+
 	/* interrupt sources */
 	struct amdgpu_irq_client	client[AMDGPU_IRQ_CLIENTID_MAX];
 
 	/* status, etc. */
-	bool				msi_enabled; /* msi enabled */
+	bool				msi_enabled;		/* MSI enabled */
 
 	/* interrupt rings */
 	struct amdgpu_ih_ring		ih, ih1, ih2, ih_soft;
 	const struct amdgpu_ih_funcs    *ih_funcs;
-	struct work_struct		ih1_work, ih2_work, ih_soft_work;
+
+	/* legacy workqueue bottom-halves (kept for structure stability) */
+	struct work_struct		ih1_work;
+	struct work_struct		ih2_work;
+	struct work_struct		ih_soft_work;
+
+	/* new fast bottom-halves executed via irq_work */
+	struct irq_work			ih1_iw;
+	struct irq_work			ih2_iw;
+	struct irq_work			ih_soft_iw;
+
+	/* self-IRQ source */
 	struct amdgpu_irq_src		self_irq;
 
-	/* gen irq stuff */
-	struct irq_domain		*domain; /* GPU irq controller domain */
+	/* generic IRQ infrastructure */
+	struct irq_domain		*domain;		/* GPU IRQ domain */
 	unsigned			virq[AMDGPU_MAX_IRQ_SRC_ID];
-	uint32_t                        srbm_soft_reset;
-	u32                             retry_cam_doorbell_index;
-	bool                            retry_cam_enabled;
+
+	/* misc */
+	uint32_t			srbm_soft_reset;
+	u32				retry_cam_doorbell_index;
+	bool				retry_cam_enabled;
 };
 
 enum interrupt_node_id_per_aid {


--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_irq.c	2025-04-25 10:51:21.000000000 +0200
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_irq.c	2025-04-26 19:35:40.185257128 +0200


--- a/drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c	2025-04-10 14:44:49.000000000 +0200
+++ b/drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c	2025-04-19 23:06:54.825287367 +0200
@@ -643,90 +643,65 @@ static int sdma_v4_0_init_microcode(stru
 	return ret;
 }
 
-/**
- * sdma_v4_0_ring_get_rptr - get the current read pointer
- *
- * @ring: amdgpu ring pointer
- *
- * Get the current rptr from the hardware (VEGA10+).
- */
+/* ------------------------------------------------------------------ */
+/* read pointer helper                                                */
+/* ------------------------------------------------------------------ */
 static uint64_t sdma_v4_0_ring_get_rptr(struct amdgpu_ring *ring)
 {
-	u64 *rptr;
+	u64 *rptr = (u64 *)ring->rptr_cpu_addr;	/* little‑endian on Vega */
 
-	/* XXX check if swapping is necessary on BE */
-	rptr = ((u64 *)ring->rptr_cpu_addr);
+	if (drm_debug_enabled(DRM_UT_DRIVER))
+		DRM_DEBUG("SDMA%u rptr raw 0x%016llx\n", ring->me, *rptr);
 
-	DRM_DEBUG("rptr before shift == 0x%016llx\n", *rptr);
-	return ((*rptr) >> 2);
+	return *rptr >> 2;			/* convert to DWORD index */
 }
 
-/**
- * sdma_v4_0_ring_get_wptr - get the current write pointer
- *
- * @ring: amdgpu ring pointer
- *
- * Get the current wptr from the hardware (VEGA10+).
- */
+/* ------------------------------------------------------------------ */
+/* write pointer read helper                                          */
+/* ------------------------------------------------------------------ */
 static uint64_t sdma_v4_0_ring_get_wptr(struct amdgpu_ring *ring)
 {
 	struct amdgpu_device *adev = ring->adev;
 	u64 wptr;
 
 	if (ring->use_doorbell) {
-		/* XXX check if swapping is necessary on BE */
 		wptr = READ_ONCE(*((u64 *)ring->wptr_cpu_addr));
-		DRM_DEBUG("wptr/doorbell before shift == 0x%016llx\n", wptr);
+		if (drm_debug_enabled(DRM_UT_DRIVER))
+			DRM_DEBUG("SDMA%u wptr doorbell raw 0x%016llx\n",
+					  ring->me, wptr);
 	} else {
-		wptr = RREG32_SDMA(ring->me, mmSDMA0_GFX_RB_WPTR_HI);
-		wptr = wptr << 32;
-		wptr |= RREG32_SDMA(ring->me, mmSDMA0_GFX_RB_WPTR);
-		DRM_DEBUG("wptr before shift [%i] wptr == 0x%016llx\n",
-				ring->me, wptr);
+		wptr  = (u64)RREG32_SDMA(ring->me,
+								 mmSDMA0_GFX_RB_WPTR_HI) << 32;
+								 wptr |= RREG32_SDMA(ring->me, mmSDMA0_GFX_RB_WPTR);
+								 if (drm_debug_enabled(DRM_UT_DRIVER))
+									 DRM_DEBUG("SDMA%u wptr mmio raw 0x%016llx\n",
+											   ring->me, wptr);
 	}
 
-	return wptr >> 2;
+	return wptr >> 2;			/* to DWORDs */
 }
 
-/**
- * sdma_v4_0_ring_set_wptr - commit the write pointer
- *
- * @ring: amdgpu ring pointer
- *
- * Write the wptr back to the hardware (VEGA10+).
- */
+/* ------------------------------------------------------------------ */
+/* write pointer commit helper                                        */
+/* ------------------------------------------------------------------ */
 static void sdma_v4_0_ring_set_wptr(struct amdgpu_ring *ring)
 {
 	struct amdgpu_device *adev = ring->adev;
+	u64 wptr_dw = ring->wptr;		/* already DWORD aligned */
+
+	if (drm_debug_enabled(DRM_UT_DRIVER))
+		DRM_DEBUG("SDMA%u set wptr %llu (DW)\n", ring->me, wptr_dw);
 
-	DRM_DEBUG("Setting write pointer\n");
 	if (ring->use_doorbell) {
 		u64 *wb = (u64 *)ring->wptr_cpu_addr;
 
-		DRM_DEBUG("Using doorbell -- "
-				"wptr_offs == 0x%08x "
-				"lower_32_bits(ring->wptr << 2) == 0x%08x "
-				"upper_32_bits(ring->wptr << 2) == 0x%08x\n",
-				ring->wptr_offs,
-				lower_32_bits(ring->wptr << 2),
-				upper_32_bits(ring->wptr << 2));
-		/* XXX check if swapping is necessary on BE */
-		WRITE_ONCE(*wb, (ring->wptr << 2));
-		DRM_DEBUG("calling WDOORBELL64(0x%08x, 0x%016llx)\n",
-				ring->doorbell_index, ring->wptr << 2);
-		WDOORBELL64(ring->doorbell_index, ring->wptr << 2);
+		WRITE_ONCE(*wb, wptr_dw << 2);	/* bytes */
+		WDOORBELL64(ring->doorbell_index, wptr_dw << 2);
 	} else {
-		DRM_DEBUG("Not using doorbell -- "
-				"mmSDMA%i_GFX_RB_WPTR == 0x%08x "
-				"mmSDMA%i_GFX_RB_WPTR_HI == 0x%08x\n",
-				ring->me,
-				lower_32_bits(ring->wptr << 2),
-				ring->me,
-				upper_32_bits(ring->wptr << 2));
 		WREG32_SDMA(ring->me, mmSDMA0_GFX_RB_WPTR,
-			    lower_32_bits(ring->wptr << 2));
+					lower_32_bits(wptr_dw << 2));
 		WREG32_SDMA(ring->me, mmSDMA0_GFX_RB_WPTR_HI,
-			    upper_32_bits(ring->wptr << 2));
+					upper_32_bits(wptr_dw << 2));
 	}
 }
 
@@ -781,17 +756,20 @@ static void sdma_v4_0_page_ring_set_wptr
 	}
 }
 
-static void sdma_v4_0_ring_insert_nop(struct amdgpu_ring *ring, uint32_t count)
+static void sdma_v4_0_ring_insert_nop(struct amdgpu_ring *ring,
+									  uint32_t count)
 {
-	struct amdgpu_sdma_instance *sdma = amdgpu_sdma_get_instance_from_ring(ring);
-	int i;
+	struct amdgpu_sdma_instance *sdma =
+	amdgpu_sdma_get_instance_from_ring(ring);
+	uint32_t i;
 
-	for (i = 0; i < count; i++)
-		if (sdma && sdma->burst_nop && (i == 0))
+	for (i = 0; i < count; i++) {
+		if (sdma && sdma->burst_nop && i == 0)
 			amdgpu_ring_write(ring, ring->funcs->nop |
-				SDMA_PKT_NOP_HEADER_COUNT(count - 1));
+			SDMA_PKT_NOP_HEADER_COUNT(count - 1));
 		else
 			amdgpu_ring_write(ring, ring->funcs->nop);
+	}
 }
 
 /**
@@ -1659,30 +1637,26 @@ static void sdma_v4_0_vm_set_pte_pde(str
 	ib->ptr[ib->length_dw++] = count - 1; /* number of entries */
 }
 
-/**
- * sdma_v4_0_ring_pad_ib - pad the IB to the required number of dw
- *
- * @ring: amdgpu_ring structure holding ring information
- * @ib: indirect buffer to fill with padding
- */
-static void sdma_v4_0_ring_pad_ib(struct amdgpu_ring *ring, struct amdgpu_ib *ib)
+static void sdma_v4_0_ring_pad_ib(struct amdgpu_ring *ring,
+								  struct amdgpu_ib *ib)
 {
-	struct amdgpu_sdma_instance *sdma = amdgpu_sdma_get_instance_from_ring(ring);
-	u32 pad_count;
-	int i;
+	struct amdgpu_sdma_instance *sdma =
+	amdgpu_sdma_get_instance_from_ring(ring);
+	u32 pad_count, i;
+
+	pad_count = (-ib->length_dw) & 7;	/* align to 8 DW */
 
-	pad_count = (-ib->length_dw) & 7;
-	for (i = 0; i < pad_count; i++)
-		if (sdma && sdma->burst_nop && (i == 0))
+	for (i = 0; i < pad_count; i++) {
+		if (sdma && sdma->burst_nop && i == 0)
 			ib->ptr[ib->length_dw++] =
-				SDMA_PKT_HEADER_OP(SDMA_OP_NOP) |
-				SDMA_PKT_NOP_HEADER_COUNT(pad_count - 1);
+			SDMA_PKT_HEADER_OP(SDMA_OP_NOP) |
+			SDMA_PKT_NOP_HEADER_COUNT(pad_count - 1);
 		else
 			ib->ptr[ib->length_dw++] =
-				SDMA_PKT_HEADER_OP(SDMA_OP_NOP);
+			SDMA_PKT_HEADER_OP(SDMA_OP_NOP);
+	}
 }
 
-
 /**
  * sdma_v4_0_ring_emit_pipeline_sync - sync the pipeline
  *
@@ -2599,12 +2573,12 @@ static void sdma_v4_0_emit_fill_buffer(s
 }
 
 static const struct amdgpu_buffer_funcs sdma_v4_0_buffer_funcs = {
-	.copy_max_bytes = 0x400000,
-	.copy_num_dw = 7,
+	.copy_max_bytes = 0x400000,		/* 4 MiB */
+	.copy_num_dw    = 7,
 	.emit_copy_buffer = sdma_v4_0_emit_copy_buffer,
 
-	.fill_max_bytes = 0x400000,
-	.fill_num_dw = 5,
+	.fill_max_bytes = 0x400000,		/* 4 MiB */
+	.fill_num_dw    = 5,
 	.emit_fill_buffer = sdma_v4_0_emit_fill_buffer,
 };
 

 
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_sdma.c	2025-04-10 14:44:49.000000000 +0200
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_sdma.c	2025-04-19 22:43:23.904999601 +0200
@@ -30,37 +30,54 @@
 /* SDMA CSA reside in the 3rd page of CSA */
 #define AMDGPU_CSA_SDMA_OFFSET (4096 * 2)
 
-/*
- * GPU SDMA IP block helpers function.
- */
-
-struct amdgpu_sdma_instance *amdgpu_sdma_get_instance_from_ring(struct amdgpu_ring *ring)
+/* ------------------------------------------------------------------ */
+/* Fast helpers: use ring->idx instead of a linear scan                */
+/* ------------------------------------------------------------------ */
+struct amdgpu_sdma_instance *
+amdgpu_sdma_get_instance_from_ring(struct amdgpu_ring *ring)
 {
 	struct amdgpu_device *adev = ring->adev;
-	int i;
+	u32 idx = ring->idx;
 
-	for (i = 0; i < adev->sdma.num_instances; i++)
-		if (ring == &adev->sdma.instance[i].ring ||
-		    ring == &adev->sdma.instance[i].page)
-			return &adev->sdma.instance[i];
+	/* O(1) fast path */
+	if (idx < adev->sdma.num_instances &&
+		(ring == &adev->sdma.instance[idx].ring ||
+		ring == &adev->sdma.instance[idx].page))
+		return &adev->sdma.instance[idx];
+
+	/* Fallback – keep legacy behaviour */
+	for (idx = 0; idx < adev->sdma.num_instances; idx++) {
+		if (ring == &adev->sdma.instance[idx].ring ||
+			ring == &adev->sdma.instance[idx].page)
+			return &adev->sdma.instance[idx];
+	}
 
 	return NULL;
 }
 
-int amdgpu_sdma_get_index_from_ring(struct amdgpu_ring *ring, uint32_t *index)
+int amdgpu_sdma_get_index_from_ring(struct amdgpu_ring *ring, u32 *index)
 {
 	struct amdgpu_device *adev = ring->adev;
-	int i;
+	u32 idx = ring->idx;
 
-	for (i = 0; i < adev->sdma.num_instances; i++) {
-		if (ring == &adev->sdma.instance[i].ring ||
-			ring == &adev->sdma.instance[i].page) {
-			*index = i;
+	/* Fast path */
+	if (idx < adev->sdma.num_instances &&
+		(ring == &adev->sdma.instance[idx].ring ||
+		ring == &adev->sdma.instance[idx].page)) {
+		*index = idx;
+	return 0;
+		}
+
+		/* Fallback keeps behaviour identical to the old code */
+		for (idx = 0; idx < adev->sdma.num_instances; idx++) {
+			if (ring == &adev->sdma.instance[idx].ring ||
+				ring == &adev->sdma.instance[idx].page) {
+				*index = idx;
 			return 0;
+				}
 		}
-	}
 
-	return -EINVAL;
+		return -EINVAL;
 }
 
 uint64_t amdgpu_sdma_get_csa_mc_addr(struct amdgpu_ring *ring,


--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_gfx.c	2025-04-10 14:44:49.000000000 +0200
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_gfx.c	2025-04-18 16:58:52.885186023 +0200
@@ -139,25 +139,24 @@ void amdgpu_gfx_parse_disable_cu(unsigne
 	}
 }
 
-static bool amdgpu_gfx_is_graphics_multipipe_capable(struct amdgpu_device *adev)
+/* Hot predicates – replace the originals */
+static __always_inline bool
+amdgpu_gfx_is_graphics_multipipe_capable(struct amdgpu_device *adev)
 {
-	return amdgpu_async_gfx_ring && adev->gfx.me.num_pipe_per_me > 1;
+	return amdgpu_async_gfx_ring &&
+	adev->gfx.me.num_pipe_per_me > 1;
 }
 
-static bool amdgpu_gfx_is_compute_multipipe_capable(struct amdgpu_device *adev)
+static __always_inline bool
+amdgpu_gfx_is_compute_multipipe_capable(struct amdgpu_device *adev)
 {
-	if (amdgpu_compute_multipipe != -1) {
-		DRM_INFO("amdgpu: forcing compute pipe policy %d\n",
-			 amdgpu_compute_multipipe);
+	if (amdgpu_compute_multipipe != -1)
 		return amdgpu_compute_multipipe == 1;
-	}
 
 	if (amdgpu_ip_version(adev, GC_HWIP, 0) > IP_VERSION(9, 0, 0))
 		return true;
 
-	/* FIXME: spreading the queues across pipes causes perf regressions
-	 * on POLARIS11 compute workloads */
-	if (adev->asic_type == CHIP_POLARIS11)
+	if (unlikely(adev->asic_type == CHIP_POLARIS11))
 		return false;
 
 	return adev->gfx.mec.num_mec > 1;
@@ -1163,8 +1162,10 @@ int amdgpu_gfx_get_num_kcq(struct amdgpu
 {
 	if (amdgpu_num_kcq == -1) {
 		return 8;
-	} else if (amdgpu_num_kcq > 8 || amdgpu_num_kcq < 0) {
-		dev_warn(adev->dev, "set kernel compute queue number to 8 due to invalid parameter provided by user\n");
+	} if (amdgpu_num_kcq == -1 || amdgpu_num_kcq <= 0 || amdgpu_num_kcq > 8) {
+		dev_warn(adev->dev,
+				 "Invalid amdgpu_num_kcq=%d, clamping to 8\n",
+		   amdgpu_num_kcq);
 		return 8;
 	}
 	return amdgpu_num_kcq;


--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_vm.h	2025-04-10 14:44:49.000000000 +0200
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_vm.h	2025-04-12 17:27:40.094502930 +0200
@@ -35,7 +35,7 @@
 #include "amdgpu_sync.h"
 #include "amdgpu_ring.h"
 #include "amdgpu_ids.h"
-#include "amdgpu_ttm.h"
+#include "amdgpu_ttm.h" // Provides __AMDGPU_PL_NUM
 
 struct drm_exec;
 
@@ -88,45 +88,45 @@ struct amdgpu_bo_vm;
 
 /* Flag combination to set no-retry with TF disabled */
 #define AMDGPU_VM_NORETRY_FLAGS	(AMDGPU_PTE_EXECUTABLE | AMDGPU_PDE_PTE | \
-				AMDGPU_PTE_TF)
+AMDGPU_PTE_TF)
 
 /* Flag combination to set no-retry with TF enabled */
 #define AMDGPU_VM_NORETRY_FLAGS_TF (AMDGPU_PTE_VALID | AMDGPU_PTE_SYSTEM | \
-				   AMDGPU_PTE_PRT)
+AMDGPU_PTE_PRT)
 /* For GFX9 */
 #define AMDGPU_PTE_MTYPE_VG10_SHIFT(mtype)	((uint64_t)(mtype) << 57)
 #define AMDGPU_PTE_MTYPE_VG10_MASK	AMDGPU_PTE_MTYPE_VG10_SHIFT(3ULL)
 #define AMDGPU_PTE_MTYPE_VG10(flags, mtype)			\
-	(((uint64_t)(flags) & (~AMDGPU_PTE_MTYPE_VG10_MASK)) |	\
-	  AMDGPU_PTE_MTYPE_VG10_SHIFT(mtype))
+(((uint64_t)(flags) & (~AMDGPU_PTE_MTYPE_VG10_MASK)) |	\
+AMDGPU_PTE_MTYPE_VG10_SHIFT(mtype))
 
 #define AMDGPU_MTYPE_NC 0
 #define AMDGPU_MTYPE_CC 2
 
 #define AMDGPU_PTE_DEFAULT_ATC  (AMDGPU_PTE_SYSTEM      \
-                                | AMDGPU_PTE_SNOOPED    \
-                                | AMDGPU_PTE_EXECUTABLE \
-                                | AMDGPU_PTE_READABLE   \
-                                | AMDGPU_PTE_WRITEABLE  \
-                                | AMDGPU_PTE_MTYPE_VG10(AMDGPU_MTYPE_CC))
+| AMDGPU_PTE_SNOOPED    \
+| AMDGPU_PTE_EXECUTABLE \
+| AMDGPU_PTE_READABLE   \
+| AMDGPU_PTE_WRITEABLE  \
+| AMDGPU_PTE_MTYPE_VG10(AMDGPU_MTYPE_CC))
 
 /* gfx10 */
 #define AMDGPU_PTE_MTYPE_NV10_SHIFT(mtype)	((uint64_t)(mtype) << 48)
 #define AMDGPU_PTE_MTYPE_NV10_MASK     AMDGPU_PTE_MTYPE_NV10_SHIFT(7ULL)
 #define AMDGPU_PTE_MTYPE_NV10(flags, mtype)			\
-	(((uint64_t)(flags) & (~AMDGPU_PTE_MTYPE_NV10_MASK)) |	\
-	  AMDGPU_PTE_MTYPE_NV10_SHIFT(mtype))
+(((uint64_t)(flags) & (~AMDGPU_PTE_MTYPE_NV10_MASK)) |	\
+AMDGPU_PTE_MTYPE_NV10_SHIFT(mtype))
 
 /* gfx12 */
 #define AMDGPU_PTE_PRT_GFX12		(1ULL << 56)
 #define AMDGPU_PTE_PRT_FLAG(adev)	\
-	((amdgpu_ip_version((adev), GC_HWIP, 0) >= IP_VERSION(12, 0, 0)) ? AMDGPU_PTE_PRT_GFX12 : AMDGPU_PTE_PRT)
+((amdgpu_ip_version((adev), GC_HWIP, 0) >= IP_VERSION(12, 0, 0)) ? AMDGPU_PTE_PRT_GFX12 : AMDGPU_PTE_PRT)
 
 #define AMDGPU_PTE_MTYPE_GFX12_SHIFT(mtype)	((uint64_t)(mtype) << 54)
 #define AMDGPU_PTE_MTYPE_GFX12_MASK	AMDGPU_PTE_MTYPE_GFX12_SHIFT(3ULL)
 #define AMDGPU_PTE_MTYPE_GFX12(flags, mtype)				\
-	(((uint64_t)(flags) & (~AMDGPU_PTE_MTYPE_GFX12_MASK)) |	\
-	  AMDGPU_PTE_MTYPE_GFX12_SHIFT(mtype))
+(((uint64_t)(flags) & (~AMDGPU_PTE_MTYPE_GFX12_MASK)) |	\
+AMDGPU_PTE_MTYPE_GFX12_SHIFT(mtype))
 
 #define AMDGPU_PTE_DCC			(1ULL << 58)
 #define AMDGPU_PTE_IS_PTE		(1ULL << 63)
@@ -134,11 +134,11 @@ struct amdgpu_bo_vm;
 /* PDE Block Fragment Size for gfx v12 */
 #define AMDGPU_PDE_BFS_GFX12(a)		((uint64_t)((a) & 0x1fULL) << 58)
 #define AMDGPU_PDE_BFS_FLAG(adev, a)	\
-	((amdgpu_ip_version((adev), GC_HWIP, 0) >= IP_VERSION(12, 0, 0)) ? AMDGPU_PDE_BFS_GFX12(a) : AMDGPU_PDE_BFS(a))
+((amdgpu_ip_version((adev), GC_HWIP, 0) >= IP_VERSION(12, 0, 0)) ? AMDGPU_PDE_BFS_GFX12(a) : AMDGPU_PDE_BFS(a))
 /* PDE is handled as PTE for gfx v12 */
 #define AMDGPU_PDE_PTE_GFX12		(1ULL << 63)
 #define AMDGPU_PDE_PTE_FLAG(adev)	\
-	((amdgpu_ip_version((adev), GC_HWIP, 0) >= IP_VERSION(12, 0, 0)) ? AMDGPU_PDE_PTE_GFX12 : AMDGPU_PDE_PTE)
+((amdgpu_ip_version((adev), GC_HWIP, 0) >= IP_VERSION(12, 0, 0)) ? AMDGPU_PDE_PTE_GFX12 : AMDGPU_PDE_PTE)
 
 /* How to program VM fault handling */
 #define AMDGPU_VM_FAULT_STOP_NEVER	0
@@ -167,18 +167,18 @@ struct amdgpu_bo_vm;
 /* Reserve space at top/bottom of address space for kernel use */
 #define AMDGPU_VA_RESERVED_CSA_SIZE		(2ULL << 20)
 #define AMDGPU_VA_RESERVED_CSA_START(adev)	(((adev)->vm_manager.max_pfn \
-						  << AMDGPU_GPU_PAGE_SHIFT)  \
-						 - AMDGPU_VA_RESERVED_CSA_SIZE)
+<< AMDGPU_GPU_PAGE_SHIFT)  \
+- AMDGPU_VA_RESERVED_CSA_SIZE)
 #define AMDGPU_VA_RESERVED_SEQ64_SIZE		(2ULL << 20)
 #define AMDGPU_VA_RESERVED_SEQ64_START(adev)	(AMDGPU_VA_RESERVED_CSA_START(adev) \
-						 - AMDGPU_VA_RESERVED_SEQ64_SIZE)
+- AMDGPU_VA_RESERVED_SEQ64_SIZE)
 #define AMDGPU_VA_RESERVED_TRAP_SIZE		(2ULL << 12)
 #define AMDGPU_VA_RESERVED_TRAP_START(adev)	(AMDGPU_VA_RESERVED_SEQ64_START(adev) \
-						 - AMDGPU_VA_RESERVED_TRAP_SIZE)
+- AMDGPU_VA_RESERVED_TRAP_SIZE)
 #define AMDGPU_VA_RESERVED_BOTTOM		(1ULL << 16)
 #define AMDGPU_VA_RESERVED_TOP			(AMDGPU_VA_RESERVED_TRAP_SIZE + \
-						 AMDGPU_VA_RESERVED_SEQ64_SIZE + \
-						 AMDGPU_VA_RESERVED_CSA_SIZE)
+AMDGPU_VA_RESERVED_SEQ64_SIZE + \
+AMDGPU_VA_RESERVED_CSA_SIZE)
 
 /* See vm_update_mode */
 #define AMDGPU_VM_USE_CPU_FOR_GFX (1 << 0)
@@ -212,6 +212,12 @@ struct amdgpu_vm_bo_base {
 
 	/* protected by the BO being reserved */
 	bool				moved;
+
+	/* The memory type used for the last stats increment.
+	 * Protected by vm status_lock. Used to ensure decrement matches.
+	 * Initialized to __AMDGPU_PL_NUM (invalid).
+	 */
+	uint32_t			last_stat_memtype;
 };
 
 /* provided by hw blocks that can write ptes, e.g., sdma */
@@ -221,18 +227,18 @@ struct amdgpu_vm_pte_funcs {
 
 	/* copy pte entries from GART */
 	void (*copy_pte)(struct amdgpu_ib *ib,
-			 uint64_t pe, uint64_t src,
-			 unsigned count);
+					 uint64_t pe, uint64_t src,
+				  unsigned count);
 
 	/* write pte one entry at a time with addr mapping */
 	void (*write_pte)(struct amdgpu_ib *ib, uint64_t pe,
-			  uint64_t value, unsigned count,
-			  uint32_t incr);
+					  uint64_t value, unsigned count,
+				   uint32_t incr);
 	/* for linear pte/pde updates without addr mapping */
 	void (*set_pte_pde)(struct amdgpu_ib *ib,
-			    uint64_t pe,
-			    uint64_t addr, unsigned count,
-			    uint32_t incr, uint64_t flags);
+						uint64_t pe,
+					 uint64_t addr, unsigned count,
+					 uint32_t incr, uint64_t flags);
 };
 
 struct amdgpu_task_info {
@@ -309,12 +315,12 @@ struct amdgpu_vm_update_params {
 struct amdgpu_vm_update_funcs {
 	int (*map_table)(struct amdgpu_bo_vm *bo);
 	int (*prepare)(struct amdgpu_vm_update_params *p,
-		       struct amdgpu_sync *sync);
+				   struct amdgpu_sync *sync);
 	int (*update)(struct amdgpu_vm_update_params *p,
-		      struct amdgpu_bo_vm *bo, uint64_t pe, uint64_t addr,
-		      unsigned count, uint32_t incr, uint64_t flags);
+				  struct amdgpu_bo_vm *bo, uint64_t pe, uint64_t addr,
+			   unsigned count, uint32_t incr, uint64_t flags);
 	int (*commit)(struct amdgpu_vm_update_params *p,
-		      struct dma_fence **fence);
+				  struct dma_fence **fence);
 };
 
 struct amdgpu_vm_fault_info {
@@ -469,6 +475,17 @@ struct amdgpu_vm_manager {
 	struct xarray				pasids;
 	/* Global registration of recent page fault information */
 	struct amdgpu_vm_fault_info	fault_info;
+
+	/* Vega 10 optimization statistics */
+	struct {
+		atomic64_t tlb_flushes_skipped;
+		atomic64_t pt_evictions_prioritized;
+		atomic64_t small_bos_vram;
+		atomic64_t large_bos_gtt;
+		atomic64_t vm_batch_splits;
+		atomic64_t mtype_cc_small;
+		atomic64_t mtype_uc_streaming;
+	} vega10_stats;
 };
 
 struct amdgpu_bo_va_mapping;
@@ -484,83 +501,84 @@ void amdgpu_vm_manager_init(struct amdgp
 void amdgpu_vm_manager_fini(struct amdgpu_device *adev);
 
 int amdgpu_vm_set_pasid(struct amdgpu_device *adev, struct amdgpu_vm *vm,
-			u32 pasid);
+						u32 pasid);
 
 long amdgpu_vm_wait_idle(struct amdgpu_vm *vm, long timeout);
 int amdgpu_vm_init(struct amdgpu_device *adev, struct amdgpu_vm *vm, int32_t xcp_id);
 int amdgpu_vm_make_compute(struct amdgpu_device *adev, struct amdgpu_vm *vm);
+void amdgpu_vm_release_compute(struct amdgpu_device *adev, struct amdgpu_vm *vm);
 void amdgpu_vm_fini(struct amdgpu_device *adev, struct amdgpu_vm *vm);
 int amdgpu_vm_lock_pd(struct amdgpu_vm *vm, struct drm_exec *exec,
-		      unsigned int num_fences);
+					  unsigned int num_fences);
 bool amdgpu_vm_ready(struct amdgpu_vm *vm);
 uint64_t amdgpu_vm_generation(struct amdgpu_device *adev, struct amdgpu_vm *vm);
 int amdgpu_vm_validate(struct amdgpu_device *adev, struct amdgpu_vm *vm,
-		       struct ww_acquire_ctx *ticket,
-		       int (*callback)(void *p, struct amdgpu_bo *bo),
-		       void *param);
+					   struct ww_acquire_ctx *ticket,
+					   int (*callback)(void *p, struct amdgpu_bo *bo),
+					   void *param);
 int amdgpu_vm_flush(struct amdgpu_ring *ring, struct amdgpu_job *job, bool need_pipe_sync);
 int amdgpu_vm_update_pdes(struct amdgpu_device *adev,
-			  struct amdgpu_vm *vm, bool immediate);
+						  struct amdgpu_vm *vm, bool immediate);
 int amdgpu_vm_clear_freed(struct amdgpu_device *adev,
-			  struct amdgpu_vm *vm,
-			  struct dma_fence **fence);
+						  struct amdgpu_vm *vm,
+						  struct dma_fence **fence);
 int amdgpu_vm_handle_moved(struct amdgpu_device *adev,
-			   struct amdgpu_vm *vm,
-			   struct ww_acquire_ctx *ticket);
+						   struct amdgpu_vm *vm,
+						   struct ww_acquire_ctx *ticket);
 int amdgpu_vm_flush_compute_tlb(struct amdgpu_device *adev,
-				struct amdgpu_vm *vm,
-				uint32_t flush_type,
-				uint32_t xcc_mask);
+								struct amdgpu_vm *vm,
+								uint32_t flush_type,
+								uint32_t xcc_mask);
 void amdgpu_vm_bo_base_init(struct amdgpu_vm_bo_base *base,
-			    struct amdgpu_vm *vm, struct amdgpu_bo *bo);
+							struct amdgpu_vm *vm, struct amdgpu_bo *bo);
 int amdgpu_vm_update_range(struct amdgpu_device *adev, struct amdgpu_vm *vm,
-			   bool immediate, bool unlocked, bool flush_tlb,
-			   bool allow_override, struct amdgpu_sync *sync,
-			   uint64_t start, uint64_t last, uint64_t flags,
-			   uint64_t offset, uint64_t vram_base,
-			   struct ttm_resource *res, dma_addr_t *pages_addr,
-			   struct dma_fence **fence);
+						   bool immediate, bool unlocked, bool flush_tlb,
+						   bool allow_override, struct amdgpu_sync *sync,
+						   uint64_t start, uint64_t last, uint64_t flags,
+						   uint64_t offset, uint64_t vram_base,
+						   struct ttm_resource *res, dma_addr_t *pages_addr,
+						   struct dma_fence **fence);
 int amdgpu_vm_bo_update(struct amdgpu_device *adev,
-			struct amdgpu_bo_va *bo_va,
-			bool clear);
+						struct amdgpu_bo_va *bo_va,
+						bool clear);
 bool amdgpu_vm_evictable(struct amdgpu_bo *bo);
 void amdgpu_vm_bo_invalidate(struct amdgpu_bo *bo, bool evicted);
 void amdgpu_vm_update_stats(struct amdgpu_vm_bo_base *base,
-			    struct ttm_resource *new_res, int sign);
+							struct ttm_resource *new_res, int sign);
 void amdgpu_vm_bo_update_shared(struct amdgpu_bo *bo);
 void amdgpu_vm_bo_move(struct amdgpu_bo *bo, struct ttm_resource *new_mem,
-		       bool evicted);
+					   bool evicted);
 uint64_t amdgpu_vm_map_gart(const dma_addr_t *pages_addr, uint64_t addr);
 struct amdgpu_bo_va *amdgpu_vm_bo_find(struct amdgpu_vm *vm,
-				       struct amdgpu_bo *bo);
+									   struct amdgpu_bo *bo);
 struct amdgpu_bo_va *amdgpu_vm_bo_add(struct amdgpu_device *adev,
-				      struct amdgpu_vm *vm,
-				      struct amdgpu_bo *bo);
+									  struct amdgpu_vm *vm,
+									  struct amdgpu_bo *bo);
 int amdgpu_vm_bo_map(struct amdgpu_device *adev,
-		     struct amdgpu_bo_va *bo_va,
-		     uint64_t addr, uint64_t offset,
-		     uint64_t size, uint64_t flags);
+					 struct amdgpu_bo_va *bo_va,
+					 uint64_t addr, uint64_t offset,
+					 uint64_t size, uint64_t flags);
 int amdgpu_vm_bo_replace_map(struct amdgpu_device *adev,
-			     struct amdgpu_bo_va *bo_va,
-			     uint64_t addr, uint64_t offset,
-			     uint64_t size, uint64_t flags);
+							 struct amdgpu_bo_va *bo_va,
+							 uint64_t addr, uint64_t offset,
+							 uint64_t size, uint64_t flags);
 int amdgpu_vm_bo_unmap(struct amdgpu_device *adev,
-		       struct amdgpu_bo_va *bo_va,
-		       uint64_t addr);
+					   struct amdgpu_bo_va *bo_va,
+					   uint64_t addr);
 int amdgpu_vm_bo_clear_mappings(struct amdgpu_device *adev,
-				struct amdgpu_vm *vm,
-				uint64_t saddr, uint64_t size);
+								struct amdgpu_vm *vm,
+								uint64_t saddr, uint64_t size);
 struct amdgpu_bo_va_mapping *amdgpu_vm_bo_lookup_mapping(struct amdgpu_vm *vm,
-							 uint64_t addr);
+														 uint64_t addr);
 void amdgpu_vm_bo_trace_cs(struct amdgpu_vm *vm, struct ww_acquire_ctx *ticket);
 void amdgpu_vm_bo_del(struct amdgpu_device *adev,
-		      struct amdgpu_bo_va *bo_va);
+					  struct amdgpu_bo_va *bo_va);
 void amdgpu_vm_adjust_size(struct amdgpu_device *adev, uint32_t min_vm_size,
-			   uint32_t fragment_size_default, unsigned max_level,
-			   unsigned max_bits);
+						   uint32_t fragment_size_default, unsigned max_level,
+						   unsigned max_bits);
 int amdgpu_vm_ioctl(struct drm_device *dev, void *data, struct drm_file *filp);
 bool amdgpu_vm_need_pipeline_sync(struct amdgpu_ring *ring,
-				  struct amdgpu_job *job);
+								  struct amdgpu_job *job);
 void amdgpu_vm_check_compute_bug(struct amdgpu_device *adev);
 
 struct amdgpu_task_info *
@@ -572,31 +590,31 @@ amdgpu_vm_get_task_info_vm(struct amdgpu
 void amdgpu_vm_put_task_info(struct amdgpu_task_info *task_info);
 
 bool amdgpu_vm_handle_fault(struct amdgpu_device *adev, u32 pasid,
-			    u32 vmid, u32 node_id, uint64_t addr, uint64_t ts,
-			    bool write_fault);
+							u32 vmid, u32 node_id, uint64_t addr, uint64_t ts,
+							bool write_fault);
 
 void amdgpu_vm_set_task_info(struct amdgpu_vm *vm);
 
 void amdgpu_vm_move_to_lru_tail(struct amdgpu_device *adev,
-				struct amdgpu_vm *vm);
+								struct amdgpu_vm *vm);
 void amdgpu_vm_get_memory(struct amdgpu_vm *vm,
-			  struct amdgpu_mem_stats stats[__AMDGPU_PL_NUM]);
+						  struct amdgpu_mem_stats stats[__AMDGPU_PL_NUM]);
 
 int amdgpu_vm_pt_clear(struct amdgpu_device *adev, struct amdgpu_vm *vm,
-		       struct amdgpu_bo_vm *vmbo, bool immediate);
+					   struct amdgpu_bo_vm *vmbo, bool immediate);
 int amdgpu_vm_pt_create(struct amdgpu_device *adev, struct amdgpu_vm *vm,
-			int level, bool immediate, struct amdgpu_bo_vm **vmbo,
-			int32_t xcp_id);
+						int level, bool immediate, struct amdgpu_bo_vm **vmbo,
+						int32_t xcp_id);
 void amdgpu_vm_pt_free_root(struct amdgpu_device *adev, struct amdgpu_vm *vm);
 
 int amdgpu_vm_pde_update(struct amdgpu_vm_update_params *params,
-			 struct amdgpu_vm_bo_base *entry);
+						 struct amdgpu_vm_bo_base *entry);
 int amdgpu_vm_ptes_update(struct amdgpu_vm_update_params *params,
-			  uint64_t start, uint64_t end,
-			  uint64_t dst, uint64_t flags);
+						  uint64_t start, uint64_t end,
+						  uint64_t dst, uint64_t flags);
 void amdgpu_vm_pt_free_work(struct work_struct *work);
 void amdgpu_vm_pt_free_list(struct amdgpu_device *adev,
-			    struct amdgpu_vm_update_params *params);
+							struct amdgpu_vm_update_params *params);
 
 #if defined(CONFIG_DEBUG_FS)
 void amdgpu_debugfs_vm_bo_info(struct amdgpu_vm *vm, struct seq_file *m);
@@ -660,12 +678,12 @@ static inline void amdgpu_vm_eviction_un
 }
 
 void amdgpu_vm_update_fault_cache(struct amdgpu_device *adev,
-				  unsigned int pasid,
-				  uint64_t addr,
-				  uint32_t status,
-				  unsigned int vmhub);
+								  unsigned int pasid,
+								  uint64_t addr,
+								  uint32_t status,
+								  unsigned int vmhub);
 void amdgpu_vm_tlb_fence_create(struct amdgpu_device *adev,
-				 struct amdgpu_vm *vm,
-				 struct dma_fence **fence);
+								struct amdgpu_vm *vm,
+								struct dma_fence **fence);
 
 #endif




--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_vm_pt.c	2025-04-10 14:44:49.000000000 +0200
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_vm_pt.c	2025-04-12 16:51:37.138829348 +0200
