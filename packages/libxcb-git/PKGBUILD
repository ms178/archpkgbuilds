# Maintainer: Philipp A. <flying-sheep@web.de>
# Contributor: Doug Newgard <scimmia22 at outlook dot com>
# Contributor: NeoRaider <neoraider@universe-factory.net>
# Contributor: Stefan Husmann <stefan-husmann@t-online.de>

pkgname=libxcb-git
pkgver=1.17.0.r4.gdaf2c53
pkgrel=1
pkgdesc='X11 client-side library with PGO and CS-PGO optimizations - git version'
arch=(i686 x86_64)
url='http://xcb.freedesktop.org'
depends=(xcb-proto-git libxdmcp libxau)
makedepends=(
  git
  libxslt
  python
  xorg-util-macros
  xorgproto
  clang       # For PGO
  llvm        # For llvm-profdata
)
conflicts=(libxcb)
provides=("libxcb=$pkgver")
license=(custom)
options=(strip)
source=('git+https://gitlab.freedesktop.org/xorg/lib/libxcb.git')
sha256sums=('SKIP')

pkgver() {
  cd "$srcdir/${pkgname%-*}"
  git describe --tags | sed 's/libxcb-//;s/-/.r/;s/-/./g'
}

prepare() {
  cd "$srcdir/${pkgname%-*}"

  # Generate the enhanced gaming workload C file for PGO training
  cat > "$srcdir/xcb_workload.c" << 'EOF'
#include <xcb/xcb.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <time.h>
#include <sys/time.h>

#define WORKLOAD_ITERATIONS 10
#define EVENT_LOOP_COUNT 2000
#define WINDOW_WIDTH 1280
#define WINDOW_HEIGHT 720
#define NUM_RECTANGLES 50
#define NUM_INPUT_EVENTS 100

// Simulated frame data
typedef struct {
    int x, y;
    int width, height;
    uint32_t color;
} Rectangle;

// Get current time in milliseconds
uint64_t get_time_ms() {
    struct timeval tv;
    gettimeofday(&tv, NULL);
    return (uint64_t)(tv.tv_sec) * 1000 + (uint64_t)(tv.tv_usec) / 1000;
}

// Initialize random rectangles for rendering
void init_rectangles(Rectangle *rects, int num, int max_width, int max_height) {
    for (int i = 0; i < num; i++) {
        rects[i].x = rand() % max_width;
        rects[i].y = rand() % max_height;
        rects[i].width = 20 + rand() % 100;
        rects[i].height = 20 + rand() % 100;
        rects[i].color = rand() & 0xFFFFFF;
    }
}

// Update rectangle positions to simulate animation
void update_rectangles(Rectangle *rects, int num, int max_width, int max_height) {
    for (int i = 0; i < num; i++) {
        rects[i].x += -5 + rand() % 11;
        rects[i].y += -5 + rand() % 11;

        // Keep within bounds
        if (rects[i].x < 0) rects[i].x = 0;
        if (rects[i].y < 0) rects[i].y = 0;
        if (rects[i].x > max_width - rects[i].width) rects[i].x = max_width - rects[i].width;
        if (rects[i].y > max_height - rects[i].height) rects[i].y = max_height - rects[i].height;
    }
}

// Check for extension support
int check_extension(xcb_connection_t *conn, const char *extension_name) {
    xcb_query_extension_cookie_t cookie = xcb_query_extension(conn, strlen(extension_name), extension_name);
    xcb_query_extension_reply_t *reply = xcb_query_extension_reply(conn, cookie, NULL);
    int present = reply && reply->present;
    free(reply);
    return present;
}

// Simulate keyboard and mouse input events
void simulate_input_events(xcb_connection_t *conn, xcb_window_t window, int count) {
    for (int i = 0; i < count; i++) {
        // Alternate between key and mouse events
        if (i % 2 == 0) {
            // Simulate key press/release (WASD keys common in games)
            xcb_key_press_event_t key_event = {
                .response_type = (i % 4 == 0) ? XCB_KEY_PRESS : XCB_KEY_RELEASE,
                .detail = 30 + (i % 4), // Approximate key codes for W,A,S,D
                .time = XCB_CURRENT_TIME,
                .root = XCB_NONE,
                .event = window,
                .child = XCB_NONE,
                .root_x = 0,
                .root_y = 0,
                .event_x = 0,
                .event_y = 0,
                .state = 0,
                .same_screen = 1
            };
            xcb_send_event(conn, 0, window, XCB_EVENT_MASK_KEY_PRESS | XCB_EVENT_MASK_KEY_RELEASE,
                          (char*)&key_event);
        } else {
            // Simulate mouse movement
            xcb_motion_notify_event_t motion_event = {
                .response_type = XCB_MOTION_NOTIFY,
                .detail = 0,
                .time = XCB_CURRENT_TIME,
                .root = XCB_NONE,
                .event = window,
                .child = XCB_NONE,
                .root_x = 0,
                .root_y = 0,
                .event_x = rand() % WINDOW_WIDTH,
                .event_y = rand() % WINDOW_HEIGHT,
                .state = 0,
                .same_screen = 1
            };
            xcb_send_event(conn, 0, window, XCB_EVENT_MASK_POINTER_MOTION,
                          (char*)&motion_event);
        }

        // Every 10th event, add a button press/release
        if (i % 10 == 0) {
            xcb_button_press_event_t button_event = {
                .response_type = (i % 20 == 0) ? XCB_BUTTON_PRESS : XCB_BUTTON_RELEASE,
                .detail = 1, // Left button
                .time = XCB_CURRENT_TIME,
                .root = XCB_NONE,
                .event = window,
                .child = XCB_NONE,
                .root_x = 0,
                .root_y = 0,
                .event_x = rand() % WINDOW_WIDTH,
                .event_y = rand() % WINDOW_HEIGHT,
                .state = 0,
                .same_screen = 1
            };
            xcb_send_event(conn, 0, window, XCB_EVENT_MASK_BUTTON_PRESS | XCB_EVENT_MASK_BUTTON_RELEASE,
                          (char*)&button_event);
        }
    }
    xcb_flush(conn);
}

// Main workload function
int main() {
    xcb_connection_t *connection;
    xcb_screen_t *screen;
    xcb_window_t window;
    xcb_gcontext_t gc;
    xcb_generic_event_t *event;
    uint32_t mask = 0;
    uint32_t values[2];
    int screen_num;
    Rectangle rectangles[NUM_RECTANGLES];
    uint64_t frame_start, frame_end;
    int has_randr = 0, has_present = 0, has_glx = 0, has_xfixes = 0, has_xinput = 0, has_xkb = 0;

    printf("Starting XCB Gaming Workload...\n");
    srand(time(NULL));

    for (int iter = 0; iter < WORKLOAD_ITERATIONS; ++iter) {
        printf("Workload iteration %d/%d\n", iter + 1, WORKLOAD_ITERATIONS);

        connection = xcb_connect(NULL, &screen_num);
        if (xcb_connection_has_error(connection)) {
            fprintf(stderr, "PGO Workload: Cannot open display\n");
            continue;
        }

        // Check for gaming-relevant extensions
        has_randr = check_extension(connection, "RANDR");
        has_present = check_extension(connection, "Present");
        has_glx = check_extension(connection, "GLX");
        has_xfixes = check_extension(connection, "XFIXES");
        has_xinput = check_extension(connection, "XInputExtension");
        has_xkb = check_extension(connection, "XKEYBOARD");

        printf("Extensions: RANDR=%d, Present=%d, GLX=%d, XFIXES=%d, XInput=%d, XKB=%d\n",
               has_randr, has_present, has_glx, has_xfixes, has_xinput, has_xkb);

        const xcb_setup_t *setup = xcb_get_setup(connection);
        xcb_screen_iterator_t iter_screen = xcb_setup_roots_iterator(setup);
        for (int i = 0; i < screen_num; ++i) {
            xcb_screen_next(&iter_screen);
        }
        screen = iter_screen.data;

        if (!screen) {
            fprintf(stderr, "PGO Workload: Cannot get screen\n");
            xcb_disconnect(connection);
            continue;
        }

        // Create window with gaming-appropriate size and attributes
        window = xcb_generate_id(connection);
        mask = XCB_CW_BACK_PIXEL | XCB_CW_EVENT_MASK;
        values[0] = screen->black_pixel;
        values[1] = XCB_EVENT_MASK_EXPOSURE | XCB_EVENT_MASK_BUTTON_PRESS |
                    XCB_EVENT_MASK_BUTTON_RELEASE | XCB_EVENT_MASK_POINTER_MOTION |
                    XCB_EVENT_MASK_ENTER_WINDOW | XCB_EVENT_MASK_LEAVE_WINDOW |
                    XCB_EVENT_MASK_KEY_PRESS | XCB_EVENT_MASK_KEY_RELEASE |
                    XCB_EVENT_MASK_STRUCTURE_NOTIFY;

        xcb_create_window(connection, XCB_COPY_FROM_PARENT, window, screen->root,
                          0, 0, WINDOW_WIDTH, WINDOW_HEIGHT, 0,
                          XCB_WINDOW_CLASS_INPUT_OUTPUT, screen->root_visual,
                          mask, values);

        // Set window properties like a game would
        char title[] = "XCB Gaming PGO Workload";
        xcb_change_property(connection, XCB_PROP_MODE_REPLACE, window,
                            XCB_ATOM_WM_NAME, XCB_ATOM_STRING, 8,
                            strlen(title), title);

        // Create graphics context for drawing
        gc = xcb_generate_id(connection);
        mask = XCB_GC_FOREGROUND | XCB_GC_GRAPHICS_EXPOSURES;
        values[0] = screen->white_pixel;
        values[1] = 0;
        xcb_create_gc(connection, gc, window, mask, values);

        xcb_map_window(connection, window);
        xcb_flush(connection);

        // Initialize rectangles for rendering
        init_rectangles(rectangles, NUM_RECTANGLES, WINDOW_WIDTH, WINDOW_HEIGHT);

        // Main game loop simulation
        for (int frame = 0; frame < EVENT_LOOP_COUNT && !xcb_connection_has_error(connection); ++frame) {
            frame_start = get_time_ms();

            // Process events like a game would
            while ((event = xcb_poll_for_event(connection))) {
                switch (event->response_type & ~0x80) {
                    case XCB_EXPOSE:
                        // Redraw on expose
                        break;
                    case XCB_BUTTON_PRESS:
                    case XCB_BUTTON_RELEASE:
                    case XCB_MOTION_NOTIFY:
                    case XCB_KEY_PRESS:
                    case XCB_KEY_RELEASE:
                        // Process input events
                        break;
                    case XCB_CONFIGURE_NOTIFY:
                        // Handle window resize
                        break;
                }
                free(event);
            }

            // Clear screen (like a game would do)
            xcb_rectangle_t clear_rect = { 0, 0, WINDOW_WIDTH, WINDOW_HEIGHT };
            xcb_change_gc(connection, gc, XCB_GC_FOREGROUND, &screen->black_pixel);
            xcb_poly_fill_rectangle(connection, window, gc, 1, &clear_rect);

            // Update game state
            update_rectangles(rectangles, NUM_RECTANGLES, WINDOW_WIDTH, WINDOW_HEIGHT);

            // Render frame
            for (int i = 0; i < NUM_RECTANGLES; i++) {
                xcb_change_gc(connection, gc, XCB_GC_FOREGROUND, &rectangles[i].color);
                xcb_rectangle_t rect = {
                    rectangles[i].x, rectangles[i].y,
                    rectangles[i].width, rectangles[i].height
                };
                xcb_poly_fill_rectangle(connection, window, gc, 1, &rect);
            }

            // Every 10 frames, simulate a burst of input events (like in action games)
            if (frame % 10 == 0) {
                simulate_input_events(connection, window, NUM_INPUT_EVENTS);
            }

            // Present the frame (flush all commands to X server)
            xcb_flush(connection);

            // Simulate frame timing like a game would do
            frame_end = get_time_ms();
            uint64_t frame_time = frame_end - frame_start;
            if (frame_time < 16) { // Target ~60 FPS
                usleep((16 - frame_time) * 1000);
            }
        }

        // Cleanup
        xcb_free_gc(connection, gc);
        xcb_destroy_window(connection, window);
        xcb_disconnect(connection);
    }

    printf("XCB Gaming workload finished.\n");
    return 0;
}
EOF

  autoreconf -vfi
}

# Function to compile and run the custom workload against the build directory
run_xcb_workload() {
  local build_dir="$1"
  local pgo_flags="$2"  # Pass PGO flags to ensure workload generates profiles
  local orig_cflags="$3"
  local orig_ldflags="$4"

  cd "$build_dir" || return 1

  local lib_dir="$build_dir/src/.libs"
  local include_dir="$build_dir/src"
  local libtool_la="src/libxcb.la"

  if [[ ! -f "$libtool_la" ]]; then
    echo "Error: Could not find $libtool_la"
    echo "Available .la files:"
    find "$build_dir" -name "*.la" -print
    return 1
  fi

  echo "Using libtool archive: $libtool_la"
  echo "Library directory: $lib_dir"
  echo "Shared libraries in $lib_dir:"
  ls -l "$lib_dir"/libxcb*.so* 2>/dev/null || echo "No libxcb shared libraries found in $lib_dir"

  echo "Compiling XCB gaming workload using libtool..."

  # Use libtool to link against libxcb.la, ensuring PGO instrumentation
  CC=clang CFLAGS="$orig_cflags $pgo_flags" LDFLAGS="$orig_ldflags $pgo_flags" \
  libtool --tag=CC --mode=link clang "$srcdir/xcb_workload.c" \
    -o "$srcdir/xcb_workload_runner" \
    -I"$include_dir" \
    "$libtool_la" \
    -Wl,-rpath,"$lib_dir" || { echo "Failed to compile workload"; return 1; }

  echo "Running gaming workload..."
  "$srcdir/xcb_workload_runner" || echo "Warning: Workload exited with non-zero status"
  rm -f "$srcdir/xcb_workload_runner"
  return 0
}

build() {
  cd "$srcdir/${pkgname%-*}"

  # --- Setup ---
  export CC="clang"
  export CXX="clang++"
  _original_cflags="$CFLAGS"
  _original_cxxflags="$CXXFLAGS"
  _original_ldflags="$LDFLAGS"
  local PGO_DATA_DIR="${srcdir}/pgo_data"
  local CS_PGO_DATA_DIR="${srcdir}/cspgo_data"
  mkdir -p "$PGO_DATA_DIR" "$CS_PGO_DATA_DIR"
  trap 'rm -rf "$PGO_DATA_DIR" "$CS_PGO_DATA_DIR" "$srcdir/xcb_workload.c" "$srcdir/xcb_workload_runner"' EXIT
  local _configure_opts=(
    --prefix=/usr
    --enable-xinput
    --enable-xkb
    --with-doxygen=no
    --disable-devel-docs
    --disable-unit-tests
    --disable-static
  )
  local pgo_failed=false
  # --- End Setup ---

  # --- Stage 1: PGO Instrumentation Build ---
  echo "Stage 1: Building PGO instrumented build..."
  local _pgo_instr_flags="-fprofile-generate=$PGO_DATA_DIR -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"
  export CFLAGS="$_original_cflags $_pgo_instr_flags"
  export CXXFLAGS="$_original_cxxflags $_pgo_instr_flags"
  export LDFLAGS="$_original_ldflags $_pgo_instr_flags"

  ./configure "${_configure_opts[@]}" || { echo "Configure failed (Stage 1)"; return 1; }
  make -j1 || { echo "Make failed (Stage 1)"; return 1; }

  # --- Stage 1: PGO Training Run ---
  echo "Stage 1: Running custom XCB PGO training workload..."
  export LLVM_PROFILE_FILE="${PGO_DATA_DIR}/libxcb-%p-%m.profraw"
  run_xcb_workload "$PWD" "$_pgo_instr_flags" "$_original_cflags" "$_original_ldflags" || { echo "Custom workload failed (Stage 1)"; pgo_failed=true; }
  unset LLVM_PROFILE_FILE

  # --- Stage 1: Merge PGO Profiles ---
  echo "Stage 1: Merging PGO profiles..."
  sleep 1  # Ensure all profile files are written
  if ! find "$PGO_DATA_DIR" -name "*.profraw" | grep -q .; then
    echo "No raw PGO profile data (*.profraw) generated. Aborting PGO."
    pgo_failed=true
  elif ! $pgo_failed; then
    if ! llvm-profdata merge -output="${PGO_DATA_DIR}/default.profdata" "${PGO_DATA_DIR}"/*.profraw; then
      echo "llvm-profdata merge failed (Stage 1). Aborting PGO."
      pgo_failed=true
    elif [ ! -s "${PGO_DATA_DIR}/default.profdata" ]; then
      echo "Merged PGO profile data is empty or missing (Stage 1). Aborting PGO."
      pgo_failed=true
    fi
    rm -f "${PGO_DATA_DIR}"/*.profraw
  fi
  # --- End Stage 1 ---

  # --- Stage 2: CS-PGO Instrumentation Build ---
  if ! $pgo_failed; then
    echo "Stage 2: Building CS-PGO instrumented build..."
    make distclean || echo "Warning: make distclean failed before Stage 2 configure"
    if [ ! -f configure ]; then
      autoreconf -vfi || { echo "autoreconf failed before Stage 2 configure"; pgo_failed=true; }
    fi

    if ! $pgo_failed; then
      local _cspgo_instr_flags="-fprofile-use=${PGO_DATA_DIR}/default.profdata -fcs-profile-generate=$CS_PGO_DATA_DIR -g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"
      export CFLAGS="$_original_cflags $_cspgo_instr_flags"
      export CXXFLAGS="$_original_cxxflags $_cspgo_instr_flags"
      export LDFLAGS="$_original_ldflags $_cspgo_instr_flags"

      ./configure "${_configure_opts[@]}" || { echo "Configure failed (Stage 2)"; pgo_failed=true; }
      if ! $pgo_failed; then
        make -j$(nproc) || { echo "Make failed (Stage 2)"; pgo_failed=true; }
      fi
    fi
  fi
  # --- End Stage 2 ---

  # --- Stage 2: CS-PGO Training Run ---
  if ! $pgo_failed; then
    echo "Stage 2: Running custom XCB CS-PGO training workload..."
    export LLVM_PROFILE_FILE="${CS_PGO_DATA_DIR}/libxcb-cs-%p-%m.profraw"
    run_xcb_workload "$PWD" "$_cspgo_instr_flags" "$_original_cflags" "$_original_ldflags" || { echo "Custom workload failed (Stage 2)"; pgo_failed=true; }
    unset LLVM_PROFILE_FILE

    # --- Stage 2: Merge CS-PGO Profiles ---
    echo "Stage 2: Merging CS-PGO profiles..."
    sleep 1  # Ensure all profile files are written
    if ! find "$CS_PGO_DATA_DIR" -name "*.profraw" | grep -q .; then
      echo "Warning: No raw CS-PGO profile data (*.profraw) generated. Final build will use only Stage 1 PGO data."
      cp "${PGO_DATA_DIR}/default.profdata" "${CS_PGO_DATA_DIR}/cs.profdata" || { echo "Failed to copy fallback profile data."; pgo_failed=true; }
    elif ! $pgo_failed; then
      if ! llvm-profdata merge -output="${CS_PGO_DATA_DIR}/cs.profdata" "${CS_PGO_DATA_DIR}"/*.profraw "${PGO_DATA_DIR}/default.profdata"; then
        echo "llvm-profdata merge failed (Stage 2). Aborting CS-PGO."
        pgo_failed=true
      fi
      rm -f "${CS_PGO_DATA_DIR}"/*.profraw
    fi
    if ! $pgo_failed && [ ! -s "${CS_PGO_DATA_DIR}/cs.profdata" ]; then
      echo "Final merged CS-PGO profile data is empty or missing (Stage 2). Aborting CS-PGO."
      pgo_failed=true
    fi
  fi
  # --- End Stage 2 ---

  # --- Stage 3: Final Optimized Build ---
  echo "Stage 3: Building final optimized build..."
  make distclean || echo "Warning: make distclean failed before Stage 3 configure"
  if [ ! -f configure ]; then
    autoreconf -vfi || { echo "autoreconf failed before Stage 3 configure"; return 1; }
  fi

  CFLAGS="$_original_cflags"
  CXXFLAGS="$_original_cxxflags"
  LDFLAGS="$_original_ldflags"
  if ! $pgo_failed; then
    if [ -s "${CS_PGO_DATA_DIR}/cs.profdata" ]; then
      echo "Applying CS-PGO profile data for final build."
      local _final_opt_flags="-fprofile-use=${CS_PGO_DATA_DIR}/cs.profdata"
    elif [ -s "${PGO_DATA_DIR}/default.profdata" ]; then
      echo "Applying fallback PGO profile data for final build."
      local _final_opt_flags="-fprofile-use=${PGO_DATA_DIR}/default.profdata"
    else
      echo "Warning: No usable profile data found. Building without PGO."
      local _final_opt_flags=""
    fi
    CFLAGS+=" $_final_opt_flags"
    CXXFLAGS+=" $_final_opt_flags"
    LDFLAGS+=" $_final_opt_flags"
  else
    echo "Warning: Building final version without PGO optimization due to previous errors."
  fi
  export CFLAGS CXXFLAGS LDFLAGS

  ./configure "${_configure_opts[@]}" || { echo "Configure failed (Stage 3)"; return 1; }
  make -j$(nproc) || { echo "Make failed (Stage 3)"; return 1; }
  # --- End Stage 3 ---

  if $pgo_failed; then
    echo "Warning: PGO optimization could not be fully applied. Package built without PGO."
  else
    echo "CS-PGO build process completed successfully."
  fi
}

package() {
  cd "$srcdir/${pkgname%-*}"

  make DESTDIR="$pkgdir" install

  install -Dm644 COPYING "$pkgdir/usr/share/licenses/$pkgname/COPYING"

  # Strip binaries if not explicitly disabled
  if [[ ! " ${options[@]} " =~ " !strip " ]]; then
    echo "Stripping binaries..."
    find "$pkgdir" -type f -print0 | while IFS= read -r -d '' file; do
      if file -b --mime-type "$file" | grep -qE 'application/(x-executable|x-sharedlib)'; then
        echo "Stripping: $file"
        strip --strip-unneeded "$file" 2>/dev/null || echo "Warning: strip failed on $file"
      fi
    done
  else
    echo "Skipping stripping due to !strip option."
  fi
}
