From b0110a37636c570d44bcd03c73516e278f7d737c Mon Sep 17 00:00:00 2001
From: Vladislav Nepogodin <nepogodin.vlad@gmail.com>
Date: Thu, 22 Sep 2022 03:31:12 +0400
Subject: [PATCH] [Core] Adds impl use for lat nice

---
 include/config.hpp                  |  2 +
 include/core/priority.hpp           |  6 +++
 src/config.cpp                      |  1 +
 src/platform/linux/priority.cpp     | 63 +++++++++++++++++++++++++++++
 src/platform/linux/process_info.cpp |  3 +-
 src/platform/linux/syscalls.h       | 36 +++++++++++++++++
 src/worker.cpp                      | 10 +++++
 7 files changed, 120 insertions(+), 1 deletion(-)

diff --git a/include/config.hpp b/include/config.hpp
index 2831a35..ca3cda8 100644
--- a/include/config.hpp
+++ b/include/config.hpp
@@ -31,6 +31,8 @@ public:
 
   // static_assert(default_config.);
   bool apply_nice() { return check_rule("apply_nice"); }
+  bool apply_latnice() { return check_rule("apply_latnice"); }
+  bool convert_latnice() { return check_rule("convert_latnice"); }
 
   bool apply_sched() { return check_rule("apply_sched"); }
   bool apply_ionice() { return check_rule("apply_ionice"); }
diff --git a/include/core/priority.hpp b/include/core/priority.hpp
index da94626..5ba13fe 100644
--- a/include/core/priority.hpp
+++ b/include/core/priority.hpp
@@ -12,6 +12,12 @@ namespace priority {
 
 bool set_priority(pid_t pid, int nice_value);
 
+bool set_latency_nice(pid_t pid, int latency_nice_value);
+
+int get_latency_nice(pid_t pid);
+int convert_nice_to_lat(int nice_value);
+int convert_lat_to_nice(int lat_value);
+
 bool set_io_priority(pid_t pid, const std::string_view &io_class, int value);
 
 bool set_sched(pid_t pid, const std::string_view &sched_name, unsigned rt_prio);
diff --git a/src/config.cpp b/src/config.cpp
index 04211d8..6cf848c 100644
--- a/src/config.cpp
+++ b/src/config.cpp
@@ -12,6 +12,7 @@
 const Config::ConfigInit &&Config::default_config = {
     {"apply_nice", "true"},   {"apply_sched", "true"},
     {"apply_ionice", "true"}, {"apply_oom_score_adj", "true"},
+    {"apply_latnice", "true"}, {"convert_latnice", "true"},
     {"cgroup_load", "true"},  {"type_load", "true"},
     {"rule_load", "true"},    {"cgroup_realtime_workaround", "true"},
     {"loglevel", "info"},     {"check_freq", "60"}};
diff --git a/src/platform/linux/priority.cpp b/src/platform/linux/priority.cpp
index 0ca9b63..6bd6a0d 100644
--- a/src/platform/linux/priority.cpp
+++ b/src/platform/linux/priority.cpp
@@ -17,6 +17,35 @@
 
 namespace fs = std::filesystem;
 
+/*
+ * Latency nice is meant to provide scheduler hints about the relative
+ * latency requirements of a task with respect to other tasks.
+ * Thus a task with latency_nice == 19 can be hinted as the task with no
+ * latency requirements, in contrast to the task with latency_nice == -20
+ * which should be given priority in terms of lower latency.
+ */
+#define MAX_LATENCY_NICE   19
+#define MIN_LATENCY_NICE   -20
+
+#define LATENCY_NICE_WIDTH \
+   (MAX_LATENCY_NICE - MIN_LATENCY_NICE + 1)
+
+/*
+ * Default tasks should be treated as a task with latency_nice = 0.
+ */
+#define DEFAULT_LATENCY_NICE   0
+
+#define DEFAULT_LATENCY_NICE   0
+#define DEFAULT_LATENCY_PRIO   (DEFAULT_LATENCY_NICE + LATENCY_NICE_WIDTH/2)
+
+/*
+ * Convert user-nice values [ -20 ... 0 ... 19 ]
+ * to static latency [ 0..39 ],
+ * and back.
+ */
+#define NICE_TO_LATENCY(nice)  ((nice) + DEFAULT_LATENCY_PRIO)
+#define LATENCY_TO_NICE(prio)  ((prio) - DEFAULT_LATENCY_PRIO)
+
 template <std::integral T = std::size_t>
 static constexpr inline T to_int(const std::string_view &str) {
   T result = 0;
@@ -68,6 +97,40 @@ bool set_priority(pid_t pid, int nice_value) {
   return test_errno(errcode, __func__, pid);
 }
 
+bool set_latency_nice(pid_t pid, int latency_nice_value) {
+  int errcode = 0;
+  try {
+    for (const auto &path :
+         fs::directory_iterator(std::format("/proc/{}/task", pid))) {
+      const int tid = static_cast<int>(to_int(path.path().filename().string()));
+      errno = 0;
+      if (tid > 0)
+        set_latnice(tid, latency_nice_value);
+      errcode = errno;
+    }
+  } catch (const fs::filesystem_error &e) {
+    spdlog::debug("{}: filesystem_error: {} (path: {})", __func__, e.what(),
+                  e.path1().string());
+    return 0;
+  } catch (const std::exception &e) {
+    spdlog::critical("{}: unknown exception: {}", __func__, e.what());
+  }
+
+  return test_errno(errcode, __func__, pid);
+}
+
+int get_latency_nice(pid_t pid) {
+    return get_latnice(pid);
+}
+
+int convert_nice_to_lat(int nice_value) {
+    return NICE_TO_LATENCY(nice_value);
+}
+
+int convert_lat_to_nice(int lat_value) {
+    return LATENCY_TO_NICE(lat_value);
+}
+
 bool set_io_priority(pid_t pid, const std::string_view &io_class, int value) {
   int io_class_value = 0;
   if (io_class == "best-effort") {
diff --git a/src/platform/linux/process_info.cpp b/src/platform/linux/process_info.cpp
index a29a48b..a87cf3e 100644
--- a/src/platform/linux/process_info.cpp
+++ b/src/platform/linux/process_info.cpp
@@ -232,11 +232,12 @@ static std::optional<process_info> get_process_info(process_id_t pid) {
                  autogroup_value);
     info["autogroup"] = get_autogroup_from_str(autogroup_value);
 
-    ::sched_attr sched_info = get_sched_attributes(pid);
+    auto sched_info = get_sched_attributes(pid);
 
     info["sched"] = get_sched_policy_name(sched_info.sched_policy);
     info["rtprio"] = uint32_t(sched_info.sched_priority);
     info["nice"] = int(sched_info.sched_nice);
+    info["latency_nice"] = int(sched_info.sched_latency_nice);
 
     const auto io_data = get_io_prio_attributes(pid);
 
diff --git a/src/platform/linux/syscalls.h b/src/platform/linux/syscalls.h
index c4f33c6..4d03a7e 100644
--- a/src/platform/linux/syscalls.h
+++ b/src/platform/linux/syscalls.h
@@ -5,6 +5,7 @@
 #include <sys/syscall.h>
 #include <unistd.h>
 
+#include <cstdio>
 #include <cstdint>
 
 /**
@@ -56,6 +57,11 @@ static int ioprio_get(__priority_which_t _which, id_t _who) {
  * sched_(set|get)attr
  */
 
+// #include <linux/sched/types.h>
+#ifndef SCHED_FLAG_LATENCY_NICE
+#define SCHED_FLAG_LATENCY_NICE         0x80
+#endif
+
 struct [[gnu::packed]] sched_attr {
   uint32_t size;
 
@@ -72,6 +78,13 @@ struct [[gnu::packed]] sched_attr {
   uint64_t sched_runtime;
   uint64_t sched_deadline;
   uint64_t sched_period;
+
+  /* Utilization hints */
+  uint32_t sched_util_min;
+  uint32_t sched_util_max;
+
+  /* latency requirement hints */
+  int32_t sched_latency_nice;
 };
 
 static int sched_setattr(pid_t pid, const struct sched_attr *attr,
@@ -84,4 +97,27 @@ static int sched_getattr(pid_t pid, struct sched_attr *attr, unsigned int size,
   return static_cast<int>(syscall(__NR_sched_getattr, pid, attr, size, flags));
 }
 
+static int get_latnice(pid_t pid) {
+  // pid==0 refers to calling thread
+  struct sched_attr attr = { .size = sizeof(struct sched_attr) };
+  if (sched_getattr(pid, &attr, sizeof(attr), 0) < 0) {
+      std::perror("sched_getattr");
+  }
+  return attr.sched_latency_nice; // defaults to 0
+}
+
+static int set_latnice(pid_t pid, int latency_nice) {
+  // pid==0 refers to calling thread
+  struct sched_attr attr = {
+    .size = sizeof(struct sched_attr),
+    .sched_flags = SCHED_FLAG_LATENCY_NICE,
+    .sched_latency_nice = latency_nice,
+  };
+  const int err = sched_setattr(pid, &attr, 0);
+  if (err < 0) {
+    std::perror("sched_setattr");
+  }
+  return err;
+}
+
 #endif // ANANICY_CPP_SYSCALLS_H
diff --git a/src/worker.cpp b/src/worker.cpp
index 7867cb8..473df76 100644
--- a/src/worker.cpp
+++ b/src/worker.cpp
@@ -50,6 +50,16 @@ void Worker::work(const std::stop_token &stop_token) {
               continue;
           }
 
+          if (config->apply_latnice() && config->convert_latnice() && rule.contains("nice")) {
+            const int latnice_value = priority::convert_lat_to_nice(rule["nice"]);
+
+            spdlog::debug("Setting latency nice of {}({}) to {}", p.name,
+                                p.pid, latnice_value);
+            if (!priority::set_latency_nice(p.pid, latnice_value)) {
+                continue;
+            }
+          }
+
           if (config->apply_sched() && rule.contains("sched")) {
             const auto &rt_prio =
                       rule.contains("rtprio")
-- 
GitLab

