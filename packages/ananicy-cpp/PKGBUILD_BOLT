_pkgname=ananicy-cpp
pkgname=ananicy-cpp-git
pkgver=1.1.1.r14.g99e6481
pkgrel=15
pkgdesc="Ananicy Cpp (PGO+CS-PGO+BOLT optimized) - Full rewrite of Ananicy in C++, featuring lower CPU and RAM usage."
arch=(x86_64 i386 armv7h)
url="https://gitlab.com/ananicy-cpp/ananicy-cpp.git"
license=('GPLv3')
depends=(fmt spdlog nlohmann-json systemd libelf zlib libbpf)
makedepends=(cmake ninja clang git nlohmann-json bpf llvm llvm-bolt)
options=(strip)
optdepends=("ananicy-rules-git: community rules"
            "ananicy-rules: Rules based for ananicy-cpp"
            "jemalloc: Optional, potentially improves llvm-bolt performance during build")
source=("${_pkgname}::git+https://gitlab.com/ananicy-cpp/ananicy-cpp.git"
        "git+https://gitlab.com/vnepogodin/std-format.git"
        "patch.patch"
        "33.patch"
        )
sha512sums=('SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            )
provides=('ananicy-cpp')
conflicts=('ananicy-cpp')

# Error handling function
die() {
    local mesg=$1; shift
    echo -e "\e[1;31m==> ERROR:\e[0m\e[1m ${mesg}\e[0m" "$@" >&2
    exit 1
}

# Patching function
_patch() {
    local patch_file="$1"
    local patch_level="${2:-p1}"
    msg2 "Applying patch: ${patch_file} with level ${patch_level}"
    patch --forward --strip="${patch_level#p}" --input="${srcdir}/${patch_file}" || die "Failed to apply patch: ${patch_file}"
}

pkgver() {
  cd "${srcdir}/${_pkgname}"
  git describe --tags --long | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g'
}

prepare() {
  cd "${srcdir}/${_pkgname}"
  git submodule init
  git -c protocol.file.allow=always submodule update --init --recursive

  _patch patch.patch p1
  _patch 33.patch p1

  # Define directories
  _build_dir_base="${srcdir}/${_pkgname}/build"
  _pgo_dir="${srcdir}/${_pkgname}/pgo-data"
  _cspgo_dir="${srcdir}/${_pkgname}/cspgo-data"
  _bolt_data_dir="${srcdir}/${_pkgname}/bolt-data"
  _bolt_binary_dir="${srcdir}/${_pkgname}/bolt-binary" # Dir for instrumented TEST binaries

  # Clean old directories
  rm -rf "${_build_dir_base}"* "${_pgo_dir}" "${_cspgo_dir}" "${_bolt_data_dir}" "${_bolt_binary_dir}"

  # Create fresh directories
  mkdir -p "${_pgo_dir}" "${_cspgo_dir}" "${_bolt_data_dir}" "${_bolt_binary_dir}"
}

# Function to run tests/benchmarks - Used for PGO/CS-PGO training
# Takes build directory as argument $1
_run_pgo_training_workload() {
    local build_dir="$1"
    local stage_name="${2:-PGO/CS-PGO Training}"

    msg2 "[$stage_name]: Running PGO training workload from: ${build_dir}"
    local core_test="${build_dir}/src/tests/test-core"
    local util_test="${build_dir}/src/tests/test-utility"
    local bench_test="${build_dir}/benchmarks/ananicy_cpp_benchmarks"

    [[ -x "$core_test" ]] || die "[$stage_name]: test-core binary not found or not executable in ${build_dir}"
    [[ -x "$util_test" ]] || die "[$stage_name]: test-utility binary not found or not executable in ${build_dir}"
    [[ -x "$bench_test" ]] || die "[$stage_name]: benchmarks binary not found or not executable in ${build_dir}"

    # LLVM_PROFILE_FILE must be set before calling this
    "$core_test" || die "[$stage_name]: core test failed!"
    "$util_test" || die "[$stage_name]: utility test failed!"
    "$bench_test" || die "[$stage_name]: benchmarks failed!"

    msg2 "[$stage_name]: PGO training workload completed."
    return 0
}

# Function to run the *instrumented* tests/benchmarks for BOLT training
# Takes directory containing instrumented binaries as argument $1
_run_bolt_training_workload() {
    local instrumented_bin_dir="$1"
    local stage_name="${2:-BOLT Training}"

    msg2 "[$stage_name]: Running instrumented tests/benchmarks from: ${instrumented_bin_dir}"
    local core_test_inst="${instrumented_bin_dir}/src/tests/test-core"
    local util_test_inst="${instrumented_bin_dir}/src/tests/test-utility"
    local bench_test_inst="${instrumented_bin_dir}/benchmarks/ananicy_cpp_benchmarks"

    [[ -x "$core_test_inst" ]] || die "[$stage_name]: Instrumented test-core not found in ${instrumented_bin_dir}"
    [[ -x "$util_test_inst" ]] || die "[$stage_name]: Instrumented test-utility not found in ${instrumented_bin_dir}"
    [[ -x "$bench_test_inst" ]] || die "[$stage_name]: Instrumented benchmarks not found in ${instrumented_bin_dir}"

    # BOLT env vars not needed here - the instrumented binary writes automatically
    # based on the path given during instrumentation with --instrumentation-file

    msg2 "[$stage_name]: Executing instrumented test-core..."
    "$core_test_inst" || die "[$stage_name]: Instrumented core test failed!"
    msg2 "[$stage_name]: Executing instrumented test-utility..."
    "$util_test_inst" || die "[$stage_name]: Instrumented utility test failed!"
    msg2 "[$stage_name]: Executing instrumented ananicy_cpp_benchmarks..."
    "$bench_test_inst" || die "[$stage_name]: Instrumented benchmarks failed!"

    # Add a small sleep just in case file writing is slightly delayed
    sleep 1

    msg2 "[$stage_name]: BOLT training workload completed."
    return 0
}


# Function to instrument a binary for BOLT
_instrument_binary() {
    local original_binary="$1"; local instrumentation_file="$2"; local output_file="$3"
    [[ -f "$original_binary" ]] || die "BOLT Instr: Input '$original_binary' not found."
    mkdir -p "$(dirname "${output_file}")"; mkdir -p "$(dirname "${instrumentation_file}")"
    msg2 "BOLT: Instrumenting ${original_binary} -> ${output_file}"
    local bolt_common_args=( --instrument --instrumentation-file-append-pid --lite=false \
        --instrumentation-file="${instrumentation_file}" "${original_binary}" -o "${output_file}" )
    if [[ -f "/usr/lib/libjemalloc.so" ]]; then
      msg2 "BOLT: Using jemalloc for instrumentation."
      env LD_PRELOAD=/usr/lib/libjemalloc.so llvm-bolt "${bolt_common_args[@]}" || die "BOLT Instr failed (jemalloc) for ${original_binary}"
    else
      msg2 "BOLT: No jemalloc, instrumenting without LD_PRELOAD."
      llvm-bolt "${bolt_common_args[@]}" || die "BOLT Instr failed for ${original_binary}"
    fi
    [[ -f "$output_file" ]] || die "BOLT Instr: Output file '${output_file}' not created."
    chmod 755 "${output_file}"
}

# Function to merge BOLT .fdata profiles
_merge_instrumented_data() {
    local instrumentation_folder="$1"; local merged_profile="$2"
    msg2 "BOLT: Merging profiles from ${instrumentation_folder} -> ${merged_profile}"
    mkdir -p "$(dirname "${merged_profile}")"
    local fdata_files=(); while IFS= read -r -d $'\0'; do fdata_files+=("$REPLY"); done < <(find "${instrumentation_folder}" -maxdepth 1 -name '*.fdata*' -print0)
    [[ ${#fdata_files[@]} -gt 0 ]] || die "BOLT Merge: No .fdata files found in ${instrumentation_folder}."
    local temp_profile="${merged_profile}.tmp"
    if [[ -f "/usr/lib/libjemalloc.so" ]]; then
      msg2 "BOLT Merge: Using jemalloc."; env LD_PRELOAD=/usr/lib/libjemalloc.so merge-fdata "${fdata_files[@]}" > "${temp_profile}" || { rm -f "${temp_profile}"; die "BOLT Merge failed (jemalloc)"; }
    else
      msg2 "BOLT Merge: No jemalloc."; merge-fdata "${fdata_files[@]}" > "${temp_profile}" || { rm -f "${temp_profile}"; die "BOLT Merge failed"; }
    fi
    [[ -s "$temp_profile" ]] || die "BOLT Merge: Merged profile '${temp_profile}' is empty."
    mv "${temp_profile}" "${merged_profile}"; sync
    [[ -s "$merged_profile" ]] || die "BOLT Merge: Final merged profile '${merged_profile}' is missing or empty."
    chmod 644 "${merged_profile}"; msg2 "BOLT Merge: Merged profile size: $(wc -c < "${merged_profile}") bytes"
    msg2 "BOLT Merge: Cleaning up original fdata files..."
    find "${instrumentation_folder}" -maxdepth 1 -name '*.fdata*' -not -name "$(basename "${merged_profile}")" -type f -delete
    msg2 "BOLT Merge: Done."
}


build() {
  cd "${srcdir}/${_pkgname}"
  local _pgo_dir="${srcdir}/${_pkgname}/pgo-data"
  local _cspgo_dir="${srcdir}/${_pkgname}/cspgo-data"
  local _bolt_data_dir="${srcdir}/${_pkgname}/bolt-data"
  local _bolt_binary_dir="${srcdir}/${_pkgname}/bolt-binary"
  local _build_dir_base="${srcdir}/${_pkgname}/build"

  local _build_dir_stage1="${_build_dir_base}-pgo-instr"
  local _build_dir_stage2="${_build_dir_base}-cspgo-instr"
  local _build_dir_stage3="${_build_dir_base}-final"

  rm -rf "${_build_dir_stage1}" "${_build_dir_stage2}" "${_build_dir_stage3}"

  local cmake_policy_arg="-DCMAKE_POLICY_VERSION_MINIMUM=3.5"
  local pgo_common_instr_flags="-g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"
  local pgo_common_instr_ldflags="-g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"
  local pgo_failed=false

  # --- Stages 1-3: PGO Build, Train, Merge ---
  msg "Stage 1: Building PGO instrumented build..."
  mkdir -p "${_build_dir_stage1}"
  local _stage1_pgo_flags="-fprofile-generate=${_pgo_dir}"
  local _cmake_build_args_stage1=( "-DCMAKE_C_FLAGS=${_original_cflags} ${_stage1_pgo_flags} ${pgo_common_instr_flags}" "-DCMAKE_CXX_FLAGS=${_original_cxxflags} ${_stage1_pgo_flags} ${pgo_common_instr_flags}" "-DCMAKE_EXE_LINKER_FLAGS=${_original_ldflags} ${_stage1_pgo_flags} ${pgo_common_instr_ldflags}" "-DCMAKE_SHARED_LINKER_FLAGS=${_original_ldflags} ${_stage1_pgo_flags} ${pgo_common_instr_ldflags}" "-DCMAKE_MODULE_LINKER_FLAGS=${_original_ldflags} ${_stage1_pgo_flags} ${pgo_common_instr_ldflags}" )
  CFLAGS="${_original_cflags}" CXXFLAGS="${_original_cxxflags}" LDFLAGS="${_original_ldflags}" \
  ./configure.sh --buildtype=Release --builddir="${_build_dir_stage1}" --prefix=/usr --use_clang --enable_benchmarks --enable_tests -- -- "${cmake_policy_arg}" "${_cmake_build_args_stage1[@]}" || { error "Configure failed (Stage 1)"; return 1; }
  ./build.sh || { error "Build failed (Stage 1)"; return 1; }

  msg "Stage 2: Running PGO training workload..."
  export LLVM_PROFILE_FILE="${_pgo_dir}/default-%m.profraw"
  _run_pgo_training_workload "${_build_dir_stage1}" "PGO Training" || { error "PGO training run failed"; pgo_failed=true; }
  unset LLVM_PROFILE_FILE

  if ! $pgo_failed; then
      msg "Stage 3: Merging standard PGO profiles..."
      find "$_pgo_dir" -name '*.profraw' -print -quit | grep -q . || { error "No raw PGO profile data found in ${_pgo_dir}"; pgo_failed=true; }
      if ! $pgo_failed; then
          llvm-profdata merge -output="${_pgo_dir}/default.profdata" "${_pgo_dir}"/*.profraw || { error "Failed to merge PGO data"; pgo_failed=true; }
          [[ -s "${_pgo_dir}/default.profdata" ]] || { error "Merged PGO profile is empty or missing"; pgo_failed=true; }
          rm -f "${_pgo_dir}"/*.profraw
      fi
  fi

  # --- Stages 4-6: CS-PGO Build, Train, Merge ---
  if ! $pgo_failed; then
      msg "Stage 4: Building CS-PGO instrumented build..."
      mkdir -p "${_build_dir_stage2}"
      local _stage4_pgo_flags="-fprofile-use=${_pgo_dir}/default.profdata -fcs-profile-generate=${_cspgo_dir}"
      local _cmake_build_args_stage4=( "-DCMAKE_C_FLAGS=${_original_cflags} ${_stage4_pgo_flags} ${pgo_common_instr_flags}" "-DCMAKE_CXX_FLAGS=${_original_cxxflags} ${_stage4_pgo_flags} ${pgo_common_instr_flags}" "-DCMAKE_EXE_LINKER_FLAGS=${_original_ldflags} ${_stage4_pgo_flags} ${pgo_common_instr_ldflags}" "-DCMAKE_SHARED_LINKER_FLAGS=${_original_ldflags} ${_stage4_pgo_flags} ${pgo_common_instr_ldflags}" "-DCMAKE_MODULE_LINKER_FLAGS=${_original_ldflags} ${_stage4_pgo_flags} ${pgo_common_instr_ldflags}" )
      CFLAGS="${_original_cflags}" CXXFLAGS="${_original_cxxflags}" LDFLAGS="${_original_ldflags}" \
      ./configure.sh --buildtype=Release --builddir="${_build_dir_stage2}" --prefix=/usr --use_clang --enable_benchmarks --enable_tests -- -- "${cmake_policy_arg}" "${_cmake_build_args_stage4[@]}" || { error "Configure failed (Stage 4)"; pgo_failed=true; }
      if ! $pgo_failed; then ./build.sh || { error "Build failed (Stage 4)"; pgo_failed=true; }; fi
  fi

  if ! $pgo_failed; then
      msg "Stage 5: Running training workload for CS-PGO data generation..."
      export LLVM_PROFILE_FILE="${_cspgo_dir}/cs-%m.profraw"
      _run_pgo_training_workload "${_build_dir_stage2}" "CS-PGO Training" || { error "CS-PGO training run failed"; pgo_failed=true; }
      unset LLVM_PROFILE_FILE
  fi

  if ! $pgo_failed; then
      msg "Stage 6: Merging CS-PGO profiles..."
      if ! find "$_cspgo_dir" -name '*.profraw' -print -quit | grep -q .; then
          warning "No raw CS-PGO profile data found. Using only standard PGO profile for final build."
          cp "${_pgo_dir}/default.profdata" "${_cspgo_dir}/cs.profdata" || { error "Failed to copy fallback profile data"; pgo_failed=true; }
      else
          llvm-profdata merge -output="${_cspgo_dir}/cs.profdata" "${_cspgo_dir}"/*.profraw "${_pgo_dir}/default.profdata" || { error "Failed to merge CS-PGO data"; pgo_failed=true; }
          [[ -s "${_cspgo_dir}/cs.profdata" ]] || { error "Merged CS-PGO profile is empty or missing"; pgo_failed=true; }
          rm -f "${_cspgo_dir}"/*.profraw
      fi
  fi

  # --- Stage 7: Final Optimized Build ---
  msg "Stage 7: Building final optimized build..."
  mkdir -p "${_build_dir_stage3}"
  local final_profdata_path=""
  if ! $pgo_failed && [[ -s "${_cspgo_dir}/cs.profdata" ]]; then final_profdata_path="${_cspgo_dir}/cs.profdata"; msg2 "Using merged CS-PGO profile: ${final_profdata_path}";
  elif ! $pgo_failed && [[ -s "${_pgo_dir}/default.profdata" ]]; then final_profdata_path="${_pgo_dir}/default.profdata"; warning "Using fallback PGO profile: ${final_profdata_path}";
  else warning "No usable PGO profile data. Building without PGO optimization."; fi
  local _cmake_build_args_stage7=()
  if [[ -n "$final_profdata_path" ]]; then
      local _final_opt_flags="-fprofile-use=${final_profdata_path}"
      _cmake_build_args_stage7=( "-DCMAKE_C_FLAGS=${_original_cflags} ${_final_opt_flags}" "-DCMAKE_CXX_FLAGS=${_original_cxxflags} ${_final_opt_flags}" "-DCMAKE_EXE_LINKER_FLAGS=${_original_ldflags} ${_final_opt_flags} -Wl,--emit-relocs" "-DCMAKE_SHARED_LINKER_FLAGS=${_original_ldflags} ${_final_opt_flags} -Wl,--emit-relocs" "-DCMAKE_MODULE_LINKER_FLAGS=${_original_ldflags} ${_final_opt_flags} -Wl,--emit-relocs" )
  else _cmake_build_args_stage7=( "-DCMAKE_C_FLAGS=${_original_cflags}" "-DCMAKE_CXX_FLAGS=${_original_cxxflags}" "-DCMAKE_EXE_LINKER_FLAGS=${_original_ldflags} -Wl,--emit-relocs" "-DCMAKE_SHARED_LINKER_FLAGS=${_original_ldflags} -Wl,--emit-relocs" "-DCMAKE_MODULE_LINKER_FLAGS=${_original_ldflags} -Wl,--emit-relocs" ); fi
  CFLAGS="${_original_cflags}" CXXFLAGS="${_original_cxxflags}" LDFLAGS="${_original_ldflags}" \
  ./configure.sh --buildtype=Release --builddir="${_build_dir_stage3}" --prefix=/usr --use_clang --enable_relocs --enable_benchmarks --enable_tests -- -- "${cmake_policy_arg}" "${_cmake_build_args_stage7[@]}" || { error "Configure failed (Stage 7)"; return 1; }
  ./build.sh || { error "Build failed (Stage 7)"; return 1; }
  local final_binary="${_build_dir_stage3}/ananicy-cpp"
  [[ -x "$final_binary" ]] || die "Main ananicy-cpp binary not found after final build in ${_build_dir_stage3}"

  # --- BOLT Stages (Aligned with pgo_bolt.sh) ---
  # --------------------------------------------------------------------------
  # Stage 8: BOLT Instrumentation (Instrument Tests/Benchmarks)
  # --------------------------------------------------------------------------
  msg "Stage 8: Instrumenting tests/benchmarks for BOLT..."
  _instrument_binary "${_build_dir_stage3}/src/tests/test-core" \
    "${_bolt_data_dir}/test-core.fdata" \
    "${_bolt_binary_dir}/src/tests/test-core" || pgo_failed=true # Treat BOLT failure like PGO failure

  if ! $pgo_failed; then
    _instrument_binary "${_build_dir_stage3}/src/tests/test-utility" \
      "${_bolt_data_dir}/test-utility.fdata" \
      "${_bolt_binary_dir}/src/tests/test-utility" || pgo_failed=true
  fi

  if ! $pgo_failed; then
    _instrument_binary "${_build_dir_stage3}/benchmarks/ananicy_cpp_benchmarks" \
      "${_bolt_data_dir}/ananicy_cpp_benchmarks.fdata" \
      "${_bolt_binary_dir}/benchmarks/ananicy_cpp_benchmarks" || pgo_failed=true
  fi

  # --------------------------------------------------------------------------
  # Stage 9: BOLT Training (Run instrumented tests/benchmarks)
  # --------------------------------------------------------------------------
  if ! $pgo_failed; then
      msg "Stage 9: Running instrumented training workload for BOLT data..."
      # Run the *instrumented* tests/benchmarks from _bolt_binary_dir
      _run_bolt_training_workload "${_bolt_binary_dir}" || { error "BOLT training run failed"; pgo_failed=true; }
  fi

  # --------------------------------------------------------------------------
  # Stage 10: BOLT Merge
  # --------------------------------------------------------------------------
  if ! $pgo_failed; then
      msg "Stage 10: Merging BOLT profiles..."
      local _merged_bolt_profile="${_bolt_data_dir}/bolt-merged.fdata"
      # Merge all *.fdata files found in the bolt data dir
      _merge_instrumented_data "${_bolt_data_dir}" "${_merged_bolt_profile}" || { error "BOLT profile merging failed"; pgo_failed=true; }
  fi

  # --------------------------------------------------------------------------
  # Stage 11: BOLT Optimization (Optimize ananicy-cpp)
  # --------------------------------------------------------------------------
  if ! $pgo_failed; then
      msg "Stage 11: Optimizing main binary with BOLT..."
      local bolt_optimized_binary="${_bolt_binary_dir}/ananicy-cpp.bolt" # Temp output
      mkdir -p "$(dirname "${bolt_optimized_binary}")"
      local bolt_optimize_args=( "${final_binary}" --data "${_merged_bolt_profile}" -o "${bolt_optimized_binary}" --dyno-stats --lite=false --cu-processing-batch-size=64 --eliminate-unreachable --frame-opt=all --icf=all --jump-tables=aggressive --min-branch-clusters --stoke --sctc-mode=always --plt=all --hot-data --hot-text --frame-opt-rm-stores --peepholes=all --infer-stale-profile=1 --x86-strip-redundant-address-size --indirect-call-promotion=all --reg-reassign --use-aggr-reg-reassign --reorder-blocks=ext-tsp --reorder-functions=cdsort --split-all-cold --split-eh --split-functions --split-strategy=cdsplit )

      local bolt_success=true # Track if optimization itself succeeds
      if [[ -f "/usr/lib/libjemalloc.so" ]]; then
        msg2 "BOLT: Using jemalloc for optimization."
        env LD_PRELOAD=/usr/lib/libjemalloc.so llvm-bolt "${bolt_optimize_args[@]}" || { warning "BOLT optimization failed (with jemalloc), using PGO binary."; bolt_success=false; }
      else
        msg2 "BOLT: jemalloc not found, optimizing without LD_PRELOAD."
        llvm-bolt "${bolt_optimize_args[@]}" || { warning "BOLT optimization failed (without jemalloc), using PGO binary."; bolt_success=false; }
      fi

      if $bolt_success && [[ -f "$bolt_optimized_binary" ]]; then
          # Replace the PGO binary with the BOLT one
          mv "${bolt_optimized_binary}" "${final_binary}" || die "Failed to move BOLTed binary to final build directory"
          chmod 755 "${final_binary}"
          msg "BOLT optimization complete. Final binary at ${final_binary}"
      else
           # If optimization failed or output missing, keep the PGO binary from Stage 7
           msg "BOLT optimization step failed or output missing. Using PGO/CS-PGO optimized binary."
           # No need to move, final_binary already holds the PGO/CS-PGO version
      fi
  fi

  # --- Final Status ---
  if $pgo_failed; then
    warning "PGO/BOLT optimization could not be fully applied. Package built with potential fallback."
  else
    msg "CS-PGO+BOLT build process completed successfully."
  fi
}

check() {
  local _build_dir_stage3="${srcdir}/${_pkgname}/build-final"

  [[ -d "${_build_dir_stage3}" ]] || die "Check: Final build directory '${_build_dir_stage3}' not found!"
  [[ -x "${_build_dir_stage3}/ananicy-cpp" ]] || die "Check: Final ananicy-cpp binary not found in ${_build_dir_stage3}"

  msg "Running checks using final (potentially BOLT-optimized) build artifacts..."
  # Run the standard tests from the final build dir. Note: Tests themselves are NOT BOLTed.
  _run_pgo_training_workload "${_build_dir_stage3}" "Check"
}

package() {
  local _build_dir_stage3="${srcdir}/${_pkgname}/build-final"
  if [[ ! -d "${_build_dir_stage3}" ]]; then error "Final build directory '${_build_dir_stage3}' not found for packaging!"; return 1; fi
  cd "${_build_dir_stage3}"
  DESTDIR="${pkgdir}" cmake --install . --component Runtime || die "cmake --install failed"
  install -m755 -d "${pkgdir}/etc/ananicy.d"

  if [[ ! " ${options[@]} " =~ " !strip " ]]; then
      if ! command -v llvm-strip &> /dev/null; then warning "llvm-strip command not found. Skipping stripping."; else
          msg "Stripping binaries..."
          find "$pkgdir" -type f -print0 | while IFS= read -r -d '' file; do
              if file -b "$file" | grep -qE 'ELF.*(executable|shared object)'; then
                  if llvm-strip --strip-unneeded "$file" 2>/dev/null; then msg2 "Stripped (unneeded): $file";
                  elif llvm-strip --strip-all "$file" 2>/dev/null; then msg2 "Stripped (all): $file";
                  else warning "Failed to strip $file"; fi
              fi; done; fi; else msg "Skipping stripping due to !strip option."; fi
}
