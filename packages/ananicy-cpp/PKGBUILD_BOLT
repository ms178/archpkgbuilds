_pkgname=ananicy-cpp
pkgname=ananicy-cpp-git
pkgver=1.1.1.r9.g7306d45
pkgrel=1
pkgdesc="Ananicy Cpp is a full rewrite of Ananicy in C++, featuring lower CPU and RAM usage."
arch=(x86_64 i386 armv7h)
url="https://gitlab.com/ananicy-cpp/ananicy-cpp.git"
license=('GPLv3')
depends=(fmt spdlog nlohmann-json systemd libelf zlib libbpf)
makedepends=(cmake ninja clang git nlohmann-json bpf)
options=(!strip)
optdepends=("ananicy-rules-git: community rules"
            "ananicy-rules: Rules based for ananicy-cpp")
source=("${_pkgname}::git+https://gitlab.com/ananicy-cpp/ananicy-cpp.git"
        "git+https://gitlab.com/vnepogodin/std-format.git"
        patch.patch)
sha512sums=('SKIP'
            'SKIP'
            'SKIP')
provides=('ananicy-cpp')
conflicts=('ananicy-cpp')

# Error handling function (now defined in PKGBUILD)
die() {
    local mesg=$1; shift
    echo -e "\e[1;31m==> ERROR:\e[0m\e[1m ${mesg}\e[0m" "$@" >&2
    exit 1
}

_patch() {
    echo -e "\E[1;33m Apply patch: ${1}\E[0m"
    patch --forward --strip=1 --input="${srcdir:?}/${1}"
}

pkgver() {
  cd "${srcdir}/${_pkgname}"
  git describe --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g'
}

prepare() {
  cd "${srcdir}/${_pkgname}"
  git submodule init
  git config submodule."external/std-format".url "${srcdir}/std-format"
  git -c protocol.file.allow=always submodule update
  _patch patch.patch

  # Prepare directories with proper permissions
  _build_dir="${srcdir}/${_pkgname}/build"
  _pgo_dir="${srcdir}/${_pkgname}/pgo-data"
  _bolt_data_dir="${srcdir}/${_pkgname}/bolt-data"
  _bolt_binary_dir="${srcdir}/${_pkgname}/bolt-binary"

  # Remove old directories if they exist
  rm -rf "${_build_dir}" "${_pgo_dir}" "${_bolt_data_dir}" "${_bolt_binary_dir}"

  # Create fresh directories with proper permissions
  mkdir -p "${_build_dir}"
  mkdir -p "${_pgo_dir}"
  mkdir -p "${_bolt_data_dir}"
  mkdir -p "${_bolt_binary_dir}"

  # Ensure proper permissions
  chmod 755 "${_build_dir}" "${_pgo_dir}" "${_bolt_data_dir}" "${_bolt_binary_dir}"
}

_run_tests() {
    local build_dir="$1"

    echo "Running tests from: ${build_dir}"

    # Verify binary existence before running
    [ -x "${build_dir}/src/tests/test-core" ] || die "test-core binary not found or not executable"
    [ -x "${build_dir}/src/tests/test-utility" ] || die "test-utility binary not found or not executable"
    [ -x "${build_dir}/benchmarks/ananicy_cpp_benchmarks" ] || die "benchmarks binary not found or not executable"

    # Run tests
    "${build_dir}/src/tests/test-core" || die "core test failed!"
    "${build_dir}/src/tests/test-utility" || die "utility test failed!"
    "${build_dir}/benchmarks/ananicy_cpp_benchmarks" || die "failed on ananicy-cpp benchmarks!"
}

_instrument_binary() {
    local original_binary="$1"
    local instrumentation_file="$2"
    local output_file="$3"

    # Create full directory structure in bolt-binary
    mkdir -p "$(dirname "${output_file}")"

    echo "==== Instrumenting ${original_binary} ===="
    LD_PRELOAD=/usr/lib/libjemalloc.so llvm-bolt         \
        --instrument                                     \
        --instrumentation-file-append-pid                \
        --lite=false                                    \
        --instrumentation-file="${instrumentation_file}" \
        "${original_binary}"                             \
        -o "${output_file}" || die "Could not create instrumented binary"

    # Check if the output file was created
    if [ ! -f "${output_file}" ]; then
        die "Output file ${output_file} was not created"
    fi

    # Backup original file
    cp "${original_binary}" "${output_file}.org"
    cp "${original_binary}" "${original_binary}.org"

    # Ensure proper permissions
    chmod 755 "${output_file}"

    echo "==== Done instrumenting ${original_binary} ===="
}

_optimize_binary() {
    local original_binary="$1"
    local merged_profile="$2"
    local output_file="$3"

    echo "==== Optimizing ${original_binary} ===="
    LD_PRELOAD=/usr/lib/libjemalloc.so llvm-bolt  "${original_binary}" \
    --data "${merged_profile}" \
    -o "${output_file}" \
    --dyno-stats \
    --lite=false \
    --cu-processing-batch-size=64 \
    --eliminate-unreachable \
    --frame-opt=all \
    --icf=1 \
    --jump-tables=aggressive \
    --min-branch-clusters \
    --stoke \
    --sctc-mode=always \
    --plt=all \
    --hot-data \
    --hot-text \
    --frame-opt-rm-stores \
    --peepholes=all \
    --infer-stale-profile=1 \
    --x86-strip-redundant-address-size \
    --indirect-call-promotion=all \
    --reg-reassign \
    --use-aggr-reg-reassign \
    --reorder-blocks=ext-tsp \
    --reorder-functions=cdsort \
    --split-all-cold \
    --split-eh \
    --split-functions \
    --split-strategy=cdsplit \ || die "Could not optimize binary"

    echo "==== Done optimizing ${original_binary} ===="
}

_merge_instrumented_data() {
    local instrumentation_folder="$1"
    local merged_profile="$2"

    echo "==== Merging generated profiles ===="
    # Create directory for merged profile if it doesn't exist
    mkdir -p "$(dirname "${merged_profile}")"

    # Merge the profiles and redirect output to the specified file
    LD_PRELOAD=/usr/lib/libjemalloc.so merge-fdata "${instrumentation_folder}"/*.fdata > "${merged_profile}" || die "Could not merge fdata"

    # Verify the merged profile was created
    if [ ! -f "${merged_profile}" ]; then
        die "Failed to create merged profile at ${merged_profile}"
    fi

    # Remove merged instrumented data
    rm -rf "${instrumentation_folder}"/*.fdata

    echo "==== Done merging profiles ===="
}

build() {
  cd "${srcdir}/${_pkgname}"
  _build_dir="${srcdir}/${_pkgname}/build"
  _pgo_dir="${srcdir}/${_pkgname}/pgo-data"
  _bolt_data_dir="${srcdir}/${_pkgname}/bolt-data"
  _bolt_binary_dir="${srcdir}/${_pkgname}/bolt-binary"

  # Clean previous build
  rm -rf "${_build_dir}"

  # 1. First stage: PGO instrumentation
  CFLAGS="${CFLAGS} -fprofile-generate=${_pgo_dir} -g3 -mllvm -vp-counters-per-site=10 -fno-omit-frame-pointer" \
  CXXFLAGS="${CXXFLAGS} -fprofile-generate=${_pgo_dir} -g3 -mllvm -vp-counters-per-site=10 -fno-omit-frame-pointer" \
  LDFLAGS="${LDFLAGS} -fprofile-generate=${_pgo_dir} -g3 -mllvm -vp-counters-per-site=10 -fno-omit-frame-pointer" \
  ./configure.sh --buildtype=Release --builddir="${_build_dir}" --prefix=/usr --use_clang --pgofolder="${_pgo_dir}" --generate_pgo --enable_benchmarks --enable_tests
  ./build.sh

  # 2. Run tests to generate PGO data
  _run_tests "${_build_dir}"

  # 3. Merge PGO data
  llvm-profdata merge -output="${_pgo_dir}/default.profdata" "${_pgo_dir}"/*.profraw
  rm -f "${_pgo_dir}"/*.profraw

  # Clean for second stage
  rm -rf "${_build_dir}"

  # 4. Second stage: Build with PGO optimization
  CFLAGS="${CFLAGS//-fprofile-generate=*/} -fprofile-use=${_pgo_dir}/default.profdata" \
  CXXFLAGS="${CXXFLAGS//-fprofile-generate=*/} -fprofile-use=${_pgo_dir}/default.profdata" \
  LDFLAGS="${LDFLAGS//-fprofile-generate=*/} -fprofile-use=${_pgo_dir}/default.profdata -Wl,--emit-relocs" \
  ./configure.sh --buildtype=Release --builddir="${_build_dir}" --prefix=/usr --use_clang --pgofolder="${_pgo_dir}" --use_pgo --enable_relocs --enable_benchmarks --enable_tests
  ./build.sh

  # 5. Instrument binaries for BOLT - maintain directory structure
  _instrument_binary "${_build_dir}/src/tests/test-core" \
    "${_bolt_data_dir}/test-core.fdata" \
    "${_bolt_binary_dir}/src/tests/test-core"

  _instrument_binary "${_build_dir}/src/tests/test-utility" \
    "${_bolt_data_dir}/test-utility.fdata" \
    "${_bolt_binary_dir}/src/tests/test-utility"

  _instrument_binary "${_build_dir}/benchmarks/ananicy_cpp_benchmarks" \
    "${_bolt_data_dir}/ananicy_cpp_benchmarks.fdata" \
    "${_bolt_binary_dir}/benchmarks/ananicy_cpp_benchmarks"

  # 6. Run instrumented tests and benchmarks
  _run_tests "${_bolt_binary_dir}"

  # 7. Merge instrumented data
  _merged_profile="${_bolt_data_dir}/bolt-merged.fdata"
  _merge_instrumented_data "${_bolt_data_dir}" "${_merged_profile}"

  # Verify merged profile exists before proceeding
  if [ ! -f "${_merged_profile}" ]; then
      die "Merged profile not found at ${_merged_profile}"
  fi

  # 8. Optimize with BOLT using your custom options
  LD_PRELOAD=/usr/lib/libjemalloc.so llvm-bolt "${_build_dir}/ananicy-cpp" \
    --data "${_merged_profile}" \

  # 9. Move the final BOLTed binary to the build directory for packaging
  mv "${_bolt_binary_dir}/ananicy-cpp.bolt" "${_build_dir}/ananicy-cpp"
}

check() {
  # Run tests using the PGO-optimized build (before BOLT)
  _run_tests "${srcdir}/${_pkgname}/build"
}

package() {
  cd "${srcdir}/${_pkgname}/build"
  DESTDIR="${pkgdir}" cmake --install . --component Runtime

  install -m755 -d "${pkgdir}/etc/ananicy.d"

  # Use llvm-strip only on recognized file formats
  find "$pkgdir" -type f \( -name '*.so*' -o -name '*.a' -o -executable \) -print0 | while IFS= read -r -d '' file; do
    if llvm-strip --strip-unneeded "$file" 2>/dev/null || llvm-strip --strip-all "$file" 2>/dev/null; then
      echo "Stripped: $file"
    else
      echo "Skipping: $file (not a valid object file)" >&2
    fi
  done
}
