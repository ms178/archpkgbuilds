pkgname=coreutils-git
pkgver=9.6.r2.g915004f40
pkgrel=1
pkgdesc="Basic file, shell and text manipulation utilities of the GNU operating system"
arch=('i686' 'x86_64')
url="https://www.gnu.org/software/coreutils/coreutils.html"
license=('GPL3')
depends=('glibc' 'gmp' 'libcap' 'openssl')
makedepends=('git' 'gettext' 'gperf' 'gzip' 'perl' 'rsync' 'tar' 'texinfo' 'llvm' 'llvm-bolt')
options=(!strip)
provides=('coreutils')
conflicts=('coreutils')
source=("git+https://git.savannah.gnu.org/git/coreutils.git")
sha256sums=('SKIP')

pkgver() {
  cd "coreutils"
  git describe --long --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g'
}

cleanup_profiles() {
  rm -f "$srcdir"/*.profraw
  rm -rf "$srcdir/bolt_profile"
  rm -rf "$srcdir/bolt_opt"
}

prepare() {
  cd "coreutils"
  cleanup_profiles
  mkdir -p "$srcdir/bolt_opt"
  mkdir -p "$srcdir/bolt_profile"
}

build() {
  export CC=gcc
  export CXX=g++

  local _pkgdir="$srcdir/coreutils"
  cd "$_pkgdir"

  local CFLAGS_ORIG="$CFLAGS"
  local CXXFLAGS_ORIG="$CXXFLAGS"
  local LDFLAGS_ORIG="$LDFLAGS"

  # Stage 1: Instrumented build for PGO
  CFLAGS+=" -g3 -fno-omit-frame-pointer -fprofile-generate"
  CXXFLAGS+=" -g3 -fno-omit-frame-pointer -fprofile-generate"
  LDFLAGS+=" -g3 -fno-omit-frame-pointer -fprofile-generate -lgcov"

  ./bootstrap
  ./configure --disable-gcc-warnings --prefix="/usr" --libexecdir="/usr/lib" --with-openssl --enable-no-install-program="groups,hostname,kill,uptime"
  make
  make check || true

  # Stage 2: Build with PGO data
  CFLAGS="$CFLAGS_ORIG -fprofile-use -fprofile-correction -fno-reorder-blocks-and-partition"
  CXXFLAGS="$CXXFLAGS_ORIG -fprofile-use -fprofile-correction -fno-reorder-blocks-and-partition"
  LDFLAGS="$LDFLAGS_ORIG -fprofile-use -fprofile-correction -lgcov -Wl,--emit-relocs"

  ./bootstrap
  ./configure --disable-gcc-warnings --prefix="/usr" --libexecdir="/usr/lib" --with-openssl --enable-no-install-program="groups,hostname,kill,uptime"
  make

  # Stage 3: BOLT Instrumentation
  echo "Starting BOLT instrumentation..."
  mkdir -p "$srcdir/bolt_instrumented"
  local binary_dir="src"  # Directory where binaries are built

  for binary in who users pinky df b2sum base64 base32 basenc cksum comm csplit cut date du expand fmt fold join md5sum nl od paste pr printf ptx sha1sum sha224sum sha256sum sha384sum sha512sum shred shuf sort stat sum tee unexpand wc; do
    if [[ -f "$binary_dir/$binary" ]]; then
      llvm-bolt "$binary_dir/$binary" -o "$srcdir/bolt_instrumented/$binary" --instrument --instrumentation-file="$srcdir/bolt_profile/$(basename $binary).fdata" || {
        echo "Failed to instrument $binary"
        continue
      }
    else
      echo "Binary $binary not found in $binary_dir"
    fi
  done

  # Replace original binaries with instrumented ones temporarily
  echo "Replacing original binaries with instrumented binaries for profiling..."
  for binary in "$srcdir/bolt_instrumented"/*; do
    install -Dm755 "$binary" "$binary_dir/$(basename "$binary")"
  done

  # Run Instrumented Binaries via `make check` to Generate Profiling Data
  echo "Running instrumented binaries via make check to generate profiling data..."
  make check || true

  # Restore binaries to their original state by re-compiling
  echo "Restoring original binaries by rebuilding the project..."
  make clean
  ./bootstrap
  ./configure --disable-gcc-warnings --prefix="/usr" --libexecdir="/usr/lib" --with-openssl --enable-no-install-program="groups,hostname,kill,uptime"
  make

  # Stage 4: Optimize Binaries with Profiling Data
  echo "Optimizing binaries with BOLT profiling data..."
  mkdir -p "$srcdir/bolt_opt"
  for binary in who users pinky df b2sum base64 base32 basenc cksum comm csplit cut date du expand fmt fold join md5sum nl od paste pr printf ptx sha1sum sha224sum sha256sum sha384sum sha512sum shred shuf sort stat sum tee unexpand wc; do
    if [[ -f "$binary_dir/$binary" && -f "$srcdir/bolt_profile/$binary.fdata" ]]; then
      llvm-bolt "$binary_dir/$binary" \
        -o "$srcdir/bolt_opt/$binary" \
        --data="$srcdir/bolt_profile/$binary.fdata" \
        --dyno-stats --cu-processing-batch-size=64 --eliminate-unreachable --frame-opt=all --icf=all --jump-tables=aggressive --min-branch-clusters --stoke --sctc-mode=always --plt=all --hot-data --hot-text --frame-opt-rm-stores --peepholes=all --infer-stale-profile=1 --x86-strip-redundant-address-size --indirect-call-promotion=all --reg-reassign --use-aggr-reg-reassign --reorder-blocks=ext-tsp --reorder-functions=cdsort --split-all-cold --split-eh --split-functions --split-strategy=cdsplit
    else
      echo "No profiling data for $binary, skipping optimization."
    fi
  done
}

package() {
  cd "coreutils"

  # Install optimized binaries
  echo "Installing optimized binaries..."
  for binary in who users pinky df b2sum base64 base32 basenc cksum comm csplit cut date du expand fmt fold join md5sum nl od paste pr printf ptx sha1sum sha224sum sha256sum sha384sum sha512sum shred shuf sort stat sum tee unexpand wc; do
    if [[ -f "$srcdir/bolt_opt/$binary" ]]; then
      install -Dm755 "$srcdir/bolt_opt/$binary" "$pkgdir/usr/bin/$binary"
    elif [[ -f "src/$binary" ]]; then
      install -Dm755 "src/$binary" "$pkgdir/usr/bin/$binary"
    fi
  done

  # Install the rest normally
  make DESTDIR="$pkgdir" install

  # Use llvm-strip only on recognized file formats
  find "$pkgdir" -type f \( -name '*.so*' -o -name '*.a' -o -executable \) -print0 | while IFS= read -r -d '' file; do
    if llvm-strip --strip-unneeded "$file" 2>/dev/null || llvm-strip --strip-all "$file" 2>/dev/null; then
      echo "Stripped: $file"
    else
      echo "Skipping: $file (not a valid object file)" >&2
    fi
  done
}
