From 1f383c0c1eafe265daa12b456a00c816e4de7950 Mon Sep 17 00:00:00 2001
From: SeRal79 <seral79@gmail.com>
Date: Tue, 10 May 2022 14:25:41 -0500
Subject: [PATCH 1/3] refactor(lib): prefer Q_ENUM over Q_ENUMS

- Q_ENUM replace Q_ENUMS from QT 5.5
- Registered enumerations are automatically registered also to the Qt meta
type system, making them known to QMetaType without the need to use
Q_DECLARE_METATYPE(). https://doc.qt.io/qt-5/qobject.html#Q_ENUM
---
 lib/output.h | 7 ++-----
 1 file changed, 2 insertions(+), 5 deletions(-)

diff --git a/lib/output.h b/lib/output.h
index bf87da6..f2d0095 100644
--- a/lib/output.h
+++ b/lib/output.h
@@ -40,9 +40,6 @@ class DISMAN_EXPORT Output : public QObject
     Q_OBJECT
 
 public:
-    Q_ENUMS(Rotation)
-    Q_ENUMS(Type)
-
     enum Type {
         Unknown,
         VGA,
@@ -60,6 +57,7 @@ public:
         TVC4,
         DisplayPort,
     };
+    Q_ENUM(Type)
 
     enum Rotation {
         None = 1,
@@ -67,6 +65,7 @@ public:
         Inverted = 4,
         Right = 8,
     };
+    Q_ENUM(Rotation)
 
     enum class Retention {
         Undefined = -1,
@@ -337,7 +336,5 @@ private:
 DISMAN_EXPORT QDebug operator<<(QDebug dbg, const Disman::OutputPtr& output);
 
 Q_DECLARE_METATYPE(Disman::OutputMap)
-Q_DECLARE_METATYPE(Disman::Output::Rotation)
-Q_DECLARE_METATYPE(Disman::Output::Type)
 
 #endif
-- 
GitLab


From ed612e7d690b04154c7ded1af82f5abb8e3872be Mon Sep 17 00:00:00 2001
From: SeRal79 <seral79@gmail.com>
Date: Tue, 10 May 2022 18:32:39 -0500
Subject: [PATCH 2/3] fix(lib): reverse rotation (left/right) on x11

Display(kcm) with wayland turns in the right direction, but with
x11 (clockwise, counterclockwise) it turns the other way.
With dismanctl output.LVDS.rotation.(left right) on x11 the
same thing happens.
---
 lib/configserializer.cpp | 27 +++++++++++++++++++++++++--
 1 file changed, 25 insertions(+), 2 deletions(-)

diff --git a/lib/configserializer.cpp b/lib/configserializer.cpp
index dc543c3..6e0beca 100644
--- a/lib/configserializer.cpp
+++ b/lib/configserializer.cpp
@@ -333,6 +333,7 @@ OutputPtr ConfigSerializer::deserialize_output(const QDBusArgument& arg)
 {
     OutputPtr output(new Output);
     Output::GlobalData global_data;
+    auto const session_type = qgetenv("XDG_SESSION_TYPE");
 
     arg.beginMap();
     while (!arg.atEnd()) {
@@ -355,7 +356,18 @@ OutputPtr ConfigSerializer::deserialize_output(const QDBusArgument& arg)
         } else if (key == QLatin1String("scale")) {
             output->set_scale(value.toDouble());
         } else if (key == QLatin1String("rotation")) {
-            output->set_rotation(static_cast<Output::Rotation>(value.toInt()));
+            if (session_type == "x11") {
+                if (static_cast<Output::Rotation>(value.toInt()) == Output::Rotation::Left) {
+                    output->set_rotation(Output::Rotation::Right);
+                } else if (static_cast<Output::Rotation>(value.toInt())
+                           == Output::Rotation::Right) {
+                    output->set_rotation(Output::Rotation::Left);
+                } else {
+                    output->set_rotation(static_cast<Output::Rotation>(value.toInt()));
+                }
+            } else {
+                output->set_rotation(static_cast<Output::Rotation>(value.toInt()));
+            }
         } else if (key == QLatin1String("resolution")) {
             output->set_resolution(deserialize_size(value.value<QDBusArgument>()));
         } else if (key == QLatin1String("refresh")) {
@@ -377,7 +389,18 @@ OutputPtr ConfigSerializer::deserialize_output(const QDBusArgument& arg)
         } else if (key == QLatin1String("global.refresh")) {
             global_data.refresh = value.toInt();
         } else if (key == QLatin1String("global.rotation")) {
-            global_data.rotation = static_cast<Output::Rotation>(value.toInt());
+            if (session_type == "x11") {
+                if (static_cast<Output::Rotation>(value.toInt()) == Output::Rotation::Left) {
+                    global_data.rotation = Output::Rotation::Right;
+                } else if (static_cast<Output::Rotation>(value.toInt())
+                           == Output::Rotation::Right) {
+                    global_data.rotation = Output::Rotation::Left;
+                } else {
+                    global_data.rotation = static_cast<Output::Rotation>(value.toInt());
+                }
+            } else {
+                global_data.rotation = static_cast<Output::Rotation>(value.toInt());
+            }
         } else if (key == QLatin1String("global.scale")) {
             global_data.scale = value.toDouble();
         } else if (key == QLatin1String("global.auto_resolution")) {
-- 
GitLab


From 3a1a0d70260ee5cb96957b084a9e3cba921aaacd Mon Sep 17 00:00:00 2001
From: SeRal79 <seral79@gmail.com>
Date: Wed, 1 Jun 2022 15:51:56 -0500
Subject: [PATCH 3/3] refactor(lib): use static_cast to convert enum to int

---
 lib/configserializer.cpp | 45 +++++++++++++++++-----------------------
 1 file changed, 19 insertions(+), 26 deletions(-)

diff --git a/lib/configserializer.cpp b/lib/configserializer.cpp
index 6e0beca..f6d8e2c 100644
--- a/lib/configserializer.cpp
+++ b/lib/configserializer.cpp
@@ -134,7 +134,7 @@ QJsonObject ConfigSerializer::serialize_output(const OutputPtr& output)
         obj[QLatin1String("global.resolution")] = serialize_size(data.resolution);
         obj[QLatin1String("global.refresh")] = data.refresh;
 
-        obj[QLatin1String("global.rotation")] = data.rotation;
+        obj[QLatin1String("global.rotation")] = static_cast<int>(data.rotation);
         obj[QLatin1String("global.scale")] = data.scale;
 
         obj[QLatin1String("global.auto_resolution")] = data.auto_resolution;
@@ -333,7 +333,20 @@ OutputPtr ConfigSerializer::deserialize_output(const QDBusArgument& arg)
 {
     OutputPtr output(new Output);
     Output::GlobalData global_data;
-    auto const session_type = qgetenv("XDG_SESSION_TYPE");
+    auto reverse_left_right = [](const auto& x, const auto& value) {
+        if (x) {
+            switch (value) {
+            case 2:
+                return Output::Rotation::Right;
+            case 8:
+                return Output::Rotation::Left;
+            default:
+                return static_cast<Output::Rotation>(value);
+            }
+        } else {
+            return static_cast<Output::Rotation>(value);
+        }
+    };
 
     arg.beginMap();
     while (!arg.atEnd()) {
@@ -356,18 +369,8 @@ OutputPtr ConfigSerializer::deserialize_output(const QDBusArgument& arg)
         } else if (key == QLatin1String("scale")) {
             output->set_scale(value.toDouble());
         } else if (key == QLatin1String("rotation")) {
-            if (session_type == "x11") {
-                if (static_cast<Output::Rotation>(value.toInt()) == Output::Rotation::Left) {
-                    output->set_rotation(Output::Rotation::Right);
-                } else if (static_cast<Output::Rotation>(value.toInt())
-                           == Output::Rotation::Right) {
-                    output->set_rotation(Output::Rotation::Left);
-                } else {
-                    output->set_rotation(static_cast<Output::Rotation>(value.toInt()));
-                }
-            } else {
-                output->set_rotation(static_cast<Output::Rotation>(value.toInt()));
-            }
+            output->set_rotation(
+                reverse_left_right(qgetenv("XDG_SESSION_TYPE") == "x11", value.toInt()));
         } else if (key == QLatin1String("resolution")) {
             output->set_resolution(deserialize_size(value.value<QDBusArgument>()));
         } else if (key == QLatin1String("refresh")) {
@@ -389,18 +392,8 @@ OutputPtr ConfigSerializer::deserialize_output(const QDBusArgument& arg)
         } else if (key == QLatin1String("global.refresh")) {
             global_data.refresh = value.toInt();
         } else if (key == QLatin1String("global.rotation")) {
-            if (session_type == "x11") {
-                if (static_cast<Output::Rotation>(value.toInt()) == Output::Rotation::Left) {
-                    global_data.rotation = Output::Rotation::Right;
-                } else if (static_cast<Output::Rotation>(value.toInt())
-                           == Output::Rotation::Right) {
-                    global_data.rotation = Output::Rotation::Left;
-                } else {
-                    global_data.rotation = static_cast<Output::Rotation>(value.toInt());
-                }
-            } else {
-                global_data.rotation = static_cast<Output::Rotation>(value.toInt());
-            }
+            global_data.rotation
+                = reverse_left_right(qgetenv("XDG_SESSION_TYPE") == "x11", value.toInt());
         } else if (key == QLatin1String("global.scale")) {
             global_data.scale = value.toDouble();
         } else if (key == QLatin1String("global.auto_resolution")) {
-- 
GitLab

