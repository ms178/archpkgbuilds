From c49af405147a5259912a29a6da0d3bed74658b30 Mon Sep 17 00:00:00 2001
From: Tom Englund <tomenglund26@gmail.com>
Date: Wed, 27 Jul 2022 09:39:23 +0200
Subject: [PATCH 01/18] fix: add missing reference and const

add missing references and const, found by clang tidy/clazy.
---
 autotests/integration/effects/fade_test.cpp             | 2 +-
 autotests/integration/effects/scripted_effects_test.cpp | 3 ++-
 autotests/integration/effects/slidingpopups_test.cpp    | 2 +-
 autotests/integration/effects/translucency_test.cpp     | 2 +-
 autotests/integration/generic_scene_opengl_test.cpp     | 2 +-
 autotests/integration/quick_tiling_test.cpp             | 2 +-
 autotests/integration/scene_opengl_shadow_test.cpp      | 2 +-
 autotests/integration/scene_qpainter_shadow_test.cpp    | 2 +-
 autotests/integration/scene_qpainter_test.cpp           | 2 +-
 autotests/integration/scripting/screenedge_test.cpp     | 2 +-
 render/effect_loader.cpp                                | 2 +-
 win/tabbox/tabbox.cpp                                   | 2 +-
 12 files changed, 13 insertions(+), 12 deletions(-)

diff --git a/autotests/integration/effects/fade_test.cpp b/autotests/integration/effects/fade_test.cpp
index 18343afd6..6cefad2cf 100644
--- a/autotests/integration/effects/fade_test.cpp
+++ b/autotests/integration/effects/fade_test.cpp
@@ -63,7 +63,7 @@ void FadeTest::initTestCase()
     auto config = KSharedConfig::openConfig(QString(), KConfig::SimpleConfig);
     KConfigGroup plugins(config, QStringLiteral("Plugins"));
     const auto builtinNames = render::effect_loader(*Test::app()->base.space).listOfKnownEffects();
-    for (QString name : builtinNames) {
+    for (const QString& name : builtinNames) {
         plugins.writeEntry(name + QStringLiteral("Enabled"), false);
     }
 
diff --git a/autotests/integration/effects/scripted_effects_test.cpp b/autotests/integration/effects/scripted_effects_test.cpp
index 3599a8fef..ab13f3358 100644
--- a/autotests/integration/effects/scripted_effects_test.cpp
+++ b/autotests/integration/effects/scripted_effects_test.cpp
@@ -145,8 +145,9 @@ void ScriptedEffectsTest::initTestCase()
     // disable all effects - we don't want to have it interact with the rendering
     auto config = KSharedConfig::openConfig(QString(), KConfig::SimpleConfig);
     KConfigGroup plugins(config, QStringLiteral("Plugins"));
+
     const auto builtinNames = render::effect_loader(*Test::app()->base.space).listOfKnownEffects();
-    for (QString name : builtinNames) {
+    for (const QString& name : builtinNames) {
         plugins.writeEntry(name + QStringLiteral("Enabled"), false);
     }
 
diff --git a/autotests/integration/effects/slidingpopups_test.cpp b/autotests/integration/effects/slidingpopups_test.cpp
index a04bb75cc..25a8d487f 100644
--- a/autotests/integration/effects/slidingpopups_test.cpp
+++ b/autotests/integration/effects/slidingpopups_test.cpp
@@ -69,7 +69,7 @@ void SlidingPopupsTest::initTestCase()
     auto config = KSharedConfig::openConfig(QString(), KConfig::SimpleConfig);
     KConfigGroup plugins(config, QStringLiteral("Plugins"));
     const auto builtinNames = render::effect_loader(*Test::app()->base.space).listOfKnownEffects();
-    for (QString name : builtinNames) {
+    for (const QString& name : builtinNames) {
         plugins.writeEntry(name + QStringLiteral("Enabled"), false);
     }
     KConfigGroup wobblyGroup = config->group("Effect-Wobbly");
diff --git a/autotests/integration/effects/translucency_test.cpp b/autotests/integration/effects/translucency_test.cpp
index f472e7c9d..fb82ef585 100644
--- a/autotests/integration/effects/translucency_test.cpp
+++ b/autotests/integration/effects/translucency_test.cpp
@@ -66,7 +66,7 @@ void TranslucencyTest::initTestCase()
     auto config = KSharedConfig::openConfig(QString(), KConfig::SimpleConfig);
     KConfigGroup plugins(config, QStringLiteral("Plugins"));
     const auto builtinNames = render::effect_loader(*Test::app()->base.space).listOfKnownEffects();
-    for (QString name : builtinNames) {
+    for (const QString& name : builtinNames) {
         plugins.writeEntry(name + QStringLiteral("Enabled"), false);
     }
     config->group("Outline").writeEntry(QStringLiteral("QmlPath"), QString("/does/not/exist.qml"));
diff --git a/autotests/integration/generic_scene_opengl_test.cpp b/autotests/integration/generic_scene_opengl_test.cpp
index 5b76ddfb7..8a94731b5 100644
--- a/autotests/integration/generic_scene_opengl_test.cpp
+++ b/autotests/integration/generic_scene_opengl_test.cpp
@@ -58,7 +58,7 @@ void GenericSceneOpenGLTest::initTestCase()
     auto config = KSharedConfig::openConfig(QString(), KConfig::SimpleConfig);
     KConfigGroup plugins(config, QStringLiteral("Plugins"));
     const auto builtinNames = render::effect_loader(*Test::app()->base.space).listOfKnownEffects();
-    for (QString name : builtinNames) {
+    for (const QString& name : builtinNames) {
         plugins.writeEntry(name + QStringLiteral("Enabled"), false);
     }
 
diff --git a/autotests/integration/quick_tiling_test.cpp b/autotests/integration/quick_tiling_test.cpp
index 1ec5c11b6..a948722d3 100644
--- a/autotests/integration/quick_tiling_test.cpp
+++ b/autotests/integration/quick_tiling_test.cpp
@@ -898,7 +898,7 @@ void QuickTilingTest::testShortcut()
         QTest::qWait(1001);
     }
 
-    for (QString shortcut : shortcutList) {
+    for (const QString& shortcut : shortcutList) {
         // invoke global shortcut through dbus
         auto msg = QDBusMessage::createMethodCall(QStringLiteral("org.kde.kglobalaccel"),
                                                   QStringLiteral("/component/kwin"),
diff --git a/autotests/integration/scene_opengl_shadow_test.cpp b/autotests/integration/scene_opengl_shadow_test.cpp
index 643372391..081192abe 100644
--- a/autotests/integration/scene_opengl_shadow_test.cpp
+++ b/autotests/integration/scene_opengl_shadow_test.cpp
@@ -116,7 +116,7 @@ void SceneOpenGLShadowTest::initTestCase()
     auto config = KSharedConfig::openConfig(QString(), KConfig::SimpleConfig);
     KConfigGroup plugins(config, QStringLiteral("Plugins"));
     const auto builtinNames = render::effect_loader(*Test::app()->base.space).listOfKnownEffects();
-    for (QString name : builtinNames) {
+    for (const QString& name : builtinNames) {
         plugins.writeEntry(name + QStringLiteral("Enabled"), false);
     }
 
diff --git a/autotests/integration/scene_qpainter_shadow_test.cpp b/autotests/integration/scene_qpainter_shadow_test.cpp
index 403d5fd86..4a604440a 100644
--- a/autotests/integration/scene_qpainter_shadow_test.cpp
+++ b/autotests/integration/scene_qpainter_shadow_test.cpp
@@ -125,7 +125,7 @@ void SceneQPainterShadowTest::initTestCase()
     auto config = KSharedConfig::openConfig(QString(), KConfig::SimpleConfig);
     KConfigGroup plugins(config, QStringLiteral("Plugins"));
     const auto builtinNames = render::effect_loader(*Test::app()->base.space).listOfKnownEffects();
-    for (QString name : builtinNames) {
+    for (const QString& name : builtinNames) {
         plugins.writeEntry(name + QStringLiteral("Enabled"), false);
     }
 
diff --git a/autotests/integration/scene_qpainter_test.cpp b/autotests/integration/scene_qpainter_test.cpp
index b4fe53e8a..b6753dde1 100644
--- a/autotests/integration/scene_qpainter_test.cpp
+++ b/autotests/integration/scene_qpainter_test.cpp
@@ -74,7 +74,7 @@ void SceneQPainterTest::initTestCase()
     auto config = KSharedConfig::openConfig(QString(), KConfig::SimpleConfig);
     KConfigGroup plugins(config, QStringLiteral("Plugins"));
     const auto builtinNames = render::effect_loader(*Test::app()->base.space).listOfKnownEffects();
-    for (QString name : builtinNames) {
+    for (const QString& name : builtinNames) {
         plugins.writeEntry(name + QStringLiteral("Enabled"), false);
     }
 
diff --git a/autotests/integration/scripting/screenedge_test.cpp b/autotests/integration/scripting/screenedge_test.cpp
index b95a7a4ad..196f074d3 100644
--- a/autotests/integration/scripting/screenedge_test.cpp
+++ b/autotests/integration/scripting/screenedge_test.cpp
@@ -68,7 +68,7 @@ void ScreenEdgeTest::initTestCase()
     // disable all effects to prevent them grabbing edges
     KConfigGroup plugins(config, QStringLiteral("Plugins"));
     const auto builtinNames = render::effect_loader(*Test::app()->base.space).listOfKnownEffects();
-    for (QString name : builtinNames) {
+    for (const QString& name : builtinNames) {
         plugins.writeEntry(name + QStringLiteral("Enabled"), false);
     }
 
diff --git a/render/effect_loader.cpp b/render/effect_loader.cpp
index dd87b4b94..fb1763363 100644
--- a/render/effect_loader.cpp
+++ b/render/effect_loader.cpp
@@ -168,7 +168,7 @@ void scripted_effect_loader::queryAndLoadAll()
         this,
         [this, watcher]() {
             const auto effects = watcher->result();
-            for (auto effect : effects) {
+            for (const auto& effect : effects) {
                 auto const load_flags = readConfig(effect.pluginId(), effect.isEnabledByDefault());
                 if (flags(load_flags & load_effect_flags::load)) {
                     m_queue->enqueue(qMakePair(effect, load_flags));
diff --git a/win/tabbox/tabbox.cpp b/win/tabbox/tabbox.cpp
index dd90af92b..eed230ae5 100644
--- a/win/tabbox/tabbox.cpp
+++ b/win/tabbox/tabbox.cpp
@@ -195,7 +195,7 @@ bool tabbox_handler_impl::check_applications(tabbox_client* client) const
     switch (config().client_applications_mode()) {
     case tabbox_config::OneWindowPerApplication:
         // check if the list already contains an entry of this application
-        for (auto client_weak : client_list()) {
+        for (const auto& client_weak : client_list()) {
             auto client = client_weak.lock();
             if (!client) {
                 continue;
-- 
GitLab


From d1ad336669e9a7bdcb99cdb7bf383d26e4840101 Mon Sep 17 00:00:00 2001
From: Tom Englund <tomenglund26@gmail.com>
Date: Wed, 27 Jul 2022 09:42:13 +0200
Subject: [PATCH 02/18] fix: ensure Qt container does not detach

ensure Qt containers does not detach by using qAsConst, found with clang
tidy/clazy.
---
 autotests/integration/scene_opengl_shadow_test.cpp | 4 ++--
 scripting/platform.cpp                             | 2 +-
 scripting/script.cpp                               | 2 +-
 3 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/autotests/integration/scene_opengl_shadow_test.cpp b/autotests/integration/scene_opengl_shadow_test.cpp
index 081192abe..250bda7b0 100644
--- a/autotests/integration/scene_opengl_shadow_test.cpp
+++ b/autotests/integration/scene_opengl_shadow_test.cpp
@@ -715,7 +715,7 @@ void SceneOpenGLShadowTest::testNoCornerShadowTiles()
     expectedQuads << makeShadowQuad(
         QRectF(-128, 0, 128, 512), 0.0, 128.0 / 257.0, 128.0 / 257.0, 129.0 / 257.0); // left
 
-    for (const WindowQuad& expectedQuad : expectedQuads) {
+    for (const WindowQuad& expectedQuad : qAsConst(expectedQuads)) {
         auto it = std::find_if(
             quads.constBegin(), quads.constEnd(), [&expectedQuad](const WindowQuad& quad) {
                 return compareQuads(quad, expectedQuad);
@@ -802,7 +802,7 @@ void SceneOpenGLShadowTest::testDistributeHugeCornerTiles()
     const WindowQuadList& quads = shadow->shadowQuads();
     QCOMPARE(quads.count(), expectedQuads.count());
 
-    for (const WindowQuad& expectedQuad : expectedQuads) {
+    for (const WindowQuad& expectedQuad : qAsConst(expectedQuads)) {
         auto it = std::find_if(
             quads.constBegin(), quads.constEnd(), [&expectedQuad](const WindowQuad& quad) {
                 return compareQuads(quad, expectedQuad);
diff --git a/scripting/platform.cpp b/scripting/platform.cpp
index a7ea0cbf8..0a7caea0b 100644
--- a/scripting/platform.cpp
+++ b/scripting/platform.cpp
@@ -296,7 +296,7 @@ QList<QAction*> platform::actionsForUserActionMenu(Toplevel* window, QMenu* pare
     assert(window_it != w_wins.cend());
 
     QList<QAction*> actions;
-    for (auto s : scripts) {
+    for (auto s : qAsConst(scripts)) {
         // TODO: Allow declarative scripts to add their own user actions.
         if (auto script = qobject_cast<scripting::script*>(s)) {
             actions << script->actionsForUserActionMenu(*window_it, parent);
diff --git a/scripting/script.cpp b/scripting/script.cpp
index 79ac55560..97fb53e6f 100644
--- a/scripting/script.cpp
+++ b/scripting/script.cpp
@@ -443,7 +443,7 @@ QList<QAction*> script::actionsForUserActionMenu(window* window, QMenu* parent)
     QList<QAction*> actions;
     actions.reserve(m_userActionsMenuCallbacks.count());
 
-    for (QJSValue callback : m_userActionsMenuCallbacks) {
+    for (QJSValue callback : qAsConst(m_userActionsMenuCallbacks)) {
         QJSValue result = callback.call({m_engine->toScriptValue(window)});
         if (result.isError()) {
             continue;
-- 
GitLab


From 1f1ea9c1caf861b1b1e810df9a7d893a22e134ea Mon Sep 17 00:00:00 2001
From: Tom Englund <tomenglund26@gmail.com>
Date: Wed, 27 Jul 2022 10:17:27 +0200
Subject: [PATCH 03/18] fix: dont call first on temporary

dont call .first or .last on temporarys, use constFirst or constLast.
ensures they dont unnecesserly detach/deep copies. found with clang
tidy/clazy.
---
 .../integration/dont_crash_reinitialize_compositor.cpp    | 2 +-
 .../effects/desktop_switching_animation_test.cpp          | 4 ++--
 autotests/integration/effects/maximize_animation_test.cpp | 2 +-
 autotests/integration/effects/minimize_animation_test.cpp | 2 +-
 .../effects/popup_open_close_animation_test.cpp           | 6 +++---
 autotests/integration/effects/scripted_effects_test.cpp   | 4 ++--
 autotests/integration/effects/slidingpopups_test.cpp      | 2 +-
 .../effects/toplevel_open_close_animation_test.cpp        | 4 ++--
 autotests/integration/idle_inhibition_test.cpp            | 4 ++--
 autotests/integration/lib/app.cpp                         | 2 +-
 autotests/integration/plasmawindow_test.cpp               | 6 +++---
 autotests/integration/virtual_desktop_test.cpp            | 8 ++++----
 autotests/test_x11_timestamp_update.cpp                   | 2 +-
 base/seat/backend/logind/session.cpp                      | 2 +-
 effect/effects/presentwindows/presentwindows.cpp          | 2 +-
 kcmkwin/kwindecoration/kwin-applywindowdecoration.cpp     | 4 ++--
 tests/x11shadowreader.cpp                                 | 2 +-
 17 files changed, 29 insertions(+), 29 deletions(-)

diff --git a/autotests/integration/dont_crash_reinitialize_compositor.cpp b/autotests/integration/dont_crash_reinitialize_compositor.cpp
index 80489442a..4d20cf829 100644
--- a/autotests/integration/dont_crash_reinitialize_compositor.cpp
+++ b/autotests/integration/dont_crash_reinitialize_compositor.cpp
@@ -126,7 +126,7 @@ void DontCrashReinitializeCompositorTest::testReinitializeCompositor()
     QFETCH(QString, effectName);
     QVERIFY(effectsImpl->loadEffect(effectName));
     QCOMPARE(effectsImpl->loadedEffects().count(), 1);
-    QCOMPARE(effectsImpl->loadedEffects().first(), effectName);
+    QCOMPARE(effectsImpl->loadedEffects().constFirst(), effectName);
     Effect* effect = effectsImpl->findEffect(effectName);
     QVERIFY(effect);
     QVERIFY(!effect->isActive());
diff --git a/autotests/integration/effects/desktop_switching_animation_test.cpp b/autotests/integration/effects/desktop_switching_animation_test.cpp
index dee12a4df..4ef0c7b77 100644
--- a/autotests/integration/effects/desktop_switching_animation_test.cpp
+++ b/autotests/integration/effects/desktop_switching_animation_test.cpp
@@ -121,7 +121,7 @@ void DesktopSwitchingAnimationTest::testSwitchDesktops()
     auto client = Test::render_and_wait_for_shown(surface, QSize(100, 50), Qt::blue);
     QVERIFY(client);
     QCOMPARE(client->desktops().count(), 1);
-    QCOMPARE(client->desktops().first(), vd_manager->desktops().first());
+    QCOMPARE(client->desktops().constFirst(), vd_manager->desktops().first());
 
     // Load effect that will be tested.
     QFETCH(QString, effectName);
@@ -129,7 +129,7 @@ void DesktopSwitchingAnimationTest::testSwitchDesktops()
     QVERIFY(effectsImpl);
     QVERIFY(effectsImpl->loadEffect(effectName));
     QCOMPARE(effectsImpl->loadedEffects().count(), 1);
-    QCOMPARE(effectsImpl->loadedEffects().first(), effectName);
+    QCOMPARE(effectsImpl->loadedEffects().constFirst(), effectName);
     Effect* effect = effectsImpl->findEffect(effectName);
     QVERIFY(effect);
     QVERIFY(!effect->isActive());
diff --git a/autotests/integration/effects/maximize_animation_test.cpp b/autotests/integration/effects/maximize_animation_test.cpp
index 666d9e273..41a286102 100644
--- a/autotests/integration/effects/maximize_animation_test.cpp
+++ b/autotests/integration/effects/maximize_animation_test.cpp
@@ -134,7 +134,7 @@ void MaximizeAnimationTest::testMaximizeRestore()
     QVERIFY(effectsImpl);
     QVERIFY(effectsImpl->loadEffect(effectName));
     QCOMPARE(effectsImpl->loadedEffects().count(), 1);
-    QCOMPARE(effectsImpl->loadedEffects().first(), effectName);
+    QCOMPARE(effectsImpl->loadedEffects().constFirst(), effectName);
     Effect* effect = effectsImpl->findEffect(effectName);
     QVERIFY(effect);
     QVERIFY(!effect->isActive());
diff --git a/autotests/integration/effects/minimize_animation_test.cpp b/autotests/integration/effects/minimize_animation_test.cpp
index 9487178d9..7daaaab04 100644
--- a/autotests/integration/effects/minimize_animation_test.cpp
+++ b/autotests/integration/effects/minimize_animation_test.cpp
@@ -159,7 +159,7 @@ void MinimizeAnimationTest::testMinimizeUnminimize()
     QVERIFY(effectsImpl);
     QVERIFY(effectsImpl->loadEffect(effectName));
     QCOMPARE(effectsImpl->loadedEffects().count(), 1);
-    QCOMPARE(effectsImpl->loadedEffects().first(), effectName);
+    QCOMPARE(effectsImpl->loadedEffects().constFirst(), effectName);
     Effect* effect = effectsImpl->findEffect(effectName);
     QVERIFY(effect);
     QVERIFY(!effect->isActive());
diff --git a/autotests/integration/effects/popup_open_close_animation_test.cpp b/autotests/integration/effects/popup_open_close_animation_test.cpp
index 126edc026..a18eb14d7 100644
--- a/autotests/integration/effects/popup_open_close_animation_test.cpp
+++ b/autotests/integration/effects/popup_open_close_animation_test.cpp
@@ -115,7 +115,7 @@ void PopupOpenCloseAnimationTest::testAnimatePopups()
     const QString effectName = QStringLiteral("kwin4_effect_fadingpopups");
     QVERIFY(effectsImpl->loadEffect(effectName));
     QCOMPARE(effectsImpl->loadedEffects().count(), 1);
-    QCOMPARE(effectsImpl->loadedEffects().first(), effectName);
+    QCOMPARE(effectsImpl->loadedEffects().constFirst(), effectName);
     Effect* effect = effectsImpl->findEffect(effectName);
     QVERIFY(effect);
     QVERIFY(!effect->isActive());
@@ -176,7 +176,7 @@ void PopupOpenCloseAnimationTest::testAnimateUserActionsPopup()
     const QString effectName = QStringLiteral("kwin4_effect_fadingpopups");
     QVERIFY(effectsImpl->loadEffect(effectName));
     QCOMPARE(effectsImpl->loadedEffects().count(), 1);
-    QCOMPARE(effectsImpl->loadedEffects().first(), effectName);
+    QCOMPARE(effectsImpl->loadedEffects().constFirst(), effectName);
     Effect* effect = effectsImpl->findEffect(effectName);
     QVERIFY(effect);
     QVERIFY(!effect->isActive());
@@ -233,7 +233,7 @@ void PopupOpenCloseAnimationTest::testAnimateDecorationTooltips()
     const QString effectName = QStringLiteral("kwin4_effect_fadingpopups");
     QVERIFY(effectsImpl->loadEffect(effectName));
     QCOMPARE(effectsImpl->loadedEffects().count(), 1);
-    QCOMPARE(effectsImpl->loadedEffects().first(), effectName);
+    QCOMPARE(effectsImpl->loadedEffects().constFirst(), effectName);
     Effect* effect = effectsImpl->findEffect(effectName);
     QVERIFY(effect);
     QVERIFY(!effect->isActive());
diff --git a/autotests/integration/effects/scripted_effects_test.cpp b/autotests/integration/effects/scripted_effects_test.cpp
index ab13f3358..b624ca998 100644
--- a/autotests/integration/effects/scripted_effects_test.cpp
+++ b/autotests/integration/effects/scripted_effects_test.cpp
@@ -249,7 +249,7 @@ void ScriptedEffectsTest::testShortcuts()
     QSignalSpy effectOutputSpy(effect, &ScriptedEffectWithDebugSpy::testOutput);
     QVERIFY(effect->load("shortcutsTest"));
     QCOMPARE(effect->actions().count(), 1);
-    auto action = effect->actions()[0];
+    auto action = effect->actions().constFirst();
     QCOMPARE(action->objectName(), "testShortcut");
     QCOMPARE(action->text(), "Test Shortcut");
     QCOMPARE(KGlobalAccel::self()->shortcut(action).first(), QKeySequence("Meta+Shift+Y"));
@@ -357,7 +357,7 @@ void ScriptedEffectsTest::testScreenEdgeTouch()
     auto* effect = new ScriptedEffectWithDebugSpy; // cleaned up in ::clean
     QSignalSpy effectOutputSpy(effect, &ScriptedEffectWithDebugSpy::testOutput);
     QVERIFY(effect->load("screenEdgeTouchTest"));
-    effect->actions()[0]->trigger();
+    effect->actions().constFirst()->trigger();
     QCOMPARE(effectOutputSpy.count(), 1);
 }
 
diff --git a/autotests/integration/effects/slidingpopups_test.cpp b/autotests/integration/effects/slidingpopups_test.cpp
index 25a8d487f..8c9b10f4e 100644
--- a/autotests/integration/effects/slidingpopups_test.cpp
+++ b/autotests/integration/effects/slidingpopups_test.cpp
@@ -102,7 +102,7 @@ void SlidingPopupsTest::cleanup()
     Test::destroy_wayland_connection();
     auto e = static_cast<render::effects_handler_impl*>(effects);
     while (!e->loadedEffects().isEmpty()) {
-        const QString effect = e->loadedEffects().first();
+        const QString effect = e->loadedEffects().constFirst();
         e->unloadEffect(effect);
         QVERIFY(!e->isEffectLoaded(effect));
     }
diff --git a/autotests/integration/effects/toplevel_open_close_animation_test.cpp b/autotests/integration/effects/toplevel_open_close_animation_test.cpp
index 5091969b4..26270e2cd 100644
--- a/autotests/integration/effects/toplevel_open_close_animation_test.cpp
+++ b/autotests/integration/effects/toplevel_open_close_animation_test.cpp
@@ -116,7 +116,7 @@ void ToplevelOpenCloseAnimationTest::testAnimateToplevels()
     QFETCH(QString, effectName);
     QVERIFY(effectsImpl->loadEffect(effectName));
     QCOMPARE(effectsImpl->loadedEffects().count(), 1);
-    QCOMPARE(effectsImpl->loadedEffects().first(), effectName);
+    QCOMPARE(effectsImpl->loadedEffects().constFirst(), effectName);
     Effect* effect = effectsImpl->findEffect(effectName);
     QVERIFY(effect);
     QVERIFY(!effect->isActive());
@@ -179,7 +179,7 @@ void ToplevelOpenCloseAnimationTest::testDontAnimatePopups()
     QFETCH(QString, effectName);
     QVERIFY(effectsImpl->loadEffect(effectName));
     QCOMPARE(effectsImpl->loadedEffects().count(), 1);
-    QCOMPARE(effectsImpl->loadedEffects().first(), effectName);
+    QCOMPARE(effectsImpl->loadedEffects().constFirst(), effectName);
     Effect* effect = effectsImpl->findEffect(effectName);
     QVERIFY(effect);
     QVERIFY(!effect->isActive());
diff --git a/autotests/integration/idle_inhibition_test.cpp b/autotests/integration/idle_inhibition_test.cpp
index b030f2d15..bb51e0342 100644
--- a/autotests/integration/idle_inhibition_test.cpp
+++ b/autotests/integration/idle_inhibition_test.cpp
@@ -152,7 +152,7 @@ void TestIdleInhibition::testDontInhibitWhenNotOnCurrentDesktop()
 
     // The test client should be only on the first virtual desktop.
     QCOMPARE(c->desktops().count(), 1);
-    QCOMPARE(c->desktops().first(), vd_manager->desktops().first());
+    QCOMPARE(c->desktops().constFirst(), vd_manager->desktops().first());
 
     // This should inhibit our server object.
     QVERIFY(idle->isInhibited());
@@ -323,7 +323,7 @@ void TestIdleInhibition::testDontInhibitWhenLeftCurrentDesktop()
 
     // The test client should be only on the first virtual desktop.
     QCOMPARE(c->desktops().count(), 1);
-    QCOMPARE(c->desktops().first(), vd_manager->desktops().first());
+    QCOMPARE(c->desktops().constFirst(), vd_manager->desktops().first());
 
     // This should inhibit our server object.
     QVERIFY(idle->isInhibited());
diff --git a/autotests/integration/lib/app.cpp b/autotests/integration/lib/app.cpp
index cb90b245c..34789d0c0 100644
--- a/autotests/integration/lib/app.cpp
+++ b/autotests/integration/lib/app.cpp
@@ -93,7 +93,7 @@ WaylandTestApplication::WaylandTestApplication(OperationMode mode,
     qunsetenv("XKB_DEFAULT_VARIANT");
     qunsetenv("XKB_DEFAULT_OPTIONS");
 
-    const auto ownPath = libraryPaths().last();
+    const auto ownPath = libraryPaths().constLast();
     removeLibraryPath(ownPath);
     addLibraryPath(ownPath);
 
diff --git a/autotests/integration/plasmawindow_test.cpp b/autotests/integration/plasmawindow_test.cpp
index b631b63c7..0d6d25d5a 100644
--- a/autotests/integration/plasmawindow_test.cpp
+++ b/autotests/integration/plasmawindow_test.cpp
@@ -165,14 +165,14 @@ void PlasmaWindowTest::testCreateDestroyX11PlasmaWindow()
     QVERIFY(plasmaWindowCreatedSpy.wait());
     QCOMPARE(plasmaWindowCreatedSpy.count(), 1);
     QCOMPARE(m_windowManagement->windows().count(), 1);
-    auto pw = m_windowManagement->windows().first();
+    auto pw = m_windowManagement->windows().constFirst();
     QCOMPARE(pw->geometry(), client->frameGeometry());
     QSignalSpy geometryChangedSpy(pw, &PlasmaWindow::geometryChanged);
     QVERIFY(geometryChangedSpy.isValid());
 
-    QSignalSpy unmappedSpy(m_windowManagement->windows().first(), &PlasmaWindow::unmapped);
+    QSignalSpy unmappedSpy(m_windowManagement->windows().constFirst(), &PlasmaWindow::unmapped);
     QVERIFY(unmappedSpy.isValid());
-    QSignalSpy destroyedSpy(m_windowManagement->windows().first(), &QObject::destroyed);
+    QSignalSpy destroyedSpy(m_windowManagement->windows().constFirst(), &QObject::destroyed);
     QVERIFY(destroyedSpy.isValid());
 
     // and destroy the window again
diff --git a/autotests/integration/virtual_desktop_test.cpp b/autotests/integration/virtual_desktop_test.cpp
index ae84938b8..11b66b071 100644
--- a/autotests/integration/virtual_desktop_test.cpp
+++ b/autotests/integration/virtual_desktop_test.cpp
@@ -792,7 +792,7 @@ void VirtualDesktopTest::testLastDesktopRemoved()
     QVERIFY(desktopPresenceChangedSpy.isValid());
 
     QCOMPARE(client->desktops().count(), 1u);
-    QCOMPARE(vd_manager->currentDesktop(), client->desktops().first());
+    QCOMPARE(vd_manager->currentDesktop(), client->desktops().constFirst());
 
     // and remove last desktop
     vd_manager->setCount(1);
@@ -802,7 +802,7 @@ void VirtualDesktopTest::testLastDesktopRemoved()
     QCOMPARE(client->desktop(), 1);
 
     QCOMPARE(client->desktops().count(), 1u);
-    QCOMPARE(vd_manager->currentDesktop(), client->desktops().first());
+    QCOMPARE(vd_manager->currentDesktop(), client->desktops().constFirst());
 }
 
 void VirtualDesktopTest::testWindowOnMultipleDesktops()
@@ -828,7 +828,7 @@ void VirtualDesktopTest::testWindowOnMultipleDesktops()
     QVERIFY(desktopPresenceChangedSpy.isValid());
 
     QCOMPARE(client->desktops().count(), 1u);
-    QCOMPARE(vd_manager->currentDesktop(), client->desktops().first());
+    QCOMPARE(vd_manager->currentDesktop(), client->desktops().constFirst());
 
     // Set the window on desktop 2 as well
     win::enter_desktop(client, vd_manager->desktopForX11Id(2));
@@ -908,7 +908,7 @@ void VirtualDesktopTest::testRemoveDesktopWithWindow()
     QVERIFY(desktopPresenceChangedSpy.isValid());
 
     QCOMPARE(client->desktops().count(), 1u);
-    QCOMPARE(vd_manager->currentDesktop(), client->desktops().first());
+    QCOMPARE(vd_manager->currentDesktop(), client->desktops().constFirst());
 
     // Set the window on desktop 2 as well
     win::enter_desktop(client, vd_manager->desktops()[1]);
diff --git a/autotests/test_x11_timestamp_update.cpp b/autotests/test_x11_timestamp_update.cpp
index 04c746238..29c8dd5b6 100644
--- a/autotests/test_x11_timestamp_update.cpp
+++ b/autotests/test_x11_timestamp_update.cpp
@@ -64,7 +64,7 @@ X11TestApplication::X11TestApplication(int& argc, char** argv)
 
     // move directory containing executable to front, so that KPluginMetaData::findPluginById
     // prefers the plugins in the build dir over system installed ones
-    const auto ownPath = libraryPaths().last();
+    const auto ownPath = libraryPaths().constLast();
     removeLibraryPath(ownPath);
     addLibraryPath(ownPath);
 
diff --git a/base/seat/backend/logind/session.cpp b/base/seat/backend/logind/session.cpp
index 8661449d2..6ab1a0a20 100644
--- a/base/seat/backend/logind/session.cpp
+++ b/base/seat/backend/logind/session.cpp
@@ -363,7 +363,7 @@ int session::takeDevice(const char* path)
 
     // The dup syscall removes the CLOEXEC flag as a side-effect. So use fcntl's F_DUPFD_CLOEXEC
     // cmd.
-    return fcntl(reply.arguments().first().value<QDBusUnixFileDescriptor>().fileDescriptor(),
+    return fcntl(reply.arguments().constFirst().value<QDBusUnixFileDescriptor>().fileDescriptor(),
                  F_DUPFD_CLOEXEC,
                  0);
 }
diff --git a/effect/effects/presentwindows/presentwindows.cpp b/effect/effects/presentwindows/presentwindows.cpp
index c135d4adf..69945bd49 100644
--- a/effect/effects/presentwindows/presentwindows.cpp
+++ b/effect/effects/presentwindows/presentwindows.cpp
@@ -1828,7 +1828,7 @@ EffectWindow*
 PresentWindowsEffect::relativeWindow(EffectWindow* w, int xdiff, int ydiff, bool wrap) const
 {
     if (!w)
-        return m_motionManager.managedWindows().first();
+        return m_motionManager.managedWindows().constFirst();
 
     // TODO: Is it possible to select hidden windows?
     EffectWindow* next;
diff --git a/kcmkwin/kwindecoration/kwin-applywindowdecoration.cpp b/kcmkwin/kwindecoration/kwin-applywindowdecoration.cpp
index 62400b48a..447748f4b 100644
--- a/kcmkwin/kwindecoration/kwin-applywindowdecoration.cpp
+++ b/kcmkwin/kwindecoration/kwin-applywindowdecoration.cpp
@@ -39,7 +39,7 @@ int main(int argc, char **argv)
     KWinDecorationSettings *settings = new KWinDecorationSettings(&app);
     QTextStream ts(stdout);
     if (!parser->positionalArguments().isEmpty()) {
-        QString requestedTheme{parser->positionalArguments().first()};
+        QString requestedTheme{parser->positionalArguments().constFirst()};
         if (requestedTheme.endsWith(QStringLiteral("/*"))) {
             // Themes installed through KNewStuff will commonly be given an installed files entry
             // which has the main directory name and an asterix to say the cursors are all in that directory,
@@ -62,7 +62,7 @@ int main(int argc, char **argv)
                     if (!path.isEmpty() && path == QStringLiteral("%1/metadata.desktop").arg(requestedTheme)) {
                         requestedTheme = QString("__aurorae__svg__").append(splitTheme.last());
                         themeResolved = true;
-                        ts << i18n("Resolved %1 to the KWin Aurorae theme \"%2\", and will attempt to set that as your current theme.").arg(parser->positionalArguments().first()).arg(requestedTheme) << endl;
+                        ts << i18n("Resolved %1 to the KWin Aurorae theme \"%2\", and will attempt to set that as your current theme.").arg(parser->positionalArguments().constFirst()).arg(requestedTheme) << endl;
                     }
                 }
             } else {
diff --git a/tests/x11shadowreader.cpp b/tests/x11shadowreader.cpp
index 6c0d24d49..25f5e2181 100644
--- a/tests/x11shadowreader.cpp
+++ b/tests/x11shadowreader.cpp
@@ -107,7 +107,7 @@ int main(int argc, char** argv)
     }
 
     bool ok = false;
-    const auto shadow = readShadow(parser.positionalArguments().first().toULongLong(&ok, 16));
+    const auto shadow = readShadow(parser.positionalArguments().constFirst().toULongLong(&ok, 16));
     if (!ok) {
         qDebug() << "!!! Failed to read window id";
         return 1;
-- 
GitLab


From 111f7b4ce04bf97562ebbcf06423031a3929b368 Mon Sep 17 00:00:00 2001
From: Tom Englund <tomenglund26@gmail.com>
Date: Wed, 27 Jul 2022 10:43:06 +0200
Subject: [PATCH 04/18] fix: use at instead of operator[] on temporary

ensures it doesnt deep copy the container on each call.
---
 autotests/integration/virtual_desktop_test.cpp | 14 +++++++-------
 1 file changed, 7 insertions(+), 7 deletions(-)

diff --git a/autotests/integration/virtual_desktop_test.cpp b/autotests/integration/virtual_desktop_test.cpp
index 11b66b071..80f721b19 100644
--- a/autotests/integration/virtual_desktop_test.cpp
+++ b/autotests/integration/virtual_desktop_test.cpp
@@ -833,8 +833,8 @@ void VirtualDesktopTest::testWindowOnMultipleDesktops()
     // Set the window on desktop 2 as well
     win::enter_desktop(client, vd_manager->desktopForX11Id(2));
     QCOMPARE(client->desktops().count(), 2u);
-    QCOMPARE(vd_manager->desktops()[2], client->desktops()[0]);
-    QCOMPARE(vd_manager->desktops()[1], client->desktops()[1]);
+    QCOMPARE(vd_manager->desktops()[2], client->desktops().at(0));
+    QCOMPARE(vd_manager->desktops()[1], client->desktops().at(1));
     QVERIFY(client->isOnDesktop(2));
     QVERIFY(client->isOnDesktop(3));
 
@@ -913,8 +913,8 @@ void VirtualDesktopTest::testRemoveDesktopWithWindow()
     // Set the window on desktop 2 as well
     win::enter_desktop(client, vd_manager->desktops()[1]);
     QCOMPARE(client->desktops().count(), 2u);
-    QCOMPARE(vd_manager->desktops()[2], client->desktops()[0]);
-    QCOMPARE(vd_manager->desktops()[1], client->desktops()[1]);
+    QCOMPARE(vd_manager->desktops()[2], client->desktops().at(0));
+    QCOMPARE(vd_manager->desktops()[1], client->desktops().at(1));
     QVERIFY(client->isOnDesktop(2));
     QVERIFY(client->isOnDesktop(3));
 
@@ -922,7 +922,7 @@ void VirtualDesktopTest::testRemoveDesktopWithWindow()
     vd_manager->setCount(2);
     QCOMPARE(client->desktops().count(), 1u);
     // window is only on desktop 2
-    QCOMPARE(vd_manager->desktops()[1], client->desktops()[0]);
+    QCOMPARE(vd_manager->desktops()[1], client->desktops().at(0));
 
     // Again 3 desktops
     vd_manager->setCount(3);
@@ -931,13 +931,13 @@ void VirtualDesktopTest::testRemoveDesktopWithWindow()
     win::leave_desktop(client, vd_manager->desktops()[1]);
     QCOMPARE(client->desktops().count(), 1u);
     // window is only on desktop 3
-    QCOMPARE(vd_manager->desktops()[2], client->desktops()[0]);
+    QCOMPARE(vd_manager->desktops()[2], client->desktops().at(0));
 
     // remove desktop 3
     vd_manager->setCount(2);
     QCOMPARE(client->desktops().count(), 1u);
     // window is only on desktop 2
-    QCOMPARE(vd_manager->desktops()[1], client->desktops()[0]);
+    QCOMPARE(vd_manager->desktops()[1], client->desktops().at(0));
 }
 
 }
-- 
GitLab


From eb909678f47e7a00ab549fc0c1430226e60690b9 Mon Sep 17 00:00:00 2001
From: Tom Englund <tomenglund26@gmail.com>
Date: Wed, 27 Jul 2022 10:49:14 +0200
Subject: [PATCH 05/18] fix: ensure focus prevention level is being set

seems focus stealing prevention level was never being set, ensure its being
set.
---
 base/options.cpp | 1 +
 1 file changed, 1 insertion(+)

diff --git a/base/options.cpp b/base/options.cpp
index b6a4c019e..0bba03548 100644
--- a/base/options.cpp
+++ b/base/options.cpp
@@ -315,6 +315,7 @@ void options::setFocusStealingPreventionLevel(win::fsp_level focusStealingPreven
         focusStealingPreventionLevel = win::fsp_level::none;
     }
 
+    m_focusStealingPreventionLevel = focusStealingPreventionLevel;
     Q_EMIT focusStealingPreventionLevelChanged();
 }
 
-- 
GitLab


From 84552504afced87220f2a8fc72203606ebc4252a Mon Sep 17 00:00:00 2001
From: Tom Englund <tomenglund26@gmail.com>
Date: Wed, 27 Jul 2022 10:53:18 +0200
Subject: [PATCH 06/18] fix: use QFileinfo::exists(file) instead

QFileInfo::exists(file) is documented to be faster then QFileInfo(file).exists().
---
 debug/perf/ftrace_impl.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/debug/perf/ftrace_impl.cpp b/debug/perf/ftrace_impl.cpp
index 2f6926f51..9e869e27e 100644
--- a/debug/perf/ftrace_impl.cpp
+++ b/debug/perf/ftrace_impl.cpp
@@ -97,7 +97,7 @@ bool FtraceImpl::findFile()
         const int start = line.indexOf(' ') + 1;
         const int end = line.indexOf(' ', start);
         const QString dirPath(line.mid(start, end - start));
-        if (dirPath.isEmpty() || !QFileInfo(dirPath).exists()) {
+        if (dirPath.isEmpty() || !QFileInfo::exists(dirPath)) {
             return QFileInfo();
         }
         return QFileInfo(QDir(dirPath), QStringLiteral("trace_marker"));
-- 
GitLab


From e6a3bb4130ee05a12d2687e5cc38fc41f6aee549 Mon Sep 17 00:00:00 2001
From: Tom Englund <tomenglund26@gmail.com>
Date: Wed, 27 Jul 2022 11:02:47 +0200
Subject: [PATCH 07/18] fix: use at instead of operator[]

ensures we dont deep copy on each call.
---
 render/xrender/shadow.cpp | 16 ++++++++--------
 1 file changed, 8 insertions(+), 8 deletions(-)

diff --git a/render/xrender/shadow.cpp b/render/xrender/shadow.cpp
index 84cf7417b..369e4cdfa 100644
--- a/render/xrender/shadow.cpp
+++ b/render/xrender/shadow.cpp
@@ -48,14 +48,14 @@ void shadow::layoutShadowRects(QRect& top,
         return;
     }
 
-    WindowQuad topQuad = quads.select(WindowQuadShadowTop)[0];
-    WindowQuad topRightQuad = quads.select(WindowQuadShadowTopRight)[0];
-    WindowQuad topLeftQuad = quads.select(WindowQuadShadowTopLeft)[0];
-    WindowQuad leftQuad = quads.select(WindowQuadShadowLeft)[0];
-    WindowQuad rightQuad = quads.select(WindowQuadShadowRight)[0];
-    WindowQuad bottomQuad = quads.select(WindowQuadShadowBottom)[0];
-    WindowQuad bottomRightQuad = quads.select(WindowQuadShadowBottomRight)[0];
-    WindowQuad bottomLeftQuad = quads.select(WindowQuadShadowBottomLeft)[0];
+    WindowQuad topQuad = quads.select(WindowQuadShadowTop).at(0);
+    WindowQuad topRightQuad = quads.select(WindowQuadShadowTopRight).at(0);
+    WindowQuad topLeftQuad = quads.select(WindowQuadShadowTopLeft).at(0);
+    WindowQuad leftQuad = quads.select(WindowQuadShadowLeft).at(0);
+    WindowQuad rightQuad = quads.select(WindowQuadShadowRight).at(0);
+    WindowQuad bottomQuad = quads.select(WindowQuadShadowBottom).at(0);
+    WindowQuad bottomRightQuad = quads.select(WindowQuadShadowBottomRight).at(0);
+    WindowQuad bottomLeftQuad = quads.select(WindowQuadShadowBottomLeft).at(0);
 
     top = QRect(topQuad.left(),
                 topQuad.top(),
-- 
GitLab


From 01d00a8d3c66407dda8428a55e9a63b878801e3a Mon Sep 17 00:00:00 2001
From: Tom Englund <tomenglund26@gmail.com>
Date: Wed, 27 Jul 2022 11:13:03 +0200
Subject: [PATCH 08/18] fix: dont write to pointer after free

if internal window is not a deleted we call delete_window_from_space
that deletes "this" which means assigning m_internalWindow to nullptr
afterwards is a write to pointer after free, also move delete this, to
not double delete it.
---
 win/internal_window.cpp | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/win/internal_window.cpp b/win/internal_window.cpp
index 41300efab..7103e60a4 100644
--- a/win/internal_window.cpp
+++ b/win/internal_window.cpp
@@ -465,14 +465,14 @@ void internal_window::destroyClient()
     update_space_areas(space);
     Q_EMIT space.qobject->internalClientRemoved(this);
 
+    m_internalWindow = nullptr;
+
     if (deleted) {
         deleted->remnant->unref();
+        delete this;
     } else {
         delete_window_from_space(space, this);
     }
-    m_internalWindow = nullptr;
-
-    delete this;
 }
 
 void internal_window::present(std::shared_ptr<QOpenGLFramebufferObject> const& fbo)
-- 
GitLab


From 605312cb90a578083e0098816f00229648963034 Mon Sep 17 00:00:00 2001
From: Tom Englund <tomenglund26@gmail.com>
Date: Wed, 27 Jul 2022 12:22:27 +0200
Subject: [PATCH 09/18] fix: make a copy of slide registry

slide effects might delete themself while iterating, and iterating in a
for ranges loop that gets modified is undefined behaviour.
---
 render/wayland/effect/slide_integration.h | 3 ++-
 render/x11/effect/slide_integration.h     | 4 +++-
 2 files changed, 5 insertions(+), 2 deletions(-)

diff --git a/render/wayland/effect/slide_integration.h b/render/wayland/effect/slide_integration.h
index 35afb86bf..35f8e972c 100644
--- a/render/wayland/effect/slide_integration.h
+++ b/render/wayland/effect/slide_integration.h
@@ -74,7 +74,8 @@ public:
             return;
         }
 
-        for (auto const& [effect, update_call] : registry) {
+        auto const reg_cp = registry;
+        for (auto const& [effect, update_call] : reg_cp) {
             update_call(upd);
         }
     }
diff --git a/render/x11/effect/slide_integration.h b/render/x11/effect/slide_integration.h
index 5a30e980e..9a1a15935 100644
--- a/render/x11/effect/slide_integration.h
+++ b/render/x11/effect/slide_integration.h
@@ -55,7 +55,9 @@ public:
         if (!upd.base.window) {
             return;
         }
-        for (auto const& [effect, update_call] : registry) {
+
+        auto const reg_cp = registry;
+        for (auto const& [effect, update_call] : reg_cp) {
             update_call(upd);
         }
     }
-- 
GitLab


From 96343fd8142df560fa1574269afb723e87a852d4 Mon Sep 17 00:00:00 2001
From: Tom Englund <tomenglund26@gmail.com>
Date: Wed, 27 Jul 2022 12:24:07 +0200
Subject: [PATCH 10/18] fix: add missing includes

add missing includes.
---
 render/wayland/shadow.h | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/render/wayland/shadow.h b/render/wayland/shadow.h
index 5ae6e8acc..3cb533781 100644
--- a/render/wayland/shadow.h
+++ b/render/wayland/shadow.h
@@ -9,7 +9,9 @@
 #include "render/compositor.h"
 #include "render/scene.h"
 #include "render/types.h"
+#include "utils/algorithm.h"
 
+#include <QPixmap>
 #include <QPointer>
 #include <Wrapland/Server/buffer.h>
 #include <Wrapland/Server/shadow.h>
-- 
GitLab


From df831012fe62d26011788228b9143a839ac3eeef Mon Sep 17 00:00:00 2001
From: Tom Englund <tomenglund26@gmail.com>
Date: Wed, 27 Jul 2022 12:26:10 +0200
Subject: [PATCH 11/18] fix: update popup layers

fixes popups sometimes being in the wrong stacking order and also the
situation when the dock has an popup and setshowingdesktop gets called
which iterates over the stackingorder and calls update_layer and then
belong_to_layer, now without this it means its entering
win->layer_for_dock() because this popup has windowtype of net::dock but
is an xdgxshell popup without control and hits the assert in there.
---
 win/layers.h | 3 +++
 win/types.h  | 1 +
 2 files changed, 4 insertions(+)

diff --git a/win/layers.h b/win/layers.h
index b5c7a7aa7..9f4fc3b8b 100644
--- a/win/layers.h
+++ b/win/layers.h
@@ -66,6 +66,9 @@ layer belong_to_layer(Win* win)
     if (is_splash(win)) {
         return win::layer::normal;
     }
+    if (is_popup(win)) {
+        return win::layer::popup;
+    }
     if (is_dock(win)) {
         if (win->space.showing_desktop) {
             return win::layer::notification;
diff --git a/win/types.h b/win/types.h
index c19d9e613..691626e38 100644
--- a/win/types.h
+++ b/win/types.h
@@ -61,6 +61,7 @@ enum class layer {
     above,
     notification,          // layer for windows of type notification
     active,                // active fullscreen, or active dialog
+    popup,                 // layer for popups, xdg shell popups, etc
     critical_notification, // layer for notifications that should be shown even on top of fullscreen
     on_screen_display,     // layer for On Screen Display windows such as volume feedback
     unmanaged,             // layer for override redirect windows.
-- 
GitLab


From 03e708f05c4da55923183a99488d2c73abf26344 Mon Sep 17 00:00:00 2001
From: Tom Englund <tomenglund26@gmail.com>
Date: Wed, 27 Jul 2022 12:27:44 +0200
Subject: [PATCH 12/18] fix: check max size in maxsize

seems a typo has been left in there.
actually check maxsize in maxsize.
---
 win/wayland/window.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/win/wayland/window.cpp b/win/wayland/window.cpp
index b192b7ff5..38f5a9df6 100644
--- a/win/wayland/window.cpp
+++ b/win/wayland/window.cpp
@@ -245,7 +245,7 @@ QSize window::minSize() const
 
 QSize window::maxSize() const
 {
-    return control->rules().checkMinSize(toplevel->maximumSize());
+    return control->rules().checkMaxSize(toplevel->maximumSize());
 }
 
 bool window::isCloseable() const
-- 
GitLab


From 09441a835f8ac667702262aa34fa865c2965157b Mon Sep 17 00:00:00 2001
From: Tom Englund <tomenglund26@gmail.com>
Date: Wed, 27 Jul 2022 12:30:41 +0200
Subject: [PATCH 13/18] fix: change framebuffer blit color format to rgba

on wayland we use rgba colors, so set QImage::rgba8888 instead of
::argb32. fixes weird color distortions. also with the right colors set
we dont have to flip and invert the image.
---
 render/effects.cpp | 7 +------
 1 file changed, 1 insertion(+), 6 deletions(-)

diff --git a/render/effects.cpp b/render/effects.cpp
index 11e7fefc2..6d52ed0f7 100644
--- a/render/effects.cpp
+++ b/render/effects.cpp
@@ -1843,7 +1843,7 @@ QImage effects_handler_impl::blit_from_framebuffer(QRect const& geometry, double
             GL_TEXTURE_2D, 0, GL_RGBA, GL_UNSIGNED_BYTE, static_cast<GLvoid*>(image.bits()));
         texture.unbind();
     } else {
-        image = QImage(nativeSize.width(), nativeSize.height(), QImage::Format_ARGB32);
+        image = QImage(nativeSize.width(), nativeSize.height(), QImage::Format_RGBA8888);
         glReadPixels(0,
                      0,
                      nativeSize.width(),

From 2b503025407d73630ecd5d4a141b4da66e1d0be5 Mon Sep 17 00:00:00 2001
From: Tom Englund <tomenglund26@gmail.com>
Date: Wed, 27 Jul 2022 16:11:03 +0200
Subject: [PATCH 14/18] fix: avoid accessing effects in effect_quick_view

backport of 1b215e6c, EffectQuickView is used by Aurorae.
As long as Aurorae decorations are rendered by kwin, it's not a problem.
However, kde-gtk-config kded module can also render them.
This creates a problem. If effects object is not created,
accessing any of its getters or setters will result in a segmentation fault.

This change rewrites the share context check so the effects object is
not accessed anymore.

One could argue that kde-gtk-config has to provide a dummy EffectsHandler
but it doesn't use effects and libkwineffects is not a dependency of
KDecoration2. So, providing a dummy EffectsHandler makes no sense.

In hindsight, we need to revisit the usage of EffectQuickView in Aurorae
as accessing the EffectsHandler in EffectQuickView is a totally valid
usecase and integration of QOpenGLContext.

Co-authored-by: Vlad Zahorodnii
---
 effect/lib/kwineffects/effect_quick_view.cpp | 7 ++++---
 1 file changed, 4 insertions(+), 3 deletions(-)

diff --git a/effect/lib/kwineffects/effect_quick_view.cpp b/effect/lib/kwineffects/effect_quick_view.cpp
index 8685c52fc..40f92030b 100644
--- a/effect/lib/kwineffects/effect_quick_view.cpp
+++ b/effect/lib/kwineffects/effect_quick_view.cpp
@@ -142,8 +142,9 @@ EffectQuickView::EffectQuickView(QObject* parent, QWindow* renderWindow, ExportM
         format.setDepthBufferSize(16);
         format.setStencilBufferSize(8);
 
+        auto share_context = s_shareContext.get();
         d->m_glcontext.reset(new QOpenGLContext);
-        d->m_glcontext->setShareContext(s_shareContext.get());
+        d->m_glcontext->setShareContext(share_context);
         d->m_glcontext->setFormat(format);
         d->m_glcontext->create();
 
@@ -157,13 +158,13 @@ EffectQuickView::EffectQuickView(QObject* parent, QWindow* renderWindow, ExportM
         d->m_glcontext->doneCurrent();
 
         // On Wayland, opengl contexts are implicitly shared.
-        if (!effects->waylandDisplay() && !d->m_glcontext->shareContext()) {
+        if (share_context && !d->m_glcontext->shareContext()) {
             qCDebug(LIBKWINEFFECTS)
                 << "Failed to create a shared context, falling back to raster rendering";
 
             qCDebug(LIBKWINEFFECTS) << "Extra debug:";
             qCDebug(LIBKWINEFFECTS) << "our context:" << d->m_glcontext.data();
-            qCDebug(LIBKWINEFFECTS) << "share context:" << s_shareContext.get();
+            qCDebug(LIBKWINEFFECTS) << "share context:" << share_context;
 
             // still render via GL, but blit for presentation
             d->m_useBlit = true;
-- 
GitLab


From f948ed52ce72637b0f29bf3472814736af218d76 Mon Sep 17 00:00:00 2001
From: Tom Englund <tomenglund26@gmail.com>
Date: Wed, 27 Jul 2022 18:01:03 +0200
Subject: [PATCH 15/18] fix: remove double signal connects

commit fa105ea7 added an second connect to the signal
virtualDesktopsUpdated while it should have simply modified the
currently existing one, this fixes a nullptr crash when trying to access
window rules.
---
 kcmkwin/kwinrules/rulesmodel.cpp | 2 --
 1 file changed, 2 deletions(-)

diff --git a/kcmkwin/kwinrules/rulesmodel.cpp b/kcmkwin/kwinrules/rulesmodel.cpp
index 33c6fd9f3..acb13c44a 100644
--- a/kcmkwin/kwinrules/rulesmodel.cpp
+++ b/kcmkwin/kwinrules/rulesmodel.cpp
@@ -457,8 +457,6 @@ void RulesModel::populateRuleList()
         Q_EMIT dataChanged(index, index, {OptionsModelRole});
     });
 
-    connect(this, &RulesModel::virtualDesktopsUpdated,
-            this, [this] { m_rules["desktop"]->setOptionsData(virtualDesktopsModelData()); });
     updateVirtualDesktops();
 
     addRule(new RuleItem(QLatin1String("screen"),
-- 
GitLab


From 81058db5c9e1948f760b255c65c2b42a46337f5b Mon Sep 17 00:00:00 2001
From: Tom Englund <tomenglund26@gmail.com>
Date: Sat, 30 Jul 2022 15:27:33 +0200
Subject: [PATCH 16/18] fix: initialize uninitialized pointer

m_settings was never being initialized and could potentially cause
issues further down the line having arbitrary random data.
---
 kcmkwin/kwinrules/rulesmodel.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/kcmkwin/kwinrules/rulesmodel.h b/kcmkwin/kwinrules/rulesmodel.h
index e3ef91db2..35e5a7c41 100644
--- a/kcmkwin/kwinrules/rulesmodel.h
+++ b/kcmkwin/kwinrules/rulesmodel.h
@@ -119,7 +119,7 @@ private:
     QList<RuleItem *> m_ruleList;
     QHash<QString, RuleItem *> m_rules;
     win::dbus::virtual_desktop_data_vector m_virtualDesktops;
-    RuleSettings *m_settings;
+    RuleSettings *m_settings{nullptr};
 };
 
 }
-- 
GitLab


From 705c2d2278536df492cfd908289737e4259affd3 Mon Sep 17 00:00:00 2001
From: Tom Englund <tomenglund26@gmail.com>
Date: Sat, 30 Jul 2022 15:44:18 +0200
Subject: [PATCH 17/18] fix: initialize uninitalized pointers

m_settings was never initialized and can contain arbitrary random data
and cause issues down the line.
---
 kcmkwin/kwinoptions/mouse.h   | 2 +-
 kcmkwin/kwinoptions/windows.h | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/kcmkwin/kwinoptions/mouse.h b/kcmkwin/kwinoptions/mouse.h
index f4d1b2179..c45d8aef7 100644
--- a/kcmkwin/kwinoptions/mouse.h
+++ b/kcmkwin/kwinoptions/mouse.h
@@ -94,7 +94,7 @@ private:
     bool standAlone;
 
     KWinActionsConfigForm *m_ui;
-    KWinOptionsSettings *m_settings;
+    KWinOptionsSettings *m_settings{nullptr};
 };
 
 #endif
diff --git a/kcmkwin/kwinoptions/windows.h b/kcmkwin/kwinoptions/windows.h
index 2163888a6..198fe13a6 100644
--- a/kcmkwin/kwinoptions/windows.h
+++ b/kcmkwin/kwinoptions/windows.h
@@ -138,7 +138,7 @@ private:
 
     bool     standAlone;
     KWinAdvancedConfigForm *m_ui;
-    KWinOptionsSettings *m_settings;
+    KWinOptionsSettings *m_settings{nullptr};
 };
 
 #endif // KKWMWINDOWS_H
-- 
GitLab


From 8c734573c0dc91c452aaa4cbcb8d6ae1e14f99c4 Mon Sep 17 00:00:00 2001
From: Tom Englund <tomenglund26@gmail.com>
Date: Sun, 31 Jul 2022 16:37:20 +0200
Subject: [PATCH 18/18] fix: add missing code from backports

commit c8fc1491 missed adding code to optionsmodel.cpp implenting
optionType and OptionsModel::allValues(), also ensure we use optionList
for virtual desktops on wayland. x11PropertyHash had outdates entries
update them aswell. fixes crashes when trying to Configure Special
Window Settings on both x11 and wayland.
---
 kcmkwin/kwinrules/optionsmodel.cpp | 29 ++++++++++++++++++++++++++++-
 kcmkwin/kwinrules/ruleitem.cpp     |  5 +++++
 kcmkwin/kwinrules/ruleitem.h       |  3 ++-
 kcmkwin/kwinrules/rulesmodel.cpp   | 22 +++++++++++++++-------
 4 files changed, 50 insertions(+), 9 deletions(-)

diff --git a/kcmkwin/kwinrules/optionsmodel.cpp b/kcmkwin/kwinrules/optionsmodel.cpp
index 5e2293cc4..b37712abf 100644
--- a/kcmkwin/kwinrules/optionsmodel.cpp
+++ b/kcmkwin/kwinrules/optionsmodel.cpp
@@ -34,6 +34,7 @@ QHash<int, QByteArray> OptionsModel::roleNames() const
         {Qt::ToolTipRole,    QByteArrayLiteral("tooltip")},
         {ValueRole,          QByteArrayLiteral("value")},
         {IconNameRole,       QByteArrayLiteral("iconName")},
+        {OptionTypeRole,     QByteArrayLiteral("optionType")},
         {BitMaskRole,        QByteArrayLiteral("bitMask")},
 
     };
@@ -66,6 +67,8 @@ QVariant OptionsModel::data(const QModelIndex &index, int role) const
         return item.icon.name();
     case Qt::ToolTipRole:
         return item.description;
+    case OptionTypeRole:
+        return item.optionType;
     case BitMaskRole:
         return bitMask(index.row());
     }
@@ -101,6 +104,9 @@ QVariant OptionsModel::value() const
     if (m_data.isEmpty()) {
         return QVariant();
     }
+    if (m_data.at(m_index).optionType == SelectAllOption) {
+        return allValues();
+    }
     return m_data.at(m_index).value;
 }
 
@@ -131,21 +137,42 @@ uint OptionsModel::bitMask(int index) const
 {
     const Data item = m_data.at(index);
 
+    if (item.optionType == SelectAllOption) {
+        return allOptionsMask();
+    }
     if (m_useFlags) {
         return item.value.toUInt();
     }
     return 1u << index;
 }
 
+QVariant OptionsModel::allValues() const
+{
+    if (m_useFlags) {
+        return allOptionsMask();
+    }
+
+    QVariantList list;
+    for (const Data &item : qAsConst(m_data)) {
+        if (item.optionType == NormalOption) {
+            list << item.value;
+        }
+    }
+    return list;
+}
+
 uint OptionsModel::allOptionsMask() const
 {
     uint mask = 0;
     for (int index = 0; index < m_data.count(); index++) {
-        mask += bitMask(index);
+        if (m_data.at(index).optionType == NormalOption) {
+            mask += bitMask(index);
+        }
     }
     return mask;
 }
 
+
 void OptionsModel::updateModelData(const QList<Data> &data) {
     beginResetModel();
     m_data = data;
diff --git a/kcmkwin/kwinrules/ruleitem.cpp b/kcmkwin/kwinrules/ruleitem.cpp
index 810bfe256..fa6d36304 100644
--- a/kcmkwin/kwinrules/ruleitem.cpp
+++ b/kcmkwin/kwinrules/ruleitem.cpp
@@ -153,6 +153,9 @@ QVariant RuleItem::options() const
 
 void RuleItem::setOptionsData(const QList<OptionsModel::Data> &data)
 {
+    if (m_type != Option && m_type != OptionList && m_type != NetTypes) {
+        return;
+    }
     if (!m_options) {
         m_options = new OptionsModel({}, m_type == NetTypes);
     }
@@ -213,6 +216,8 @@ QVariant RuleItem::typedValue(const QVariant &value) const
         return value.toString().trimmed();
     case Shortcut:
         return value.toString();
+    case OptionList:
+        return value.toStringList();
     }
     return value;
 }
diff --git a/kcmkwin/kwinrules/ruleitem.h b/kcmkwin/kwinrules/ruleitem.h
index cb2ef74d0..addb2666d 100644
--- a/kcmkwin/kwinrules/ruleitem.h
+++ b/kcmkwin/kwinrules/ruleitem.h
@@ -45,7 +45,8 @@ public:
         Percentage,
         Point,
         Size,
-        Shortcut
+        Shortcut,
+        OptionList,
     };
     Q_ENUM(Type)
 
diff --git a/kcmkwin/kwinrules/rulesmodel.cpp b/kcmkwin/kwinrules/rulesmodel.cpp
index acb13c44a..90e84dddd 100644
--- a/kcmkwin/kwinrules/rulesmodel.cpp
+++ b/kcmkwin/kwinrules/rulesmodel.cpp
@@ -21,7 +21,6 @@
 
 #include "rulesmodel.h"
 #include "rules/rules.h"
-
 #include <QIcon>
 #include <QQmlEngine>
 #include <QtDBus>
@@ -444,10 +443,19 @@ void RulesModel::populateRuleList()
                          QIcon::fromTheme("resizerow")));
 
     RuleItem *desktops;
-    desktops = new RuleItem(QLatin1String("desktops"),
-                            RulePolicy::SetRule, RuleItem::Option,
-                            i18n("Virtual Desktop"), i18n("Size & Position"),
-                            QIcon::fromTheme("virtual-desktops"));
+    if (KWindowSystem::isPlatformX11()) {
+        // Single selection of Virtual Desktop on X11
+        desktops = new RuleItem(QLatin1String("desktops"),
+                                RulePolicy::SetRule, RuleItem::Option,
+                                i18n("Virtual Desktop"), i18n("Size & Position"),
+                                QIcon::fromTheme("virtual-desktops"));
+    } else {
+        // Multiple selection on Wayland
+        desktops = new RuleItem(QLatin1String("desktops"),
+                                RulePolicy::SetRule, RuleItem::OptionList,
+                                i18n("Virtual Desktops"), i18n("Size & Position"),
+                                QIcon::fromTheme("virtual-desktops"));
+    }
     addRule(desktops);
     desktops->setOptionsData(virtualDesktopsModelData());
 
@@ -639,7 +647,6 @@ const QHash<QString, QString> RulesModel::x11PropertyHash()
         { "caption",            "title"         },
         { "role",               "windowrole"    },
         { "clientMachine",      "clientmachine" },
-        { "x11DesktopNumber",   "desktop"       },
         { "maximizeHorizontal", "maximizehoriz" },
         { "maximizeVertical",   "maximizevert"  },
         { "minimized",          "minimize"      },
@@ -651,7 +658,8 @@ const QHash<QString, QString> RulesModel::x11PropertyHash()
         { "skipPager",          "skippager"     },
         { "skipSwitcher",       "skipswitcher"  },
         { "type",               "type"          },
-        { "desktopFile",        "desktopfile"   }
+        { "desktopFile",        "desktopfile"   },
+        { "desktops",           "desktop"       },
     };
     return propertyToRule;
 };
-- 
GitLab

