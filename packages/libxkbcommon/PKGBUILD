pkgbase=libxkbcommon-git
pkgname=(libxkbcommon-git libxkbcommon-x11-git)
pkgver=1.9.0_r2593.g9ffe3cfc
pkgrel=1
pkgdesc='Keymap handling library for toolkits and window systems'
url='https://xkbcommon.org/'
arch=($CARCH)
license=(custom)
makedepends=(git doxygen libxcb libxml2 meson wayland wayland-protocols xkeyboard-config xorgproto clang llvm)
checkdepends=(libgl)
source=("git+https://github.com/xkbcommon/${pkgbase%-git}.git")
sha256sums=('SKIP')

pkgver() {
  cd ${pkgbase%-git}
  _ver="$(grep -m1 'version:' meson.build | cut -d "'" -f2 | tr - .)"
  echo "${_ver}_r$(git rev-list --count HEAD).g$(git rev-parse --short HEAD)"
}

prepare() {
  cd libxkbcommon

  # Create directories for profile data
  mkdir -p "${srcdir}/pgo-data"
  mkdir -p "${srcdir}/cs-pgo-data"
}

build() {
  # Define PGO instrumentation flags
  local _common_instrument_flags="-g3 -fno-omit-frame-pointer -Xclang -mllvm -Xclang -vp-counters-per-site=50 -Xclang -mllvm -Xclang -runtime-counter-relocation -Xclang -mllvm -Xclang -enable-value-profiling"

  # Store original flags
  local _orig_cflags="${CFLAGS}"
  local _orig_cxxflags="${CXXFLAGS}"
  local _orig_ldflags="${LDFLAGS}"

  # Step 1: Standard PGO instrumentation build
  export CC=clang
  export CXX=clang++

  # Use arch-meson with explicit C compiler specification
  arch-meson libxkbcommon build-pgo-gen \
       -D enable-docs=false \
       -D default-layout=de \
       --buildtype=debug \
       -Dc_args="${_orig_cflags} -fprofile-generate=${srcdir}/pgo-data ${_common_instrument_flags}" \
       -Dcpp_args="${_orig_cxxflags} -fprofile-generate=${srcdir}/pgo-data ${_common_instrument_flags}" \
       -Dc_link_args="${_orig_ldflags} -fprofile-generate=${srcdir}/pgo-data ${_common_instrument_flags}" \
       -Dcpp_link_args="${_orig_ldflags} -fprofile-generate=${srcdir}/pgo-data ${_common_instrument_flags}"

  ninja -C build-pgo-gen

  # Run tests to generate profile data
  cd build-pgo-gen
  xvfb-run -s '-nolisten local' meson test --print-errorlogs || true
  cd ..

  # Merge profile data
  llvm-profdata merge -output="${srcdir}/standard.profdata" "${srcdir}/pgo-data/"

  # Step 2: Context-sensitive PGO instrumentation build

  arch-meson libxkbcommon build-cs-pgo-gen \
       -D enable-docs=false \
       -D default-layout=de \
       --buildtype=debug \
       -Dc_args="${_orig_cflags} -fprofile-use=${srcdir}/standard.profdata -fcs-profile-generate=${srcdir}/cs-pgo-data ${_common_instrument_flags}" \
       -Dcpp_args="${_orig_cxxflags} -fprofile-use=${srcdir}/standard.profdata -fcs-profile-generate=${srcdir}/cs-pgo-data ${_common_instrument_flags}" \
       -Dc_link_args="${_orig_ldflags} -fprofile-use=${srcdir}/standard.profdata -fcs-profile-generate=${srcdir}/cs-pgo-data ${_common_instrument_flags}" \
       -Dcpp_link_args="${_orig_ldflags} -fprofile-use=${srcdir}/standard.profdata -fcs-profile-generate=${srcdir}/cs-pgo-data ${_common_instrument_flags}"

  ninja -C build-cs-pgo-gen

  # Run tests again to generate context-sensitive profile data
  cd build-cs-pgo-gen
  xvfb-run -s '-nolisten local' meson test --print-errorlogs || true
  cd ..

  # Merge both profile data
  llvm-profdata merge -output="${srcdir}/merged.profdata" "${srcdir}/cs-pgo-data/" "${srcdir}/standard.profdata"

  # Step 3: Final build with merged profile data
  export CFLAGS="${_orig_cflags}"
  export CXXFLAGS="${_orig_cxxflags}"
  export LDFLAGS="${_orig_ldflags}"

  arch-meson libxkbcommon build \
       -D enable-docs=false \
       -D default-layout=de \
       --buildtype=release \
       -Dc_args="${_orig_cflags} -fprofile-use=${srcdir}/merged.profdata" \
       -Dcpp_args="${_orig_cxxflags} -fprofile-use=${srcdir}/merged.profdata" \
       -Dc_link_args="${_orig_ldflags} -fprofile-use=${srcdir}/merged.profdata" \
       -Dcpp_link_args="${_orig_ldflags} -fprofile-use=${srcdir}/merged.profdata"

  ninja -C build
}

check() {
  meson test -C build --print-errorlogs
}

_pick() {
  local p="$1" f d; shift
  for f; do
    d="$srcdir/$p/${f#$pkgdir/}"
    mkdir -p "$(dirname "$d")"
    mv "$f" "$d"
    rmdir -p --ignore-fail-on-non-empty "$(dirname "$f")"
  done
}

package_libxkbcommon-git() {
  depends=(libxml2 xkeyboard-config)
  optdepends=(
    'libxkbcommon-x11: xkbcli interactive-x11'
    'wayland: xkbcli interactive-wayland'
  )
  conflicts=(libxkbcommon)
  provides=(libxkbcommon{,.so} libxkbregistry.so)

  DESTDIR="$pkgdir" ninja -C build install

  install -Dt "$pkgdir/usr/share/licenses/$pkgname" -m644 libxkbcommon/LICENSE
}

package_libxkbcommon-x11-git() {
  pkgdesc='Keyboard handling library using XKB data for X11 XCB clients'
  depends=(libxcb libxkbcommon-git libxkbcommon.so)
  conflicts=(libxkbcommon-x11)
  provides=(libxkbcommon-x11{,.so})

  install -Dt "$pkgdir/usr/share/licenses/$pkgname" -m644 libxkbcommon/LICENSE
}
