pkgname=libpng-git
pkgver=1.6.47.r5.g44f97f08d
pkgrel=1
pkgdesc="The official PNG reference library"
arch=('i686' 'x86_64')
url="http://www.libpng.org/pub/png/libpng.html"
license=('Custom')
depends=('glibc' 'zlib' 'sh')
makedepends=('git' 'clang' 'llvm')
provides=("libpng" "libpng=$pkgver-$pkgrel" libpng16.so=16-64)
conflicts=('libpng')
options=('staticlibs')
source=("git+https://git.code.sf.net/p/libpng/code")
sha256sums=('SKIP')

# Common instrumentation flags for PGO
_common_instrument_flags=" -g3 -fno-omit-frame-pointer -mllvm -vp-counters-per-site=10 -mllvm -runtime-counter-relocation -mllvm -enable-value-profiling"

pkgver() {
  cd "code"

  git describe --long --tags | sed 's/^libpng-//;s/^v//;s/-master//;s/-signed//;s/\([^-]*-g\)/r\1/;s/-/./g'
}

prepare() {
  # Ensure we're using Clang for PGO
  export CC=clang
  export CXX=clang++
}

build() {
  cd "code"

  # Run autoreconf once in the source directory to generate the configure script
  echo "Running autoreconf in source directory..."
  autoreconf -vfi

  # Step 1: Build with standard PGO instrumentation (-fprofile-generate)
  echo "Building with PGO instrumentation..."
  mkdir -p build-pgo
  cd build-pgo
  ../configure \
    --enable-hardware-optimizations=yes \
    --enable-intel-sse=yes \
    --prefix="/usr" \
    CFLAGS="${CFLAGS} ${_common_instrument_flags} -fprofile-generate=/tmp/pgo-data" \
    CXXFLAGS="${CXXFLAGS} ${_common_instrument_flags} -fprofile-generate=/tmp/pgo-data" \
    LDFLAGS="${LDFLAGS}"
  make

  # Step 2: Generate profile data by running tests
  echo "Generating PGO profile data..."
  # Note: The check() function is commented out in the original PKGBUILD.
  # If tests are available, run them here to generate profile data.
  # For demonstration, we'll assume a basic test run. Adjust as needed.
  make check || true  # Allow tests to fail without stopping the build

  # Merge the generated profile data
  echo "Merging PGO profile data..."
  llvm-profdata merge -output=code.profdata /tmp/pgo-data/

  # Step 3: Build with context-sensitive PGO instrumentation (-fcs-profile-generate)
  echo "Building with context-sensitive PGO instrumentation..."
  cd ..
  mkdir -p build-cs-pgo
  cd build-cs-pgo
  ../configure \
    --enable-hardware-optimizations=yes \
    --enable-intel-sse=yes \
    --prefix="/usr" \
    CFLAGS="${CFLAGS} ${_common_instrument_flags} -fprofile-use=$(pwd)/code.profdata -fcs-profile-generate=/tmp/cs-pgo-data" \
    CXXFLAGS="${CXXFLAGS} ${_common_instrument_flags} -fprofile-use=$(pwd)/code.profdata -fcs-profile-generate=/tmp/cs-pgo-data" \
    LDFLAGS="${LDFLAGS}"
  make

  # Step 4: Generate context-sensitive profile data by running tests again
  echo "Generating context-sensitive PGO profile data..."
  make check || true  # Allow tests to fail without stopping the build

  # Merge the context-sensitive profile data with the standard PGO data
  echo "Merging context-sensitive PGO profile data..."
  llvm-profdata merge -output=cs_code.profdata /tmp/cs-pgo-data code.profdata

  # Step 5: Final optimized build using both profiles (-fprofile-use)
  echo "Building final optimized binary with PGO and CS-PGO profiles..."
  cd ..
  mkdir -p build-final
  cd build-final
  ../configure \
    --enable-hardware-optimizations=yes \
    --enable-intel-sse=yes \
    --prefix="/usr" \
    CFLAGS="${CFLAGS} ${_common_instrument_flags} -fprofile-use=$(pwd)/cs_code.profdata" \
    CXXFLAGS="${CXXFLAGS} ${_common_instrument_flags} -fprofile-use=$(pwd)/cs_code.profdata" \
    LDFLAGS="${LDFLAGS}"
  make

  # Step 6: Build contrib/pngminus tools using the final optimized library
  echo "Building contrib/pngminus tools..."
  cd ../contrib/pngminus
  make \
    PNGLIB_SHARED="-L$(pwd)/../../build-final/.libs -lpng" \
    png2pnm \
    pnm2png

  # Step 7: Clean up temporary profile data directories
  rm -rf /tmp/pgo-data /tmp/cs-pgo-data
}

check() {
  # Run tests on the final optimized build
  cd "code/build-final"
  make check
}

package() {
  cd "code/build-final"

  make DESTDIR="$pkgdir" install
  install -Dm644 "../LICENSE" -t "$pkgdir/usr/share/licenses/libpng"

  install -Dm755 ../contrib/pngminus/{png2pnm,pnm2png} -t "$pkgdir/usr/bin"
}
