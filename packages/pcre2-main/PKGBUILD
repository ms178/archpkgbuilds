pkgname=pcre2
pkgver=10.47
pkgrel=3.1
pkgdesc='A library that implements Perl 5-style regular expressions. 2nd version'
arch=(x86_64 x86_64_v3)
url='https://github.com/PCRE2Project/pcre2'
license=(
  BSD-2-Clause
  'BSD-3-Clause WITH PCRE2-exception'
)
depends=(
  bzip2
  glibc
  readline
  zlib
)
makedepends=(git)
optdepends=('sh: for pcre2-config')
provides=(libpcre2-{8,16,32,posix}.so)
options=(staticlibs)
source=(
  $pkgname::git+$url?signed#tag=$pkgname-$pkgver
  sljit::git+https://github.com/zherczeg/sljit.git
)
sha512sums=('02e1b9972c00e3eae7d07ddf0519f19b5291c979fa316453d24fea41adce3e3213f484049091df448765b799b66556901c24a6238fd48a1eef79614319a1c68e'
            'SKIP')
b2sums=('196dfcbf6f096b91cb2b72cd1eab53e42a72435f27224fb02fb846f52939d2ae44f1d3ef6d59c024919be9dc00774e13e1bf3c82bec2acb1ac1cf64d66a721cc'
        'SKIP')
validpgpkeys=(
  45F68D54BBE23FB3039B46E59766E084FB0F43D8  # Philip Hazel <ph10@hermes.cam.ac.uk>
  A95536204A3BB489715231282A98E77EB6F24CA8  # Nicholas Wilson <nicholas@nicholaswilson.me.uk>
)

# ============================================================================
# PGO CONFIGURATION
# ============================================================================
_pgo_enabled=true
_pgo_verbose=true

# ============================================================================
# COMPREHENSIVE 15-STAGE PGO TRAINING WORKLOAD
# ============================================================================
run_pgo_training_workload() {
  local build_dir="${1}"
  local stage="${2:-training}"

  echo ""
  echo "╔════════════════════════════════════════════════════════════════╗"
  echo "║  PCRE2 PGO Training - Stage: ${stage}"
  echo "╚════════════════════════════════════════════════════════════════╝"

  [[ ! -d "$build_dir" ]] && { echo "ERROR: Build directory not found"; return 1; }

  export LD_LIBRARY_PATH="$build_dir/.libs:$LD_LIBRARY_PATH"

  local pcre2grep="$build_dir/.libs/pcre2grep"
  local pcre2test="$build_dir/pcre2test"

  [[ ! -x "$pcre2grep" ]] && pcre2grep="$build_dir/pcre2grep"

  local testdata="$build_dir/pgo_training_data.txt"
  cat > "$testdata" <<'TRAINING_EOF'
user@example.com
test.user+tag@subdomain.example.co.uk
192.168.1.1
10.0.0.1
2001:0db8:85a3:0000:0000:8a2e:0370:7334
https://www.example.com/path/to/resource?query=value
http://subdomain.test.org:8080/api/v1/endpoint
<html><head><title>Test</title></head><body>Content</body></html>
<div class="container" id="main">Text</div>
2024-01-15 10:30:45 ERROR: Failed to connect to database
[2024-01-15T10:30:45Z] WARNING: Deprecated API usage detected
The quick brown fox jumps over the lazy dog
Lorem ipsum dolor sit amet
Héllo Wörld with áccents
日本語のテキスト
Привет мир
مرحبا بالعالم
你好世界
🎉 Emoji test 🚀
3.14159265359
0x1A2B3C4D
"double quoted"
'single quoted'
TRAINING_EOF

  local test_results="$build_dir/pgo_results.txt"

  echo "[1/15] Email patterns..."
  [[ -x "$pcre2grep" ]] && {
    "$pcre2grep" -E '[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}' "$testdata" >> "$test_results" 2>/dev/null || true
    "$pcre2grep" -o -E '[^@]+@[^@]+' "$testdata" >> "$test_results" 2>/dev/null || true
  }

  echo "[2/15] IP addresses..."
  [[ -x "$pcre2grep" ]] && {
    "$pcre2grep" -E '([0-9]{1,3}\.){3}[0-9]{1,3}' "$testdata" >> "$test_results" 2>/dev/null || true
    "$pcre2grep" -E '([0-9a-fA-F]{0,4}:){2,7}[0-9a-fA-F]{0,4}' "$testdata" >> "$test_results" 2>/dev/null || true
  }

  echo "[3/15] URLs..."
  [[ -x "$pcre2grep" ]] && "$pcre2grep" -E 'https?://[^\s]+' "$testdata" >> "$test_results" 2>/dev/null || true

  echo "[4/15] HTML tags..."
  [[ -x "$pcre2grep" ]] && "$pcre2grep" -E '<[^>]+>' "$testdata" >> "$test_results" 2>/dev/null || true

  echo "[5/15] Log levels..."
  [[ -x "$pcre2grep" ]] && "$pcre2grep" -E '(ERROR|WARNING|INFO):' "$testdata" >> "$test_results" 2>/dev/null || true

  echo "[6/15] Case-insensitive..."
  [[ -x "$pcre2grep" ]] && "$pcre2grep" -i 'test' "$testdata" >> "$test_results" 2>/dev/null || true

  echo "[7/15] Word boundaries..."
  [[ -x "$pcre2grep" ]] && "$pcre2grep" -E '\b\w{5,}\b' "$testdata" >> "$test_results" 2>/dev/null || true

  echo "[8/15] Unicode..."
  [[ -x "$pcre2grep" ]] && {
    "$pcre2grep" -u '\p{L}+' "$testdata" >> "$test_results" 2>/dev/null || true
    "$pcre2grep" -u '\p{Han}+' "$testdata" >> "$test_results" 2>/dev/null || true
  }

  echo "[9/15] Numbers..."
  [[ -x "$pcre2grep" ]] && "$pcre2grep" -E '\b\d+\b' "$testdata" >> "$test_results" 2>/dev/null || true

  echo "[10/15] Backreferences..."
  [[ -x "$pcre2grep" ]] && "$pcre2grep" -E '(\w+)\s+\1' "$testdata" >> "$test_results" 2>/dev/null || true

  echo "[11/15] pcre2test 8-bit..."
  if [[ -x "$pcre2test" ]]; then
    cat > "$build_dir/pgo_patterns.txt" <<'PATTERNS_EOF'
/[a-z]+/i,jit
    ABC
/\d{3}-\d{4}/jit
    123-4567
/\b\w{5}\b/jit
    hello world
PATTERNS_EOF
    "$pcre2test" "$build_dir/pgo_patterns.txt" >> "$test_results" 2>&1 || true
  fi

  echo "[12/15] pcre2test 16-bit..."
  [[ -x "$pcre2test" ]] && "$pcre2test" -16 "$build_dir/pgo_patterns.txt" >> "$test_results" 2>&1 || true

  echo "[13/15] pcre2test 32-bit..."
  [[ -x "$pcre2test" ]] && "$pcre2test" -32 "$build_dir/pgo_patterns.txt" >> "$test_results" 2>&1 || true

  echo "[14/15] Stress test..."
  if [[ -x "$pcre2grep" ]]; then
    local large="$build_dir/large.txt"
    for i in {1..1000}; do echo "Line $i: test user$i@example.com"; done > "$large"
    "$pcre2grep" -E '\b\w{5,}\b' "$large" >> "$test_results" 2>/dev/null || true
    "$pcre2grep" -E '[0-9]+' "$large" >> "$test_results" 2>/dev/null || true
    rm -f "$large"
  fi

  echo "[15/15] Complex patterns..."
  [[ -x "$pcre2grep" ]] && "$pcre2grep" -E '(\w+)@(\w+)\.(\w+)' "$testdata" >> "$test_results" 2>/dev/null || true

  rm -f "$testdata" "$build_dir/pgo_patterns.txt" "$test_results"

  echo "✓ Training completed"
  echo ""
  return 0
}

# ============================================================================
# PREPARE PHASE
# ============================================================================
prepare() {
  cd "$pkgname"
  git submodule init
  git config submodule."deps/sljit".url ../sljit
  git -c protocol.file.allow=always submodule update
  ./autogen.sh

  cp -v deps/sljit/LICENSE ../BSD-2-Clause.txt

  local license_file=""
  [[ -f COPYING ]] && license_file="COPYING"
  [[ -f LICENCE ]] && license_file="LICENCE"
  [[ -z "$license_file" ]] && { echo "ERROR: License file not found"; return 1; }

  sed -n '70,94p' "$license_file" > ../BSD-3-Clause.txt
  sed -n '100,104p' "$license_file" > ../PCRE2-exception.txt
}

# ============================================================================
# BUILD PHASE WITH STANDARD PGO
# ============================================================================
build() {
  local configure_options=(
    --enable-jit
    --enable-pcre2-16
    --enable-pcre2-32
    --enable-pcre2grep-libbz2
    --enable-pcre2grep-libz
    --enable-pcre2test-libreadline
    --prefix=/usr
  )

  cd "$pkgname"

  # Compiler detection
  local compiler_name="${CC:-gcc}"
  local is_clang=false

  [[ "$compiler_name" == *"clang"* ]] && is_clang=true
  [[ "$is_clang" == "false" ]] && {
    local ver=$($compiler_name --version 2>&1 || echo "")
    echo "$ver" | grep -qi "clang" && is_clang=true
  }

  [[ "$_pgo_verbose" == "true" ]] && {
    echo "════════════════════════════════════════════════════════════════"
    echo "Compiler: $compiler_name (Clang: $is_clang)"
    echo "════════════════════════════════════════════════════════════════"
  }

  # Base flags
  #CFLAGS+=" -ffat-lto-objects"
  #CXXFLAGS+=" -ffat-lto-objects"

  # ============================================================================
  # 3-STAGE STANDARD PGO
  # ============================================================================
  if [[ "$_pgo_enabled" == "true" ]]; then

    echo ""
    echo "╔══════════════════════════════════════════════════════════════════╗"
    echo "║         BUILDING WITH PROFILE-GUIDED OPTIMIZATION                ║"
    echo "║              3-Stage Standard PGO                                ║"
    echo "╚══════════════════════════════════════════════════════════════════╝"
    echo ""

    local pgo_dir="$srcdir/pgo-profiles"
    mkdir -p "$pgo_dir"

    local CFLAGS_ORIG="$CFLAGS"
    local CXXFLAGS_ORIG="$CXXFLAGS"
    local LDFLAGS_ORIG="$LDFLAGS"

    # =========================================================================
    # STAGE 1: Instrumentation
    # =========================================================================
    echo "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓"
    echo "┃  STAGE 1/3: Instrumentation Build                               ┃"
    echo "┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛"

    if [[ "$is_clang" == "true" ]]; then
      # CORRECT: Use -fprofile-generate without path in flags
      export CFLAGS="$CFLAGS_ORIG -fprofile-generate"
      export CXXFLAGS="$CXXFLAGS_ORIG -fprofile-generate"
      export LDFLAGS="$LDFLAGS_ORIG -fprofile-generate"
      export LLVM_PROFILE_FILE="$pgo_dir/default-%m.profraw"
      echo "→ Using -fprofile-generate (Clang)"
      echo "  Profile output: $pgo_dir"
    else
      export CFLAGS="$CFLAGS_ORIG -fprofile-generate"
      export CXXFLAGS="$CXXFLAGS_ORIG -fprofile-generate"
      export LDFLAGS="$LDFLAGS_ORIG -fprofile-generate"
      echo "→ Using -fprofile-generate (GCC)"
    fi

    ./configure "${configure_options[@]}"
    make -j"$(nproc)" || make

    echo "✓ Stage 1 complete"

    # =========================================================================
    # STAGE 2: Profile Generation
    # =========================================================================
    echo ""
    echo "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓"
    echo "┃  STAGE 2/3: Profile Generation                                   ┃"
    echo "┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛"

    echo "→ Running test suite..."
    make -j1 check 2>&1 | grep -v "LLVM Profile Warning" || true

    echo ""
    echo "→ Running training workload..."
    run_pgo_training_workload "$PWD" "instrumentation" || true

    echo ""
    echo "→ Collecting profiles..."

    local profile_final=""
    if [[ "$is_clang" == "true" ]]; then
      find "$srcdir/$pkgname" -name "*.profraw" -exec mv {} "$pgo_dir/" \; 2>/dev/null || true

      local count=$(find "$pgo_dir" -name "*.profraw" 2>/dev/null | wc -l)
      echo "  Found $count .profraw files"

      [[ $count -eq 0 ]] && { echo "ERROR: No profiles!"; return 1; }

      profile_final="$pgo_dir/merged.profdata"
      echo "→ Merging..."
      llvm-profdata merge -output="$profile_final" "$pgo_dir"/*.profraw || {
        echo "ERROR: Merge failed"
        return 1
      }

      local size=$(stat -c%s "$profile_final" 2>/dev/null || echo "0")
      echo "✓ Profile: $profile_final ($size bytes)"
      rm -f "$pgo_dir"/*.profraw
    else
      local count=$(find "$srcdir/$pkgname" -name "*.gcda" 2>/dev/null | wc -l)
      echo "  Found $count .gcda files"
      [[ $count -eq 0 ]] && { echo "ERROR: No profiles!"; return 1; }
      echo "✓ GCC profiles ready"
    fi

    # =========================================================================
    # STAGE 3: Optimized Build
    # =========================================================================
    echo ""
    echo "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓"
    echo "┃  STAGE 3/3: Optimized Build                                     ┃"
    echo "┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛"

    echo "→ Cleaning..."
    make clean
    rm -f .libs/*.so* .libs/*.a 2>/dev/null || true

    unset LLVM_PROFILE_FILE

    if [[ "$is_clang" == "true" ]]; then
      export CFLAGS="$CFLAGS_ORIG -fprofile-use=$profile_final"
      export CXXFLAGS="$CXXFLAGS_ORIG -fprofile-use=$profile_final"
      export LDFLAGS="$LDFLAGS_ORIG -fprofile-use=$profile_final"
      echo "→ Using -fprofile-use (Clang)"
    else
      export CFLAGS="$CFLAGS_ORIG -fprofile-use -fprofile-correction"
      export CXXFLAGS="$CXXFLAGS_ORIG -fprofile-use -fprofile-correction"
      export LDFLAGS="$LDFLAGS_ORIG -fprofile-use"
      echo "→ Using -fprofile-use (GCC)"
    fi

    ./configure "${configure_options[@]}"
    make -j"$(nproc)" || make

    echo "✓ Stage 3 complete"

    echo ""
    echo "╔══════════════════════════════════════════════════════════════════╗"
    echo "║          ✓ PROFILE-GUIDED OPTIMIZATION COMPLETE                  ║"
    echo "╚══════════════════════════════════════════════════════════════════╝"
    echo ""

  else
    echo "Building without PGO..."
    ./configure "${configure_options[@]}"
    make -j"$(nproc)" || make
  fi
}

# ============================================================================
# CHECK PHASE
# ============================================================================
check() {
  cd "$pkgname"

  echo ""
  echo "╔══════════════════════════════════════════════════════════════════╗"
  echo "║                    RUNNING TEST SUITE                            ║"
  echo "╚══════════════════════════════════════════════════════════════════╝"
  echo ""

  make -j1 check

  [[ "$_pgo_enabled" == "true" ]] && {
    echo ""
    echo "→ Validating..."
    run_pgo_training_workload "$PWD" "validation" || true
  }

  echo ""
  echo "✓ Tests passed"
  echo ""
}

# ============================================================================
# PACKAGE PHASE
# ============================================================================
package() {
  make DESTDIR="$pkgdir" install -C "$pkgname"
  install -Dm644 ./*.txt -t "$pkgdir/usr/share/licenses/$pkgname/"
}

# vim:set sw=2 sts=-1 et:
