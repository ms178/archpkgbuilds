pkgname=heroic-games-launcher
_pkgver=2.18.1
pkgver=2.18.1
pkgrel=4.10
pkgdesc='A Native GOG and Epic Games Launcher for Linux (built from source)'
arch=(x86_64)
url='https://heroicgameslauncher.com/'
license=(GPL3)
depends=(alsa-lib gtk3 nss)
makedepends=(git pnpm nodejs clang jq)
options=(!debug)
source=("git+https://github.com/Heroic-Games-Launcher/HeroicGamesLauncher.git#tag=v${_pkgver}")
sha256sums=('SKIP')

prepare() {
  cd "HeroicGamesLauncher"

  # ---------------------------------------------------------------------------
  #  OVERRIDE: Force a modern version of node-addon-api
  # ---------------------------------------------------------------------------
  # This correctly solves the native addon compilation error with modern clang.
  msg "Applying pnpm override for node-addon-api using jq..."
  jq '.pnpm.overrides."node-addon-api" = "8.0.0"' package.json > package.json.tmp && mv package.json.tmp package.json

  # ---------------------------------------------------------------------------
  #  Install dependencies and update lockfile
  # ---------------------------------------------------------------------------
  # This correctly regenerates the lockfile to respect our override.
  msg "Installing dependencies and regenerating lockfile to apply override..."
  pnpm install
  pnpm add -Dw electron-builder@26.0.12
}

build() {
  cd "HeroicGamesLauncher"

  # ---------------------------------------------------------------------------
  #  Build a native unpacked directory ONLY
  # ---------------------------------------------------------------------------
  # We must execute the project's own build command first. This calls
  # `electron-vite build` to compile the TypeScript source into JavaScript.
  # Bypassing this step was the cause of the "main.js not found" error.
  msg "Step 1/2: Compiling application source with electron-vite..."
  pnpm exec electron-vite build

  # After the source is compiled, we call electron-builder directly and
  # instruct it to package the compiled files into a simple directory (`dir`).
  # This is the fastest option and gives us exactly what we need for a native
  # package, preventing the creation of unwanted Snap or AppImage files.
  msg "Step 2/2: Packaging into a native directory with electron-builder..."
  pnpm exec electron-builder --linux dir
}

package() {
  cd "HeroicGamesLauncher"

  # Main application files from the unpacked directory
  install -d "${pkgdir}/opt/heroic"
  cp -r dist/linux-unpacked/* "${pkgdir}/opt/heroic"

  # Convenience wrapper
  install -d "${pkgdir}/usr/bin"
  ln -s /opt/heroic/heroic "${pkgdir}/usr/bin/heroic-games-launcher"

  # Icon - Use the stable source icon from the public directory.
  install -Dm644 "public/icon.png" "${pkgdir}/usr/share/pixmaps/heroic.png"

  # Desktop entry
  install -d "${pkgdir}/usr/share/applications"
  cat > "${pkgdir}/usr/share/applications/heroic.desktop" << _EOF_
[Desktop Entry]
Name=Heroic Games Launcher
Exec=heroic-games-launcher %U
Terminal=false
Type=Application
Icon=heroic
StartupWMClass=Heroic
Comment=Open-source GOG and Epic Games launcher
MimeType=x-scheme-handler/heroic;
Categories=Game;
_EOF_
}
